{"Data":{"Blog":{"FeedItems":[{"Title":"The What, Why, and How of Mobile DevOps with Visual Studio App Center","PublishedOn":"2018-01-22T18:52:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With constant operating system releases, ever-shifting user expectations, and new form factors launching every year, making sure your apps are high-quality, take advantage of the latest technology,...","Href":"https://blog.xamarin.com/mobile-devops-visual-studio-app-center/","RawContent":null},{"Title":"Running Xamarin.iOS Unit Tests in Visual Studio Team Services","PublishedOn":"2018-01-19T18:32:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In previous posts, we&#8217;ve discussed how to set up continuous integration for your Xamarin.iOS applications inside Visual Studio Team Services(VSTS) using the new Hosted macOS Agent. Building the...","Href":"https://blog.xamarin.com/running-xamarin-ios-unit-tests-visual-studio-team-services/","RawContent":null},{"Title":"The Xamarin Show: Getting Started with iOS Development in C#","PublishedOn":"2018-01-18T18:54:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re looking to get started with iOS development, there&#8217;s no better place to look than our amazing Xamarin.iOS documentation guides. They cover each and every topic that you can...","Href":"https://blog.xamarin.com/the-xamarin-show-getting-started-with-ios-development-in-c-sharp/","RawContent":null},{"Title":"The C# Developer’s Guide to Shipping Better Apps with Visual Studio App Center","PublishedOn":"2018-01-16T19:41:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At our annual Microsoft Connect event in November, we announced the General Availability of Visual Studio App Center, combining our best developer services, incuding Xamarin Test Cloud and HockeyApp,...","Href":"https://blog.xamarin.com/c-developers-guide-shipping-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Podcast: Android 8.1, Xamarin Device Manager, and Visual Studio versions 15.5 & 15.6","PublishedOn":"2018-01-12T20:59:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Android 8.1, the new Xamarin Device Manager Preview, what&#8217;s new for mobile developers in Visual Studio versions 15.5/15.6,...","Href":"https://blog.xamarin.com/podcast-android-8-1-xamarin-device-manager-visual-studio-versions-15-5-15-6/","RawContent":null},{"Title":"Xamarin.Android Now Double Stuffed with Oreo 8.1","PublishedOn":"2018-01-11T19:55:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Oreo 8.1 introduces new features, including Android Go, Neural Networks API, Autofill framework enhancements, SharedMemory API, and many more. We&#8217;re excited to announce Xamarin.Android...","Href":"https://blog.xamarin.com/xamarin-android-now-double-stuffed-with-oreo-8-1/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-11T14:55:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join Mark Smith, Director of Xamarin University, on Thursday, January 25 at 9 am PT / 12 pm ET / 5 pm GMT to learn how to automate your app development pipeline with Visual Studio App Center. You’ll...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Visual Studio 2017 Version 15.6 Preview Available Today!","PublishedOn":"2018-01-10T19:16:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last month, we released Visual Studio 2017 version 15.5, which came with awesome new features, including the iOS Remoted Simulator becoming available to all developers, live XAML previewing in Android...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-6-preview-available-today/","RawContent":null},{"Title":"Delivering Rich Media Experiences with the Xamarin.Forms Video Player","PublishedOn":"2018-01-09T18:42:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Adam Fisher. Adam is the founder of Octane Software, focused on the creation of consumer Internet products. You can find Adam on Twitter at @adamgfisher and on Github at...","Href":"https://blog.xamarin.com/delivering-rich-media-experiences-xamarin-forms-video-player/","RawContent":null},{"Title":"Colonial Life Drives Field Sales Productivity with .NET, Mobile, and DevOps","PublishedOn":"2018-01-05T19:59:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET community is millions of developers strong, with people around the world turning ideas into apps across web, mobile, desktop, and the newest connected device platforms. Colonial Life’s...","Href":"https://blog.xamarin.com/colonial-life-drives-field-sales-productivity-net-mobile-devops/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7135467055","Type":"PullRequestEvent","CreatedAt":"2018-01-23T01:14:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1219","RelatedDescription":"Merged pull request \"Bump to mono/2017-10/ab882c0c\" (#1219) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/dotnet/corefx/issues/23680\r\n\r\nFixes unit tests under iOS, macOS, and watchOS."},{"Id":"7135466574","Type":"PullRequestEvent","CreatedAt":"2018-01-23T01:14:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1211","RelatedDescription":"Merged pull request \"Bump to llvm/master/bdb3a116\" (#1211) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1182"},{"Id":"7135466572","Type":"IssuesEvent","CreatedAt":"2018-01-23T01:14:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1182","RelatedDescription":"Closed issue \"Certain projects are failing to build with AOT and LLVM enabled against d15-6 on Windows\" (#1182) at xamarin/xamarin-android","RelatedBody":"I'm seeing a new failure on Windows when compiling certain projects with both AOT and LLVM. The same error does not reproduce for me on macOS, and appears to be newly introduced in 15.6.\r\n \r\n### Steps to Reproduce\r\n\r\n1. Download ApiDemo - https://github.com/xamarin/monodroid-samples/tree/master/ApiDemo\r\n2. msbuild /p:Configuration=Release /t:SignAndroidPackage /p:AotAssemblies=true /p:EnableLlvm=true ApiDemo.csproj\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nThe project builds successfully with AOT and LLVM enabled.\r\n\r\n### Actual Behavior\r\n```\r\n[aot-compiler stdout] Mono Ahead of Time compiler - compiling assembly C:\\agent\\_work\\r2\\a\\monodroid-samples\\ApiDemo\\obj\\Release\\android\\assets\\shrunk\\Mono.Android.Export.dll (TaskId:348)\r\n  [aot-compiler stdout] AOTID 9B00228E-5ECD-7F32-1753-92A543C073ED (TaskId:348)\r\n  [aot-compiler stdout] Executing opt: \"C:\\PROGRA~2\\MICROS~2\\2017\\ENTERP~1\\MSBuild\\Xamarin\\Android\\opt\" -f -targetlibinfo -no-aa -basicaa -notti -instcombine -simplifycfg -inline-cost -inline -sroa -domtree -early-cse -lazy-value-info -correlated-propagation -simplifycfg -instcombine -simplifycfg -reassociate -domtree -loops -loop-simplify -lcssa -loop-rotate -licm -lcssa -loop-unswitch -instcombine -scalar-evolution -loop-simplify -lcssa -indvars -loop-idiom -loop-deletion -loop-unroll -memdep -gvn -memdep -memcpyopt -sccp -instcombine -lazy-value-info -correlated-propagation -domtree -memdep -adce -simplifycfg -instcombine -strip-dead-prototypes -domtree -verify -o \"C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\Mono.Android.Export.dll\\temp.opt.bc\" \"C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\Mono.Android.Export.dll\\temp.bc\" (TaskId:348)\r\n  [aot-compiler stdout] Executing llc: \"C:\\PROGRA~2\\MICROS~2\\2017\\ENTERP~1\\MSBuild\\Xamarin\\Android\\llc\"  -asm-verbose=false -mtriple=aarch64-linux-android -disable-gnu-eh-frame -enable-mono-eh-frame -mono-eh-frame-symbol=mono_aot_Mono_Android_Export_eh_frame -relocation-model=pic -o \"C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\Mono.Android.Export.dll\\temp-llvm.s\" \"C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\Mono.Android.Export.dll\\temp.opt.bc\" (TaskId:348)\r\n  [aot-compiler stderr] Stack dump: (TaskId:348)\r\n  [aot-compiler stderr] 0.\tProgram arguments: C:\\PROGRA~2\\MICROS~2\\2017\\ENTERP~1\\MSBuild\\Xamarin\\Android\\llc -asm-verbose=false -mtriple=aarch64-linux-android -disable-gnu-eh-frame -enable-mono-eh-frame -mono-eh-frame-symbol=mono_aot_MonoDroid_ApiDemo_eh_frame -relocation-model=pic -o C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\MonoDroid.ApiDemo.dll\\temp-llvm.s C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\MonoDroid.ApiDemo.dll\\temp.opt.bc  (TaskId:348)\r\n  [aot-compiler stderr] 1.\tRunning pass 'Function Pass Manager' on module 'C:\\agent\\_work\\r2\\a\\MONODR~2\\ApiDemo\\obj\\Release\\aot\\ARM64-~1\\MonoDroid.ApiDemo.dll\\temp.opt.bc'. (TaskId:348)\r\n  [aot-compiler stderr] 2.\tRunning pass 'Greedy Register Allocator' on function '@MonoDroid_ApiDemo_ApiDemo_GetDemoActivities_string' (TaskId:348)\r\n  [aot-compiler stderr] AOT of image C:\\agent\\_work\\r2\\a\\monodroid-samples\\ApiDemo\\obj\\Release\\android\\assets\\MonoDroid.ApiDemo.dll failed. (TaskId:348)\r\n```\r\n### Version Information\r\nhttps://gist.github.com/pjcollins/842d3a55d49841a4fa955cd403af1549\r\nAndroid NDK 15.2.4203891\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttp://xqa.blob.core.windows.net/gist/report-7d4d56fee1504d14818b0cef6538694e.txt\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7134814670","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:11:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1206","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add Installer target Import.\" (#1206) at xamarin/xamarin-android","RelatedBody":"We need to add an additional conditional Import for the\r\nInstaller target. This will allow commercial users to use\r\nthe following targets.\r\n\r\n\t`GetAndroidDependencies`\r\n\t`InstallAndroidDependencies`"},{"Id":"7133690509","Type":"PullRequestEvent","CreatedAt":"2018-01-22T18:23:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1219","RelatedDescription":"Opened pull request \"Bump to mono/2017-10/ab882c0c\" (#1219) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/dotnet/corefx/issues/23680\r\n\r\nFixes unit tests under iOS, macOS, and watchOS."},{"Id":"7133463786","Type":"IssuesEvent","CreatedAt":"2018-01-22T17:50:28","Actor":"Belorus","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1218","RelatedDescription":"Opened issue \"Hybrid AOT doesn't work on arm64 device if built with only armv7 architecture selected\" (#1218) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create and Empty application\r\n2. Add `    <AndroidAotMode>Hybrid</AndroidAotMode>` to .csproj\r\n3. Add `    <AotAssemblies>true</AotAssemblies>` to .csproj\r\n\r\n[Repro](https://github.com/xamarin/xamarin-android/files/1652928/App1.zip)\r\n\r\n### Expected Behavior\r\nIt works\r\n### Actual Behavior\r\nIt crashes\r\n### Version Information\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.2\r\nVisualStudio.15.Release/15.5.2+27130.2010\r\nMicrosoft .NET Framework\r\nVersion 4.7.02046\r\n\r\nInstalled Version: Professional\r\n\r\nXamarin   4.8.0.753 (6575bd113)\r\nXamarin.Android SDK   8.1.0.25 (HEAD/d8c6e504f)\r\n\r\n\r\n### Log File\r\n[hybridAOT.log](https://github.com/xamarin/xamarin-android/files/1652924/hybridAOT.log)\r\n\r\n\r\n### Other\r\nIn logs there are warnings like\r\n`W linker  : /data/app/App1.App1-1/lib/arm/libaot-mscorlib.dll.so: is missing DT_SONAME will use basename as a replacement: \"libaot-mscorlib.dll.so\"`\r\n\r\n`F libc    : Fatal signal 11 (SIGSEGV), code 1, fault addr 0x25f44a4c in tid 12103 (App1.App1)`\r\n\r\n```\r\n01-22 20:27:13.783 12150 12150 F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\n01-22 20:27:13.784 12150 12150 F DEBUG   : Build fingerprint: 'samsung/heroltexx/herolte:7.0/NRD90M/G930FXXS1DQLC:user/release-keys'\r\n01-22 20:27:13.784 12150 12150 F DEBUG   : Revision: '8'\r\n01-22 20:27:13.785 12150 12150 F DEBUG   : ABI: 'arm'\r\n01-22 20:27:13.785 12150 12150 F DEBUG   : pid: 12103, tid: 12103, name: App1.App1  >>> App1.App1 <<<\r\n01-22 20:27:13.785 12150 12150 F DEBUG   : signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x25f44a4c\r\n01-22 20:27:13.785 12150 12150 F DEBUG   :     r0 00000000  r1 ffe674f4  r2 25f44a74  r3 d9f225f0\r\n01-22 20:27:13.786 12150 12150 F DEBUG   :     r4 00000000  r5 e43f7f28  r6 ffe67908  r7 ffe674ec\r\n01-22 20:27:13.786 12150 12150 F DEBUG   :     r8 d9f225f0  r9 d5a54690  sl ffe67a10  fp ffe67508\r\n01-22 20:27:13.786 12150 12150 F DEBUG   :     ip ffe67494  sp 25f44a5c  lr d9f229c8  pc c64000c0  cpsr 600e0010\r\n01-22 20:27:13.788 12150 12150 F DEBUG   : \r\n01-22 20:27:13.788 12150 12150 F DEBUG   : backtrace:\r\n01-22 20:27:13.788 12150 12150 F DEBUG   :     #00 pc 001200c0  /data/app/App1.App1-1/lib/arm/libmonosgen-2.0.so\r\n```"},{"Id":"7133290791","Type":"PullRequestEvent","CreatedAt":"2018-01-22T17:08:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1217","RelatedDescription":"Opened pull request \"Bump to mono/2017-10/ab882c0c\" (#1217) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/dotnet/corefx/issues/23680"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7135812476","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:09:12","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1634","RelatedDescription":"Opened pull request \"Don't hook up Unloaded handler in UWP PageRenderer until Loaded fires\" (#1634) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIf the `MainPage` of the application is set to a `NavigationPage`, the `Unloaded` event of the root `ContentPage`'s renderer fires incorrectly after the page loads. This only occurs on the first setting of `MainPage` - subsequent calls to set it work just fine.\r\n\r\nThis change adjusts the `PageRenderer` so that the `Unload` event is not tracked until the renderer has been `Loaded`, which prevents the renderer from incorrectly calling `SendDisappearing`.\r\n\r\nSince this bug only occurs when an application sets `MainPage` for the first time, it's exceedingly awkward to UI test in ControlGallery.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [60589 – Unexpected call to OnDisappearing on UWP when using NavigationPage](https://bugzilla.xamarin.com/show_bug.cgi?id=60589)\r\n- [[UWP] Page.Disappearing is raised on the root page of a NavigationPage · Issue #1602 · xamarin/Xamarin.Forms](https://github.com/xamarin/Xamarin.Forms/issues/1602)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7135342928","Type":"IssuesEvent","CreatedAt":"2018-01-23T00:34:10","Actor":"jsbakker","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1633","RelatedDescription":"Opened issue \"ListView highlight still visible after SelectedItem = null when ListView hosted inside NavigationPage as Detail of MasterDetailPage on UWP\" (#1633) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen you have an application with hierarchical navigation (e.g. browse folder or tree structure), there are issues when popping off the Navigation stack. I am using MasterDetailPage as the root Page, and NavigationPage as the Detail Page which is hosting a stack of Pages containing ListViews.\r\n\r\nI only started experiencing this after updating from Xamrin.Forms 2.3.2 to 2.5.0. It was observed on UWP, but not on Android.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Navigate into at least one location deep\r\n2. Press the back button on the navigation frame\r\n3. Look at the page you were previously on\r\n\r\n### Expected Behavior\r\n\r\nWhen you pop one level off the navigation stack, the previously navigated item should have no items selected (because we explicitly set SelectedItem = null when pushing the next page, which is now popped).\r\n\r\n### Actual Behavior\r\n\r\nAfter popping from the navigation stack, the item you last navigated into on the previous screen is still highlighted.\r\n\r\nI have made multiple attempts to work around this myself:\r\n\r\n1. Permutations of awaiting Push on the navigation stack, and whether to set SelectedItem = null before or after pushing. Result: no effect.\r\n2. Creating a custom renderer for my listview items, and coming up with two different ways to suppress the highlight when rendering the listview item, both with the same result: even weirder behavior. Now when popping off the navigation stack, you are left on a blank screen and have to press the back button a second time to get to the previous page on the navigation stack. This makes no sense why rendering a cell differently would corrupt the navigation stack, and it smells that there's something wrong with navigation stack with certain view hierarchies.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122203\r\n- Last known good version: 2.3.2.127\r\n- IDE: Visual Studio 2015 Update 3\r\n- Platform Target Frameworks:\r\n  - UWP:  14393\r\n- Affected Devices: Windows Desktop\r\n\r\n### Reproduction Link\r\n\r\nI have reproduced in a standalone app this by using the Xamarin cross-platform application template, then selected the \"Master Detail\" template, and selected Xamarin.Forms UI Technology, then modified it a tiny, tiny bit. Funny enough, the generated code doesn't use MasterDetailPage at all.\r\n\r\nIf you make the following changes, it should be reproducible:\r\n\r\n- Create a new ContentPage and set a title (this will be master)\r\n- Create a NavigationPage with a new ItemsPage on the stack (this will be detail)\r\n- Set MainPage to a new MasterDetailPage, setting the ContentPage as master and NavigationPage as detail\r\n- In ItemsPage OnItemSelected, comment out the push of ItemDetailPage, and instead push a new ItemsPage\r\n- Make note that ItemsListView.SelectedItem =null is being set\r\n"},{"Id":"7135011848","Type":"IssuesEvent","CreatedAt":"2018-01-22T22:58:04","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1632","RelatedDescription":"Opened issue \"[Enhancement] Label underline support\" (#1632) at xamarin/Xamarin.Forms","RelatedBody":"## Rational\r\n\r\nThe label currently has no easy mechanism of being underlined. Sometimes applications need the ability to underline text without using an Effect.\r\n\r\n## Implementation\r\n\r\nModify the FontAttributes enum to be as follows:\r\n\r\n```csharp\r\npublic enum FontAttributes\r\n{\r\n\tNone = 0,\r\n\tBold = 1 << 0,\r\n\tItalic = 1 << 1,\r\n\tUnderline = 1 << 2,\r\n}\r\n```\r\n\r\nRenderers and Span parsers will need to understand how to use the new underline flag appropriately.\r\n\r\n## Backward Compatibility\r\n\r\nThis change is as backwards compatible with existing code as possible. It is possible someone has found some obscure way of depending on there not being any more flags to the FontAttributes enum, but that is unlikely.\r\n\r\nThird party renderers will need to be updated to ensure that this functionality is supported through the new official mechanism. Further we will need to be careful to code the changes to the renderers in a careful manner to ensure that if someone is already using an effect to set an underline state on a label that this effect is as best as possible not broken by our changes.\r\n\r\n## Difficulty : Easy\r\n\r\nThis is an easy change and great for a first time contributor. The hardest part will be ensuring the Span can properly parse the new `FontAttributes.Underline` enum value. Some basic defensive coding will be needed to ensure existing code is not broken, ideally the code path when the flag is not set AND has never been set is identical to when it has been. Once a user changes their code to use the flag, the code path can then change for everything.\r\n\r\nEven more ideally this would be done without an additional flag for tracking that status."},{"Id":"7134242960","Type":"IssuesEvent","CreatedAt":"2018-01-22T20:10:19","Actor":"izhang1","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1631","RelatedDescription":"Opened issue \"Transparent ToolbarItem after moving back from page iOS Only \" (#1631) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nToolbarItem looks transparent after navigation back from a page. The item is still clickable but looks like the style is changed. This issue only appears on iOS. Similar to issue 1608. \r\n\r\n### Steps to Reproduce\r\n\"If you create a simple 2 page navigation app. First page adds a toolbar button when clicked does a Navigation.PushAsync to the second page. When coming back to the first page the toolbar button text is then faded out on the first page. It is still clickable so you can go back to the second page just fine, just a visual issue.\"\r\n\r\nReference: \r\n[https://forums.xamarin.com/discussion/113677/navigation-toolbar-button-issue-ios-only.\r\n](https://forums.xamarin.com/discussion/113677/navigation-toolbar-button-issue-ios-only.)\r\n\r\nAttached Sample Application \r\n1. Restore Packages and click the next toolbar item\r\n2. Click the back button \r\n\r\n### Expected Behavior\r\nSee the next toolbar item with the same style as the first attempt (Image 1).\r\n\r\n### Actual Behavior\r\nSee a faded out, almost transparent view of the next toolbar item. \r\n\r\n### Basic Information\r\n- IDE: Visual Studio for Mac \r\n- Platform Target Frameworks: \r\n  - iOS:  11.1 \r\n\r\n### Screenshots\r\n\r\n<img width=\"283\" alt=\"toolbaritemissue1\" src=\"https://user-images.githubusercontent.com/8538962/35241984-4c3cff80-ff86-11e7-8a95-7912f16c703e.png\">\r\n\r\n<img width=\"284\" alt=\"toolbaritemissue2\" src=\"https://user-images.githubusercontent.com/8538962/35241987-4dec7e82-ff86-11e7-8930-981433a13ad9.png\">\r\n\r\n### Reproduction Link\r\n[NavigationToolbarIssue.zip](https://github.com/xamarin/Xamarin.Forms/files/1653428/NavigationToolbarIssue.zip)\r\n\r\n\r\n"},{"Id":"7133699595","Type":"IssuesEvent","CreatedAt":"2018-01-22T18:24:39","Actor":"YZahringer","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1630","RelatedDescription":"Opened issue \"[macOS] WebView Navigated & Navigating events not raised\" (#1630) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n`Navigated` & `Navigating` events of WebView are not raised on Xamarin.Forms.Mac.\r\n\r\n### Steps to Reproduce\r\n1. Add `WebView` to `ContentPage` \r\n2. Subscribe to `Navigated` & `Navigating` events\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 2.5.0.122203\r\n- IDE: Visual Studio for Mac 7.3.3 (build 5)\r\n- Platform Target Frameworks:\r\n  - macOS: 10.13.2\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7135742859","Type":"PullRequestEvent","CreatedAt":"2018-01-23T02:45:29","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3281","RelatedDescription":"Merged pull request \"[foundation] Fix typo in INSFilePresenter.P[r]esentedItemOperationQueue. Fixes #3272\" (#3281) at xamarin/xamarin-macios","RelatedBody":"Sadly that was not enough to trigger the typo detector test. It's also\npart of a protocol, which means a .net interface so it cannot be fixed\nwithout a breaking change. As such the fix is under `XAMCORE_4_0`\n\nFixes https://github.com/xamarin/xamarin-macios/issues/3272"},{"Id":"7135742850","Type":"IssuesEvent","CreatedAt":"2018-01-23T02:45:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3272","RelatedDescription":"Closed issue \"Foundation.INSFilePresenter.PesentedItemOperationQueue misspells \"Presented\"\" (#3272) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Use Object Browser, etc. to view `Foundation.INSFilePresenter` interface\r\n\r\n### Expected Behavior\r\n\r\n\"PresentedItemOperationQueue\"\r\n\r\n### Actual Behavior\r\n\r\n\"PesentedItemOperationQueue\" \r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac (Preview) ===\r\n\r\nVersion 7.4 Preview (7.4 build 839)\r\nInstallation UUID: 6b94f136-026d-4a5a-bf6d-af2c0d8dc019\r\nRuntime:\r\n\tMono 5.8.0.103 (2017-10/1359c52fc6e) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508000103\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.3\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.3/Sdks\r\nSDK Versions:\r\n\t2.0.3\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13768)\r\nBuild 9C34b\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.0.1 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.8.0.1 (Visual Studio Community)\r\nHash: 82e38cd1\r\nBranch: d15-6\r\nBuild date: 2017-12-22 14:23:52-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.1 (Visual Studio Community)\r\nAndroid SDK: /Users/larryobrien/Library/Android/sdk\r\n\tSupported Android versions:\r\n\t\t5.0 (API level 21)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 25.0.3\r\nSDK Build Tools Version: 26.0.2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_144\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0-beta1+69\r\nHash: 4012b4e\r\nBranch: master\r\nBuild date: Thu, 07 Dec 2017 16:20:26 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704000839\r\nGit revision: 82eabac6f9ebeaa9c0f3143baa8037c26c6c00fc\r\nBuild date: 2018-01-05 22:22:29-05\r\nXamarin addins: b2cfc17e56386f2c360aaa8b02404b900d6be8c1\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.2\r\nDarwin 17.3.0 Darwin Kernel Version 17.3.0\r\n    Thu Nov  9 18:09:22 PST 2017\r\n    root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nLarry's F# Templates 2.0.8\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n\r\n```\r\n\r\n\r\n"},{"Id":"7135506773","Type":"PullRequestEvent","CreatedAt":"2018-01-23T01:27:14","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3284","RelatedDescription":"Opened pull request \"[tests][monotouch] Remove the ignore on MPVolumeView added in xcode9 beta 3 - it seems to work fine now\" (#3284) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7135503179","Type":"IssuesEvent","CreatedAt":"2018-01-23T01:26:02","Actor":"dbrevitt","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3283","RelatedDescription":"Opened issue \"iOS project PropertyGroup element references automatically removed\" (#3283) at xamarin/xamarin-macios","RelatedBody":"### Description\r\nMSBuild PropertyGroup elements cannot be referenced within the `<AssemblyName>` element of a Xamarin Forms iOS .csproj file as the '$', '(' and ')' are automatically removed.\r\n\r\nThere appears to be some special processing that removes illegal characters from the assembly name when loading Xamarin Forms iOS projects. The merits of this are mentioned in a similar issue here: https://bugzilla.xamarin.com/show_bug.cgi?id=32414\r\n\r\nCan this illegal character processing be removed? Or, can this processing be postponed until after referenced PropertyGroup elements have been resolved within the `<AssemblyName>` element?\r\n\r\n### Steps to Reproduce\r\n\r\n1. Edit a Xamarin Forms iOS .csproj file by hand to reference a PropertyGroup element from within the `<AssemblyName>` element e.g. `<AssemblyName>MyProject$(Configuration)</AssemblyName>`\r\n2. Load a solution that contains this project\r\n\r\n### Expected Behavior\r\n1. The Xamarin Forms iOS .csproj file remains unchanged\r\n2. 'iOS Project -> Properties -> Application -> Assembly name' reflects the configuration that was loaded. In this case, for a Debug configuration the Assembly name should read 'MyProjectDebug' \r\n### Actual Behavior\r\n1. The Xamarin Forms iOS csproj file has the `<AssemblyName>` element updated to remove special characters e.g.  `<AssemblyName>MyProjectConfiguration</AssemblyName>`\r\n2. In the project properties, for a Debug configuration the Assembly name reads 'MyProjectConfiguration'\r\n\r\n### Basic Information\r\nXamarin.Forms   2.5.0.122203\r\n\r\nXamarin   4.8.0.757\r\nXamarin Designer   4.8.188\r\nXamarin.Android SDK   8.1.3.0\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2\r\n\r\n*** Previously raised as https://github.com/xamarin/Xamarin.Forms/issues/1545\r\n"},{"Id":"7135428814","Type":"PullRequestEvent","CreatedAt":"2018-01-23T01:02:24","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3282","RelatedDescription":"Opened pull request \"Updated reference to mono/mono@3c3e692\" (#3282) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7135387801","Type":"PullRequestEvent","CreatedAt":"2018-01-23T00:49:06","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3281","RelatedDescription":"Opened pull request \"[foundation] Fix typo in INSFilePresenter.P[r]esentedItemOperationQueue. Fixes #3272\" (#3281) at xamarin/xamarin-macios","RelatedBody":"Sadly that was not enough to trigger the typo detector test. It's also\npart of a protocol, which means a .net interface so it cannot be fixed\nwithout a breaking change. As such the fix is under `XAMCORE_4_0`\n\nFixes https://github.com/xamarin/xamarin-macios/issues/3272"},{"Id":"7134993129","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:53:09","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3280","RelatedDescription":"Opened pull request \"[linker] Implement a generic method of storing attributes the linker removes.\" (#3280) at xamarin/xamarin-macios","RelatedBody":"Implement a generic method of storing attributes the linker removes, so\nthat those attributes can be accessed after the linker has linked them away.\n\nAlso change existing code to take advantage of the new API (for\n[CompilerGenerated] and several availability attributes)."},{"Id":"7134804545","Type":"IssuesEvent","CreatedAt":"2018-01-22T22:09:11","Actor":"rodrigueslg","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3279","RelatedDescription":"Opened issue \"Error BI0000 Unexpected error\" (#3279) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nWhen trying to compile a native bindings project with AdyenCSE SDK, I get the following error:\r\n\r\n/Volumes/DADOS/Empresa1/ios-auto-binding-tool/objc-automatic-master/bindings/AdyenCSE/BTOUCH: Error BI0000: Unexpected error - Please file a bug report at http://bugzilla.xamarin.com (BI0000) (AdyenCSE)\r\n\r\nHere is the code:\r\n\r\n```\r\n\r\nusing System;\r\nusing Foundation;\r\nusing ObjCRuntime;\r\n\r\nnamespace DreamTeam.Xamarin.AdyenCSE\r\n{\r\n\t// @interface ADYAESCCMCryptor : NSObject\r\n\t[BaseType (typeof(NSObject))]\r\n\tinterface ADYAESCCMCryptor\r\n\t{\r\n\t\t// +(NSData * _Nullable)encrypt:(NSData * _Nonnull)data withKey:(NSData * _Nonnull)key iv:(NSData * _Nonnull)iv;\r\n\t\t//[Static]\r\n\t\t[Export (\"encrypt:withKey:iv:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tNSData Encrypt (NSData data, NSData key, NSData iv);\r\n\r\n\t\t// +(NSData * _Nullable)encrypt:(NSData * _Nonnull)data withKey:(NSData * _Nonnull)key iv:(NSData * _Nonnull)iv tagLength:(size_t)tagLength adata:(NSData * _Nullable)adata;\r\n\t\t//[Static]\r\n\t\t[Export (\"encrypt:withKey:iv:tagLength:adata:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tNSData Encrypt (NSData data, NSData key, NSData iv, nuint tagLength, [NullAllowed] NSData adata);\r\n\t}\r\n\r\n\t// @interface ADYCard : NSObject\r\n\t[BaseType (typeof(NSObject))]\r\n\tinterface ADYCard\r\n\t{\r\n\t\t// @property (nonatomic, strong) NSDate * _Nullable generationtime;\r\n\t\t[NullAllowed, Export (\"generationtime\", ArgumentSemantic.Strong)]\r\n\t\tNSDate Generationtime { get; set; }\r\n\r\n\t\t// @property (nonatomic, strong) NSString * _Nullable number;\r\n\t\t[NullAllowed, Export (\"number\", ArgumentSemantic.Strong)]\r\n\t\tstring Number { get; set; }\r\n\r\n\t\t// @property (nonatomic, strong) NSString * _Nullable holderName;\r\n\t\t[NullAllowed, Export (\"holderName\", ArgumentSemantic.Strong)]\r\n\t\tstring HolderName { get; set; }\r\n\r\n\t\t// @property (nonatomic, strong) NSString * _Nullable cvc;\r\n\t\t[NullAllowed, Export (\"cvc\", ArgumentSemantic.Strong)]\r\n\t\tstring Cvc { get; set; }\r\n\r\n\t\t// @property (nonatomic, strong) NSString * _Nullable expiryMonth;\r\n\t\t[NullAllowed, Export (\"expiryMonth\", ArgumentSemantic.Strong)]\r\n\t\tstring ExpiryMonth { get; set; }\r\n\r\n\t\t// @property (nonatomic, strong) NSString * _Nullable expiryYear;\r\n\t\t[NullAllowed, Export (\"expiryYear\", ArgumentSemantic.Strong)]\r\n\t\tstring ExpiryYear { get; set; }\r\n\r\n\t\t// +(ADYCard * _Nullable)decode:(NSData * _Nonnull)json error:(NSError * _Nullable * _Nullable)error;\r\n\t\t//[Static]\r\n\t\t[Export (\"decode:error:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tADYCard Decode (NSData json, [NullAllowed] out NSError error);\r\n\r\n\t\t// -(NSData * _Nullable)encode;\r\n\t\t[NullAllowed, Export (\"encode\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tNSData Encode { get; }\r\n\t}\r\n\r\n\t// @interface ADYCryptor : NSObject\r\n\t[BaseType (typeof(NSObject))]\r\n\tinterface ADYCryptor\r\n\t{\r\n\t\t// +(void)setMsgPrefix:(NSString * _Nullable)prefix;\r\n\t\t//[Static]\r\n\t\t[Export (\"setMsgPrefix:\")]\r\n\t\tvoid SetMsgPrefix ([NullAllowed] string prefix);\r\n\r\n\t\t// +(void)setMsgSeparator:(NSString * _Nullable)separator;\r\n\t\t//[Static]\r\n\t\t[Export (\"setMsgSeparator:\")]\r\n\t\tvoid SetMsgSeparator ([NullAllowed] string separator);\r\n\r\n\t\t// +(NSString * _Nullable)encrypt:(NSData * _Nonnull)data publicKeyInHex:(NSString * _Nonnull)keyInHex;\r\n\t\t//[Static]\r\n\t\t[Export (\"encrypt:publicKeyInHex:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tstring Encrypt (NSData data, string keyInHex);\r\n\r\n\t\t// +(NSData * _Nullable)aesEncrypt:(NSData * _Nonnull)data withKey:(NSData * _Nonnull)key iv:(NSData * _Nonnull)iv;\r\n\t\t//[Static]\r\n\t\t[Export (\"aesEncrypt:withKey:iv:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tNSData AesEncrypt (NSData data, NSData key, NSData iv);\r\n\r\n\t\t// +(NSData * _Nullable)rsaEncrypt:(NSData * _Nonnull)data withKeyInHex:(NSString * _Nonnull)keyInHex;\r\n\t\t//[Static]\r\n\t\t[Export (\"rsaEncrypt:withKeyInHex:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tNSData RsaEncrypt (NSData data, string keyInHex);\r\n\r\n\t\t// +(NSData * _Nonnull)dataFromHex:(NSString * _Nonnull)hex;\r\n\t\t//[Static]\r\n\t\t[Export (\"dataFromHex:\")]\r\n\t\tNSData DataFromHex (string hex);\r\n\r\n\t\t// +(NSData * _Nullable)sha1FromStringInHex:(NSString * _Nonnull)stringInHex;\r\n\t\t//[Static]\r\n\t\t[Export (\"sha1FromStringInHex:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tNSData Sha1FromStringInHex (string stringInHex);\r\n\t}\r\n\r\n\t// @interface ADYEncrypter : ADYCryptor\r\n\t[BaseType (typeof(ADYCryptor))]\r\n\tinterface ADYEncrypter\r\n\t{\r\n\t\t// +(NSString * _Nullable)encrypt:(NSData * _Nonnull)data publicKeyInHex:(NSString * _Nonnull)keyInHex;\r\n\t\t//[Static]\r\n\t\t[Export (\"encrypt:publicKeyInHex:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tstring Encrypt (NSData data, string keyInHex);\r\n\t}\r\n\r\n\t// @interface ADYRSACryptor : NSObject\r\n\t[BaseType (typeof(NSObject))]\r\n\tinterface ADYRSACryptor\r\n\t{\r\n\t\t// +(NSData * _Nullable)encrypt:(NSData * _Nonnull)data withKeyInHex:(NSString * _Nonnull)keyInHex;\r\n\t\t//[Static]\r\n\t\t[Export (\"encrypt:withKeyInHex:\")]\r\n\t\t[return: NullAllowed]\r\n\t\tNSData Encrypt (NSData data, string keyInHex);\r\n\t}\r\n\r\n\t// @interface AdyenUtil (NSDictionary)\r\n\t[Category]\r\n\t[BaseType (typeof(NSDictionary))]\r\n\tinterface NSDictionary_AdyenUtil\r\n\t{\r\n\t\t// -(NSString * _Nonnull)encodeFormData __attribute__((deprecated(\"Use -ady_encodeFormData instead.\")));\r\n        [Export (\"encodeFormData\")]\r\n        //[Deprecated(PlatformName.iOS, PlatformArchitecture.All, \"Use -ady_encodeFormData instead.\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tstring EncodeFormData { get; }\r\n\r\n\t\t// -(NSString * _Nonnull)ady_encodeFormData;\r\n        [Export (\"ady_encodeFormData\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tstring Ady_encodeFormData { get; }\r\n\t}\r\n\r\n\t// @interface AdyenURLEncoding (NSString)\r\n\t[Category]\r\n\t[BaseType (typeof(NSString))]\r\n\tinterface NSString_AdyenURLEncoding\r\n\t{\r\n\t\t// -(NSString * _Nullable)urlEncodeUsingEncoding:(NSStringEncoding)encoding __attribute__((deprecated(\"Use -ady_URLEncodedString instead.\")));\r\n\t\t[Export (\"urlEncodeUsingEncoding:\")]\r\n        //[Deprecated(PlatformName.iOS, PlatformArchitecture.All, \"Use -ady_URLEncodedString instead.\")]\r\n\t\t[return: NullAllowed]\r\n\t\tstring UrlEncodeUsingEncoding (nuint encoding);\r\n\t}\r\n\r\n\t// @interface AdyenUtil (NSString)\r\n\t[Category]\r\n\t[BaseType (typeof(NSString))]\r\n\tinterface NSString_AdyenUtil\r\n\t{\r\n\t\t// -(BOOL)isHexString __attribute__((deprecated(\"Use -ady_isHexString instead.\")));\r\n\t\t[Export (\"isHexString\")]\r\n        //[Deprecated(PlatformName.iOS, PlatformArchitecture.All, \"Use -ady_isHexString instead.\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tbool IsHexString { get; }\r\n\r\n\t\t// -(BOOL)ady_isHexString;\r\n\t\t[Export (\"ady_isHexString\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tbool Ady_isHexString { get; }\r\n\r\n\t\t// -(NSString * _Nullable)URLEncodedString __attribute__((deprecated(\"Use -ady_URLEncodedString instead.\")));\r\n\t\t[NullAllowed, Export (\"URLEncodedString\")]\r\n        //[Deprecated(PlatformName.iOS, PlatformArchitecture.All, \"Use -ady_URLEncodedString instead.\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tstring URLEncodedString { get; }\r\n\r\n\t\t// -(NSString * _Nullable)ady_URLEncodedString;\r\n\t\t[NullAllowed, Export (\"ady_URLEncodedString\")]\r\n\t\t//[Verify (MethodToProperty)]\r\n\t\tstring Ady_URLEncodedString { get; }\r\n\t}\r\n}\r\n\r\n\r\n```"},{"Id":"7134618658","Type":"PullRequestEvent","CreatedAt":"2018-01-22T21:30:28","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3277","RelatedDescription":"Merged pull request \"[msbuild] Fix Makefile warning by removing duplicate target.\" (#3277) at xamarin/xamarin-macios","RelatedBody":"Fixes this warning:\r\n\r\n```\r\nMakefile:317: target `/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/lib/msbuild/iOS' given more than once in the same rule.\r\n```\r\n\r\nbecause the same directory was listed twice."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"955516166373560322","CreatedAt":"2018-01-22T19:03:01+00:00","UserScreenname":"xamarinhq","Text":"Check out the what, why, and how of Mobile #DevOps with #VSAppCenter in this special guest series from @gshackles:… https://t.co/fClbh5B47i","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"955191774359838721","CreatedAt":"2018-01-21T21:34:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with ActivityTask, a helper for async/await on Android: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":15,"RawContent":null},{"Id":"954895828895916032","CreatedAt":"2018-01-21T01:58:01+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @lobrien  shows you how to add augmented reality to your #Xamarin apps with #ARKit in #iOS11:… https://t.co/pxoHpfwz5J","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":21,"RawContent":null},{"Id":"954424071562956802","CreatedAt":"2018-01-19T18:43:25+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/ipWfWuyPoB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":25,"RawContent":null},{"Id":"954398799362961408","CreatedAt":"2018-01-19T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Program Manager @davidortinau shares his tips for beating the learning curve: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":24,"RawContent":null},{"Id":"954066862928793600","CreatedAt":"2018-01-18T19:04:00+00:00","UserScreenname":"xamarinhq","Text":"Check out the latest and greatest from @TheXamarinShow on getting started with iOS development in C# with #Xamarin: https://t.co/OpnYrTJhnw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":4,"RawContent":null},{"Id":"954040437962104832","CreatedAt":"2018-01-18T17:19:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/hJ3E8pPggV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":8,"RawContent":null},{"Id":"953670252793090049","CreatedAt":"2018-01-17T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Add sound to your #XamarinForms app with the open-source SimpleAudioPlayer #NuGet plugin: https://t.co/r8NSFRpl33 https://t.co/BbdcfvhwCa","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":81,"FavoriteCount":35,"RawContent":null},{"Id":"953354972019732481","CreatedAt":"2018-01-16T19:55:12+00:00","UserScreenname":"xamarinhq","Text":"The #CSharp developer’s guide to shipping better apps with #VSAppCenter: https://t.co/jU0cnONnM8 https://t.co/yTZCnF9Yko","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":128,"FavoriteCount":69,"RawContent":null},{"Id":"953306603851218944","CreatedAt":"2018-01-16T16:43:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to make your #XamarinForms apps adaptive based on screen size, device type, and orientation: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":26,"RawContent":null},{"Id":"952935662407348230","CreatedAt":"2018-01-15T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use new project templates in #VisualStudio 2017 that enable you to use #dotNET Standard as a code shar… https://t.co/nRyxpQLx5D","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":30,"RawContent":null},{"Id":"952587115417821191","CreatedAt":"2018-01-14T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/WfBaPE3aMD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"952220954310127617","CreatedAt":"2018-01-13T16:49:01+00:00","UserScreenname":"xamarinhq","Text":"Build a simple #XamarinForms chat app that leverages and connects to an https://t.co/y9erV6ivVL Core #WebSocket:… https://t.co/olv2ycerlY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":183,"FavoriteCount":84,"RawContent":null},{"Id":"951923977278164992","CreatedAt":"2018-01-12T21:08:56+00:00","UserScreenname":"xamarinhq","Text":"Start your weekend on a high note with this week's episode of the @XamarinPodcast, covering Android 8.1, the new… https://t.co/nyDaQnMQOM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"951862087931789312","CreatedAt":"2018-01-12T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with Android Oreo Notification Channels: https://t.co/1XmtfYAaLv https://t.co/Drj1AHQYPg","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":12,"RawContent":null},{"Id":"951544245466423296","CreatedAt":"2018-01-11T20:00:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the exciting new features in Android Oreo 8.1 with updated support in #Xamarin.Android:… https://t.co/7RaFvwrg4V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":19,"RawContent":null},{"Id":"951505598268563456","CreatedAt":"2018-01-11T17:26:27+00:00","UserScreenname":"xamarinhq","Text":"Ready to start building better apps, faster? Learn how to get started with #VSAppCenter in our upcoming @XamarinU w… https://t.co/zkJdTZ6JTX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":31,"RawContent":null},{"Id":"951487872753946625","CreatedAt":"2018-01-11T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Simplified app signing with secure files in #VSTS: https://t.co/O5XooxuL40 https://t.co/TGqFOONLio","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":9,"RawContent":null},{"Id":"951172797337866240","CreatedAt":"2018-01-10T19:24:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio 2017 version 15.6 Preview is now available! Get started today: https://t.co/KG2CJ20AHH https://t.co/e5VR78hTLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":29,"RawContent":null}]}},"RunOn":"2018-01-23T05:30:38.1452062Z","RunDurationInMilliseconds":3724}