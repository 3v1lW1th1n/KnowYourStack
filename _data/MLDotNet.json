{"Data":{"GitHub":{"Issues":[{"Id":"477505670","IsPullRequest":true,"CreatedAt":"2019-08-07T04:24:29","Actor":"tannergooding","Number":"4070","RawContent":null,"Title":"Changing the database cursor to return default for DBNull","State":"closed","Body":"This updates the `DatabaseLoaderCursor` to support nullable columns by treating them as `default`.","Url":"https://github.com/dotnet/machinelearning/pull/4070","RelatedDescription":"Closed or merged PR \"Changing the database cursor to return default for DBNull\" (#4070)"},{"Id":"477655042","IsPullRequest":false,"CreatedAt":"2019-08-07T00:53:07","Actor":"bleroy","Number":"4074","RawContent":null,"Title":"French stopword \"les\" is misspelled","State":"open","Body":"The word \"les\" is a stopword in French, but it is misspelled \"l√®s\" in the [French.txt](https://github.com/dotnet/machinelearning/blob/a802127883c0020516aa573436029cabed65d591/src/Microsoft.ML.Transforms/Text/StopWords/French.txt#L27) file. I'd have fixed it directly there, but the repo is configured to only take changes on a branch.","Url":"https://github.com/dotnet/machinelearning/issues/4074","RelatedDescription":"Open issue \"French stopword \"les\" is misspelled\" (#4074)"},{"Id":"477604326","IsPullRequest":true,"CreatedAt":"2019-08-06T21:44:05","Actor":"srsaggam","Number":"4073","RawContent":null,"Title":"[AutoML] Fix for Exception thrown in cross val when one of the score equals infinity.","State":"closed","Body":"closes #4072 ","Url":"https://github.com/dotnet/machinelearning/pull/4073","RelatedDescription":"Closed or merged PR \"[AutoML] Fix for Exception thrown in cross val when one of the score equals infinity.\" (#4073)"},{"Id":"477526262","IsPullRequest":true,"CreatedAt":"2019-08-06T21:14:55","Actor":"srsaggam","Number":"4071","RawContent":null,"Title":"[AutoML] Bump version to ML.NET 1.3.1 in AutoML API and CLI and AutoML package version to 0.15.1","State":"closed","Body":"Bumping ml.net version to 1.3.1\r\nNeeds to be smoke tested by : @justinormont  Thanks.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4071","RelatedDescription":"Closed or merged PR \"[AutoML] Bump version to ML.NET 1.3.1 in AutoML API and CLI and AutoML package version to 0.15.1\" (#4071)"},{"Id":"477560950","IsPullRequest":false,"CreatedAt":"2019-08-06T19:43:46","Actor":"srsaggam","Number":"4072","RawContent":null,"Title":"[AutoML] AutoML.NET API/CLI cross val fails when one the scores is -infinity.","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4072","RelatedDescription":"Open issue \"[AutoML] AutoML.NET API/CLI cross val fails when one the scores is -infinity.\" (#4072)"},{"Id":"477267713","IsPullRequest":true,"CreatedAt":"2019-08-06T11:37:58","Actor":"codemzs","Number":"4069","RawContent":null,"Title":"Update version to 1.4 and 0.16","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4069","RelatedDescription":"Closed or merged PR \"Update version to 1.4 and 0.16\" (#4069)"},{"Id":"476785464","IsPullRequest":true,"CreatedAt":"2019-08-06T10:46:43","Actor":"codemzs","Number":"4061","RawContent":null,"Title":"Release notes for v1.3.0","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4061","RelatedDescription":"Closed or merged PR \"Release notes for v1.3.0\" (#4061)"},{"Id":"477212058","IsPullRequest":true,"CreatedAt":"2019-08-06T09:19:24","Actor":"codemzs","Number":"4067","RawContent":null,"Title":"Increment build version.","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4067","RelatedDescription":"Closed or merged PR \"Increment build version.\" (#4067)"},{"Id":"477235644","IsPullRequest":true,"CreatedAt":"2019-08-06T08:18:03","Actor":"codemzs","Number":"4068","RawContent":null,"Title":"Fix packaging of DNN and Tensorflow nuget package.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4068","RelatedDescription":"Closed or merged PR \"Fix packaging of DNN and Tensorflow nuget package.\" (#4068)"},{"Id":"476069614","IsPullRequest":true,"CreatedAt":"2019-08-06T07:14:17","Actor":"codemzs","Number":"4057","RawContent":null,"Title":"Image classification using DNNs and Transfer Learning.","State":"closed","Body":"- Rewired Microsoft.ML.Tensorflow to use Tensorflow .NET C# bindings.\r\n- Introduces Microsoft.ML.Dnn package that contains transfer learning based image classification API using resnet and inception V3 models. \r\n  - Contains API to retrain a DNN model using tensorflow. \r\n\r\nAll tensorflow tests are passing. The current test failures have to do with ONNX tests that seem to be using a higher version of protobuf since TF.NET also uses protobuf.","Url":"https://github.com/dotnet/machinelearning/pull/4057","RelatedDescription":"Closed or merged PR \"Image classification using DNNs and Transfer Learning.\" (#4057)"},{"Id":"477168596","IsPullRequest":true,"CreatedAt":"2019-08-06T04:52:33","Actor":"interesaaat","Number":"4066","RawContent":null,"Title":"Preview of Torch support (scoring)","State":"open","Body":"Fixes #4053 \r\n\r\nI follow the API used in TensorFlowTransformer very closely to add support for Torch. We have TorchModel class that can be loaded through mlContext.Model.LoadTorchModel(\"pathToModel\"). There is then a method on the TorchModel class that produces TorchScoringEstimator and that requires the usual names of input and output columns as well as the shape of the input vector. After calling Fit() on the pipeline we obtain a TorchTransformer that applies the Torch model to data in an IDataView column.\r\n\r\nFor training the only difference will be that instead of providing a path to a pretrained model, a TorchModel class will be created from a TorchSharp.NN.Module class.\r\n\r\nThis PR adds scoring of TorchScript models","Url":"https://github.com/dotnet/machinelearning/pull/4066","RelatedDescription":"Open PR \"Preview of Torch support (scoring)\" (#4066)"},{"Id":"477074513","IsPullRequest":false,"CreatedAt":"2019-08-05T21:51:59","Actor":"xtremertx","Number":"4065","RawContent":null,"Title":"TensorFlow exception triggered while loading model","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows 10.0.17763 Enterprise (version: 1809) (x64)\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Framework 4.7.2 (.NET Core 3.0.0-preview3-27503-5)\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI have tried to load the custom tensorflow model of YoloV2 full.\r\n- **What happened?**\r\nLoading of tensorflow model failed with an generic error.\r\n- **What did you expect?**\r\nModel to be succesfully loaded and used for object detection. As my model was converted via DarkFlow without any errors.\r\n\r\n### Source code / logs\r\n ```\r\n      // Create IDataView from empty list to obtain input data schema\r\n      var data = mlContext.Data.LoadFromEnumerable(new List<ImageNetData>());\r\n\r\n      // Define scoring pipeline\r\n      var pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"input\", imageFolder: imagesFolder, inputColumnName: nameof(ImageNetData.ImagePath))\r\n                      .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"input\", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: \"input\"))\r\n                      .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"input\"))\r\n                      .Append(mlContext.Model.LoadTensorFlowModel(modelLocation)\r\n                      .ScoreTensorFlowModel(outputColumnNames: new[] { \"output\" }, inputColumnNames: new[] { \"input\" }, addBatchDimensionInput: true));\r\n\r\n      // Fit scoring pipeline\r\n      var model = pipeline.Fit(data);\r\n```\r\n\r\nTensorFlow exception triggered while loading model from 'C:\\Users\\Peter\\source\\repos\\NeuralLink\\NeuralLink\\bin\\Debug\\XXXX.pb'\r\n\r\n   at Microsoft.ML.Transforms.TensorFlow.TensorFlowUtils.LoadTFSession(IExceptionContext ectx, Byte[] modelBytes, String modelFile)\r\n   at Microsoft.ML.TensorflowCatalog.LoadTensorFlowModel(ModelOperationsCatalog catalog, String modelLocation)\r\n   at NeuralLink.Core.TensorFlowModelScorer.LoadModel() in C:\\Users\\Peter\\source\\repos\\NeuralLink\\NeuralLink\\Core\\TensorFlowModelScorer.cs:line 46\r\n   at NeuralLink.Pages.Analyze.<UserControl_Initialized>d__7.MoveNext() in C:\\Users\\Peter\\source\\repos\\NeuralLink\\NeuralLink\\Pages\\Analyze.xaml.cs:line 156\r\n\r\n_This is a seriouse flaw in ML.NET, I was expecting that it can load any VALID tensorflow model. I can post my model and some training images in case you want to investigate._\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4065","RelatedDescription":"Open issue \"TensorFlow exception triggered while loading model\" (#4065)"},{"Id":"477013757","IsPullRequest":false,"CreatedAt":"2019-08-05T19:11:07","Actor":"Dmitry-A","Number":"4064","RawContent":null,"Title":"[AutoML] Take dependency on ML utilities from ML.Core instead of a copy in AutoML using BestFriends","State":"open","Body":"Due to historical reasons we have copies of utility classes from ML.Core in AutoML.  I removed some of them and the system is set up to use ones from ML.Core, but some had non-trivial changes and I left them as-is to derisk current release.  In addition, some of them are used in the test project and we're not currently set up to take those references from tests.","Url":"https://github.com/dotnet/machinelearning/issues/4064","RelatedDescription":"Open issue \"[AutoML] Take dependency on ML utilities from ML.Core instead of a copy in AutoML using BestFriends\" (#4064)"},{"Id":"476882020","IsPullRequest":false,"CreatedAt":"2019-08-05T14:10:52","Actor":"nfnpmc","Number":"4063","RawContent":null,"Title":"What type is the input model file","State":"open","Body":"The model input file is\nMicrosoft.ML.SamplesUtils.DatasetUtils.DownloadTensorFlowSentimentModel().\nIs this a zip, a graph , or what? \nDoes it contain pretrained weights?\n\n---\n#### Document Details\n\n‚ö† *Do not edit this section. It is required for docs.microsoft.com ‚ûü GitHub issue linking.*\n\n* ID: 3459698d-76c3-c04b-de13-edafd11d8859\n* Version Independent ID: 0aa1e091-1935-850b-af62-c1f14a7bc6fc\n* Content: [TensorflowCatalog.LoadTensorFlowModel(ModelOperationsCatalog, String) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.tensorflowcatalog.loadtensorflowmodel?view=ml-dotnet#Microsoft_ML_TensorflowCatalog_LoadTensorFlowModel_Microsoft_ML_ModelOperationsCatalog_System_String_)\n* Content Source: [dotnet/xml/Microsoft.ML/TensorflowCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TensorflowCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4063","RelatedDescription":"Open issue \"What type is the input model file\" (#4063)"},{"Id":"476827872","IsPullRequest":false,"CreatedAt":"2019-08-05T12:19:25","Actor":"RamazanM","Number":"4062","RawContent":null,"Title":"Tensorflow Input Shape Mismatch","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Linux Mint 19.1 Cinnamon\r\n- **.NET Version (eg., dotnet --info)**: 2.2.401\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am trying to run tensorflow image detection model which retrained by \"faster_rcnn\" or \"ssd_mobilenet_v2\".\r\n\r\n- **What happened?**\r\n But i got \"Input Shape Mismatch\" error. I considered this error is about PixelExtractor and i tried changing some parameters of it.\r\n\r\n- **What did you expect?**\r\nI expected get a float array of predicted boxes, or number of detection.\r\n\r\n### Source code / logs\r\n- My code:\r\n```c#             \r\nvar pipeline =mlContext.Transforms.ResizeImages(outputColumnName: TensorFlowModelSettings.inputTensorName, imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: nameof(ImageInputData.Image))\r\n.Append(mlContext.Transforms.ExtractPixels(outputColumnName: TensorFlowModelSettings.inputTensorName, interleavePixelColors: ImageSettings.channelsLast, offsetImage: ImageSettings.mean,outputAsFloatArray:false,colorsToExtract: ImagePixelExtractingEstimator.ColorBits.All))\r\n.Append(mlContext.Model.LoadTensorFlowModel(modelPath).\r\nScoreTensorFlowModel(outputColumnNames: new[] { TensorFlowModelSettings.outputTensorName },\r\n                     inputColumnNames: new[] { TensorFlowModelSettings.inputTensorName }, addBatchDimensionInput: false));\r\n\r\n\r\n            var model = pipeline.Fit(CreateEmptyDataView());\r\n            return model;\r\n```\r\n- The error message:\r\n> System.InvalidOperationException: Input shape mismatch: Input 'image_tensor' has shape [?, ?, ?, 3], but input data is of length 206116.\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper..ctor(TensorFlowTransformer parent, DataViewSchema inputSchema)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.MakeRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.RowToRowTransformerBase.GetOutputSchema(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Transforms.TensorFlowEstimator.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n\r\n> ### Annotation: When i was try an image classification model,  got an output successfully.","Url":"https://github.com/dotnet/machinelearning/issues/4062","RelatedDescription":"Open issue \"Tensorflow Input Shape Mismatch\" (#4062)"},{"Id":"476541805","IsPullRequest":true,"CreatedAt":"2019-08-04T11:17:01","Actor":"yaeldekel","Number":"4060","RawContent":null,"Title":"LDSVM trainer","State":"open","Body":"Add an LDSVM trainer.\r\nFixes #4031 .\r\nI will add documentation and samples in the next iterations.","Url":"https://github.com/dotnet/machinelearning/pull/4060","RelatedDescription":"Open PR \"LDSVM trainer\" (#4060)"},{"Id":"476419630","IsPullRequest":true,"CreatedAt":"2019-08-03T14:46:23","Actor":"codemzs","Number":"4059","RawContent":null,"Title":"Update Build certificate/signing.","State":"closed","Body":"fixes official builds.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4059","RelatedDescription":"Closed or merged PR \"Update Build certificate/signing.\" (#4059)"},{"Id":"475384995","IsPullRequest":true,"CreatedAt":"2019-08-03T03:07:20","Actor":"tannergooding","Number":"4050","RawContent":null,"Title":"Exposing a new DatabaseReader type to track state and allow multi-threaded usage","State":"closed","Body":"As per the title, this adds a new abstract `DatabaseReader` class that allows the various database types to more easily track and expose the state required. This allows easy and configurable state tracking and cleanup, ","Url":"https://github.com/dotnet/machinelearning/pull/4050","RelatedDescription":"Closed or merged PR \"Exposing a new DatabaseReader type to track state and allow multi-threaded usage\" (#4050)"},{"Id":"475977171","IsPullRequest":true,"CreatedAt":"2019-08-02T17:57:24","Actor":"najeeb-kazmi","Number":"4056","RawContent":null,"Title":"Make Microsoft.ML.Ensemble internals visible to NimbusML DotNetBridge","State":"closed","Body":"Fixes #4055 \r\n\r\nRequired for adding Ensemble trainers to NimbusML, which is required by Azure ML.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4056","RelatedDescription":"Closed or merged PR \"Make Microsoft.ML.Ensemble internals visible to NimbusML DotNetBridge\" (#4056)"},{"Id":"475976200","IsPullRequest":false,"CreatedAt":"2019-08-02T17:57:24","Actor":"najeeb-kazmi","Number":"4055","RawContent":null,"Title":"Make Microsoft.ML.Ensemble internals visible to NimbusML DotNetBridge","State":"closed","Body":"Required for adding Ensemble trainers to NimbusML, which is required by Azure ML.","Url":"https://github.com/dotnet/machinelearning/issues/4055","RelatedDescription":"Closed issue \"Make Microsoft.ML.Ensemble internals visible to NimbusML DotNetBridge\" (#4055)"},{"Id":"476273919","IsPullRequest":false,"CreatedAt":"2019-08-02T17:02:02","Actor":"esso23","Number":"4058","RawContent":null,"Title":"DetectSpikeBy(Ssa|Iid) confidence param should be double","State":"open","Body":"This one is pretty simple. Confidence parameter in `DetectIidSpike` & `DetectSpikeBySsa` should be of type `double`. It makes no sense that it is of type `Int32` since it is being cast to `double` when creating `SsaSpikeDetector.Options()` anyway.\r\n\r\nSame thing goes for `DetectChangePointBySsa`, `DetectIidChangePoint` and possibly others.\r\n\r\nRight now it is not possible to search only for \"extreme spikes\" (confidence = ~99.9 or even more) using these extension methods.\r\n\r\nThanks\r\nEsso","Url":"https://github.com/dotnet/machinelearning/issues/4058","RelatedDescription":"Open issue \"DetectSpikeBy(Ssa|Iid) confidence param should be double\" (#4058)"},{"Id":"475937688","IsPullRequest":true,"CreatedAt":"2019-08-01T23:59:18","Actor":"artidoro","Number":"4054","RawContent":null,"Title":"WIP: Preview of Torch support","State":"open","Body":"Fixes #4053.\r\n\r\nI follow the API used in `TensorFlowTransformer` very closely to add support for Torch. We have `TorchModel` class that can be loaded through `mlContext.Model.LoadTorchModel(\"pathToModel\")`. There is then a method on the `TorchModel` class that produces `TorchScoringEstimator` and that requires the usual names of input and output columns as well as the shape of the input vector. After calling `Fit()` on the pipeline we obtain a `TorchTransformer` that applies the Torch model to data in an `IDataView` column.\r\n\r\nFor training the only difference will be that instead of providing a path to a pretrained model, a `TorchModel` class will be created from a `TorchSharp.NN.Module` class. \r\n\r\nSupport for Torch in ML.NET:\r\n- [x] scoring\r\n- [ ] training ","Url":"https://github.com/dotnet/machinelearning/pull/4054","RelatedDescription":"Open PR \"WIP: Preview of Torch support\" (#4054)"},{"Id":"475935552","IsPullRequest":false,"CreatedAt":"2019-08-01T23:48:48","Actor":"artidoro","Number":"4053","RawContent":null,"Title":"Torch support in ML.NET","State":"open","Body":"As ML.NET increases it's support for deep learning, we should add support for PyTorch models.\r\n[TorchSharp](https://github.com/xamarin/TorchSharp) has bindings for LibTorch (PyTorch's C++ frontend) and offers the following functionality:\r\n\r\n- Score models that were previously defined and trained in PyTorch's python API\r\n- Define and train models directly in C#\r\n\r\nWe could have a scoring functionality similar to the TensorFlow scoring. We could also add training of Torch models defined in C#. ","Url":"https://github.com/dotnet/machinelearning/issues/4053","RelatedDescription":"Open issue \"Torch support in ML.NET\" (#4053)"},{"Id":"475908260","IsPullRequest":false,"CreatedAt":"2019-08-01T22:01:45","Actor":"CESARDELATORRE","Number":"4052","RawContent":null,"Title":"Possible new feature: Support Azure Data Lake Storage as source of datasets for training a model","State":"open","Body":"For Big Data customers using Azure Datalake Storage it would be very interesting to be able to use their data directly from their sources in Azure Datalake Storage when in need to train with large datasets. See:\r\n\r\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction\r\n\r\nThis feature would be another type of 'Loader' in ML.NET.","Url":"https://github.com/dotnet/machinelearning/issues/4052","RelatedDescription":"Open issue \"Possible new feature: Support Azure Data Lake Storage as source of datasets for training a model\" (#4052)"},{"Id":"475638693","IsPullRequest":false,"CreatedAt":"2019-08-01T11:52:11","Actor":"robmohseni","Number":"4051","RawContent":null,"Title":"LightGBM is producing different multiclass scores after loading saved model","State":"open","Body":"### System information\r\n\r\nWindows 10\r\nMicrosoft.ML (1.2.0)\r\nMicrosoft.ML.LightGbm (1.2.0)\r\n.NET Core 2.2\r\n\r\n### Issue\r\n\r\nAfter training a lightgbm model, the model is producing multiclass scores between [0, 1] which totals 1, as expected. \r\n\r\nHowever, after saving the model, then loading it into a new trainedModel object - the scores are now not probabilities, but decimal values. \r\n\r\nI have tested the saving and loading with other model types and I cannot replicate the results. It is only the case with the lightgbm model.\r\n\r\nPlease advise. I am now attempting to rollback library versions to see if it's still an issue\r\n\r\n### Source code / logs\r\n\r\n**Before saving model...**\r\n0.003305528\r\n0.01293249\r\n0.01907223\r\n0.9646355\r\n5.421485E-05\r\n3.556848E-08\r\n\r\n**After saving model...**\r\n-3.623514\r\n-2.259367\r\n-1.870877\r\n2.05264\r\n-7.733911\r\n-15.06316\r\n\r\n![image](https://user-images.githubusercontent.com/7580312/62291047-bcda7300-b45a-11e9-8918-1ab8bbb17d98.png)\r\n\r\n\r\nSource code\r\n\r\n\r\nmlContext.Model.Save(trainedModel, dataView.Schema, _modelPath);\r\n\r\n            // Save Data Prep transformer\r\n            //mlContext.Model.Save(pipeline, dataView.Schema, \"data_preparation_pipeline.zip\");\r\n\r\n            schema = dataView.Schema;\r\n\r\n            Console.WriteLine(\"Before saving model...\");\r\n            TestModelOutput(mlContext, trainedModel);\r\n\r\n            // Load trained model\r\n            trainedModel = mlContext.Model.Load(_modelPath, out schema);\r\n            //trainedModel = mlContext.Model.LoadWithDataLoader()\r\n\r\n            Console.WriteLine(\"After saving model...\");\r\n            TestModelOutput(mlContext, trainedModel);\r\n\r\n private static void TestModelOutput(MLContext mlContext, ITransformer model)\r\n        {\r\nIDataView batchData = mlContext.Data.LoadFromEnumerable(testActions);\r\n\r\n            IDataView predictions = model.Transform(batchData);\r\n\r\n            IEnumerable<PredictionData> predictedResults = mlContext.Data\r\n                .CreateEnumerable<PredictionData>(predictions, reuseRowObject: false);\r\n\r\n            foreach (var item in predictedResults)\r\n            {\r\n                foreach (var score in item.Score)\r\n                {\r\n                    Console.WriteLine(score);\r\n                }\r\n                \r\n            }\r\n}\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4051","RelatedDescription":"Open issue \"LightGBM is producing different multiclass scores after loading saved model\" (#4051)"},{"Id":"474882562","IsPullRequest":false,"CreatedAt":"2019-07-31T00:42:48","Actor":"justinormont","Number":"4049","RawContent":null,"Title":"AutoML CLI ignores the normalized column name","State":"open","Body":"In the normalization function for column names, we call the Sanitize() function, then ignore its result (besides the 1st letter).\r\n\r\nThis line:\r\nhttps://github.com/dotnet/machinelearning/blob/a15aaa73ffa3798d4ab6c79672a7d3859d36030b/src/mlnet/Utilities/Utils.cs#L81\r\n\r\nShould be:\r\n```C#\r\nreturn sanitizedInput.First().ToString().ToUpper() + sanitizedInput.Substring(1);\r\n```\r\n\r\nNoted as something to fix after https://github.com/dotnet/machinelearning/pull/3882 is merged into master.","Url":"https://github.com/dotnet/machinelearning/issues/4049","RelatedDescription":"Open issue \"AutoML CLI ignores the normalized column name\" (#4049)"},{"Id":"474568845","IsPullRequest":false,"CreatedAt":"2019-07-30T12:55:59","Actor":"acrigney","Number":"4048","RawContent":null,"Title":"System.ArgumentOutOfRangeException : Could not find input column 'SamplingKeyColumn'","State":"open","Body":"### System information\r\n\r\n- **Win10/distro**:\r\n- **.NET Version Core 2.1**: \r\n\r\n### Issue\r\n\r\nWhen I am running my RefitBestPipeline function. i.e my function to run my model over the entire data I got this error.\r\n\r\nMessage: System.ArgumentOutOfRangeException : Could not find input column 'SamplingKeyColumn'\r\nParameter name: inputSchema\r\n\r\nThis is some internal error I am calling the same load and transfer function that I used to build my model.\r\n\r\n### Source code / logs\r\nprivate ITransformer RefitBestPipeline(ExperimentResult<RegressionMetrics> experimentResult)\r\n        {\r\n            DebugHelper.WriteHeader(\"=============== Re-fitting best pipeline ===============\");\r\n            //var textLoader = mlContext.Data.CreateTextLoader(columnInference.TextLoaderOptions);\r\n            //_trainDataView = _mlContext.Data.LoadFromEnumerable<T>(trainingCollection);\r\n            //_testDataView = _mlContext.Data.LoadFromEnumerable<T>(testCollection);\r\n\r\n            //IEnumerable<T> allData = trainingCollection.Concat(testCollection);\r\n            //IDataView allDataView = _mlContext.Data.LoadFromEnumerable<T>(testCollection);          \r\n            // Generate the dataview for all of the data\r\n            LoadData(_modelInput.TrainingCollection);\r\n            TransformData();\r\n\r\n            //var combinedDataView = textLoader.Load(new MultiFileSource(TrainDataPath, TestDataPath));\r\n            RunDetail<RegressionMetrics> bestRun = experimentResult.BestRun;\r\n\r\n            return bestRun.Estimator.Fit(_trainDataView); // pass in the data view for all of the data.\r\n        }\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4048","RelatedDescription":"Open issue \"System.ArgumentOutOfRangeException : Could not find input column 'SamplingKeyColumn'\" (#4048)"},{"Id":"474287345","IsPullRequest":false,"CreatedAt":"2019-07-29T22:36:20","Actor":"justinormont","Number":"4047","RawContent":null,"Title":"Improve \"Invalid TValue\" error message","State":"open","Body":"When throwing \"Invalid TValue\" runtime errors, we tell users which type they entered, but don't tell the user the type that is needed. We tell them their current type is wrong, but not the right type.\r\n\r\nThere are current [23 places](https://github.com/dotnet/machinelearning/search?q=%22Invalid+TValue%22&unscoped_q=%22Invalid+TValue%22) we throw this error. Our most common is when calling a `GetGetter()`.\r\n\r\nThe one I'm hitting at the moment:\r\nhttps://github.com/dotnet/machinelearning/blob/45b6c43387294d19cad843a21e87539213e8d34c/src/Microsoft.ML.Data/Data/DataViewUtils.cs#L1128\r\n\r\n## Task:\r\nTo make this more actionable, we should tell the user which type is needed for the column type.","Url":"https://github.com/dotnet/machinelearning/issues/4047","RelatedDescription":"Open issue \"Improve \"Invalid TValue\" error message\" (#4047)"},{"Id":"474172450","IsPullRequest":false,"CreatedAt":"2019-07-29T17:36:52","Actor":"NeoXtreem","Number":"4046","RawContent":null,"Title":"Path error on mkllibpath parameter running build.cmd","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.17134\r\n- **.NET Version (eg., dotnet --info)**: 2.2.102\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan **build.cmd** in root folder in a VS 2019 developer command prompt.\r\n\r\n- **What happened?**\r\nBuild failed with error: `The system cannot find the path specified.`\r\nIt occurs when running the command:\r\n`C:\\Users\\micro\\OneDrive - X-treem Software\\Development\\Repos\\General\\Frameworks\\ML.NET\\src\\Native\\build.cmd Debug x64 --mkllibpath C:\\Users\\micro\\OneDrive - X-treem Software\\Development\\Repos\\General\\Frameworks\\ML.NET\\packages/mlnetmkldeps\\0.0.0.9\\runtimes\\win-x64\\native`\r\nIt appears that the mixture of forward slashes and backslashes may be causing the error as the path does exist. Only one of these slash types should be used in the path after `--mkllibpath`.\r\n\r\n- **What did you expect?**\r\nBuild succeed.  #3336 is a similar issue that was closed on the basis the issue was fixed, but it clearly isn't.\r\n\r\n### Source code / logs\r\n[msbuild.log](https://github.com/dotnet/machinelearning/files/3439365/msbuild.log)","Url":"https://github.com/dotnet/machinelearning/issues/4046","RelatedDescription":"Open issue \"Path error on mkllibpath parameter running build.cmd\" (#4046)"},{"Id":"474128196","IsPullRequest":false,"CreatedAt":"2019-07-29T15:53:19","Actor":"acrigney","Number":"4045","RawContent":null,"Title":"Common issue Only supported feature column types are Boolean, Single, and String. ","State":"open","Body":"### System information\r\n\r\n\r\n- **OS version Windows 10 /distro**:\r\n- **.NET Version (.NET Core 2.1)**: \r\n\r\n### Issue\r\nI have removed the unsupported column types in my data but I am still getting this message\r\n\r\nMessage: System.ArgumentException : Only supported feature column types are Boolean, Single, and String. Please change the feature column IntMonth of type Int32 to one of the supported types.\r\nParameter name: trainData\r\nThe problem is that the conversions and drop columns are not converting and dropping the columns as they are not operating on the correct object.\r\nHow can I get the int32 and double columns removed?\r\nHow can I do this please?\r\nHere is some example code that \r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nprivate void TransformData()\r\n        {\r\n            var dataProcessPipeline = _mlContext.Transforms.DropColumns(_modelInput.KeyFeatureToIgnore);\r\n            PropertyInfo propertyInfo;\r\n\r\n            foreach (string feature in _includedFeatureNames)\r\n            {\r\n                propertyInfo = _allFeaturesPropertyInfo.Find(x => x.Name == feature);\r\n                if (typeof(Double) == propertyInfo.PropertyType)\r\n                {\r\n                    dataProcessPipeline.Append(_mlContext.Transforms.Conversion.ConvertType(feature, feature, DataKind.Single));\r\n                }\r\nelse if (typeof(Int32) == propertyInfo.PropertyType)\r\n                {\r\n                    dataProcessPipeline.Append(_mlContext.Transforms.Conversion.ConvertType(feature, feature, DataKind.Single));\r\n                }\r\n                dataProcessPipeline.Append(_mlContext.Transforms.NormalizeMeanVariance(feature, useCdf: false));\r\n            }\r\n\r\n            // Now we can transform the data and look at the output to confirm the\r\n            // behavior of the estimator. This operation doesn't actually evaluate\r\n            // data until we read the data below.\r\n            var tansformer = dataProcessPipeline.Fit(_trainDataView);\r\n\r\n            _trainDataView = tansformer.Transform(_trainDataView);\r\n\r\n            var trainDataViewSchemaTest = _trainDataView.Schema;\r\n            \r\n            \r\n        }\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4045","RelatedDescription":"Open issue \"Common issue Only supported feature column types are Boolean, Single, and String. \" (#4045)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-07T05:30:42.7410098Z","RunDurationInMilliseconds":701}