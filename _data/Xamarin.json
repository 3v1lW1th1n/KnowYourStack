{"Data":{"Blog":{"FeedItems":[{"Title":"Adaptive Mobile Designs with FlexLayout","PublishedOn":"2018-08-03T17:33:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms is fantastic for quickly shipping a single code base to multiple platforms and devices. As soon as you are present on all those different screens, you need to make sure your UI looks as...","Href":"https://blog.xamarin.com/adaptive-mobile-designs-with-flexlayout/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in August!","PublishedOn":"2018-08-01T19:46:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This year&#8217;s .NET Conf is coming to you September 12 &#8211; 14, 2018! Over the course of the three days, you have a wide selection of live sessions that feature speakers from the community and...","Href":"https://blog.xamarin.com/xamarin-dotnet-developer-events-august/","RawContent":null},{"Title":"Guest Post: Visual UI tests on iOS simulator using Xamarin and Appium","PublishedOn":"2018-07-30T19:07:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Sophie Tagar, a customer support engineer at Applitools. Previously, Sophie was a software developer at Matrix Israel where, among other things, she did full stack...","Href":"https://blog.xamarin.com/visual-ui-tests-ios-simulator-using-xamarin-appium/","RawContent":null},{"Title":"Announcing Xamarin.Android 9.0 (P) Preview","PublishedOn":"2018-07-27T16:11:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android 9.0 (P) introduces many features such as Wi-Fi RTT(Round-Trip-Time), Display cutout support, Notification enhancements, Multi-camera support, and much more. We&#8217;re excited to announce...","Href":"https://blog.xamarin.com/xamarin-android-9-0-p-preview/","RawContent":null},{"Title":"Previewing Files Inside Your Xamarin.iOS App","PublishedOn":"2018-07-25T18:21:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If your app interacts with files, such as email attachments or photos, allowing users to preview those files without leaving your app is a great way to enhance the user&#8217;s experience....","Href":"https://blog.xamarin.com/previewing-files-with-xamarin-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.1: Improving the Little Things","PublishedOn":"2018-07-18T19:27:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Earlier this year, we surveyed Xamarin.Forms developers about the kinds of custom controls and extra platform code being written repeatedly that should be considered for support “in the box”. From...","Href":"https://blog.xamarin.com/xamarin-forms-3-1-improvments/","RawContent":null},{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null},{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8074320211","Type":"PullRequestEvent","CreatedAt":"2018-08-06T22:40:41","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2041","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix for UseLatest when API level not installed\" (#2041) at xamarin/xamarin-android","RelatedBody":"Cherry-pick from (#2018)\r\n\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2007\r\n\r\nApparently there is a situation we aren't doing the right thing for:\r\n\r\n  - `$(TargetFrameworkVersion)`=v9.0\r\n  - `$(AndroidUseLatestPlatformSdk)`=True\r\n  - API 28 is not installed\r\n\r\nIn this case, we *should* be downgrading `$(TargetFrameworkVersion)`\r\nto `v8.1`.  Instead we get:\r\n\r\n\tResolveSdksTask Outputs:\r\n\t    AndroidApiLevel: 27\r\n\t    AndroidApiLevelName: 27\r\n\t    TargetFrameworkVersion: v9.0\r\n\r\nThis puts us in a weird state, since we would use `.jar` files for\r\ndifferent API levels:\r\n\r\n  - `platforms/android-27/android.jar`\r\n  - `xbuild-frameworks/MonoAndroid/v9.0/mono.android.jar`\r\n\r\nThis in turn causes `proguard` (and likely other things) to fail:\r\n\r\n\tPROGUARD : warning : there were 38 unresolved references to classes or interfaces.\r\n\t    You may need to add missing library jars or update their versions.\r\n\t    If your code works fine without the missing classes, you can suppress\r\n\t    the warnings with '-dontwarn' options.\r\n\t    (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)\r\n\r\nThe fix here is somewhat complicated:\r\n\r\n 1. Starting at `maxSupported` API level, check to see if:\r\n 2. An Android API directory corresponding to `maxSupported` exists,\r\n    e.g. `platforms/android-28`, and\r\n 3. A `$(TargetFrameworkVersion)` directory corresponding to (2)\r\n    exists such as `MonoAndroid/v9.0`.\r\n 4. Decrement `maxSupported` until a value which satisfies *both*\r\n    (2) and (3) is found.\r\n\r\nAdd a parameterized test cases verifying that the right thing is\r\nhappening when `$(AndroidUseLatestPlatformSdk)`=True and different\r\nAPI levels are actually installed.\r\n\r\nOther changes:\r\n\r\n  - Refactored a bit to not call `int.TryParse()` when not needed. We\r\n    could just use the `int` value and call `ToString()` in a better\r\n    order.\r\n  - One existing test case had an incorrect failure message; fixed.\r\n\r\nFinally, remove `$(_SupportedApiLevel)`.  This MSBuild property\r\nappears to be vestigial, and was causing confusion but had no real\r\nbenefit, i.e. as `$(_SupportedApiLevel)` is used to generate the\r\n`ANDROID_X` values in `<GetAndroidDefineConstants/>`, what possible\r\nvalue is there in allowing it to be *higher* than\r\n`$(TargetFrameworkVersion)`, which controls which `Mono.Android.dll`\r\nthe source code is compiled against?\r\n\r\nIt appears that we can just remove `$(_SupportedApiLevel)`, and use\r\n`$(_AndroidApiLevel)` in its place.  I also checked private repos,\r\nand could find nothing that is using this property."},{"Id":"8074209199","Type":"PullRequestEvent","CreatedAt":"2018-08-06T22:07:59","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2018","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] fix for UseLatest when API level not installed\" (#2018) at xamarin/xamarin-android","RelatedBody":"Fixes #2007\r\n\r\nApparently there is a situation we aren't doing the right thing for:\r\n- `TargetFrameworkVersion` is set to `v9.0`\r\n- `AndroidUseLatestPlatformSdk`=`True`\r\n- API 28 is not installed\r\n\r\nIn this case, we *should* be downgrading `TargetFrameworkVersion` to `v8.1`. Instead we get:\r\n\r\n    ResolveSdksTask Outputs:\r\n        AndroidApiLevel: 27\r\n        AndroidApiLevelName: 27\r\n        TargetFrameworkVersion: v9.0\r\n\r\nThis puts us in a weird state, since we would use JAR files for\r\ndifferent API levels:\r\n- `platforms/android-27/android.jar`\r\n- `xbuild-frameworks/MonoAndroid/v9.0/mono.android.jar`\r\n\r\nThis causes `proguard` (and likely other things) to fail:\r\n\r\n    PROGUARD : warning : there were 38 unresolved references to classes or interfaces.\r\n        You may need to add missing library jars or update their versions.\r\n        If your code works fine without the missing classes, you can suppress\r\n        the warnings with '-dontwarn' options.\r\n        (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)\r\n\r\nThe fix here is somewhat complicated:\r\n- Start at `maxSupported` API level and decrement until...\r\n- An Android API level directory exists\r\n- A `TargetFrameworkVersion` directory exists such as `MonoAndroid/v9.0`\r\n- Use a properly paired API level + `TargetFrameworkVersion` combination\r\n\r\nI also added parameterized test cases verifying the right thing is\r\nhappening when `AndroidUseLatestPlatformSdk` is enabled and different\r\nAPI levels are actually installed.\r\n\r\nOther changes:\r\n- Refactored a bit to not call `int.TryParse` when not needed. We\r\ncould just use the `int` value and call `ToString ()` in a better\r\norder.\r\n- One existing test case had an incorrect failure message, I fixed.\r\n- Removed `$(_SupportedApiLevel)` in favor of `$(_AndroidApiLevel)`,\r\nsince it appeared to be vestigial/not used"},{"Id":"8074209192","Type":"IssuesEvent","CreatedAt":"2018-08-06T22:07:59","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2007","RelatedDescription":"Closed issue \"Android App with Proguard enabled fails to build in Release mode\" (#2007) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new Android App project\r\n2. Set the configuration to Release\r\n3. Select 'Enable Proguard' checkbox in Android project options\r\n4. Save changes\r\n5. Build solution\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nBuild succeded\r\n\r\n### Actual Behavior\r\nBuild failed with \" \"java\" exited with code 1.\" error\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nhttp://xqa.blob.core.windows.net/gist/log-41f6c488213b4fde8589d3c1c517b668.txt\r\n\r\nUses XA Version: 9.0.0.18\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\nDiagnostic build output:\r\nhttp://xqa.blob.core.windows.net/gist/log-d2228aeedaf348229901105639ceed28.txt\r\n\r\nIDE log:\r\nhttp://xqa.blob.core.windows.net/gist/TestEnableProguard.Ide.log.180726133733-c6efd278b0904f24be5fc76a22cee454.txt\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->\r\n\r\n> VS bug [#655384](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/655384)"},{"Id":"8072927404","Type":"PullRequestEvent","CreatedAt":"2018-08-06T17:33:16","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2032","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Aapt2 & AndroidResgenExtraArgs compatibility\" (#2032) at xamarin/xamarin-android","RelatedBody":"Fixes #2029\r\n\r\nThe Xamarin.Android.Support.Vector.Drawable [1] NuGet package\r\noverrides `$(AndroidResgenExtraArgs)` with `--no-version-vectors`.\r\nSince 77d603a2 `aapt2` now has its own properties for `link` and\r\n`compile`. As a result people using `aapt2` are likely to encounter\r\nissues when using the above Nuget Package.\r\n\r\nTo help our users we can auto detect if the `--no-version-vectors`\r\nis set in the `$(AndroidResgenExtraArgs)` property and auto\r\ninclude that into the new `$(AndroidAap2LinkExtraArgs)` property\r\n(if it does not contain it already). This will hopefully provide\r\na smooth transiton for users using `aapt2`.\r\n\r\nNote `$(AndroidAap2CompileExtraArgs)` does NOT need the same argument\r\nsince is it not a valid argument for the `compile` task.\r\n\r\n[1] https://www.nuget.org/packages/Xamarin.Android.Support.Vector.Drawable/27.0.2.1"},{"Id":"8072927391","Type":"IssuesEvent","CreatedAt":"2018-08-06T17:33:16","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2029","RelatedDescription":"Closed issue \"Aapt2 & AndroidResgenExtraArgs compatibility\" (#2029) at xamarin/xamarin-android","RelatedBody":"Context: https://xamarinhq.slack.com/archives/C03CEGRUW/p1533163680000177\r\nContext: https://github.com/xamarin/xamarin-android/pull/2020#issuecomment-409719046\r\n\r\nAs the [Xamarin.Android.Support.Vector.Drawable](https://www.nuget.org/packages/Xamarin.Android.Support.Vector.Drawable/27.0.2.1) NuGet package overrides `$(AndroidResgenExtraArgs)` and won't override the related `aapt2` properties -- because they don't yet exist in any usable form -- there is a concern that any existing projects which use the Xamarin.Android.Support.Vector.Drawable package *and* enable aapt2 may suffer a build failure.\r\n\r\nPossible (hackish?) workaround: update the `<Aapt2Link/>` (`<Aapt2Compile/>`?) target so that it *also* accepts `$(AndroidResgenExtraArgs)`, and does something like:\r\n\r\n```csharp\r\nif (AndroidResgenExtraArgs.Contains (\"--no-version-vectors\"))\r\n    ExtraArgs += \" --no-version-vectors\";\r\n```\r\n"},{"Id":"8072185387","Type":"IssuesEvent","CreatedAt":"2018-08-06T15:14:39","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2040","RelatedDescription":"Opened issue \"D8 and R8 Integration\" (#2040) at xamarin/xamarin-android","RelatedBody":"_[DRAFT]_\r\n\r\nThis is the D8 and R8 integration specification for Xamarin.Android.\r\n\r\n# What is D8? What is R8?\r\n\r\nAt a high level, here are the steps that occur during an Android application's Java compilation:\r\n- `javac` compiles Java code\r\n- `desugar` remove's the \"sugar\" (from Java 8 features) that are not fully supported on Android\r\n- `proguard` shrinks compiled Java code\r\n- `dx` \"dexes\" compiled Java code into Android [dex](https://source.android.com/devices/tech/dalvik/dalvik-bytecode) format. This is an alternate Java bytecode format supported by the Android platform.\r\n\r\nThis process has a few issues, such as:\r\n- [proguard](https://www.guardsquare.com/en/products/proguard/manual) is made by a third party, and aimed for Java in general (not Android specific)\r\n- `dx` is slower than it _could_ be\r\n\r\nSo in 2017, Google announced a \"next-generation\" dex compiler named [D8](https://android-developers.googleblog.com/2017/08/next-generation-dex-compiler-now-in.html).\r\n\r\n- D8 is a direct replacement for `dx`\r\n- R8 is a replacement for `proguard`, that also \"dexes\" at the same time. If using R8, a D8 call is not needed.\r\n\r\nBoth tools have support for various other Android-specifics:\r\n- Both `desugar` by default unless the `--no-desugaring` switch is specified\r\n- Both support [multidex](https://developer.android.com/studio/build/multidex)\r\n  - R8 additionally has support to generate a default `multidex.keep` file, that `proguard` can generate\r\n\r\nYou can find the source for D8 and R8 [here](https://r8.googlesource.com/r8/).\r\n\r\nFor reference, `d8 --help`:\r\n```\r\nUsage: d8 [options] <input-files>\r\n where <input-files> are any combination of dex, class, zip, jar, or apk files\r\n and options are:\r\n  --debug                 # Compile with debugging information (default).\r\n  --release               # Compile without debugging information.\r\n  --output <file>         # Output result in <outfile>.\r\n                          # <file> must be an existing directory or a zip file.\r\n  --lib <file>            # Add <file> as a library resource.\r\n  --classpath <file>      # Add <file> as a classpath resource.\r\n  --min-api               # Minimum Android API level compatibility\r\n  --intermediate          # Compile an intermediate result intended for later\r\n                          # merging.\r\n  --file-per-class        # Produce a separate dex file per input class\r\n  --no-desugaring         # Force disable desugaring.\r\n  --main-dex-list <file>  # List of classes to place in the primary dex file.\r\n  --version               # Print the version of d8.\r\n  --help                  # Print this message.\r\n```\r\n\r\nFor reference, `r8 --help`:\r\n```\r\nUsage: r8 [options] <input-files>\r\n where <input-files> are any combination of dex, class, zip, jar, or apk files\r\n and options are:\r\n  --release                # Compile without debugging information (default).\r\n  --debug                  # Compile with debugging information.\r\n  --output <file>          # Output result in <file>.\r\n                           # <file> must be an existing directory or a zip file.\r\n  --lib <file>             # Add <file> as a library resource.\r\n  --min-api                # Minimum Android API level compatibility.\r\n  --pg-conf <file>         # Proguard configuration <file>.\r\n  --pg-map-output <file>   # Output the resulting name and line mapping to <file>.\r\n  --no-tree-shaking        # Force disable tree shaking of unreachable classes.\r\n  --no-minification        # Force disable minification of names.\r\n  --no-desugaring          # Force disable desugaring.\r\n  --main-dex-rules <file>  # Proguard keep rules for classes to place in the\r\n                           # primary dex file.\r\n  --main-dex-list <file>   # List of classes to place in the primary dex file.\r\n  --main-dex-list-output <file>  # Output the full main-dex list in <file>.\r\n  --version                # Print the version of r8.\r\n  --help                   # Print this message.\r\n```\r\n\r\n# What does Xamarin.Android do *now*?\r\n\r\nIn other words, what is currently happening *before* we introduce D8/R8 support?\r\n\r\n1. The [Javac](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Tasks/Javac.cs) MSBuild task compiles `*.java` files to a `classes.zip` file.\r\n1. The [Desugar](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Tasks/Desugar.cs) MSBuild task \"desugars\" using `desugar_deploy.jar` if `$(AndroidEnableDesugar)` is `True`.\r\n1. The [Proguard](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Tasks/Proguard.cs) MSBuild task shrinks the compiled Java code if `$(AndroidEnableProguard)` is `True`. Developers may also supply custom proguard configuration files via `ProguardConfiguration` build items.\r\n1. The [CreateMultiDexMainDexClassList](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Tasks/CreateMultiDexMainDexClassList.cs) MSBuild task runs `proguard` to generate a final, combined `multidex.keep` file if `$(AndroidEnableMultiDex)` is `True`. Developers can also supply custom `multidex.keep` files via `MultiDexMainDexList` build items.\r\n1. The [CompileToDalvik](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Tasks/CompileToDalvik.cs) MSBuild task runs `dx.jar` to generate a final `classes.dex` file in `$(IntermediateOutputPath)android\\bin`. If `multidex` is enabled, a `classes2.dex` (and potentially more) are also generated in this location.\r\n\r\n# What would this process look like with D8 / R8?\r\n\r\nTwo new MSBuild tasks named `R8` and `D8` will be created.\r\n\r\n1. The [Javac](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Tasks/Javac.cs) MSBuild task will remain unchanged.\r\n1. `R8` will be invoked to create a `multidex.keep` file if `$(AndroidEnableMultiDex)` is `True`.\r\n1. `D8` will run if `$(AndroidEnableProguard)` is `False` and \"desugar\" by default.\r\n1. Otherwise, `R8` will run if `$(AndroidEnableProguard)` is `True` and will also \"desugar\" by default.\r\n\r\nSo in addition to be being faster (if Google's claims are true), we will be calling less tooling to accomplish the same results.\r\n\r\n# So how do developers use it? What are sensible MSBuild property defaults?\r\n\r\nCurrently, a `csproj` file might have the following properties:\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <AndroidEnableProguard>True</AndroidEnableProguard>\r\n        <AndroidEnableMultiDex>True</AndroidEnableMultiDex>\r\n        <AndroidEnableDesugar>True</AndroidEnableDesugar>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nTo enable the new behavior, we should introduce two new enum-style properties:\r\n- `$(AndroidDexGenerator)` - supports `dx` or `d8`\r\n- `$(AndroidLinkTool)` - supports `proguard` or `r8`\r\n\r\nBut for an existing project, a developer could opt-in to the new behavior with one property:\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <AndroidEnableProguard>True</AndroidEnableProguard>\r\n        <AndroidEnableMultiDex>True</AndroidEnableMultiDex>\r\n        <AndroidEnableDesugar>True</AndroidEnableDesugar>\r\n        <!--New property-->\r\n        <AndroidDexGenerator>d8</AndroidDexGenerator>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nThere should really only be one switch to turn on here, because:\r\n- You shouldn't be able to use `D8` in combination with `proguard`, it doesn't make sense.\r\n- You shouldn't be able to use `dx` in combination with `R8`, it doesn't make sense.\r\n- Developers should be able to use the existing properties for enabling code shrinking, `multidex`, and `desugar`.\r\n\r\nOur reasonable defaults would be:\r\n- If `AndroidDexGenerator` is omitted, `dx` and `CompileToDalvik` should be used. Until D8/R8 integration is deemed stable and enabled by default.\r\n- If `AndroidDexGenerator` is `d8` and `AndroidEnableDesugar` is omitted, `AndroidEnableDesugar` should be enabled.\r\n- If `AndroidLinkTool` is omitted and `AndroidEnableProguard` is `true`, we should use `r8` if `AndroidDexGenerator` is `d8` and `proguard` if `AndroidDexGenerator` is `dx`\r\n\r\nMSBuild properties default to something like:\r\n```xml\r\n<AndroidDexGenerator Condition=\" '$(AndroidDexGenerator)' == '' \">dx</AndroidDexGenerator>\r\n<AndroidDexGenerator Condition=\" '$(AndroidDexGenerator)' != 'd8' And '$(AndroidLinkTool)' == 'r8' \">d8</AndroidDexGenerator>\r\n<AndroidLinkTool Condition=\" '$(AndroidLinkTool)' == '' And '$(AndroidDexGenerator)' != 'd8' And '$(AndroidEnableProguard)' == 'True' \">proguard</AndroidLinkTool>\r\n<AndroidLinkTool Condition=\" '$(AndroidLinkTool)' != 'r8' And '$(AndroidDexGenerator)' == 'd8' And '$(AndroidEnableProguard)' == 'True' \">r8</AndroidLinkTool>\r\n<AndroidEnableDesugar Condition=\" '$(AndroidEnableDesugar)' == '' And ('$(AndroidDexGenerator)' == 'd8' Or '$(AndroidLinkTool)' == 'r8') \">True</AndroidEnableDesugar>\r\n```\r\n\r\nIf a user specifies a *weird* combination:\r\n- `AndroidDexGenerator` = `d8` and `AndroidLinkTool` = `proguard`\r\n  - `AndroidLinkTool` will get switched to `r8`\r\n- `AndroidDexGenerator` = `dx` and `AndroidLinkTool` = `r8`\r\n  - `AndroidDexGenerator` will get switched to `d8`\r\n- `AndroidEnableDesugar` is enabled when omitted if either `d8` or `r8` are used\r\n\r\nFor new projects that want to use D8/R8, code shrinking, and `multidex`, it would make sense to specify:\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <AndroidEnableMultiDex>True</AndroidEnableMultiDex>\r\n        <AndroidDexGenerator>d8</AndroidDexGenerator>\r\n        <AndroidLinkTool>r8</AndroidLinkTool>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n# Additional D8 / R8 settings?\r\n\r\n`--debug` or `--release` needs to be explicitly specified for both D8 and R8. We should use the [AndroidIncludeDebugSymbols](https://github.com/xamarin/xamarin-android/blob/221a2190ebb3aaec9ecd9b1cf8f7f6174c43153a/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L315-L336) property for this.\r\n\r\n`$(D8ExtraArguments)` and `$(R8ExtraArguments)` can be used to explicitly pass additional flags to D8 and R8.\r\n\r\n# How are we compiling / shipping D8 and R8?\r\n\r\nWe will add a submodule to `xamarin-android` for [r8](https://r8.googlesource.com/r8/). It should be pinned to a commit with a reasonable release tag, such as `1.2.35` for now.\r\n\r\nTo build r8, we have to:\r\n- Download and unzip a tool named [depot_tools](http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html) from the Chromium project\r\n- Put the path to `depot_tools` in `$PATH`\r\n- Run `gclient` so it will download/bootstrap gradle, python, and other tools\r\n- Run `python tools\\gradle.py d8 r8` to compile `d8.jar` and `r8.jar`\r\n- We will need to ship `d8.jar` and `r8.jar` in our installers, similar to how we are shipping `desugar_deploy.jar`\r\n\r\n# Current Implementation\r\n\r\n[PR #2019](https://github.com/xamarin/xamarin-android/pull/2019) is the current implementation.\r\n\r\nHowever, it became clear that a lot of the ideas around D8/R8 are not formalized or _known_.\r\n\r\nThe goal here will be to actually explain what everything _should_ do, before I finish the implementation."},{"Id":"8071743272","Type":"IssuesEvent","CreatedAt":"2018-08-06T14:04:40","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2039","RelatedDescription":"Opened issue \"Encountering 'error MSB4044: The \"InstallPackageAssemblies\" task was not given a value for the required parameter \"TargetFrameworkVersion\"' against d15-9\" (#2039) at xamarin/xamarin-android","RelatedBody":"I'm hitting an issue with `InstallPackageAssemblies` on both Mac and Windows during certain in IDE and from command line installation attempts.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download or clone https://github.com/xamarin/monodroid-samples/tree/master/android5.0/Cheesesquare\r\n2. nuget.exe restore monodroid-samples\\android5.0\\Cheesesquare\\Cheesesquare.sln\r\n3. msbuild /t:Install monodroid-samples\\android5.0\\Cheesesquare\\Cheesesquare.csproj\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nInstallation succeeds\r\n\r\n### Actual Behavior\r\nInstallation fails with \r\n>   C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.Debugging.targets(479,2): error MSB4044: The \"InstallPackageAssemblies\" task was not given a value for the required parameter \"TargetFrameworkVersion\".\r\n\r\n\r\n### Version Information\r\nXamarin.Android SDK   9.1.0.5 (HEAD/ed37b5cd7)\r\nhttps://gist.github.com/pjcollins/7c21e5597eaf15824b49d407538a20df\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttps://gist.githubusercontent.com/pjcollins/a26d0fde1c7c6338bbea7ff955974d1d/raw/c8dcd43cee65e0962948283fc6dcff2bc595ad0a/gistfile1.txt\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8075006965","Type":"IssuesEvent","CreatedAt":"2018-08-07T02:51:09","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3496","RelatedDescription":"Closed issue \"[suggestion] Xamarin.Forms.UI package for cross platform UI\" (#3496) at xamarin/Xamarin.Forms","RelatedBody":"Current Xmarin.Forms is force on platform native look,  but for most phone development ,  developers who use native language want thire app look the same or similar on each platform.\r\n\r\nWhy don't build a beautiful cross platform UI by default and force on customization ?\r\n\r\nand most phone app won't running on desktop, we can have different namespance in that package `Xamrin.Forms.UI.Phones` `Xamarin.Forms.UI.Desktop`  `Xamarin.Forms.UI.Tvs`"},{"Id":"8074905213","Type":"IssuesEvent","CreatedAt":"2018-08-07T02:12:45","Actor":"John0King","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3496","RelatedDescription":"Opened issue \"[suggestion] Xamarin.Forms.UI package for cross platform UI\" (#3496) at xamarin/Xamarin.Forms","RelatedBody":"Current Xmarin.Forms is force on platform native look,  but for most phone development ,  developers who use native language want thire app look the same or similar on each platform.\r\n\r\nWhy don't build a beautiful cross platform UI by default and force on customization ?\r\n\r\nand most phone app won't running on desktop, we can have different namespance in that package `Xamrin.Forms.UI.Phones` `Xamarin.Forms.UI.Desktop`  `Xamarin.Forms.UI.Tvs`"},{"Id":"8074813685","Type":"IssuesEvent","CreatedAt":"2018-08-07T01:38:58","Actor":"baywolf-studios","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3495","RelatedDescription":"Opened issue \" MasterDetail on Mac crashes when navigation from a subview to a different view from master\" (#3495) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen navigating with a MasterDetail view in a Xamarin.Forms macOS project. You can navigate between the main pages fine. But if you navigate to a child page of one of the main pages and attempt to go from there directly to a different main page, an exception is thrown. I created a repo with a sample project that reproduces this issue.\r\n\r\npseudo code (actual repo link at bottom):\r\n_navigationService.NavigateAsync(\"/MainPage/NavigationPage/ViewA\");\r\n_navigationService.NavigateAsync(\"SubViewA\");\r\n_navigationService.NavigateAsync(\"NavigationPage/ViewB\");\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run project\r\n2. Click on SubViewA label to navigate to the subviewA page.\r\n3. Now click on the ViewB label to navigate to ViewB page.\r\n4. You should see an exception here.\r\n\r\n### Expected Behavior\r\nNo exception\r\n\r\n### Actual Behavior\r\nException\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 7.0.0.396\r\n- Last known good version: na\r\n- Xamarin.Forms version: 3.1.0.637273\r\n- IDE: VisualStudio Mac\r\n\r\n### Reproduction Link\r\n\r\n[https://github.com/baywolf-studios/TestMasterDetail](https://github.com/baywolf-studios/TestMasterDetail)\r\n"},{"Id":"8074513005","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:45:13","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3490","RelatedDescription":"Closed issue \"Xamarin.iOS: Nullable DateTimeOffset can't use Property.SetInfo\" (#3490) at xamarin/Xamarin.Forms","RelatedBody":"This error occured the first time while deserializing a json string. The destination object had a nullable DateTimeOffset. Using a DateTimeOffset works fine. The statement from Xamarin.iOS documentation is \"Using Reflection's Property.SetInfo to set the value on a Nullable<T> is not currently supported.\".\r\n\r\n### Description\r\nXamarin.iOS limitations:  https://docs.microsoft.com/en-us/xamarin/ios/internals/limitations  \r\nEF Core should have the same problem: https://bugzilla.xamarin.com/show_bug.cgi?id=61053\r\nSince AutoMapper (version 7.0.1) is using reflection too it might have the same problem (untested).\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create an object with nullable DateTimeOffset\r\n2.  Create a json string for that object where the DateTimeOffset variable is null\r\n3.  Deserialize this string -> crash\r\n\r\n### Expected Behavior\r\nShould deserialize like not nullable DateTimeOffset\r\n\r\n### Actual Behavior\r\nApp crash on deserialize nullable DateTimeOffset\r\n\r\n### Basic Information\r\n\r\n- IDE: Visual Studio for Mac 7.5.4 (Build 3)\r\n- Platform Target Frameworks: \r\n  - iOS:  11.4.1 (15G77)\r\n- Nuget Packages:  Newtonsoft.Json 11.0.2\r\n- Affected Devices: iPad\r\n\r\n"},{"Id":"8074511085","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:44:31","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3489","RelatedDescription":"Reopened issue \"Objectdisposed crash when closing app in release build\" (#3489) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nLately, we have an app that crashes every time the app is closed (swiped away) in android. The issue ONLY occurs on release builds. On debug builds the app works fine. The exception stacktrace (caught by appcenter) is:\r\n\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nSystem.ObjectDisposedException: Cannot access a disposed object. Object name: 'Xamarin.Forms.Platform.Android.AppCompat.MasterDetailPageRenderer'.\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nJniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters)\r\nDrawerLayout.RemoveDrawerListener (Android.Support.V4.Widget.DrawerLayout+IDrawerListener listener)\r\nNavigationPageRenderer.Dispose (System.Boolean disposing)\r\nObject.Dispose ()\r\nPlatform.SetPageInternal (Xamarin.Forms.Page newRoot)\r\n\r\nThis is a very pressing issue for us, since we are unable to release an update for our app when the app crashes (almost) every time it is closed.\r\n\r\n### Steps to Reproduce\r\nWe cannot seem to reproduce it in a small app. I seems to happen to 1 of our 3 apps. Even though there is major code sharing between them.\r\n\r\n### Expected Behavior\r\nApp doesn't crash on close\r\n\r\n### Actual Behavior\r\nApp crashes on close\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: don't know. Reverted back until 3.0.482510 but app still crashed.\r\n- IDE: Visual studio 2017\r\n- Platform Target Frameworks: \r\n  - Android: 8.1 (27)\r\n- Android Support Library Version: 27.0.2.1\r\n- Nuget Packages: Lots.\r\n- Affected Devices: Tested on LG Nexus 5X\r\n\r\n### Reproduction Link\r\nWe are unable to create a small reproduction. It seems be a race condition in our app that isn't present in a small demo app. We're trying to discover a point in time in our history where the error started occurring, which might give us a clue as to what is the trigger for this issue.\r\n"},{"Id":"8074508955","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:43:44","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3489","RelatedDescription":"Closed issue \"Objectdisposed crash when closing app in release build\" (#3489) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nLately, we have an app that crashes every time the app is closed (swiped away) in android. The issue ONLY occurs on release builds. On debug builds the app works fine. The exception stacktrace (caught by appcenter) is:\r\n\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nSystem.ObjectDisposedException: Cannot access a disposed object. Object name: 'Xamarin.Forms.Platform.Android.AppCompat.MasterDetailPageRenderer'.\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nJniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters)\r\nDrawerLayout.RemoveDrawerListener (Android.Support.V4.Widget.DrawerLayout+IDrawerListener listener)\r\nNavigationPageRenderer.Dispose (System.Boolean disposing)\r\nObject.Dispose ()\r\nPlatform.SetPageInternal (Xamarin.Forms.Page newRoot)\r\n\r\nThis is a very pressing issue for us, since we are unable to release an update for our app when the app crashes (almost) every time it is closed.\r\n\r\n### Steps to Reproduce\r\nWe cannot seem to reproduce it in a small app. I seems to happen to 1 of our 3 apps. Even though there is major code sharing between them.\r\n\r\n### Expected Behavior\r\nApp doesn't crash on close\r\n\r\n### Actual Behavior\r\nApp crashes on close\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: don't know. Reverted back until 3.0.482510 but app still crashed.\r\n- IDE: Visual studio 2017\r\n- Platform Target Frameworks: \r\n  - Android: 8.1 (27)\r\n- Android Support Library Version: 27.0.2.1\r\n- Nuget Packages: Lots.\r\n- Affected Devices: Tested on LG Nexus 5X\r\n\r\n### Reproduction Link\r\nWe are unable to create a small reproduction. It seems be a race condition in our app that isn't present in a small demo app. We're trying to discover a point in time in our history where the error started occurring, which might give us a clue as to what is the trigger for this issue.\r\n"},{"Id":"8074417483","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:11:31","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3484","RelatedDescription":"Closed issue \"ReadOnly property for Entry, Editor and others\" (#3484) at xamarin/Xamarin.Forms","RelatedBody":"HI,\r\n\r\nI know you already have IsEnabled for the controls but it will disable it which is totally different than the purpose of ReadOnly where the control is enabled but user cannot change it and it won't gray the color of control as well.\r\n\r\nAppreciate if you add the ReadOnly property for the Entry, Editor and other controls..\r\n\r\n\r\nThanks,\r\n"},{"Id":"8074414099","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:10:21","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3481","RelatedDescription":"Closed issue \"Editor\" (#3481) at xamarin/Xamarin.Forms","RelatedBody":"Please, add theses properties to Editor:\r\n- Placeholder, PlaceholderColor, BorderColor.\r\n\r\nThanks."},{"Id":"8074333366","Type":"IssuesEvent","CreatedAt":"2018-08-06T22:44:44","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2196","RelatedDescription":"Closed issue \"Entry + Focus + Animation\" (#2196) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI'm facing a problem with animation.\r\nI have a search field that will stay in the header. And it is displayed (Animation) when I click on a button. But I also need to focus on the field so the keyboard can appear.\r\nOnly by doing this the animation hangs.\r\nIf I take the focus it works normally.\r\nIn the last step (gif) I click off to disappear with the keyboard before clicking to perform the animation and it works normally.\r\n\r\n### Steps to Reproduce\r\n\r\n```\r\npublic class App : Application\r\n{\r\n    public App()\r\n    {\r\n        var entry = new Entry()\r\n        {\r\n            Placeholder = \"Search...\"\r\n        };\r\n\r\n        var button = new Button()\r\n        {\r\n            Text = \"Show/Hide\",\r\n            BackgroundColor = Color.Red,\r\n            TextColor = Color.White\r\n        };\r\n\r\n        button.Clicked += async (sender, e) => \r\n        {\r\n            if (entry.Opacity == 1)\r\n            {\r\n                entry.Unfocus();\r\n                await entry.TranslateTo(0, -100, 250, Easing.CubicOut);\r\n                entry.Opacity = 0;\r\n            }\r\n            else\r\n            {\r\n                entry.Opacity = 1;\r\n                entry.Focus();\r\n                await entry.TranslateTo(0, 0, 250, Easing.CubicOut);\r\n            }\r\n        };\r\n\r\n        var content = new ContentPage\r\n        {\r\n            Title = \"Test Animation\",\r\n            Content = new StackLayout\r\n            {\r\n                Margin = new Thickness(20, 100, 20, 20),\r\n                Spacing = 20,\r\n                Children =\r\n                {\r\n                    entry,\r\n                    button\r\n                }\r\n            }\r\n        };\r\n\r\n        MainPage = new NavigationPage(content);\r\n    }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nAnimation occurs without crashes.\r\n\r\n### Actual Behavior\r\n\r\nAnimation is not fluent. It freezes.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.280555\r\n- IDE: VS for Mac \r\n- Platform Target Frameworks:\r\n  - iOS:  11.2.6\r\n- Nuget Packages: Basic setup test\r\n- Affected Devices: Many iPhone\r\n\r\n### Reproduction Link\r\n\r\n![ezgif-6-534e47a4af](https://user-images.githubusercontent.com/2153223/37971435-4d077faa-31ac-11e8-89fe-77df70ffaa87.gif)"},{"Id":"8074330578","Type":"IssuesEvent","CreatedAt":"2018-08-06T22:43:52","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2198","RelatedDescription":"Closed issue \"List view groups not updating while scrolling is happening IOS - unless run on main thread\" (#2198) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nI have attached a repro the shows the behavior - this is an implementation of an infinite scroll.\r\n\r\nThe issue is, if the adding of the item group doesn't happen inside a `Device.BeginInvoke...` then the items aren't posted to the screen until all movement in the listview stops and also you're not still touching the screen.\r\n\r\nmain issue is if I use main thread stuff - then there can be a slight ui lag while it's putting the items in.\r\nif I don't use main thread - then it doesn't scroll smoothly, has to stop in order to update list.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  have grouped item list view\r\n2.  add items dynamically when last item in list is brought into view\r\n3.  add them not explicitly on main thread\r\n\r\n### Expected Behavior\r\nseamlessly add items to list\r\n\r\n### Actual Behavior\r\nempty space on bottom of list until all interaction ends, then new data pops in.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.280555\r\n- Last known good version: N/A\r\n- IDE: Visual studio 2017\r\n- Platform Target Frameworks: \r\n  - iOS:  \r\n\r\n\r\n### Reproduction Link\r\n\r\n[App3.zip](https://github.com/xamarin/Xamarin.Forms/files/1853978/App3.zip)\r\n"},{"Id":"8074327159","Type":"IssuesEvent","CreatedAt":"2018-08-06T22:42:52","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3160","RelatedDescription":"Closed issue \"[Android] TFS build fails with when specifying VerticalScrollBarVisibility in XF 3.1\" (#3160) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nAfter upgrading an existing project to XF 3.1-RC and setting `VerticalScrollBarVisibility` on a `ScrollView` in a XAML page, the Xamarin.Android build definitions fails in TFS. \r\nExisting iOS and UWP build definitions work fine.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin.Android build definition in TFS.\r\n2. Create a sample project using the latest VS2017 .NET Standard template.\r\n3. Add a XAML page with a `ScrollView` with `VerticalScrollBarVisibility` set.\r\n\r\n### Expected Behavior\r\nThe build should complete successfully.\r\n\r\n### Actual Behavior\r\nThe build fails during XAML compilation with the following error(s):\r\n`Error : Position 65:13. No property, bindable property, or event found for 'VerticalScrollBarVisibility', or mismatching type between value and property.`\r\n\r\n### Basic Information\r\n\r\n- Version with issue: XF 3.10RC\r\n- Last known good version: N/A\r\n\r\n### Workaround\r\n\r\n- Give the ScrollView an `x:Name`.\r\n- Set the VerticalScrollBarVisibility in the ctor of the XAML page."},{"Id":"8074307307","Type":"IssuesEvent","CreatedAt":"2018-08-06T22:36:38","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3494","RelatedDescription":"Opened issue \"[Enhancement]  TapGestureRecognizer Improvements\" (#3494) at xamarin/Xamarin.Forms","RelatedBody":"# TapGestureRecognizer Improvements\r\n- IsTapping\r\n\t- Specified number of touches have come down and back up but it hasn't reached the number of taps required to be recognized as Tapped.\r\n- Updated Event Args\r\n\t- Adds an event to the Gesture Recognizer with additional information about the fingers causing the tap\r\n- NumberOfTouches\r\n\t- Allows for multiple touch tapping\r\n\r\n_Note: Nothing in this specification is guaranteed to be final; all features, implementations, and interfaces are subject to change._\r\n\r\n# API\r\n\r\n## Supporting APIs\r\n\r\nIn order to provide the user with as much available information as possible, we are going to add additional information about all currently active touches. \r\n\r\n#### GestureEventArgs\r\n[Additional Touch Data Attached to Updated events](https://github.com/xamarin/Xamarin.Forms/issues/3479)\r\n\r\n### TapGestureRecognizer\r\n```C#\r\npublic sealed class TapGestureRecognizer : GestureRecognizer\r\n{\r\n  \tpublic bool IsTapping { get; }\r\n  \r\n  \t// Bindable Property will live on GestureRecognizer\r\n\tpublic ICommand CancelledCommand { get; set; }\r\n\tpublic object CancelledCommandParameter { get; set; }\r\n\t\r\n\t// Bindable Property will live on GestureRecognizer\r\n\tpublic ICommand StartedCommand { get; set; }\r\n\tpublic object StartedCommandParameter { get; set; }  \r\n\t\r\n\tpublic static readonly BindableProperty NumberOfTouchesRequiredProperty;\r\n\tpublic int NumberOfTouchesRequired { get; set;}\r\n  \r\n\tpublic event EventHandler<TapUpdatedEventArgs> TapUpdated;\r\n}\r\n```\r\n### Properties\r\n\r\n| API | Description |\r\n| ------------- | ------------- |\r\n| IsTapping | Specified number of touches have come down and back up but it hasn't reached the number of taps required to be recognized as Tapped. |\r\n| CancelledCommand | If the gesture starts then gets cancelled for some reason this command will fire.  |\r\n| CancelledCommandParameter ||\r\n| StartedCommand | Gesture has recognized the touch and is responding to touch changes.  |\r\n| StartedCommandParameter ||\r\n| NumberOfTouchesRequired | Number of touch points required for gesture command to execute (default 1). |\r\n\r\n### Events\r\n\r\n| API | Description |\r\n| ------------- | ------------- |  \r\n| TapUpdated | Occurs whenever there is a change is state for this Gesture.  |\r\n\r\n\r\n\r\n### TapUpdatedEventArgs \r\n\r\n```csharp\r\npublic class TapUpdatedEventArgs : GestureEventArgs\r\n{\t\r\n\tpublic GestureStatus StatusType { get; }\r\n}\r\n```\r\n\r\n### Properties\r\n\r\n| API | Description |\r\n| ------------- | ------------- |\r\n| GestureStatus | Indicates state of gesture (Started, Running, Canceled, Completed). |\r\n\r\n\r\n### Examples\r\n\r\n```XAML\r\n<StackLayout BackgroundColor=\"{Binding IsTapping, \r\n\t\t\t  Source={x:Reference tapGesture}, \r\n\t\t\t  Converter={StaticResource boolToColor}}\">\r\n    <StackLayout.GestureRecognizers>\r\n        <TapGestureRecognizer x:Name=\"tapGesture\" />\r\n  </StackLayout.GestureRecognizers>\r\n</StackLayout>\r\n```\r\nDemonstrates binding the background color of the container view to the IsTapping property and setting the BackgroundColor through a converter. This allows the user to easily tie visual indicators to the TapGestureRecognizer while a tap is occurring.\r\n***\r\n\r\n```XAML\r\n<Image Source=\"ThreeFingers.jpg\">\r\n    <Image.GestureRecognizers>\r\n        <TapGestureRecognizer\r\n\t\tNumberOfTouchesRequired=\"3\"\r\n\t\tNumberOfTapsRequired=\"2\"\r\n                StartedCommand=\"{Binding OnStarted}\" />\r\n  </Image.GestureRecognizers>\r\n</Image>\r\n```\r\n\r\nWhen three fingers come into contact with an image and are released the OnStarted command will fire.\r\n\r\n***\r\n\r\n```C#\r\npublic class TapContainer : ContentView\r\n{\r\n  BoxView touchView;\r\n  \r\n  public TapContainer()\r\n  {\r\n    var tapGesture = new TapGestureRecognizer ();\r\n    tapGesture.TapUpdated += OnTapUpdated;\r\n    tapGesture.NumberOfTouchesRequired = 4;\r\n    GestureRecognizers.Add (tapGesture);\r\n  }\r\n\r\n  void OnTapUpdated (object sender, TapUpdatedEventArgs e)\r\n  {\r\n    TouchEvent data = e.TouchEvent;\r\n    if(e.StatusType == GestureStatus.Started)\r\n    {\r\n    \tthis.BackgroundColor = Color.Yellow;\r\n    }\r\n    else if(e.StatusType == GestureStatus.Completed)\r\n    {\r\n    \tthis.BackgroundColor = Color.Green;\r\n    }\r\n    else \r\n    {\r\n    \tthis.BackgroundColor = Color.Default;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe user taps the view once (touch has come down and been released) which will set the BackgroundColor to Yellow. It will now remain Yellow until they have tapped 3 more times or stopped tapping."},{"Id":"8073989624","Type":"IssuesEvent","CreatedAt":"2018-08-06T21:14:26","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3493","RelatedDescription":"Opened issue \"[Enhancement] IsPanning and additional touch events\" (#3493) at xamarin/Xamarin.Forms","RelatedBody":"# IsPanning and additional touch events to PanGestureRecognizer\r\n\r\nThis will provide a bindable property on PanGestureRecognizer to indicate that the gesture is currently in the state of panning.\r\nIt will also add the additional Start,Cancel, and TouchEvents being added to the rest of the gestures\r\n\r\n_Note: Nothing in this specification is guaranteed to be final; all features, implementations, and interfaces are subject to change._\r\n\r\n\r\n# API\r\n\r\n## Supporting APIs\r\n\r\nIn order to provide the user with as much available information as possible, we are going to add additional information about all currently active touches. \r\n\r\n#### GestureEventArgs\r\n[Additional Touch Data Attached to Updated events](https://github.com/xamarin/Xamarin.Forms/issues/3479)\r\n\r\n### PanGestureRecognizer\r\n```C#\r\npublic sealed class PanGestureRecognizer : GestureRecognizer\r\n{\r\n\tpublic bool IsPanning { get; }\r\n  \r\n  \t// Bindable Property will live on GestureRecognizer\r\n\tpublic ICommand CancelledCommand { get; set; }\r\n\tpublic object CancelledCommandParameter { get; set; }\r\n\t\r\n\t// Bindable Property will live on GestureRecognizer\r\n\tpublic ICommand StartedCommand { get; set; }\r\n\tpublic object StartedCommandParameter { get; set; }  \r\n}\r\n```\r\n### Properties\r\n\r\n| API | Description |\r\n| ------------- | ------------- |\r\n| IsPanning | The status of this the Gesture is running but not completed. |\r\n| CancelledCommand | If the gesture starts then gets cancelled for some reason this command will fire.  |\r\n| CancelledCommandParameter ||\r\n| StartedCommand | If the gesture starts then gets cancelled for some reason this command will fire.  |\r\n| StartedCommandParameter ||\r\n\r\n### PanGestureRecognizer \r\n\r\nWill now inherit from [GestureEventArgs](https://github.com/xamarin/Xamarin.Forms/issues/3479) so it can receive additional touch point data\r\n\r\n```csharp\r\npublic class PanGestureRecognizer : GestureEventArgs\r\n{\t\r\n}\r\n```\r\n\r\n\r\n### Examples\r\n\r\n```XAML\r\n<StackLayout\r\n\tBackgroundColor=\"{Binding IsPanning, \r\n\t\t\t  Source={x:Reference panGesture}, \r\n\t\t\t  Converter={StaticResource boolToColor}}\">\r\n    <StackLayout.GestureRecognizers>\r\n        <PanGestureRecognizer x:Name=\"panGesture\" />\r\n  </StackLayout.GestureRecognizers>\r\n</StackLayout>\r\n```\r\n\r\nDemonstrates binding the background color of the container view to the IsPanning property and setting the BackgroundColor through a converted. This allows the user to easily tie visual indicators to the PanGestureRecognizer while a pan is occurring. "}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8075071827","Type":"IssuesEvent","CreatedAt":"2018-08-07T03:15:18","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4578","RelatedDescription":"Closed issue \"[xcode10] `Master-Detail Forms` app looks differently on a device and a simulator\" (#4578) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open VSfM\r\n2. Create a `Master-Detail Forms App` app\r\n3. Build it\r\n4. Run it on Simulator 12.0 (it looks properly on a device)\r\n\r\n### Expected Behavior\r\nIt looks like this (device):\r\n<img src=\"https://user-images.githubusercontent.com/32954580/43718764-44b859e6-9994-11e8-8451-1c3569f41195.png\" width=\"200\" />\r\n\r\n\r\n### Actual Behavior\r\nIt looks like this (simulator):\r\n<img src=\"https://user-images.githubusercontent.com/32954580/43718406-3ccbb9e0-9993-11e8-9823-45ecf4fcba4a.png\" width=\"200\" />\r\n\r\n\r\n### Environment\r\n\r\n1. VSfM\r\nhttps://gist.github.com/mykyta-bondarenko-gl/676d301238157d52224d8d293070e665\r\n\r\n\r\n### Example Project\r\n[MasterDetailTest.zip](https://github.com/xamarin/xamarin-macios/files/2262647/MasterDetailTest.zip)"},{"Id":"8074512944","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:45:12","Actor":"samhouts","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4584","RelatedDescription":"Opened issue \"Xamarin.iOS: Nullable DateTimeOffset can't use Property.SetInfo\" (#4584) at xamarin/xamarin-macios","RelatedBody":"_From @MaxFe on August 6, 2018 16:19_\n\nThis error occured the first time while deserializing a json string. The destination object had a nullable DateTimeOffset. Using a DateTimeOffset works fine. The statement from Xamarin.iOS documentation is \"Using Reflection's Property.SetInfo to set the value on a Nullable<T> is not currently supported.\".\r\n\r\n### Description\r\nXamarin.iOS limitations:  https://docs.microsoft.com/en-us/xamarin/ios/internals/limitations  \r\nEF Core should have the same problem: https://bugzilla.xamarin.com/show_bug.cgi?id=61053\r\nSince AutoMapper (version 7.0.1) is using reflection too it might have the same problem (untested).\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create an object with nullable DateTimeOffset\r\n2.  Create a json string for that object where the DateTimeOffset variable is null\r\n3.  Deserialize this string -> crash\r\n\r\n### Expected Behavior\r\nShould deserialize like not nullable DateTimeOffset\r\n\r\n### Actual Behavior\r\nApp crash on deserialize nullable DateTimeOffset\r\n\r\n### Basic Information\r\n\r\n- IDE: Visual Studio for Mac 7.5.4 (Build 3)\r\n- Platform Target Frameworks: \r\n  - iOS:  11.4.1 (15G77)\r\n- Nuget Packages:  Newtonsoft.Json 11.0.2\r\n- Affected Devices: iPad\r\n\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#3490_"},{"Id":"8074511874","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:44:49","Actor":"samhouts","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4583","RelatedDescription":"Closed issue \"Objectdisposed crash when closing app in release build\" (#4583) at xamarin/xamarin-macios","RelatedBody":"_From @PaulVrugt on August 6, 2018 14:1_\n\n<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nLately, we have an app that crashes every time the app is closed (swiped away) in android. The issue ONLY occurs on release builds. On debug builds the app works fine. The exception stacktrace (caught by appcenter) is:\r\n\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nSystem.ObjectDisposedException: Cannot access a disposed object. Object name: 'Xamarin.Forms.Platform.Android.AppCompat.MasterDetailPageRenderer'.\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nJniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters)\r\nDrawerLayout.RemoveDrawerListener (Android.Support.V4.Widget.DrawerLayout+IDrawerListener listener)\r\nNavigationPageRenderer.Dispose (System.Boolean disposing)\r\nObject.Dispose ()\r\nPlatform.SetPageInternal (Xamarin.Forms.Page newRoot)\r\n\r\nThis is a very pressing issue for us, since we are unable to release an update for our app when the app crashes (almost) every time it is closed.\r\n\r\n### Steps to Reproduce\r\nWe cannot seem to reproduce it in a small app. I seems to happen to 1 of our 3 apps. Even though there is major code sharing between them.\r\n\r\n### Expected Behavior\r\nApp doesn't crash on close\r\n\r\n### Actual Behavior\r\nApp crashes on close\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: don't know. Reverted back until 3.0.482510 but app still crashed.\r\n- IDE: Visual studio 2017\r\n- Platform Target Frameworks: \r\n  - Android: 8.1 (27)\r\n- Android Support Library Version: 27.0.2.1\r\n- Nuget Packages: Lots.\r\n- Affected Devices: Tested on LG Nexus 5X\r\n\r\n### Reproduction Link\r\nWe are unable to create a small reproduction. It seems be a race condition in our app that isn't present in a small demo app. We're trying to discover a point in time in our history where the error started occurring, which might give us a clue as to what is the trigger for this issue.\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#3489_"},{"Id":"8074508844","Type":"IssuesEvent","CreatedAt":"2018-08-06T23:43:42","Actor":"samhouts","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4583","RelatedDescription":"Opened issue \"Objectdisposed crash when closing app in release build\" (#4583) at xamarin/xamarin-macios","RelatedBody":"_From @PaulVrugt on August 6, 2018 14:1_\n\n<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nLately, we have an app that crashes every time the app is closed (swiped away) in android. The issue ONLY occurs on release builds. On debug builds the app works fine. The exception stacktrace (caught by appcenter) is:\r\n\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nSystem.ObjectDisposedException: Cannot access a disposed object. Object name: 'Xamarin.Forms.Platform.Android.AppCompat.MasterDetailPageRenderer'.\r\nJniPeerMembers.AssertSelf (Java.Interop.IJavaPeerable self)\r\nJniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters)\r\nDrawerLayout.RemoveDrawerListener (Android.Support.V4.Widget.DrawerLayout+IDrawerListener listener)\r\nNavigationPageRenderer.Dispose (System.Boolean disposing)\r\nObject.Dispose ()\r\nPlatform.SetPageInternal (Xamarin.Forms.Page newRoot)\r\n\r\nThis is a very pressing issue for us, since we are unable to release an update for our app when the app crashes (almost) every time it is closed.\r\n\r\n### Steps to Reproduce\r\nWe cannot seem to reproduce it in a small app. I seems to happen to 1 of our 3 apps. Even though there is major code sharing between them.\r\n\r\n### Expected Behavior\r\nApp doesn't crash on close\r\n\r\n### Actual Behavior\r\nApp crashes on close\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: don't know. Reverted back until 3.0.482510 but app still crashed.\r\n- IDE: Visual studio 2017\r\n- Platform Target Frameworks: \r\n  - Android: 8.1 (27)\r\n- Android Support Library Version: 27.0.2.1\r\n- Nuget Packages: Lots.\r\n- Affected Devices: Tested on LG Nexus 5X\r\n\r\n### Reproduction Link\r\nWe are unable to create a small reproduction. It seems be a race condition in our app that isn't present in a small demo app. We're trying to discover a point in time in our history where the error started occurring, which might give us a clue as to what is the trigger for this issue.\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#3489_"},{"Id":"8074023752","Type":"IssuesEvent","CreatedAt":"2018-08-06T21:22:31","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4582","RelatedDescription":"Opened issue \"[Xcode10]tvOS ODR extension sample submission fails with an error, \" \"Invalid sdk value. The value provided for the sdk portion of LC_VERSION_MIN_TVOS in ODRsTVOS.app/Frameworks/Mono.framework/Mono is 94.0 which is greater than the maximum allowed value of 12.0.\"\" (#4582) at xamarin/xamarin-macios","RelatedBody":"\r\n### Steps to Reproduce\r\n\r\n1. Archive and build https://github.com/xamarin/SubmissionSamples/tree/master/ODRsTVOS_Extension\r\n2. Submit tvOS extension.ipa using Application Loader\r\n\r\n### Expected Behavior\r\nApp gets submitted successfully\r\n\r\n### Actual Behavior\r\nApp fails to submit with an error ,  \"Invalid sdk value. The value provided for the sdk portion of LC_VERSION_MIN_TVOS in ODRsTVOS.app/Frameworks/Mono.framework/Mono is 94.0 which is greater than the maximum allowed value of 12.0.\"\r\n\r\n### Environment\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.5.4 (build 7)\r\nInstallation UUID: 519fc1da-445a-45d9-9748-27fa26180fd4\r\nRuntime:\r\n\tMono 5.10.1.57 (2017-12/ea8a24b1bbf) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.193 (master / 64fece5f)\r\n\r\n\tPackage version: 510010057\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Version: 2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.0 (14320.2.4)\r\nBuild 10L221o\r\n\r\n=== Xamarin.Android ===\r\n\r\nNot Installed\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.4.1.193 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.99.2.130 (Visual Studio Community)\r\nHash: 86e97b10\r\nBranch: HEAD\r\nBuild date: 2018-08-04 01:01:50-0400\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705040007\r\nGit revision: 1fcae95fd5b606f806c3b1d445237f675c395fdd\r\nBuild date: 2018-08-02 18:48:50+00\r\nXamarin addins: 48a82b251ec0ef78cb92223061ea448f967f4ec2\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.5\r\n```\r\n\r\n### Build Logs\r\n\r\nBuild Log: https://gist.github.com/GouriKumari/625fe88e90ca1f980db17fb51802274c\r\nError Log: https://gist.github.com/GouriKumari/e402e5b7f58718b93c4013a80b694c7a\r\n\r\n### Example Project (If Possible)\r\nhttps://github.com/xamarin/SubmissionSamples/tree/master/ODRsTVOS_Extension"},{"Id":"8072993478","Type":"IssuesEvent","CreatedAt":"2018-08-06T17:46:48","Actor":"bradumbaugh","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4581","RelatedDescription":"Opened issue \"[xcode10] Siri shortcuts - custom responses not appearing\" (#4581) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download [Apple's SoupChef sample](https://developer.apple.com/documentation/sirikit/accelerating_app_interactions_with_shortcuts?language=objc).\r\n2. Run this sample; create a soup order; assign a Siri shortcut to it; invoke the Siri shortcut; to confirm the order, say \"Yes\" rather than tapping on the button in the UI. \r\n3. Note how after the soup order completes, Siri indicates (audibly) that it will be ready to pick up in ten minutes.\r\n4. Download the Xamarin [SoupChef port](https://github.com/xamarin/private-samples/tree/master/ios12/SoupChef) (internal)\r\n5. Run the same test on the Xamarin port, but note that Siri does not read the custom response text\r\n6. It appears that the correct completion handler _is_ getting called in `OrderSoupIntentHandler` in the `HandleOrderSoup` method, but it's not having the anticipated effect. To see this, debug the **SoupChefIntents** project and set a breakpoint on the last line of the `HandleOrderSoup` method, where the completion handler is called. Is there an issue with the way the completion handler is bound? (See the `OrderSoupIntentBinding` project in the same solution)\r\n    - Note that the `OrderSoupIntentResponse.SuccessIntentResponseWithSoup` method doesn't seem to be the problem, as I attempted to just manually create the `OrderSoupIntentResponse` object and pass it to the completion handler. Same result.\r\n\r\n### Expected Behavior\r\n\r\nSiri should indicate audibly (and in text in the UI) that the order will be ready in 10 minutes, as it does in the Swift-based example.\r\n\r\n### Actual Behavior\r\n\r\nSiri completes the order, but does not indicate that it will be ready in ten minutes.\r\n\r\n### Environment\r\n\r\n- Xcode 10 beta 5"},{"Id":"8072940262","Type":"IssuesEvent","CreatedAt":"2018-08-06T17:35:59","Actor":"rihadavid","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4580","RelatedDescription":"Opened issue \"Xamarin.iOS experience is just terrible\" (#4580) at xamarin/xamarin-macios","RelatedBody":"**Please do not take this as an incorrectly specified bug report.\r\nThis is not a bug report.**\r\n**This is a desperate call for reflection on the state of Xamarin.iOS or a general frustration letter.**\r\nI don't know if you even know that things are so terrible.\r\nIn case you don't care or don't like my attitude, just close it, sorry.\r\n\r\n**So, this is how my iPhone debugging usually goes:**\r\nThe app is building a few minutes (not quite fast..), then I get an alert that I am disconnected from Mac, which I am not. So, I disconnect, connect again, dismiss another alert telling me that I was disconnected, go to configuration manager to uncheck build (so that it does not start building again because the build was fine, just the connection failed) and I run the app on my iPhone 5S with iOS 11.4.1.\r\n_This one bug is actually already [fixed](https://developercommunity.visualstudio.com/content/problem/230433/xamarin-build-host-keeps-disconnecting-after-a-sec.html?childToView=277784#comment-277784) for 3 months (users are complaining about it since April!), but while we got about 10 subversions of VS 15.6 and 15.7, this bugfix is going to be available in VS 15.8._\r\nSo, the app starts running, my homescreen appears and in a few seconds, before I can actually do anything, the app freezes. Probably some deadlock in the debugger. So I try to deploy again and again and for the fourth try, the app finally runs smoothly.\r\n_Worth saying, the deadlock is definitely not in my app - it is in the Xamarin.iOS debugger. It never happened in the app without debugging and it never happened in the simulator. I mean never, in a few years. But when debugging on iPhone, it is happening regularly, for a few years now._\r\nWell, when the app is finally running and I want to debug some stuff, it works for a while but then the VS stops responding, because I hover with my mouse over something and it started endlessly \"Getting DataTip text\" (or I just manually wanted to get some value in Locals, also fails often) and VS gets busy. So I force-restart the VS, which means it does not open the last opened project, so I go to Connections, find my Git, then find my solution and open it. Then I proceed to connecting to Mac Agent, which, brace youself, does not give me the list of devices.\r\n_This is happening every time. When I force-quit VS because it got busy, I need to restart it twice, because first time, the connected Mac Agent does not offer the devices._\r\nSo, restarting VS again, connecting to Mac Agent again. This time, everything will hopefully be ok. I mean, for 10, 20 or 30 minutes. Then all of this starts again. And then again. And again.\r\n\r\nSummarized, I can easily spend 20 minutes on a simple iPhone debugging task, which would be done in 5 minutes if things would work. Not mentioning how much it affects my productivity.\r\n\r\nThanks for reading.\r\n\r\nPlease also note, that I used to report Xamarin bugs in the past, but lately, I feel like it is a worthless effort because it does not get fixed in [MONTHS](https://developercommunity.visualstudio.com/content/problem/230433/xamarin-build-host-keeps-disconnecting-after-a-sec.html?childToView=277784#comment-277784).\r\n\r\n### Environment\r\n\r\n```\r\nMac OS X 10.13.4 inside VMWare Workstation 14 Pro (14.1.2)\r\n\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.6.6 //yeah, I don't want to get into even more trouble updating to something new, waiting for the xamarin fixes in 15.8\r\nVisualStudio.15.Release/15.6.6+27428.2037\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Community\r\n\r\nVisual F# Tools 10.1 for F# 4.1   00369-60000-00001-AA614\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.11.10402.2\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40314.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51214.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAWS Toolkit for Visual Studio 2017   1.14.4.0\r\nAWS Toolkit for Visual Studio 2017.\r\nCopyright 2011-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n\r\nRelease notes: https://aws-vs-toolkit.s3.amazonaws.com/versioninfo.html\r\n\r\nThis software includes third party software subject to the following copyrights:\r\n- Logging from log4net, Apache License \r\n  [http://logging.apache.org/log4net/license.html]\r\n- Putty for PPK to PEM conversion, MIT license \r\n  [http://www.chiark.greenend.org.uk/~sgtatham/putty/licence.html]\r\n- NGit for AWS Elastic Beanstalk incremental push\r\n  [https://github.com/mono/ngit/blob/master/NGit.license.txt]\r\n- NSch dependency for NGit\r\n  [https://github.com/mono/ngit/blob/master/NSch.license.txt]\r\n- Sharpen dependency for NGit\r\n  [https://github.com/mono/ngit/blob/master/Sharpen/AssemblyInfo.cs]\r\n- ICSharpCode.SharpZipLib dependency for NGit\r\n  [http://www.icsharpcode.net/opensource/sharpziplib/]\r\n- Mono.Posix.dll and Mono.Security.dll dependencies for NGit\r\n  [http://mono-project.com/FAQ:_Licensing#Licensing]\r\n- MPFProj for Visual Studio Project Framework\r\n  [http://mpfproj10.codeplex.com/license]\r\n- JSON Checker for JSON validation\r\n  [http://www.raboof.com/projects/jsonchecker/]\r\n- Newtonsoft Json.NET\r\n  [http://www.newtonsoft.com/json] \r\n- YamlDotNet\r\n  [http://aaubry.net/pages/yamldotnet.html] \r\n    \r\n\r\nAzure App Service Tools v3.0.0   15.0.40215.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51212.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js Tools   1.4.11027.3\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61801.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.6.20202.3\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.9.0.753 (f0f46392f)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.10.96 (a702a9ceb)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.9.1.24 (f62de47)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```"},{"Id":"8072930025","Type":"IssuesEvent","CreatedAt":"2018-08-06T17:33:51","Actor":"bradumbaugh","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4579","RelatedDescription":"Opened issue \"[xcode10] Custom intents - require binding?\" (#4579) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download (internal) sample: https://github.com/xamarin/private-samples/tree/master/ios12/SoupChef (related to Siri Shortcuts / custom intents)\r\n2. Note that the Xamarin.iOS port relies on a sharpie-generated binding to the .m/.h files generated by Xcode\r\n3. Is it possible to write this C# manually rather than requiring a manual binding?\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":163,"FavoriteCount":81,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":43,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":119,"FavoriteCount":56,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":53,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":30,"RawContent":null},{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":260,"FavoriteCount":163,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":90,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":34,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":63,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":28,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null}]}},"RunOn":"2018-08-07T05:30:53.8713656Z","RunDurationInMilliseconds":4454}