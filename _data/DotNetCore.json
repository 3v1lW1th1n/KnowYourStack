{"Data":{"Blog":{"FeedItems":[{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":102,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6747822396","Type":"IssuesEvent","CreatedAt":"2017-10-21T20:56:03","Actor":"ShalokShalom","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14563","RelatedDescription":"Closed issue \"[ReadMe] RyuJIT = Microsoft.NETCore.Jit = ?\" (#14563) at dotnet/coreclr","RelatedBody":"Is the mentioned Microsoft.NETCore.Jit RyuJIT?\r\n\r\nIf so, name it so. \r\n\r\nOtherwise, the already confusing situation with a lot of different compilers gets one step more confusing. \r\n\r\nThanks a lot"},{"Id":"6747611699","Type":"PullRequestEvent","CreatedAt":"2017-10-21T18:26:13","Actor":"adriangodong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14648","RelatedDescription":"Opened pull request \"Added UnixEpoch to DateTime and DateTimeOffset.\" (#14648) at dotnet/coreclr","RelatedBody":""},{"Id":"6747536166","Type":"PullRequestEvent","CreatedAt":"2017-10-21T17:34:31","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14647","RelatedDescription":"Opened pull request \"Add original ARM64 JIT frame layout design document\" (#14647) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6748141370","Type":"IssuesEvent","CreatedAt":"2017-10-22T01:46:07","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7882","RelatedDescription":"Closed issue \"Cannot get required symbol TLSv1_1_method from libssl\" (#7882) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet new console -o hwapp`  \r\n## Expected  behavior\r\nCreate a new application with dotnet cli\r\n## Actual behavior\r\n`Cannot get required symbol TLSv1_1_method from libssl\r\nAborted (`core' generado)`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nHerramientas de la línea de comandos .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  26\r\n OS Platform: Linux\r\n RID:         fedora.26-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6748050315","Type":"IssuesEvent","CreatedAt":"2017-10-22T00:13:18","Actor":"jafg1222","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7882","RelatedDescription":"Opened issue \"Cannot get required symbol TLSv1_1_method from libssl\" (#7882) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet new console -o hwapp`  \r\n## Expected  behavior\r\nCreate a new application with dotnet cli\r\n## Actual behavior\r\n`Cannot get required symbol TLSv1_1_method from libssl\r\nAborted (`core' generado)`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nHerramientas de la línea de comandos .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  26\r\n OS Platform: Linux\r\n RID:         fedora.26-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6747855664","Type":"IssuesEvent","CreatedAt":"2017-10-21T21:20:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7881","RelatedDescription":"Closed issue \"Bad help \"--version\"\" (#7881) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nrun `dotnet` from command line.\r\nthis outputs:\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help            Display help.\r\n  --version         Display version.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nThen run `dotnet --version`\r\nTo receive:\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\n## Expected  behavior\r\nEither --version will work or -- version will not appear in the help.\r\n\r\n## Actual behavior\r\nIrrelevant error message - turn out I needed to use --info instead of --version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n"},{"Id":"6747851083","Type":"IssuesEvent","CreatedAt":"2017-10-21T21:17:19","Actor":"HarelM","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7881","RelatedDescription":"Opened issue \"Bad help \"--version\"\" (#7881) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nrun\r\n>dotnet\r\nthis outputs:\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help            Display help.\r\n  --version         Display version.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nThen run\r\n>dotnet --version\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\n## Expected  behavior\r\nEither --version will work or -- version will not appear in the help.\r\n\r\n## Actual behavior\r\nIrrelevant error message - turn out I needed to use --info instead of --version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n"},{"Id":"6746094823","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:43:58","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7880","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25820-05 (master)\" (#7880) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6746002921","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:09:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7877","RelatedDescription":"Merged pull request \"Update Microsoft.ApplicationInsights to 2.4.0\" (#7877) at dotnet/cli","RelatedBody":"The surface area we used for Microsoft.ApplicationInsights is small, basically one API -- \"to send\". I tested it with Fiddler on a clean machine, the captured data looks good."},{"Id":"6745642416","Type":"IssuesEvent","CreatedAt":"2017-10-20T20:25:46","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7879","RelatedDescription":"Opened issue \"Flaky test: GivenThatWeWantToReadLockFilesQuickly.ItFailsInLessThanOneSecondWhenTheProjectAssetsJsonDoesNotExist\" (#7879) at dotnet/cli","RelatedBody":"We should have proper perf tests, not assert a time limit. VMs in CI can run quite slow at times.\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6745741520","Type":"IssuesEvent","CreatedAt":"2017-10-20T20:51:57","Actor":"isaac2004","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/544","RelatedDescription":"Opened issue \"DotNet Standard 2.0 Project downgraded to 1.6 and cannot update\" (#544) at dotnet/standard","RelatedBody":"I have a CL that was Standard 2.0 and after installing the 2.0.1 SDK it got downgraded somehow to 1.6 (.csproj still says 2.0). The application fails on build because of namespaces not available. When I try to upgrade through VS, I get this\r\n\r\n![capture](https://user-images.githubusercontent.com/8878502/31841261-baa2e134-b5b6-11e7-856d-2f8eeac5d88b.PNG)\r\n \r\nI am blocked to upgrade the package. If I try to upgrade via CLI, I get\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet add package NETStandard.Library --version 2.0.0\r\n  Writing C:\\Users\\Isaac\\AppData\\Local\\Temp\\tmp5E87.tmp\r\ninfo : Adding PackageReference for package 'NETStandard.Library' into project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nlog  : Restoring packages for C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj...\r\ninfo : Package 'NETStandard.Library' is compatible with all the specified frameworks in project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nerror: Error while performing Update for package 'NETStandard.Library'. Cannot edit items in imported files -\r\nerror:   Item 'PackageReference' for 'NETStandard.Library' in Imported file 'C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props'.\r\n````\r\nI imagine this has to do with me upgrading to 2.0.1, but I am unable to rollback in anyway. Do I need to uninstal 2.0.1 to have 2.0.0 work?"},{"Id":"6741695643","Type":"IssuesEvent","CreatedAt":"2017-10-20T02:39:56","Actor":"jcouv","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/543","RelatedDescription":"Opened issue \"Issue with ValueTuple on net471\" (#543) at dotnet/standard","RelatedBody":"@terrajobst @ryanelian If it's ok, let's move the investigation to a dedicated issue.\r\n\r\nHere's the latest comment from Ryan, in the thread for https://github.com/dotnet/standard/issues/514.\r\n\r\n----\r\n[msbuild.zip](https://github.com/dotnet/standard/files/1400613/msbuild.zip)\r\n\r\nbtw, just curious, how do you 'see' the content of the binary log?\r\n\r\nNo, adding those lines does not make the warning message disappear...\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6740753772","Type":"IssuesEvent","CreatedAt":"2017-10-19T21:04:19","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/542","RelatedDescription":"Opened issue \"You must add a reference to assembly netstandard errors\" (#542) at dotnet/standard","RelatedBody":"@fahadabdulaziz opened this here: https://github.com/Microsoft/dotnet/issues/527\r\n\r\nHi,\r\n\r\nAfter targeting .Net Framework 4.7.1, in many projects referencing net standard libraries. I get these errors:\r\n![errs](https://user-images.githubusercontent.com/5483584/31769585-f06cdab6-b4dc-11e7-9a58-f6d3f52341da.png)\r\n\r\n`csharp\r\nThe type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n`\r\n\r\nThough I all the projects including that targeting net471 are building successfully!\r\n\r\nAny thoughts ? "},{"Id":"6740112293","Type":"IssuesEvent","CreatedAt":"2017-10-19T18:42:27","Actor":"cilerler","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/498","RelatedDescription":"Closed issue \"ClickOnce throws an error when it has .NetStandard reference\" (#498) at dotnet/standard","RelatedBody":"If you add a _.NetStandard_ project as reference to _WPF_ application which gets deployed through _ClickOnce_ throws the error below.\r\n\r\n## Error message\r\n\r\n> Unable to install or run the application.  The application requires that assembly **System.Drawing.Primitives** Version **4.0.2.0** be installed in the Global Assembly Cache (GAC) first.\r\n\r\nApplication itself runs fine _(direct click on **.exe** file)_ however installer _(direct click on **.application** file)_ throws that error message.\r\n\r\n## Steps to reproduce:\r\n1. **Create** a new solution with _WPF_ application via _VS2017_\r\n2. **Build** and **Publish**\r\n3. **Add** new _.NET Standard_ library project into the solution\r\n4. **Reference** it from _WPF_ project\r\n5. **Build** and **Publish**\r\n6. **Attempt** to Install by clicking the **.application file**\r\n\r\n## Additional Resource\r\n- I saw that issue reported at [Visual Studio community](https://developercommunity.visualstudio.com/content/problem/111414/clickonce-with-dependcy-with-netstandard-does-not.html) _(which is probably a wrong place)_ \r\n- I also found it at [StackOverflow](https://stackoverflow.com/questions/45843533/clickonce-deployment-does-not-install-as-expected) _(which also includes a [repository](https://github.com/colhountech/WPF_With_NetStandard) link to reproduce the issue)_"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6748191207","Type":"PullRequestEvent","CreatedAt":"2017-10-22T02:36:13","Actor":"KostaVlev","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24793","RelatedDescription":"Opened pull request \"Add Convert.cs performance tests.\" (#24793) at dotnet/corefx","RelatedBody":"Add Convert.cs performance tests. (#18765)"},{"Id":"6747787430","Type":"IssuesEvent","CreatedAt":"2017-10-21T20:31:26","Actor":"benrr101","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24792","RelatedDescription":"Opened issue \"SqlClient: OUTPUT clause causes exceptions to not get thrown until read\" (#24792) at dotnet/corefx","RelatedBody":"This scenario is a bit lengthy, so I'll load it into a gist: https://gist.github.com/benrr101/31628b57f1ab410090237c9018860e05\r\n\r\nBasically what this boils down to is that if I `.ExecuteReader()` on a `SqlCommand` that has an `OUTPUT` clause in it, I don't get an exception from the query failing until I call `.Read()` on the `SqlDataReader` I gt back.\r\n\r\nFor instance executing:\r\n```\r\nINSERT INTO [dbo].[testtable]([small_col]) VALUES (\"this value will be truncated\")\r\nSELECT * FROM [dbo].[testtable]\r\n```\r\n```\r\nSqlDataReader reader = cmd.ExecuteReader(); // Doesn't throw\r\nreader.Read() // DOES throw\r\n```\r\n\r\nBut executing:\r\n```\r\nINSERT INTO [dbo].[testtable]([small_col]) OUTPUT inserted.[small_col] VALUES (\"this value will be truncated\")\r\n```\r\n```\r\nSqlDataReader reader = cmd.ExecuteReader(); // DOES throw\r\nreader.Read(); // Never executed\r\n```\r\n\r\nAt this point I'm not sure if this is an expected behavior due to quirks in the TDS protocol or if it's a bug. Nevertheless, this is a bit of weird behavior that has already caused us a couple unexpected issue."},{"Id":"6747758338","Type":"PullRequestEvent","CreatedAt":"2017-10-21T20:10:42","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24791","RelatedDescription":"Opened pull request \"SSLStream Check for deallocated GCHandle\" (#24791) at dotnet/corefx","RelatedBody":"The GCHandle can easily be deallocated (by closing the SSlStream or if it's cancelled) before OpenSsl calls back due to the otherside sending the Client Hello. Therefore if I am not mistaken we should check that the GCHandle is still allocated when we rehydrate it from a pointer handed in from unmanaged code?\r\n\r\nAlso if it is null or deallocated, we don't want to throw an exception inside a Native callback because it can cause all kinds of havoc."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6748359291","Type":"IssuesEvent","CreatedAt":"2017-10-22T05:28:13","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/8560","RelatedDescription":"Closed issue \"Add observable functions to properties -- ala Swift\" (#8560) at dotnet/roslyn","RelatedBody":"@migueldeicaza  wrote in issue #123 \n\n> I like what Swift does in this area, and it should satisfy the requirements of this request.\n> They introduce \"observers\" which are part of a property declaration. They augment \"set\" and \"get\" with \"didSet\" and \"willSet\", You can use those to validate the parameters with willSet, and you can run arbitrary code after a value has been set with \"didSet\".\n> \n> Lots of code like this can be trivially rewritten:\n>     public Color TextColor {\n>        set {\n>           _color = value;\n>           NeedsUpdate (this);\n>       }\n>    }\n> \n> And just becomes:\n> public Color TextColor {\n>     didSet { \n>         NeedsUpdate (this); \n>     }\n> }\n\nI think this is an excellent idea, worth being raised individually -- the INotifyPropertyChanged interface is common, but not pleasant.  \n"},{"Id":"6748358243","Type":"IssuesEvent","CreatedAt":"2017-10-22T05:27:07","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/8364","RelatedDescription":"Closed issue \"Proposal: Semi-auto-properties with setters [topic has evolved]\" (#8364) at dotnet/roslyn","RelatedBody":"### Status 2016-03-02\n\nThis topic has evolve/changed from providing a name for the backing field to extending the auto properties of C# with setters, thus providing semi-auto-properties.\n\nThe initial proposal was droped on that way.\n\n---\n#### Original topic start\n\nAccording to an Expression Body Definition of a property with the lambda operator it would be consistent to allow the `=>` operator also in the `get` section of a property\n\n``` C#\n        private string _customHelloMessage = null;\n\n        public string HelloMessage\n        {\n            get => _customHelloMessage ?? \"Hello World\";\n            set\n            {\n                _customHelloMessage = value;\n            }\n        }\n```\n\nThis would be consistent as the lambda operator introduces a `return` expression.\n\nHaving this said, it would also be nice to shorten the `set` section of the property. Here I have some ideas.\n\nFor the following samples I assume that there is a field `private string _customHelloMessage = null;`\n\nFirst we could also use the `=>` operator, but I don't think that is a good idea as set is not a `return` expression. Just for an optical impression:\n\n``` C#\n        public string HelloMessage\n        {\n            get => _customHelloMessage ?? \"Hello World\";\n            set => _customHelloMessage = value;\n        }\n```\n\nLooks better, but the only thing that makes a real differnce is the letter _s_ or _r_ in `get` and `set`. Also, as said, it is not consistent to the current use of `=>`.\n\nThe next idea is to extent the contextual keyword `value` to stand with `set`:\n\n``` C#\n        public string HelloMessage\n        {\n            get => _customHelloMessage ?? \"Hello World\";\n            set value _customHelloMessage;\n        }\n```\n\nIt looks a bit odd, but should be intuitive.\n\nThis idea could be extended for the case that you want to specify the backup field by yourself:\n\n``` C#\n        public string HelloMessage\n        {\n            get value _customHelloMessage;\n            private set value _customHelloMessage;\n        } = \"Hello\";\n```\n\nAlso note the implicit initialization, that sould be further possible for auto-implemented properties;\n\nThe above sample could be abbrevated  even more with the `value` keyword declaring the backup field within the property definition:\n\n``` C#\n        public string HelloMessage\n        {\n            value _customHelloMessage;\n            get; \n            set;\n        } = \"Hello\";\n```\n\nwhat we could even more shorten with\n\n``` C#\n        public string HelloMessage { value _customHelloMessage; } = \"Hello\";\n```\n\nIn case there should be modifiers, `get` and `set` must be explicitly stated.\n\n``` C#\n        public string HelloMessage { value _customHelloMessage; get; private set; } = \"Hello\";\n```\n\nThe get and set methods can be overwritten, but at least one must be 'default' (`get;` or `set;`) to make sense for the `value` being there, if it's there.\n\nA backup field must never be implied automatically by the compiler, meaning the `_customHelloMessage` needs an explicit declaration. Otherwise it will be error-prone.\n\nI hope this is a worthy idea.\n\nRegards,\n  Ike\n"},{"Id":"6748351882","Type":"IssuesEvent","CreatedAt":"2017-10-22T05:20:20","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/8947","RelatedDescription":"Closed issue \"Proposal: Method Cascading, or the .. operator\" (#8947) at dotnet/roslyn","RelatedBody":"Method cascading operators are already used in languages such as Dart. Many examples here are taken from their documentation.\n\nWiki page: https://en.wikipedia.org/wiki/Method_cascading\n\nUsually, fluent interfaces rely on method chaining. Say you want to add a large number of elements to a list:\n\n``` C#\nmyTokenTable.Add(\"span\");\nmyTokenTable.Add(\"div\");\nmyTokenTable.Add(\"blockquote\");\nmyTokenTable.Add(\"p\");\nmyTokenTable.Add(\"small\");\n// ... many more here ...\nmyTokenTable.Add(\"blink\");\n```\n\nYou might want to write this as\n\n``` C#\nmyTokenTable\n    .Add(\"span\")\n    .Add(\"div\")\n    .Add(\"blockquote\")\n    .Add(\"p\")\n    .Add(\"small\")\n    // ... many more here ...\n    .Add(\"blink\");\n```\n\nbut this requires that Add() return the receiver, myTokenTable, instead of the element you just added. The API designer has to plan for this, it won't work for existing libraries, and it may conflict with other use cases. With cascades, no one needs to plan ahead or make this sort of tradeoff.  The Add() method can do its usual thing and return its arguments. However, you can get a chaining effect using cascades:\n\n``` C#\nmyTokenTable\n    ..Add(\"span\")\n    ..Add(\"div\")\n    ..Add(\"blockquote\")\n    ..Add(\"p\")\n    ..Add(\"small\")\n    // ... many more here ...\n    ..Add(\"blink\");\n```\n\nHere, \"..\" is the cascaded method invocation operation.  The \"..\" syntax invokes a method (or setter or getter) but discards the result, and returns the original receiver instead.\n\nAnother example (**edit:** added parenthesis to eliminate ambiguity):\n\n``` C#\nString s = (new StringBuilder()\n    ..Append('There are ')\n    ..Append(beersCount)\n    ..Append(' beers on the wall, ')\n    ..Append(beersCount)\n    ..Append(' number of beers...')\n    ).ToString();\n```\n\nThe success of frameworks like jQuery show that method call chaining is easy to learn, intuitive and makes for easier to read code.\n\nIf we had a `struct TimeMarker { DateTime Time; event Action Moved; }` class, and wanted to create a modified clone of an existing marker, we would have to do something like:\n\n``` C#\nTimeMarker createMarkerAhead(TimeMarker marker, TimeSpan ahead, Action movedAction) {\n    var aheadMarker = new TimeMarker(marker);\n    aheadMarker.Time += ahead;\n    aheadMarker.Moved += movedAction;\n    return aheadMarker;\n}\n```\n\nWhich is quite long. We could do it in one line using the object initializer syntax:\n\n``` C#\nTimeMarker createMarkerAhead(TimeMarker marker, TimeSpan ahead, Action movedAction) {\n    var aheadMarker = new TimeMarker(marker) { Time = marker.Time + ahead };\n    aheadMarker.Moved += movedAction;\n    return aheadMarker;\n}\n```\n\nBut this sets the `Time` variable twice, and doesn't really make it any easier to read. The method cascading operators would allow chaining calls:\n\n``` C#\nTimeMarker createMarkerAhead(TimeMarker marker, TimeSpan ahead, Action movedAction) {\n    return new TimeMarker(marker)\n        ..Time += ahead\n        ..Moved += movedAction;\n}\n```\n\nThis seems especially useful for creating form components and assigning event listeners at the spot of creation, instead of on the lines after.\n\nCompanion operators `?..` and `?..[]` could also be added for safe access:\n\n``` C#\nvar topStudent = topStudents.FirstOrDefault(student => student.Grade >= 8.5)\n    ?..Grant += 1000;\n\nwatchedEpisodes\n    ?..[1] = true\n    ?..[4] = true\n    ?..[7] = true;\n```\n\nEven more examples of use cases here: http://news.dartlang.org/2012/02/method-cascades-in-dart-posted-by-gilad.html\n"},{"Id":"6748340692","Type":"IssuesEvent","CreatedAt":"2017-10-22T05:08:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11620","RelatedDescription":"Closed issue \"[Proposal] Non-Capturing Lambdas with ==>\" (#11620) at dotnet/roslyn","RelatedBody":"A well-known issue in C# programming is inadvertent lambda capture, in which a lambda, which was intended to be statically allocated, mistakenly closes over some local state -- which forces a full display class allocation and delegate allocation.  ReSharper evidently has a warning for this case, but it is as often intentional as not.\n\nSome way for the programmer to express their intent -- that a particular lambda _not_ close over local state -- is needed. \n\nhttps://github.com/dotnet/roslyn/issues/117 is a proposal to bring full-fledged C++-like lambda capture lists to C#.  This would solve the problem, but at the cost of extra syntax for all lambdas, and a maintenance burden for lambdas which do capture (proportional to the number of locals captured).\n\nThe main distinction that is needed is binary:  is this lambda intended to be capturing, or not?\n\nThis proposal is to introduce a new token to the language when defining lambdas: the ==> token.  The ==> token, when used in a lambda definition in place of =>, indicates \"this lambda must not capture local state,\" and causes a compiler error if there are any open variables in the lambda.\n\nSo in the case of\n\nintEnumerable.Where(i ==> i > 0).Select(i ==> i.ToString())\n\nboth of the lambdas would be fine, as neither one captures local state.  \n\nBut this would be an error:\n\nintEnumerable.Where(i ==> i > intEnumerable.Count)\n\nas the lambda is defined with ==> but references a local variable.\n\n(The motivation for \"==>\" as the token is that it is obviously close to the existing syntax, in fact so close as to be almost completely unobtrusive (and hence widely usable), while hopefully fitting reasonably well into the existing tokenization rules of the language.)\n\nAs far as expressing this in the IL, it is possible that this syntax could result in applying an attribute to the generated method for the lambda, as suggested under item 6 of https://github.com/dotnet/roslyn/issues/1898 \n\nThe implementation intent is that the compiler reliably lifts ==> lambdas into static allocations, with no runtime allocation cost required when invoking them.\n"},{"Id":"6748324987","Type":"IssuesEvent","CreatedAt":"2017-10-22T04:52:49","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/12238","RelatedDescription":"Closed issue \"Proposal: Compile time expressions \" (#12238) at dotnet/roslyn","RelatedBody":"It would be useful to specify something like `\"Hello World\".Length` in some special syntax that gets evaluated at compile time and replaced with 11 (becoming a constant) in the compiled binaries.\n"},{"Id":"6748301172","Type":"IssuesEvent","CreatedAt":"2017-10-22T04:28:09","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/15487","RelatedDescription":"Closed issue \"Tuple element names on the left of a deconstruction\" (#15487) at dotnet/roslyn","RelatedBody":"Tuple element names are currently rejected on the left of a deconstruction assignment or deconstruction declaration. However, the tuple on the left is the result type of the deconstruction, and therefore names should be permitted. Moreover, that is a way for the programmer to ask the compiler to ensure that the names are not mixed up.\r\n\r\nOn the other hand, it isn't clear what the syntax would be if one were using a tuple designation. Perhaps\r\n```cs\r\nvar (firstName: first, lastName: last) = GetName();\r\n```\r\nIf we want to permit element names that way, we would need to modify the syntax model, which means it would have to happen _very_ soon.\r\n\r\n@MadsTorgersen @dotnet/ldm @jcouv @VSadov @AlekseyTs FYI"},{"Id":"6748300287","Type":"IssuesEvent","CreatedAt":"2017-10-22T04:27:08","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/15610","RelatedDescription":"Closed issue \"Proposal: Access to \"this\" in field initializers in C#\" (#15610) at dotnet/roslyn","RelatedBody":"Problem: In many cases we developers still have to use constructor to initialize values, just because we don't have access to \"this\" in field initializers. Example of expected behavior:\r\n\r\n```\r\npublic class MyGraph\r\n{\r\n   public class Node\r\n   {\r\n        public Node(MyGraph parent)\r\n        { ...}\r\n   }\r\n\r\n   public Node Root {get;} = new Node(this);\r\n}\r\n```\r\nThis makes constructor a \"semantic bottleneck\" and trashes it up with some unrelated pieces of code that should be there near those fields declaration.\r\n\r\n\r\nForeseeing the question about the order of field initializers execution and how to know which fields of \"this\" are already initialized and can be used to see what to expect being initialized. Here is an example that demonstrates situation:\r\n\r\n```\r\npublic class MyClass\r\n{\r\n     DbConnection connection = new DbConnection();\r\n     string[] Names {get;} = this.connection.LoadNames();  //assumes \"connection\" to be initialized\r\n}\r\n\r\n```\r\nI see 2 approaches:\r\na) Developer friendly way (Preferable): Execute initializers following the field declaration order. So if \"connection\" declared before \"Names\", then during \"Names\" initialization, connection is available. People can ask what to do in case of partial classes. I would suggest: in case of partial class initializers execution order matches the order of filenames, because that's how compiler will join those files.\r\n```\r\n//file1.cs\r\npartial class MyClass\r\n{\r\n     string[] Names3 {get;} = this.connection.LoadNames();  //NullReference\r\n}\r\n\r\n//file2.cs\r\npublic partial class MyClass\r\n{\r\n     string[] Names {get;} = this.connection.LoadNames();  //NullReference\r\n     DbConnection connection = new DbConnection();\r\n     string[] Names2 {get;} = this.connection.LoadNames();  //Success\r\n}\r\n\r\n//file3.cs\r\npartial class MyClass\r\n{\r\n     string[] Names4 {get;} = this.connection.LoadNames();  //Success\r\n}\r\n```\r\n\r\nb) Simple, but hostile way: even though field initializers were executed and values calculated - compiler can just keep fields unassigned until all initializers executed, right before execution of constructor. This would be suckier than the option \"a\", but at least  we'll have link to \"this\" assigned and can do the workaround using Lazy:\r\n```\r\npublic class MyClass\r\n{\r\n     DbConnection connection = new DbConnection();\r\n     Lazy<string> Names {get;} = new Lazy<string>(()=>this.connection.LoadNames());\r\n}\r\n```\r\nRegardless of the approach, having any of those two options would be better than having none, and having to trash up the constructor.\r\n\r\nThis is definitely doable just on compiler level (no changes to CLR required) and it also does not break existing code, because now devs cannot use \"this\", all initializers are basically static methods code."},{"Id":"6748298803","Type":"IssuesEvent","CreatedAt":"2017-10-22T04:25:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/15574","RelatedDescription":"Closed issue \"msbuild issue\" (#15574) at dotnet/roslyn","RelatedBody":"Error MSB4019: The imported project \"C:\\Users\\gautams\\Downloads\\MSBuild.Community.Tasks.v1.5.0.214\\MSBuild.Community.Tasks.Targets\" was not found."},{"Id":"6748288588","Type":"IssuesEvent","CreatedAt":"2017-10-22T04:14:40","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/16435","RelatedDescription":"Closed issue \"SUGGEST:Should add 'argument cannot be null' feature in C#\" (#16435) at dotnet/roslyn","RelatedBody":"Just like:\r\nvoid Sample(object objCanNotBeNull != null)\r\nOn developing , IDE should warn 'Sample(null)'.\r\nOn runtime , application should throw a exception.\r\n\r\nIn most cases,we don't want the function arguments to be null,then we must write 'if(obj==null) throw new exception'.It's boring and absolutely no need.Can we add this feature in new C#?"},{"Id":"6748284216","Type":"IssuesEvent","CreatedAt":"2017-10-22T04:10:21","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/16473","RelatedDescription":"Closed issue \"Proposal: Add support for ternary ref expression\" (#16473) at dotnet/roslyn","RelatedBody":"The pattern of binding a ref variable to one or another expression conditionally is not currently expressible in C#.\r\n\r\nThe typical workaround is to introduce a method like:\r\n```CS\r\nref T Choice(bool condition, ref T consequence, ref alternative)\r\n{\r\n    if (condition)\r\n    {\r\n         return ref consequence;\r\n    }\r\n    else\r\n    {\r\n         return ref alternative;\r\n    }\r\n}\r\n```\r\nNote that this is not an exact replacement of a ternary since all arguments must be evaluated at the call site.\r\n\r\nThe following will not work as expected:\r\n```CS\r\n       // will crash with NRE because 'arr[0]' will be executed unconditionally\r\n      ref var r = ref Choice(arr != null, ref arr[0], ref otherArr[0]);\r\n```\r\n\r\nThe proposed syntax would look like:\r\n```CS\r\n     <condition> ? ref <consequence> : ref <alternative>;\r\n```\r\n\r\nThe above attempt with \"Choice\" can be _correctly_ written using ref ternary as:\r\n\r\n```CS\r\n     ref var r = ref (arr != null ? ref arr[0]: ref otherArr[0]);\r\n```\r\n\r\nThe difference from Choice is that consequence and alternative expressions are accessed in a _truly_ conditional manner, so we do not see a crash if ```arr == null```\r\n\r\nThe ternary ref is just a ternary where both alternative and consequence are refs. It will naturally require that consequence/alternative operands are LValues. \r\nIt will also require that consequence and alternative have types that are identity convertible to each other.\r\n\r\nThe type of the expression will be computed similarly to the one for the regular ternary. I.E. in a case if consequence and alternative have identity convertible, but different types, the existing type-merging rules will apply.\r\n\r\nSafe-to-return will be assumed conservatively from the conditional operands. If either is unsafe to return the whole thing is unsafe to return.\r\n\r\nRef ternary is an LValue and as such it can be passed/assigned/returned by reference;\r\n\r\n```CS\r\n     // pass by reference\r\n     foo(ref (arr != null ? ref arr[0]: ref otherArr[0]));\r\n\r\n     // return by reference\r\n     return ref (arr != null ? ref arr[0]: ref otherArr[0]);\r\n```\r\n\r\nBeing an LValue, it can also be assigned to. \r\n\r\n```CS\r\n    // assign to\r\n    (arr != null ? ref arr[0]: ref otherArr[0]) = 1;\r\n```\r\n\r\nRef ternary can be used in a regular (not ref) context as well. Although it would not be common since you could as well just use a regular ternary.\r\n\r\n```CS\r\n     int x = (arr != null ? ref arr[0]: ref otherArr[0]);\r\n```\r\n\r\n\r\n=======================\r\nImplementation notes: \r\n\r\nThe complexity of the implementation would seem to be the size of a moderate-to-large bug fix. - I.E not very expensive.\r\nI do not think we need any changes to the syntax or parsing.\r\nThere is no effect on metadata or interop. The feature is completely expression based.\r\nNo effect on debugging/PDB either\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6746459626","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:28:39","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4772","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4772) at dotnet/corert","RelatedBody":""},{"Id":"6746270525","Type":"PullRequestEvent","CreatedAt":"2017-10-21T00:08:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4773","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4773) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6746248468","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:56:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4773","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4773) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6746223197","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:42:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4772","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4772) at dotnet/corert","RelatedBody":""},{"Id":"6746222276","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:42:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4770","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4770) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6746221774","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:42:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4771","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6746181174","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:22:17","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4729","RelatedDescription":"Merged pull request \"Added support for ldsfld/stsfld/ldsflda/ldflda including general value type support\" (#4729) at dotnet/corert","RelatedBody":"@morganbr This commit somewhat steps on/builds from #4695. For the static fields, I'm not entirely certain what the structure should be for generating the fields. It would be helpful if there were type output scaffolding in place, to make it clear where the various type level operations should be taking place."},{"Id":"6746109805","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:50:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4771","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6745900789","Type":"PullRequestEvent","CreatedAt":"2017-10-20T21:36:59","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4770","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4770) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6745304281","Type":"IssuesEvent","CreatedAt":"2017-10-20T19:00:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4752","RelatedDescription":"Closed issue \"[ILVerify] Probably false negative in a specific case with generics\" (#4752) at dotnet/corert","RelatedBody":"For the following code, I get\r\n\r\n`Assert::AreEqual(!!0, !!0)][offset 0x0000000A][found ref 'T'][expected ref '[mscorlib]System.IEquatable´1<T>'] Unexpected type on the stack.`\r\n\r\nThe code is\r\n\r\n```\r\nusing System;\r\n\r\nnamespace ILVerifyBug\r\n{\r\n    static class Assert\r\n    {\r\n        public static bool AreEqual<T>(T a, T b) where T : IEquatable<T>\r\n        {\r\n            return a.Equals(b);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n(I have minimized it as much as possible.)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":19,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":379,"FavoriteCount":346,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":131,"FavoriteCount":76,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":29,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2017-10-22T05:30:18.1330888Z","RunDurationInMilliseconds":6261}