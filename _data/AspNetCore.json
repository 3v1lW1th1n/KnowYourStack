{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing SignalR for ASP.NET Core 2.0","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core is... <a aria-label=\"read more about Announcing SignalR for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T00:00:00","CommentsCount":20,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T00:00:00","CommentsCount":44,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T00:00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null},{"Title":"WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication","PublishedOn":"2017-06-28T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the recent update to the WCF Service Reference tool in the VS Marketplace, support has been added for downloading metadata for a web service where the metadata exchange (MEX) endpoint has been secured with IIS authentication. The purpose of MEX endpoints is to allow clients to discover the service capabilities, including security aspects of... <a aria-label=\"read more about WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/","RawContent":null},{"Title":"Introducing ASP.NET Core 2.0 Preview 2","PublishedOn":"2017-06-28T00:00:00","CommentsCount":41,"FacebookCount":0,"Summary":"At Build 2017, we released an initial preview version of ASP.NET Core 2.0.  Over the last two months we have incorporated your feedback and added a number of new features.  We now have a Preview 2 version of the ASP.NET Core 2.0 framework and Visual Studio tools for you to try.  In this post, we... <a aria-label=\"read more about Introducing ASP.NET Core 2.0 Preview 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers","PublishedOn":"2017-05-10T00:00:00","CommentsCount":25,"FacebookCount":0,"Summary":"The ASP.NET team is pleased to share the first preview version of the ASP.NET Core 2.0 framework.  In this post, we’ll look at the new features and changes to the web framework that were announced at the Build 2017 keynote and sessions.  We will also look at some other updates that were published for ASP.NET... <a aria-label=\"read more about Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/","RawContent":null},{"Title":"Visual Studio 2017 Tools for Azure Functions","PublishedOn":"2017-05-10T00:00:00","CommentsCount":104,"FacebookCount":0,"Summary":"Visual Studio 2017 Tools for Azure Functions are now available as part of the Azure development workload starting in the Visual Studio 2017 15.3 release. These tools: Enable creating pre-compiled C# functions that bring better cold start performance than script based functions, and opens the entire eco-system of Visual Studio tools for class libraries including code... <a aria-label=\"read more about Visual Studio 2017 Tools for Azure Functions\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6591812487","Type":"IssuesEvent","CreatedAt":"2017-09-14T17:24:59","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2196","RelatedDescription":"Closed issue \"UseOpenIdConnectAuthentication InvalidOperationException\" (#2196) at aspnet/Home","RelatedBody":"I am getting the same error as Edward that is tracked here #2155.\r\nWe are still using: netcoreapp1.1 \r\nError\r\n```\r\nUnhandled Exception: System.InvalidOperationException: Provide Authority, MetadataAddress, Configuration, or ConfigurationManager to OpenIdConnectOptions\r\n   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectMiddleware..ctor(RequestDelegate next, IDataProtectionProvider dataProtectionProvider, ILoggerFactory loggerFactory, UrlEncoder encoder, IServiceProvider services, IOptions``1 sharedOptions, IOptions``1 options, HtmlEncoder htmlEncoder)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass3_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\r\n```\r\n\r\nThis error only occurs when trying to run my site from the command line via **dotnet run**,but not when project is built and ran in Visual Studios.\r\nI don't have a custom IOptionsMonitor as was the issue from the other ticket.\r\n\r\nHere is my \r\n```\r\nvar baseUrl = appSettings.Value.BaseUrl;\r\napp.UseOpenIdConnectAuthentication(new OpenIdConnectOptions\r\n            {\r\n                AuthenticationScheme = \"oidc\",\r\n                SignInScheme = \"Cookies\",\r\n                Authority = baseUrl,\r\n                //should be true in prod!\r\n                RequireHttpsMetadata = false,\r\n                ClientId = \"customclient\",\r\n                ClientSecret = \"secretissafewithme\",\r\n                ResponseType = \"code id_token\",\r\n                Scope = {\"api1\", \"offline_access\"},\r\n                GetClaimsFromUserInfoEndpoint = true,\r\n\r\n                SaveTokens = true,\r\n\r\n                TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters\r\n                {\r\n                    NameClaimType = JwtClaimTypes.Name,\r\n                    RoleClaimType = JwtClaimTypes.Role,\r\n                },\r\n                //UseTokenLifetime = true,\r\n                Events = new OpenIdConnectEvents\r\n                {\r\n                    // Called when authentication is completed. This is the last event, assuming that authentication succeeds. \r\n                    // After this event is handled, the user is signed into the app.\r\n                    OnTicketReceived = async trc =>\r\n                    {\r\n                        await Task.Run(() =>\r\n                        {\r\n                            // store both tokens in the claims/cookie.\r\n                            var identity = trc.Ticket.Principal.Identity as ClaimsIdentity;\r\n                            identity.AddClaims(new[]\r\n                            {\r\n                                new Claim(\"access_token\", trc.Ticket.Properties.GetTokenValue(\"access_token\")),\r\n                                new Claim(\"refresh_token\", trc.Ticket.Properties.GetTokenValue(\"refresh_token\")),\r\n                                new Claim(\"expires_at\", trc.Ticket.Properties.GetTokenValue(\"expires_at\")),\r\n                            });\r\n\r\n                            // cookie is good for multiple requests\r\n                            trc.Properties.IsPersistent = true;\r\n                            // set 12h expiration\r\n                            trc.Properties.ExpiresUtc = DateTimeOffset\r\n                                .Parse(trc.Ticket.Properties.GetTokenValue(\"expires_at\")).AddHours(12);\r\n                        });\r\n                    },\r\n                },\r\n            });\r\n```\r\n\r\nI would like to run without the use of Visual Studios, which it runs perfectly fine on. Any thoughts  @HaoK?\r\n"},{"Id":"6591658217","Type":"IssuesEvent","CreatedAt":"2017-09-14T16:48:54","Actor":"jayslife","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2196","RelatedDescription":"Opened issue \"UseOpenIdConnectAuthentication InvalidOperationException\" (#2196) at aspnet/Home","RelatedBody":"I am getting the same error as Edward that is tracked here #2155.\r\nWe are still using: netcoreapp1.1 \r\nError\r\n`Unhandled Exception: System.InvalidOperationException: Provide Authority, MetadataAddress, Configuration, or ConfigurationManager to OpenIdConnectOptions\r\n   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectMiddleware..ctor(RequestDelegate next, IDataProtectionProvider dataProtectionProvider, ILoggerFactory loggerFactory, UrlEncoder encoder, IServiceProvider services, IOptions``1 sharedOptions, IOptions``1 options, HtmlEncoder htmlEncoder)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass3_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()`\r\n\r\nThis error only occurs when trying to run my site from the command line via **dotnet run**,but not when project is built and ran in Visual Studios.\r\nI don't have a custom IOptionsMonitor as was the issue from the other ticket.\r\n\r\nHere is my \r\n`\r\napp.UseOpenIdConnectAuthentication(new OpenIdConnectOptions\r\n            {\r\n                AuthenticationScheme = \"oidc\",\r\n                SignInScheme = \"Cookies\",\r\n                Authority = baseUrl,\r\n                //should be true in prod!\r\n                RequireHttpsMetadata = false,\r\n\r\n                ClientId = \"customclient\",\r\n                ClientSecret = \"secretissafewithme\",\r\n\r\n                ResponseType = \"code id_token\",\r\n                Scope = {\"api1\", \"offline_access\"},\r\n                GetClaimsFromUserInfoEndpoint = true,\r\n\r\n                SaveTokens = true,\r\n\r\n                TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters\r\n                {\r\n                    NameClaimType = JwtClaimTypes.Name,\r\n                    RoleClaimType = JwtClaimTypes.Role,\r\n                },\r\n                //UseTokenLifetime = true,\r\n                Events = new OpenIdConnectEvents\r\n                {\r\n                    // Called when authentication is completed. This is the last event, assuming that authentication succeeds. \r\n                    // After this event is handled, the user is signed into the app.\r\n                    OnTicketReceived = async trc =>\r\n                    {\r\n                        await Task.Run(() =>\r\n                        {\r\n                            // store both tokens in the claims/cookie.\r\n                            var identity = trc.Ticket.Principal.Identity as ClaimsIdentity;\r\n                            identity.AddClaims(new[]\r\n                            {\r\n                                new Claim(\"access_token\", trc.Ticket.Properties.GetTokenValue(\"access_token\")),\r\n                                new Claim(\"refresh_token\", trc.Ticket.Properties.GetTokenValue(\"refresh_token\")),\r\n                                new Claim(\"expires_at\", trc.Ticket.Properties.GetTokenValue(\"expires_at\")),\r\n                            });\r\n\r\n                            // cookie is good for multiple requests\r\n                            trc.Properties.IsPersistent = true;\r\n                            // set 12h expiration\r\n                            trc.Properties.ExpiresUtc = DateTimeOffset\r\n                                .Parse(trc.Ticket.Properties.GetTokenValue(\"expires_at\")).AddHours(12);\r\n                        });\r\n                    },\r\n                },\r\n            });`\r\n\r\nI would like to run without the use of Visual Studios, which it runs perfectly fine on. Any thoughts  @HaoK?\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6597613970","Type":"PullRequestEvent","CreatedAt":"2017-09-15T21:00:32","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/895","RelatedDescription":"Opened pull request \"Cleanup IObservable susbscriptions on connection disconnect\" (#895) at aspnet/SignalR","RelatedBody":"Part of https://github.com/aspnet/SignalR/issues/885"},{"Id":"6597610528","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:59:45","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/891","RelatedDescription":"Merged pull request \"Add Hub<T> Functional Tests\" (#891) at aspnet/SignalR","RelatedBody":"Adding strongly typed hub functional tests. "},{"Id":"6597564149","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:46:59","Actor":"StephenCleary","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/894","RelatedDescription":"Opened issue \"Bring back progress support\" (#894) at aspnet/SignalR","RelatedBody":"I'd like to see:\r\n\r\n- [ ] Progress message definitions in the protocol, possibly as a special case of streaming.\r\n- [ ] `IProgress` support for .NET server and client.\r\n- [ ] A library that provides progress support for the JavaScript client.\r\n"},{"Id":"6597555442","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:44:35","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/893","RelatedDescription":"Merged pull request \"Packages produced from dev branch should be alpha2 now\" (#893) at aspnet/SignalR","RelatedBody":""},{"Id":"6597243131","Type":"PullRequestEvent","CreatedAt":"2017-09-15T19:19:44","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/893","RelatedDescription":"Opened pull request \"Packages produced from dev branch should be alpha2 now\" (#893) at aspnet/SignalR","RelatedBody":""},{"Id":"6597214710","Type":"PullRequestEvent","CreatedAt":"2017-09-15T19:11:56","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/892","RelatedDescription":"Merged pull request \"Moving versions to alpha2\" (#892) at aspnet/SignalR","RelatedBody":""}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6597639677","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:07:47","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6684","RelatedDescription":"Closed issue \"Taghelper - url - invalid route- throw warning\" (#6684) at aspnet/Mvc","RelatedBody":"Hi, loving ASP.NET thank you so much for all of the hard work!\r\n\r\nA suggestion - if the URL taghelper cannot resolve the controller/action route, it should throw a warning to catch this in the log.\r\n\r\nEg:  `<a asp-route-id=\"123\" asp-action=\"MisspeltAction\" asp-controller=\"MyController\">'\r\n\r\n       <a asp-route-id=\"123\" asp-action=\"MisspeltAction\" asp-controller=\"MyController\">\r\n\r\nShould throw a warning. At the moment it seems to happily push out a url of /MyController/MisspeltAction/123\r\n\r\n"},{"Id":"6597584394","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:52:18","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6811","RelatedDescription":"Closed issue \"Allow a way to opt-out of BindProperty\" (#6811) at aspnet/Mvc","RelatedBody":"As part of https://github.com/aspnet/Mvc/issues/6653, we're allowing `BindPropertyAttribute` to be applied to page model instances. Adding a `BindProperty` on a property will override the attribute's configuration on the type, however there isn't a way to opt out of this. Should we allow a setting that allows this?\r\n\r\nNote:\r\nWe already have `BindNeverAttribute` that applies to sub-level properties and not top-level properties. We could expand it to support top-level properties."},{"Id":"6597560793","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:46:06","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6816","RelatedDescription":"Closed issue \"MvcJsonOptions.JsonSerializerSettings setter is needed\" (#6816) at aspnet/Mvc","RelatedBody":"Currently in 2.0 for configuring `JsonSerializerSettings` we're doing something like that:\r\n```\r\n\t\t\tservices.AddMvc().AddJsonOptions(opt =>\r\n\t\t\t{\r\n\t\t\t\topt.SerializerSettings.Converters = ...\r\n\t\t\t});\r\n```\r\n\r\nWhat's wrong with this approach for me is that I have a JsonSerializerSettings  inside my DI-container, so I need to use it as a whole. But `MvcJsonOptions` has no `SerializerSettings` setter.\r\nThis isn't possible:\r\n```\r\nvar settings = container.Resolve<JsonSerializerSettings>();\r\nopt.SerializerSettings = settings;\r\n```\r\nSo I have to assign every property from my JsonSerializerSettings to `MvcsonOptions.SerializerSettings`.\r\nIt's VERY tedious! Really painful.\r\n\r\nSo please add setter for `MvcJsonOptions.JsonSerializerSettings`."},{"Id":"6597541746","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:40:51","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6835","RelatedDescription":"Closed issue \"async  \"OnReady\" in controllers\" (#6835) at aspnet/Mvc","RelatedBody":"Would it be possible and make sense to have something like OnReady async method inside of controllers? Would help with scenarios where we are repeating async code usage inside of various methods.\r\n/cc @DamianEdwards "},{"Id":"6597501500","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:29:48","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6833","RelatedDescription":"Closed issue \"Publish fails in visual studio 2017.\" (#6833) at aspnet/Mvc","RelatedBody":"Hi,\r\nI want to publish an \"ASP.Net MVC Core 2.0\" project, which contains some library as references (They are not NuGets or projects). The project is working fine in the visual studio but it throws the following exception.\r\n\r\n```\r\n\tCannot find compilation library location for package 'Olive'\r\n     at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n     at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n     at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n     at System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\n     at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n     at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n     at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n     at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n     at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n     at Microsoft.AspNetCore.Mvc.Razor.Internal.LazyMetadataReferenceFeature.get_References()\r\n     at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n     at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n     at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(RazorCodeDocument codeDocument)\r\n     at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n     at Microsoft.AspNetCore.Razor.Language.RazorTemplateEngine.GenerateCode(RazorCodeDocument codeDocument)\r\n     at Microsoft.AspNetCore.Razor.Language.RazorTemplateEngine.GenerateCode(RazorProjectItem projectItem)\r\n     at Microsoft.AspNetCore.Razor.Language.RazorTemplateEngine.GenerateCode(String path)\r\n     at Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.Internal.PrecompileRunCommand.<>c__DisplayClass23_0.<GenerateCode>b__0(Int32 i)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean& yieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica.Execute()\r\n```"},{"Id":"6597138088","Type":"IssuesEvent","CreatedAt":"2017-09-15T18:52:46","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6837","RelatedDescription":"Opened issue \"Port to 2.0.1: Injecting IViewLocalizer into Razor Page causing IndexOutOfRangeException.\" (#6837) at aspnet/Mvc","RelatedBody":"Original bug: https://github.com/aspnet/Mvc/issues/6694\r\n"},{"Id":"6596926989","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:00:18","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6836","RelatedDescription":"Opened pull request \"[Design] Updated formatters to wrap exceptions in InputFormatException for inv…\" (#6836) at aspnet/Mvc","RelatedBody":"…alid input\r\n\r\nThere are more tests that I need to add (example: derived from inbuilt formatters, etc.) but wanted to get an early review to see if the direction is good."},{"Id":"6596774477","Type":"IssuesEvent","CreatedAt":"2017-09-15T17:21:53","Actor":"DamianEdwards","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6829","RelatedDescription":"Closed issue \"How can I use localization in my Razor Page project\" (#6829) at aspnet/Mvc","RelatedBody":"Hi guys,\r\nI want use localization on my razor page project, I  registed the localization service in startup:\r\n`services.AddLocalization(options => options.ResourcesPath = \"Resources\");\r\n            services.AddMvc()\r\n                .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)\r\n                .AddRazorPagesOptions(options =>\r\n                {\r\n                    options.Conventions.AuthorizeFolder(\"/Account/Manage\");\r\n                    options.Conventions.AuthorizePage(\"/Account/Logout\");\r\n                });`\r\nIn the View, I inject the IViewLocalizer, but when i run the project, it throw a exception:\r\n  IndexOutOfRangeException: Index was outside the bounds of the array.\r\n    Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.BuildBaseName(string path)\r\n\r\nThe exception from ViewLocalizer.Contextualize, the viewContext.View.Path is empty, so it throw this exception.\r\n\r\nSo, How can I use localization in my Razor Page project?"},{"Id":"6596641971","Type":"IssuesEvent","CreatedAt":"2017-09-15T16:47:19","Actor":"Ibro","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6835","RelatedDescription":"Opened issue \"async  \"OnReady\" in controllers\" (#6835) at aspnet/Mvc","RelatedBody":"Is it possible to have something like OnReady async method inside of controllers? Would help with scenarios where we are repeating async code usage inside of various methods.\r\n/cc @DamianEdwards "}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6596276005","Type":"IssuesEvent","CreatedAt":"2017-09-15T15:23:15","Actor":"chassq","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1430","RelatedDescription":"Opened issue \"No User available until cookie created?\" (#1430) at aspnet/Identity","RelatedBody":"\r\nWhen we run this call \r\n\r\n`var signInResult = await _signInManager.PasswordSignInAsync(login.LoginName, login.Password, login.RememberMe, true);`\r\n\r\nwe cannot seem to get to the HttpContext.User until after the Action Method completes and has returned. Is that correct?"},{"Id":"6594353516","Type":"IssuesEvent","CreatedAt":"2017-09-15T07:39:56","Actor":"NorDroN","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1429","RelatedDescription":"Opened issue \"How can I replace base64 in GenerateEmailConfirmationTokenAsync?\" (#1429) at aspnet/Identity","RelatedBody":"Hi!\r\nI'm developing a dotnet core template based on JavaScriptServices (angular 4) and OpenIddict - https://github.com/NorDroN/AngularTemplate \r\n\r\nI've tried to add an email confirmation, but it turned up not so simple:\r\nMicrosoft.AspNetCore.Identity use base64 when generates token (GenerateEmailConfirmationTokenAsync), but base64 can contain slash (/) and also base64 is case sensitive\r\nI've tried to solve this problems:\r\n1) I've tried to add Encode in my code for token ( / -> %2F), but angular can understand this ( %2F -> / ) and parse it as part of url :(\r\n2) angular also replaces my url with base64 code to url in lowercase (I don't know why, but it's so) and of course when I try to check it I get an error\r\n\r\nHow can I replace base64 to base32 or may be something else?"},{"Id":"6592452568","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:56:25","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1384","RelatedDescription":"Closed issue \"How to modify login url when using asp.net identity\" (#1384) at aspnet/Identity","RelatedBody":"Can we modify the default `/account/login` url to some custom url while redirecting the user to login page in case of unauthorized access ?\r\n\r\nLet's say client name need to be appended to url which will look like `/ClientABC/account/login` which will redirect to login page and after login will redirect to respective url which is present in return url parameter.\r\n\r\nI am trying this in below way. Setting the login Url, here I want to append the client name\r\n\r\n```\r\nservices.Configure<IdentityOptions>(opt =>\r\n            {\r\n                opt.Cookies.ApplicationCookie.LoginPath = new PathString(\"/account/login\");\r\n            });\r\n```\r\nand then making sure all urls requires authentication\r\n\r\n```\r\n  services.AddMvc(o =>\r\n                {\r\n                   o.Filters.Add(new AuthorizeFilter(new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build()));\r\n\r\n                })\r\n```\r\n\r\nI am trying this from many days, not able to figure out the solution !\r\n\r\nThanks !\r\nRohit"},{"Id":"6592443513","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:54:13","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1360","RelatedDescription":"Closed issue \"Multiple Identities with different token providers\" (#1360) at aspnet/Identity","RelatedBody":"_From @Elfocrash on August 15, 2017 10:15_\n\n## Intro\r\n\r\nOn my application I need to have two different Identities with different options for each Identity.\r\nWhat I initially did is to simply add the identities with `services.AddIdentity<AdminUser, IdentityRole>`, `services.AddIdentity<User, IdentityRole>`\r\nand do a `.AddDefaultTokenProviders()` at the end of the call, as the project does anyway.\r\n\r\n## The problem\r\nThe problem is that when i have two identities and i call `.AddDefaultTokenProviders()` only the second call's tokens stay in the dictionary. That is because the system is checking if token providers with those names exist and if they do it replaces them with the latter.\r\nThe problem is that the IdentityOptions is a Singeton.\r\nThe error i was getting was `\"No IUserTokenProvider named 'PasswordResetTokenProvider' is registered.\"`\r\n\r\nMy next idea after diving into the code was to remove the `.AddDefaultTokenProviders()` and manually add 3 calls for my providers ex. `.AddTokenProvider(\"UserDefault\",                    typeof(DataProtectorTokenProvider<>).MakeGenericType(typeof(User)))` (and the respective ones for email and phone).\r\n\r\nThen i manually set the token provider to be used in the User managers created for each identity like this: `optionsAccessor.Value.Tokens.PasswordResetTokenProvider = \"UserDefault\";`\r\n\r\nHowever every time i needed to call a user manager the code was stepping in both managers (or there are cases where i need both). Because the `optionsAccessor.Value.Tokens.PasswordResetTokenProvider`, `optionsAccessor.Value.Tokens.ChangeEmailTokenProvider` and `optionsAccessor.Value.Tokens.EmailConfirmationTokenProvider` are system wide value, only the one set last will be used.\r\nThis makes the system unable to user the correct token.\r\n\r\n## The workaround\r\nThe way I worked around it is by adding the `IHttpContextAccessor` in my usermanager and checking Route values to see if the request is coming by a specific area, controller and action.\r\n\r\nObviously this is very hacky and I am not happy with it.\r\nI know that the correct way would be to use claims and roles to give different permissions to separate admin users and normal users, but the app I'm buying had this separation as a requirement on a higher level (Potentially the need to store them in a centralized database away from the other records, different cookie persistence values etc).\r\n\r\n## Suggestion\r\nTo me it looks like the problem is that we use a Dictionary that limits the keys to one value.\r\nThe second `.AddDefaultTokenProviders()` call should probably throw an exception saying that i have something with that name already registered.\r\nAnother thing would be that instead of using a Dictionary, we use a data structure that allows key-value combination checks. That way we can have \"Default\"-\"AUserManager\" and \"Default\" - \"BUserManager\" but the code retrieves the one appropriate for this specific usermanager requesting it.\r\n\r\nWhat are your thoughts on this?\r\nWas Identity never build around the idea of having multiple ones?\r\n\n\n_Copied from original issue: aspnet/Mvc#6656_"},{"Id":"6592441943","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:53:50","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1352","RelatedDescription":"Closed issue \"When using `CheckPasswordSignInAsync`, how should you protect against timing attacks?\" (#1352) at aspnet/Identity","RelatedBody":"Within a multi-tenanted environment (without public registration), we use `CheckPasswordSignInAsync` as one of the login steps (as we also need to check permissions before logging in, too). When the user does not exist in the system, how can I effectively still run a hash before returning, so that the existence/absence of the user isn't given away via a timing attack?\r\n\r\nI haven't measured yet, but will the following line of code run a comparable hash, therefore meaning the responses take the same time for an invalid password vs a missing user?\r\n\r\n```\r\nif (user == null)\r\n{\r\n    // fake a password hash operation:\r\n    await _signInManager.CheckPasswordSignInAsync(new ServiceUser(), \"wrong password\", false);\r\n    return;\r\n}\r\n\r\nvar result = await _signInManager.CheckPasswordSignInAsync(user, password, true);\r\nif (!result.Succeeded) return;\r\n```"},{"Id":"6592441040","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:53:37","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1323","RelatedDescription":"Closed issue \"Doesn't support hierarchyid type\" (#1323) at aspnet/Identity","RelatedBody":"I need add a property in ApplicationUser Class which datatype is hierarchyid.\r\nHow can I do that?"},{"Id":"6592436749","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:52:35","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1320","RelatedDescription":"Closed issue \"Missing the UserManager.VerifyPasswordResetTokenAsync method\" (#1320) at aspnet/Identity","RelatedBody":"I want to implement a password change flow. Naturally I would expect it to work like this: \r\n\r\n```csharp\r\nvar token = await UserManager.GeneratePasswordResetTokenAsync(user);\r\nvar result = await UserManager.VerifyPasswordResetTokenAsync(user, token);\r\n```\r\nUnfortunately, I only find this method: \r\n```csharp\r\nvar result = await UserManager.VerifyUserTokenAsync(user, \"tokenProvider\", \"ResetPassword\", token);\r\n```\r\nThis makes it confusing what to use as token provider and purpose strings. Allowing to use custom token providers and purposes seems like a good idea, but when just starting out, there should be a default implementation. \r\n"},{"Id":"6592435909","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:52:23","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1301","RelatedDescription":"Closed issue \"Trying to build rel/1.1.0 locally: 'TaskCache' is inaccessible due to its protection level\" (#1301) at aspnet/Identity","RelatedBody":"I've cloned this repository, opened Identity.sln in Visual Studio 2017 (Version 15.2 (26430.14) Release, pro edition, to be precise) and tried to compile, but it fails [here](https://github.com/aspnet/Identity/blob/rel/1.1.0/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L695) with the error `'TaskCache' is inaccessible due to its protection level.`.\r\n\r\nMy ultimate goal is to obtain debugging symbols so I can step into [ExternalLoginSignInAsync](https://github.com/aspnet/Identity/blob/rel/1.1.0/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L458) and figure out why my login attempt fails, but just activating Microsoft Symbol Servers and adding https://nuget.smbsrc.net to symbol sources didn't help, so I'm trying to add a source reference instead.\r\n\r\nHow can I get past these errors, so I can step through the method and see what's going on?"},{"Id":"6592433817","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:53","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1258","RelatedDescription":"Closed issue \"Setting Cookies.ApplicationCookie.Events from services.Configure<IdentityOptions> prevents security stamp validation from working\" (#1258) at aspnet/Identity","RelatedBody":"### Setting Cookies.ApplicationCookie.Events from services.Configure<IdentityOptions> prevents security stamp validation from working\r\n*setting events inside configure service disables security stamp validation check which is hard to spot*  \r\n\r\n### Functional impact\r\nDisables security stamp validation completely without any errors and it's hard to spot\r\n\r\n### Minimal repro steps\r\n1. Create project with identity in asp.net core 1.1.\r\n2.configure identity options.\r\n3. Add this segment:\r\n         `options.Cookies.ApplicationCookie.Events = new CookieAuthenticationEvents()\r\n                {\r\n                    OnRedirectToLogin = (context) =>\r\n                    {\r\n                          //Some code\r\n                          Task.FromTesult(0);\r\n                     }\r\n                   }`\r\nAnd to fix this problem you need to move events from configure identity options to app.UseCookieAuthentication\r\n### Expected result\r\nCustom event to excute without effecting security stamp validation\r\n\r\n### Actual result\r\nEvents code works but Security stamp validation stops working.\r\n\r\n### More details\r\n(https://stackoverflow.com/q/44284627/5895031)"},{"Id":"6592432570","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:35","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1210","RelatedDescription":"Closed issue \"Calling AddLoginAsync i get Ef Exception \" (#1210) at aspnet/Identity","RelatedBody":"Calling AddLoginAsync in ExternalLoginConfirmation i get this error.\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware[0]\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:       An unhandled exception has occurred: The instance of entity type 'IdentityUserLogin<string>' cannot be tracked because another instance of this type with the same key is already being tracked. When adding new entities, for most key types a unique temporary key value will be created if no key is set (i.e. if the key property is assigned the default value for its type). If you are explicitly setting key values for new entities, ensure they do not collide with existing entities or temporary values generated for other new entities. When attaching existing entities, ensure that only one entity instance with a given key value is attached to the context.\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]: System.InvalidOperationException: The instance of entity type 'IdentityUserLogin<string>' cannot be tracked because another instance of this type with the same key is already being tracked. When adding new entities, for most key types a unique temporary key value will be created if no key is set (i.e. if the key property is assigned the default value for its type). If you are explicitly setting key values for new entities, ensure they do not collide with existing entities or temporary values generated for other new entities. When attaching existing entities, ensure that only one entity instance with a given key value is attached to the context.\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at Microsoft.AspNetCore.Identity.UserManager`1.<AddLoginAsync>d__91.MoveNext()\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]: --- End of stack trace from previous location where exception was thrown ---\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\nMay 18 14:15:14 VM7sWb2 dotnet-example[26927]:    at EgritosGroup.Auth.Server.Controllers.AccountController.<ExternalLoginConfirmation>d__23.MoveNext() in C:\\Projects\\Org.Auth\\src\\src\\Org.Auth.Server\\Controllers\\AccountController.cs:line 364\r\n\r\n```\r\n\r\nmy code in line 364 is\r\n```\r\nresult = await _userManager.AddLoginAsync(user, info);\r\n```\r\n\r\n"},{"Id":"6592431364","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:18","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1209","RelatedDescription":"Closed issue \"proposal for Discussion on ASP.NET Identity Core 2.0\" (#1209) at aspnet/Identity","RelatedBody":"Hi @danroth27 et. al.,\r\nI thought extensively about ASP.NET Identity and how it should look like for the benefit of all. I also took into account the new Identity Service in 2.0, see https://github.com/aspnet/Identity/issues/1187, and I tried to see the whole picture from a certain distance to come to a conclusion that I want to share with you.\r\n\r\nWhat follows is the perspective of someone who is new to .Net (since one year) and who belongs to what could be qualified as a \"small dev team doing small apps\". I am not an IT professional developing apps for people but rather apps to the direct consumer. This category of devs is in my opinion quite big from the stats that I see on github and videos, and hence the ASP.NET Core + Xamarin + Azure team (hereafter AXA) could bet on such clients from a business perspective (e.g BizSpark).\r\n\r\n**The positive**\r\nLet me emphasize one thing before going into the negative critic; when you come from a different field (Fortran and quantum physics in my case = nothing to do with .Net) you look for the best solution among a broad range of solutions and I spent quite a few months testing the different programming languages and frameworks (python, javascript, C++, php, node etc) and reading about offerings (pricing, and capabilities such as scalability and pay-as-you-go solutions). This includes looking for the best host (Azure vs Amazon vs Firebase etc, vs on-premise even) together with the most universal capabilities (.Net Core, Xamarin), possibly strongly typed owing to my background and with the condition that I do not want to take care of the IT part of managing servers because this is a full-time job that requires a lot of experience. This is why AXA is the ideal choice, and in my opinion it should be the preferred choice for devs who have similar goals.\r\n\r\n**The negative**\r\nIn this scenario you want to have some start-up code but there are things you do not want to touch for security reasons (you lack experience), and this is the Identity part; namely storing users, authentication and authorization not mentioning the regulations such as GDPR https://en.wikipedia.org/wiki/General_Data_Protection_Regulation and similar in the US and elsewhere.\r\n\r\nI am ready to take the bet that sooner or later identity management will not be a configurable option  anymore (legally speaking), just in the same way as you do not configure your passport. Of course you could hire IT people in the security sector, but for start-ups that is not an immediate choice because you have other costs in the hosting and the running of your apps. \r\n\r\nAs of today, ASP.NET Core offers ASP.NET Identity with the possibility of social logins. In all honesty and for having worked on it for nearly 2 months it gives me a bitter taste of incompleteness. It sounds very unprofessional.\r\nOf course, every template has an end, but the bare minimum that every app-user expects is not even met and these are critical security issues.\r\n\r\nFor instance, the template allows you to send email confirmation, great, and password reset, super great, but the possibility to change the username and/or the email is just inexistent https://github.com/aspnet/Templates/issues/406 . Even twitter allows you to change your username ;).  It is a standard. Despite the greatness of Stackoverflow, a dev would and should feel uncertain that he is doing things properly, and the discussions there https://github.com/aspnet/Identity/issues/727 confirms it (see @brockallen 's answer and also his critic here https://vimeo.com/172009501 around 46 min). I do agree with him.\r\n\r\nI also agree with @shanselman and some devs on GitHub on the way registration is done, see https://mva.microsoft.com/en-US/training-courses/intermediate-aspnet-core-10-16964?l=cM8fKLmJD_4006218965 at 22min-23min . Here the problem is that a user could not login with his FB email because the account was already created in-app. The underlying missing feature is the ability to allow a user to associate an in-app account with a FB account when the user logs via FB for the first time. When he is prompted to associate the account, one can ask him to enter a password for his in-app account based upon the condition that the app user already exists. Currently, the message he gets \"`Username bob@contoso.com is already taken`\". We could make the template such that it says instead \"`Username bob@contoso.com is already taken. If you own this existing account,  enter your pwd`\". \r\nThis problem is a big one in my opinion for the app's popularity, because if you offer several logins methods (say FB, Google and local), a happy user logging in with say FB with bob@contoso.com may not remember which provider he used a month ago. So he might try out with Google, but with the same email bob@contoso.com or a local account. Today, he will be forced to choose another email account for association. This creates a useless micro-graph inside the graph of users, hence increasing database size, not mentioning the frustration for the user.\r\nAzure AD B2C has this problem, too, you can log on with the same email using different accounts and there is no solution as of today. To me, the credibility of ASP.NET Identity goes down here, despite the respect I have for any work done.\r\nI hope the negative aspects outlined above would trigger some discussion for improvements; I invite people to dump in further proposals or broaden the discussion here.\r\n\r\n**Proposal for an AXA template**\r\nThe above recommendations concerned ASP.NET Identity only. This new IdentityService in 2.0 includes OIDC to allow a dev to easily migrate to AADB2C, and as the discussion went on here https://github.com/aspnet/Identity/issues/1187 , it should enable easy integration of other open source Secure Token Services (Identity Server, OpenIdDict etc). In my opinion, what will be great, and in the spirit of the discussion above is to have an additional one-template Solution that has 2 or 3 projects:\r\n\r\n1) A Web App and/or API with ASP.NET identity\r\n\r\n2) A Xamarin (IOs, UWP, Droid) that would be a client talking securely to the app (e.g. a Todo list with an owner)\r\nAgain, the spirit is to provide a secure \"no touch solution\" template for what I believe is highly looked for.\r\n\r\n\r\n\r\n"},{"Id":"6592411678","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:46:26","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1184","RelatedDescription":"Closed issue \"IdentityServer 4 , ASP.NET Core- Custom User Manager?\" (#1184) at aspnet/Identity","RelatedBody":"Hello,\r\n\r\nI have a problem with my app workflow process. I need to build an ASP.NET Core with IdS4 where all my clients and users are managed through an external API. I need to validate users and sing them into the app only using the API. My question is : do I need to have a custom user manager and retrieve in it all the users for password validation or can I just use the api to validate the pass and sign them in?\r\n\r\nThank you"},{"Id":"6592369675","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:35:58","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1138","RelatedDescription":"Closed issue \"Security (Sample) - don't use UserId in ConfirmEmail href\" (#1138) at aspnet/Identity","RelatedBody":"When we want to confirm our email, the Post to ConfirmEmail is { userid, token }. This is in contrast to resetting a password, where the model is { email, token }. \r\n\r\nThe chain of events begins at successful registration, when the CallbackUrl is generated.\r\n\r\nThere doesn't seem anything to be gained by using the UserId directly. Since access is via a 'public' link sent to an email, it exposes a) whether the underlying store is int or guid based and b) provides a valid UserId which can be associated with the email it's been sent to.\r\n\r\nI suggest operating the same way as the Post to ForgotPassword, and use the email as the account identifier.\r\n\r\n\r\n"},{"Id":"6592366016","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:35:03","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1127","RelatedDescription":"Closed issue \"SignInManager.IsSignedIn does not handle exceptions from WindowsIdentity.get_AuthenticationType()\" (#1127) at aspnet/Identity","RelatedBody":"The WindowsIdentity.AuthenticationType property getter throws exceptions derived from LsaGetLogonSessionData failures.  This is unusual for a property getter, but one I'm not sure how they are going to fix since there doesn't seem to be a good response for AuthenticationType when the current process simply doesn't have access to the Lsa Logon Session Data. Ultimately I believe the DotNet/CoreFx/System.Security.Principal.Windows contributors need to figure out a different way to determine, or default, the AuthenticationType when LsaGetLogonSessionData fails.\r\n\r\n\r\n```\r\n        //\r\n        // Properties.\r\n        //\r\n        // this is defined 'override sealed' for back compat. Il generated is 'virtual final' and this needs to be the same.\r\n        public override sealed string AuthenticationType\r\n        {\r\n            get\r\n            {\r\n                // If this is an anonymous identity, return an empty string\r\n                if (_safeTokenHandle.IsInvalid)\r\n                    return String.Empty;\r\n\r\n                if (_authType == null)\r\n                {\r\n                    Interop.LUID authId = GetLogonAuthId(_safeTokenHandle);\r\n                    if (authId.LowPart == Interop.LuidOptions.ANONYMOUS_LOGON_LUID)\r\n                        return String.Empty; // no authentication, just return an empty string\r\n\r\n                    SafeLsaReturnBufferHandle pLogonSessionData = SafeLsaReturnBufferHandle.InvalidHandle;\r\n                    try\r\n                    {\r\n                        int status = Interop.SspiCli.LsaGetLogonSessionData(ref authId, ref pLogonSessionData);\r\n                        if (status < 0) // non-negative numbers indicate success\r\n----->                      throw GetExceptionFromNtStatus(status);\r\n\r\n                        pLogonSessionData.Initialize((uint)Marshal.SizeOf<Interop.SECURITY_LOGON_SESSION_DATA>());\r\n\r\n                        Interop.SECURITY_LOGON_SESSION_DATA logonSessionData = pLogonSessionData.Read<Interop.SECURITY_LOGON_SESSION_DATA>(0);\r\n                        return Marshal.PtrToStringUni(logonSessionData.AuthenticationPackage.Buffer);\r\n                    }\r\n                    finally\r\n                    {\r\n                        if (!pLogonSessionData.IsInvalid)\r\n                            pLogonSessionData.Dispose();\r\n                    }\r\n                }\r\n\r\n                return _authType;\r\n            }\r\n        }\r\n\r\n```\r\n\r\nUntil then, to work around this, I think SignInManager.IsSignedIn needs to check if a ClaimsIdentity is an instance of a WindowsIdentity and avoid the AuthenticationType property.  Either that or handle the exception gracefully, assuming that any ClaimsIdentity.AuthenticationType property getter could throw.\r\n\r\n```\r\n\r\n        public virtual bool IsSignedIn(ClaimsPrincipal principal)\r\n        {\r\n            if (principal == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(principal));\r\n            }\r\n            return principal?.Identities != null &&\r\n                principal.Identities.Any(i =>\r\n                    // Avoid calling AuthenticationType on WindowsIdentity \r\n                    ((i as WindowsIdentity) != null &&\r\n                        new string[]{ \"Kerberos\", \"NTLM\", \"Negotiate\", \"Windows Authentication\" }\r\n                            .Contains(Options.Cookies.ApplicationCookieAuthenticationScheme)\r\n                    ) ||\r\n                    (i as WindowsIdentity) == null && \r\n                        i.AuthenticationType == Options.Cookies.ApplicationCookieAuthenticationScheme);\r\n\r\n        }\r\n\r\n```\r\n\r\nThe suggested change is a blunt instrument to deal with a problem that shouldn't have been there in the first place, but I attempt to honor the ApplicationCookieAuthenticationScheme comparison by supplying possible values for AuthenticationType when using Windows Authentication on IIS.  It's possible that the ApplicationCookieAuthenticationScheme should never be set to any of the values used by Windows Authentication in which case the left side of the OR expression can be dropped entirely in favor of the right side, unless you think its better to simply handle the exception and move on."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6594034457","Type":"IssuesEvent","CreatedAt":"2017-09-15T05:48:09","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2063","RelatedDescription":"Closed issue \"RFC 8187 - Character Encoding for Headers\" (#2063) at aspnet/KestrelHttpServer","RelatedBody":"Hot off the presses (September 2017) https://tools.ietf.org/html/rfc8187\r\n\r\nIndicating Character Encoding and Language for HTTP Header Field Parameters\r\n\r\n/cc @Tratcher @blowdart @halter73 "},{"Id":"6593931093","Type":"IssuesEvent","CreatedAt":"2017-09-15T04:57:23","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2063","RelatedDescription":"Opened issue \"RFC 8187 - Character Encoding for Headers\" (#2063) at aspnet/KestrelHttpServer","RelatedBody":"Hot off the presses (September 2017) https://tools.ietf.org/html/rfc8187\r\n\r\nIndicating Character Encoding and Language for HTTP Header Field Parameters"},{"Id":"6593365800","Type":"IssuesEvent","CreatedAt":"2017-09-15T00:36:09","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2017","RelatedDescription":"Closed issue \"Merge code paths duplicated between HTTP/1.1 and HTTP/2\" (#2017) at aspnet/KestrelHttpServer","RelatedBody":"The initial HTTP/2 implementation contains a lot of duplicated code from the existing HTTP/1.1 stuff. That duplication should be eliminated so we can share as much code as possible between the two protocol implementations."},{"Id":"6593365410","Type":"PullRequestEvent","CreatedAt":"2017-09-15T00:35:58","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2041","RelatedDescription":"Merged pull request \"Merge code paths duplicated between HTTP/1.x and HTTP/2 implementations (#2017)\" (#2041) at aspnet/KestrelHttpServer","RelatedBody":"#2017\r\n\r\n## A note on naming\r\n\r\nI'm intentionally not renaming things now, so they look a bit off. I'm planning on doing some renames after addressing feedback (see below).\r\n\r\n## Summary\r\n\r\nThis change makes `Frame` the base class for the HTTP/1.1 and HTTP/2 implementations.\r\n\r\nThe HTTP/1.x-specific code in `Frame` is in a subclass called `Http1Frame` (so now `Frame<T>` subclasses `Http1Frame`).\r\n\r\n`Http2Stream` is a subclass of `Frame`.\r\n\r\n`Frame` exposes a few more abstract properties and methods that must be implemented by protocol-specific classes.\r\n\r\nProducing HTTP/1.1 and HTTP/2 output is done via the same interface (`IHttpOutputProducer`), which `OutputProducer` and `Http2OutputProducer` implement.\r\n\r\n## Things I'm not crazy about\r\n\r\n1) Multiple `.FeatureCollection.cs` files. I think the ideal would be to have a single one (`Frame.FeatureCollection.cs`). It would implement HTTP/1.1 and HTTP/2-specific features (upgrade and stream ID, respectively), but those could be nulled out in `OnReset()` where they're not supposed to be implemented. What do you guys think?\r\n\r\n1) The way `Frame.Output` is instantiated by each subclass. It's all internal but ugly still. What do you guys think of moving it to `IHttpProtocolContext` i.e. have it passed to `Frame` instead of instantiated by it?\r\n\r\n1) Protected member variables. They were already there, but now they're uglier IMO because some are not accessed by a direct subclass of `Frame` (e.g. `Frame<T>` accesses `Frame._applicationException`).\r\n\r\n## Planned renames\r\n\r\n* `Frame` -> `HttpProtocol` (I wanted to name it `HttpStream` but @davidfowl didn't like that)\r\n* `FrameAdapter` -> `Http1FrameAdapter`\r\n* `IFrameControl` -> `IHttpResponseControl`\r\n* `FrameRequestStream` -> `HttpRequestStream`\r\n* `FrameResponseStream` -> `HttpResponseStream`\r\n* `FrameRequestHeaders` -> `HttpRequestHeaders`\r\n* `FrameResponseHeaders` -> `HttpResponseHeaders`\r\n* `FrameConnection` -> `HttpConnection`\r\n* `OutputProducer` -> `Http1OutputProducer`\r\n\r\nI believe these would be better done as part of the Bedrock refactoring:\r\n\r\n* `FrameConnectionManager` -> `ConnectionManager` or `HttpConnectionManager` (if HTTP-specific)\r\n* `FrameHeartbeatManager` -> `HeartbeatManager` or `HttpHeartbeatManager` (if HTTP-specific)"},{"Id":"6593273796","Type":"PullRequestEvent","CreatedAt":"2017-09-14T23:55:45","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2062","RelatedDescription":"Merged pull request \"Add tracing to KeepAliveTimeoutTests.ConnectionKeptAliveBetweenRequests to investigate test failures\" (#2062) at aspnet/KestrelHttpServer","RelatedBody":"See #1684."},{"Id":"6592896395","Type":"PullRequestEvent","CreatedAt":"2017-09-14T21:44:09","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2062","RelatedDescription":"Opened pull request \"Add tracing to KeepAliveTimeoutTests.ConnectionKeptAliveBetweenRequests to investigate test failures\" (#2062) at aspnet/KestrelHttpServer","RelatedBody":"See #1684."},{"Id":"6591097710","Type":"IssuesEvent","CreatedAt":"2017-09-14T14:58:40","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2061","RelatedDescription":"Closed issue \"404 for static files with names starting with dots\" (#2061) at aspnet/KestrelHttpServer","RelatedBody":"Kestrel return 404 for static files which names starting with dot (\".\").\r\nLike `http://localhost:5000/client/lib/interop/.interop.types.js`\r\nRequest for such files don't reach asp.net. I checked it via `OnPrepareResponse` handler for StaticFileMiddleware's options:\r\n```\r\n\tapp.UseStaticFiles(new StaticFileOptions\r\n\t{\r\n\t\tOnPrepareResponse = ctx =>\r\n\t\t{\r\n\t\t\tvar f = ctx.File;\r\n\t\t\tif (f.Name.StartsWith(\".\"))\r\n\t\t\t{\r\n\t\t\t\tDebugger.Break(); // we won't get here\r\n\t\t\t}\r\n\t\t},\r\n\t\tServeUnknownFileTypes = true\r\n\t});\r\n```\r\n\r\nIs there any workaround for the issue?"},{"Id":"6590958539","Type":"IssuesEvent","CreatedAt":"2017-09-14T14:33:59","Actor":"evil-shrike","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2061","RelatedDescription":"Opened issue \"404 for static files with names starting with dots\" (#2061) at aspnet/KestrelHttpServer","RelatedBody":"Kestrel return 404 for static files which names starting with dot (\".\").\r\nLike `http://localhost:5000/client/lib/interop/.interop.types.js`\r\nRequest for such files don't reach asp.net. I checked it via `OnPrepareResponse` handler for StaticFileMiddleware's options:\r\n```\r\n\t\t\tapp.UseStaticFiles(new StaticFileOptions\r\n\t\t\t{\r\n\t\t\t\tOnPrepareResponse = ctx =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar f = ctx.File;\r\n\t\t\t\t\tif (f.Name.StartsWith(\".\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDebugger.Break(); // we won't get here\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tServeUnknownFileTypes = true\r\n\t\t\t});\r\n```\r\n\r\nIs there any workaround for the issue?"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6597496287","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:28:28","Actor":"fmdufour","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1686","RelatedDescription":"Opened issue \"Error: Invalid name for a preprocessing symbol; '' is not a valid identifier\" (#1686) at aspnet/Razor","RelatedBody":"I have recently migrated from ASP.NET Core 1.1.X to ASP.NET Core 2,  when I run my app locally everything works just fine, but when running on Azure App Service I receive the following error on Razor Compilation:\r\n\r\n**An error occurred during the compilation of a resource required to process this request. Please review the following specific error details and modify your source code appropriately.**\r\n\r\nInvalid name for a preprocessing symbol; '' is not a valid identifier\r\n\r\nI tried to find a solution but couldn't find any,\r\nCan anyone help?\r\n\r\nThank you"},{"Id":"6597056341","Type":"IssuesEvent","CreatedAt":"2017-09-15T18:32:35","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1684","RelatedDescription":"Closed issue \"CompletionProvider causes VS crash in interactive window scenarios\" (#1684) at aspnet/Razor","RelatedBody":"See: https://github.com/dotnet/roslyn/issues/22128\r\n\r\nWe're missing a null check. The `context.Document.FilePath` will be null in some cases like interactive windows. We need to null-check everything we need to gracefully no-op."},{"Id":"6597056328","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:32:35","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1685","RelatedDescription":"Merged pull request \"Fix #1684 - CompletionProvider null ref\" (#1685) at aspnet/Razor","RelatedBody":"The CompletionProvider will be called in cases where the document\r\ndoesn't have a FilePath - such as the C# interactive window. This is\r\ncausing a null ref."},{"Id":"6597036369","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:27:40","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1685","RelatedDescription":"Opened pull request \"Fix #1684 - CompletionProvider null ref\" (#1685) at aspnet/Razor","RelatedBody":"The CompletionProvider will be called in cases where the document\r\ndoesn't have a FilePath - such as the C# interactive window. This is\r\ncausing a null ref."},{"Id":"6597015744","Type":"IssuesEvent","CreatedAt":"2017-09-15T18:22:41","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1684","RelatedDescription":"Opened issue \"CompletionProvider causes VS crash in interactive window scenarios\" (#1684) at aspnet/Razor","RelatedBody":"See: https://github.com/dotnet/roslyn/issues/22128\r\n\r\nWe're missing a null check. The `context.Document.FilePath` will be null in some cases like interactive windows. We need to null-check everything we need to gracefully no-op."},{"Id":"6593612059","Type":"PullRequestEvent","CreatedAt":"2017-09-15T02:27:43","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1683","RelatedDescription":"Opened pull request \"Added version support to Razor parser\" (#1683) at aspnet/Razor","RelatedBody":"#1678 \r\n\r\n@rynowak \r\n\r\n- Added `Version` property to `RazorParserOptions`\r\n- Added an internal `RazorParserFeatureContext` that contains a flag for all features we want to enable/disable in the parser\r\n- Reason for having a centralized location is so we don't have to look at the version every time we want to decide whether to light-up a feature\r\n- I'll send a separate PR that will use `AllowMinimizedBooleanTagHelperAttributes` to enable/disable that feature."},{"Id":"6592286773","Type":"PullRequestEvent","CreatedAt":"2017-09-14T19:14:56","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1681","RelatedDescription":"Merged pull request \"Change notifications for the project manager\" (#1681) at aspnet/Razor","RelatedBody":"There's still nothing processing the notifications in the background.\r\nThis is all the plumbing for dirty checking and publishing updates."},{"Id":"6592194668","Type":"IssuesEvent","CreatedAt":"2017-09-14T18:52:27","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1682","RelatedDescription":"Closed issue \"\"li\" element was not closed.  All elements must be either self-closing or have a matching end tag.\" (#1682) at aspnet/Razor","RelatedBody":"```@foreach (var item in contentlist)\r\n{\r\n        \t<li><a href=\"#\">\r\n                    <i></i><font>@(item.Name)</font>\r\n        \t    <span>@item.UpdateTime.ToString(\"yyyy-MM-dd\")</span></a>\r\n               </li>\r\n}\r\n\r\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException: One or more compilation failures occurred:\r\nindex.cshtml(162,11): Error RZ9999: The \"li\" element was not closed.  All elements must be either self-closing or have a matching end tag.\r\nindex.cshtml(162,164): Error RZ9999: Encountered end tag \"a\" with no matching start tag.  Are your start/end tags properly balanced?\r\nindex.cshtml(162,168): Error RZ9999: Encountered end tag \"li\" with no matching start tag.  Are your start/end tags properly balanced?\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CreateCacheEntry(String normalizedPath)```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6585749309","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:57:15","Actor":"davidfowl","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Closed issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6585739204","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:55:30","Actor":"jsdmitry","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Opened issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6504000070","Type":"IssuesEvent","CreatedAt":"2017-08-23T19:03:38","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/269","RelatedDescription":"Opened issue \"ExpandoObjectAdapter does not assume case insensitivity\" (#269) at aspnet/Announcements","RelatedBody":"When applying a json patch to `ExpandoObject`s, case insensitive search will not be used to match the path segment to the object's dictionary keys. Instead, the path segment will be resolved using the `NamingStrategy` defined in the `IContractResolver`.\r\n\r\nAddresses https://github.com/aspnet/JsonPatch/issues/102\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/103 for discussion\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"906146139933638658","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"aspnet","Text":"Getting Started with Windows Containers https://t.co/8twiZLlB5H","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":25,"RawContent":null},{"Id":"897126323298209792","CreatedAt":"2017-08-14T16:02:37+00:00","UserScreenname":"aspnet","Text":"Announcing ASPNet Core 2.0 - https://t.co/5RTzwS9Ym2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":196,"FavoriteCount":158,"RawContent":null},{"Id":"877222209667960834","CreatedAt":"2017-06-20T17:50:47+00:00","UserScreenname":"aspnet","Text":"Check out the latest Code Conversation episode where @LadyNaggaga chats with @BaggaJaspreet about ASPNet Core TagHe… https://t.co/xeyH9UaAso","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2017-09-15T21:10:54.4251435Z","RunDurationInMilliseconds":7201}