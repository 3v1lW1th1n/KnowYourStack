{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore CosmosDB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7517555042","Type":"IssuesEvent","CreatedAt":"2018-04-12T04:19:03","Actor":"316181444","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17525","RelatedDescription":"Opened issue \"[Question] Give a timeout to async socket on .net core (linux)\" (#17525) at dotnet/coreclr","RelatedBody":"How set a timeout for Socket.ConnectAsync, Socket.SendAsync, Socket.ReceveAsync APIs?\r\n\r\nThanks."},{"Id":"7517504979","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:59:00","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17524","RelatedDescription":"Opened pull request \"Avoid creating illegal byref pointers\" (#17524) at dotnet/coreclr","RelatedBody":"Byref pointers need to point within their \"host\" object -- thus\r\nthe alternate name \"interior pointers\". If the JIT creates and\r\nreports a pointer as a \"byref\", but it points outside the host\r\nobject, and a GC occurs that moves the host object, the byref\r\npointer will not be updated. If a subsequent calculation puts\r\nthe byref \"back\" into the host object, it will actually be pointing\r\nto garbage, since the host object has moved.\r\n\r\nThis occurred on ARM with array index calculations, in particular\r\nbecause ARM doesn't have a single-instruction \"base + scale*index + offset\"\r\naddressing mode. Thus, we were generating, for the jaggedarr_cs_do\r\ntest case, `ProcessJagged3DArray()` function:\r\n```\r\n// r0 = array object, r6 = computed index offset. We mark r4 as a byref.\r\nadd r4, r0, r6\r\n\r\n// r4 - 32 is the offset of the object we care about. Then we load the array element.\r\n// In this case, the loaded element is a gcref, so r4 becomes a gcref.\r\nldr r4, [r4-32]\r\n```\r\nWe get this math because the user code uses `a[i - 10]`, which is\r\nessentially `a + (i - 10) * 4 + 8` for element size 4. This is optimized\r\nto `a + i * 4 - 32`. In the above code, `r6` is `i * 4`. In this case,\r\nafter the first instruction, `r4` can point beyond the array.\r\nIf a GC happens, `r4` isn't updated, and the second instruction loads garbage.\r\n\r\nThere are two fixes:\r\n1. Change array morphing in `fgMorphArrayIndex()` to rearrange the array index\r\nIR node creation to only create a byref pointer that is precise, and no \"intermediate\"\r\nbyref pointers that don't represent the actual array element address being\r\ncomputed.\r\n2. Change `fgMoveOpsLeft()` to prevent the left-weighted reassociation optimization\r\n`[byref]+ (ref, [int]+ (int, int)) => [byref]+ ([byref]+ (ref, int), int)`. This\r\noptimization creates \"incorrect\" byrefs that don't necessarily point within\r\nthe host object.\r\n\r\nThese fixes are all-platform.\r\n\r\nFixes #17517.\r\n\r\nThere are many, many diffs. They, perhaps surprisingly, overwhelmingly positive.\r\n\r\nFor AMD64 SuperPMI, the diffs are a 7.6% size win for 5194 functions! This\r\nappears to be due to less code cloning, and sometimes better optimization.\r\n\r\nFor ARM32 ngen-based desktop asm diffs, it is a 0.30% improvement across all\r\nframework assemblies. A lot of the diffs seem to be because we CSE the entire\r\narray address offset expression, not just the index expression."},{"Id":"7517092333","Type":"PullRequestEvent","CreatedAt":"2018-04-12T01:33:47","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17523","RelatedDescription":"Opened pull request \"WIP Fix random Segfaults on Ubuntu arm\" (#17523) at dotnet/coreclr","RelatedBody":"Fixes #17449 #16963\r\n\r\n/cc @sandreenko"},{"Id":"7516961127","Type":"PullRequestEvent","CreatedAt":"2018-04-12T00:46:31","Actor":"adiaaida","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17520","RelatedDescription":"Merged pull request \"Reenable Perf Correctness smoketest\" (#17520) at dotnet/coreclr","RelatedBody":""},{"Id":"7516940946","Type":"IssuesEvent","CreatedAt":"2018-04-12T00:38:57","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17435","RelatedDescription":"Closed issue \"Codegen issue with SSE2.Store interactions\" (#17435) at dotnet/coreclr","RelatedBody":"We found this issue on some of our code and managed to create a synthetic repro. The error happens because Sse2.Store does not invalidate the values already at the registers.\r\n\r\nThis method should return (3,6) but on release mode it returns (3,3). \r\n```csharp\r\nstatic unsafe void Main(string[] args)\r\n{\r\n            (uint a, uint b) = XXHash32.Repro();\r\n            Console.WriteLine($\"{a}, {b}\");\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\npublic static (uint, uint) Repro()\r\n{\r\n            uint* a = stackalloc uint[4];\r\n            a[0] = 1;\r\n            a[1] = 1;\r\n            a[2] = 1;\r\n            a[3] = 1;\r\n\r\n            // Here we force populate the registers\r\n            var b = a[0];\r\n            var h = a[3];\r\n            var c = a[1];\r\n            \r\n            // We operate the values in xmm0\r\n            Vector128<uint> v = Sse2.LoadVector128(a);\r\n            v = Sse2.Add(v, v);\r\n            // We send to the memory the modified values\r\n            Sse2.Store(a, v);\r\n\r\n            // We return both sums (from registers and from memory)\r\n            return (b + h + c, a[0]+a[1]+a[3]);\r\n}\r\n```\r\nOn debug the behavior is correct because it is forced to get it from the memory location. We tested on 2.1.0-preview3-26404-01 \r\n\r\ncc @fiigii @tannergooding \r\nLooping in @karelz because of ZBB"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7517723328","Type":"PullRequestEvent","CreatedAt":"2018-04-12T05:23:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9058","RelatedDescription":"Opened pull request \"Update SDK to 2.1.200-preview-62812-03\" (#9058) at dotnet/cli","RelatedBody":""},{"Id":"7517709799","Type":"PullRequestEvent","CreatedAt":"2018-04-12T05:19:17","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9057","RelatedDescription":"Opened pull request \"Update coresetup, coresetup, coresetup to preview3-26412-01, preview3-26412-01, preview3-26412-01, respectively (master)\" (#9057) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7517081053","Type":"IssuesEvent","CreatedAt":"2018-04-12T01:29:58","Actor":"sebastienros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9056","RelatedDescription":"Opened issue \"dotnet-install resulting in empty folder\" (#9056) at dotnet/cli","RelatedBody":"As shown on these commands, I install two versions of the SDK, which are returning successfully.\r\nIt's running inside the 2.0-sdk docker image.\r\n\r\n```\r\n[01:12:26.361] [/tmp/tmpU0WVsd.tmp/bzby4w1s.cfa/buildtools] /usr/bin/env bash dotnet-install.sh --channel Current\r\n[01:12:26.941] dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.101/dotnet-sdk-2.1.101-linux-x64.tar.gz\r\n[01:13:19.398] dotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.101/dotnet-sdk-2.1.101-linux-x64.tar.gz\r\n[01:13:24.811] dotnet-install: Adding to current process PATH: `/tmp/tmpU0WVsd.tmp/w5jlcmmt.dbj`. Note: This change will be visible only when sourcing script.\r\n[01:13:24.811] dotnet-install: Installation finished successfully.\r\n[01:13:24.813]\r\n[01:13:24.813]\r\n[01:13:24.899] [/tmp/tmpU0WVsd.tmp/bzby4w1s.cfa/buildtools] /usr/bin/env bash dotnet-install.sh --version 2.1.300-preview2-008367\r\n[01:13:24.953] dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300-preview2-008367/dotnet-sdk-2.1.300-preview2-008367-linux-x64.tar.gz\r\n[01:14:07.647] dotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300-preview2-008367/dotnet-sdk-2.1.300-preview2-008367-linux-x64.tar.gz\r\n[01:14:10.785] dotnet-install: Adding to current process PATH: `/tmp/tmpU0WVsd.tmp/w5jlcmmt.dbj`. Note: This change will be visible only when sourcing script.\r\n[01:14:10.785] dotnet-install: Installation finished successfully.\r\n```\r\n\r\nBut the folder for the second command is actually empty:\r\n\r\n```\r\n$ ls /mnt/tmpU0WVsd.tmp/w5jlcmmt.dbj/sdk\r\n2.1.101  2.1.300-preview2-008367\r\n\r\n$ ls /mnt/tmpU0WVsd.tmp/w5jlcmmt.dbj/sdk/2.1.300-preview2-008367/\r\nDotnetTools\r\n```\r\n\r\nI verified the disk space and there is plenty.\r\nThe script is downloaded directly from ` https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh`\r\nIt happens on two different Azure VM, with Ubuntu 16.04.\r\n"},{"Id":"7516985226","Type":"PullRequestEvent","CreatedAt":"2018-04-12T00:55:37","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9020","RelatedDescription":"Merged pull request \"LOC CHECKIN | dotnet/cli master | 20180409\" (#9020) at dotnet/cli","RelatedBody":null},{"Id":"7516791877","Type":"PullRequestEvent","CreatedAt":"2018-04-11T23:48:22","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9053","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-rtm.5081 into cli\" (#9053) at dotnet/cli","RelatedBody":"Cherry-picked from #9040"},{"Id":"7516743624","Type":"PullRequestEvent","CreatedAt":"2018-04-11T23:33:24","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9055","RelatedDescription":"Opened pull request \"Update dotnet/sdk to latest from release/2.1.3xx\" (#9055) at dotnet/cli","RelatedBody":"Includes the fix for dotnet/sdk#2128\r\n"},{"Id":"7516552551","Type":"IssuesEvent","CreatedAt":"2018-04-11T22:35:45","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8964","RelatedDescription":"Closed issue \"Right bracket is missing in text when tool installation succeed with SC language \" (#8964) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Install global tool on windows with SC language\r\n\r\n## Expected  behavior\r\nAll the text is translated and displayed normally\r\n\r\n## Actual behavior\r\nRight bracket is missing in text when tool installation succeed\r\n![image](https://user-images.githubusercontent.com/1578239/38190747-3c218032-3698-11e8-9183-a6628595d9d3.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.1.300-preview2-008510\r\n Commit:    abcdeba455\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008510\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26330-03\r\n  Commit:  632536fb4b\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008510 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30520 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30520 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26330-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7516522634","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:27:36","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9047","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#9047) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7516160437","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:04:40","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9007","RelatedDescription":"Closed issue \"dotnet-install.sh installs linux-x64, not linux-arm, on an arm32v7 machine\" (#9007) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a Dockerfile\r\n```Dockerfile\r\nFROM arm32v7/buildpack-deps:bionic-scm\r\n\r\n# Install .NET CLI dependencies\r\nRUN apt-get update \\\r\n    && apt-get install -y --no-install-recommends \\\r\n        libc6 \\\r\n        libcurl4 \\\r\n        libgcc1 \\\r\n        libgssapi-krb5-2 \\\r\n        libicu60 \\\r\n        liblttng-ust0 \\\r\n        libssl1.0.0 \\\r\n        libstdc++6 \\\r\n        libunwind8 \\\r\n        zlib1g \\\r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\nRUN curl https://dot.net/v1/dotnet-install.sh | bash -s - --version 2.1.300-preview2-008528  --install-dir ~/.dotnet\r\n```\r\nExecute `docker build . -t test`\r\n\r\n## Expected  behavior\r\nDownloads https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300-preview2-008528/dotnet-sdk-2.1.300-preview2-008528-linux-arm.tar.gz\r\n\r\n## Actual behavior\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300-preview2-008528/dotnet-sdk-2.1.300-preview2-008528-linux-x64.tar.gz\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7516144491","Type":"PullRequestEvent","CreatedAt":"2018-04-11T21:01:27","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9053","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-rtm.5081 into cli\" (#9053) at dotnet/cli","RelatedBody":"Cherry-picked from #9040"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7516946311","Type":"PullRequestEvent","CreatedAt":"2018-04-12T00:40:56","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/700","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02711-02 (master)\" (#700) at dotnet/standard","RelatedBody":""},{"Id":"7514495259","Type":"IssuesEvent","CreatedAt":"2018-04-11T15:51:18","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/706","RelatedDescription":"Closed issue \"Failed assembly resolution in XAML workflow projects\" (#706) at dotnet/standard","RelatedBody":"**Situation:**\r\n* using VS 15.6.5\r\n* a net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* the net461 project refers directly to a netstandard2.0 NuGet package or refers to a net461 NuGet package that has references to netstandard projects, ie. it's a mixed environment\r\n  * indirect: Microsoft.Orleans.Core v1.5.3 (net461 project)\r\n  * direct: Orleans.Activities v0.4.0, Abp v3.4.0 (netstandard2.0 projects)\r\n\r\n**Problem:**\r\n* build warnings, that some (quite random) .dll-s has an incorrect format\r\n* it's only a warning, but the application really fails with `System.NotSupportedException: Expression Activity type 'CSharpValue'1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\r\n\r\nIn case of referring to Orleans.Activities NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.reflection.typeextensions\\4.4.0\\ref\\net461\\System.Reflection.TypeExtensions.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Reflection.TypeExtensions, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Microsoft.Orleans.Core NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Abp NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.4.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Runtime.CompilerServices.Unsafe, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\n**Repros:**\r\n* see [developer community problem](https://developercommunity.visualstudio.com/content/problem/202765/failed-assembly-resolution-in-xaml-workflow-projec.html) though nobody cares about these reports...\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n  * **NOTE:** If you want to run the solution,\r\n    * there is another error #704, before running it, copy a netfx.force.conflicts.dll to the `Arithmetical.DevSiloHost` output dir\r\n    * first start manually `Arithmetical.DevSiloHost` wait 5s to start up, then start manually `Arithmetical.DevClusterClient`!\r\n\r\nreferring #704 #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"},{"Id":"7514317727","Type":"IssuesEvent","CreatedAt":"2018-04-11T15:23:43","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/704","RelatedDescription":"Closed issue \"Missing netfx.force.conflicts.dll problem, again\" (#704) at dotnet/standard","RelatedBody":"**Situation:**\r\n* a net461 project refers to a netstandard2.0 NuGet package\r\n* the net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* using VS 15.6.5\r\n\r\n**Problem:**\r\n* the XAML codegen adds a reference to netfx.force.conflicts: `assemblyList.Add(Load(\"netfx.force.conflicts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"));`\r\n* but this .dll is not copied to the output directory\r\n* it causes exception: `System.IO.FileNotFoundException: Could not load file or assembly 'netfx.force.conflicts, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.`\r\n\r\n**Workaround:**\r\n* manually copying a netfx.force.conflicts.dll to the output solves the problem, the app runs\r\n* I don't know whether this .dll necessary at runtime at all, maybe generating `assemblyList.Add(Load(\"netfx.force.conflicts...` is unnecessary\r\n\r\n**Repro:**\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n* **NOTE:** If you want to run the solution, first start manually `HelloWorld.DevSiloHost` wait 5s to start up, then start manually `HelloWorld.DevClusterClient`!\r\n\r\nreferring #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"},{"Id":"7507355727","Type":"IssuesEvent","CreatedAt":"2018-04-10T14:19:36","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/706","RelatedDescription":"Opened issue \"Failed assembly resolution in XAML workflow projects\" (#706) at dotnet/standard","RelatedBody":"**Situation:**\r\n* using VS 15.6.5\r\n* a net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* the net461 project refers directly to a netstandard2.0 NuGet package or refers to a net461 NuGet package that has references to netstandard projects, ie. it's a mixed environment\r\n  * indirect: Microsoft.Orleans.Core v1.5.3 (net461 project)\r\n  * direct: Orleans.Activities v0.4.0, Abp v3.4.0 (netstandard2.0 projects)\r\n\r\n**Problem:**\r\n* build warnings, that some (quite random) .dll-s has an incorrect format\r\n* it's only a warning, but the application really fails with `System.NotSupportedException: Expression Activity type 'CSharpValue'1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\r\n\r\nIn case of referring to Orleans.Activities NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.reflection.typeextensions\\4.4.0\\ref\\net461\\System.Reflection.TypeExtensions.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Reflection.TypeExtensions, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Microsoft.Orleans.Core NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Abp NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.4.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Runtime.CompilerServices.Unsafe, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\n**Repros:**\r\n* see [developer community problem](https://developercommunity.visualstudio.com/content/problem/202765/failed-assembly-resolution-in-xaml-workflow-projec.html) though nobody cares about these reports...\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml](https://github.com/lmagyar/Orleans.Activities/tree/samples-xaml) or [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n  * **NOTE:** If you want to run the solution,\r\n    * there is another error #704, before running it, copy a netfx.force.conflicts.dll to the `Arithmetical.DevSiloHost` output dir\r\n    * first start manually `Arithmetical.DevSiloHost` wait 5s to start up, then start manually `Arithmetical.DevClusterClient`!\r\n\r\nreferring #704 #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"},{"Id":"7506696885","Type":"IssuesEvent","CreatedAt":"2018-04-10T12:32:41","Actor":"Tachionstrahl","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/705","RelatedDescription":"Opened issue \"System.Web.HttpUtility.HtmlDecode can't decode &hairsp;\" (#705) at dotnet/standard","RelatedBody":"Hello,\r\ni have a problem with the HtmlDecode Method of System.Web.HttpUtility:\r\nIt can't decode the \"&hairsp;\" Entity. I was wondering if there is a reason for it, because it's defined by the w3.org ([](https://www.w3.org/TR/WD-math-970710/fnewtable05.html))\r\n\r\nGreetings from Germany,\r\nTachionstrahl"},{"Id":"7506611689","Type":"IssuesEvent","CreatedAt":"2018-04-10T12:16:29","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/704","RelatedDescription":"Opened issue \"Missing netfx.force.conflicts.dll problem, again\" (#704) at dotnet/standard","RelatedBody":"**Situation:**\r\n* a net461 project refers to a netstandard2.0 NuGet package\r\n* the net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* using VS 15.6.5\r\n\r\n**Problem:**\r\n* the XAML codegen adds a reference to netfx.force.conflicts: `assemblyList.Add(Load(\"netfx.force.conflicts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"));`\r\n* but this .dll is not copied to the output directory\r\n* it causes exception: `System.IO.FileNotFoundException: Could not load file or assembly 'netfx.force.conflicts, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.`\r\n\r\n**Workaround:**\r\n* manually copying a netfx.force.conflicts.dll to the output solves the problem, the app runs\r\n* I don't know whether this .dll necessary at runtime at all, maybe generating `assemblyList.Add(Load(\"netfx.force.conflicts...` is unnecessary\r\n\r\n**Repro:**\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml](https://github.com/lmagyar/Orleans.Activities/tree/samples-xaml)\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n* **NOTE:** If you want to run the solution, first start manually `HelloWorld.DevSiloHost` wait 5s to start up, then start manually `HelloWorld.DevClusterClient`!\r\n\r\nreferring #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7517537325","Type":"IssuesEvent","CreatedAt":"2018-04-12T04:11:41","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26894","RelatedDescription":"Closed issue \"Cleanup after removal of MemoryExtensions As* api.\" (#26894) at dotnet/corefx","RelatedBody":"In the Framework, there are many types that can be converted into ```Span<T>```, ```ReadOnlySpan```, ```Memory<T>```, and ```ReadOnlyMemory<T>``` (a.k.a. _slice types_). \r\n\r\nThe conversions are implemented as: \r\n\r\n* constructors of _slice types_, e.g. ```Span<T>``` ctor taking ```T[]``` parameter\r\n* cast operators from source type to _slice type_, e.g. ```implicit operator Memory<T> (T[] array)```\r\n* ```As<slice_type>``` extensions methods, e.g. ```static ReadOnlySpan<char> AsReadOnlySpan(this string text)```\r\n\r\nUnfortunately, the set of these conversions is not very consistent. For example, ```AsReadOnlySpan``` method converting strings to ```ReadOnlySpan<char>``` has three overloads:\r\n```c#\r\npublic static System.ReadOnlySpan<char> AsReadOnlySpan(this string text);\r\npublic static System.ReadOnlySpan<char> AsReadOnlySpan(this string text, int start);\r\npublic static System.ReadOnlySpan<char> AsReadOnlySpan(this string text, int start, int length);\r\n```\r\nBut logically equivalent ```T[]``` to ```Span<T>``` conversion method has only one overload:\r\n```c#\r\npublic static System.Span<T> AsSpan<T>(this T[] array) { throw null; }\r\n```\r\n\r\nThis means string can be sliced using the following code:\r\n```c#\r\nvar slice = str.AsReadOnlySpan(5, 10);\r\n```\r\n... but to slice an array, developers have to write:\r\n```c#\r\nvar slice = arr.AsSpan().Slice(5, 10);\r\n```\r\nThis proposal outlines guidelines we could adopt to make the APIs more consistent and easier to use:\r\n\r\n1. Always provide three overloads of As<slice_type> extension or instance methods. Such extension method will be the main conversion API (i.e. other conversions like ctors and casts are just icing on the cake).\r\n```c#\r\npublic static <slice_type> As<slice_type>(this <source_type> value) ;\r\npublic static <slice_type> As<slice_type>(this <source_type> value, int start);\r\npublic static <slice_type> As<slice_type>(this <source_type> value, int start, int length);\r\n```\r\n2. If a type can be converted to both heapable slices and by-ref slices, provide extension methods for both.\r\n```c#\r\npublic static Span<T> AsSpan(this T[] value) ;\r\npublic static Span<T> AsSpan(this T[] value, int start);\r\npublic static Span<T> AsSpan(this T[] value, int start, int length);\r\npublic static Memory<T> AsMemory(this T[] value) ;\r\npublic static Memory<T> AsMemory(this T[] value, int start);\r\npublic static Memory<T> AsMemory(this T[] value, int start, int length);\r\n```\r\n\r\n3. Do not provide conversions to both read-only and read/write slice types. e.g T[] will have conversions to only ``Span<T>``` and ```Memory<T>```, not to ```ReadOnlySpan<T>``` or ```ReadOnlyMemory<T>```. Slice types provide cast from r/w versions to read-only versions.\r\n\r\n4. Do provide implicit casts between types if appropriate.\r\n\r\nNot sure if we want, but we should discuss:\r\n\r\n5. Limit constructors to the longest (most flexible) overload.\r\n\r\n6. Provide ```AsReadOnly()`` methods on r/w/ slice types.\r\n\r\n7. Skip ```ReadOnly``` from conversion method names if the source type is already read-only. For example, string can be converted only to ```ReadOnlySpan<char>``` and so the ```As<slice_type>``` method should be called ```AsSpan```, not ```AsReadOnlySpan```.\r\n\r\nThe resulting changes are:\r\n```c#\r\npublic static partial class MemoryExtensions\r\n{\r\n\t// * ADD *\r\n\r\n        // String\r\n\tpublic static System.ReadOnlyMemory<char> AsMemory(this string text) { throw null; }\r\n        public static System.ReadOnlyMemory<char> AsMemory(this string text, int start) { throw null; }\r\n        public static System.ReadOnlyMemory<char> AsMemory(this string text, int start, int length) { throw null; }\r\n\r\n        public static System.ReadOnlySpan<char> AsSpan(this string text) { throw null; }\r\n        public static System.ReadOnlySpan<char> AsSpan(this string text, int start) { throw null; }\r\n        public static System.ReadOnlySpan<char> AsSpan(this string text, int start, int length) { throw null; }\r\n\r\n        // T[]\r\n\tpublic static System.Memory<T> AsMemory(this T[] array) { throw null; }\r\n        public static System.Memory<T> AsMemory(this T[] array, int start) { throw null; }\r\n        public static System.Memory<T> AsMemory(tthis T[] array, int start, int length) { throw null; }\r\n\r\n        public static System.Span<T> AsSpan(this T[] array) { throw null; } // this already exist\r\n        public static System.Span<T> AsSpan(this T[] array, int start) { throw null; }\r\n        public static System.Span<T> AsSpan(this T[] array, int start, int length) { throw null; }\r\n\r\n\t// ArraySegment\r\n\tpublic static System.Memory<T> AsMemory(this ArraySegment<T> segment) { throw null; }\r\n        public static System.Memory<T> AsMemory(this ArraySegment<T> segment, int start) { throw null; }\r\n        public static System.Memory<T> AsMemory(this ArraySegment<T> segment, int start, int length) { throw null; }\r\n\r\n        public static System.Span<T> AsSpan(this ArraySegment<T> segment) { throw null; } // this already exist, just rename the parameter\r\n        public static System.Span<T> AsSpan(this ArraySegment<T> segment, int start) { throw null; }\r\n        public static System.Span<T> AsSpan(this ArraySegment<T> segment, int start, int length) { throw null; }\r\n\r\n        // * REMOVE *\r\n\r\n\t// these actually just get renamed to AsMemory/Span (see above)\r\n        public static System.ReadOnlyMemory<char> AsReadOnlyMemory(this string text) { throw null; }\r\n        public static System.ReadOnlyMemory<char> AsReadOnlyMemory(this string text, int start) { throw null; }\r\n        public static System.ReadOnlyMemory<char> AsReadOnlyMemory(this string text, int start, int length) { throw null; }\r\n        public static System.ReadOnlySpan<char> AsReadOnlySpan(this string text) { throw null; }\r\n        public static System.ReadOnlySpan<char> AsReadOnlySpan(this string text, int start) { throw null; }\r\n        public static System.ReadOnlySpan<char> AsReadOnlySpan(this string text, int start, int length) { throw null; }\r\n\r\n        // remove and simply use the casts, e.g. from Memory<T> to ReadOnlyMemory<T> instead\r\n\tpublic static System.ReadOnlyMemory<T> AsReadOnlyMemory<T>(this System.Memory<T> memory) { throw null; }\r\n        public static System.ReadOnlySpan<T> AsReadOnlySpan<T>(this System.Span<T> span) { throw null; }\t\r\n        public static System.ReadOnlySpan<T> AsReadOnlySpan<T>(this System.ArraySegment<T> arraySegment) { throw null; }\r\n        public static System.ReadOnlySpan<T> AsReadOnlySpan<T>(this T[] array) { throw null; }       \r\n}\r\n```"},{"Id":"7517479586","Type":"IssuesEvent","CreatedAt":"2018-04-12T03:49:18","Actor":"EssenRoc","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28909","RelatedDescription":"Closed issue \"How to use \"RSA/ECB/PKCS1Padding\" and \"RSA/ECB/OAEPPadding\"\" (#28909) at dotnet/corefx","RelatedBody":"I need to use these two algorithms but I don't know how to use the .net core\r\nhelp me!!!"},{"Id":"7517364359","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:08:41","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29051","RelatedDescription":"Opened pull request \"Optimize ReadOnlySequence First\" (#29051) at dotnet/corefx","RelatedBody":"We are still using Unsafe.As to cast here (mainly to show case performance improvement).\r\n![image](https://user-images.githubusercontent.com/6527137/38654385-e0550822-3dc3-11e8-98df-7419d849720b.png)\r\n\r\ncc @pakrym, @AlexRadch, @davidfowl, @KrzysztofCwalina, @krwq "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7517251686","Type":"IssuesEvent","CreatedAt":"2018-04-12T02:29:43","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26115","RelatedDescription":"Opened issue \"Tests invalid when language version default is 8.0\" (#26115) at dotnet/roslyn","RelatedBody":"A number of unit and regression tests are invalidated by changes in C# language versions 7.1, 7.2, and 7.3, but many tests are written to assume that these new features are not present. This shows up in the feature branch `features/recursive-patterns`, where the default language version has been changed to 8.0. Broken tests are marked as skipped with this bug, listed below:\r\n\r\n- `Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests.NoKeywordsOrSymbolsAfterNamedParameter`\r\n"},{"Id":"7517232697","Type":"PullRequestEvent","CreatedAt":"2018-04-12T02:23:01","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26096","RelatedDescription":"Closed pull request \"Fix tests in community PR 24910\" (#26096) at dotnet/roslyn","RelatedBody":"<details><summary>Fix tests in community PR 24910</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/pull/24910\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7517125601","Type":"IssuesEvent","CreatedAt":"2018-04-12T01:45:47","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24550","RelatedDescription":"Closed issue \"Constant pattern vs governing type that is unconstrained type parameter\" (#24550) at dotnet/roslyn","RelatedBody":"The following in currently rejected:\r\n\r\n``` c#\r\n    void M<T>(T t)\r\n    {\r\n        switch (t)\r\n        {\r\n            // Cannot implicitly converty type 'int' to 'T'\r\n            case 3: break;\r\n            // Cannot convert null to type parameter 'T' because it could be a non-nullable value type. Consider using 'default(T)' instead.\r\n            case null: break;\r\n        }\r\n        // Cannot implicitly converty type 'int' to 'T'\r\n        if (t is 3) { }\r\n        // Cannot convert null to type parameter 'T' because it could be a non-nullable value type. Consider using 'default(T)' instead.\r\n        if (t is null) { }\r\n    }\r\n```\r\n\r\nHowever, these are perfectly reasonable pattern-matching operations. The spec and implementation should change to permit this.\r\n"},{"Id":"7517124304","Type":"IssuesEvent","CreatedAt":"2018-04-12T01:45:19","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26098","RelatedDescription":"Closed issue \"Missing warning: the given expression is never of the provided type\" (#26098) at dotnet/roslyn","RelatedBody":"In this code\r\n\r\n``` c#\r\nclass C<T>\r\n{\r\n    void M(int x)\r\n    {\r\n        if (x is C<T>) { } // warning: the given expression is never of the provided ('C<T>') type.\r\n    }\r\n    void M(C<T> x)\r\n    {\r\n        if (x is int) { } // MISSING warning: the given expression is never of the provided ('int') type.\r\n    }\r\n}\r\n```\r\n\r\nWe give a warning where indicated, but are missing the warning on the second case."},{"Id":"7517121514","Type":"PullRequestEvent","CreatedAt":"2018-04-12T01:44:17","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25995","RelatedDescription":"Merged pull request \"recursive-patterns(18): Permit a constant pattern to be used with an open type as input\" (#25995) at dotnet/roslyn","RelatedBody":"Fixes #24550\r\nFixes https://github.com/dotnet/csharplang/issues/1284\r\nAlso includes a slight code improvement for these and related cases.\r\n\r\n@cston @agocke Please review\r\n@dotnet/roslyn-compiler Additional reviews welcome\r\n"},{"Id":"7517003549","Type":"IssuesEvent","CreatedAt":"2018-04-12T01:02:21","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26114","RelatedDescription":"Opened issue \"Are VB Scanner Tests around Preprocessing Directives correct.\" (#26114) at dotnet/roslyn","RelatedBody":"Within written source wouldn't the line ending be `CrLf` rather than`Lf` ?\r\nDue to XML Literal representations of input source code that is used withing the unit tests. \r\nIn other places within test the difference is accounted for and other it isn't."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7517657466","Type":"PullRequestEvent","CreatedAt":"2018-04-12T04:59:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5688","RelatedDescription":"Opened pull request \"Refresh ObjectWriter package\" (#5688) at dotnet/corert","RelatedBody":"Fixes #5177"},{"Id":"7517471903","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:46:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5685","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5685) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7517143836","Type":"PullRequestEvent","CreatedAt":"2018-04-12T01:52:17","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5687","RelatedDescription":"Opened pull request \"CoreFX Shell Script Fix\" (#5687) at dotnet/corert","RelatedBody":"Fixes an issue on OSX where directory resolution would fail if a CoreFX directory was not present"},{"Id":"7516312163","Type":"PullRequestEvent","CreatedAt":"2018-04-11T21:36:39","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5686","RelatedDescription":"Opened pull request \"Use canonical method IL in scanner's ImportCall\" (#5686) at dotnet/corert","RelatedBody":"This is necessary so that the scanner can accurately predict what weird things we're going to need later. We're emulating what `getCallInfo` will do.\r\n\r\nFixes #5648. Note that the F# hello app is still blocked, this time on complex tail calls (#1683)."},{"Id":"7516093049","Type":"PullRequestEvent","CreatedAt":"2018-04-11T20:51:23","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5685","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5685) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7515841167","Type":"PullRequestEvent","CreatedAt":"2018-04-11T20:02:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5683","RelatedDescription":"Merged pull request \"Port dynamic load checks from CoreCLR\" (#5683) at dotnet/corert","RelatedBody":"Fixes #5664 "},{"Id":"7515050890","Type":"PullRequestEvent","CreatedAt":"2018-04-11T17:32:55","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5684","RelatedDescription":"Opened pull request \"[ARM/X86] Fix calling conventions\" (#5684) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"7514911607","Type":"PullRequestEvent","CreatedAt":"2018-04-11T17:05:51","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5683","RelatedDescription":"Opened pull request \"Port dynamic load checks from CoreCLR\" (#5683) at dotnet/corert","RelatedBody":"Fixes #5664 "},{"Id":"7514835611","Type":"PullRequestEvent","CreatedAt":"2018-04-11T16:51:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5681","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5681) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7514791003","Type":"IssuesEvent","CreatedAt":"2018-04-11T16:43:20","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5682","RelatedDescription":"Opened issue \"Question: Is there a way to catch native exceptions in other threads?\" (#5682) at dotnet/corert","RelatedBody":"In our production macOS app (which has been built on corert since April 2017 !) we are sometimes experiencing bugs that come from native exceptions being thrown on other threads, or native exceptions that we somehow miss to catch in other ways.\r\n\r\nSince our logging and error handling infrastructure is in C#, it would be great if there was a way to deal with these native exceptions somehow - without them causing the process to exit.\r\nIs there already support for this in CoreRT or would it be possible for us to inject some custom logic?\r\n\r\nAnother thing we're seeing is that when our CoreRT console process is launched by another process, which is then killed, the CoreRT process hangs with CPU usage around 100%.\r\nI'm not entirely sure how to debug this - my first look at the \"Sample\" in Activity Monitor didn't reveal anything that I could see problematic, but would that be helpful for you to help find the bug?\r\n"},{"Id":"7514315979","Type":"PullRequestEvent","CreatedAt":"2018-04-11T15:23:26","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5681","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5681) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7517677714","Type":"PullRequestEvent","CreatedAt":"2018-04-12T05:07:29","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2130","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-rtm.5081 into sdk\" (#2130) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5081 into sdk release/2.1.2xx branch"},{"Id":"7517026706","Type":"PullRequestEvent","CreatedAt":"2018-04-12T01:10:42","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2136","RelatedDescription":"Opened pull request \"Update Stage 0 .NET CLI and sync NuGet version\" (#2136) at dotnet/sdk","RelatedBody":""},{"Id":"7516991456","Type":"PullRequestEvent","CreatedAt":"2018-04-12T00:57:56","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2135","RelatedDescription":"Opened pull request \"Add support for InvariantGlobalization MSBuild property\" (#2135) at dotnet/sdk","RelatedBody":"Fixes #1328"},{"Id":"7516920810","Type":"IssuesEvent","CreatedAt":"2018-04-12T00:31:28","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2128","RelatedDescription":"Closed issue \"2.1.300-preview2: Unable to use DotNetCliToolReference due to deps.json generation failure\" (#2128) at dotnet/sdk","RelatedBody":"There appears to be a regression in DotNetCliToolReference support.\r\n\r\n**Repro**\r\nOn a clean mac, install the .NET Core CLI using the .pkg installer (not .tar.gz)\r\n\r\nCreate a new project via `dotnet new xunit`\r\n\r\nRun `dotnet xunit`\r\n\r\n**Expected**\r\n\r\nShould launch xunit\r\n\r\n**Actual**\r\n\r\nThe SDK fails to launch it with this error.\r\n\r\n> Unable to generate deps.json, it may have been already generated.  You can specify the \"-d\" option before the tool name for diagnostic output (for example, \"dotnet -d <toolname>\": /usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj\r\n\r\nThe real issue seems to be this:\r\n\r\n> error MSB4018: System.UnauthorizedAccessException: Access to the path '/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/obj/Debug/netcoreapp2.1/GenerateDeps.assets.cache' is denied.\r\n\r\nThe .pkg installer does not give write access to this path.\r\n\r\n```\r\nls -al /usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps\r\ntotal 4\r\ndrwxr-xr-x  4 root wheel  128 Apr  6 23:18 .\r\ndrwxr-xr-x 36 root wheel 1152 Apr  6 23:18 ..\r\n-rwxr-xr-x  1 root wheel 2950 Apr  6 10:11 GenerateDeps.proj\r\ndrwxr-xr-x  3 root wheel   96 Apr  6 23:18 obj\r\n```\r\n\r\n**Workaround**\r\n```\r\nsudo chmod -R a+w /usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps\r\n```\r\n\r\n**Details**\r\nUsing 2.1.300-preview2-008530\r\n```\r\nTelemetry is: Enabled\r\nprojectfactory: MSBUILD_EXE_PATH = /usr/local/share/dotnet/sdk/2.1.300-preview2-008530/MSBuild.dll\r\nprojectfactory: MSBuild project path = /private/tmp/tst/tst.csproj\r\nprojecttoolscommandresolver: resolving commandspec from 1 Tool Libraries.\r\nprojecttoolscommandresolver: Attempting to resolve command spec from tool dotnet-xunit\r\nprojecttoolscommandresolver: nuget packages root:\r\n- /Users/nmcmaster/.nuget/packages/\r\n- /usr/local/share/dotnet/sdk/NuGetFallbackFolder\r\nprojecttoolscommandresolver: found tool lockfile at : /Users/nmcmaster/.nuget/packages/.tools/dotnet-xunit/2.3.1/netcoreapp2.1/project.assets.json\r\nprojecttoolscommandresolver: expect deps.json at: /Users/nmcmaster/.nuget/packages/.tools/dotnet-xunit/2.3.1/netcoreapp2.1/dotnet-xunit.deps.json\r\nGenerating deps.json at: /Users/nmcmaster/.nuget/packages/.tools/dotnet-xunit/2.3.1/netcoreapp2.1/dotnet-xunit.deps.json\r\nMSBuild arguments: /usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj /p:ProjectAssetsFile=\\\"/Users/nmcmaster/.nuget/packages/.tools/dotnet-xunit/2.3.1/netcoreapp2.1/project.assets.json\\\" /p:ToolName=dotnet-xunit /p:ProjectDepsFilePath=/var/folders/wt/qgc8g0h10y356ch360468p4r0000gn/T/tmpqVwU2r.tmp /p:TargetFramework=netcoreapp2.1\r\nUnable to generate deps.json, it may have been already generated.  You can specify the \"-d\" option before the tool name for diagnostic output (for example, \"dotnet -d <toolname>\": Microsoft (R) Build Engine version 15.7.145.53551 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Microsoft.Common.CurrentVersion.targets(1128,5): warning MSB3191: Unable to create directory \"bin/Debug/netcoreapp2.1/\". Access to the path '/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/bin/Debug/netcoreapp2.1/' is denied. [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly. [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018: System.UnauthorizedAccessException: Access to the path '/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/obj/Debug/netcoreapp2.1/GenerateDeps.assets.cache' is denied. ---> System.IO.IOException: Permission denied [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    --- End of inner exception stack trace --- [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at System.IO.File.Open(String path, FileMode mode, FileAccess access, FileShare share) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(205,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/usr/local/share/dotnet/sdk/2.1.300-preview2-008530/Sdks/Microsoft.NET.Sdk/targets/GenerateDeps/GenerateDeps.proj]\r\n```"},{"Id":"7516728890","Type":"PullRequestEvent","CreatedAt":"2018-04-11T23:29:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2126","RelatedDescription":"Merged pull request \"Don't include files with source extension in None item by default\" (#2126) at dotnet/sdk","RelatedBody":"Fixes #1157"},{"Id":"7516728882","Type":"IssuesEvent","CreatedAt":"2018-04-11T23:29:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1157","RelatedDescription":"Closed issue \"Setting EnableDefaultCompileItems to False doesn't remove the files from solution Explorer\" (#1157) at dotnet/sdk","RelatedBody":"_From @jinujoseph on February 8, 2017 23:9_\n\nCreate a ClassLibrary (.Net Core) \r\nTake a copy of Class1.cs and drop in the same folder\r\nyou will see of them included \r\nNow edit the csproj and put the below information \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <EnableDefaultCompileItems>False</EnableDefaultCompileItems>\r\n    <TargetFramework>netcoreapp1.0</TargetFramework>\r\n  </PropertyGroup>\r\n <ItemGroup>\r\n    <Compile Include=\"Class1.cs\" />\r\n </ItemGroup>\r\n</Project>\r\n```\r\nBuild again , it includes only Class1.cs but the solution explorer shows all files, expected ? \r\n\r\n![image](https://cloud.githubusercontent.com/assets/12449387/22761664/9c18182e-ee10-11e6-8ccb-400383d403ff.png)\r\n\r\n\r\n**Build**\r\n26206.0.d15rel\r\n\n\n_Copied from original issue: dotnet/project-system#1504_"},{"Id":"7516567539","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:39:57","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2134","RelatedDescription":"Merged pull request \"Disable package asset cache in tool deps json generation\" (#2134) at dotnet/sdk","RelatedBody":"Fix #2128"},{"Id":"7516001625","Type":"PullRequestEvent","CreatedAt":"2018-04-11T20:33:16","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2134","RelatedDescription":"Opened pull request \"Disable package asset cache in tool deps json generation\" (#2134) at dotnet/sdk","RelatedBody":"Fix #2121"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"984130513383317505","CreatedAt":"2018-04-11T18:06:13+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 2 https://t.co/SS9hInyJlJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":91,"FavoriteCount":58,"RawContent":null},{"Id":"984127988592623616","CreatedAt":"2018-04-11T17:56:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 2 https://t.co/T8ah6NSIAq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":294,"FavoriteCount":175,"RawContent":null},{"Id":"983818840961269761","CreatedAt":"2018-04-10T21:27:44+00:00","UserScreenname":"dotnet","Text":"Explore CosmosDB with .NET Core and MongoDB https://t.co/9VeWPHkIKo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":102,"FavoriteCount":33,"RawContent":null},{"Id":"983697698778841088","CreatedAt":"2018-04-10T13:26:22+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz with guest @jonskeet for some live coding this morning as they discuss managing DateTime valu… https://t.co/c6k5MACy5Z","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"983487812107304960","CreatedAt":"2018-04-09T23:32:21+00:00","UserScreenname":"dotnet","Text":"Curious which analyzers/fixers (“Quick Actions”) @roslyn provides? @kuhlenhuth has the answer. https://t.co/nawR22r6jz","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null},{"Id":"981533325767606273","CreatedAt":"2018-04-04T14:05:55+00:00","UserScreenname":"dotnet","Text":"Jeff (@csharpfritz) is working with @Azure Q &amp; A Maker today to improve his chat-bot for Twitch and Mixer.  Tune in… https://t.co/MLdDPdKPTL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2018-04-12T05:30:20.5929803Z","RunDurationInMilliseconds":7572}