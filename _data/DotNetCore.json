{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core October 2018 Update – NET Core 1.0 and 1.1","PublishedOn":"2018-10-09T23:19:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core October 2018 Update for 1.0 and 1.1. This update includes .NET Core 1.0.13, 1.1.10 and .NET Core SDK 1.1.11. Security CVE-2018-8292: .NET Core Information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/","RawContent":null},{"Title":".NET Framework October 2018 Security and Quality Rollup","PublishedOn":"2018-10-09T23:09:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the October 2018 Security and Quality Rollup. Security No new security fixes.  See .NET Framework September 2018 Security and Quality Rollup for the latest security update. Quality...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-framework-october-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.6 (Machine Learning .NET)","PublishedOn":"2018-10-09T00:35:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today we’re announcing our latest monthly release: ML.NET 0.6! ML.NET is a cross-platform, open source machine learning framework for .NET developers. We want to enable every .NET developer to train...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/08/announcing-ml-net-0-6-machine-learning-net/","RawContent":null},{"Title":"Update on .NET Core 3.0 and .NET Framework 4.8","PublishedOn":"2018-10-04T16:29:57+00:00","CommentsCount":104,"FacebookCount":0,"Summary":"In May, we announced .NET Core 3.0, the next major version of .NET Core that adds support for building desktop applications using WinForms, WPF, and Entity Framework 6. We also announced some exciting...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/04/update-on-net-core-3-0-and-net-framework-4-8/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 2.1.5 & SDK 2.1.403","PublishedOn":"2018-10-02T15:31:06+00:00","CommentsCount":10,"FacebookCount":0,"Summary":".NET Core October 2018 Update Today, we are releasing the .NET Core October 2018 Update. This update includes .NET Core 2.1.5 and .NET Core SDK 2.1.403 and contains important reliability fixes....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/02/net-core-october-2018-update/","RawContent":null},{"Title":".NET Framework September 2018 Preview of Quality Rollup","PublishedOn":"2018-09-25T19:36:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Late last week we released the September 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Updated code to prevent...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/25/net-framework-september-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing Cumulative Updates for .NET Framework for Windows 10 October 2018 Update","PublishedOn":"2018-09-19T22:30:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We deliver .NET Framework updates nearly every month, through Windows Update and other distribution channels. We are making changes to the way that we deliver those updates. We’ll soon start...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/19/announcing-cumulative-updates-for-net-framework-for-windows-10-october-2018-update/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3646","PublishedOn":"2018-09-18T02:38:06+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/17/announcing-net-framework-4-8-early-access-build-3646/","RawContent":null},{"Title":"Announcing .NET Core 2.2 Preview 2","PublishedOn":"2018-09-12T19:26:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.2 Preview 2. We have great improvements that we want to share and that we would love to get your feedback on, either in the comments or at dotnet/core #1938....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/12/announcing-net-core-2-2-preview-2/","RawContent":null},{"Title":"Announcing ‘Machine Learning .NET’ 0.5","PublishedOn":"2018-09-12T18:55:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, coinciding with the .NET Conf 2018, we&#8217;re announcing the release of ML.NET 0.5. It’s been a few months already since we released ML.NET 0.1 at //Build 2018, a cross-platform, open source...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/12/announcing-ml-net-0-5/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"},{"Id":"8203056810","Type":"IssuesEvent","CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/111","RelatedDescription":"Opened issue \"Sourcelink location is confusing\" (#111) at dotnet/home","RelatedBody":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section."},{"Id":"8173033759","Type":"PullRequestEvent","CreatedAt":"2018-08-27T16:21:56","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Merged pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8163761410","Type":"PullRequestEvent","CreatedAt":"2018-08-24T15:35:46","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Opened pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8160074991","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:10:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Merged pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8160071932","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:09:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Merged pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8159331036","Type":"PullRequestEvent","CreatedAt":"2018-08-23T20:13:18","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Opened pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8147233541","Type":"PullRequestEvent","CreatedAt":"2018-08-21T22:39:06","Actor":"anthonychu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Opened pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8131503388","Type":"PullRequestEvent","CreatedAt":"2018-08-17T23:19:54","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Merged pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"8075734624","Type":"IssuesEvent","CreatedAt":"2018-08-07T07:06:40","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8394268768","Type":"IssuesEvent","CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Opened issue \"October 2018 .NET Updates\" (#89) at dotnet/announcements","RelatedBody":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"},{"Id":"8394092294","Type":"IssuesEvent","CreatedAt":"2018-10-09T22:51:19","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/> **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n"},{"Id":"8377166566","Type":"IssuesEvent","CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Opened issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87) at dotnet/announcements","RelatedBody":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```"},{"Id":"8362210504","Type":"IssuesEvent","CreatedAt":"2018-10-03T16:11:10","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Opened issue \".NET Core 2.0 has reached end of life\" (#86) at dotnet/announcements","RelatedBody":"On October 1, 2018 .NET Core 2.0 reached end of life. This means the version channel is no longer supported and updates will no longer be provided. We recommend moving to a supported release. See our [support policy](https://www.microsoft.com/net/platform/support-policy) for more details.\r\n\r\nWe understand there will be needs to access end of life versions so downloads and Docker images will remain available. \r\n\r\n* 2.0 downloads will still be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). You will see notifications on the site indicating the end of life status. \r\n* 2.0 links have been removed from the [microsoft/donet Docker page](https://hub.docker.com/r/microsoft/dotnet/) though images will remain on the system.\r\n\r\n"},{"Id":"8279098039","Type":"IssuesEvent","CreatedAt":"2018-09-18T01:10:24","Actor":"spshant","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Opened issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85) at dotnet/announcements","RelatedBody":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n"},{"Id":"8247970519","Type":"IssuesEvent","CreatedAt":"2018-09-11T17:00:56","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](***TDB***).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n"},{"Id":"8220412616","Type":"IssuesEvent","CreatedAt":"2018-09-05T20:56:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Opened issue \".NET Core Runtime ARM64 Status\" (#82) at dotnet/announcements","RelatedBody":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\n## Current Status\r\n\r\nARM64 is currently broken in .NET Core 3.0 builds. See:\r\n\r\n* [dotnet/coreclr #19805](https://github.com/dotnet/coreclr/issues/19805)\r\n* [dotnet/coreclr #19822](https://github.com/dotnet/coreclr/issues/19822)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following operating systems:\r\n\r\n* Ubuntu 16.04\r\n* Windows 10\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8395234137","Type":"PullRequestEvent","CreatedAt":"2018-10-10T05:24:33","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20321","RelatedDescription":"Merged pull request \"Fix test JIT\\Regression\\VS-ia64-JIT\\M00\\b80373\" (#20321) at dotnet/coreclr","RelatedBody":"On 64 bit hosts it does a 64 bit store to a 32 bit parameter and corrupts the stack. A previous implementation of fgMarkAddressExposedLocals did not mark the parameter as address exposed, allowing the optimizer to remove the dead store and thus hide the incorrect code.\r\n\r\nFixes #20024"},{"Id":"8395234133","Type":"IssuesEvent","CreatedAt":"2018-10-10T05:24:33","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20024","RelatedDescription":"Closed issue \"Test failure: JIT_Regression._VS_ia64_JIT_M00_b80373_b80373_b80373_/_VS_ia64_JIT_M00_b80373_b80373_b80373_cmd\" (#20024) at dotnet/coreclr","RelatedBody":"Opened on behalf of @AriNuer\n\nThe test `JIT_Regression._VS_ia64_JIT_M00_b80373_b80373_b80373_/_VS_ia64_JIT_M00_b80373_b80373_b80373_cmd` has failed.\n\n/home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Work/561bb0cd-25a6-4fa7-b028-e4f924aa2b6d/Unzip/VS-ia64-JIT/M00/b80373/b80373/b80373.sh: line 244: 25538 Segmentation fault      (core dumped) $_DebuggerFullPath \\\"$CORE_ROOT/corerun\\\" $ExePath $CLRTestExecutionArguments\n    \n    \n    Return code:      1\n    Raw output file:      /home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Work/561bb0cd-25a6-4fa7-b028-e4f924aa2b6d/Unzip/Reports\\\\JIT.Regression\\\\VS-ia64-JIT\\\\M00\\\\b80373\\\\b80373\\\\b80373.output.txt\n    Raw output:\n    BEGIN EXECUTION\n    in takeLock\n    /home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Payload/crossgen /Platform_Assemblies_Paths /home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Payload:/home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Work/561bb0cd-25a6-4fa7-b028-e4f924aa2b6d/Unzip/VS-ia64-JIT/M00/b80373/b80373/IL:/home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Work/561bb0cd-25a6-4fa7-b028-e4f924aa2b6d/Unzip/VS-ia64-JIT/M00/b80373/b80373 /in b80373.org /out b80373.exe\n    Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\n    Copyright (c) Microsoft Corporation.  All rights reserved.\n    \n    Native image b80373.exe generated successfully.\n    in ReleaseLock\n    in takeLock\n    /home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Payload/corerun b80373.exe\n    in ReleaseLock\n    Expected: 100\n    Actual: 139\n    END EXECUTION - FAILED\n    Test Harness Exitcode is : 1\n    \n    To run the test:\n    > set CORE_ROOT=/home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Payload\n    > /home/helixbot/dotnetbuild/work/ef6c56df-33f8-4d96-9e4a-9f2c755c979e/Work/561bb0cd-25a6-4fa7-b028-e4f924aa2b6d/Unzip/VS-ia64-JIT/M00/b80373/b80373/b80373.sh\n    \n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n           at JIT_Regression._VS_ia64_JIT_M00_b80373_b80373_b80373_._VS_ia64_JIT_M00_b80373_b80373_b80373_cmd() in E:\\A\\_work\\103\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\JIT.Regression\\JIT.Regression.XUnitWrapper.cs:line 86141\nBuild : 3.0 - 20180918.01 (Ready-To-Run Tests)\nFailing configurations:\n- Alpine.36.Amd64\n  - x64\n- sles.12.amd64\n  - x64\n- opensuse.423.amd64\n  - x64\n- ubuntu.1804.amd64\n  - x64\n- ubuntu.1604.amd64\n  - x64\n- ubuntu.1404.amd64\n  - x64\n- redhat.73.amd64\n  - x64\n- fedora.28.amd64\n  - x64\n- fedora.27.amd64\n  - x64\n- debian.82.amd64\n  - x64\nDetails：\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20180918.01/workItem/JIT.Regression.XUnitWrapper/analysis/xunit/JIT_Regression._VS_ia64_JIT_M00_b80373_b80373_b80373_~2F_VS_ia64_JIT_M00_b80373_b80373_b80373_cmd"},{"Id":"8394908226","Type":"PullRequestEvent","CreatedAt":"2018-10-10T03:21:31","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20267","RelatedDescription":"Merged pull request \"Fix issue 20261: infinite recursion for non PAL threads\" (#20267) at dotnet/coreclr","RelatedBody":""},{"Id":"8394807406","Type":"IssuesEvent","CreatedAt":"2018-10-10T02:48:02","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20340","RelatedDescription":"Opened issue \"ReadOnlySpan stackalloc arrays initializer issue\" (#20340) at dotnet/coreclr","RelatedBody":"```csharp\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        for (int length = 0; length < byte.MaxValue; length++)\r\n        {\r\n            char[] a = new char[length];\r\n            for (int i = 0; i < length; i++)\r\n            {\r\n                a[i] = (char)(i + 1);\r\n            }\r\n            ReadOnlySpan<char> span = new ReadOnlySpan<char>(a);\r\n\r\n            for (int targetIndex = 0; targetIndex < length; targetIndex++)\r\n            {\r\n                ReadOnlySpan<char> values = new[] { (char)a[targetIndex], (char)0, (char)0, (char)0, (char)0 };\r\n                int idx = span.IndexOfAny(values);\r\n                if (targetIndex != idx)\r\n                {\r\n                    Console.WriteLine($\"Error, targetIndex:{targetIndex} length: {length}\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        Console.WriteLine(\"All fine\");\r\n    }\r\n}\r\n```\r\noutputs `All fine`\r\n```\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        for (int length = 0; length < byte.MaxValue; length++)\r\n        {\r\n            char[] a = new char[length];\r\n            for (int i = 0; i < length; i++)\r\n            {\r\n                a[i] = (char)(i + 1);\r\n            }\r\n            ReadOnlySpan<char> span = new ReadOnlySpan<char>(a);\r\n\r\n            for (int targetIndex = 0; targetIndex < length; targetIndex++)\r\n            {\r\n                ReadOnlySpan<char> values = stackalloc[] { (char)a[targetIndex], (char)0, (char)0, (char)0, (char)0 };\r\n                int idx = span.IndexOfAny(values);\r\n                if (targetIndex != idx)\r\n                {\r\n                    Console.WriteLine($\"Error, targetIndex:{targetIndex} length: {length}\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        Console.WriteLine(\"All fine\");\r\n    }\r\n}\r\n```\r\noutputs `Error, targetIndex:0 length: 1`"},{"Id":"8394676351","Type":"IssuesEvent","CreatedAt":"2018-10-10T02:04:41","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20339","RelatedDescription":"Opened issue \"`gtDispTree` shows wrong names for SIMD registers.\" (#20339) at dotnet/coreclr","RelatedBody":"For example in this case `d16` should be `v16`.\r\n```\r\n                                                 /--*  t60    byref  \r\nN124 ( 21,  9) [000061] ---XG-------        t61 = *  IND       simd16 REG d16\r\n```\r\nThe issue is that `coreclr\\src\\jit\\registerarm64.h` defines `pointer__size` names for simd registers. \r\n\r\nOnly `const char* emitter::emitRegName(regNumber reg, emitAttr size, bool varName)` knows how to show them right.\r\n\r\nFound during #18895.\r\n"},{"Id":"8394668859","Type":"PullRequestEvent","CreatedAt":"2018-10-10T02:02:14","Actor":"marler8997","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20338","RelatedDescription":"Opened pull request \"Remove obslete DBG_printf_gcc, all compilers now support DBG_printf_c99\" (#20338) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8395185286","Type":"PullRequestEvent","CreatedAt":"2018-10-10T05:06:03","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10147","RelatedDescription":"Opened pull request \"Update LatestPatchVersionForNetCore 1.0 and 1.1\" (#10147) at dotnet/cli","RelatedBody":"Now 1.0.13 and 1.1.10 are released"},{"Id":"8395166385","Type":"IssuesEvent","CreatedAt":"2018-10-10T04:58:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10117","RelatedDescription":"Closed issue \"dotnet-install.ps1 cannot install 2.2.100-preview2\" (#10117) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nUsing [dotnet-install.ps1](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.ps1) on Windows PowerShell 5.1 (Windows 1803):\r\n```\r\n.\\dotnet-install.ps1 -Channel preview -Version 2.2.100-preview2\r\n```\r\n\r\n## Expected  behavior\r\n\r\nIt works\r\n\r\n\r\n## Actual behavior\r\n\r\nIt does not\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.100-preview2/dotnet-sdk-2.2.100-preview2-win-x64.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.100-preview2/dotnet-sdk-2.2.100-preview2-win-x64.zip\r\nVERBOSE: dotnet-install: Legacy zip path: C:\\Users\\cberg\\AppData\\Local\\Temp\\ufohhok2.ysw\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.100-preview2/dotnet-dev-win-x64.2.2.100-preview2.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.100-preview2/dotnet-dev-win-x64.2.2.100-preview2.zip\r\nCould not find/download: \".NET Core SDK\" with version = 2.2.100-preview2\r\nRefer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\nAt C:\\Users\\cberg\\git\\PowerShell\\tools\\dotnet-install.ps1:584 char:5\r\n+     throw \"Could not find/download: `\"$assetName`\" with version = $Sp ...\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (Could not find/...ET Core support:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : Could not find/download: \".NET Core SDK\" with version = 2.2.100-preview2\r\nRefer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n```\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nA compatible SDK version for global.json version: [2.2.100-preview2] from [C:\\Users\\cberg\\git\\PowerShell\\global.json] was not found\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8394390287","Type":"PullRequestEvent","CreatedAt":"2018-10-10T00:24:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10146","RelatedDescription":"Merged pull request \"Merge rel/1.1.0-MSRC to rel/1.1.0.\" (#10146) at dotnet/cli","RelatedBody":""},{"Id":"8394266876","Type":"IssuesEvent","CreatedAt":"2018-10-09T23:43:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/4057","RelatedDescription":"Closed issue \"Advice on DependencyContext and Assembly loading in custom CLI tool\" (#4057) at dotnet/cli","RelatedBody":"I'm developing a framework on top of .NET Core/ASP.NET Core that is designed to be highly modular. My module system is built along the same lines as ASP.NET Core's ApplicationPartManager where I used the `DependencyContext` to discover dependencies that reference a core set of my framework libraries. Modules are included by package references, therefore the application has everything it needs at compile time. I am not performing any runtime assembly loading for an application, but I am trying to achieve it for a custom CLI tool.\n\nOne of the features of my framework is the ability to support multiple database contexts which can target multiple databases through logical groups. A set of `DbContext` instances can target one group. E.g., my`SecurityDbContext` and `SettingsDbContext` (both separate modules) target the `Core` logical group. The logical group has a one-to-one mapping to a connection string.\n\nTo support database migrations, I couldn't use EF's approach to database migrations as it doesn't support multiple contexts using the same database. So I've built my own migrations service which used embedded `.sql` script files and using the modules which compose the applications, I know which databases to apply the scripts to.\n\nI want to build a custom `dotnet-*` tool to execute these migrations in two different scenarios\n- At design time from the current project directory\n- At runtime\n  - As part of an automated deployment\n  - Standalone against an application\n\nBecause of the requirement on `DependencyContext` to discover assemblies that compose my application, I need to determine the `DependencyContext` for my application when the CLI tool runs.\n\nThe current debugging experience for CLI tools is difficult, so I've taken a different approach in that I set my CLI tool (in the same solution as a test application) to be my startup project, with a target directory pointing to my test application root path. I also provide any arguments to invoke the correct command.\n\nThe `DependencyContext.Default` in this instance will be that of my CLI tool, _not_ my test application. Therefore, I've devised this class to determine my `DependencyContext` for my test application when running from my CLI tool:\n\n```\npublic static class DependencyContextResolver\n{\n    public static DependencyContextResult ResolveDependencyContext()\n        => ResolveDependencyContext(Directory.GetCurrentDirectory());\n\n    public static DependencyContextResult ResolveDependencyContext(string path)\n    {\n        Ensure.ArgumentNotNull(path, nameof(path));\n\n        string projectFile = Path.Combine(path, \"project.json\");\n        if (File.Exists(projectFile))\n        {\n            return ResolveProjectDependencyContext(projectFile);\n        }\n\n        string[] depsFiles = Directory.EnumerateFiles(path, \"*.deps.json\", SearchOption.TopDirectoryOnly).ToArray();\n        if (depsFiles.Length == 0)\n        {\n            throw new OperationErrorException(\"No '.deps.json' file was found in the application path.\");\n        }\n\n        if (depsFiles.Length > 1)\n        {\n            throw new OperationErrorException(\"Multiple '.deps.json' file was found in the application path.\");\n        }\n\n        return new DependencyContextResult\n        {\n            Context = GetDependencyContextFromDepsFile(depsFiles[0]),\n            ApplicationName = Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(depsFiles[0])),\n            LibraryPath = Directory.GetCurrentDirectory()\n        };\n    }\n\n    public static DependencyContextResult ResolveProjectDependencyContext(string projectFile)\n    {\n        // MA - Get the project context.\n        var projectContext = ProjectContext.CreateContextForEachFramework(projectFile)\n           .Where(pc => pc.TargetFramework.GetShortFolderName() == \"netcoreapp1.0\")\n           .SingleOrDefault();\n\n        if (projectContext == null)\n        {\n            throw new OperationErrorException(\"Unable to get project context for framework 'netcoreapp1.0'\");\n        }\n\n        // MA - Get the path to the target file.\n        string depsFile = projectContext.GetOutputPaths(\"Debug\").RuntimeFiles.DepsJson;\n        if (!File.Exists(depsFile))\n        {\n            // MA - Determine if the 'preserveCompilationContext' flag is set:\n            bool? hasPreserveFlag = projectContext.ProjectFile\n                .GetCompilerOptions(projectContext.TargetFramework, \"Debug\")?\n                .PreserveCompilationContext;\n\n            if (!hasPreserveFlag.GetValueOrDefault(true))\n            {\n                throw new OperationErrorException($\"Missing dependencies file '{depsFile}'. You must have 'preserveCompilationContext' set in your project file?\");\n            }\n\n            // MA - File doesn't exist, let's try a build.\n            int buildExitCode = CommandFactory.CreateBuildCommand(projectFile, \"Debug\", projectContext.TargetFramework)\n                .ForwardStdErr()\n                .ForwardStdOut()\n                .Execute()\n                .ExitCode;\n\n            if (buildExitCode != 0)\n            {\n                throw new OperationErrorException($\"Failed to build project: {projectContext.ProjectFile.Name}\");\n            }\n\n            if (!File.Exists(depsFile))\n            {\n                throw new OperationErrorException($\"Missing dependencies file '{depsFile}'. Do you have 'preserveCompilationContext' set in your project file?\");\n            }\n        }\n\n        return new DependencyContextResult\n        {\n            ApplicationName = projectContext.ProjectFile.Name,\n            LibraryPath = projectContext.GetOutputPaths(\"Debug\").CompilationOutputPath,\n            Context = GetDependencyContextFromDepsFile(depsFile)\n        };\n    }\n\n    public static DependencyContext GetDependencyContextFromDepsFile(string depsFile)\n    {\n        Ensure.ArgumentNotNullOrEmpty(depsFile, nameof(depsFile));\n\n        using (var reader = new DependencyContextJsonReader())\n        using (var stream = File.OpenRead(depsFile))\n        {\n            return reader.Read(stream);\n        }\n    }\n\n    public class DependencyContextResult\n    {\n        public string ApplicationName { get; set; }\n\n        public DependencyContext Context { get; set; }\n\n        public string LibraryPath { get; set; }\n    }\n}\n```\n\nThis correctly gives me my closure over all the dependencies that make up the application. \n\nThe problem I am finding, my logic to load assemblies using an `AssemblyName` in my `CandidateAssemblyProvider` (which is based ON MVC's method of loading application parts) only returns those libraries which are loaded by the CLI tool (because the CLI tool has them as it's own dependencies)\n\n```\nreturn GetCandidateLibraries(_context, _referenceAssemblies)\n    .SelectMany(l => l.GetDefaultAssemblyNames(_context))\n    .Select(Assembly.Load);\n```\n\nFor example, here might be the `project.json` for my test application:\n\n```\n{\n  \"dependencies\": {\n    \"ModuleA\": \"1.0.0-*\",\n    \"ModuleB\": \"1.0.0-*\",\n    \"Data.Abstractions\": \"1.0.0-*\"\n  }\n}\n```\n\nAnd for my CLI tool:\n\n```\n{\n  \"dependencies\": {\n    \"Data.Abstractions\": \"1.0.0-*\"\n  }\n}\n```\n\nIn this instance, only the dependency `Data.Abstractions` is loaded because it is used by both the test application and the CLI tool. Remember at this stage we're debugging the CLI tool, but targeting the test application.\n\nBecause of this issue, I thought I might be able to tackle this by loading in the set of assemblies detailed by the `DependencyContext`, using something like this:\n\n```\npublic static class DependencyContextResultExtensions\n{\n    public static void LoadAssemblies(this DependencyContextResolver.DependencyContextResult result)\n    {\n#if NETSTANDARD1_6\n        foreach (var library in result.Context.RuntimeLibraries)\n        {\n            Func<AssemblyLoadContext, AssemblyName, Assembly> resolver = (alc, an) => Resolve(alc, an, result.LibraryPath, library);\n            AssemblyLoadContext.Default.Resolving += resolver;\n\n            var names = library.GetDefaultAssemblyNames(result.Context);\n            foreach (var name in names)\n            {\n                AssemblyLoadContext.Default.LoadFromAssemblyName(name);\n            }\n\n            AssemblyLoadContext.Default.Resolving -= resolver;\n        }\n#endif\n    }\n\n#if NETSTANDARD1_6\n    public static Assembly Resolve(AssemblyLoadContext context, AssemblyName name, string basePath, RuntimeLibrary library)\n    {\n        string assemblyLocalSource = Path.Combine(basePath, Path.GetFileName($\"{name.Name}.dll\"));\n        if (File.Exists(assemblyLocalSource))\n        {\n            name = AssemblyLoadContext.GetAssemblyName(assemblyLocalSource);\n            return context.LoadFromAssemblyPath(assemblyLocalSource);\n        }\n\n        string assemblyPackageSourceRelativePath = library.Assemblies.SingleOrDefault(a => a.Name.Equals(name.Name))?.Path;\n        if (assemblyPackageSourceRelativePath != null)\n        {\n            string packageSource = $\"%USERPROFILE%/.nuget/packages/{library.Name}/{library.Version}/\";\n            string assemblyPackageSource = Environment.ExpandEnvironmentVariables(Path.Combine(packageSource, assemblyPackageSourceRelativePath));\n\n            if (File.Exists(assemblyPackageSource))\n            {\n                return context.LoadFromAssemblyPath(assemblyPackageSource);\n            }\n        }\n\n        return null;\n    }\n#endif\n}\n```\n\nBut what I am finding, is that it fails to load any assemblies that are not the test application assembly itself. Something similar to:\n\n```\nAn unhandled exception of type 'System.IO.FileNotFoundException' occurred in System.Private.CoreLib.ni.dll\n\nAdditional information: Could not load the specified file.\n```\n\nMy code checks that the file exists (either in the local path or the NuGet package source), but it just doesn't want to load.\n\nSo I have a few questions:\n1. Can you offer any recommendations on loading assemblies from a target application by a CLI tool?\n2. Is there an easier method of locating assemblies, perhaps using some lower level mechanism to load an assembly based on a `Library` instance and have it resolve automatically to either the NuGet package root or the local path?\n3. Do you see anything glaringly obvious that I am missing in trying to tackle this?\n\nSorry, it's a long question, but I'm struggling to find any concrete methodology on tackling these issues, so I figured I would just ask you guys directly on here.\n"},{"Id":"8394001082","Type":"PullRequestEvent","CreatedAt":"2018-10-09T22:26:56","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10146","RelatedDescription":"Opened pull request \"Merge rel/1.1.0-MSRC to rel/1.1.0.\" (#10146) at dotnet/cli","RelatedBody":""},{"Id":"8393891494","Type":"IssuesEvent","CreatedAt":"2018-10-09T22:00:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10145","RelatedDescription":"Opened issue \"Core-Sdk uses engineering dependency flow\" (#10145) at dotnet/cli","RelatedBody":"Documentation for dependency flow is currently being created / updated, here is some starter info\r\n\r\n[Dependency flow](https://github.com/dotnet/arcade/blob/master/Documentation/DependenciesFlowPlan.md)\r\n\r\nAdd Version.Details.xml\r\n- [ ] Create [Version.Details.xml](https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#engversiondetailsxml) file manually in repo\r\n\r\nChannel mapping\r\n- [ ] Create a [channel mapping](https://github.com/dotnet/arcade/blob/master/Documentation/Maestro/BuildAssetRegistry.md) between branch and channel name\r\n  - manually (using REST API), documentation forthcoming\r\n\r\nCreate subscriptions\r\n- [ ] Create [subscriptions](https://github.com/dotnet/arcade/blob/e20e8459bdae871bcafb731cf139210319d939d4/Documentation/Maestro/BuildAssetRegistry.md#subscription) \r\n  - manually (using REST API), documentation forthcoming"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8390286607","Type":"PullRequestEvent","CreatedAt":"2018-10-09T12:12:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/894","RelatedDescription":"Merged pull request \"[Darc-Update] Update dependencies from build 20181007.1 of https://github.com/dotnet/arcade\" (#894) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18507.1\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18507.1.symbols.nupkg - 2.2.0-beta.18507.1\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18507.1.symbols.nupkg - 2.4.0-beta.18507.1\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18507.1\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18507.1\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18507.1\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18507.1\n- Microsoft.DotNet.Darc - 1.0.0-beta.18507.1\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18507.1\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18507.1\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18507.1\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18507.1"},{"Id":"8383703497","Type":"PullRequestEvent","CreatedAt":"2018-10-08T12:00:55","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/894","RelatedDescription":"Opened pull request \"[Darc-Update] Update dependencies from build 20181007.1 of https://github.com/dotnet/arcade\" (#894) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18507.1\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18507.1.symbols.nupkg - 2.2.0-beta.18507.1\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18507.1.symbols.nupkg - 2.4.0-beta.18507.1\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18507.1.symbols.nupkg - 1.0.0-beta.18507.1\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18507.1\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18507.1\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18507.1\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18507.1\n- Microsoft.DotNet.Darc - 1.0.0-beta.18507.1\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18507.1\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18507.1\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18507.1\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18507.1\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18507.1"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8394896998","Type":"PullRequestEvent","CreatedAt":"2018-10-10T03:17:45","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/32734","RelatedDescription":"Opened pull request \"{RO}Span<char> add IndexOfAny 4,5 tests change many tests to 6+\" (#32734) at dotnet/corefx","RelatedBody":"To cover vectorizing 4 and 5 values in addition to to 1,2,3 https://github.com/dotnet/coreclr/pull/19790#issuecomment-417894761 as this is used  for example in `FileSystemName` with 5 chars\r\n```csharp\r\nprivate static readonly char[] s_wildcardChars =\r\n{\r\n    '\\\"', '<', '>', '*', '?'\r\n};\r\n```\r\n\r\n/cc @krwq @ahsonkhan @stephentoub "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8394922754","Type":"PullRequestEvent","CreatedAt":"2018-10-10T03:26:10","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30424","RelatedDescription":"Opened pull request \"Merge dev16.0.x to features/async-streams\" (#30424) at dotnet/roslyn","RelatedBody":""},{"Id":"8394889304","Type":"IssuesEvent","CreatedAt":"2018-10-10T03:15:08","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30423","RelatedDescription":"Opened issue \"Error List re-orders and scrolls after selecting one entry\" (#30423) at dotnet/roslyn","RelatedBody":"I'm fixing a number of build errors following a merge. I'm looking at the error list, scrolling to the top and double-clicking on the first entry.\r\n\r\nI expect the list to stay put, as I will want to fix the second entry next.\r\nThe errors at the bottom of the list are not interesting to me, as they are just \"Metadata file could not be found\" produced by dependent projects (they are not the root cause of the build failure).\r\n\r\nInstead, the item I selected jumps to the bottom of the list and the list scrolls. That means that I need to scroll all the way back to the top once I'm done with that error and I'm ready to proceed to the second error.\r\n\r\n![error-list-jumps](https://user-images.githubusercontent.com/12466233/46711079-931c3b00-cbff-11e8-90cf-1426971caf18.gif)\r\n"},{"Id":"8394859344","Type":"PullRequestEvent","CreatedAt":"2018-10-10T03:05:01","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30422","RelatedDescription":"Opened pull request \"Add new refactoring feature to wrap/indent/align lists of things\" (#30422) at dotnet/roslyn","RelatedBody":"Here's what it looks like:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/46710083-446ca200-cbfb-11e8-9429-836bf78aee5e.png)\r\n\r\nThe basic idea is that we all 3 different top level ideas of how you can control wrapping.\r\n\r\n1. You can wrap after every item in the list.  If you choose this, you can choose to:\r\n    a. indent each item:\r\n![image](https://user-images.githubusercontent.com/4564579/46710173-a9c09300-cbfb-11e8-811d-4b01072718e0.png)\r\n\r\n    b. indent only the wrapped items:\r\n![image](https://user-images.githubusercontent.com/4564579/46710188-b644eb80-cbfb-11e8-83de-c78459084834.png)\r\n\r\n    c. align the the wrapped items:\r\n![image](https://user-images.githubusercontent.com/4564579/46710207-c4930780-cbfb-11e8-99db-fc61f74fbf04.png)\r\n\r\n2. You can wrap the list once it gets too long.  What defines 'too long' is user configurable.   There is an editor_config option that allows them to specify the apprx column to wrap at.  This is set to 120 columns by default.   This option is similar to option '1' except that instead of wrapping after each item, we wrap if we pass that preferred column.   \r\n\r\n3. You can unwrap the items in the list, choosing if things should be indented or not. \r\n    a. Not indented looks like:\r\n![image](https://user-images.githubusercontent.com/4564579/46710682-c9f15180-cbfd-11e8-9fbf-62a32576170d.png)\r\n\r\n    b. Indented looks like:\r\n![image](https://user-images.githubusercontent.com/4564579/46710691-d4abe680-cbfd-11e8-894b-b7a0bc690a73.png)\r\n\r\n\r\nThis set of options seems to cover the gamut of patterns found in codebases.  Looking at Roslyn itself, all these patterns were represented with significant percentages.\r\n\r\n--\r\n\r\nRelevant design/impl choices.\r\n\r\n1. We don't offer this if any items in the list have non-whitespace leading/trailing trivia.  It is fairly unclear what should happen with those items, so for now we just do not offer.  If this is important, we can come up with a strategy on how to handle these.\r\n2. We don't offer this if any items in the list are multiline.  With multiline, if you move the items around, you can really mess up formatting of the information inside.    If this is important, we can come up with a strategy on how to handle these.\r\n3. We remember which items you selected from the lightbulb and we prioritize those when offering in the future.  That way, if there are just two items you common use (like 'unwrap app' and 'wrap long lines and align'), those will naturally become the main items offered to you.  This way you can quickly navigate and select these items.  \r\n4. We don't offer on a list that has any syntax errors on it.  The concern being that we'll really screw things up if we do.\r\n\r\n--\r\n\r\nTodo:\r\n\r\n- [ ] Tests\r\n- [ ] VB support\r\n- [ ] Support for other language constructs (like arg-lists, not just parameter lists)."},{"Id":"8394736387","Type":"PullRequestEvent","CreatedAt":"2018-10-10T02:25:19","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30421","RelatedDescription":"Opened pull request \"Fix failure to close the C# Interactive window in tests\" (#30421) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8394368831","Type":"IssuesEvent","CreatedAt":"2018-10-10T00:16:49","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6437","RelatedDescription":"Opened issue \"Consider generating R2R interop stubs\" (#6437) at dotnet/corert","RelatedBody":"About 1/3 of WinForms startup time (when everything is R2R) is JITing and most of that is interop stubs. Given that ILC is able to generate interop IL for many cases, consider enabling stub generation where possible. This might require a stable API for R2R P/Invoke transitions."},{"Id":"8394262628","Type":"PullRequestEvent","CreatedAt":"2018-10-09T23:42:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6435","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6435) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks"},{"Id":"8393015305","Type":"IssuesEvent","CreatedAt":"2018-10-09T19:16:59","Actor":"Spongman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6436","RelatedDescription":"Opened issue \"release schedule?\" (#6436) at dotnet/corert","RelatedBody":"the latest version of Microsoft.DotNet.ILCompiler on nuget is 1.0.0-alpha-26719-02. is this the latest version?"},{"Id":"8392967451","Type":"PullRequestEvent","CreatedAt":"2018-10-09T19:08:37","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6435","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6435) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8392943784","Type":"PullRequestEvent","CreatedAt":"2018-10-09T19:04:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6434","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#6434) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @samneirinck"},{"Id":"8392934843","Type":"PullRequestEvent","CreatedAt":"2018-10-09T19:02:49","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6434","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6434) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8385448480","Type":"PullRequestEvent","CreatedAt":"2018-10-08T16:44:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6433","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6433) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii"},{"Id":"8385442749","Type":"PullRequestEvent","CreatedAt":"2018-10-08T16:43:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6433","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6433) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8383687704","Type":"PullRequestEvent","CreatedAt":"2018-10-08T11:57:46","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6432","RelatedDescription":"Opened pull request \"Fix asm.js struct and alignment issues\" (#6432) at dotnet/corert","RelatedBody":"Asm.js does aligned memory accesses unless forced to do otherwise. This causes occasional memory corruption on various structures that aren't 4-byte aligned (two of which get used in interface dispatch). To handle that, this change:\r\n1. Changes the LLVM representation of managed structs to approximately match the managed representation. This fixes DispatchMapEntry, which is 3 uint16s that can be 2-byte aligned.\r\n2. Annotates an unaligned read used by OptionalFields so the compiler can handle it."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8393704416","Type":"PullRequestEvent","CreatedAt":"2018-10-09T21:21:30","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2575","RelatedDescription":"Opened pull request \"Updating branding to 2.2.200\" (#2575) at dotnet/sdk","RelatedBody":""},{"Id":"8391364001","Type":"IssuesEvent","CreatedAt":"2018-10-09T14:50:40","Actor":"rainersigwald","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2574","RelatedDescription":"Closed issue \"Make it easier to express dependencies among projects without referencing output assembly\" (#2574) at dotnet/sdk","RelatedBody":"It is sometimes necessary to build project A before project B without project B referencing the assembly that A generates. In such cases one can use `ProjectReference` with `ReferenceOutputAssembly=\"false\"`. \r\n\r\nThis however is not sufficient in all scenarios, especially when these projects target different, incompatible frameworks and/or multi-target.\r\n\r\nTurns out 3 properties need to be set to make this work:\r\n```xml\r\n<ProjectReference Include=\"B.csproj\" \r\n       ReferenceOutputAssembly=\"false\"\r\n       SkipGetTargetFrameworkProperties=\"true\"\r\n       GlobalPropertiesToRemove=\"TargetFramework\" />\r\n```\r\n\r\nThis is much more complex than it should be.\r\n\r\nProposal: introduce a new item that can be use to express that this project depends on building another project, but has no implication on references. Such item could be called e.g. `ProjectBuildOrderDependency`, `DependsOnProject`, etc.\r\n\r\n```xml\r\n<DependsOnProject Include=\"B.csproj\" />\r\n```"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1049807908173574144","CreatedAt":"2018-10-09T23:44:44+00:00","UserScreenname":"dotnet","Text":"Blogged -- .NET Framework October 2018 Security and Quality Rollup https://t.co/tLgVdVbM4L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1049702744515203072","CreatedAt":"2018-10-09T16:46:51+00:00","UserScreenname":"dotnet","Text":"Announcing the latest preview release of ML .NET 0.6 (Machine Learning .NET) https://t.co/3lXXCs30ma","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":79,"FavoriteCount":51,"RawContent":null},{"Id":"1047894749867270145","CreatedAt":"2018-10-04T17:02:31+00:00","UserScreenname":"dotnet","Text":"Blogged -- Update on .NET Core 3.0 and .NET Framework 4.8 https://t.co/tBpJg3Eoc8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":325,"FavoriteCount":244,"RawContent":null},{"Id":"1047645317401735168","CreatedAt":"2018-10-04T00:31:22+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 has reached end of life https://t.co/FZTYietdMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":148,"FavoriteCount":174,"RawContent":null},{"Id":"1047579283579756544","CreatedAt":"2018-10-03T20:08:58+00:00","UserScreenname":"dotnet","Text":"https://t.co/Pt9ZGHYH8C","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":27,"RawContent":null},{"Id":"1047257170482536454","CreatedAt":"2018-10-02T22:49:01+00:00","UserScreenname":"dotnet","Text":"Hey developers! Let us help you on your journey to Azure. Check out these resources, e-books, and apply for assista… https://t.co/1QzIe9tWvn","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":73,"FavoriteCount":41,"RawContent":null}]}},"RunOn":"2018-10-10T05:30:31.5919076Z","RunDurationInMilliseconds":7334}