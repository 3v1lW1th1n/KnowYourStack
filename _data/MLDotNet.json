{"Data":{"GitHub":{"Issues":[{"Id":"426199619","IsPullRequest":true,"CreatedAt":"2019-03-28T23:48:57","Actor":"codemzs","Number":"3122","RawContent":null,"Title":"Fix grammar in exception message.","State":"closed","Body":"fixes #3107","Url":"https://github.com/dotnet/machinelearning/pull/3122","RelatedDescription":"Closed or merged PR \"Fix grammar in exception message.\" (#3122)"},{"Id":"426107984","IsPullRequest":false,"CreatedAt":"2019-03-28T23:48:57","Actor":"Ivanidzo4ka","Number":"3107","RawContent":null,"Title":"Exceptions are not super helpful","State":"closed","Body":"```\r\nvar loader = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                HasHeader = true,\r\n                Columns = new[] {\r\n                    new TextLoader.Column(\"NumericFeatures\", DataKind.Single, 0, 189),\r\n                    new TextLoader.Column(\"CatFeatures\", DataKind.String, 189, 229),\r\n                    new TextLoader.Column(\"Label\", DataKind.Int32, 230)\r\n                }\r\n            });\r\n            var data = loader.Load(\"train.tsv\");\r\n            var dic = new Dictionary<int, bool>();\r\n            dic.Add(1, true);\r\n            dic.Add(-1, false);\r\n            var pipeline = mlContext.Transforms.IndicateMissingValues(\"NumericFeatures\").\r\n                Append(mlContext.Transforms.Categorical.OneHotEncoding(\"CatFeatures\")).\r\n                Append(mlContext.Transforms.Concatenate(\"Features\",\"NumericFeatures\", \"CatFeatures\")).\r\n                Append(mlContext.Transforms.Conversion.MapValue(\"Label\", dic));\r\n```\r\n```\r\nSystem.InvalidOperationException: 'Column 'CatFeatures' has values of Singlewhich is not the same as earlier observed type of Boolean.'\r\n```\r\nA) would be nice to have space between type and sentence.\r\nB) this exception happened in Concat transform and only indication of that is stack trace.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3107","RelatedDescription":"Closed issue \"Exceptions are not super helpful\" (#3107)"},{"Id":"426220814","IsPullRequest":true,"CreatedAt":"2019-03-28T23:06:51","Actor":"zeahmed","Number":"3123","RawContent":null,"Title":" Created sample for 'TokenizeIntoCharactersAsKeys' API.","State":"closed","Body":"Related to #1209.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3123","RelatedDescription":"Closed or merged PR \" Created sample for 'TokenizeIntoCharactersAsKeys' API.\" (#3123)"},{"Id":"426738717","IsPullRequest":true,"CreatedAt":"2019-03-28T22:42:30","Actor":"MarcinJuraszek","Number":"3135","RawContent":null,"Title":"Pass weighting value from ProduceWordBags to WordBagEstimator constru…","State":"open","Body":"Fixes #3134","Url":"https://github.com/dotnet/machinelearning/pull/3135","RelatedDescription":"Open PR \"Pass weighting value from ProduceWordBags to WordBagEstimator constru…\" (#3135)"},{"Id":"426737482","IsPullRequest":false,"CreatedAt":"2019-03-28T22:37:56","Actor":"MarcinJuraszek","Number":"3134","RawContent":null,"Title":"weighting parameter value lost for ProduceWordBag call","State":"open","Body":"When calling `ProduceWordBags` with `weighting` parameter specified it gets lost and the results always use `WeightingCriteria.Tf`.\r\n\r\nThe simplest repro-steps I have (based on `LdaTransform` sample):\r\n\r\n```csharp\r\n// Get a small dataset as an IEnumerable and then read it as a ML.NET data set.\r\nIEnumerable<SamplesUtils.DatasetUtils.SampleTopicsData> data = SamplesUtils.DatasetUtils.GetTopicsData();\r\nvar trainData = ml.Data.LoadFromEnumerable(data);\r\n\r\nstring review = nameof(SamplesUtils.DatasetUtils.SampleTopicsData.Review);\r\n\r\n// A pipeline for featurizing the \"Review\" column\r\nvar pipeline = ml.Transforms.Text.ProduceWordBags(\"bags\", review, ngramLength: 1, weighting: Transforms.Text.NgramExtractingEstimator.WeightingCriteria.TfIdf);\r\n\r\n// The transformed data\r\nvar transformer = pipeline.Fit(trainData);\r\nvar transformed_data = transformer.Transform(trainData);\r\n\r\nvar preview = transformed_data.Preview();\r\n\r\nvar bagsColumn = transformed_data.GetColumn<VBuffer<float>>(\"bags\");\r\nforeach (var featureRow in bagsColumn )\r\n{\r\n    foreach (var value in featureRow.GetValues())\r\n        Console.Write($\"{value} \");\r\n    Console.WriteLine(\"\");\r\n}\r\n```\r\n\r\nExpected output:\r\n\r\n```\r\n1.386294 0.6931472 0.6931472 1.386294 0.6931472 0.2876821 0 0 0 0 0 0 0\r\n0 0.6931472 0.6931472 0 0.6931472 0.2876821 1.386294 1.386294 0 0 0 0 0\r\n0.6931472 0.6931472 0.6931472 0.6931472 0.6931472\r\n0 0 0 0 0 0.2876821 0 0 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472\r\n```\r\n\r\nActual output:\r\n\r\n```\r\n1 1 1 1 1 1 0 0 0 0 0 0 0\r\n0 1 1 0 1 1 1 1 0 0 0 0 0\r\n1 1 1 1 1\r\n0 0 0 0 0 1 0 0 1 1 1 1 1\r\n```\r\n\r\nI'll send a PR with a fix shortly.","Url":"https://github.com/dotnet/machinelearning/issues/3134","RelatedDescription":"Open issue \"weighting parameter value lost for ProduceWordBag call\" (#3134)"},{"Id":"426172017","IsPullRequest":true,"CreatedAt":"2019-03-28T22:05:23","Actor":"zeahmed","Number":"3120","RawContent":null,"Title":"Created samples for 'FeaturizeText' API.","State":"closed","Body":"Related to #1209.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3120","RelatedDescription":"Closed or merged PR \"Created samples for 'FeaturizeText' API.\" (#3120)"},{"Id":"426724392","IsPullRequest":true,"CreatedAt":"2019-03-28T21:54:39","Actor":"zeahmed","Number":"3133","RawContent":null,"Title":" Created sample for text normalizing API.","State":"open","Body":"Related to #1209.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3133","RelatedDescription":"Open PR \" Created sample for text normalizing API.\" (#3133)"},{"Id":"426718450","IsPullRequest":false,"CreatedAt":"2019-03-28T21:37:15","Actor":"eerhardt","Number":"3132","RawContent":null,"Title":"Version.txt in model .zip should use the FileVersion, not AssemblyVersion","State":"open","Body":"When you save a model, it generates a `Version.txt` file in the .zip, so we can tell which version of ML.NET was used to generate the model.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Data/Repository.cs#L307-L310\r\n\r\nHowever, the issue is we are using the AssemblyVersion there, which isn't great information as all the models produced are showing:\r\n\r\n```\r\n1.0.0.0\r\n```\r\n\r\nWe should write the FileVersion or AssemblyInformationalVersion instead, which will give us the exact build and SHA:\r\n\r\n```\r\n[assembly: AssemblyFileVersion(\"0.12.27526.3\")]\r\n[assembly: AssemblyInformationalVersion(\"0.12.27526.3 @BuiltBy: dlab14-DDVSOWINAGE101 @Branch: master @SrcCode: https://github.com/dotnet/machinelearning/tree/9caafb04d2b4f298f2a9479a9550597afee32c94+9caafb04d2b4f298f2a9479a9550597afee32c94\")]\r\n````","Url":"https://github.com/dotnet/machinelearning/issues/3132","RelatedDescription":"Open issue \"Version.txt in model .zip should use the FileVersion, not AssemblyVersion\" (#3132)"},{"Id":"426686238","IsPullRequest":false,"CreatedAt":"2019-03-28T20:12:15","Actor":"CESARDELATORRE","Number":"3131","RawContent":null,"Title":"ONNX Unit Tests should be using the dynamic API, not the static/PIGSTY API","State":"open","Body":"The ONNX Unit Test samples are currently using static/PIGSTY API. This is getting a lot harder for any user to see how to run ONNX models in ML.NET.\r\n\r\nIn any case Unit Tests should use the API that the users have to use which is the DYNAMIC API, so we test the same API, right?\r\n\r\nSee here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.OnnxTransformerTest/OnnxTransformTests.cs#L180\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.OnnxTransformerTest/DnnImageFeaturizerTest.cs#L92\r\n\r\nPlease, migrate these ONNX Unit Test samples to the dynamic API (the current standard in ML.NET).\r\n\r\n@jignparm \r\n@prathyusha12345 \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3131","RelatedDescription":"Open issue \"ONNX Unit Tests should be using the dynamic API, not the static/PIGSTY API\" (#3131)"},{"Id":"426613687","IsPullRequest":false,"CreatedAt":"2019-03-28T17:16:09","Actor":"wschin","Number":"3130","RawContent":null,"Title":"CpuMath doesn't work as expected.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Linux, Windows, Mac. Basically [all debug builds](https://dev.azure.com/dnceng/public/_build/results?buildId=135940) in our CI.\r\n\r\n### Issue\r\n\r\n- **What did you do?** Call CpuMath to compute a matrix-vector product.\r\n- **What happened?** Memory not aligned.\r\n- **What did you expect?** All tests should just pass.\r\n\r\n### Source code / logs\r\n\r\nPlease take a look at [this PR](https://github.com/dotnet/machinelearning/pull/3124/files#diff-ce59b50bd87003b0ffb26912fc4a0e65).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3130","RelatedDescription":"Open issue \"CpuMath doesn't work as expected.\" (#3130)"},{"Id":"426463414","IsPullRequest":false,"CreatedAt":"2019-03-28T12:24:04","Actor":"CrystalWindSnake","Number":"3129","RawContent":null,"Title":"In CrossValidate use the same estimator in each fold?","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/0b638bfa226320099a74b5eb7e8ea5316f1843a1/src/Microsoft.ML.Data/TrainCatalog.cs#L90\r\n\r\nThe correct approach should be to use different estimator for each round of fitting, and is a deep cloned version of the estimator  from the parameter.","Url":"https://github.com/dotnet/machinelearning/issues/3129","RelatedDescription":"Open issue \"In CrossValidate use the same estimator in each fold?\" (#3129)"},{"Id":"426262875","IsPullRequest":false,"CreatedAt":"2019-03-28T02:16:26","Actor":"eerhardt","Number":"3128","RawContent":null,"Title":"Creating a prediction engine from a model with a TextFeaturizer takes too long","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nLoad the model and call `CreatePredictionEngine` on a pipeline that was created like this:\r\n\r\n```C#\r\n            var ml = new MLContext(seed: 1);\r\n            var data = ml.Data.LoadFromTextFile<SentimentData>(GetDataPath(TestDatasets.Sentiment.trainFilename), hasHeader: true);\r\n\r\n            // Pipeline.\r\n            var pipeline = ml.Transforms.Text.FeaturizeText(\"Features\", \"SentimentText\")\r\n                .AppendCacheCheckpoint(ml)\r\n                .Append(ml.BinaryClassification.Trainers.SdcaNonCalibrated(\r\n                    new SdcaNonCalibratedBinaryTrainer.Options { NumberOfThreads = 1 }));\r\n\r\n            // Train.\r\n            var model = pipeline.Fit(data);\r\n\r\n            var modelPath = GetOutputPath(\"temp.zip\");\r\n            // Save model. \r\n            ml.Model.Save(model, data.Schema, modelPath);\r\n\r\n            // Load model.\r\n            var loadedModel = ml.Model.Load(modelPath, out var inputSchema);\r\n\r\n            // Create prediction engine and test predictions.\r\n            var engine = ml.Model.CreatePredictionEngine<SentimentData, SentimentPrediction>(loadedModel, inputSchema);\r\n```\r\n\r\n- **What happened?**\r\nIt takes an incredible amount of time to `CreatePredictionEngine`. Using the attached model.zip\r\n[SentimentModel.zip](https://github.com/dotnet/machinelearning/files/3015931/SentimentModel.zip) it takes roughly 1.5 seconds for `CreatePredictionEngine` on my machine in a benchmark:\r\n\r\n|                 Method |    Mean |    Error |   StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|----------------------- |--------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n| CreatePredictionEngine | 1.516 s | 0.0302 s | 0.0461 s |  14000.0000 |   6000.0000 |           - |           146.35 MB |\r\n\r\n- **What did you expect?**\r\nI expected the model to load in a much shorter time with a lot less memory being allocated.\r\n\r\n### Source code / logs\r\n\r\nDoing a profile of the [Benchmark](https://github.com/glennc/Extensions.ML/blob/840211d64e1e165a124fd17020339479aac79231/benchmarks/micro/CreationBenchmarks.cs#L25-L29), I was able to get this flame graph:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/55124572-aa2ee680-50d4-11e9-8d5e-92fe5dc0846e.png)\r\n\r\nAs you can see, the two boxes show where we are writing a model and compressing it twice, just during the call to `CreatePredictionEngine`. This is because of the following code:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/beb67a128544ee98b8c4309859f7e5a9f679ac4e/src/Microsoft.ML.Transforms/Text/TextFeaturizingEstimator.cs#L663-L679\r\n\r\nHere, `TextFeaturizingEstimator.Transformer` is doing things the \"old way\" using `ApplyTransformUtils.ApplyAllTransformsToData`, which operates on `IDataTransform`s. This eventually gets into:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.Data/Utilities/ApplyTransformUtils.cs#L35-L52\r\n\r\nwhich is serializing and deserializing the transform, which is super expensive.\r\n\r\nThis happens twice because once inside `GetRowToRowMapper` and once inside `GetOutputSchema`.\r\n\r\nWe should optimize the text featurizing transform so creating a prediction engine isn't so slow.\r\n\r\n@TomFinley @glennc @CESARDELATORRE ","Url":"https://github.com/dotnet/machinelearning/issues/3128","RelatedDescription":"Open issue \"Creating a prediction engine from a model with a TextFeaturizer takes too long\" (#3128)"},{"Id":"426252611","IsPullRequest":false,"CreatedAt":"2019-03-28T01:28:55","Actor":"singlis","Number":"3127","RawContent":null,"Title":"API Reference needs to include expected column types","State":"open","Body":"## Issue\r\nOur API documentation for trainers, evaluate and cross validate need to specify the expected column types. \r\n\r\nFor example:\r\n```\r\nParameters\r\nlabelColumn\r\nString\r\nThe name of the label column.\r\n\r\nmatrixColumnIndexColumnName\r\nString\r\nThe name of the column hosting the matrix's column IDs.\r\n\r\nmatrixRowIndexColumnName\r\nString\r\nThe name of the column hosting the matrix's row IDs.\r\n```\r\nTaken from here:\r\n[Matrix Factorization Help](url)\r\n[](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.recommendationcatalog.recommendationtrainers.matrixfactorization?view=ml-dotnet#Microsoft_ML_RecommendationCatalog_RecommendationTrainers_MatrixFactorization_System_String_System_String_System_String_System_Int32_System_Double_System_Int32_)\r\n\r\nNote that this takes:\r\n* Label Column (really name of the label column) and that the type is string\r\n* MatrixIndexColumnName -- also string\r\n* MatrixRowIndexColumnName - also string\r\n\r\nThe type string provides no information on the actual expected/supported column type. \r\n\r\n## Expected\r\nThere needs to be more documentation regarding the column types that trainers are expecting and if that trainer will add additional columns as a result of the transformation.\r\n\r\n## Suggestion\r\nThis can be added to the parameter description, for example:\r\n`The name of the label column. The label column must be one of the following ColumnType: DataKind.Int64, DataKind.Float,...</param>\r\n`\r\nAdditional content regarding if columns are added and what those columns are should be added in the Remarks section. Columns that are added should also include their ColumnType as well.","Url":"https://github.com/dotnet/machinelearning/issues/3127","RelatedDescription":"Open issue \"API Reference needs to include expected column types\" (#3127)"},{"Id":"426245097","IsPullRequest":false,"CreatedAt":"2019-03-28T00:53:02","Actor":"singlis","Number":"3126","RawContent":null,"Title":"Catalog documentation is not in sync with the code","State":"open","Body":"## Issue\r\nOur documentation hierarchy is not  in sync with our code catalogs. For example, if you look at our Binary Classification Catalog:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.binaryclassificationcatalog?view=ml-dotnet\r\n\r\nIt contains a `Methods`  and `Properties` Links. If you drop down Properties, there is a `Trainers` but that page is fairly empty:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.binaryclassificationcatalog.trainers?view=ml-dotnet\r\n\r\nIf you look in other catalogs, you will eventually find the Binary Classification Trainers -- for example, LightGBM is located under LightGBM Extensions:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.lightgbmextensions.lightgbm?view=ml-dotnet\r\n\r\nHowever, this does not match what a user would see in code as you can type:\r\n`mlContext.BinaryClassification.Trainers.LightGBM`\r\n\r\nThe expectation is that a user should be able to navigate the API Catalog and view all of the functions under that catalog. \r\n\r\n## More info\r\nIt looks like the documentation tool is using the class name to determine the location of where the APIs are located:\r\nhttps://github.com/dotnet/machinelearning/blob/366332047340bdb12cf5fe2a11f9a6e257af9b84/src/Microsoft.ML.LightGbm/LightGbmCatalog.cs#L14\r\n\r\nMaybe there is a way we can override what the tool is using through an attribute? ","Url":"https://github.com/dotnet/machinelearning/issues/3126","RelatedDescription":"Open issue \"Catalog documentation is not in sync with the code\" (#3126)"},{"Id":"426238569","IsPullRequest":false,"CreatedAt":"2019-03-28T00:20:13","Actor":"codemzs","Number":"3125","RawContent":null,"Title":"FastTree should only accept Boolean labels for binary classification ","State":"open","Body":"In addition to #3119","Url":"https://github.com/dotnet/machinelearning/issues/3125","RelatedDescription":"Open issue \"FastTree should only accept Boolean labels for binary classification \" (#3125)"},{"Id":"426226464","IsPullRequest":true,"CreatedAt":"2019-03-27T23:26:46","Actor":"wschin","Number":"3124","RawContent":null,"Title":"Add doc string to explain matrix-vector product's SSE code and a test","State":"open","Body":"CpuMath library is not documented, so I add one for its matrix-vector product. Other functions look easier. A new test based on matrix factorization is also added --- we factorize training matrix into two factor matrices and then use CpuMath to compute their product.\r\n\r\nAlso fix #3130 by changing\r\n```csharp\r\n        private static bool Compat(AlignedArray a)\r\n        {\r\n            Contracts.AssertValue(a);\r\n            Contracts.Assert(a.Size > 0);\r\n            return a.CbAlign == Vector128Alignment;\r\n        }\r\n```\r\nto\r\n```csharp\r\n        private static bool Compat(AlignedArray a)\r\n        {\r\n            Contracts.AssertValue(a);\r\n            Contracts.Assert(a.Size > 0);\r\n            return a.CbAlign % Vector128Alignment == 0;\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3124","RelatedDescription":"Open PR \"Add doc string to explain matrix-vector product's SSE code and a test\" (#3124)"},{"Id":"426190863","IsPullRequest":false,"CreatedAt":"2019-03-27T21:25:43","Actor":"singlis","Number":"3121","RawContent":null,"Title":"DataKind U4 in error message with Matrix Factorization","State":"open","Body":"### System information\r\n\r\nWindows 10\r\nMicrosoft.ML.Recommenders 0.12.0-preview-27526-3\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan through the Movie Lens recommendation pipeline. \r\nDataset can be found from AzureML gallery:\r\nhttps://gallery.azure.ai/Experiment/Recommender-Movie-recommendation-3\r\n\r\n- **What happened?**\r\nThe UserId was set to Int32 - so when running the training, I get an error:\r\n\r\n> System.InvalidOperationException: 'Column 'UserId' with role MatrixColumnIndex should be a known cardinality U4 key, but is instead 'Int32''\r\n\r\n- **What did you expect?**\r\nNot to see U4 in the description as this tells me nothing. The error should say must be of KeyDataViewType. \r\n\r\n### Source code / logs\r\nHere is the sample code to reproduce:\r\n```\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers;\r\nusing System;\r\n\r\nnamespace ConsoleApp36\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            var mlContext = new MLContext();\r\n            var loader = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = new TextLoader.Column[]\r\n                {\r\n                    new TextLoader.Column(\"UserId\", DataKind.Int32, 0),\r\n                    new TextLoader.Column(\"MovieId\", DataKind.Int32, 1),\r\n                    new TextLoader.Column(\"Rating\", DataKind.Int32, 2),\r\n                    new TextLoader.Column(\"Timestamp\", DataKind.Int64, 3)\r\n                },\r\n                HasHeader = true,\r\n                Separators = new char[] { ',' }\r\n            });\r\n\r\n            var data = loader.Load(\"{path to data}/Movie Ratings.csv\");\r\n            var pipeline = mlContext.Recommendation().Trainers.MatrixFactorization(new MatrixFactorizationTrainer.Options()\r\n            {\r\n                MatrixColumnIndexColumnName = \"UserId\",\r\n                MatrixRowIndexColumnName = \"MovieId\",\r\n                LabelColumnName = \"Rating\"\r\n            });\r\n\r\n            var model = pipeline.Fit(data);\r\n            \r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHere is the line of code where this is occurring:\r\nhttps://github.com/dotnet/machinelearning/blob/366332047340bdb12cf5fe2a11f9a6e257af9b84/src/Microsoft.ML.Recommender/RecommenderUtils.cs#L65\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3121","RelatedDescription":"Open issue \"DataKind U4 in error message with Matrix Factorization\" (#3121)"},{"Id":"426168571","IsPullRequest":false,"CreatedAt":"2019-03-27T20:28:11","Actor":"eerhardt","Number":"3119","RawContent":null,"Title":"Prior binary trainer requires float label column, but all other binary trainers require bool","State":"open","Body":"Build a pipeline like:\r\n\r\n```C#\r\n            IEstimator<ITransformer> pipeline =\r\n                MLContext.Transforms.ReplaceMissingValues(\"FixedAcidity\", replacementMode: MissingValueReplacingEstimator.ReplacementMode.Mean)\r\n                .Append(MLContext.FloatToBoolLabelNormalizer())\r\n                .Append(MLContext.Transforms.Concatenate(\"Features\",\r\n                    new[]\r\n                    {\r\n                        \"FixedAcidity\",\r\n                        \"VolatileAcidity\",\r\n                        \"CitricAcid\",\r\n                        \"ResidualSugar\",\r\n                        \"Chlorides\",\r\n                        \"FreeSulfurDioxide\",\r\n                        \"TotalSulfurDioxide\",\r\n                        \"Density\",\r\n                        \"Ph\",\r\n                        \"Sulphates\",\r\n                        \"Alcohol\"}))\r\n                .Append(MLContext.BinaryClassification.Trainers.Prior());\r\n```\r\n\r\nScenario taken from [XamlBrewer.Uwp.MachineLearningSample](https://github.com/XamlBrewer/UWP-MachineLearning-Sample/blob/b7337d6e49e2109d9f028c1942aa2b409d3bfb9c/XamlBrewer.Uwp.MachineLearningSample/Models/BinaryClassification/BinaryClassificationModel.cs#L18-L35) with the \"Random\" trainer changed to the \"Prior\" trainer.\r\n\r\nWhen you try to fit this pipeline, you get an exception:\r\n\r\n```\r\n{System.ArgumentOutOfRangeException: Invalid type for Label column\r\nParameter name: data\r\n \tMicrosoft.ML.Core.dll!Microsoft.ML.Runtime.Contracts.CheckParam(Microsoft.ML.Runtime.IExceptionContext ctx, bool f, string paramName, string msg) Line 542\tC#\r\n \tMicrosoft.ML.StandardTrainers.dll!Microsoft.ML.Trainers.PriorTrainer.Train(Microsoft.ML.TrainContext context) Line 235\tC#\r\n \tMicrosoft.ML.StandardTrainers.dll!Microsoft.ML.Trainers.PriorTrainer.Microsoft.ML.ITrainer<Microsoft.ML.Trainers.PriorModelParameters>.Train(Microsoft.ML.TrainContext context) Line 274\tC#\r\n \tMicrosoft.ML.StandardTrainers.dll!Microsoft.ML.Trainers.PriorTrainer.Fit(Microsoft.ML.IDataView input) Line 222\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.ITransformer>.Fit(Microsoft.ML.IDataView input) Line 67\tC#\r\n>\tXamlBrewer.Uwp.MachineLearningSample.exe!XamlBrewer.Uwp.MachineLearningSample.Models.BinaryClassificationModel.BuildAndTrain(string trainingDataPath, Microsoft.ML.IEstimator<Microsoft.ML.ITransformer> algorithm) Line 46\tC#\r\n````\r\n\r\nIt appears the `Prior` binary trainer can only take `float` labels:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/45b6c43387294d19cad843a21e87539213e8d34c/src/Microsoft.ML.StandardTrainers/Standard/Simple/SimpleTrainers.cs#L233\r\n\r\nHowever, all other binary trainers require the label column to be a `boolean`.\r\n\r\ncc @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/3119","RelatedDescription":"Open issue \"Prior binary trainer requires float label column, but all other binary trainers require bool\" (#3119)"},{"Id":"426162471","IsPullRequest":true,"CreatedAt":"2019-03-27T20:12:56","Actor":"codemzs","Number":"3118","RawContent":null,"Title":"Move Normalizer extension method from experimental to stable nuget.","State":"open","Body":"fixes #3109\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3118","RelatedDescription":"Open PR \"Move Normalizer extension method from experimental to stable nuget.\" (#3118)"},{"Id":"426160622","IsPullRequest":false,"CreatedAt":"2019-03-27T20:08:26","Actor":"artidoro","Number":"3117","RawContent":null,"Title":"Need a sample for saving and loading CustomMapping Transform","State":"open","Body":"We currently only have a simple sample to use the custom mapping transform, but saving and loading is a bit more involved and a sample about that would be very useful.\r\n\r\nHere is the current sample that we have:\r\nhttps://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CustomMappingSample.cs\r\n\r\nHere is a test that shows how to save and load the custom mapping transform:\r\nhttps://github.com/dotnet/machinelearning/blob/366332047340bdb12cf5fe2a11f9a6e257af9b84/test/Microsoft.ML.Tests/Transformers/CustomMappingTests.cs#L33-L85","Url":"https://github.com/dotnet/machinelearning/issues/3117","RelatedDescription":"Open issue \"Need a sample for saving and loading CustomMapping Transform\" (#3117)"},{"Id":"426160408","IsPullRequest":true,"CreatedAt":"2019-03-27T20:07:53","Actor":"codemzs","Number":"3116","RawContent":null,"Title":"Cleanup unused method in Normalizer Estimator.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3116","RelatedDescription":"Open PR \"Cleanup unused method in Normalizer Estimator.\" (#3116)"},{"Id":"426149447","IsPullRequest":true,"CreatedAt":"2019-03-27T19:52:48","Actor":"wwExpert","Number":"3115","RawContent":null,"Title":"Support for CNTK","State":"closed","Body":"Hello, what is the reason that there is no support for CNTK? I think it´s easier to support CNTK instead of tensorflow. \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3115","RelatedDescription":"Closed or merged PR \"Support for CNTK\" (#3115)"},{"Id":"426147593","IsPullRequest":false,"CreatedAt":"2019-03-27T19:36:27","Actor":"ganik","Number":"3114","RawContent":null,"Title":"DropSlot transform is needed","State":"open","Body":"Consider this code snippet:\r\n```\r\nvar defaultPipeline = ml.Transforms.Text.FeaturizeText(\"TextFeatures\", \"Text\")\r\n.Append(ml.Transforms.ProjectToPrincipalComponents(\"PC\", \"TextFeatures\", null, 10))\r\n.Append(ml.Transforms.DropSlots(\"ShortenedPC\", \"PC\", new int[] { 0, 1}))  // drop slots 0 & 1\r\n```\r\nCurrently its not possible bcs SlotDroppingTransform is not exposed. The workaround is to use CustomMapping which is bit cumbersome.\r\n```\r\n        public class InputRow\r\n        {\r\n            [VectorType(10)]\r\n            public float[] PC;\r\n        }\r\n        public class OutputRow\r\n        {\r\n            [VectorType(8)]\r\n            public float[] PCA = new float[8];\r\n        }\r\n...\r\nAction<InputRow, OutputRow> mapping =\r\n                (input, output) => Array.Copy(input.PC, 2, output.PCA, 0, 8);\r\n\r\nvar defaultPipeline = ml.Transforms.Text.FeaturizeText(\"TextFeatures\", \"Text\")\r\n.Append(ml.Transforms.ProjectToPrincipalComponents(\"PC\", \"TextFeatures\", null, 10))\r\n.Append(ml.Transforms.CustomMapping(mapping, null))\r\n            \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3114","RelatedDescription":"Open issue \"DropSlot transform is needed\" (#3114)"},{"Id":"426130540","IsPullRequest":true,"CreatedAt":"2019-03-27T18:54:11","Actor":"codemzs","Number":"3113","RawContent":null,"Title":"Baseline test for MultiClassNaiveBayes.","State":"open","Body":"fixes #3112","Url":"https://github.com/dotnet/machinelearning/pull/3113","RelatedDescription":"Open PR \"Baseline test for MultiClassNaiveBayes.\" (#3113)"},{"Id":"426130356","IsPullRequest":false,"CreatedAt":"2019-03-27T18:53:46","Actor":"codemzs","Number":"3112","RawContent":null,"Title":"Baseline test for Multiclass Naive bayes","State":"open","Body":"Add baseline test for multiclass naive bayes that will be used to detect any changes in numerical calculations caused by modifications in low level routines downstream or even in the algorithm itself.","Url":"https://github.com/dotnet/machinelearning/issues/3112","RelatedDescription":"Open issue \"Baseline test for Multiclass Naive bayes\" (#3112)"},{"Id":"426129530","IsPullRequest":false,"CreatedAt":"2019-03-27T18:51:54","Actor":"Ivanidzo4ka","Number":"3111","RawContent":null,"Title":"Shall we add option to OneHotEncoding to treat each slot separately?","State":"open","Body":"So I'm having file with 39 categorical features.\r\nI'm too lazy to write text loader with 39 columns for them, so I just slap ` new TextLoader.Column(\"CatFeatures\", DataKind.String, 190, 228),`\r\n\r\nNow during one hot encoding we will build one huge dictionary for all slots. And I would get huge indicator vector in the end.\r\nI'm not sure is it actually bad, or not.\r\n\r\nBut if it's bad, I would prefer to have option in OneHotEncoding to treat each slot separately, since am too lazy to write `TextLoader.Column` definition 39 times. Or maybe we can have some kind of \r\n`TextLoader.Columns(\"Prefix\", DataKind.String, 190,228)` object and it would automatically create me 39 columns of `Prefix01`, `Prefix02`, .., `Prefix39` with specified type.\r\n ","Url":"https://github.com/dotnet/machinelearning/issues/3111","RelatedDescription":"Open issue \"Shall we add option to OneHotEncoding to treat each slot separately?\" (#3111)"},{"Id":"426119725","IsPullRequest":false,"CreatedAt":"2019-03-27T18:29:14","Actor":"Ivanidzo4ka","Number":"3110","RawContent":null,"Title":"Absence of dataview joins","State":"open","Body":"In some cases data and labels present in two different files.\r\nRight now I have no way to load data in through one text loader, labels though another text loader and join them together.","Url":"https://github.com/dotnet/machinelearning/issues/3110","RelatedDescription":"Open issue \"Absence of dataview joins\" (#3110)"},{"Id":"426117711","IsPullRequest":false,"CreatedAt":"2019-03-27T18:24:35","Actor":"eerhardt","Number":"3109","RawContent":null,"Title":"Microsoft.ML nuget package no longer has a way to specify number of bins for binning normalization","State":"open","Body":"In `v0.11.0`, it was possible to write code like the following:\r\n\r\n```C#\r\nvar normalizer = mLContext.Transforms.Normalize(\r\n    new NormalizingEstimator.BinningColumnOptions(outputColumnName: \"Label\", numBins: 2));\r\n```\r\n\r\nThis allowed you to create a `binning` normalizer with the number of bins set to `2`.\r\n\r\nHowever, this API is no longer public in `Microsoft.ML`. There is a public API where you can specify `mode: NormalizingEstimator.NormalizationMode.Binning`, but there is no way to set the number of bins. So when you use this mode, you always `MaximumBinCount` set to the default `1024`.","Url":"https://github.com/dotnet/machinelearning/issues/3109","RelatedDescription":"Open issue \"Microsoft.ML nuget package no longer has a way to specify number of bins for binning normalization\" (#3109)"},{"Id":"426115561","IsPullRequest":false,"CreatedAt":"2019-03-27T18:19:43","Actor":"yaeldekel","Number":"3108","RawContent":null,"Title":"`LossFunction` in regression metric is confusing","State":"open","Body":"The regression evaluator reports the following metrics: `MeanAbsoluteError`, `MeanSquaredError`, `RootMeanSquaredError`, `RSquared` and `LossFunction`.\r\n\r\n`LossFunction` reports a loss that can theoretically be specified by the user, but there is no public API that exposes this.\r\nI think we should either remove `LossFunction` from the `RegressionMetrics` class, or rename it to be its default value (`SquaredLoss`). Actually, it seems that `SquaredLoss` is identical to `MeanSquaredError`, so we should probably remove (or internalize) this field. ","Url":"https://github.com/dotnet/machinelearning/issues/3108","RelatedDescription":"Open issue \"`LossFunction` in regression metric is confusing\" (#3108)"},{"Id":"426095558","IsPullRequest":false,"CreatedAt":"2019-03-27T17:36:00","Actor":"yaeldekel","Number":"3106","RawContent":null,"Title":"It's hard to create a TextLoader column of type key","State":"open","Body":"It seems that the only way to create a key column for `TextLoader` is using this constructor:\r\n\r\n```\r\npublic Column(string name, DataKind dataKind, TextLoader.Range[] source, KeyCount keyCount = null)\r\n```\r\n\r\nShould we consider adding an optional `KeyCount` argument to the other constructors?\r\n\r\n```\r\npublic Column(string name, DataKind dataKind, int index);\r\npublic Column(string name, DataKind dataKind, int minIndex, int maxIndex);\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3106","RelatedDescription":"Open issue \"It's hard to create a TextLoader column of type key\" (#3106)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-29T05:30:32.5239044Z","RunDurationInMilliseconds":595}