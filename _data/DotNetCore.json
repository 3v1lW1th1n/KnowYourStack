{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.11 – Machine Learning for .NET","PublishedOn":"2019-03-09T01:03:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-11-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null},{"Title":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0","PublishedOn":"2019-03-05T22:14:48+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Starting back with the .NET Core 2.1 release, we were making iterative improvements to the floating-point parsing and formatting code in .NET Core. Now, in .NET Core 3.0 Preview 3, we are nearing...","Href":"https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container","PublishedOn":"2019-03-05T19:31:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Introduction\nIn recent years, containerization has gained popularity in DevOps due to its valuable capacities, including more efficient resource utilization and better agility. Microsoft and Docker...","Href":"https://devblogs.microsoft.com/dotnet/collecting-net-core-linux-container-cpu-traces-from-a-sidecar-container/","RawContent":null},{"Title":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-03-01T18:25:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, March 1, we released the February 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-1-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"An update to C# versions and C# tooling","PublishedOn":"2019-02-27T18:59:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Starting with Visual Studio 2019 Preview 4 and RC, we&#8217;ll be adjusting how C# versions are treated in .NET tooling.\nSummary of changes\nFirstly, we&#8217;re adding two new Language Version...","Href":"https://devblogs.microsoft.com/dotnet/an-update-to-c-versions-and-c-tooling/","RawContent":null},{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9225246598","Type":"PullRequestEvent","CreatedAt":"2019-03-12T10:03:37","Actor":"devlead","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Opened pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""},{"Id":"9214022828","Type":"PullRequestEvent","CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Opened pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9208392766","Type":"IssuesEvent","CreatedAt":"2019-03-08T19:00:06","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"9208389675","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:32","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Merged pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9208386555","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Merged pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9208386542","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"9208384997","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Merged pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9208384964","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"9208383052","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:27","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Merged pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9178188648","Type":"PullRequestEvent","CreatedAt":"2019-03-04T22:18:31","Actor":"jkonicki","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Opened pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9168056662","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Opened pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9168030118","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Opened pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9163318579","Type":"PullRequestEvent","CreatedAt":"2019-03-01T15:37:52","Actor":"glennawatson","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Opened pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9142546450","Type":"IssuesEvent","CreatedAt":"2019-02-26T23:12:20","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/75","RelatedDescription":"Closed issue \"Fix mailto link on Team page\" (#75) at dotnet/foundation","RelatedBody":"When visiting [https://dotnetfoundation.org/team](https://dotnetfoundation.org/team), I noticed that the email icon under **Miklos Barkoczi**'s name has `mailto:` referenced twice. It may be obvious to some, but not to others.\r\n\r\n```\r\n<a href=\"mailto:mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```\r\nshould be\r\n```\r\n<a href=\"mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."},{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9254960977","Type":"IssuesEvent","CreatedAt":"2019-03-16T04:31:00","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17816","RelatedDescription":"Closed issue \"ResourceManager doesn't take the SatelliteContractVersion attribute into account\" (#17816) at dotnet/coreclr","RelatedBody":"I have a third-party .NET Standard 2.0 class library built with MSBuild via VisualStudio. The library has the SatelliteContractVersion attribute. The corresponding satellite assembly with localization resources has an assembly version that differs from the main library's assembly version.\r\nThe main assembly is loaded successfully by the .NET Framework 4.6.1 and .NET Core framework. But the satellite assembly is loaded only if an application that uses the library is built with .NET Framework 4.6.1. \r\n \r\nThe issue occurs in .NET Core because the ResourceManager.GetSatelliteContractVersion() method always returns the 'null' value. So the ResourceManager in .NET Core ignores the version of the satellite assembly, which is specified in the SatelliteContractVersion attribute of the main assembly. Instead, the ResourceManager tries to load the satellite assembly with the version specified in the AssemblyVersion attribute of the main assembly.\r\n\r\nFor example, the following attributes are applied to the assembly:\r\n- [assembly: AssemblyVersion(\"1.2.3.4\")]\r\n- [assembly: SatelliteContractVersion(\"1.2.0.0\")]\r\n\r\nAfter building using MSBuild, the following assemblies are created:\r\n- a main assembly \"A.dll\" with version 1.2.3.4;\r\n- a satellite assembly \"A.resources.dll\" with version 1.2.0.0.\r\n\r\n.NET Core framework loads assembly \"A.dll\" with version 1.2.3.4 and tries to load the \"A.resource.dll\" assembly with version 1.2.3.4.\r\n\r\n.NET Framework 4.6.1 loads assembly \"A.dll\" with version 1.2.3.4 and tries to load the \"A.resouces.dll\" assembly with version 1.2.0.0.\r\n\r\nThe issue leads to different behavior if the existing libraries with the SatelliteContractVersionAttribute are built by MSBuild in .NET Framework applications and .NET Core applications."},{"Id":"9254956902","Type":"PullRequestEvent","CreatedAt":"2019-03-16T04:27:58","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23244","RelatedDescription":"Merged pull request \"Introduce COMPlus arm64 HW intrinsics knobs\" (#23244) at dotnet/coreclr","RelatedBody":"Adds variables to disable each HW intrinsics class.\r\n\r\nFixes #20708"},{"Id":"9254956899","Type":"IssuesEvent","CreatedAt":"2019-03-16T04:27:58","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20708","RelatedDescription":"Closed issue \"Expose ARM64 architecture flags as COMPlus variables\" (#20708) at dotnet/coreclr","RelatedBody":"All the ARM64 JIT flags that are passed by the VM to enable architectural features should be available as COMPlus variables. This will be especially useful for working with the ARM64 altjit.\r\n\r\nThese are the relevant JIT flags:\r\n```\r\nJIT_FLAG_HAS_ARM64_AES\r\nJIT_FLAG_HAS_ARM64_ATOMICS\r\nJIT_FLAG_HAS_ARM64_CRC32\r\nJIT_FLAG_HAS_ARM64_DCPOP\r\nJIT_FLAG_HAS_ARM64_DP\r\nJIT_FLAG_HAS_ARM64_FCMA\r\nJIT_FLAG_HAS_ARM64_FP\r\nJIT_FLAG_HAS_ARM64_FP16\r\nJIT_FLAG_HAS_ARM64_JSCVT\r\nJIT_FLAG_HAS_ARM64_LRCPC\r\nJIT_FLAG_HAS_ARM64_PMULL\r\nJIT_FLAG_HAS_ARM64_SHA1\r\nJIT_FLAG_HAS_ARM64_SHA256\r\nJIT_FLAG_HAS_ARM64_SHA512\r\nJIT_FLAG_HAS_ARM64_SHA3\r\nJIT_FLAG_HAS_ARM64_SIMD\r\nJIT_FLAG_HAS_ARM64_SIMD_V81\r\nJIT_FLAG_HAS_ARM64_SIMD_FP16\r\nJIT_FLAG_HAS_ARM64_SM3\r\nJIT_FLAG_HAS_ARM64_SM4\r\nJIT_FLAG_HAS_ARM64_SVE\r\n```\r\n"},{"Id":"9254956260","Type":"IssuesEvent","CreatedAt":"2019-03-16T04:27:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23281","RelatedDescription":"Closed issue \"downstream Failure\" (#23281) at dotnet/coreclr","RelatedBody":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_throughput_linux_arm_flow/3538/\r\n\r\nfailed log:\r\nSchedule job dotnet_coreclr � perf � master � perf_throughput_linux_arm_build\r\nBuild dotnet_coreclr � perf � master � perf_throughput_linux_arm_build #1305 started\r\ndotnet_coreclr � perf � master � perf_throughput_linux_arm_build #1305 completed  : FAILURE\r\n[BFA] Scanning build for known causes...\r\n[BFA] No failure causes found\r\n[BFA] Done. 0s\r\n[BFA] Found downstream Failure causes ..."},{"Id":"9254954249","Type":"IssuesEvent","CreatedAt":"2019-03-16T04:25:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23280","RelatedDescription":"Closed issue \"ERROR: Failed to archive artifacts: bin-Product-Linux.arm.Release.tgz\" (#23280) at dotnet/coreclr","RelatedBody":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_throughput_linux_arm_build/1305/\r\n\r\nfailed log:\r\nERROR: Failed to archive artifacts: bin-Product-Linux.arm.Release.tgz\r\nCommand close created at\r\n\tat hudson.remoting.Command.<init>(Command.java:60)\r\n\tat hudson.remoting.Channel$CloseCommand.<init>(Channel.java:1219)\r\n\tat hudson.remoting.Channel$CloseCommand.<init>(Channel.java:1217)\r\n\tat hudson.remoting.Channel.close(Channel.java:1391)\r\n\tat hudson.remoting.Channel.close(Channel.java:1358)\r\n\tat hudson.remoting.Channel$CloseCommand.execute(Channel.java:1224)\r\nCaused: hudson.remoting.Channel$OrderlyShutdown\r\n\tat hudson.remoting.Channel$CloseCommand.execute(Channel.java:1225)\r\n\tat hudson.remoting.Channel$1.handle(Channel.java:560)\r\n\tat hudson.remoting.SynchronousCommandTransport$ReaderThread.run(SynchronousCommandTransport.java:87)\r\nCaused: java.io.IOException\r\n\tat hudson.remoting.FastPipedInputStream.read(FastPipedInputStream.java:169)\r\n\tat hudson.util.HeadBufferingStream.read(HeadBufferingStream.java:61)\r\n\tat com.jcraft.jzlib.InflaterInputStream.fill(InflaterInputStream.java:175)\r\n\tat com.jcraft.jzlib.InflaterInputStream.read(InflaterInputStream.java:106)\r\n\tat org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(TarArchiveInputStream.java:614)\r\n\tat java.io.InputStream.read(InputStream.java:101)\r\n\tat org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1792)\r\n\tat org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1769)\r\n\tat org.apache.commons.io.IOUtils.copy(IOUtils.java:1744)\r\n\tat hudson.util.IOUtils.copy(IOUtils.java:40)\r\n\tat hudson.FilePath.readFromTar(FilePath.java:2307)\r\nAlso:   <cycle to hudson.remoting.Channel$OrderlyShutdown>\r\n\tCaused: hudson.remoting.RequestAbortedException\r\n\t\tat hudson.remoting.Request.abort(Request.java:329)\r\n\t\tat hudson.remoting.Channel.terminate(Channel.java:992)\r\n\t\tat hudson.remoting.Channel$CloseCommand.execute(Channel.java:1225)\r\n\t\tat hudson.remoting.Channel$1.handle(Channel.java:560)\r\n\t\tat hudson.remoting.SynchronousCommandTransport$ReaderThread.run(SynchronousCommandTransport.java:87)\r\n\tCaused: java.util.concurrent.ExecutionException\r\n\t\tat hudson.remoting.Request$1.get(Request.java:308)\r\n\t\tat hudson.remoting.Request$1.get(Request.java:229)\r\n\t\tat hudson.remoting.FutureAdapter.get(FutureAdapter.java:59)\r\n\t\tat hudson.FilePath.copyRecursiveTo(FilePath.java:2224)\r\nCaused: java.io.IOException: Failed to extract /mnt/j/w/dotnet_coreclr/perf/master/perf_throughput_linux_arm_build/transfer of 1 files\r\n\tat hudson.FilePath.readFromTar(FilePath.java:2317)\r\n\tat hudson.FilePath.copyRecursiveTo(FilePath.java:2221)\r\n\tat jenkins.model.StandardArtifactManager.archive(StandardArtifactManager.java:61)\r\n\tat hudson.tasks.ArtifactArchiver.perform(ArtifactArchiver.java:245)\r\n\tat hudson.tasks.BuildStepCompatibilityLayer.perform(BuildStepCompatibilityLayer.java:81)\r\n\tat org.jenkins_ci.plugins.flexible_publish.builder.FailFastBuilder.perform(FailFastBuilder.java:102)\r\n\tat org.jenkins_ci.plugins.run_condition.BuildStepRunner$2.run(BuildStepRunner.java:110)\r\n\tat org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail.conditionalRun(BuildStepRunner.java:154)\r\n\tat org.jenkins_ci.plugins.run_condition.BuildStepRunner.perform(BuildStepRunner.java:105)\r\n\tat org.jenkins_ci.plugins.flexible_publish.strategy.FailFastExecutionStrategy.perform(FailFastExecutionStrategy.java:63)\r\n\tat org.jenkins_ci.plugins.flexible_publish.ConditionalPublisher.perform(ConditionalPublisher.java:206)\r\n\tat org.jenkins_ci.plugins.flexible_publish.FlexiblePublisher.perform(FlexiblePublisher.java:124)\r\n\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)\r\n\tat hudson.model.Build$BuildExecution.post2(Build.java:186)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)\r\n\tat hudson.model.Run.execute(Run.java:1749)\r\n\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\tat hudson.model.Executor.run(Executor.java:429)"},{"Id":"9254910293","Type":"PullRequestEvent","CreatedAt":"2019-03-16T03:54:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23275","RelatedDescription":"Merged pull request \"Brbohe/si var loc equals\" (#23275) at dotnet/coreclr","RelatedBody":"Add operators != and == in order to express more in asserts like [on this PR](https://github.com/dotnet/coreclr/blob/6ca8df07ec277ecf6a486cdf022f957476d53980/src/jit/compiler.cpp#L11549-L11550).\r\n\r\nI include this as a separate PR because of the size of the other."},{"Id":"9254896788","Type":"PullRequestEvent","CreatedAt":"2019-03-16T03:44:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22396","RelatedDescription":"Merged pull request \"Rename private GetEntryAssembly QCall overload\" (#22396) at dotnet/coreclr","RelatedBody":"To avoid issues with existing private reflection-based code that now gets a parameter count mismatch exception.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35068\r\ncc: @jkotas"},{"Id":"9254869363","Type":"IssuesEvent","CreatedAt":"2019-03-16T03:26:09","Actor":"jorive","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23299","RelatedDescription":"Opened issue \"[EventPipe] Pending IPC work items\" (#23299) at dotnet/coreclr","RelatedBody":"## Pending IPC work items\r\n- [ ] Handle shutdown\r\n- [ ] Add tests\r\n- [ ] Handle multiple clients\r\n- [ ] Add streaming functionality\r\n    - [ ] Syncronus\r\n    - [ ] Asyncronous\r\n- [ ] Repurpose LF_REMOTING (currently used under the Diagnostics STRESS_LOG usage)\r\n- [ ] Replace the use of LOG under the Diagnostics Server with STRESS_LOG"},{"Id":"9254805705","Type":"PullRequestEvent","CreatedAt":"2019-03-16T02:45:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23204","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/arcade\" (#23204) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19161.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19162.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19162.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19162.7\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9254689425","Type":"IssuesEvent","CreatedAt":"2019-03-16T01:37:47","Actor":"swaroop-sridhar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10986","RelatedDescription":"Opened issue \"Supporting third party libraries/frameworks \" (#10986) at dotnet/cli","RelatedBody":"Recently, we had enquiries for a customer who wanted to deploy their own custom framework on client machines. This discussion is about possible solutions for this scenario in .Net Core 3.\r\n \r\n## Customer requirements\r\n \r\nThe developer wants to:\r\n* Implement a suite of several libraries, that are used by several client apps.\r\n* Deploy one copy of library-suite on client machines in a central location\r\n* Push updates to the library-suite without having to recompile the client apps\r\n* Is happy to change their library-suite/apps to target .net core 3\r\n \r\nIn particular, the customer specifically asked allowing third party frameworks (similar to standard frameworks like `Microsoft.AspNetCore.App`).\r\n\r\n## Solution Options\r\n \r\n### Additional-deps\r\nThis is a simple solution to separate some of the app’s dependencies to a separate (possible shared) location. This option involves:\r\n* App development: Remove references to the library-suite from the apps, instead use a different light-up option such as startup-hook.\r\n* On client machines: Deploy the library-suite to a shared location, and set up `DOTNET_ADDITIONAL_DEPS` when apps are run.\r\n\r\nAdditional-deps have several known limitations, for example, as noted here.\r\n \r\n### Startup Hook\r\nThis option involves dynamically loading the library-suite into apps during application startup. \r\n* This requires setting `DOTNET_STARTUP_HOOKS` to appropriate loader code on client machines at app-startup. The loader code can then use custom logic to load the library-suite from a possible shared/versioned location.\r\n* This may require some coordination with other parties (ex: profiler) that may use the startup-hook (multiple assemblies can be hooked up at startup).\r\n\r\n### Custom AppHost\r\nThe library developer provides a custom host to be used by the app-developers. The custom host will then setup the appropriate library dependencies during app startup, before starting the runtime.\r\n \r\n### Components\r\nThis option is to load the library-suite as a plugin, where:\r\n* The library-suite exposes a minimal version (similar to reference assemblies) which only exposes the public API, and implements stub code to load the implementation assemblies dynamically.\r\n* Apps build with a package-reference to the suite.\r\nAt runtime, the above stub code loads the actual library code (say, using the AssemblyDependencyResolver), from a possibly shared location.\r\n \r\n### Third-party frameworks\r\nIn this option, the library-suite is published as a framework. This naturally achieves the customer requirements because:\r\n* The library-suite is published as a nuget package that contains:\r\n    * Its reference assemblies\r\n    * A target file that can be imported by the apps to include this suite as an additional target framework\r\n* Apps import/reference the above nuget package and ship independent of the library-suite’s implementation\r\n* The implementation assemblies of the library-suite are installed to `dotnet/shared/<library-suite>/<version>` on client machines. (one-copy shared, versioned location).\r\n \r\nThe above approach is straight-forward for developers to use. However, support for third-party frameworks is not yet officially available. \r\n\r\nI tried out a prototype, and was able to load a custom framework from a shared location (with some work-arounds for issues discussed below).\r\n \r\n### Pending work\r\nHere’s the known required work, there will likely be more as we productize this feature:\r\n* Tooling for adding frameworks: It should easy to add a framework to the list of dependent frameworks published in the `runtimeconfig.json` file (ex: add a framework to `RuntimeFramework` item). However, currently doesn’t work in the CLI because the property is overwritten by one of the build tasks. This should be a straightforward issue to fix.\r\n* Mismatched shared framework versions can cause problems: dotnet/core-setup#4947. This is again a bug that should be fixed.\r\n \r\n### Reservations\r\nWhile we agree that supporting third-party frameworks is useful for developers, there are some reservations about making this feature publicly available in .Net Core 3. The concerns are:\r\n* Bugs: We have a controlled environment with known frameworks. Custom frameworks may trigger unforeseen bugs. It is better to let the multiple-frameworks feature bake with existing framework for a release cycle.\r\n* Framework references: There are unresolved issues with supporting custom framework-references (which are not exposed by using third-party frameworks with package-references).\r\n* Install location:  Unanticipated issues with custom code within `dotnet` install location (`dotnet/shared/…`).\r\n* Design limitation: We have previously excluded custom frameworks from .net core 3. We may redesign the issue in .net core 3.1. But exposing the feature now may create a compatibility requirement, and restrict design options. Note that users may themselves figure out and use custom frameworks – but these are not supported by the `dotnet` org.\r\n \r\n## Discussion\r\n \r\nPlease add your thoughts / considerations about:\r\n* Exposing the possibility of third-party frameworks to customers, say as a sample.\r\n* Any other options to solve the customer scenario.\r\n* Similar usage scenarios\r\n"},{"Id":"9254214374","Type":"IssuesEvent","CreatedAt":"2019-03-15T22:34:42","Actor":"MichaelSimons","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10985","RelatedDescription":"Opened issue \"'Exec format error' when running global tool on ARM32\" (#10985) at dotnet/cli","RelatedBody":"Installing a global tool on ARM32 doesn't run.  Fails with `cannot execute binary file: Exec format error`.\r\n\r\n# Repro Steps\r\n1. Requirement - run from an ARM32 machine.  \r\n1. docker run -it --rm mcr.microsoft.com/dotnet/core/sdk:3.0\r\n1. dotnet tool install --tool-path /mytool <some tool compiled against the 3.0 runtime>\r\n1. cd /mytool \r\n1. ./<tool name>\r\n\r\n# Results\r\n\r\ncannot execute binary file: Exec format error`\r\n\r\n# Expected Results\r\n\r\nThe tool should run\r\n\r\n# Observations\r\n1. I verified this scenario works for 2.1 but not 3.0.\r\n1. This was discovered with testing installing Powershell as a global tool - https://github.com/dotnet/dotnet-docker/pull/960#discussion_r266060183\r\n"},{"Id":"9253729544","Type":"PullRequestEvent","CreatedAt":"2019-03-15T20:46:37","Actor":"Potapy4","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10984","RelatedDescription":"Opened pull request \"Fix typo\" (#10984) at dotnet/cli","RelatedBody":"- Rename from `.Net` to `.NET`"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9254621912","Type":"IssuesEvent","CreatedAt":"2019-03-16T01:01:15","Actor":"tommcdon","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/922","RelatedDescription":"Closed issue \"AccessViolationException/FatalExecutionEngineError: Using net. standard and netfx\" (#922) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nI stumbled over a rather scary bug:\r\nI am trying to port https://github.com/OlegZee/NEbml to net. standard 2.0.\r\nPorting itself is straight forward...\r\nBut the example program (netfx) crashed with a TypeLoadException each time it actually loaded the ported core library (now net. standard).\r\nI extracted some of the code into three small projects for reproduction:\r\n\"Crashes\" - runner code which just calls one method of Trouble (net 4.7.1)\r\n\"Trouble\" - Contains one struct with one static method (net. standard 2.0)\r\n\"Works\" - runner code which just calls one method of Trouble (net core)\r\n[Download](https://github.com/dotnet/standard/files/2497987/Trouble.zip)\r\n\r\nMost of the time, there is an AccessViolationException after the method returns to the console program.\r\nSome times there is a FatalExecutionEngineError.\r\nSo the reproduction project has a more severe exception than the original project, but I guess that's \"ok\".\r\nAll projects are written in *pure* managed code and have the complexity of \"hello world\".\r\n\r\nAny ideas?\r\n\r\nI hope I filed this issue correctly and that I have not overlooked something.\r\n\r\nbest regards,"},{"Id":"9253387547","Type":"PullRequestEvent","CreatedAt":"2019-03-15T19:40:49","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1102","RelatedDescription":"Opened pull request \"Expose RandomNumberGenerator.GetInt32\" (#1102) at dotnet/standard","RelatedBody":"Fixes #1101."},{"Id":"9242369580","Type":"IssuesEvent","CreatedAt":"2019-03-14T11:50:04","Actor":"khellang","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1101","RelatedDescription":"Opened issue \"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32\" (#1101) at dotnet/standard","RelatedBody":"I'd like to propose the inclusion of the new `System.Security.Cryptography.RandomNumberGenerator.GetInt32` APIs, added in https://github.com/dotnet/corefx/pull/31243.\r\n\r\nAs noted in https://github.com/dotnet/corefx/issues/30873, this is often incorrectly implemented, which can lead to security vulnerabilities and bias. It would be nice if it was part of the standard, to have a convenient API for this across all platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex ec34484..2b7d68b 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -810,6 +810,8 @@ namespace System.Security.Cryptography\r\n         public virtual void GetBytes(System.Span<byte> data) { }\r\n         public virtual void GetNonZeroBytes(byte[] data) { }\r\n         public virtual void GetNonZeroBytes(System.Span<byte> data) { }\r\n+        public static int GetInt32(int fromInclusive, int toExclusive) { throw null; }\r\n+        public static int GetInt32(int toExclusive) { throw null; }\r\n     }\r\n     [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]\r\n     public abstract partial class RC2 : System.Security.Cryptography.SymmetricAlgorithm\r\n\r\n```"},{"Id":"9239201944","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:20:27","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/675","RelatedDescription":"Closed issue \"Trimming task footprint is too large\" (#675) at dotnet/standard","RelatedBody":"There's probably a perf issue here too.  We're using the NuGet ProjectModel OM for loading the project.assets.json when we only need to read out package ID relationships.  We could do this with much smaller JSON-based reader.  Ideally it wouldn't parse the entire file (which can be huge) when we only need the package relationships."},{"Id":"9239198047","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:19:22","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/688","RelatedDescription":"Closed issue \"Flesh out \"multi-packages\"\" (#688) at dotnet/standard","RelatedBody":"In the fix for https://github.com/dotnet/standard/issues/680 I added special behavior for \"multi-packages\" where they can be treated as trimmable until all assets are included.\r\n\r\nThis works well in the case of a package that's multiple dlls, but what about:\r\n1. Single DLL + content\r\n2. Single DLL + native dll(s)\r\n3. Many DLL + content\r\n\r\nFor 1 I don't think we should consider it a multi-package: nothing will typically root content and we don't want to trim it.\r\nFor 2 I don't think we should consider it a multi-package, though in the common case we'll probably still identify roots to the native DLLs through DllImport probing.\r\nFor 3 we almost need a special case where we will root the content but not the other DLLs.  Alternatively we could punt on this and force folks to root the packages."},{"Id":"9239196442","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:18:53","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/689","RelatedDescription":"Closed issue \"Fix DllImport probing\" (#689) at dotnet/standard","RelatedBody":"CoreCLR allows for more variations of DllImport probing:\r\nhttps://github.com/dotnet/coreclr/blob/430331c011a0460670e2743ab08caa36f914f52d/src/vm/dllimport.cpp#L6066-L6084\r\nhttps://github.com/dotnet/coreclr/blob/e7bb40f52d46671f5001012284a2f54eaa658e35/src/pal/inc/pal.h#L5259-L5265\r\nAs a result we should update our list:\r\nhttps://github.com/dotnet/standard/blob/2bb3279f4adc6da02ee8a191904828f7e024226e/Microsoft.Packaging.Tools.Trimming/tasks/FileNode.cs#L272\r\n\r\nToday it's missing the prefixes.\r\n"},{"Id":"9239191509","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:17:37","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/693","RelatedDescription":"Closed issue \"Trimming logging is misleading and insufficient\" (#693) at dotnet/standard","RelatedBody":"For shared framework applications we list out files being trimmed that will never deploy with the application.  We should see if we can more accurately represent the trimmed set, or at least don't make any claims about the size savings for shared framework apps.\r\n\r\nAlso there is a large cliff between the amount of information by default and the DGML.  We should look at something in between that provides normal status info (eg: files trimmed) that isn't quite as overwhelming as the DGML."},{"Id":"9239191113","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:17:30","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/789","RelatedDescription":"Closed issue \"Add release notes for the trimming package\" (#789) at dotnet/standard","RelatedBody":"We need to have our own link for release notes for the trimming package.\r\n\r\nIt should be a FWLink that points to a github issue / document of some sort that lists out the details of the release, bugs fixed, etc."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9254896783","Type":"IssuesEvent","CreatedAt":"2019-03-16T03:44:55","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35068","RelatedDescription":"Closed issue \"Microsoft.Extensions.PlatformAbstractions broken on .NET Core 3.0 preview 2\" (#35068) at dotnet/corefx","RelatedBody":"I understand that Microsoft.Extensions.PlatformAbstractions is \"somewhat deprecated\" but I suspect there are plenty of class libraries that still depend on it. (The one I'm interested in is Google.Api.Gax; we use it to report the framework version in HTTP headers.)\r\n\r\nThe expression in question is:\r\n\r\n```\r\nMicrosoft.Extensions.PlatformAbstractions.PlatformServices.Default?.Application?.RuntimeFramework?.Version\r\n```\r\n\r\nThis has worked fine with .NET Core until now, but under .NET Core 3.0 preview 2, we get an exception:\r\n\r\n```text\r\nUnhandled Exception: System.TypeInitializationException: The type initializer for 'Microsoft.Extensions.PlatformAbstractions.PlatformServices' threw an exception. ---> System.Reflection.TargetParameterCountException: Parameter count mismatch.\r\n   at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n   at Microsoft.Extensions.PlatformAbstractions.ApplicationEnvironment.GetEntryAssembly()\r\n   at Microsoft.Extensions.PlatformAbstractions.ApplicationEnvironment..ctor()\r\n   at Microsoft.Extensions.PlatformAbstractions.PlatformServices..ctor()\r\n   at Microsoft.Extensions.PlatformAbstractions.PlatformServices..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Extensions.PlatformAbstractions.PlatformServices.get_Default()\r\n```\r\n\r\nI would expect .NET Core 3.0 to be compatible with older versions of .NET Core - if it's not, that's a pretty unfortunate story for class library developers.\r\n\r\nI've confirmed that I *can* use `System.Reflection.Assembly.GetEntryAssembly().GetCustomAttribute<TargetFrameworkAttribute>().FrameworkName` from netstandard1.3 (the .NET Standard version I'm targeting in the class library) - I'll need to do a bit of parsing, but it's all feasible. That only helps users who are able to update to a newer version of my library though - it feels to me like it shouldn't be necessary.\r\n\r\n[This](https://github.com/aspnet/PlatformAbstractions/blob/master/src/Microsoft.Extensions.PlatformAbstractions/ApplicationEnvironment.cs#L55) looks like the code that's throwing in `PlatformAbstractions`:\r\n\r\n```csharp\r\nvar getEntryAssemblyMethod =\r\n    typeof(Assembly).GetMethod(\"GetEntryAssembly\", BindingFlags.Static | BindingFlags.NonPublic) ??\r\n    typeof(Assembly).GetMethod(\"GetEntryAssembly\", BindingFlags.Static | BindingFlags.Public);\r\nreturn getEntryAssemblyMethod.Invoke(obj: null, parameters: Array.Empty<object>()) as Assembly;\r\n```\r\n\r\nObviously using reflection invites compatibility issues, but is there any reason we can't preserve a parameterless `GetEntryAssembly` method for compatibility?"},{"Id":"9254779164","Type":"IssuesEvent","CreatedAt":"2019-03-16T02:29:17","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33829","RelatedDescription":"Closed issue \"\"The system cannot find the file specified\" in System.Security.Cryptography.X509Certificates\" (#33829) at dotnet/corefx","RelatedBody":"failed in job: \r\nhttps://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_windows_nt_release/7455\r\n\r\nfailed log: \r\n```\r\n[12/4/2018 5:03:41 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: True, responseLength: 1)\r\n  [12/4/2018 5:03:41 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: True, responseLength: 1): The system cannot find the file specified.\r\n  [12/4/2018 5:03:41 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n     at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n     at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n     at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n     at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n     at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\J\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n     at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\J\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n     at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n     at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n```"},{"Id":"9254665903","Type":"IssuesEvent","CreatedAt":"2019-03-16T01:24:23","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36087","RelatedDescription":"Opened issue \"Utf8JsonReader has inconsistent handling with multiple values at depth 0\" (#36087) at dotnet/corefx","RelatedBody":"```C#\r\n[Theory]\r\n[InlineData(JsonCommentHandling.Allow)]\r\n[InlineData(JsonCommentHandling.Disallow)]\r\n[InlineData(JsonCommentHandling.Skip)]\r\npublic static void ReadLiteralWithExtraValue(JsonCommentHandling handling)\r\n{\r\n    byte[] utf8 = Encoding.UTF8.GetBytes(\"  true  5 \");\r\n\r\n    JsonReaderState state = new JsonReaderState(\r\n        new JsonReaderOptions()\r\n        {\r\n            CommentHandling = handling,\r\n        });\r\n\r\n    Utf8JsonReader reader = new Utf8JsonReader(utf8, false, state);\r\n    Assert.True(reader.Read());\r\n}\r\n```\r\n\r\nThis fails for comment modes Allow and Disallow, throwing on the first call to `Read()`, and succeeds for the Skip mode.  (Similar behavior appears for false, null, numbers, and strings)\r\n\r\nContrast with complex values:\r\n\r\n```C#\r\n[Theory]\r\n[InlineData(JsonCommentHandling.Allow)]\r\n[InlineData(JsonCommentHandling.Disallow)]\r\n[InlineData(JsonCommentHandling.Skip)]\r\npublic static void ReadArrayWithExtra(JsonCommentHandling handling)\r\n{\r\n    byte[] utf8 = Encoding.UTF8.GetBytes(\"  [  ]  5 \");\r\n\r\n    JsonReaderState state = new JsonReaderState(\r\n        new JsonReaderOptions()\r\n        {\r\n            CommentHandling = handling,\r\n        });\r\n\r\n    Utf8JsonReader reader = new Utf8JsonReader(utf8, false, state);\r\n    Assert.True(reader.Read());\r\n    Assert.Equal(JsonTokenType.StartArray, reader.TokenType);\r\n    Assert.True(reader.Read());\r\n    Assert.Equal(JsonTokenType.EndArray, reader.TokenType);\r\n\r\n    try\r\n    {\r\n        reader.Read();\r\n        Assert.True(false, \"Read threw\");\r\n    }\r\n    catch (JsonReaderException)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThis test passes in all three comment modes (similarly for object).\r\n"},{"Id":"9254660431","Type":"PullRequestEvent","CreatedAt":"2019-03-16T01:21:26","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36084","RelatedDescription":"Merged pull request \"Fix and re-enable some HttpListener authentication tests\" (#36084) at dotnet/corefx","RelatedBody":"The Negotiate and NTLM HttpListener tests were disabled due to a behavior of running them\r\non loopback using an HttpClient with WinHttpHandler. But now the default handler for HttpClient\r\nis SocketsHttpHandler. And it doesn't have this problem with loopback authentication.\r\n\r\nCloses #20604"},{"Id":"9254660425","Type":"IssuesEvent","CreatedAt":"2019-03-16T01:21:26","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/20604","RelatedDescription":"Closed issue \"WinHttpHandler authentication behavior\" (#20604) at dotnet/corefx","RelatedBody":"- [ ] IsWindowsImplementation/IsNotWindowsImplementation is incorrect and prevents some of the tests from executing on certain platforms (see #20341 for a potential fix in GetContextHelper.cs).\r\n\r\n- [ ] The following tests fail on both .Net Framework (on my machine) as well as on .Net Core (for details and a possible fix see #20341 and comments within that PR.) \r\n\r\n```NtlmAuthentication_Conversation_ReturnsExpectedType2Message\r\nNtlmAuthentication_InvalidRequestHeaders_ReturnsExpectedStatusCode\r\nNegotiateAuthentication_Conversation_ReturnsExpectedType2Message\r\nNegotiateAuthentication_InvalidRequestHeaders_ReturnsExpectedStatusCode\r\n```\r\n- [ ] After the fix proposed in #20341 some of the test variations are expected to fail due to a behavior difference in WinHTTP/Negotiate when connecting to localhost servers.\r\n\r\nFor more information also see #20096"},{"Id":"9254431484","Type":"IssuesEvent","CreatedAt":"2019-03-15T23:42:03","Actor":"richlander","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36086","RelatedDescription":"Opened issue \".NET Core Process APIs not Consistent (or always useful) in all situations\" (#36086) at dotnet/corefx","RelatedBody":"# .NET Core Process APIs not Consistent (or always useful) in all situations\r\n\r\nThe Process APIs should return accurate and useful values in all situations. I wrote a [simple app that uses all the memory APIs](https://gist.github.com/richlander/6a88c41e06dc92751fa28e43124796cf) I could find. I am happy to add more if people direct me to them.\r\n\r\nMajor take-aways:\r\n\r\n* Multiple properties return a value of 0 on Unix.\r\n* `Process.MaxWorkingSet` != `memory.limit_in_bytes` when memory limited\r\n* `Process.WorkingSet64` != `memory.usage_in_bytes`\r\n\r\nRelated issues:\r\n\r\n* [PrivateMemorySize64](https://github.com/dotnet/corefx/issues/23449)\r\n* [Process.MaxWorkingSet should read from /sys/fs/cgroup/memory when available](https://github.com/dotnet/corefx/issues/35638)\r\n\r\n## On Windows\r\n\r\n```console\r\nC:\\testapps\\memory>dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Microsoft Windows 10.0.17763\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 204800\r\nProcess.MaxWorkingSet: 1413120\r\nProcess.PeakWorkingSet64: 15667200\r\nProcess.WorkingSet64: 15663104\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 267993088\r\nProcess.PrivateMemorySize64: 267993088\r\nProcess.NonpagedSystemMemorySize64: 42288\r\nProcess.PagedMemorySize64: 267993088\r\nProcess.PagedSystemMemorySize64: 138040\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2307580309504\r\nProcess.PeakVirtualMemorySize64: 2307580309504\r\n```\r\n\r\n## On Linux\r\n\r\n```console\r\nrich@tofino:~/memory$ dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Linux 3.10.105-bsp-1.2 #2 SMP PREEMPT Sat Oct 27 19:24:05 IST 2018\r\nOS Arch: Arm64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 18436096\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2735525888\r\nProcess.PeakVirtualMemorySize64: 0\r\n\r\n***CGroup*********\r\nCGroup usage: 1644941312\r\nCGroup memory limit: 9223372036854775807\r\n```\r\n\r\n## On macOS\r\n\r\n```console\r\nRichards-MacBook-Pro:memory rich$ dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Darwin 18.2.0 Darwin Kernel Version 18.2.0: Thu Dec 20 20:46:53 PST 2018; root:xnu-4903.241.1~1/RELEASE_X86_64\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 18923520\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 6893395968\r\nProcess.PeakVirtualMemorySize64: 0\r\n```\r\n\r\n## On WSL\r\n\r\n```console\r\nrich@phantomlake:/mnt/c/testapps/memory$ ~/dotnet/dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Linux 4.4.0-17763-Microsoft #253-Microsoft Mon Dec 31 17:49:00 PST 2018\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 17985536\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 84865474560\r\nProcess.PeakVirtualMemorySize64: 0\r\n```\r\n\r\n## On Linux running in a Debian container on Windows\r\n\r\n```console\r\nC:\\testapps\\memory>docker run --rm -v c:\\testapps\\memory:/app -w /app mcr.microsoft.com/dotnet/core-nightly/sdk:3.0 dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27508-07\r\nOS: Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 25559040\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2689052672\r\nProcess.PeakVirtualMemorySize64: 0\r\n\r\n***CGroup*********\r\nCGroup usage: 76718080\r\nCGroup memory limit: 9223372036854771712\r\n```\r\n## On Linux running in a Debian container on Windows -- memory-limited to 100MB\r\n\r\n```console\r\nC:\\testapps\\memory>docker run -m 100mb --rm -v c:\\testapps\\memory:/app -w /app mcr.microsoft.com/dotnet/core-nightly/sdk:3.0 dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27508-07\r\nOS: Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 25604096\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2688528384\r\nProcess.PeakVirtualMemorySize64: 0\r\n\r\n***CGroup*********\r\nCGroup usage: 72470528\r\nCGroup memory limit: 104857600\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9255003040","Type":"PullRequestEvent","CreatedAt":"2019-03-16T05:02:54","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34193","RelatedDescription":"Closed pull request \"Update README.md\" (#34193) at dotnet/roslyn","RelatedBody":"Investigating a test failure on Linux CI"},{"Id":"9254979978","Type":"PullRequestEvent","CreatedAt":"2019-03-16T04:45:36","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34153","RelatedDescription":"Merged pull request \"Remove earlier NullableReferenceTypes documentation\" (#34153) at dotnet/roslyn","RelatedBody":""},{"Id":"9254962155","Type":"PullRequestEvent","CreatedAt":"2019-03-16T04:31:57","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34193","RelatedDescription":"Opened pull request \"Update README.md\" (#34193) at dotnet/roslyn","RelatedBody":"Investigating a test failure on Linux CI"},{"Id":"9254780503","Type":"IssuesEvent","CreatedAt":"2019-03-16T02:30:08","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34192","RelatedDescription":"Opened issue \"Debugger fails on async lambda function\" (#34192) at dotnet/roslyn","RelatedBody":"Using .net core 2.2 c# ver 7.3 debugger fails on async lambda function (returning task) passed as parameter to another function.\n\nThe code works as expected but debugging experience is broken. Only breakpoint present after first await keyword is honored. Sometimes debugger passes several times over calling function. This can be reproduced by a trivial sample application (see bellow).\n\n\nusing System;\nusing System.Threading.Tasks;\n\ninternal class Program\n{\n    private static async Task Main(string[] args)\n    {\n        // Call Method1\n        await CallAsyncFunction(async () =&gt;\n        {\n            // Place a break point on this row\n            Console.WriteLine(&quot;A&quot;);\n            // Place a break point on this row \n            await Task.Delay(100);\n            // Place a break point on this row \n            Console.WriteLine(&quot;B&quot;);\n            await Task.Delay(100);\n            Console.WriteLine(&quot;C&quot;);\n        });\n\n        Console.ReadLine();\n    }\n\n    private static async Task CallAsyncFunction(Func&lt;Task&gt; func)\n    {\n        await func();\n    }\n}\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489653/debugger-fails-on-async-lambda-function.html\nVSTS ticketId: 820585_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/14/2019, 11:12 PM (20 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"9254763790","Type":"PullRequestEvent","CreatedAt":"2019-03-16T02:19:31","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34156","RelatedDescription":null,"RelatedBody":""},{"Id":"9254715860","Type":"IssuesEvent","CreatedAt":"2019-03-16T01:52:22","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34191","RelatedDescription":"Opened issue \"Go to implementation throws The Symbol has no implementations - ONLY for parameterized methods\" (#34191) at dotnet/roslyn","RelatedBody":"VSF_TYPE_MARKDOWNWhen I hit Go to implementation on a method in Visual Studio 2017 or 2019 Preview 3 - (started happening only on .Net core solution, .Net framework 4.7 works fine) - it throws &quot;The Symbol has no implementations&quot; pop up. \nI know this has been reported and you marked some of them as being duplicate but reporting since i found a narrowing condition. \n\nIf the method in question DOES NOT have parameters (e.g. public void MethodA()) then it works. It throws the error ONLY for methods with parameters. There you go, if that helps at all. \n\nWill be great to have this resolved because it is very annoying and cumbersome to navigate to methods behind the Interface without it. \n\nThanks!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/470557/go-to-implementation-throws-the-symbol-has-no-impl.html\nVSTS ticketId: 802805_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/26/2019, 07:06 PM (16 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"9254643711","Type":"IssuesEvent","CreatedAt":"2019-03-16T01:12:36","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34190","RelatedDescription":"Opened issue \"Move EventHookup to EditorFeatures layer\" (#34190) at dotnet/roslyn","RelatedBody":"Currently EventHookup code is in the VisualStudio layer. To be consumed by VS for Mac it would be nice to move it down to EditorFeatures. From cursory glance we haven't found dependencies that would be hard to isolate from VS.\r\n\r\nCurrently VSMac has a copy of the code."},{"Id":"9254594426","Type":"IssuesEvent","CreatedAt":"2019-03-16T00:47:42","Actor":"kendrahavens","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34189","RelatedDescription":"Opened issue \"Suggest format specifiers based on type\" (#34189) at dotnet/roslyn","RelatedBody":"[Original developer community feedback](https://developercommunity.visualstudio.com/content/idea/482533/suggest-format-specifiers-based-on-type.html)\r\n\r\n> I have a TimeSpan object, which I need to convert into a string. When I typed ToString(\"\"), I expected to see a list of common format specifiers with examples that I could use to autocomplete my line. Sadly, this is something that Resharper provides that I have come to rely on, and it's missing in Visual Studio 2019.\r\n\r\n> My example above speaks specifically to TimeSpan objects, but it applies generally to DateTime, numerics and any other type that accepts format specifiers, both as as an argument to ToString() and inside interpolated strings.\r\n\r\n> Intellisense suggests potential methods, events, properties, etc. I'm talking about suggestions for format specifiers when calling ToString().\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Type the code below\r\n```csharp\r\nDateTime.Now.ToString(\"\r\n```\r\n\r\n**Expected Behavior**:\r\nWhen you type the quote (\") you get a autocomplete suggestion like this:\r\n```\r\nt - short time                                               6:30\r\nD - long date                             Thursday, 10 April 2008\r\nd - short date                                         04/10/2008\r\nF - full date long               Thursday, 10 April 2008 06:30:00\r\nf - full date short                 Thursday, 10 April 2008 06:30\r\nG - general long                              04/10/2008 06:30:00\r\n.\r\n.\r\n(etc)\r\n```\r\n\r\nJust arrow down to the one you need and hit Enter.\r\n\r\nSimilar autocomplete suggestions are available for numeric types and TimeSpan, to name a few.\r\n"},{"Id":"9254540986","Type":"IssuesEvent","CreatedAt":"2019-03-16T00:22:54","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34188","RelatedDescription":"Opened issue \"View in Object Browser Fails for Local Projet\" (#34188) at dotnet/roslyn","RelatedBody":"VSF_TYPE_MARKDOWNI get an error diagnostic when I try to view one of my projects in the Object Browser.\n\nThe image shows a local project highlighted, as well as the diagnostic after I right-click it and select View in Object Browser.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/487037/view-in-object-browser-fails-for-local-projet.html\nVSTS ticketId: 818783_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/13/2019, 00:54 AM (2 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 3/15/2019, 03:18 PM (4 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"9254501237","Type":"IssuesEvent","CreatedAt":"2019-03-16T00:07:02","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34187","RelatedDescription":"Opened issue \"EnC test scenario: Multi-process updates\" (#34187) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n![image](https://user-images.githubusercontent.com/41759/54467476-8a95d680-4742-11e9-9f7b-3788cb3e0eb9.png)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Extract \r\n[MultiProcess.zip](https://github.com/dotnet/roslyn/files/2973242/MultiProcess.zip) to a directory and open MultiProcess.sln.\r\n\r\n2. Build the solution.\r\n3. Place breakpoint on `Console.WriteLine(2);` statement in `Program2.cs`.\r\n4. Debug project `ConsoleApp2` (F5)\r\n5. When the breakpoint is hit, switch to command line and run `MultiProcess\\ConsoleApp1\\bin\\Debug\\ConsoleApp1.exe`.\r\n6. Attache VS to process ConsoleApp1 (managed debugging)\r\n7. Open file `C.cs` and change statement `Console.WriteLine(\"lib\");` to `Console.WriteLine(\"lib - after edit\");`.\r\n8. Place breakpoint on the changed statement (`Console.WriteLine(\"lib - after edit\");`).\r\n9. F5 to apply the changes and continue debugging\r\n10. Switch to command line and hit `Enter`\r\n11. F5 to continue executing in ConsoleApp1\r\n\r\n**Expected Behavior**:\r\n\r\nAn error is reported that the change can't be applied since `ClassLibrary1.dll` is loaded to two processes: ConsoleApp1 and ConsoleApp2 and only one of the processes allows Edit and Continue. ConsoleApp1 does not allow EnC since we attached to it. \r\n\r\n**Actual Behavior**:\r\n\r\nThe edit is applied only in ConsoleApp2 and when the breakpoint in `C.cs` is hit the source code does not correspond to the actual code that's being executed.\r\n\r\n![image](https://user-images.githubusercontent.com/41759/54467806-be71fb80-4744-11e9-9cae-8774e5dda48f.png)\r\n"},{"Id":"9254483444","Type":"PullRequestEvent","CreatedAt":"2019-03-16T00:00:36","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34186","RelatedDescription":"Opened pull request \"Merge master to features/readonly-members\" (#34186) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9254483135","Type":"PullRequestEvent","CreatedAt":"2019-03-16T00:00:31","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34185","RelatedDescription":"Opened pull request \"Merge master to features/NullableDogfood\" (#34185) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9254482769","Type":"PullRequestEvent","CreatedAt":"2019-03-16T00:00:25","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34184","RelatedDescription":"Opened pull request \"Merge master to features/lspSupport\" (#34184) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9254482573","Type":"PullRequestEvent","CreatedAt":"2019-03-16T00:00:21","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34183","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#34183) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9254482374","Type":"PullRequestEvent","CreatedAt":"2019-03-16T00:00:17","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34182","RelatedDescription":"Opened pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#34182) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9254918461","Type":"IssuesEvent","CreatedAt":"2019-03-16T04:00:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6773","RelatedDescription":"Closed issue \"Simple Console App fails to build in Visual Studio\" (#6773) at dotnet/corert","RelatedBody":"Hi I tried to publish an empty console application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIt fails with the message:\r\nThe \"ComputeManagedAssemblies\" task could not be loaded from the assembly C:\\Users\\tftom\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27305-01\\build\\..\\tools\\ILCompiler.Build.Tasks.dll. Could not load file or assembly 'ILCompiler.Build.Tasks, Version=999.999.999.999, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nI used the following publish config:\r\n![image](https://user-images.githubusercontent.com/5387192/50726330-0143a180-110c-11e9-8dd7-eed67ce9ee01.png)\r\n\r\nI have installed the latest .net core 2.2 sdk"},{"Id":"9254916734","Type":"PullRequestEvent","CreatedAt":"2019-03-16T03:58:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7175","RelatedDescription":"Merged pull request \"Delete exclusions of selected upstack framework binaries\" (#7175) at dotnet/corert","RelatedBody":""},{"Id":"9254589805","Type":"PullRequestEvent","CreatedAt":"2019-03-16T00:45:25","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7176","RelatedDescription":"Opened pull request \"Dotnet publish support for ready-to-run images\" (#7176) at dotnet/corert","RelatedBody":"* Publishing MSBuild script changes to enable dotnet publish support with `<NativeCodeGen>ReadyToRun</NativeCodeGen>` set in the project file.\r\n    * To enable for a project, add a reference to `Microsoft.DotNet.ILCompiler` package, enable ready-to-run compilation with `<NativeCodeGen>readytorun</NativeCodeGen>` in the project file. Assemblies can be skipped by adding the assembly filename (without extension) to the `ReadyToRunSkipAssembly` item.\r\n    * In ready-to-run mode, the `BuildAllReadyToRunAssemblies` target is used to trigger ILC instead of the `LinkNative` target (which is used for single-file RyuJit mode). `BuildAllReadyToRunAssemblies` compiles assemblies in parallel through nested invocations of MSBuild, each optimizing a single assembly.\r\n    * Sub-invocations of MSBuild use the same project file but override the set of targets that are run, restricting the targets to just collecting the list of dependencies to reference and invoking IlcCompile. This keeps the compilation context the same so all intermediates and binaries go into the same bin and obj directories.\r\n* Add a functional test (WebApi) that is built using the live built compiler in this tree which starts up Asp.Net Core and sends a web request to it.\r\n* Remove .ni extension for produced images to match Crossgen\r\n* Remove the ReadyToRunMultiModule test. It is not an interesting test now we are able to compile all the assemblies in a published .NET Core app."},{"Id":"9253584653","Type":"PullRequestEvent","CreatedAt":"2019-03-15T20:18:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7175","RelatedDescription":"Opened pull request \"Delete exclusions of selected upstack framework binaries\" (#7175) at dotnet/corert","RelatedBody":""},{"Id":"9252560957","Type":"PullRequestEvent","CreatedAt":"2019-03-15T17:19:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7174","RelatedDescription":"Merged pull request \"Make NativeCallable method static\" (#7174) at dotnet/corert","RelatedBody":"I was checking something for an internal customer when I noticed this. Well, the Project N compiler noticed it. We track validation on CoreRT side in #6893."},{"Id":"9252554933","Type":"PullRequestEvent","CreatedAt":"2019-03-15T17:18:51","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7173","RelatedDescription":"Merged pull request \"Don't root reflection-blocked types and methods\" (#7173) at dotnet/corert","RelatedBody":"Noticed this while working on the previous fix.\r\n\r\nReflection scanner correctly detects reflection light up here:\r\n\r\nhttps://github.com/dotnet/corert/blob/132884042966b874c830c6012e7293d70148b933/src/System.Private.CoreLib/shared/System/Resources/ResourceReader.cs#L796-L799\r\n\r\nBut since `CreateUntypedDelegate` is reflection blocked, the generated method body is useless. This then shows up as a diff between scanning phase and compilation phase (usage based metadata analyzer won't pass this additional root to the compilation phase, because the method is not a reflection root - it's compiled, but not reflection visible)."},{"Id":"9252547849","Type":"PullRequestEvent","CreatedAt":"2019-03-15T17:17:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7171","RelatedDescription":"Merged pull request \"Fix protocol between UsageBased and AnalysisBased metadata managers\" (#7171) at dotnet/corert","RelatedBody":"In #7042 I made it possible to express reflectability of something purely based on canonical code presence (so if e.g. `Foo<__Canon>..ctor` is compiled, `Foo<__Canon>..ctor` should be considered reflectable). Previously we only considered reflectability of concrete instantiations.\r\n\r\nThis was not reflected in the protocol between usage based and analysis based metadata managers: usage based manager was forgetting to tell the analysis based metadata manager about canonical bodies. As a result, places that relied on marking canonical bodies to make things reflectable (such as RD.XML and `--rootallapplicationassemblies`) were not getting that behavior when IL scanner was involved (optimized builds).\r\n\r\nFixes #7169."},{"Id":"9252547830","Type":"IssuesEvent","CreatedAt":"2019-03-15T17:17:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7169","RelatedDescription":"Closed issue \"SampleWebApi sample crashes with MissingRuntimeArtifactException\" (#7169) at dotnet/corert","RelatedBody":"Repro:\r\n\r\n```\r\ncd Samples\\WebApi\r\ndotnet publish -c Release -r win-x64\r\nbin\\x64\\Release\\netcoreapp2.1\\win-x64\\publish\\SampleWebApi.exe\r\n```\r\n\r\nResult:\r\n```\r\nUnhandled Exception: EETypeRva:0x01468718(System.Reflection.MissingRuntimeArtifactException): This object cannot be invoked because it was metadata-enabled for browsing only: 'Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration<Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider>..ctor(Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory)' For more information, please visit  http://go.microsoft.com/fwlink/?LinkID=616867\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimePlainConstructorInfo`1.get_UncachedMethodInvoker() + 0xa1\r\n   at System.Reflection.Runtime.MethodInfos.RuntimePlainConstructorInfo`1.Invoke(BindingFlags, Binder, Object[], CultureInfo) + 0x65\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x9e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite, ServiceProviderEngineScope) + 0x52\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite, ServiceProviderEngineScope) + 0x16\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite, ServiceProviderEngineScope) + 0x52\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider, Type) + 0x5e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider) + 0x29\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build() + 0xd1\r\n```\r\n"},{"Id":"9252473998","Type":"PullRequestEvent","CreatedAt":"2019-03-15T17:06:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7172","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7172) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @justinvp"},{"Id":"9252300660","Type":"PullRequestEvent","CreatedAt":"2019-03-15T16:41:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7174","RelatedDescription":"Opened pull request \"Make NativeCallable method static\" (#7174) at dotnet/corert","RelatedBody":"I was checking something for an internal customer when I noticed this. Well, the Project N compiler noticed it. We track validation on CoreRT side in #6893."},{"Id":"9251533413","Type":"PullRequestEvent","CreatedAt":"2019-03-15T14:58:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7173","RelatedDescription":"Opened pull request \"Don't root reflection-blocked types and methods\" (#7173) at dotnet/corert","RelatedBody":"Noticed this while working on the previous fix.\r\n\r\nReflection scanner correctly detects reflection light up here:\r\n\r\nhttps://github.com/dotnet/corert/blob/132884042966b874c830c6012e7293d70148b933/src/System.Private.CoreLib/shared/System/Resources/ResourceReader.cs#L796-L799\r\n\r\nBut since `CreateUntypedDelegate` is reflection blocked, the generated method body is useless. This then shows up as a diff between scanning phase and compilation phase (usage based metadata analyzer won't pass this additional root to the compilation phase, because the method is not a reflection root - it's compiled, but not reflection visible)."},{"Id":"9251501614","Type":"PullRequestEvent","CreatedAt":"2019-03-15T14:53:56","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7172","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7172) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9251373402","Type":"PullRequestEvent","CreatedAt":"2019-03-15T14:37:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7171","RelatedDescription":"Opened pull request \"Fix protocol between UsageBased and AnalysisBased metadata managers\" (#7171) at dotnet/corert","RelatedBody":"In #7042 I made it possible to express reflectability of something purely based on canonical code presence (so if e.g. `Foo<__Canon>..ctor` is compiled, `Foo<__Canon>..ctor` should be considered reflectable). Previously we only considered reflectability of concrete instantiations.\r\n\r\nThis was not reflected in the protocol between usage based and analysis based metadata managers: usage based manager was forgetting to tell the analysis based metadata manager about canonical bodies. As a result, places that relied on marking canonical bodies to make things reflectable (such as RD.XML and `--rootallapplicationassemblies`) were not getting that behavior when IL scanner was involved (optimized builds).\r\n\r\nFixes #7169."},{"Id":"9248590473","Type":"PullRequestEvent","CreatedAt":"2019-03-15T06:41:43","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7167","RelatedDescription":"Merged pull request \"SuperIlc show compile failures\" (#7167) at dotnet/corert","RelatedBody":"Couple small quality of life improvements:\r\n* After compiling all assemblies, write a list of compilation failures to the console\r\n* Emit ready-to-run images without the `.ni` part of the extension. This was initially useful so we knew which images were R2R but the CoreCLR loader expects the app host in a .NET Core app to be a .dll and Crossgen doesn't use `.ni` anymore."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9253615224","Type":"PullRequestEvent","CreatedAt":"2019-03-15T20:24:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3020","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3020) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-12T10:03:36","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Open PR \"Add Dave to cake.md\" (#138)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Open PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"421381811","IsPullRequest":false,"CreatedAt":"2019-03-16T04:27:28","Actor":"v-haren","Number":"23281","RawContent":null,"Title":"downstream Failure","State":"closed","Body":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_throughput_linux_arm_flow/3538/\r\n\r\nfailed log:\r\nSchedule job dotnet_coreclr � perf � master � perf_throughput_linux_arm_build\r\nBuild dotnet_coreclr � perf � master � perf_throughput_linux_arm_build #1305 started\r\ndotnet_coreclr � perf � master � perf_throughput_linux_arm_build #1305 completed  : FAILURE\r\n[BFA] Scanning build for known causes...\r\n[BFA] No failure causes found\r\n[BFA] Done. 0s\r\n[BFA] Found downstream Failure causes ...","Url":"https://github.com/dotnet/coreclr/issues/23281","RelatedDescription":"Closed issue \"downstream Failure\" (#23281)"},{"Id":"421380862","IsPullRequest":false,"CreatedAt":"2019-03-16T04:25:52","Actor":"v-haren","Number":"23280","RawContent":null,"Title":"ERROR: Failed to archive artifacts: bin-Product-Linux.arm.Release.tgz","State":"closed","Body":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_throughput_linux_arm_build/1305/\r\n\r\nfailed log:\r\nERROR: Failed to archive artifacts: bin-Product-Linux.arm.Release.tgz\r\nCommand close created at\r\n\tat hudson.remoting.Command.<init>(Command.java:60)\r\n\tat hudson.remoting.Channel$CloseCommand.<init>(Channel.java:1219)\r\n\tat hudson.remoting.Channel$CloseCommand.<init>(Channel.java:1217)\r\n\tat hudson.remoting.Channel.close(Channel.java:1391)\r\n\tat hudson.remoting.Channel.close(Channel.java:1358)\r\n\tat hudson.remoting.Channel$CloseCommand.execute(Channel.java:1224)\r\nCaused: hudson.remoting.Channel$OrderlyShutdown\r\n\tat hudson.remoting.Channel$CloseCommand.execute(Channel.java:1225)\r\n\tat hudson.remoting.Channel$1.handle(Channel.java:560)\r\n\tat hudson.remoting.SynchronousCommandTransport$ReaderThread.run(SynchronousCommandTransport.java:87)\r\nCaused: java.io.IOException\r\n\tat hudson.remoting.FastPipedInputStream.read(FastPipedInputStream.java:169)\r\n\tat hudson.util.HeadBufferingStream.read(HeadBufferingStream.java:61)\r\n\tat com.jcraft.jzlib.InflaterInputStream.fill(InflaterInputStream.java:175)\r\n\tat com.jcraft.jzlib.InflaterInputStream.read(InflaterInputStream.java:106)\r\n\tat org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(TarArchiveInputStream.java:614)\r\n\tat java.io.InputStream.read(InputStream.java:101)\r\n\tat org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1792)\r\n\tat org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1769)\r\n\tat org.apache.commons.io.IOUtils.copy(IOUtils.java:1744)\r\n\tat hudson.util.IOUtils.copy(IOUtils.java:40)\r\n\tat hudson.FilePath.readFromTar(FilePath.java:2307)\r\nAlso:   <cycle to hudson.remoting.Channel$OrderlyShutdown>\r\n\tCaused: hudson.remoting.RequestAbortedException\r\n\t\tat hudson.remoting.Request.abort(Request.java:329)\r\n\t\tat hudson.remoting.Channel.terminate(Channel.java:992)\r\n\t\tat hudson.remoting.Channel$CloseCommand.execute(Channel.java:1225)\r\n\t\tat hudson.remoting.Channel$1.handle(Channel.java:560)\r\n\t\tat hudson.remoting.SynchronousCommandTransport$ReaderThread.run(SynchronousCommandTransport.java:87)\r\n\tCaused: java.util.concurrent.ExecutionException\r\n\t\tat hudson.remoting.Request$1.get(Request.java:308)\r\n\t\tat hudson.remoting.Request$1.get(Request.java:229)\r\n\t\tat hudson.remoting.FutureAdapter.get(FutureAdapter.java:59)\r\n\t\tat hudson.FilePath.copyRecursiveTo(FilePath.java:2224)\r\nCaused: java.io.IOException: Failed to extract /mnt/j/w/dotnet_coreclr/perf/master/perf_throughput_linux_arm_build/transfer of 1 files\r\n\tat hudson.FilePath.readFromTar(FilePath.java:2317)\r\n\tat hudson.FilePath.copyRecursiveTo(FilePath.java:2221)\r\n\tat jenkins.model.StandardArtifactManager.archive(StandardArtifactManager.java:61)\r\n\tat hudson.tasks.ArtifactArchiver.perform(ArtifactArchiver.java:245)\r\n\tat hudson.tasks.BuildStepCompatibilityLayer.perform(BuildStepCompatibilityLayer.java:81)\r\n\tat org.jenkins_ci.plugins.flexible_publish.builder.FailFastBuilder.perform(FailFastBuilder.java:102)\r\n\tat org.jenkins_ci.plugins.run_condition.BuildStepRunner$2.run(BuildStepRunner.java:110)\r\n\tat org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail.conditionalRun(BuildStepRunner.java:154)\r\n\tat org.jenkins_ci.plugins.run_condition.BuildStepRunner.perform(BuildStepRunner.java:105)\r\n\tat org.jenkins_ci.plugins.flexible_publish.strategy.FailFastExecutionStrategy.perform(FailFastExecutionStrategy.java:63)\r\n\tat org.jenkins_ci.plugins.flexible_publish.ConditionalPublisher.perform(ConditionalPublisher.java:206)\r\n\tat org.jenkins_ci.plugins.flexible_publish.FlexiblePublisher.perform(FlexiblePublisher.java:124)\r\n\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)\r\n\tat hudson.model.Build$BuildExecution.post2(Build.java:186)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)\r\n\tat hudson.model.Run.execute(Run.java:1749)\r\n\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\tat hudson.model.Executor.run(Executor.java:429)","Url":"https://github.com/dotnet/coreclr/issues/23280","RelatedDescription":"Closed issue \"ERROR: Failed to archive artifacts: bin-Product-Linux.arm.Release.tgz\" (#23280)"},{"Id":"421316102","IsPullRequest":true,"CreatedAt":"2019-03-16T03:54:22","Actor":"BrianBohe","Number":"23275","RawContent":null,"Title":"Brbohe/si var loc equals","State":"closed","Body":"Add operators != and == in order to express more in asserts like [on this PR](https://github.com/dotnet/coreclr/blob/6ca8df07ec277ecf6a486cdf022f957476d53980/src/jit/compiler.cpp#L11549-L11550).\r\n\r\nI include this as a separate PR because of the size of the other.","Url":"https://github.com/dotnet/coreclr/pull/23275","RelatedDescription":"Closed or merged PR \"Brbohe/si var loc equals\" (#23275)"},{"Id":"421764497","IsPullRequest":false,"CreatedAt":"2019-03-16T03:26:09","Actor":"jorive","Number":"23299","RawContent":null,"Title":"[EventPipe] Pending IPC work items","State":"open","Body":"## Pending IPC work items\r\n- [ ] Handle shutdown (currently we do not unlink the socket on the filesystem when the runtime exit)\r\n- [ ] Add tests\r\n- [ ] Handle multiple clients\r\n- [ ] Add streaming functionality\r\n    - [ ] Syncronus\r\n    - [ ] Asyncronous\r\n- [ ] Repurpose LF_REMOTING (currently used under the Diagnostics STRESS_LOG usage)\r\n- [ ] Replace the use of LOG under the Diagnostics Server with STRESS_LOG\r\n- [ ] Revisit the IPC mode of sending messages (byte vs message)","Url":"https://github.com/dotnet/coreclr/issues/23299","RelatedDescription":"Open issue \"[EventPipe] Pending IPC work items\" (#23299)"},{"Id":"421750624","IsPullRequest":true,"CreatedAt":"2019-03-16T00:53:07","Actor":"BrianBohe","Number":"23298","RawContent":null,"Title":"Adding a flag to able/disable scope info","State":"open","Body":"We are adding a [new way of tracking variables' home](https://github.com/dotnet/coreclr/pull/22770). It is useless to have both activated at the same time, so this PR is for able/disable siScope and psiScope info.","Url":"https://github.com/dotnet/coreclr/pull/23298","RelatedDescription":"Open PR \"Adding a flag to able/disable scope info\" (#23298)"},{"Id":"421729820","IsPullRequest":true,"CreatedAt":"2019-03-15T23:49:50","Actor":"briansull","Number":"23294","RawContent":null,"Title":"Fix formatting error","State":"closed","Body":"@AndyAyersMS \r\nThis fixes the formatting errors that I introduced with #23272\r\n","Url":"https://github.com/dotnet/coreclr/pull/23294","RelatedDescription":"Closed or merged PR \"Fix formatting error\" (#23294)"},{"Id":"421736628","IsPullRequest":true,"CreatedAt":"2019-03-15T23:17:01","Actor":"Maoni0","Number":"23297","RawContent":null,"Title":"container fixes","State":"open","Body":"fix for running in a container without mem limit set on Windows;\r\nalso fixing the LocalGC standalone case on Linux\r\n\r\n@brianrob @andy-ms","Url":"https://github.com/dotnet/coreclr/pull/23297","RelatedDescription":"Open PR \"container fixes\" (#23297)"},{"Id":"421733510","IsPullRequest":false,"CreatedAt":"2019-03-15T23:00:30","Actor":"richlander","Number":"23296","RawContent":null,"Title":"ARM32 Failure on Preview 4","State":"open","Body":"Having trouble on ARM32. Repro'd on two Pi machines. ARM64 is OK on the same build.\r\n\r\n```console\r\npi@raspberrypi:~ $ uname -a\r\nLinux raspberrypi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l GNU/Linux\r\npi@raspberrypi:~ $ curl -o dotnet.tar.gz https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-linux-arm.tar.gz\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100  126M  100  126M    0     0  7758k      0  0:00:16  0:00:16 --:--:-- 8075k\r\npi@raspberrypi:~ $ sudo mkdir -p /usr/share/dotnet\r\npi@raspberrypi:~ $ sudo tar -C /usr/share/dotnet -xzf dotnet.tar.gz\r\npi@raspberrypi:~ $ sudo ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\r\npi@raspberrypi:~ $ dotnet --info\r\nIllegal instruction\r\npi@raspberrypi:~ $ dotnet --list-sdks\r\n3.0.100-preview4-010763 [/usr/share/dotnet/sdk]\r\npi@raspberrypi:~ $ dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET Core information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\npi@raspberrypi:~ $ dotnet new\r\nIllegal instruction\r\npi@raspberrypi:~ $ which dotnet\r\n/usr/bin/dotnet\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23296","RelatedDescription":"Open issue \"ARM32 Failure on Preview 4\" (#23296)"},{"Id":"421733030","IsPullRequest":true,"CreatedAt":"2019-03-15T22:57:59","Actor":"sywhang","Number":"23295","RawContent":null,"Title":"Fixing some payload serialization issue on new EventCounters","State":"open","Body":"Found this while working on some tests for the new EventCounter APIs. If DisplayRateTimeScale and DisplayName properties are not set, we may incorrectly serialize the payload and TraceEvent hiccups when it sees payloads like this. ","Url":"https://github.com/dotnet/coreclr/pull/23295","RelatedDescription":"Open PR \"Fixing some payload serialization issue on new EventCounters\" (#23295)"},{"Id":"421729287","IsPullRequest":false,"CreatedAt":"2019-03-15T22:40:25","Actor":"gregg-miskelly","Number":"23293","RawContent":null,"Title":"GCHandle.Free should raise errors on misuse","State":"open","Body":"I own some code that that uses GCHandle which runs in a large managed application that runs lots of code in a single process. We face issues with this code occasionally crashing on users machines because *something* in the process has freed our handle value, so that when we attempt to obtain our object back we fetch either no object, or the wrong object. Playing around with GCHandle I found that part of the problem is that GCHandle raises no error on API misuse, making it hard for folks using GCHandle to notice that they have a bug.\r\n\r\nRequest: GCHandle should raise an exception or an MDA if there is an attempt to either call `GCHandle.FromIntPtr` or `GCHandle.Free` using a handle value that has ready been free.\r\n\r\nExample code:\r\n\r\n```C#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace GCHandleFreeTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            IntPtr handleValue;\r\n            {\r\n                GCHandle handle = GCHandle.Alloc(new MyObject());\r\n                handleValue = GCHandle.ToIntPtr(handle);\r\n            }\r\n\r\n            {\r\n                GCHandle handle = GCHandle.FromIntPtr(handleValue);\r\n                handle.Free();\r\n            }\r\n\r\n            {\r\n                GCHandle handle = GCHandle.FromIntPtr(handleValue);\r\n                handle.Free();\r\n            }\r\n        }\r\n    }\r\n\r\n    class MyObject\r\n    { };\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23293","RelatedDescription":"Open issue \"GCHandle.Free should raise errors on misuse\" (#23293)"},{"Id":"421311071","IsPullRequest":true,"CreatedAt":"2019-03-15T21:55:52","Actor":"briansull","Number":"23272","RawContent":null,"Title":"Fix for duplicate call to Set when we run out of budget","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23272","RelatedDescription":"Closed or merged PR \"Fix for duplicate call to Set when we run out of budget\" (#23272)"},{"Id":"421714185","IsPullRequest":true,"CreatedAt":"2019-03-15T21:39:43","Actor":"echesakovMSFT","Number":"23292","RawContent":null,"Title":"Testing other pools","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23292","RelatedDescription":"Open PR \"Testing other pools\" (#23292)"},{"Id":"421702125","IsPullRequest":true,"CreatedAt":"2019-03-15T20:58:48","Actor":"jashook","Number":"23291","RawContent":null,"Title":"Revert \"Delete suspicious code in delegate construction (#22830)\"","State":"open","Body":"This reverts commit 674bdcbc2ac824d005b5179cee3c5826b582b9a6.\r\n\r\nThis is to test if the outerloop jobs are fixed with a revert.","Url":"https://github.com/dotnet/coreclr/pull/23291","RelatedDescription":"Open PR \"Revert \"Delete suspicious code in delegate construction (#22830)\"\" (#23291)"},{"Id":"421700119","IsPullRequest":true,"CreatedAt":"2019-03-15T20:52:48","Actor":"ahoefling","Number":"23290","RawContent":null,"Title":"Updated Exception Handling for Collection<T>","State":"open","Body":"Part of #23166 \r\n\r\nThis change addresses follow-up concerns on how we are throwing different exceptions in the Collection<T> class for add range APIs which are used ObservableCollection<T> as well.\r\n\r\n@stephentoub highlighted several follow up concerns which I believe I have covered in this PR and in the comment here.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/23166#discussion_r266012736\r\nhttps://github.com/dotnet/coreclr/pull/23166#discussion_r266014304\r\n>There's no list argument to this method, but the exception is going to be new ArgumentNullException(\"list\"). The ExceptionArgument.list should be changed to ExceptionArgument.collection.\r\n\r\n* Fixed\r\n\r\nhttps://github.com/dotnet/coreclr/pull/23166#discussion_r266013413\r\n>This exception message is \"Index must be within the bounds of the List.\". The code consuming this isn't using \"List\", though.\r\n\r\n* Fixed\r\n\r\nhttps://github.com/dotnet/coreclr/pull/23166#discussion_r266014089\r\nhttps://github.com/dotnet/coreclr/pull/23166#discussion_r266014242\r\n>The exception message here is \"Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection\"... but the arguments to this method are \"index\" and \"count\", not \"offset\" and \"length\"... are we ok with that mismatch?\r\n\r\n* Not Fixed\r\n\r\nI don't think is appropriate to adjust the parameters or code as recommended. As `List.cs` uses the exact same exception and we wrote our code to follow the same standard as `List.cs` which is what we have been doing while we work through this change. @stephentoub if this is not correct, please advise on direction.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/b93891a6e1705f7d8c671cd673abaaf03b0a09cb/src/System.Private.CoreLib/shared/System/Collections/Generic/List.cs#L927-L928\r\n\r\ncc: @ahsonkhan, @safern, @justinvp ","Url":"https://github.com/dotnet/coreclr/pull/23290","RelatedDescription":"Open PR \"Updated Exception Handling for Collection<T>\" (#23290)"},{"Id":"421693346","IsPullRequest":true,"CreatedAt":"2019-03-15T20:32:24","Actor":"elinor-fung","Number":"23289","RawContent":null,"Title":"Fix x86 dumps from HandleFatalError showing misleading callstack","State":"open","Body":"Port from full Framework\r\n\r\nExample before:\r\n[0x0]   coreclr!EEJitManager::IsAltJitLoaded\r\n[0x1]   coreclr!UnsafeJitFunction + 0x135f16\r\n[0x2]   coreclr!MethodDesc::JitCompileCodeLocked + 0x1bd\r\n\r\nExample after:\r\n[0x0]   coreclr!EEPolicy::HandleFatalError + 0x96\r\n[0x1]   coreclr!UnsafeJitFunction + 0x362\r\n[0x2]   coreclr!MethodDesc::JitCompileCodeLocked + 0x23b","Url":"https://github.com/dotnet/coreclr/pull/23289","RelatedDescription":"Open PR \"Fix x86 dumps from HandleFatalError showing misleading callstack\" (#23289)"},{"Id":"421319492","IsPullRequest":true,"CreatedAt":"2019-03-15T19:32:49","Actor":"janvorli","Number":"23276","RawContent":null,"Title":"Fix GetFullAffinityMask for cpuCount==64","State":"closed","Body":"The function was incorrectly assuming that shifting 64 bit\r\nconstant 1 by 64 bits to the left gets result 0.","Url":"https://github.com/dotnet/coreclr/pull/23276","RelatedDescription":"Closed or merged PR \"Fix GetFullAffinityMask for cpuCount==64\" (#23276)"},{"Id":"421639503","IsPullRequest":true,"CreatedAt":"2019-03-15T19:32:12","Actor":"fhalim","Number":"23286","RawContent":null,"Title":"Fixed small typo in path to crossgen","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23286","RelatedDescription":"Closed or merged PR \"Fixed small typo in path to crossgen\" (#23286)"},{"Id":"421664964","IsPullRequest":true,"CreatedAt":"2019-03-15T19:05:55","Actor":"AndyAyersMS","Number":"23288","RawContent":null,"Title":"JIT: clear stub register assignment for tail calls via helper","State":"open","Body":"When we have a VSD tail call via a helper, the stub arg is passed as a normal\r\narg to the helper and moved to the right special register by the copy routine\r\nthat the helper invokes. So the jit does not need to pass the stub value in the\r\nspecial register when calling the helper.\r\n\r\nThe stub arg gets set to that register by default, so we now unset it for the\r\ntail call via helper case.\r\n\r\nCloses #18943.","Url":"https://github.com/dotnet/coreclr/pull/23288","RelatedDescription":"Open PR \"JIT: clear stub register assignment for tail calls via helper\" (#23288)"},{"Id":"421644635","IsPullRequest":true,"CreatedAt":"2019-03-15T18:11:18","Actor":"jashook","Number":"23287","RawContent":null,"Title":"Disable Jenkins Innerloop Jobs","State":"open","Body":"This change will:\r\n\r\n1) Remove default PR trigger jobs from being run in jenkins\r\n2) Start submitting tests for linux arm32 in coreclr-ci\r\n\r\nIt is worth noting that this change will not remove jobs from netci.groovy.\r\nThis is to say that it is still possible to trigger innerloop and outerloop\r\njobs in jenkins, they will just not be run automatically on each new PR.\r\n\r\nPast this point the following jobs will be created:\r\n\r\n1) Coreclr-ci\r\n2) Windows_NT x64 Formatting\r\n3) Windows_NT x64 Checked CoreFX Tests \r\n4) Windows_NT x64 Release CoreFX Tests \r\n5) Ubuntu arm Cross Checked crossgen_comparison Build and Test\r\n6) Windows_NT x86 full_opt ryujit CoreCLR Perf Tests Correctness\r\n7) Windows_NT x86 min_opt ryujit CoreCLR Perf Tests Correctness\r\n8) Windows_NT x64 full_opt ryujit CoreCLR Perf Tests Correctness\r\n9) Windows_NT x64 min_opt ryujit CoreCLR Perf Tests Correctness\r\n\r\nRemoved jobs (but still explicitly request-able):\r\n\r\n1) CentOS7.1 x64 Debug Innerloop Build\r\n2) OSX10.12 x64 Checked Innerloop Build and Test\r\n3) Windows_NT x64 Checked Innerloop Build and Test\r\n4) Windows_NT x64 Checked Innerloop Build and Test (Jit - TieredCompilation=0)\r\n5) Windows_NT x86 Checked Innerloop Build and Test \r\n6) Windows_NT x86 Checked Innerloop Build and Test (Jit - TieredCompilation=0)\r\n7) Windows_NT arm Debug Innerloop Build\r\n8) Windows_NT arm64 Debug Innerloop Build\r\n\r\nTo see test results, navigate to the coreclr-ci Azure Dev Ops page at:\r\nhttps://dev.azure.com/dnceng/public/_build?definitionId=228 and view the build related to your PR.\r\nThere is a test tab which will report all test results.","Url":"https://github.com/dotnet/coreclr/pull/23287","RelatedDescription":"Open PR \"Disable Jenkins Innerloop Jobs\" (#23287)"},{"Id":"421305336","IsPullRequest":true,"CreatedAt":"2019-03-15T17:38:48","Actor":"sandreenko","Number":"23271","RawContent":null,"Title":"Add `Schedule` and 'Manual' as possible triggers for ADO outerloop jobs.","State":"closed","Body":"It adds entry points for 6 current test flavors with `Build.Reason` in `Schedule` or `Manual`.\r\n\r\nThen we will add triggers to these entry points in ADO GUI to run them each might/week etc.","Url":"https://github.com/dotnet/coreclr/pull/23271","RelatedDescription":"Closed or merged PR \"Add `Schedule` and 'Manual' as possible triggers for ADO outerloop jobs.\" (#23271)"},{"Id":"421482331","IsPullRequest":false,"CreatedAt":"2019-03-15T16:48:23","Actor":"thorwe90","Number":"23284","RawContent":null,"Title":"Debugging managed assemblies with VS Code in custom host","State":"closed","Body":"Hello everyone,\r\n\r\nI cannot get debugging of managed assemblies running in a custom .NET Core runtime host to work. VSCode (vsdbg) always returns 0x80131c08 after a few seconds when trying to attach to the process.\r\n\r\nI've basically followed this guide (https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting)and consulted this (https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts) to make it run on macOS.\r\n\r\nSo, what do I currently do?\r\n\r\nI initialise the CoreCLR using\r\n\r\n> coreclr_initialize(...)\r\n\r\n and then basically running a function using \r\n\r\n> coreclr_create_delegate(...)\r\n\r\nwhile not shutting down the runtime and it works just fine. Tried it in a command line tool and Cocoa app, both run but no debugging.\r\n\r\nQuestion is: is there some kind of flag I have to provide to coreclr_initialize or other stuff I have to do to get debugging working? \r\n\r\nFor reference, this is the \"basic\" implementation of my \"runtime\" written in Swift: [ClrRuntimeHost.txt](https://github.com/dotnet/coreclr/files/2970826/ClrRuntimeHost.txt)\r\n\r\nThank you very much in advance. ","Url":"https://github.com/dotnet/coreclr/issues/23284","RelatedDescription":"Closed issue \"Debugging managed assemblies with VS Code in custom host\" (#23284)"},{"Id":"421375362","IsPullRequest":false,"CreatedAt":"2019-03-15T16:39:07","Actor":"KevinRansom","Number":"23279","RawContent":null,"Title":"AV in Microsoft_DiaSymReader_Native_amd64!PortablePDB::CollectLineColumnInfo+0x10c5","State":"closed","Body":"This is super interesting, because it is thrown from an assembly that is generated using in-memory ref-emit and obviously no portable pdbs were actually generated.\r\n\r\nWhen the code is run in a debugger, either VS or WinDbg no AV occurs.\r\n\r\nThe AV happens below this CoreCLR call: \r\nhttps://github.com/dotnet/coreclr/blob/75d1d390c1b631eeb99d90f92f0ccdb840367b7d/src/vm/ceeload.cpp#L3876\r\n\r\n````\r\n2920.40a0): CLR exception - code e0434352 (first chance)\r\n(2920.40a0): CLR exception - code e0434352 (first chance)\r\n(2920.40a0): CLR exception - code e0434352 (first chance)\r\nModLoad: 00007ffc`bfcf0000 00007ffc`bfe4e000   C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\bin\\Roslyn\\Microsoft.DiaSymReader.Native.amd64.dll\r\n(2920.40a0): Access violation - code c0000005 (first chance)\r\nFirst chance exceptions are reported before any exception handling.\r\nThis exception may be expected and handled.\r\nMicrosoft_DiaSymReader_Native_amd64!PortablePDB::CollectLineColumnInfo+0x10c5:\r\n00007ffc`bfdbf035 8b0c88          mov     ecx,dword ptr [rax+rcx*4] ds:000002a4`a595fd00=????????\r\n0:000> kp\r\n # Child-SP          RetAddr           Call Site\r\n00 000000f9`db584d20 00007ffc`bfdc030f Microsoft_DiaSymReader_Native_amd64!PortablePDB::CollectLineColumnInfo+0x10c5\r\n01 000000f9`db584e80 00007ffc`bfdafba7 Microsoft_DiaSymReader_Native_amd64!PortablePDB::ConvertPortablePDB+0x23f\r\n02 000000f9`db5857c0 00007ffc`bfdaf193 Microsoft_DiaSymReader_Native_amd64!PDB1::OpenPortablePDB+0x87\r\n03 000000f9`db585800 00007ffc`bfdb032e Microsoft_DiaSymReader_Native_amd64!PDB1::OpenEx2W+0x6e3\r\n04 000000f9`db585880 00007ffc`bfde090a Microsoft_DiaSymReader_Native_amd64!PDB1::OpenValidate4+0x7e\r\n05 000000f9`db585920 00007ffc`bfde059e Microsoft_DiaSymReader_Native_amd64!LOCATOR::FOpenValidate4+0x8a\r\n06 000000f9`db585fc0 00007ffc`bfdbd0e6 Microsoft_DiaSymReader_Native_amd64!LOCATOR::FLocatePdb+0x13e\r\n07 000000f9`db586c70 00007ffc`bfdbd05b Microsoft_DiaSymReader_Native_amd64!PDBCommon::OpenValidateCore+0x56\r\n08 000000f9`db586ca0 00007ffc`bfd24751 Microsoft_DiaSymReader_Native_amd64!PDBCommon::OpenValidate6+0xbb\r\n09 000000f9`db587ac0 00007ffc`bfd245f5 Microsoft_DiaSymReader_Native_amd64!CDiaDataSource::loadDataForExeHelper+0xa1\r\n0a 000000f9`db587c40 00007ffc`bfd0f60b Microsoft_DiaSymReader_Native_amd64!CDiaDataSource::loadDataForExe+0x15\r\n0b 000000f9`db587c80 00007ffc`bfd004ee Microsoft_DiaSymReader_Native_amd64!sh::CDiaWrapper::Create+0x11b\r\n0c 000000f9`db587cf0 00007ffc`bfd07714 Microsoft_DiaSymReader_Native_amd64!sh::SymReader::Initialize+0xbe\r\n0d 000000f9`db587d40 00007ffc`a448b4a1 Microsoft_DiaSymReader_Native_amd64!sh::SymBinder::GetReaderForFile+0xd4\r\n0e 000000f9`db587da0 00007ffc`a448b97e coreclr!Module::GetISymUnmanagedReader(void)+0x5c1 [e:\\a\\_work\\487\\s\\src\\vm\\ceeload.cpp @ 3876] \r\n0f 000000f9`db587f80 00007ffc`a453af4f coreclr!Module::GetISymUnmanagedReaderNoThrow(void)+0x56 [e:\\a\\_work\\487\\s\\src\\vm\\ceeload.cpp @ 3698] \r\n10 000000f9`db588030 00007ffc`a00af8f1 coreclr!DebugStackTrace::GetStackFramesInternal(class StackFrameHelper * pStackFrameHelperUNSAFE = 0x000002a4`14d90c00, int iSkip = 0n0, bool fNeedFileInfo = true, class Object * pExceptionUNSAFE = 0x000002a4`14d88f70)+0xc9f [e:\\a\\_work\\487\\s\\src\\vm\\debugdebugger.cpp @ 584] \r\n11 000000f9`db588b40 00007ffc`a0072d90 System_Private_CoreLib!System.Diagnostics.StackFrameHelper.InitializeSourceInfo+0x31\r\n12 000000f9`db588c10 00007ffc`a0072bac System_Private_CoreLib!System.Diagnostics.StackTrace.CaptureStackTrace+0x50\r\n13 000000f9`db588c70 00007ffc`a00379f4 System_Private_CoreLib!System.Diagnostics.StackTrace..ctor+0x2c\r\n14 000000f9`db588cb0 00007ffc`a0032e9f System_Private_CoreLib!System.Environment.GetStackTrace+0x64\r\n15 000000f9`db588d00 00007ffc`a00334be System_Private_CoreLib!System.Exception.GetStackTrace+0x3f\r\n16 000000f9`db588d30 00007ffc`a4340473 System_Private_CoreLib!System.Exception.InternalPreserveStackTrace+0x3e\r\n17 000000f9`db588d70 00007ffc`a424524a coreclr!CallDescrWorkerInternal(void)+0x83 [E:\\A\\_work\\487\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101] \r\n18 000000f9`db588db0 00007ffc`a4244deb coreclr!CallDescrWorkerReflectionWrapper(struct CallDescrData * pCallDescrData = 0x00007ffc`a03d40d8, class Frame * pFrame = 0x000000f9`db588eb0)+0x1a [e:\\a\\_work\\487\\s\\src\\vm\\reflectioninvocation.cpp @ 740] \r\n19 000000f9`db588e00 00007ffc`a007f7d1 coreclr!RuntimeMethodHandle::InvokeMethod(class Object * target = 0x000000f9`db589490, class PtrArray * objs = 0x00007ffc`a0046308, class SignatureNative * pSigUNSAFE = 0x000000f9`db58c770, bool fConstructor = false, bool fWrapExceptions = true)+0x4bb [e:\\a\\_work\\487\\s\\src\\vm\\reflectioninvocation.cpp @ 1355] \r\n1a 000000f9`db589440 00007ffc`a004bd72 System_Private_CoreLib!System.Reflection.RuntimeMethodInfo.Invoke+0xb1\r\n1b 000000f9`db5894b0 00007ffc`45dc88e2 System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x22\r\n1c 000000f9`db5894f0 00007ffc`45d992d1 0x00007ffc`45dc88e2\r\n1d 000000f9`db5895e0 00007ffc`45d98fe6 0x00007ffc`45d992d1\r\n1e 000000f9`db589770 00007ffc`45dc864e 0x00007ffc`45d98fe6\r\n1f 000000f9`db5897b0 00007ffc`4578886d 0x00007ffc`45dc864e\r\n20 000000f9`db5898a0 00007ffc`4578886d 0x00007ffc`4578886d\r\n21 000000f9`db589910 00007ffc`4578886d 0x00007ffc`4578886d\r\n22 000000f9`db589980 00007ffc`4578896b 0x00007ffc`4578886d\r\n23 000000f9`db5899f0 00007ffc`4578886d 0x00007ffc`4578896b\r\n24 000000f9`db589b20 00007ffc`4578886d 0x00007ffc`4578886d\r\n25 000000f9`db589b90 00007ffc`4578886d 0x00007ffc`4578886d\r\n26 000000f9`db589c00 00007ffc`4578886d 0x00007ffc`4578886d\r\n27 000000f9`db589c70 00007ffc`4578896b 0x00007ffc`4578886d\r\n28 000000f9`db589ce0 00007ffc`4578886d 0x00007ffc`4578896b\r\n29 000000f9`db589e10 00007ffc`4578886d 0x00007ffc`4578886d\r\n2a 000000f9`db589e80 00007ffc`4578886d 0x00007ffc`4578886d\r\n2b 000000f9`db589ef0 00007ffc`4578886d 0x00007ffc`4578886d\r\n2c 000000f9`db589f60 00007ffc`4578886d 0x00007ffc`4578886d\r\n2d 000000f9`db589fd0 00007ffc`4578896b 0x00007ffc`4578886d\r\n2e 000000f9`db58a040 00007ffc`4578886d 0x00007ffc`4578896b\r\n2f 000000f9`db58a170 00007ffc`457873f2 0x00007ffc`4578886d\r\n30 000000f9`db58a1e0 00007ffc`45787167 0x00007ffc`457873f2\r\n31 000000f9`db58a2a0 00007ffc`45786175 0x00007ffc`45787167\r\n32 000000f9`db58a300 00007ffc`45785ff1 0x00007ffc`45786175\r\n33 000000f9`db58a400 00007ffc`45785bde 0x00007ffc`45785ff1\r\n34 000000f9`db58a460 00007ffc`4578562b 0x00007ffc`45785bde\r\n35 000000f9`db58a5f0 00007ffc`457852f3 0x00007ffc`4578562b\r\n36 000000f9`db58a640 00007ffc`45785172 0x00007ffc`457852f3\r\n37 000000f9`db58a7b0 00007ffc`45783916 0x00007ffc`45785172\r\n38 000000f9`db58a850 00007ffc`455ba091 0x00007ffc`45783916\r\n39 000000f9`db58ae70 00007ffc`455c4d4b 0x00007ffc`455ba091\r\n3a 000000f9`db58b460 00007ffc`455b86e7 0x00007ffc`455c4d4b\r\n3b 000000f9`db58bcb0 00007ffc`45904098 0x00007ffc`455b86e7\r\n3c 000000f9`db58bd90 00007ffc`459020b9 0x00007ffc`45904098\r\n3d 000000f9`db58bde0 00007ffc`459010dd 0x00007ffc`459020b9\r\n3e 000000f9`db58c430 00007ffc`45900d87 0x00007ffc`459010dd\r\n3f 000000f9`db58c4d0 00007ffc`45900756 0x00007ffc`45900d87\r\n40 000000f9`db58c610 00007ffc`459006a1 0x00007ffc`45900756\r\n41 000000f9`db58c660 00007ffc`a433ff46 0x00007ffc`459006a1\r\n42 000000f9`db58c6d0 00007ffc`458fff69 coreclr!JIT_TailCallHelperStub_ReturnAddress(<Win32 error 0n87>) [E:\\A\\_work\\487\\s\\src\\vm\\amd64\\JitHelpers_Fast.asm @ 946] \r\n43 000000f9`db58c770 00007ffc`458ffe4f 0x00007ffc`458fff69\r\n44 000000f9`db58c7d0 00007ffc`44ee51d4 0x00007ffc`458ffe4f\r\n45 000000f9`db58c850 00007ffc`44ee4d0d 0x00007ffc`44ee51d4\r\n46 000000f9`db58c8c0 00007ffc`458713ad 0x00007ffc`44ee4d0d\r\n47 000000f9`db58c900 00007ffc`45870f2b 0x00007ffc`458713ad\r\n48 000000f9`db58c970 00007ffc`a4340473 0x00007ffc`45870f2b\r\n49 000000f9`db58c9d0 00007ffc`a424524a coreclr!CallDescrWorkerInternal(void)+0x83 [E:\\A\\_work\\487\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101] \r\n4a 000000f9`db58ca10 00007ffc`a4244deb coreclr!CallDescrWorkerReflectionWrapper(struct CallDescrData * pCallDescrData = 0x00007ffc`44c19a18, class Frame * pFrame = 0x000000f9`db58cb10)+0x1a [e:\\a\\_work\\487\\s\\src\\vm\\reflectioninvocation.cpp @ 740] \r\n4b 000000f9`db58ca60 00007ffc`a007f7d1 coreclr!RuntimeMethodHandle::InvokeMethod(class Object * target = 0x00000000`00000000, class PtrArray * objs = 0x00000000`00000000, class SignatureNative * pSigUNSAFE = 0x000002a4`14c9b720, bool fConstructor = false, bool fWrapExceptions = true)+0x4bb [e:\\a\\_work\\487\\s\\src\\vm\\reflectioninvocation.cpp @ 1355] \r\n4c 000000f9`db58d0a0 00007ffc`a004bd72 System_Private_CoreLib!System.Reflection.RuntimeMethodInfo.Invoke+0xb1\r\n4d 000000f9`db58d110 00007ffc`45870811 System_Private_CoreLib!System.Reflection.MethodBase.Invoke+0x22\r\n4e 000000f9`db58d150 00007ffc`4586f9e6 0x00007ffc`45870811\r\n4f 000000f9`db58d220 00007ffc`4586f814 0x00007ffc`4586f9e6\r\n50 000000f9`db58d260 00007ffc`4586f5eb 0x00007ffc`4586f814\r\n51 000000f9`db58d370 00007ffc`455b80d4 0x00007ffc`4586f5eb\r\n52 000000f9`db58d3d0 00007ffc`44854962 0x00007ffc`455b80d4\r\n53 000000f9`db58d580 00007ffc`44851526 0x00007ffc`44854962\r\n54 000000f9`db58d7f0 00007ffc`a4340473 0x00007ffc`44851526\r\n55 000000f9`db58d880 00007ffc`a4230db9 coreclr!CallDescrWorkerInternal(void)+0x83 [E:\\A\\_work\\487\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101] \r\n56 (Inline Function) --------`-------- coreclr!CallDescrWorkerWithHandler+0x53 [e:\\a\\_work\\487\\s\\src\\vm\\callhelpers.cpp @ 78] \r\n57 000000f9`db58d8c0 00007ffc`a428cd10 coreclr!MethodDescCallSite::CallTargetWorker(unsigned int64 * pArguments = 0x000000f9`db58dc88, unsigned int64 * pReturnValue = 0x000000f9`db58da38, int cbReturnValue = 0n8)+0x2b5 [e:\\a\\_work\\487\\s\\src\\vm\\callhelpers.cpp @ 628] \r\n58 (Inline Function) --------`-------- coreclr!MethodDescCallSite::Call_RetArgSlot+0x10 [e:\\a\\_work\\487\\s\\src\\vm\\callhelpers.h @ 433] \r\n59 000000f9`db58da10 00007ffc`a428bfa8 coreclr!RunMain(class MethodDesc * pFD = 0x00007ffc`447356f0, int * piRetVal = <Value unavailable error>, class PtrArray ** stringArgs = 0x000000f9`db58df88)+0x1fc [e:\\a\\_work\\487\\s\\src\\vm\\assembly.cpp @ 1709] \r\n5a 000000f9`db58dc70 00007ffc`a428ba26 coreclr!Assembly::ExecuteMainMethod(class PtrArray ** stringArgs = 0x000000f9`db58df88)+0x228 [e:\\a\\_work\\487\\s\\src\\vm\\assembly.cpp @ 1817] \r\n5b 000000f9`db58df60 00007ffc`a428b7c6 coreclr!CorHost2::ExecuteAssembly(unsigned long dwAppDomainId = <Value unavailable error>, wchar_t * pwzAssemblyPath = 0x000002a4`104621a0 \"c:\\kevinransom\\visualfsharp\\artifacts\\bin\\fsi\\Debug\\netcoreapp2.1\\fsi.exe\", int argc = 0n0, wchar_t ** argv = 0x00000000`00000000, unsigned long * pReturnValue = 0x000000f9`db58e15c)+0x206 [e:\\a\\_work\\487\\s\\src\\vm\\corhost.cpp @ 491] \r\n5c 000000f9`db58e070 00007ffc`d27cfed0 coreclr!coreclr_execute_assembly(void * hostHandle = 0x000002a4`10516f98, unsigned int domainId = 1, int argc = 0n0, char ** argv = <Value unavailable error>, char * managedAssemblyPath = 0x000002a4`10524af0 \"c:\\kevinransom\\visualfsharp\\artifacts\\bin\\fsi\\Debug\\netcoreapp2.1\\fsi.exe\", unsigned int * exitCode = 0x000000f9`db58e15c)+0xd6 [e:\\a\\_work\\487\\s\\src\\dlls\\mscoree\\unixinterface.cpp @ 407] \r\n5d 000000f9`db58e110 00007ffc`d27d06cd hostpolicy!run+0xfd0\r\n5e 000000f9`db58e6c0 00007ffc`e5af1d53 hostpolicy!corehost_main+0x7d\r\n5f 000000f9`db58e840 00007ffc`e5af5cda hostfxr!fx_muxer_t::execute+0x693\r\n60 000000f9`db58e900 00007ffc`e5af3efd hostfxr!fx_muxer_t::read_config_and_execute+0xb9a\r\n61 000000f9`db58f2f0 00007ffc`e5af183e hostfxr!fx_muxer_t::handle_exec_host_command+0x15d\r\n62 000000f9`db58f380 00007ffc`e5aebee5 hostfxr!fx_muxer_t::execute+0x17e\r\n63 000000f9`db58f4c0 00007ff6`d2d1a717 hostfxr!hostfxr_main_startupinfo+0x95\r\n64 000000f9`db58f5c0 00007ff6`d2d1b1f3 dotnet!exe_start+0x487\r\n65 000000f9`db58f750 00007ff6`d2d1f018 dotnet!wmain+0x83\r\n66 (Inline Function) --------`-------- dotnet!invoke_main+0x22 [d:\\agent\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 90] \r\n67 000000f9`db58f780 00007ffd`07ba81f4 dotnet!__scrt_common_main_seh(void)+0x10c [d:\\agent\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 288] \r\n68 000000f9`db58f7c0 00007ffd`09c3a251 KERNEL32!BaseThreadInitThunk+0x14\r\n69 000000f9`db58f7f0 00000000`00000000 ntdll!RtlUserThreadStart+0x21\r\n````","Url":"https://github.com/dotnet/coreclr/issues/23279","RelatedDescription":"Closed issue \"AV in Microsoft_DiaSymReader_Native_amd64!PortablePDB::CollectLineColumnInfo+0x10c5\" (#23279)"},{"Id":"421395160","IsPullRequest":true,"CreatedAt":"2019-03-15T07:56:37","Actor":"MichalStrehovsky","Number":"23282","RawContent":null,"Title":"Enable failing test","State":"open","Body":"Need to find out where this reproes because I'm not getting the failure locally.","Url":"https://github.com/dotnet/coreclr/pull/23282","RelatedDescription":"Open PR \"Enable failing test\" (#23282)"},{"Id":"421366748","IsPullRequest":false,"CreatedAt":"2019-03-15T06:04:21","Actor":"dotnet-mc-bot","Number":"23278","RawContent":null,"Title":"Test failure: baseservices_threading._generics_TimerCallback_thread16_thread16_/_generics_TimerCallback_thread16_thread16_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `baseservices_threading._generics_TimerCallback_thread16_thread16_/_generics_TimerCallback_thread16_thread16_cmd` has failed.\n\nFailure Message:\n```\n\nUnhandled Exception: \nUnhandled Exception: System.BadImageFormatException: Bad IL format.\\r\n   at IGen.Target[U](Object p)\\r\n   at System.Threading.TimerQueueTimer.<>c.<.cctor>b__23_0(Object state)\\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\\r\n--- End of stack trace from previous location where exception was thrown ---\\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\\r\n   at System.Threading.TimerQueueTimer.CallCallback(Boolean isThreadPool)\\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\\r\n   at System.Threading.TimerQueue.FireNextTimers()\\r\n   at System.Threading.TimerQueue.AppDomainTimerCallback(Int32 id)\nSystem.BadImageFormatException: Bad IL format.\\r\n   at IGen.Target[U](Object p)\\r\n   at System.Threading.TimerQueueTimer.<>c.<.cctor>b__23_0(Object state)\\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\\r\n--- End of stack trace from previous location where exception was thrown ---\\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\\r\n   at System.Threading.TimerQueueTimer.CallCallback(Boolean isThreadPool)\\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\\r\n   at System.Threading.TimerQueue.FireNextTimers()\\r\n   at System.Threading.TimerQueue.AppDomainTimerCallback(Int32 id)\n\n\nReturn code:      1\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Work\\\\4a7f9301-d4ab-436d-a40d-a9f70727b1e8\\\\Exec\\\\Reports\\\\baseservices.threading\\\\generics\\\\TimerCallback\\\\thread16\\\\thread16.output.txt\nRaw output:\nBEGIN EXECUTION\\r\n        1 file(s) copied.\\r\n\\\" C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Payload\\\\crossgen.exe\\\"  /Platform_Assemblies_Paths C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Payload;C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Work\\\\4a7f9301-d4ab-436d-a40d-a9f70727b1e8\\\\Exec\\\\generics\\\\TimerCallback\\\\thread16\\\\IL;C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Work\\\\4a7f9301-d4ab-436d-a40d-a9f70727b1e8\\\\Exec\\\\generics\\\\TimerCallback\\\\thread16 /in thread16.org /out thread16.exe\\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\\r\n\\r\nNative image thread16.exe generated successfully.\\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Payload\\\\corerun.exe\\\" thread16.exe \\r\nExpected: 100\\r\nActual: -532462766\\r\nEND EXECUTION - FAILED\\r\nFAILED\\r\nTest Harness Exitcode is : 1\\r\n\nTo run the test:\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Payload\n> C:\\\\dotnetbuild\\\\work\\\\2ec31b0a-f78f-4316-ba96-82278df1169b\\\\Work\\\\4a7f9301-d4ab-436d-a40d-a9f70727b1e8\\\\Exec\\\\generics\\\\TimerCallback\\\\thread16\\\\thread16.cmd\n\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at baseservices_threading._generics_TimerCallback_thread16_thread16_._generics_TimerCallback_thread16_thread16_cmd() in F:\\vsagent\\44\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\baseservices.threading\\baseservices.threading.XUnitWrapper.cs:line 8651\n```\n\nBuild : 3.0 - 20190314.76 (Ready-To-Run Tests)\nFailing configurations:\n- Windows.81.Amd64\n  - x64\n  - x64\n  - x86\n  - x86\n- Windows.7.Amd64\n  - x64\n  - x64\n  - x86\n  - x86\n- Windows.10.Amd64.Core\n  - x64\n  - x64\n  - x86\n  - x86\n- Windows.10.Nano.Amd64\n  - x64\n  - x64\n- Windows.10.Amd64\n  - x64\n  - x64\n  - x86\n  - x86\n- Windows.10.Arm64\n  - arm64\n  - arm64\n  - arm\n  - arm\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190314.76/workItem/baseservices.threading/analysis/xunit/baseservices_threading._generics_TimerCallback_thread16_thread16_~2F_generics_TimerCallback_thread16_thread16_cmd","Url":"https://github.com/dotnet/coreclr/issues/23278","RelatedDescription":"Open issue \"Test failure: baseservices_threading._generics_TimerCallback_thread16_thread16_/_generics_TimerCallback_thread16_thread16_cmd\" (#23278)"},{"Id":"421299329","IsPullRequest":true,"CreatedAt":"2019-03-15T05:24:28","Actor":"AaronRobinsonMSFT","Number":"23269","RawContent":null,"Title":"Revert \" Fix the calling convention for P/Invokes and delegates to hostpolicy\"","State":"closed","Body":"Reverts dotnet/coreclr#23249\r\n\r\nFixes: https://github.com/dotnet/coreclr/issues/23268","Url":"https://github.com/dotnet/coreclr/pull/23269","RelatedDescription":"Closed or merged PR \"Revert \" Fix the calling convention for P/Invokes and delegates to hostpolicy\"\" (#23269)"},{"Id":"421299866","IsPullRequest":true,"CreatedAt":"2019-03-15T05:24:16","Actor":"jkoritzinsky","Number":"23270","RawContent":null,"Title":"Fix Ubuntu arm build break.","State":"closed","Body":"Add platformdefines.h include to fix build break.\r\n\r\nFixes #23268 \r\n","Url":"https://github.com/dotnet/coreclr/pull/23270","RelatedDescription":"Closed or merged PR \"Fix Ubuntu arm build break.\" (#23270)"},{"Id":"421324872","IsPullRequest":false,"CreatedAt":"2019-03-15T02:25:08","Actor":"adityamandaleeka","Number":"23277","RawContent":null,"Title":"Investigate perf difference in code adding float arrays","State":"open","Body":"This function was shared by a user who reported some math operations being slower on Core when compared to Framework. I measured a 6-8% difference on .NET Core 2.2 when compared to Framework 4.7.2.\r\n\r\n```C#\r\n    [ClrJob, CoreJob]\r\n    public class PerfTests\r\n    {\r\n        const int N = 100_000_000;\r\n        float[] A;\r\n        float[] B;\r\n        float[] R;\r\n\r\n        private float Add(float a, float b) => a + b;\r\n\r\n        [GlobalSetup]\r\n        public void Setup()\r\n        {\r\n            A = new float[N];\r\n            B = new float[N];\r\n            R = new float[N];\r\n\r\n            for (int i = 0; i < N; i++)\r\n            {\r\n                A[i] = i;\r\n                B[i] = i;\r\n                R[i] = i + i;\r\n            }\r\n\r\n            var par1 = Expression.Parameter(typeof(float));\r\n            var par2 = Expression.Parameter(typeof(float));\r\n            var add = Expression.Add(par1, par2);\r\n        }\r\n\r\n        [Benchmark(OperationsPerInvoke = 100)]\r\n        public unsafe void AddWithFunction()\r\n        {\r\n            int N = A.Length;\r\n            float[] C = new float[N];\r\n\r\n            fixed (float* Apinned = A)\r\n            fixed (float* Bpinned = B)\r\n            fixed (float* Cpinned = C)\r\n            {\r\n                float* aptr = Apinned;\r\n                float* bptr = Bpinned;\r\n                float* cptr = Cpinned;\r\n\r\n                for (int i = 0; i < N; i++, aptr++, bptr++, cptr++)\r\n                    *cptr = Add(*aptr, *bptr);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nI looked at the codegen for AddWithFunction and it is identical on Core and Desktop, so the issue is somewhere else. We'll need to take a closer look and figure out what's different here.","Url":"https://github.com/dotnet/coreclr/issues/23277","RelatedDescription":"Open issue \"Investigate perf difference in code adding float arrays\" (#23277)"},{"Id":"421314732","IsPullRequest":false,"CreatedAt":"2019-03-15T01:33:43","Actor":"VincentBu","Number":"23274","RawContent":null,"Title":"[x64] Test failed: System.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs3/837/\r\n\r\n**Failed tests:**\r\nSystem.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds\r\n\r\n**Log:**\r\n```\r\nSystem.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds [FAIL]\r\n        System.Net.Sockets.SocketException : Address already in use\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs3/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs(5170,0): at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs3/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs(762,0): at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs3/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs(705,0): at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs3/_/fx/src/System.Net.Sockets/tests/FunctionalTests/SocketOptionNameTest.cs(467,0): at System.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23274","RelatedDescription":"Open issue \"[x64] Test failed: System.Net.Sockets.Tests.SocketOptionNameTest.BindDuringTcpWait_Succeeds\" (#23274)"},{"Id":"421313218","IsPullRequest":false,"CreatedAt":"2019-03-15T01:26:13","Actor":"VincentBu","Number":"23273","RawContent":null,"Title":"[x64] Test failed: tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_osx10.12_jitstress2_tst/552/\r\n\r\n**Failed tests:**\r\ntracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_sh\r\n\r\n**Log:**\r\n```\r\ntracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_sh [FAIL]\r\n        \r\n        Assert failure(PID 26419 [0x00006733], Thread: 559254 [0x88896]): Assertion failed 'kind == Overwrite' in 'Tracing.Tests.EventSourceTrace:Main(ref):int' (IL size 411)\r\n        \r\n            File: /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/src/jit/jithashtable.h Line: 270\r\n            Image: /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_jitstress2_tst/bin/tests/OSX.x64.Checked/Tests/Core_Root/corerun\r\n        \r\n        /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_jitstress2_tst/bin/tests/OSX.x64.Checked/tracing/eventsource/eventsourcetrace/eventsourcetrace/eventsourcetrace.sh: line 259: 26419 Abort trap: 6           (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        /n/nReturn code:      1/nRaw output file:      /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_jitstress2_tst/bin/tests/OSX.x64.Checked/tracing/eventsource/Reports/tracing.eventsource/eventsourcetrace/eventsourcetrace/eventsourcetrace.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_jitstress2_tst/bin/tests/OSX.x64.Checked/Tests/Core_Root/corerun eventsourcetrace.exe ''\r\n        Expected: 100\r\n        Actual: 134\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_jitstress2_tst/bin/tests/OSX.x64.Checked/Tests/Core_Root/n> /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_jitstress2_tst/bin/tests/OSX.x64.Checked/tracing/eventsource/eventsourcetrace/eventsourcetrace/eventsourcetrace.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/bin/tests/OSX.x64.Checked/TestWrappers/tracing.eventsource/tracing.eventsource.XUnitWrapper.cs(109,0): at tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23273","RelatedDescription":"Open issue \"[x64] Test failed: tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_sh\" (#23273)"},{"Id":"421586819","IsPullRequest":false,"CreatedAt":"2019-03-10T20:12:25","Actor":"mrange","Number":"23285","RawContent":null,"Title":"Struct type overhead higher than expected for small numerical vectors","State":"open","Body":"# Struct type overhead higher than expected for small numerical vectors\r\n\r\n## General\r\n\r\nI am running dotnet 3.0 preview on Windows 10:\r\n\r\n```\r\n$ dotnet --version\r\n3.0.100-preview-010184\r\n```\r\n\r\nMy CPU is: `Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz`\r\n\r\n(so it doesn't have FMA support but do support AVX).\r\n\r\nI have been messing around with the new intrinsics support i in dotnet core 3.0 quite a lot and had some success with it. I want to write Raymarcher using SIMD AVX.\r\n\r\nTodo so I declare a SIMD V3 struct type:\r\n\r\n```csharp\r\n  // Snippet of a bigger program\r\n  using VF = System.Runtime.Intrinsics.Vector256<float>;\r\n  struct V3\r\n  {\r\n    public VF X;\r\n    public VF Y;\r\n    public VF Z;\r\n  }\r\n```\r\n\r\nI know there are SIMD enabled types in `System.Numerics.Vector` but I want to do my own custom struct SIMD types.\r\n\r\nWhen I inspect the disassembly code I find code that seems to do nothing except slowing down performance. I can work-around these issues by inlining all code but naturally I don't want to do that as that will significantly complicate my raymarchers.\r\n\r\nI have the full code attached below.\r\n\r\nI declared a few operators like so:\r\n\r\n```csharp\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static V3 operator+(in V3 l, in V3 r)\r\n    {\r\n      return new V3(Avx.Add(l.X, r.X), Avx.Add(l.Y, r.Y), Avx.Add(l.Z, r.Z));\r\n    }\r\n```\r\n\r\nMy inner loop looks like this\r\n\r\n```csharp\r\n        var qre   = re*re;  // re and qre are V3 type\r\n        var qim   = im*im;\r\n        var reim  = re*im;\r\n        re = qre - qim + cre;\r\n        im = reim + reim + cim;\r\n```\r\n\r\nWhen looking into the disassembly I find code that is odd to me:\r\n\r\n```asm\r\n; qre = re*re\r\n00007ffa`edfa8373 c54c59e6        vmulps  ymm12,ymm6,ymm6\r\n00007ffa`edfa8377 c54459ef        vmulps  ymm13,ymm7,ymm7\r\n00007ffa`edfa837b c4413c59f0      vmulps  ymm14,ymm8,ymm8\r\n; Saving qre (Not really needed)\r\n00007ffa`edfa8380 c57d11a42480020000 vmovupd ymmword ptr [rsp+280h],ymm12\r\n00007ffa`edfa8389 c57d11ac2460020000 vmovupd ymmword ptr [rsp+260h],ymm13\r\n00007ffa`edfa8392 c57d11b42440020000 vmovupd ymmword ptr [rsp+240h],ymm14\r\n; Reloading qre? (Shouldn't be needed)\r\n00007ffa`edfa839b c57d10a42480020000 vmovupd ymm12,ymmword ptr [rsp+280h]\r\n00007ffa`edfa83a4 c57d10ac2460020000 vmovupd ymm13,ymmword ptr [rsp+260h]\r\n00007ffa`edfa83ad c57d10b42440020000 vmovupd ymm14,ymmword ptr [rsp+240h]\r\n; qim = im*im\r\n00007ffa`edfa83b6 c4413459f9      vmulps  ymm15,ymm9,ymm9\r\n00007ffa`edfa83bb c4c12c59ea      vmulps  ymm5,ymm10,ymm10\r\n00007ffa`edfa83c0 c4c12459e3      vmulps  ymm4,ymm11,ymm11\r\n; Saving qre (Not really needed)\r\n00007ffa`edfa83c5 c57d11bc2420020000 vmovupd ymmword ptr [rsp+220h],ymm15\r\n00007ffa`edfa83ce c5fd11ac2400020000 vmovupd ymmword ptr [rsp+200h],ymm5\r\n00007ffa`edfa83d7 c5fd11a424e0010000 vmovupd ymmword ptr [rsp+1E0h],ymm4\r\n; Reloading qim? (Shouldn't be needed)\r\n00007ffa`edfa83e0 c5fd10a42420020000 vmovupd ymm4,ymmword ptr [rsp+220h]\r\n00007ffa`edfa83e9 c5fd10ac2400020000 vmovupd ymm5,ymmword ptr [rsp+200h]\r\n00007ffa`edfa83f2 c57d10bc24e0010000 vmovupd ymm15,ymmword ptr [rsp+1E0h]\r\n; reim = re*rim\r\n00007ffa`edfa83fb c4c14c59f1      vmulps  ymm6,ymm6,ymm9\r\n00007ffa`edfa8400 c4c14459fa      vmulps  ymm7,ymm7,ymm10\r\n00007ffa`edfa8405 c4413c59c3      vmulps  ymm8,ymm8,ymm11\r\n; Saving reim (Not really needed)\r\n00007ffa`edfa840a c5fd11b424c0010000 vmovupd ymmword ptr [rsp+1C0h],ymm6\r\n00007ffa`edfa8413 c5fd11bc24a0010000 vmovupd ymmword ptr [rsp+1A0h],ymm7\r\n00007ffa`edfa841c c57d11842480010000 vmovupd ymmword ptr [rsp+180h],ymm8\r\n; Reloading reim? (Shouldn't be needed)\r\n00007ffa`edfa8425 c57d108c24c0010000 vmovupd ymm9,ymmword ptr [rsp+1C0h]\r\n00007ffa`edfa842e c57d109424a0010000 vmovupd ymm10,ymmword ptr [rsp+1A0h]\r\n00007ffa`edfa8437 c57d109c2480010000 vmovupd ymm11,ymmword ptr [rsp+180h]\r\n; (qre - qim)\r\n00007ffa`edfa8440 c59c5ce4        vsubps  ymm4,ymm12,ymm4\r\n00007ffa`edfa8444 c5945ced        vsubps  ymm5,ymm13,ymm5\r\n00007ffa`edfa8448 c4c10c5cf7      vsubps  ymm6,ymm14,ymm15\r\n; Saving intermediate results (Not really needed)\r\n00007ffa`edfa844d c5fd11a42460010000 vmovupd ymmword ptr [rsp+160h],ymm4 ss:000000b7`64d7d1a0=00\r\n00007ffa`edfa8456 c5fd11ac2440010000 vmovupd ymmword ptr [rsp+140h],ymm5\r\n00007ffa`edfa845f c5fd11b42420010000 vmovupd ymmword ptr [rsp+120h],ymm6\r\n; Loading intermediate results (Shouldn't be needed)\r\n00007ffa`edfa8468 c5fd10a42460010000 vmovupd ymm4,ymmword ptr [rsp+160h]\r\n00007ffa`edfa8471 c5fd10ac2440010000 vmovupd ymm5,ymmword ptr [rsp+140h]\r\n00007ffa`edfa847a c5fd10b42420010000 vmovupd ymm6,ymmword ptr [rsp+120h]\r\n; re = intermediate + cre\r\n00007ffa`edfa8483 c5dc58e0        vaddps  ymm4,ymm4,ymm0\r\n00007ffa`edfa8487 c5d458e9        vaddps  ymm5,ymm5,ymm1\r\n00007ffa`edfa848b c5cc58f2        vaddps  ymm6,ymm6,ymm2\r\n; Saving re (Needed?)\r\n00007ffa`edfa848f c5fd11a42400010000 vmovupd ymmword ptr [rsp+100h],ymm4\r\n00007ffa`edfa8498 c5fd11ac24e0000000 vmovupd ymmword ptr [rsp+0E0h],ymm5\r\n00007ffa`edfa84a1 c5fd11b424c0000000 vmovupd ymmword ptr [rsp+0C0h],ymm6\r\n; Reloading re (Different registers)\r\n00007ffa`edfa84aa c5fd10b42400010000 vmovupd ymm6,ymmword ptr [rsp+100h]\r\n00007ffa`edfa84b3 c5fd10bc24e0000000 vmovupd ymm7,ymmword ptr [rsp+0E0h]\r\n00007ffa`edfa84bc c57d108424c0000000 vmovupd ymm8,ymmword ptr [rsp+0C0h]\r\n; (reim + reim)\r\n00007ffa`edfa84c5 c4c13458e1      vaddps  ymm4,ymm9,ymm9\r\n00007ffa`edfa84ca c4c12c58ea      vaddps  ymm5,ymm10,ymm10\r\n00007ffa`edfa84cf c4412458cb      vaddps  ymm9,ymm11,ymm11\r\n; Saving intermediate results (Not really needed)\r\n00007ffa`edfa84d4 c5fd11a424a0000000 vmovupd ymmword ptr [rsp+0A0h],ymm4\r\n00007ffa`edfa84dd c5fd11ac2480000000 vmovupd ymmword ptr [rsp+80h],ymm5\r\n00007ffa`edfa84e6 c57d114c2460    vmovupd ymmword ptr [rsp+60h],ymm9\r\n; Loading intermediate results (Shouldn't be needed)\r\n00007ffa`edfa84ec c5fd10a424a0000000 vmovupd ymm4,ymmword ptr [rsp+0A0h]\r\n00007ffa`edfa84f5 c5fd10ac2480000000 vmovupd ymm5,ymmword ptr [rsp+80h]\r\n00007ffa`edfa84fe c57d104c2460    vmovupd ymm9,ymmword ptr [rsp+60h]\r\n; im = intermediate + cim\r\n00007ffa`edfa8504 c5dc58e3        vaddps  ymm4,ymm4,ymm3\r\n00007ffa`edfa8508 c57d10a424e0020000 vmovupd ymm12,ymmword ptr [rsp+2E0h]\r\n00007ffa`edfa8511 c4c15458ec      vaddps  ymm5,ymm5,ymm12\r\n00007ffa`edfa8516 c57d10ac24c0020000 vmovupd ymm13,ymmword ptr [rsp+2C0h]\r\n00007ffa`edfa851f c4413458cd      vaddps  ymm9,ymm9,ymm13\r\n; Saving re (Needed?)\r\n00007ffa`edfa8524 c5fd11642440    vmovupd ymmword ptr [rsp+40h],ymm4\r\n00007ffa`edfa852a c5fd116c2420    vmovupd ymmword ptr [rsp+20h],ymm5\r\n00007ffa`edfa8530 c57d110c24      vmovupd ymmword ptr [rsp],ymm9\r\n; Reloading im (Different registers)\r\n00007ffa`edfa8535 c57d104c2440    vmovupd ymm9,ymmword ptr [rsp+40h]\r\n00007ffa`edfa853b c57d10542420    vmovupd ymm10,ymmword ptr [rsp+20h]\r\n00007ffa`edfa8541 c57d101c24      vmovupd ymm11,ymmword ptr [rsp]\r\n; What is this?\r\n00007ffa`edfa8546 c57d119c24a0020000 vmovupd ymmword ptr [rsp+2A0h],ymm11 ss:000000b7`64d7d2e0=00\r\n; Loop\r\n00007ffa`edfa854f ffc2            inc     edx\r\n00007ffa`edfa8551 81fa80969800    cmp     edx,989680h\r\n; What is this?\r\n00007ffa`edfa8557 c57d11a424e0020000 vmovupd ymmword ptr [rsp+2E0h],ymm12\r\n00007ffa`edfa8560 c57d11ac24c0020000 vmovupd ymmword ptr [rsp+2C0h],ymm13\r\n00007ffa`edfa8569 0f8c1f010000    jl      00007ffa`edfa868e\r\n```\r\n\r\nSo what seems odd to me is saving state to the stack and then immedietly reloading it and never looking at the saved state again. Perhaps one could argue that `qre` and `qim` needs visibility because I named the variables (lvalue expressions to borrow a term from c++) but it also seems intermediate results are stored on the stack (rvalue expressions).\r\n\r\nI was helped somewhat by adding `in` that did eliminate some code but no the unnecessary writes to stack (unnecessary as it seems to me).\r\n\r\nIf inline all operations so that my inner loop looks like this:\r\n\r\n```csharp\r\n        var qrex  = Avx.Multiply(rex,rex);\r\n        var qrey  = Avx.Multiply(rey,rey);\r\n        var qrez  = Avx.Multiply(rez,rez);\r\n        var qimx  = Avx.Multiply(imx,imx);\r\n        var qimy  = Avx.Multiply(imy,imy);\r\n        var qimz  = Avx.Multiply(imz,imz);\r\n        var reimx = Avx.Multiply(rex,imx);\r\n        var reimy = Avx.Multiply(rey,imy);\r\n        var reimz = Avx.Multiply(rez,imz);\r\n        rex = Avx.Add(Avx.Subtract(qrex,qimx),crex);\r\n        rey = Avx.Add(Avx.Subtract(qrey,qimy),crey);\r\n        rez = Avx.Add(Avx.Subtract(qrez,qimz),crez);\r\n        imx = Avx.Add(Avx.Add(reimx,reimx),cimx);\r\n        imy = Avx.Add(Avx.Add(reimy,reimy),cimy);\r\n        imz = Avx.Add(Avx.Add(reimz,reimz),cimz);\r\n```\r\n\r\nThen the disassembly looks more appealing and performs 3x faster.\r\n\r\n\r\n```asm\r\n; qre = re*re\r\n00007ffa`edf88373 c54c59e6        vmulps  ymm12,ymm6,ymm6\r\n00007ffa`edf88377 c54459ef        vmulps  ymm13,ymm7,ymm7\r\n00007ffa`edf8837b c4413c59f0      vmulps  ymm14,ymm8,ymm8\r\n; qim = im*im\r\n00007ffa`edf88380 c4413459f9      vmulps  ymm15,ymm9,ymm9\r\n00007ffa`edf88385 c4c12c59ea      vmulps  ymm5,ymm10,ymm10\r\n00007ffa`edf8838a c4c12459e3      vmulps  ymm4,ymm11,ymm11\r\n; reim = re*im\r\n00007ffa`edf8838f c4414459d2      vmulps  ymm10,ymm7,ymm10\r\n00007ffa`edf88394 c4413c59db      vmulps  ymm11,ymm8,ymm11\r\n00007ffa`edf88399 c4414c59c9      vmulps  ymm9,ymm6,ymm9\r\n; (qre - qim) + cre\r\n00007ffa`edf8839e c4c11c5cf7      vsubps  ymm6,ymm12,ymm15\r\n00007ffa`edf883a3 c5cc58f0        vaddps  ymm6,ymm6,ymm0\r\n00007ffa`edf883a7 c5945ced        vsubps  ymm5,ymm13,ymm5\r\n00007ffa`edf883ab c5d458f9        vaddps  ymm7,ymm5,ymm1\r\n00007ffa`edf883af c58c5ce4        vsubps  ymm4,ymm14,ymm4\r\n00007ffa`edf883b3 c55c58c2        vaddps  ymm8,ymm4,ymm2\r\n; (reim + reim) + cim\r\n00007ffa`edf883b7 c4c13458e1      vaddps  ymm4,ymm9,ymm9\r\n00007ffa`edf883bc c55c58cb        vaddps  ymm9,ymm4,ymm3\r\n00007ffa`edf883c0 c4c12c58e2      vaddps  ymm4,ymm10,ymm10\r\n00007ffa`edf883c5 c5fd10ac24a0010000 vmovupd ymm5,ymmword ptr [rsp+1A0h]\r\n00007ffa`edf883ce c55c58d5        vaddps  ymm10,ymm4,ymm5\r\n00007ffa`edf883d2 c4c12458e3      vaddps  ymm4,ymm11,ymm11\r\n00007ffa`edf883d7 c57d10a42480010000 vmovupd ymm12,ymmword ptr [rsp+180h]\r\n00007ffa`edf883e0 c4415c58dc      vaddps  ymm11,ymm4,ymm12\r\n; Loop\r\n00007ffa`edf883e5 ffc2            inc     edx\r\n00007ffa`edf883e7 81fa80969800    cmp     edx,989680h\r\n; What is this\r\n00007ffa`edf883ed c5fd11ac24a0010000 vmovupd ymmword ptr [rsp+1A0h],ymm5\r\n00007ffa`edf883f6 c57d11a42480010000 vmovupd ymmword ptr [rsp+180h],ymm12\r\n00007ffa`edf883ff 0f8c6effffff    jl      00007ffa`edf88373\r\n```\r\n\r\nFor F# the disassembly looks even worse. \r\n\r\nPerhaps there are some obvious flags I don't know of that I should have set on my struct types to enable the jitter to eliminate the intermediate results. I am happy with such a solution.\r\n\r\nFull C# example: \r\n\r\nproject file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <TieredCompilation>false</TieredCompilation>\r\n    <LangVersion>8.0</LangVersion>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```csharp\r\nnamespace csperftest\r\n{\r\n  using System;\r\n  using System.Runtime.CompilerServices;\r\n  using System.Diagnostics;\r\n  using System.Runtime.InteropServices;\r\n  using System.Runtime.Intrinsics;\r\n  using System.Runtime.Intrinsics.X86;\r\n\r\n  using VF = System.Runtime.Intrinsics.Vector256<float>;\r\n\r\n\r\n  struct V3\r\n  {\r\n    public VF X;\r\n    public VF Y;\r\n    public VF Z;\r\n\r\n    public static readonly V3 Zero = new V3 ();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public V3(VF x, VF y, VF z)\r\n    {\r\n      X = x;\r\n      Y = y;\r\n      Z = z;\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static V3 operator+(in V3 l, in V3 r)\r\n    {\r\n      return new V3(Avx.Add(l.X, r.X), Avx.Add(l.Y, r.Y), Avx.Add(l.Z, r.Z));\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static V3 operator-(in V3 l, in V3 r)\r\n    {\r\n      return new V3(Avx.Subtract(l.X, r.X), Avx.Subtract(l.Y, r.Y), Avx.Subtract(l.Z, r.Z));\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static V3 operator*(in V3 l, in V3 r)\r\n    {\r\n      return new V3(Avx.Multiply(l.X, r.X), Avx.Multiply(l.Y, r.Y), Avx.Multiply(l.Z, r.Z));\r\n    }\r\n\r\n    public override string ToString() => $\"(X: {X}, Y: {Y}, Z: {Z})\";\r\n\r\n  }\r\n\r\n  class Program\r\n  {\r\n    static (V3 re, V3 im) TestSlow(V3 cre_, V3 cim_)\r\n    {\r\n      var cre = cre_;\r\n      var cim = cim_;\r\n\r\n      var re = cre;\r\n      var im = cim;\r\n      for (var iter = 0; iter < 10000000; ++iter)\r\n      {\r\n        var qre   = re*re;\r\n        var qim   = im*im;\r\n        var reim  = re*im;\r\n        re = qre - qim + cre;\r\n        im = reim + reim + cim;\r\n      }\r\n\r\n      return (re, im);\r\n    }\r\n\r\n    static (V3 re, V3 im) TestFast(V3 cre_, V3 cim_)\r\n    {\r\n      var crex = cre_.X;\r\n      var crey = cre_.Y;\r\n      var crez = cre_.Z;\r\n      var cimx = cim_.X;\r\n      var cimy = cim_.Y;\r\n      var cimz = cim_.Z;\r\n\r\n      var rex = crex;\r\n      var rey = crey;\r\n      var rez = crez;\r\n      var imx = cimx;\r\n      var imy = cimy;\r\n      var imz = cimz;\r\n      for (var iter = 0; iter < 10000000; ++iter)\r\n      {\r\n        var qrex  = Avx.Multiply(rex,rex);\r\n        var qrey  = Avx.Multiply(rey,rey);\r\n        var qrez  = Avx.Multiply(rez,rez);\r\n        var qimx  = Avx.Multiply(imx,imx);\r\n        var qimy  = Avx.Multiply(imy,imy);\r\n        var qimz  = Avx.Multiply(imz,imz);\r\n        var reimx = Avx.Multiply(rex,imx);\r\n        var reimy = Avx.Multiply(rey,imy);\r\n        var reimz = Avx.Multiply(rez,imz);\r\n        rex = Avx.Add(Avx.Subtract(qrex,qimx),crex);\r\n        rey = Avx.Add(Avx.Subtract(qrey,qimy),crey);\r\n        rez = Avx.Add(Avx.Subtract(qrez,qimz),crez);\r\n        imx = Avx.Add(Avx.Add(reimx,reimx),cimx);\r\n        imy = Avx.Add(Avx.Add(reimy,reimy),cimy);\r\n        imz = Avx.Add(Avx.Add(reimz,reimz),cimz);\r\n      }\r\n\r\n      return (new V3(rex, rey, rez), new V3(imx, imy, imz));\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n      // To make it simpler attaching the debugger\r\n      for (var iter = 0; iter < 1000; ++iter)\r\n      {\r\n        var sw = new Stopwatch();\r\n        sw.Start();\r\n        TestSlow(V3.Zero, V3.Zero);\r\n        //TestFast(V3.Zero, V3.Zero);\r\n        sw.Stop();\r\n        Console.WriteLine($\"Took: {sw.ElapsedMilliseconds}\");\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/23285","RelatedDescription":"Open issue \"Struct type overhead higher than expected for small numerical vectors\" (#23285)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"421755124","IsPullRequest":false,"CreatedAt":"2019-03-16T01:37:46","Actor":"swaroop-sridhar","Number":"10986","RawContent":null,"Title":"Supporting third party libraries/frameworks ","State":"open","Body":"Recently, we had enquiries for a customer who wanted to deploy their own custom framework on client machines. This discussion is about possible solutions for this scenario in .Net Core 3.\r\n \r\n## Customer requirements\r\n \r\nThe developer wants to:\r\n* Implement a suite of several libraries, that are used by several client apps.\r\n* Deploy one copy of library-suite on client machines in a central location\r\n* Push updates to the library-suite without having to recompile the client apps\r\n* Is happy to change their library-suite/apps to target .net core 3\r\n \r\nIn particular, the customer specifically asked allowing third party frameworks (similar to standard frameworks like `Microsoft.AspNetCore.App`).\r\n\r\n## Solution Options\r\n \r\n### Additional-deps\r\nThis is a simple solution to separate some of the app’s dependencies to a separate (possible shared) location. This option involves:\r\n* App development: Remove references to the library-suite from the apps, instead use a different light-up option such as startup-hook.\r\n* On client machines: Deploy the library-suite to a shared location, and set up `DOTNET_ADDITIONAL_DEPS` when apps are run.\r\n\r\nAdditional-deps have several known limitations, for example, as noted here.\r\n \r\n### Startup Hook\r\nThis option involves dynamically loading the library-suite into apps during application startup. \r\n* This requires setting `DOTNET_STARTUP_HOOKS` to appropriate loader code on client machines at app-startup. The loader code can then use custom logic to load the library-suite from a possible shared/versioned location.\r\n* This may require some coordination with other parties (ex: profiler) that may use the startup-hook (multiple assemblies can be hooked up at startup).\r\n\r\n### Custom AppHost\r\nThe library developer provides a custom host to be used by the app-developers. The custom host will then setup the appropriate library dependencies during app startup, before starting the runtime.\r\n \r\n### Components\r\nThis option is to load the library-suite as a plugin, where:\r\n* The library-suite exposes a minimal version (similar to reference assemblies) which only exposes the public API, and implements stub code to load the implementation assemblies dynamically.\r\n* Apps build with a package-reference to the suite.\r\nAt runtime, the above stub code loads the actual library code (say, using the AssemblyDependencyResolver), from a possibly shared location.\r\n \r\n### Third-party frameworks\r\nIn this option, the library-suite is published as a framework. This naturally achieves the customer requirements because:\r\n* The library-suite is published as a nuget package that contains:\r\n    * Its reference assemblies\r\n    * A target file that can be imported by the apps to include this suite as an additional target framework\r\n* Apps import/reference the above nuget package and ship independent of the library-suite’s implementation\r\n* The implementation assemblies of the library-suite are installed to `dotnet/shared/<library-suite>/<version>` on client machines. (one-copy shared, versioned location).\r\n \r\nThe above approach is straight-forward for developers to use. However, support for third-party frameworks is not yet officially available. \r\n\r\nI tried out a prototype, and was able to load a custom framework from a shared location (with some work-arounds for issues discussed below).\r\n \r\n### Pending work\r\nHere’s the known required work, there will likely be more as we productize this feature:\r\n* Tooling for adding frameworks: It should easy to add a framework to the list of dependent frameworks published in the `runtimeconfig.json` file (ex: add a framework to `RuntimeFramework` item). However, currently doesn’t work in the CLI because the property is overwritten by one of the build tasks. This should be a straightforward issue to fix.\r\n* Mismatched shared framework versions can cause problems: dotnet/core-setup#4947. This is again a bug that should be fixed.\r\n \r\n### Reservations\r\nWhile we agree that supporting third-party frameworks is useful for developers, there are some reservations about making this feature publicly available in .Net Core 3. The concerns are:\r\n* Bugs: We have a controlled environment with known frameworks. Custom frameworks may trigger unforeseen bugs. It is better to let the multiple-frameworks feature bake with existing framework for a release cycle.\r\n* Framework references: There are unresolved issues with supporting custom framework-references (which are not exposed by using third-party frameworks with package-references).\r\n* Install location:  Unanticipated issues with custom code within `dotnet` install location (`dotnet/shared/…`).\r\n* Design limitation: We have previously excluded custom frameworks from .net core 3. We may redesign the issue in .net core 3.1. But exposing the feature now may create a compatibility requirement, and restrict design options. Note that users may themselves figure out and use custom frameworks – but these are not supported by the `dotnet` org.\r\n \r\n## Discussion\r\n \r\nPlease add your thoughts / considerations about:\r\n* Exposing the possibility of third-party frameworks to customers, say as a sample.\r\n* Any other options to solve the customer scenario.\r\n* Similar usage scenarios\r\n","Url":"https://github.com/dotnet/cli/issues/10986","RelatedDescription":"Open issue \"Supporting third party libraries/frameworks \" (#10986)"},{"Id":"421727930","IsPullRequest":false,"CreatedAt":"2019-03-15T22:34:42","Actor":"MichaelSimons","Number":"10985","RawContent":null,"Title":"'Exec format error' when running global tool on ARM32","State":"open","Body":"Installing a global tool on ARM32 doesn't run.  Fails with `cannot execute binary file: Exec format error`.\r\n\r\n# Repro Steps\r\n1. Requirement - run from an ARM32 machine.  \r\n1. docker run -it --rm mcr.microsoft.com/dotnet/core/sdk:3.0\r\n1. dotnet tool install --tool-path /mytool <some tool>\r\n1. cd /mytool \r\n1. execute installed tool\r\n\r\n# Results\r\n\r\ncannot execute binary file: Exec format error`\r\n\r\n# Expected Results\r\n\r\nThe tool should run\r\n\r\n# Observations\r\n1. I verified this scenario works for 2.1 but not 3.0.\r\n1. The app will run if you path down to the .store/.../tools folder and run dotnet/tool.dll\r\n1. This was discovered with testing installing PowerShell as a global tool - https://github.com/dotnet/dotnet-docker/pull/960#discussion_r266060183.  PowerShell in this case is built against 2.1 but has a custom roll forward policy defined - https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/roll-forward-on-no-candidate-fx.md.  I don't know if that is a factor or not.  It works just find in amd64.\r\n","Url":"https://github.com/dotnet/cli/issues/10985","RelatedDescription":"Open issue \"'Exec format error' when running global tool on ARM32\" (#10985)"},{"Id":"421698028","IsPullRequest":true,"CreatedAt":"2019-03-15T20:46:37","Actor":"Potapy4","Number":"10984","RawContent":null,"Title":"Fix typo","State":"open","Body":"- Rename from `.Net` to `.NET`","Url":"https://github.com/dotnet/cli/pull/10984","RelatedDescription":"Open PR \"Fix typo\" (#10984)"},{"Id":"421627864","IsPullRequest":false,"CreatedAt":"2019-03-15T17:28:51","Actor":"wli3","Number":"10983","RawContent":null,"Title":"Should we unify global tools invocation and local tools invocation","State":"open","Body":"local tools require prefix `dotnet` like `dotnet t-rex` due to technical constrain while global tools only need `t-rex`. The cause tools' author needing extra documentation. Should we also allow global tools be able to invoke by `dotnet t-rex` ?","Url":"https://github.com/dotnet/cli/issues/10983","RelatedDescription":"Open issue \"Should we unify global tools invocation and local tools invocation\" (#10983)"},{"Id":"421623237","IsPullRequest":false,"CreatedAt":"2019-03-15T17:17:03","Actor":"leecow","Number":"10982","RawContent":null,"Title":"Assembly built with \"Portable\" debugging information - contains source information","State":"open","Body":"@pavlexander commented on [Thu Mar 14 2019](https://github.com/dotnet/core/issues/2449)\n\n# Assembly built with \"Portable\" debugging information - contains source information\r\n\r\n## Description\r\n\r\nWhen referencing an assembly that was build with \"Portable\" debugging information - it is possible to step into the source code, while in debug mode. According to documentation - \"Portable\" debugging information ensures that a \"pdb\" file is created. It says **nothing** about the fact that the DLL itself will contain an information about where the DLL was compiled at. Therefore, when this information is inside DLL - you are able to step into the source, given that location and checksum not changed.\r\n\r\nHere is the documentation I was referencing to:\r\nhttps://docs.microsoft.com/en-us/visualstudio/ide/reference/advanced-build-settings-dialog-box-csharp?view=vs-2017\r\n\r\n> * none\r\n> \r\n> Specifies that no debugging information will be generated.\r\n> \r\n> * portable\r\n> \r\n> Produces a .PDB file, a non-platform-specific, portable symbol file that provides other tools, especially debuggers, information about what is in the main executable file and how it was produced. See Portable PDB for more information.\r\n\r\n# General\r\n\r\n## Specs\r\nOS:\r\n\r\nOS Name\tMicrosoft Windows 10 Enterprise\r\nVersion 10.0.16299 Build 16299\r\nVS:\r\n\r\nMicrosoft Visual Studio Professional 2017\r\nVersion 15.9.7\r\nVisualStudio.15.Release/15.9.7+28307.423\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\ndotnet --version\r\n\r\n2.2.104\r\n\r\n## Prerequisites\r\n\r\nCheckout the solution from my repo:\r\n\r\nhttps://github.com/pavlexander/dotnetbugs/tree/master/Bugs/13032019_DllIncludesPdbInformation\r\n\r\n## Steps to reproduce\r\n\r\n1. Open the solution in VisualStudio\r\n2. Build project \"DllWithPortableDebuggingInformation\"\r\n**Note 1**: see the post-build events. The script will copy the DLL into a console app project.\r\n**Note 2**: script will also delete PDB so there is no information anywhere about the source..\r\n**Note 3**: see the project settings. Debugging information set to \"Portable\".\r\n3. For console application, right click on project, \"Add -> Reference\". Browse for DLL that was copied into the root folder of console app project, add a reference to it!\r\nPath: \"\\Bugs\\13032019_DllIncludesPdbInformation\\DllIncludesPdbInformation\\DllWithPortableDebuggingInformation.dll\"\r\n4. Go to \"Program.cs\" of console application and un-comment the line which is marked with a comment. \r\n5. Put a debug point onto the same line that you have uncommented.\r\n6. Start console app in debug mode. On break - step into the code of external library.\r\n\r\n**Expected result:**\r\nStepping into the code is skipped because DLL has no information about source code location.\r\n\r\n**Actual result:**\r\nStepping into the code works, despite the fact that PDB file does not even exists.\r\n\r\n\r\n## Proposed solution\r\n\r\nWe either need information about this behavior to be properly documented, or, if it's a bug, then it needs to be fixed.\r\n\r\n## Additional questions\r\n\r\nPlease take a minute to answer following questions:\r\n\r\n1. How to tell, if PDB information is embedded into an DLL? For example, can I use \"JetBrains dotPeek\" to inspect DLL and see what kind of information it contains about the source? I couldn't find any tutorials on how to do it and how/where this information is stored in DLL. Any hints or links are appreciated.\r\n\r\n2. Is it possible to override the \"default source location\" for the loaded DLLs? For example, if an assembly was compiled at \"C:/myCompiledLibs\", but afterwards I moved the source to \"D:/newLocation\" - how do I make it so, that the Visual Studio would look into this new directory for sources, instead of using this info that is embedded into DLL/PDB?\r\n\r\nAny answers are much appreciated.\n\n","Url":"https://github.com/dotnet/cli/issues/10982","RelatedDescription":"Open issue \"Assembly built with \"Portable\" debugging information - contains source information\" (#10982)"},{"Id":"421593590","IsPullRequest":false,"CreatedAt":"2019-03-15T16:06:51","Actor":"qmfrederik","Number":"10981","RawContent":null,"Title":"Build hangs on low-memory device with many CPU cores","State":"open","Body":"## Steps to reproduce\r\n\r\nI'm compiling a .NET Core solution (~40 projects) on a Raspberry Pi. This machine has 4 CPU cores, but only 1 GB of RAM.\r\n\r\nI run `dotnet build` to compile my solution.\r\n\r\n## Expected  behavior\r\n\r\nI expect `dotnet build` to be slow, but work.\r\n\r\n## Actual behavior\r\n\r\nWhat I've observed is that many `dotnet` processes are being launched, eating away memory, until the machine completely runs out of memory and becomes unusable.\r\n\r\nWhen I run the build in a Docker container, and limit the CPUs which the container can access to 1 or 2, the build completes correctly.\r\n\r\nIt appears that `dotnet build` limits the concurrency when the machine is low on CPU, but not when the machine is low on memory.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nroot@da5fb4612217:/# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-arm64\r\n Base Path:   /usr/local/dotnet/sdk/3.0.100-preview3-010431/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview3-010431 [/usr/local/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [/usr/local/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [/usr/local/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10981","RelatedDescription":"Open issue \"Build hangs on low-memory device with many CPU cores\" (#10981)"},{"Id":"421309067","IsPullRequest":true,"CreatedAt":"2019-03-15T01:05:57","Actor":"wli3","Number":"10980","RawContent":null,"Title":"Invoke localtool with dotnet","State":"open","Body":"enable invoke tool with `dotnet TOOLNAME`\r\n\r\nlargely bring back the code from https://github.com/dotnet/cli/pull/10341 but still keep `dotnet tool run TOOLNAME` as non ambiguous version","Url":"https://github.com/dotnet/cli/pull/10980","RelatedDescription":"Open PR \"Invoke localtool with dotnet\" (#10980)"},{"Id":"421147994","IsPullRequest":false,"CreatedAt":"2019-03-14T17:19:27","Actor":"jaredpar","Number":"10979","RawContent":null,"Title":"3.0 SDK is copying runtimes folders and assets to desktop TF","State":"open","Body":"Found during https://github.com/dotnet/roslyn/pull/34093\r\n\r\nRepro Steps\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Use branch fix-sdk\r\n- Run `Build.cmd -build -restore`\r\n\r\nNotice that after build every net472 directory has a runtimes folder under it with the assets you'd expect from .NET Core TF. Example:\r\n\r\n```\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\lib\\net461\\System.Text.Encoding.CodePages.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\native\\Microsoft.DiaSymReader.Native.amd64.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\native\\Microsoft.DiaSymReader.Native.arm.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\native\\Microsoft.DiaSymReader.Native.x86.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win-x64\\native\\Microsoft.DiaSymReader.Native.amd64.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win-x86\\native\\Microsoft.DiaSymReader.Native.x86.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win7-x64\\native\\e_sqlite3.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win7-x86\\native\\e_sqlite3.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win8-arm\\native\\Microsoft.DiaSymReader.Native.arm.dll\r\n```","Url":"https://github.com/dotnet/cli/issues/10979","RelatedDescription":"Open issue \"3.0 SDK is copying runtimes folders and assets to desktop TF\" (#10979)"},{"Id":"420979739","IsPullRequest":true,"CreatedAt":"2019-03-14T16:53:37","Actor":"dotnet-maestro[bot]","Number":"10978","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19163.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10978","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10978)"},{"Id":"420896951","IsPullRequest":false,"CreatedAt":"2019-03-14T08:54:12","Actor":"warrenbuckley","Number":"10977","RawContent":null,"Title":"Self Contained Publish & MacOS Store Submission (System.Security.Cryptography.Native.OpenSsl.dylib)","State":"open","Body":"## Background\r\nI am currently building a cross platform Electron app that uses a .NET Core and Kestrel for a localhost WebAPI for .NET Core to do the lifting & processing that will communicate over HTTP in the HTML/JS of the Electron application.\r\n\r\nBuilding the application and running this works perfectly fine, however when the application is submitted to Apple's AppStore for Review I get the following error from them.\r\n\r\n## Response from Apple's App Review Team 🍎 \r\n>Your app uses or references the following non-public APIs:\r\n>Symbols: _EVP_sha384, _EVP_sha256, _EVP_sha512\r\n>From framework: @rpath/libcrypto.1.0.0.dylib\r\n>In binary: >Contents/Resources/LogViewer.Server/bin/dist/osx/System.Security.Cryptography.Native.OpenSsl.dylib\r\n\r\nAs `System.Security.Cryptography` is part of the .NET Core framework that I need to ship & bundle as part of the application (as I have no guarantee of .NET Core being installed on users machines)\r\n\r\nAre there any suggestions on what I can do?\r\nThanks :)\r\n\r\n\r\n## Steps to reproduce ⚒ \r\nIf you wish you can clone my repository for the project here\r\nhttps://github.com/warrenbuckley/Compact-Log-Format-Viewer/\r\n\r\nIn the `LogViewer.Server` folder run the dotnet CLI publish command as follows:\r\n`dotnet publish --runtime osx-x64 --output bin/dist/osx`\r\n\r\n### CSProj & Nuget References\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <PropertyGroup>\r\n    <!--<RuntimeIdentifiers>win10-x64;osx.10.11-x64</RuntimeIdentifiers>-->\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Serilog.Filters.Expressions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog.Formatting.Compact.Reader\" Version=\"1.0.3\" />\r\n    <PackageReference Include=\"Serilog.Sinks.File\" Version=\"4.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [/usr/local/share/dotnet/sdk]\r\n  2.1.302 [/usr/local/share/dotnet/sdk]\r\n  2.1.504 [/usr/local/share/dotnet/sdk]\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10977","RelatedDescription":"Open issue \"Self Contained Publish & MacOS Store Submission (System.Security.Cryptography.Native.OpenSsl.dylib)\" (#10977)"},{"Id":"420246664","IsPullRequest":false,"CreatedAt":"2019-03-13T17:55:53","Actor":"vellozzi","Number":"10969","RawContent":null,"Title":"v2.1.505+dependencies tag is wrong","State":"closed","Body":"If you look at the [v2.1.505+dependencies](https://github.com/dotnet/cli/commits/v2.1.505%2Bdependencies) tag the tagged commit is [ad523ce44af2876afb3eddbf5a71fdf294ac2bd7](https://github.com/dotnet/cli/commit/ad523ce44af2876afb3eddbf5a71fdf294ac2bd7).\r\n\r\nBut if you look at the [Release/2.1.5xx branch](https://github.com/dotnet/cli/commits/release/2.1.5xx) commit [35fbd6d033612a55ab4a1fcdfbd3ab4c36e8b49e](https://github.com/dotnet/cli/commit/35fbd6d033612a55ab4a1fcdfbd3ab4c36e8b49e) looks like it's the one that should be tagged as v2.1.505+dependencies.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10969","RelatedDescription":"Closed issue \"v2.1.505+dependencies tag is wrong\" (#10969)"},{"Id":"420462402","IsPullRequest":true,"CreatedAt":"2019-03-13T14:32:01","Actor":"dotnet-bot","Number":"10973","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10973","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10973)"},{"Id":"420328208","IsPullRequest":true,"CreatedAt":"2019-03-13T14:32:00","Actor":"livarcocc","Number":"10972","RawContent":null,"Title":"Merges/release/2.1.6xx to release/2.2.2xx (manual)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10972","RelatedDescription":"Closed or merged PR \"Merges/release/2.1.6xx to release/2.2.2xx (manual)\" (#10972)"},{"Id":"420462559","IsPullRequest":true,"CreatedAt":"2019-03-13T12:36:42","Actor":"dotnet-maestro[bot]","Number":"10975","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10975","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10975)"},{"Id":"420462579","IsPullRequest":true,"CreatedAt":"2019-03-13T12:31:44","Actor":"dotnet-maestro[bot]","Number":"10976","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19162.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10976","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10976)"},{"Id":"420462429","IsPullRequest":true,"CreatedAt":"2019-03-13T12:01:10","Actor":"dotnet-bot","Number":"10974","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10974","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#10974)"},{"Id":"420320448","IsPullRequest":true,"CreatedAt":"2019-03-13T05:51:06","Actor":"livarcocc","Number":"10971","RawContent":null,"Title":"Update branding to 2.2.202","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10971","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.202\" (#10971)"},{"Id":"420313665","IsPullRequest":true,"CreatedAt":"2019-03-13T05:42:17","Actor":"livarcocc","Number":"10970","RawContent":null,"Title":"Fix branding and implicit versions for 2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10970","RelatedDescription":"Closed or merged PR \"Fix branding and implicit versions for 2.1.6xx\" (#10970)"},{"Id":"419088891","IsPullRequest":false,"CreatedAt":"2019-03-13T04:22:51","Actor":"mika-s","Number":"10957","RawContent":null,"Title":"Metadata not shown for F# dlls when using dotnet cli to build","State":"closed","Body":"This is similar to [this](https://github.com/Microsoft/visualfsharp/issues/5657) issue, but for the dotnet cli tool rather than when compiling with Visual Studio 2017.\r\n\r\nVersion 2.2.104 is the latest stable version as of this date, so this issue is filed for that particular version.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a folder and make a file called global.json in it. Add the following content to it and save:\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.104\"\r\n  }\r\n}\r\n```\r\n\r\nThis forces dotnet to use version 2.2.104 in case the preview version (3.0) is installed. Run `dotnet --version` to verify.\r\n\r\n2. In the created folder, create a new solution with `dotnet new sln -o FSharpMetadata`.\r\n\r\n3. `cd FSharpMetadata`\r\n\r\n4. `dotnet new console -lang F# -o testproj`\r\n\r\n5. `dotnet sln add testproj`\r\n\r\n6. Open testproj.fsproj with an editor and add the following to the `PropertyGroup` element.\r\n\r\n```xml\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n```\r\n\r\n7. `dotnet build`\r\n\r\n8. `dotnet run --project testproj`\r\n\r\n9. Go to `FSharpMetadata\\testproj\\bin\\Debug\\netcoreapp2.2`, right click on testproj.dll and choose Properties. Go to the Details tab.\r\n\r\n## Expected  behavior\r\n\r\n1. *2.2.104* is shown in the console.\r\n\r\n2. FSharpMetadata folder created, with FSharpMetadata.sln in it.\r\n\r\n3. New working folder is *FSharpMetadata*.\r\n\r\n4. testproj folder created, with testproj.fsproj in it, as well as a few other files.\r\n\r\n5. testproj is added to the sln file.\r\n\r\n6. testproj.fsproj should look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n7. The project is build. testproj.dll is created.\r\n\r\n8.  *Hello World from F#!* is shown in the console. This is to test that building works.\r\n\r\n9. File description has content (e.g. testproj), File version has content (e.g. 1.0.0.0), Product name has content (e.g. testproj), Product version has content (1.0.0), Original filename has content (e.g. testproj.dll).\r\n\r\n## Actual behavior\r\n\r\nAs expected, except for 9). Only Type, Size and Date modified have values. It looks like the screenshots that I posted when I made VS issue. See [here](https://developercommunity.visualstudio.com/content/problem/336722/metadata-not-shown-for-f-dlls-for-net-core.html).\r\n\r\nIf you try to run the repro, but change language to C#, you will get proper metadata for the dll.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n## For searchability\r\n\r\nAttributeInfo","Url":"https://github.com/dotnet/cli/issues/10957","RelatedDescription":"Closed issue \"Metadata not shown for F# dlls when using dotnet cli to build\" (#10957)"},{"Id":"419394583","IsPullRequest":false,"CreatedAt":"2019-03-12T17:05:29","Actor":"baruchiro","Number":"10963","RawContent":null,"Title":"dotnet SDK 2.2.104 don't compile .NET Core 2.2","State":"closed","Body":"## Steps to reproduce\r\nI have a .NET Sdk version 2.1 and lower.\r\nI installed sdk2.2 and sdk3.\r\nI removed sdk3\r\n\r\n## Expected  behavior\r\n`dotnet build` build my project.\r\n\r\n## Actual behavior\r\n`dotnet build`:\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [C:\\Users\\.......\\WebApi.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [C:\\Users\\.......\\WebApi.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.17\r\n```\r\n\r\n## Environment data\r\n`dotnet --info`:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n`WebApi.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n    <NoWarn>1701;1702;CS1591</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.Bot.Builder.Integration.AspNet.Core\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.2\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"4.0.1\" />\r\n  </ItemGroup>\r\n\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/cli/issues/10963","RelatedDescription":"Closed issue \"dotnet SDK 2.2.104 don't compile .NET Core 2.2\" (#10963)"},{"Id":"419948397","IsPullRequest":true,"CreatedAt":"2019-03-12T12:31:36","Actor":"dotnet-maestro[bot]","Number":"10968","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10968","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10968)"},{"Id":"419948215","IsPullRequest":true,"CreatedAt":"2019-03-12T12:31:14","Actor":"dotnet-maestro[bot]","Number":"10967","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19161.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10967","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10967)"},{"Id":"419658240","IsPullRequest":false,"CreatedAt":"2019-03-11T22:55:43","Actor":"fubar-coder","Number":"10966","RawContent":null,"Title":"dotnet --info shows runtimes and sdks twice","State":"closed","Body":"Reopened issue (was: #10479)\r\n\r\n## Steps to reproduce\r\n\r\n1. Ensure that the \"Path\" environment variable contains \"c:\\program files\\dotnet\" (with the same casing)\r\n2. dotnet --info\r\n\r\n## Expected  behavior\r\n\r\nShow every SDK and runtime once.\r\n\r\n## Actual behavior\r\n\r\nShows every SDK and runtime twice.\r\n\r\n## What I found out\r\n\r\nWhen I change the \"Path\" environment variable to use \"C:\\Program Files\\dotnet\", then everything works as expected. It seems that there is a case-sensitive `Distinct` list of SDK paths even though it should be case-insensitive on Windows.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```text\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [c:\\program files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [c:\\program files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [c:\\program files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [c:\\program files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10966","RelatedDescription":"Closed issue \"dotnet --info shows runtimes and sdks twice\" (#10966)"},{"Id":"419549884","IsPullRequest":false,"CreatedAt":"2019-03-11T17:03:11","Actor":"JanEggers","Number":"10965","RawContent":null,"Title":"dotnet pack does not support RepositoryCommit","State":"closed","Body":"## Expected  behavior\r\n\r\ndotnet pack --RepositoryCommit 123 \r\n\r\nnuget seems to support it\r\n\r\nhttps://github.com/NuGet/docs.microsoft.com-nuget/pull/708\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10965","RelatedDescription":"Closed issue \"dotnet pack does not support RepositoryCommit\" (#10965)"},{"Id":"419249660","IsPullRequest":true,"CreatedAt":"2019-03-11T16:17:50","Actor":"dotnet-maestro[bot]","Number":"10959","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19160.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19160.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10959","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10959)"},{"Id":"419525464","IsPullRequest":false,"CreatedAt":"2019-03-11T15:46:03","Actor":"rjgotten","Number":"10964","RawContent":null,"Title":"dotnet pack does not support owners property","State":"closed","Body":"## Steps to reproduce\r\nTry to create a package with `dotnet pack` based on `csproj` metadata properties.\r\nTry to define owners separate from authors. E.g. where a package has a wide group of contributors but a limited set of core maintainers (or a company or other entity) that have full ownership.\r\n\r\n## Expected  behavior\r\nThere should be an `<Owners>` metadata property in the `csproj` format which maps to the `<owners>` node in the `nuspec` format.\r\n\r\n## Actual behavior\r\nThere is no way to set owners separate from authors without resorting to using an external `nuspec` file.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.504\r\n Commit:    91e160c7f0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.504\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.8\r\n  Commit:  209f8aa25c\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10964","RelatedDescription":"Closed issue \"dotnet pack does not support owners property\" (#10964)"},{"Id":"419382563","IsPullRequest":false,"CreatedAt":"2019-03-11T15:41:29","Actor":"hpbieker","Number":"10962","RawContent":null,"Title":"dotnet test does not respect LogFileName -- adds date","State":"closed","Body":"## Steps to reproduce\r\n* Install .NET Core 3.0 preview3\r\n* Create a test project\r\n* Run `dotnet test --logger 'trx;LogFileName=somename.trx'`\r\n\r\n## Expected  behavior\r\nA file named `somename.trx` should be created. In .NET Core 2.2 / Test Execution Command Line Tool Version 15.9.0 I get this behaviour.\r\n\r\n## Actual behavior\r\nA file named `somename_2019-03-11_10-38-36-764.trx` was created.\r\n\r\n```\r\n$ dotnet test --logger 'trx;LogFileName=somename.trx'\r\nTest run for C:\\Users\\nohabie\\AppData\\Local\\Temp\\test\\bin\\Debug\\netcoreapp3.0\\test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.0.0-preview-20190124-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nResults File: C:\\Users\\XXX\\AppData\\Local\\Temp\\test\\TestResults\\somename_2019-03-11_10-38-36-764.trx\r\n\r\nTotal tests: 1. Passed: 1. Failed: 0. Skipped: 0.\r\nTest Run Successful.\r\nTest execution time: 1,1557 Seconds\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10962","RelatedDescription":"Closed issue \"dotnet test does not respect LogFileName -- adds date\" (#10962)"},{"Id":"419251359","IsPullRequest":false,"CreatedAt":"2019-03-11T15:39:30","Actor":"flcdrg","Number":"10960","RawContent":null,"Title":"dotnet add package ignores nuget.config <clear /> directive","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Create new project - eg. `dotnet new console`\r\n2. Add nuget.config\r\n3. Add `<clear />` directive but remove other package sources. eg.\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n <packageSources>\r\n    <clear />\r\n </packageSources>\r\n</configuration>\r\n```\r\n4. Add a new package - eg. `dotnet add .\\dotnetadd-bug.csproj package NewtonSoft.JSON`\r\n\r\n## Expected  behavior\r\n\r\nAdding package should fail because there are no package sources configured\r\n\r\n## Actual behavior\r\n\r\nPackage is added successfully because it appears to use other package sources. \r\n\r\nNote that this is a minimal repo - obviously you wouldn't usually just have a 'clear'! The original problem I saw was where a project was configured to just use an Azure Artifacts repository, but because of the apparent ignoring of the clear directive, packages were being resolved via these other sources rather than through the Artifacts repository (which meant that that repository wasn't using its own upstream sources as expected)\r\n\r\neg.\r\n\r\n<pre>\r\n dotnet add .\\dotnetadd-bug.csproj package NewtonSoft.JSON\r\n  Writing C:\\Users\\David\\AppData\\Local\\Temp\\tmpC8AE.tmp\r\ninfo : Adding PackageReference for package 'NewtonSoft.JSON' into project '.\\dotnetadd-bug.csproj'.\r\nlog  : Restoring packages for C:\\dev\\sandbox\\dotnetadd-bug\\dotnetadd-bug.csproj...\r\nndex.json\r\ninfo :   GET https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/newtonsoft.json/index.json\r\ninfo :   GET https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/flatcontainer/newtonsoft.json/index.json\r\ninfo :   OK https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-dev/nuget/v3/flatcontainer/newtonsoft.json/in\r\ninfo :   OK https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/newtonsoft.json/index.json 1486ms\r\ninfo :   NotFound https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/flatcontainer/newtonsoft.json/index.jso\r\nn 1534ms\r\ninfo : Package 'NewtonSoft.JSON' is compatible with all the specified frameworks in project '.\\dotnetadd-bug.csproj'.\r\ninfo : PackageReference for package 'NewtonSoft.JSON' version '9.0.1' added to file 'C:\\dev\\sandbox\\dotnetadd-bug\\dotnet\r\nadd-bug.csproj'.\r\ninfo : Committing restore...\r\nlog  : Generating MSBuild file C:\\dev\\sandbox\\dotnetadd-bug\\obj\\dotnetadd-bug.csproj.nuget.g.props.\r\ninfo : Writing lock file to disk. Path: C:\\dev\\sandbox\\dotnetadd-bug\\obj\\project.assets.json\r\nlog  : Restore completed in 2.89 sec for C:\\dev\\sandbox\\dotnetadd-bug\\dotnetadd-bug.csproj.\r\n</pre>\r\n\r\n## Environment data\r\n<pre>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007326 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007354 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007363 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007474 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007517 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007576 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009171 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009297 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009748 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009804 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</pre>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10960","RelatedDescription":"Closed issue \"dotnet add package ignores nuget.config <clear /> directive\" (#10960)"},{"Id":"419340559","IsPullRequest":false,"CreatedAt":"2019-03-11T15:19:01","Actor":"yuki233","Number":"10961","RawContent":null,"Title":"With SDK 3.0 Preview4, it will return CSC warning AD0001 when run dotnet build for webapi project at first time","State":"closed","Body":"## Steps to reproduce\r\n1. Install SDK 3.0.100-preview4-010703\r\n\r\n## Expected  behavior\r\n1. Run below command\r\n_dotnet new webapi\r\ndotnet build_\r\n\r\n## Actual behavior\r\nDotnet build succeeded with CSC warning AD0001\r\n![image](https://user-images.githubusercontent.com/1578239/54108642-7a66ba00-4417-11e9-8545-7f2f40516ab1.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010703\r\n Commit:    4ccc726730\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010703\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27510-12\r\n  Commit:  cf9d52e1f0\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-010703 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19158-05 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27510-12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27508-60 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10961","RelatedDescription":"Closed issue \"With SDK 3.0 Preview4, it will return CSC warning AD0001 when run dotnet build for webapi project at first time\" (#10961)"},{"Id":"419177727","IsPullRequest":true,"CreatedAt":"2019-03-11T12:37:04","Actor":"dotnet-maestro[bot]","Number":"10958","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10958","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10958)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"421676181","IsPullRequest":true,"CreatedAt":"2019-03-15T19:40:49","Actor":"terrajobst","Number":"1102","RawContent":null,"Title":"Expose RandomNumberGenerator.GetInt32","State":"open","Body":"Fixes #1101.","Url":"https://github.com/dotnet/standard/pull/1102","RelatedDescription":"Open PR \"Expose RandomNumberGenerator.GetInt32\" (#1102)"},{"Id":"420975088","IsPullRequest":false,"CreatedAt":"2019-03-14T11:50:04","Actor":"khellang","Number":"1101","RawContent":null,"Title":"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32","State":"open","Body":"I'd like to propose the inclusion of the new `System.Security.Cryptography.RandomNumberGenerator.GetInt32` APIs, added in https://github.com/dotnet/corefx/pull/31243.\r\n\r\nAs noted in https://github.com/dotnet/corefx/issues/30873, this is often incorrectly implemented, which can lead to security vulnerabilities and bias. It would be nice if it was part of the standard, to have a convenient API for this across all platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex ec34484..2b7d68b 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -810,6 +810,8 @@ namespace System.Security.Cryptography\r\n         public virtual void GetBytes(System.Span<byte> data) { }\r\n         public virtual void GetNonZeroBytes(byte[] data) { }\r\n         public virtual void GetNonZeroBytes(System.Span<byte> data) { }\r\n+        public static int GetInt32(int fromInclusive, int toExclusive) { throw null; }\r\n+        public static int GetInt32(int toExclusive) { throw null; }\r\n     }\r\n     [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]\r\n     public abstract partial class RC2 : System.Security.Cryptography.SymmetricAlgorithm\r\n\r\n```\r\n\r\n// @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1101","RelatedDescription":"Open issue \"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32\" (#1101)"},{"Id":"420728685","IsPullRequest":false,"CreatedAt":"2019-03-13T21:30:55","Actor":"OpenSpacesAndPlaces","Number":"1100","RawContent":null,"Title":"Question....On .Net Framework 4.7 without any SDKs...","State":"open","Body":"I'm currently running into an issue with a hosting company that only has .Net Framework 4.7 installed and no supporting SDKS for netstandard 2.0.\r\n\r\nThe netstandard 2.0. library is needed for EntityFramework Core and SignalR Core.\r\n\r\nThe problem is:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n\r\n- Simply trying to add the 4.7.1. dll results in:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context\r\n\r\n- Pre-compiling/Publish has not helped.\r\n- Attempting to include the required base libraries (the ones .Net Standard would be used to pull in) has not helped.\r\n- Various combinations of assembly rules/config settings has not helped.\r\n\r\n---\r\n\r\nI'm totally fine with hand adding every last nuget package needed if there is a way to redirect the netstandard bindings to the base libraries.\r\n\r\nUnfortunately there is no RDP access to the server - so any fix has to be within the confines of bin folder drops or web.config values.\r\n\r\n---\r\n\r\nAny help appreciated!\r\nAny other details I can provide - let me know!","Url":"https://github.com/dotnet/standard/issues/1100","RelatedDescription":"Open issue \"Question....On .Net Framework 4.7 without any SDKs...\" (#1100)"},{"Id":"419180568","IsPullRequest":false,"CreatedAt":"2019-03-10T17:28:29","Actor":"jinyuttt","Number":"1099","RawContent":null,"Title":"Elliptic Curve Cryptography","State":"closed","Body":"Provide elliptic curve cryptography? ","Url":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Closed issue \"Elliptic Curve Cryptography\" (#1099)"},{"Id":"418668244","IsPullRequest":true,"CreatedAt":"2019-03-09T00:32:27","Actor":"stephentoub","Number":"1098","RawContent":null,"Title":"Add dummy field to TypedReference","State":"closed","Body":"cc: @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Closed or merged PR \"Add dummy field to TypedReference\" (#1098)"},{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"},{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"421753936","IsPullRequest":false,"CreatedAt":"2019-03-16T01:24:23","Actor":"bartonjs","Number":"36087","RawContent":null,"Title":"Utf8JsonReader has inconsistent handling with multiple values at depth 0","State":"open","Body":"```C#\r\n[Theory]\r\n[InlineData(JsonCommentHandling.Allow)]\r\n[InlineData(JsonCommentHandling.Disallow)]\r\n[InlineData(JsonCommentHandling.Skip)]\r\npublic static void ReadLiteralWithExtraValue(JsonCommentHandling handling)\r\n{\r\n    byte[] utf8 = Encoding.UTF8.GetBytes(\"  true  5 \");\r\n\r\n    JsonReaderState state = new JsonReaderState(\r\n        new JsonReaderOptions()\r\n        {\r\n            CommentHandling = handling,\r\n        });\r\n\r\n    Utf8JsonReader reader = new Utf8JsonReader(utf8, false, state);\r\n    Assert.True(reader.Read());\r\n}\r\n```\r\n\r\nThis fails for comment modes Allow and Disallow, throwing on the first call to `Read()`, and succeeds for the Skip mode.  (Similar behavior appears for false, null, numbers, and strings)\r\n\r\nContrast with complex values:\r\n\r\n```C#\r\n[Theory]\r\n[InlineData(JsonCommentHandling.Allow)]\r\n[InlineData(JsonCommentHandling.Disallow)]\r\n[InlineData(JsonCommentHandling.Skip)]\r\npublic static void ReadArrayWithExtra(JsonCommentHandling handling)\r\n{\r\n    byte[] utf8 = Encoding.UTF8.GetBytes(\"  [  ]  5 \");\r\n\r\n    JsonReaderState state = new JsonReaderState(\r\n        new JsonReaderOptions()\r\n        {\r\n            CommentHandling = handling,\r\n        });\r\n\r\n    Utf8JsonReader reader = new Utf8JsonReader(utf8, false, state);\r\n    Assert.True(reader.Read());\r\n    Assert.Equal(JsonTokenType.StartArray, reader.TokenType);\r\n    Assert.True(reader.Read());\r\n    Assert.Equal(JsonTokenType.EndArray, reader.TokenType);\r\n\r\n    try\r\n    {\r\n        reader.Read();\r\n        Assert.True(false, \"Read threw\");\r\n    }\r\n    catch (JsonReaderException)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThis test passes in all three comment modes (similarly for object).\r\n","Url":"https://github.com/dotnet/corefx/issues/36087","RelatedDescription":"Open issue \"Utf8JsonReader has inconsistent handling with multiple values at depth 0\" (#36087)"},{"Id":"421723592","IsPullRequest":true,"CreatedAt":"2019-03-16T01:21:25","Actor":"davidsh","Number":"36084","RawContent":null,"Title":"Fix and re-enable some HttpListener authentication tests","State":"closed","Body":"The Negotiate and NTLM HttpListener tests were disabled due to a behavior of running them\r\non loopback using an HttpClient with WinHttpHandler. But now the default handler for HttpClient\r\nis SocketsHttpHandler. And it doesn't have this problem with loopback authentication.\r\n\r\nCloses #20604","Url":"https://github.com/dotnet/corefx/pull/36084","RelatedDescription":"Closed or merged PR \"Fix and re-enable some HttpListener authentication tests\" (#36084)"},{"Id":"421740764","IsPullRequest":false,"CreatedAt":"2019-03-15T23:42:02","Actor":"richlander","Number":"36086","RawContent":null,"Title":".NET Core Process APIs not Consistent (or always useful) in all situations","State":"open","Body":"# .NET Core Process APIs not Consistent (or always useful) in all situations\r\n\r\nThe Process APIs should return accurate and useful values in all situations. I wrote a [simple app that uses all the memory APIs](https://gist.github.com/richlander/6a88c41e06dc92751fa28e43124796cf) I could find. I am happy to add more if people direct me to them.\r\n\r\nMajor take-aways:\r\n\r\n* Multiple properties return a value of 0 on Unix.\r\n* `Process.MaxWorkingSet` != `memory.limit_in_bytes` when memory limited\r\n* `Process.WorkingSet64` != `memory.usage_in_bytes`\r\n\r\nRelated issues:\r\n\r\n* [PrivateMemorySize64](https://github.com/dotnet/corefx/issues/23449)\r\n* [Process.MaxWorkingSet should read from /sys/fs/cgroup/memory when available](https://github.com/dotnet/corefx/issues/35638)\r\n\r\n## On Windows\r\n\r\n```console\r\nC:\\testapps\\memory>dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Microsoft Windows 10.0.17763\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 204800\r\nProcess.MaxWorkingSet: 1413120\r\nProcess.PeakWorkingSet64: 15667200\r\nProcess.WorkingSet64: 15663104\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 267993088\r\nProcess.PrivateMemorySize64: 267993088\r\nProcess.NonpagedSystemMemorySize64: 42288\r\nProcess.PagedMemorySize64: 267993088\r\nProcess.PagedSystemMemorySize64: 138040\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2307580309504\r\nProcess.PeakVirtualMemorySize64: 2307580309504\r\n```\r\n\r\n## On Linux\r\n\r\n```console\r\nrich@tofino:~/memory$ dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Linux 3.10.105-bsp-1.2 #2 SMP PREEMPT Sat Oct 27 19:24:05 IST 2018\r\nOS Arch: Arm64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 18436096\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2735525888\r\nProcess.PeakVirtualMemorySize64: 0\r\n\r\n***CGroup*********\r\nCGroup usage: 1644941312\r\nCGroup memory limit: 9223372036854775807\r\n```\r\n\r\n## On macOS\r\n\r\n```console\r\nRichards-MacBook-Pro:memory rich$ dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Darwin 18.2.0 Darwin Kernel Version 18.2.0: Thu Dec 20 20:46:53 PST 2018; root:xnu-4903.241.1~1/RELEASE_X86_64\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 18923520\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 6893395968\r\nProcess.PeakVirtualMemorySize64: 0\r\n```\r\n\r\n## On WSL\r\n\r\n```console\r\nrich@phantomlake:/mnt/c/testapps/memory$ ~/dotnet/dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27514-07\r\nOS: Linux 4.4.0-17763-Microsoft #253-Microsoft Mon Dec 31 17:49:00 PST 2018\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 17985536\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 84865474560\r\nProcess.PeakVirtualMemorySize64: 0\r\n```\r\n\r\n## On Linux running in a Debian container on Windows\r\n\r\n```console\r\nC:\\testapps\\memory>docker run --rm -v c:\\testapps\\memory:/app -w /app mcr.microsoft.com/dotnet/core-nightly/sdk:3.0 dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27508-07\r\nOS: Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 25559040\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2689052672\r\nProcess.PeakVirtualMemorySize64: 0\r\n\r\n***CGroup*********\r\nCGroup usage: 76718080\r\nCGroup memory limit: 9223372036854771712\r\n```\r\n## On Linux running in a Debian container on Windows -- memory-limited to 100MB\r\n\r\n```console\r\nC:\\testapps\\memory>docker run -m 100mb --rm -v c:\\testapps\\memory:/app -w /app mcr.microsoft.com/dotnet/core-nightly/sdk:3.0 dotnet run\r\n\r\n***Configuration**\r\nBuild: .NET Core 3.0.0-preview4-27508-07\r\nOS: Linux 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018\r\nOS Arch: X64\r\n\r\n***Working set****\r\nProcess.MinWorkingSet: 0\r\nProcess.MaxWorkingSet: 9223372036854775807\r\nProcess.PeakWorkingSet64: 0\r\nProcess.WorkingSet64: 25604096\r\n\r\n***Memory*********\r\nProcess.PeakPagedMemorySize64: 0\r\nProcess.PrivateMemorySize64: 0\r\nProcess.NonpagedSystemMemorySize64: 0\r\nProcess.PagedMemorySize64: 0\r\nProcess.PagedSystemMemorySize64: 0\r\n\r\n***Virtual memory\r\nProcess.VirtualMemorySize64: 2688528384\r\nProcess.PeakVirtualMemorySize64: 0\r\n\r\n***CGroup*********\r\nCGroup usage: 72470528\r\nCGroup memory limit: 104857600\r\n```","Url":"https://github.com/dotnet/corefx/issues/36086","RelatedDescription":"Open issue \".NET Core Process APIs not Consistent (or always useful) in all situations\" (#36086)"},{"Id":"421728953","IsPullRequest":true,"CreatedAt":"2019-03-15T22:38:51","Actor":"yujayee","Number":"36085","RawContent":null,"Title":"Change values of Microsoft.XmlSerializer.Generator command parameters through msbuild properties","State":"open","Body":"Currently, Microsoft.XmlSerializer.Generator command is kind of \"hard coded\" in our target file, users cannot add/change switches to the command or modify their values. With this change, users can modify their PropertyGroup in the .csproj to change it.\r\nEx:\r\n```\r\n<PropertyGroup>\r\n    <SGenReferences>C:\\myfolder\\abc.dll;C:\\myfolder\\def.dll</SGenReferences>\r\n    <SGenTypes>SgenTestProgram.MyType1;SgenTestProgram.MyType2</SGenTypes>\r\n    <SGenProxyTypes>false</SGenProxyTypes>\r\n    <SGenVerbose>true</SGenVerbose>\r\n    <SGenKeyFile>mykey.snk</SGenKeyFile>\r\n    <SGenDelaySign>true</SGenDelaySign>\r\n</PropertyGroup>\r\n```","Url":"https://github.com/dotnet/corefx/pull/36085","RelatedDescription":"Open PR \"Change values of Microsoft.XmlSerializer.Generator command parameters through msbuild properties\" (#36085)"},{"Id":"421659985","IsPullRequest":false,"CreatedAt":"2019-03-15T21:54:53","Actor":"tmat","Number":"36078","RawContent":null,"Title":"Move AsyncLazy implementation from Roslyn to CoreFX","State":"closed","Body":"Roslyn implements and heavily uses `AsyncLazy<T>` abstraction for a lazy value that can be retrieved asynchronously (or synchronously). The implementation is in\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Utilities/AsyncLazy%601.cs\r\n\r\nI'd like to propose that we move this primitive (and perhaps clean it up a bit) to a CoreFX library (System.Threading.Tasks/Extensions?) since it is a general concept that can be reused in other libraries and the implementation is tricky to get right.\r\n\r\nNote that the functionality is needed in libraries targeting .NET Framework 4.7.2+ as well as .NET Core. \r\n","Url":"https://github.com/dotnet/corefx/issues/36078","RelatedDescription":"Closed issue \"Move AsyncLazy implementation from Roslyn to CoreFX\" (#36078)"},{"Id":"421715080","IsPullRequest":false,"CreatedAt":"2019-03-15T21:42:59","Actor":"soualid","Number":"36083","RawContent":null,"Title":"GraphicsPath.AddString - text bounds are clipped","State":"open","Body":"Probably related to https://github.com/dotnet/corefx/issues/33540.\r\n\r\nWhen using `GraphicsPath.AddString` under Linux, text bounds are clipped when the text is long. The path is truncated when rendered. The same code runs well under Windows (see generated sample images below).\r\n\r\nNote that the `Graphics.DrawString` is not affected by this problem, but cannot be used as a workaround when drawing a text with a custom pen is needed.\r\n\r\nShort, Self Contained, Correct (Compilable), Example:\r\n\r\n```\r\nusing System.Drawing;\r\nusing System.Drawing.Drawing2D;\r\nusing System.Drawing.Imaging;\r\nusing System.Drawing.Text;\r\nusing System.IO;\r\n\r\nnamespace Repro\r\n{\r\n    public class ReproBitmapIssue\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var overlayBitmap = new Bitmap(1080, 1920, PixelFormat.Format32bppArgb))\r\n            {\r\n                var g = Graphics.FromImage(overlayBitmap);\r\n                g.InterpolationMode = InterpolationMode.HighQualityBicubic;\r\n                g.CompositingQuality = CompositingQuality.HighQuality;\r\n                g.SmoothingMode = SmoothingMode.HighQuality;\r\n                g.TextRenderingHint = TextRenderingHint.AntiAlias;\r\n\r\n                var p = new GraphicsPath();\r\n                var emSize = 30;\r\n                Point origin = new Point(0, 0);\r\n             \r\n                p.AddString(\"Testing with a long long long text\",\r\n                    new FontFamily(GenericFontFamilies.SansSerif),\r\n                    (int)FontStyle.Regular,\r\n                    emSize * g.DpiY / 72,\r\n                    origin,\r\n                    StringFormat.GenericDefault);\r\n\r\n                g.FillPath(Brushes.Black, p);\r\n\r\n                var overlayFilename = \"test.png\";\r\n                using (var fileStream = File.Open(overlayFilename, FileMode.Create, FileAccess.Write))\r\n                {\r\n                    overlayBitmap.Save(fileStream, ImageFormat.Png);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nLinux (clipped): \r\n![test linux](https://user-images.githubusercontent.com/1830223/54462922-a4024700-4771-11e9-898c-0199d970fcea.png)\r\n\r\nWindows (correct): \r\n![test windows](https://user-images.githubusercontent.com/1830223/54463475-80d89700-4773-11e9-9510-003818af1a79.png)","Url":"https://github.com/dotnet/corefx/issues/36083","RelatedDescription":"Open issue \"GraphicsPath.AddString - text bounds are clipped\" (#36083)"},{"Id":"421697930","IsPullRequest":true,"CreatedAt":"2019-03-15T20:46:21","Actor":"safern","Number":"36082","RawContent":null,"Title":"Fix netfx test runs","State":"open","Body":"Fixes: #36079 \r\n\r\nThis was broken when we updated to the new package since the folder structure within the package changed from net45 to net40. \r\n\r\nThe main problem here was not only that the package changed its TFM, but also that for `\\external\\*.depproj` we first restore for `netstandard` and then for the actual target group. In this case when we restore for `netstandard` we binplace the SDK test package assets for `netcoreapp1.0` which try and compile the `Microsoft.NET.Test.Sdk.Program.cs` file. So now that we didn't find any assets for `net45` TFM these targets where not overridden when restoring for `netfx` so we where getting `netcoreapp1.0` targets out of this package.\r\n\r\nWe really need to fix this project as it seems pretty hacky and error prone in the future. Will open an issue for that.\r\n\r\ncc: @stephentoub @ViktorHofer @ericstj ","Url":"https://github.com/dotnet/corefx/pull/36082","RelatedDescription":"Open PR \"Fix netfx test runs\" (#36082)"},{"Id":"421672312","IsPullRequest":false,"CreatedAt":"2019-03-15T20:15:49","Actor":"Wraith2","Number":"36080","RawContent":null,"Title":"Build: FindBestConfigruation error","State":"closed","Body":"synced to master and got a build failure. used build -clean, cleared nuget package cache and it persists so I thought it best to open issue, I was hoping to do some tinkering over the weekend.\r\n\r\n```\r\nE:\\Programming\\csharp7\\corefx>build -c Debug\r\n  Restore completed in 31.55 ms for C:\\Users\\David\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19128.2\\tools\\Tools.proj.\r\n  Package Id                             Version      Commands\r\n  -------------------------------------------------------------------\r\n  coverlet.console                       1.4.0        coverlet\r\n  dotnet-reportgenerator-globaltool      4.0.5        reportgenerator\r\n  Restore completed in 1.13 ms for E:\\Programming\\csharp7\\corefx\\external\\netstandard\\netstandard.depproj.\r\n  Restore completed in 0.89 ms for E:\\Programming\\csharp7\\corefx\\external\\binplacePackages\\binplacePackages.depproj.\r\n  Restore completed in 0.47 ms for E:\\Programming\\csharp7\\corefx\\external\\ILLink\\ILLink.depproj.\r\n  Restore completed in 0.46 ms for E:\\Programming\\csharp7\\corefx\\external\\docs\\docs.depproj.\r\n  Restore completed in 12.48 ms for E:\\Programming\\csharp7\\corefx\\external\\test-runtime\\XUnit.Runtime.depproj.\r\n  Restore completed in 0.43 ms for E:\\Programming\\csharp7\\corefx\\external\\netfx\\netfx.depproj.\r\n  Restore completed in 4.48 ms for E:\\Programming\\csharp7\\corefx\\external\\test-runtime\\XUnit.Runtime.depproj.\r\n  Restore completed in 1.6 ms for E:\\Programming\\csharp7\\corefx\\external\\runtime\\runtime.depproj.\r\n  Restore completed in 0.71 ms for E:\\Programming\\csharp7\\corefx\\external\\tools\\tools.depproj.\r\n  Restore completed in 0.36 ms for E:\\Programming\\csharp7\\corefx\\external\\binplacePackages\\binplacePackages.depproj.\r\nC:\\Users\\Wraith\\.nuget\\packages\\microsoft.dotnet.build.tasks.configuration\\1.0.0-beta.19128.2\\build\\Microsoft.DotNet.Build.Tasks.Configuration.targets(106,5): \r\nerror MSB4062: The \"FindBestConfigurations\" task could not be loaded from the assembly \r\nC:\\Users\\Wraith\\.nuget\\packages\\microsoft.dotnet.build.tasks.configuration\\1.0.0-beta.19128.2\\build\\..\\tools\\netcoreapp2.1\\Microsoft.DotNet.Build.Tasks.Configuration.dll. \r\nAssembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [E:\\Programming\\csharp7\\corefx\\external\\dir.proj]\r\n\r\nBuild FAILED.\r\n```\r\n\r\nThe same occurs with build -allconfigurations but there's more restore spam, which it would be nice to be able to suppress.\r\n\r\n/cc @ericstj, @karelz, @wtgodbe \r\n","Url":"https://github.com/dotnet/corefx/issues/36080","RelatedDescription":"Closed issue \"Build: FindBestConfigruation error\" (#36080)"},{"Id":"421684448","IsPullRequest":true,"CreatedAt":"2019-03-15T20:06:00","Actor":"layomia","Number":"36081","RawContent":null,"Title":"Add (Try)GetDateTime(Offset) to JsonElement","State":"open","Body":"This change partially addresses https://github.com/dotnet/corefx/issues/34690.","Url":"https://github.com/dotnet/corefx/pull/36081","RelatedDescription":"Open PR \"Add (Try)GetDateTime(Offset) to JsonElement\" (#36081)"},{"Id":"421328876","IsPullRequest":true,"CreatedAt":"2019-03-15T19:59:31","Actor":"stephentoub","Number":"36065","RawContent":null,"Title":"Fix SslStreamStreamToStreamTest to exercise correct overloads","State":"closed","Body":"The SslStreamStreamToStreamTest is set up as a base class from which three test classes derive, one for each of Async, Begin/End, and Sync.  But the base class isn't actually deferring to the derived types to customize most of the functionality being executed, namely read/write methods.  This PR fixes that, so that the base class properly exercises the relevant methods, customized to the base type.\r\n\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/36065","RelatedDescription":"Closed or merged PR \"Fix SslStreamStreamToStreamTest to exercise correct overloads\" (#36065)"},{"Id":"421671843","IsPullRequest":false,"CreatedAt":"2019-03-15T19:27:43","Actor":"stephentoub","Number":"36079","RawContent":null,"Title":"Unable to run netfx tests locally","State":"open","Body":"Even after doing a full netfx build from root, trying to run netfx tests for projects locally fails, e.g.\r\n```\r\nd:\\repos\\corefx\\src\\System.Net.Security\\tests\\FunctionalTests>dotnet msbuild /t:rebuildandtest /p:TargetGroup=netfx\r\nMicrosoft (R) Build Engine version 16.0.385-preview+g966cdf2ac6 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  RemoteExecutorConsoleApp -> d:\\repos\\corefx\\artifacts\\bin\\RemoteExecutorConsoleApp\\netstandard-Debug\\RemoteExecutorConsoleApp.exe\r\nd:\\repos\\corefx\\artifacts\\bin\\runtime\\netfx-Windows_NT-Debug-x64\\Microsoft.NET.Test.Sdk.Program.cs(3,25): error CS0234: The type or namespace name 'TestPlatform' does not exist in the namespace 'Microsoft.VisualStudio' (are you missing an assembly reference?) [d:\\repos\\corefx\\src\\System.Net.Security\\tests\\FunctionalTests\\System.Net.Security.Tests.csproj]\r\n```\r\n\r\n@safern is investigating.\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/issues/36079","RelatedDescription":"Open issue \"Unable to run netfx tests locally\" (#36079)"},{"Id":"421658200","IsPullRequest":false,"CreatedAt":"2019-03-15T18:47:24","Actor":"LeaFrock","Number":"36077","RawContent":null,"Title":"[Question] Cookie.ToString() returns a different result while the version of cookie is 1","State":"open","Body":"Sorry to bother you guys. I'm trying to get data from a website with HttpClient. \r\nI use a single HttpClient to get cookies like below,\r\n![111](https://user-images.githubusercontent.com/20787265/54453145-ab394d00-4791-11e9-88de-5f815e559284.png)\r\nAnd then send them back with the second request so that the right response will be returned.\r\nHowever, the response always indicates that the cookies of request are invalid. Finally I find that the reason is in the [Cookie.ToString()](https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/Cookie.cs).\r\nNoticing the SearchId's version is 1, the cookies of my second request are like below(Shown in Fiddler),\r\n![333](https://user-images.githubusercontent.com/20787265/54453877-336c2200-4793-11e9-9337-16a2db60bc4c.png)\r\nAnd the normal ones should be like this(without \"$Version\",\"$Path\"),\r\n![222](https://user-images.githubusercontent.com/20787265/54453916-47b01f00-4793-11e9-905f-ecb18650b971.png)\r\nSo is it the website's fault for lack of standardization, or anything else wrong? And to solve the problem, should i use another HttpClient to get cookies firstly, then deal with the CookieContainer manually,  select the Cookies in a \"name=value\" format, and finally add them into the  previous HttpClient's CookieContainer? In fact it works, but would anyone provide any better solutions?","Url":"https://github.com/dotnet/corefx/issues/36077","RelatedDescription":"Open issue \"[Question] Cookie.ToString() returns a different result while the version of cookie is 1\" (#36077)"},{"Id":"421321439","IsPullRequest":true,"CreatedAt":"2019-03-15T18:30:26","Actor":"stephentoub","Number":"36064","RawContent":null,"Title":"Add test for using SslStream for concurrent read/writes","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/24759\r\ncc: @bartonjs","Url":"https://github.com/dotnet/corefx/pull/36064","RelatedDescription":"Closed or merged PR \"Add test for using SslStream for concurrent read/writes\" (#36064)"},{"Id":"421621714","IsPullRequest":false,"CreatedAt":"2019-03-15T17:13:08","Actor":"pieter-venter","Number":"36076","RawContent":null,"Title":"Race condition or stale variable in SslStreamInternal causing System.NotSupportedException in SslStream.Write","State":"open","Body":"Over the past 8 months, we have observed the following Exception from time to time in production:\r\n\r\n``` C#\r\nException: System.NotSupportedException EX8C9B2342\r\nMessage: The WriteAsync method cannot be called when another write operation is pending.\r\nStackTrace: \r\nat System.Net.Security.SslStreamInternal.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory1 buffer)\r\nat System.Net.Security.SslStreamInternal.Write(Byte[] buffer, Int32 offset, Int32 count)\r\nat System.Net.Security.SslStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n```\r\nWe confirmed that all writes to the SslStream are properly synchronized using a lock(). We have a specific object used to synchronize on and then issue a write on the SslStream via BinaryWriter **only** while holding the lock. We will never be issuing multiple writes on the same SslStream.\r\n\r\nNot the actual code, but in principle this:\r\n\r\n``` C#\r\n// This shared object is always used to synchronize on\r\nreadonly object networkStreamLock = new object();\r\n\r\n// At some point we connect and initialize SslStream\r\nStream networkStream = new SslStream(...);\r\n\r\n// Create writer to make simple to write primitives to stream\r\nwriter = new BinaryWriter(networkStream);\r\n\r\n// All writes are done Synchronously (but could be from different threads) and follow this pattern.\r\n// This is where we observe the Exception.\r\nlock (networkStreamLock)\r\n{\r\n    writer.Write( /* some value */);\r\n}\r\n```\r\n**Some context:**\r\nWe have close to a thousand servers in production running .Net Core, with each server having between 4 and 64 cores. So it's quite a large deployment and this error is relatively rare but measurable.\r\n\r\nWe log all errors in production and our analysis has shown the following:\r\n\r\n![ssl-errors-by-month](https://user-images.githubusercontent.com/12296644/54447123-fcf4bf80-471e-11e9-8bfa-e8b519e1a650.png)\r\n\r\nThe first instance of this error happened on 4 July 2018. Our deployment history shows this is also when we rolled out version 2.1 of .Net Core. \r\nI.e. this issue first started appearing when we went from **2.0 -> 2.1** of .Net Core and continues to happen in today (running the latest .Net Core 2.2.x).\r\n\r\nLooking at the [history of SslStreamInternal](https://github.com/dotnet/corefx/commits/master/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs), @stephentoub and others implemented async reads and writes into version 2.1, with the synchronous versions calling the async equivalent internally like this:\r\n\r\n``` C#\r\ninternal void Write(byte[] buffer, int offset, int count)\r\n{\r\n    ValidateParameters(buffer, offset, count);\r\n\r\n    SslWriteSync writeAdapter = new SslWriteSync(_sslState);\r\n    WriteAsyncInternal(writeAdapter, new ReadOnlyMemory<byte>(buffer, offset, count)).GetAwaiter().GetResult();\r\n}\r\n```\r\n\r\nThe error we observed is thrown [here](https://github.com/dotnet/corefx/blob/8681eefb557edbb50bd9e96c785388d836d44331/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs#L353):\r\n``` C#\r\nif (Interlocked.Exchange(ref _nestedWrite, 1) == 1)\r\n {\r\n    throw new NotSupportedException(SR.Format(SR.net_io_invalidnestedcall, nameof(WriteAsync), \"write\"));\r\n}\r\n```\r\nNotice the use of Interlocked.Exchange to compare atomically if the value is already 1.\r\n\r\nHowever, this value assigned a value of 0 once the write completes (or exception happened) [like so](https://github.com/dotnet/corefx/blob/8681eefb557edbb50bd9e96c785388d836d44331/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs#L362):\r\n``` C#\r\n_nestedWrite = 0;\r\n```\r\nNotice the lack of Volatile.Write, declaring the variable as volatile or memory barrier.\r\n\r\n**Hypothesis**:\r\nTLDR; The asymmetry in using Interlock.Exchange when setting the value to 1 but no synchronization when setting to 0 could be a problem.\r\n\r\nNow I'm probably out of my depth here, but it seems to me what is happening is that on a multi core server, on very rare occasions, we are seeing a CPU cache coherence issue. Where one CPU still observes the value of 1 while another set it to 0 (without proper fencing ensuring caches are flushed). Since the Write method now internally uses async, it seems reasonable that different CPUs can be involved when executing the write (switching at `awaits` as the scheduler deems fit) and therefore the load and set operations for _nestedWrite can happen on different CPUs. \r\n\r\nSome useful stuff here:\r\nhttps://afana.me/archive/2015/07/10/memory-barriers-in-dot-net.aspx/\r\n\r\nUnfortunately I have been unable to reproduce this with a small reproduction. Given the size of our deployment and the relatively rare occurrence of this - it does seem to be consistent with some nasty multi-threading/jit optimization/cpu instruction reordering issue.\r\n\r\ncc\r\n@baal2000 for his help in reviewing this issue.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36076","RelatedDescription":"Open issue \"Race condition or stale variable in SslStreamInternal causing System.NotSupportedException in SslStream.Write\" (#36076)"},{"Id":"421558515","IsPullRequest":true,"CreatedAt":"2019-03-15T16:52:27","Actor":"Dotnet-GitSync-Bot","Number":"36073","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @justinvp","Url":"https://github.com/dotnet/corefx/pull/36073","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36073)"},{"Id":"421607076","IsPullRequest":false,"CreatedAt":"2019-03-15T16:38:05","Actor":"bartonjs","Number":"36074","RawContent":null,"Title":"Read() asserts on a default Utf8JsonReader","State":"open","Body":"```C#\r\n[Fact]\r\npublic static void ReadDefaultReader()\r\n{\r\n    Utf8JsonReader reader = default;\r\n    Assert.False(reader.Read());\r\n}\r\n```\r\n\r\nresults in\r\n\r\n```\r\n  Assertion Failed\r\n\r\n   at System.Text.Json.Utf8JsonReader.GetNextSpan() in D:\\git\\bartonjs\\corefx\r\n\\src\\System.Text.Json\\src\\System\\Text\\Json\\Reader\\Utf8JsonReader.MultiSegment\r\n.cs:line 271\r\n   at System.Text.Json.Utf8JsonReader.HasMoreDataMultiSegment() in D:\\git\\bar\r\ntonjs\\corefx\\src\\System.Text.Json\\src\\System\\Text\\Json\\Reader\\Utf8JsonReader.\r\nMultiSegment.cs:line 230\r\n   at System.Text.Json.Utf8JsonReader.ReadMultiSegment() in D:\\git\\bartonjs\\c\r\norefx\\src\\System.Text.Json\\src\\System\\Text\\Json\\Reader\\Utf8JsonReader.MultiSe\r\ngment.cs:line 98\r\n   at System.Text.Json.Utf8JsonReader.Read() in D:\\git\\bartonjs\\corefx\\src\\Sy\r\nstem.Text.Json\\src\\System\\Text\\Json\\Reader\\Utf8JsonReader.cs:line 210\r\n   at System.Text.Json.Tests.Utf8JsonReaderTests.ReadDefaultReader() in D:\\gi\r\nt\\bartonjs\\corefx\\src\\System.Text.Json\\tests\\Utf8JsonReaderTests.cs:line 19\r\n```\r\n\r\n\r\nOther public members should be verified on the default value, too.","Url":"https://github.com/dotnet/corefx/issues/36074","RelatedDescription":"Open issue \"Read() asserts on a default Utf8JsonReader\" (#36074)"},{"Id":"421534611","IsPullRequest":false,"CreatedAt":"2019-03-15T14:04:09","Actor":"kabazakra","Number":"36072","RawContent":null,"Title":"System.IO.Compression.ZLibException: The stream state of the underlying compression routine is inconsistent","State":"open","Body":"Hi,\r\n\r\nI have netcoreapp2.1 app, that provides some push notifications (actually, an intensive data stream) based on 'server sent events' protocol over HTTP. A client can subscribe and listen to updates. I added GzipCompressionProvider to the netcore services DI to gzip the traffic. To ensure that only one thread writes data to connection, I have a batch block that accumulates 'pushes' into a queue per connection (per single HttpResponse in the backend). From time to time I am getting a very abstract error, that stream is inconsistent. \r\n\r\nSystem.IO.Compression.ZLibException: The stream state of the underlying compression routine is inconsistent.\r\nat System.IO.Compression.Deflater.Deflate(FlushCode flushCode)\r\nat System.IO.Compression.Deflater.ReadDeflateOutput(Byte[] outputBuffer, FlushCode flushCode, Int32& bytesRead)\r\nat System.IO.Compression.DeflateStream.FlushAsyncCore(CancellationToken cancellationToken)\r\n\r\n\r\nCan you advise what can cause such errors? It shouldn't be a multithreading issue, but I am wondering in which case we can have such 'stream violations'.\r\n\r\nThanks!","Url":"https://github.com/dotnet/corefx/issues/36072","RelatedDescription":"Open issue \"System.IO.Compression.ZLibException: The stream state of the underlying compression routine is inconsistent\" (#36072)"},{"Id":"421530334","IsPullRequest":true,"CreatedAt":"2019-03-15T13:54:56","Actor":"tannergooding","Number":"36071","RawContent":null,"Title":"Cleaning up the P/Invoke signatures for QPF and QPC to avoid marshalling and pinning","State":"open","Body":"This cleans up the signatures for `QueryPerformanceFrequency` and `QueryPerformanceCounter` to avoid implicit marshalling and pinning that was happening behind the scenes.\r\n\r\nThis changes were validated using a simple program that was profiled using Intel VTune:\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    float res = 0;\r\n    ulong tmp = 0;\r\n\r\n    for (int i = 0; i < 1024 * 1024 * 128; i++)\r\n    {\r\n        tmp = (ulong)(Stopwatch.GetTimestamp());\r\n        res += MathF.Sqrt(tmp);\r\n    }\r\n\r\n    Console.WriteLine(res);\r\n}\r\n```\r\n\r\nPrior to this change:\r\n![Before](https://user-images.githubusercontent.com/10487869/54436060-15e57c80-46ef-11e9-9e6f-05dc438c9bde.jpg)\r\n\r\nAfter this change:\r\n![After](https://user-images.githubusercontent.com/10487869/54436075-1b42c700-46ef-11e9-9689-71d36f7d4b89.jpg)\r\n","Url":"https://github.com/dotnet/corefx/pull/36071","RelatedDescription":"Open PR \"Cleaning up the P/Invoke signatures for QPF and QPC to avoid marshalling and pinning\" (#36071)"},{"Id":"421490243","IsPullRequest":false,"CreatedAt":"2019-03-15T12:14:01","Actor":"Gnbrkm41","Number":"36070","RawContent":null,"Title":"Microsoft.VisualBasic.Tests.StringsTests.Chr_CharCodeOutOfRange_ThrowsNotSupportedException test failure","State":"open","Body":"```xml\r\n  <test name=\"Microsoft.VisualBasic.Tests.StringsTests.Chr_CharCodeOutOfRange_ThrowsNotSupportedException(charCode: -1)\" type=\"Microsoft.VisualBasic.Tests.StringsTests\" method=\"Chr_CharCodeOutOfRange_ThrowsNotSupportedException\" time=\"0.0912179\" result=\"Fail\">\r\n    <failure exception-type=\"Xunit.Sdk.ThrowsException\">\r\n      <message><![CDATA[Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentException)\\r\\nActual:   (No exception was thrown)]]></message>\r\n      <stack-trace><![CDATA[   at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode) in C:\\Users\\gotos\\source\\repos\\corefx2\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs:line 84\r\nat Microsoft.VisualBasic.Tests.StringsTests.Chr_CharCodeOutOfRange_ThrowsNotSupportedException(Int32 charCode) in C:\\Users\\gotos\\source\\repos\\corefx2\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs:line 79]]></stack-trace>\r\n    </failure>\r\n  </test>\r\n  <test name=\"Microsoft.VisualBasic.Tests.StringsTests.Chr_CharCodeOutOfRange_ThrowsNotSupportedException(charCode: 256)\" type=\"Microsoft.VisualBasic.Tests.StringsTests\" method=\"Chr_CharCodeOutOfRange_ThrowsNotSupportedException\" time=\"0.0007974\" result=\"Fail\">\r\n    <failure exception-type=\"Xunit.Sdk.ThrowsException\">\r\n      <message><![CDATA[Assert.Throws() Failure\\r\\nExpected: typeof(System.ArgumentException)\\r\\nActual:   (No exception was thrown)]]></message>\r\n      <stack-trace><![CDATA[   at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode) in C:\\Users\\gotos\\source\\repos\\corefx2\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs:line 84\r\nat Microsoft.VisualBasic.Tests.StringsTests.Chr_CharCodeOutOfRange_ThrowsNotSupportedException(Int32 charCode) in C:\\Users\\gotos\\source\\repos\\corefx2\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs:line 79]]></stack-trace>\r\n    </failure>\r\n  </test>\r\n```\r\nKorean Windows 10 1809 x64, with Visual Studio 2019 RC2 installed. Ran through Dev. Command prompt for VS2019 with command `build & build -buildtests -test`.\r\n\r\nWas able to reproduce on three different Windows (two physical, one VM with Japanese Windows 10 installed).","Url":"https://github.com/dotnet/corefx/issues/36070","RelatedDescription":"Open issue \"Microsoft.VisualBasic.Tests.StringsTests.Chr_CharCodeOutOfRange_ThrowsNotSupportedException test failure\" (#36070)"},{"Id":"421431943","IsPullRequest":false,"CreatedAt":"2019-03-15T09:42:54","Actor":"casperOne","Number":"36069","RawContent":null,"Title":"Expose GetPipePath on System.IO.Pipes.PipeStream","State":"open","Body":"I believe that exposing `GetPipePath` (or rather, an instance property that exposes the pipe path for that `PipeStream` instance) would be beneficial for those using `PipeStream`.\r\n\r\nI'm.currently using a `NamedPipeServerStream`, generating pipes to pass to a command-line application which is not .NET that I don't have control over (FFMPEG).\r\n\r\nI'm developing this on Windows, but deploying to an Ubuntu container in the cloud, so I'd like to be able to not have to use platform-specific code to generate the pipe names to pass to the external process (and I imagine there are many others that would like to do this as well).\r\n\r\nI can get around this for now, copying the internal `GetPipePath` code in the Unix and Windows-specific `PipeStream` implementations, but I do worry about getting out-of-sync with the `PipeStream` implementation.","Url":"https://github.com/dotnet/corefx/issues/36069","RelatedDescription":"Open issue \"Expose GetPipePath on System.IO.Pipes.PipeStream\" (#36069)"},{"Id":"421611348","IsPullRequest":false,"CreatedAt":"2019-03-15T09:34:50","Actor":"Ultronvision","Number":"36075","RawContent":null,"Title":"jsonconvert.deserialzeobject cannot convert some value ","State":"open","Body":"Hi Friends, I have encountered some issues regarding JsonConvert.DeserializeObject functionality. I am using the C# POCO class to deserialize the incoming strings from some server. Weird thing is  that  \"SBcontentresults = httpScanBarcode.Content.ReadAsStringAsync().Result;\" when I mouse over the SBcontentresults object the VisualStudio community 2017 ask me to which format it shows the results while selecting the JSON Visualizer and it shows all the values. While using the \"ScanBarcodeInfoList = JsonConvert.DeserializeObject<BarcodeData>(SBcontentresults);\" actually missed one of the value which is string type. Now the question is why is this behavior, and it works for other string variables but not for a particular one. I am using content core 2.1 and builtin Newtonsoft.Json namespace. ","Url":"https://github.com/dotnet/corefx/issues/36075","RelatedDescription":"Open issue \"jsonconvert.deserialzeobject cannot convert some value \" (#36075)"},{"Id":"421340623","IsPullRequest":true,"CreatedAt":"2019-03-15T04:29:41","Actor":"Dotnet-GitSync-Bot","Number":"36067","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corefx/pull/36067","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36067)"},{"Id":"421347653","IsPullRequest":false,"CreatedAt":"2019-03-15T04:23:05","Actor":"mgardi85","Number":"36068","RawContent":null,"Title":"ComputeHash Async required","State":"open","Body":"Currently \"System.Security.Cryptography.HashAlgorithm\" has Computehash with 3 overloads.\r\none of them takes Stream as an input and reads from the stream to compute the hash.\r\n\r\ncan we have an \"ComputeHashAsync\" to do this item as the reading from stream can be done async","Url":"https://github.com/dotnet/corefx/issues/36068","RelatedDescription":"Open issue \"ComputeHash Async required\" (#36068)"},{"Id":"421338912","IsPullRequest":false,"CreatedAt":"2019-03-15T03:34:40","Actor":"ahsonkhan","Number":"36066","RawContent":null,"Title":"Investigate perf optimizations of unescape logic of Utf8JsonReader TextEquals","State":"open","Body":"Currently, if we ever hit an escaped character, we either stackalloc or rent a buffer and unescape the entire JSON string value from that character onward (using a simple while loop). After we have unescaped the entire token, we then compare to the string text the user passed in to see if they match. An alternate approach could be to compare and unescape as you search, and ping-pong between iterative unescaping and vectorized `SequenceEqual`.\r\n\r\nIs this alternative approach worth it?\r\n\r\nFor context, see: https://github.com/dotnet/corefx/pull/35979\r\n\r\n> Something along the route of:\r\n- FindEscapedChar (I think @benaadams  vectorized the IndexOf methods recently, so you'll profit from all the avx goodness automatically.)\r\n- SequenceEquals up to this char (this is already vectorized afaik).\r\n- Unescape and compare\r\n- Repeat until you hit the end.\r\n\r\nLet's say we have something as follows. Here are the performance characteristics of various payloads:\r\n![image](https://user-images.githubusercontent.com/6527137/54405810-ed309900-4694-11e9-89f7-4d595d7662a8.png)\r\n\r\nWe see ~10-15%% improvement in some cases (~20-25% in the best case - first escaped, rest unescaped, especially for really large strings). However, we also see a 10-20% regression in some cases (~30% regression in the worst case - all escaped).\r\n\r\n**Here's my premise:**\r\n- `TextEquals()` will primarily be called on matching property names (not value strings)\r\n- `TextEquals()` calls will more often return false than true. More property names will not match the lookup string compared to the one that will.\r\n- Property names tend to be small, I would imagine 3-16 characters being the most common cases\r\n   - Vectorized searches are less helpful here given the input size.\r\n- Therefore, they will mostly fit within a single segment (and in rare cases, at most into 2, if segment size is reasonable - say 4K).\r\n- Generally they will be ASCII, with some cases where they will have escaped characters sprinkled within (I would imagine the value string having more escaped characters, especially given the default `Utf8JsonWriter` behavior, and maybe the entire property name is escaped)\r\n- If we happen to have escaped characters somewhere in the middle, the first SequenceEqual check will likely reject most search strings, so the chances we are on the \"it's a match\" path is higher by the time we are unescaping the characters.\r\n- **In conclusion**, given the rarity of escaped characters (0 or all being escaped more common than 1-3 sprinkled throughout), the size of property names, and how matching eagerly rejects, I don't see much benefit in going down the iterative approach.\r\n\r\nI am sure the implementation can be made faster but I wanted to do an apples to apples comparison between what exists today (unescape all and compare) versus the new change (unescape and compare as you go). I would imagine perf improvements on the new `UnescapeAndCompare` would translate to the existing `UnescapeAndCompare` as well.\r\n\r\n<details>\r\n<summary>New Implementation:</summary>\r\n\r\n```C#\r\nprivate bool UnescapeAndCompare(ReadOnlySpan<byte> other)\r\n{\r\n    Debug.Assert(!HasValueSequence);\r\n    ReadOnlySpan<byte> localSpan = ValueSpan;\r\n\r\n    if (localSpan.Length < other.Length || localSpan.Length / JsonConstants.MaxExpansionFactorWhileEscaping > other.Length)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    int idx = localSpan.IndexOf(JsonConstants.BackSlash);\r\n    Debug.Assert(idx != -1);\r\n\r\n    do\r\n    {\r\n        if (!other.StartsWith(localSpan.Slice(0, idx)))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!JsonReaderHelper.UnescapeAndCompare(localSpan.Slice(idx), other.Slice(idx), out int sourceBytesConsumed, out int otherBytesConsumed))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        localSpan = localSpan.Slice(idx + sourceBytesConsumed);\r\n        other = other.Slice(idx + otherBytesConsumed);\r\n\r\n        if (other.Length == 0 || localSpan.Length == 0)\r\n        {\r\n            return localSpan.Length == other.Length;\r\n        }\r\n\r\n        idx = localSpan.IndexOf(JsonConstants.BackSlash);\r\n\r\n        if (idx == -1)\r\n        {\r\n            return other.SequenceEqual(localSpan);\r\n        }\r\n\r\n    } while (true);\r\n}\r\n\r\npublic static bool UnescapeAndCompare(ReadOnlySpan<byte> utf8Source, ReadOnlySpan<byte> other, out int sourceBytesConsumed, out int otherBytesConsumed)\r\n{\r\n    Debug.Assert(utf8Source[0] == JsonConstants.BackSlash);\r\n\r\n    if (other.Length <= 0)\r\n    {\r\n        sourceBytesConsumed = default;\r\n        otherBytesConsumed = default;\r\n        return false;\r\n    }\r\n\r\n    bool result = false;\r\n\r\n    byte currentByte = utf8Source[1];\r\n    byte otherByte = other[0];\r\n\r\n    sourceBytesConsumed = 2;\r\n    otherBytesConsumed = 1;\r\n\r\n    if (currentByte == JsonConstants.Quote)\r\n    {\r\n        result = otherByte == JsonConstants.Quote;\r\n    }\r\n    else if (currentByte == 'n')\r\n    {\r\n        result = otherByte == JsonConstants.LineFeed;\r\n    }\r\n    else if (currentByte == 'r')\r\n    {\r\n        result = otherByte == JsonConstants.CarriageReturn;\r\n    }\r\n    else if (currentByte == JsonConstants.BackSlash)\r\n    {\r\n        result = otherByte == JsonConstants.BackSlash;\r\n    }\r\n    else if (currentByte == JsonConstants.Slash)\r\n    {\r\n        result = otherByte == JsonConstants.Slash;\r\n    }\r\n    else if (currentByte == 't')\r\n    {\r\n        result = otherByte == JsonConstants.Tab;\r\n    }\r\n    else if (currentByte == 'b')\r\n    {\r\n        result = otherByte == JsonConstants.BackSpace;\r\n    }\r\n    else if (currentByte == 'f')\r\n    {\r\n        result = otherByte == JsonConstants.FormFeed;\r\n    }\r\n    else if (currentByte == 'u')\r\n    {\r\n        // The source is known to be valid JSON, and hence if we see a \\u, it is guaranteed to have 4 hex digits following it\r\n        // Otherwise, the Utf8JsonReader would have already thrown an exception.\r\n        Debug.Assert(utf8Source.Length >= 6);\r\n\r\n        bool parseResult = Utf8Parser.TryParse(utf8Source.Slice(2, 4), out int scalar, out int bytesConsumed, 'x');\r\n        Debug.Assert(parseResult);\r\n        Debug.Assert(bytesConsumed == 4);\r\n\r\n        sourceBytesConsumed += 4;\r\n\r\n        if (JsonHelpers.IsInRangeInclusive((uint)scalar, JsonConstants.HighSurrogateStartValue, JsonConstants.LowSurrogateEndValue))\r\n        {\r\n            // The first hex value cannot be a low surrogate.\r\n            if (scalar >= JsonConstants.LowSurrogateStartValue)\r\n            {\r\n                ThrowHelper.ThrowInvalidOperationException_ReadInvalidUTF16(scalar);\r\n            }\r\n\r\n            Debug.Assert(JsonHelpers.IsInRangeInclusive((uint)scalar, JsonConstants.HighSurrogateStartValue, JsonConstants.HighSurrogateEndValue));\r\n\r\n            // We must have a low surrogate following a high surrogate.\r\n            if (utf8Source.Length < 12 || utf8Source[6] != '\\\\' || utf8Source[7] != 'u')\r\n            {\r\n                ThrowHelper.ThrowInvalidOperationException_ReadInvalidUTF16();\r\n            }\r\n\r\n            // The source is known to be valid JSON, and hence if we see a \\u, it is guaranteed to have 4 hex digits following it\r\n            // Otherwise, the Utf8JsonReader would have already thrown an exception.\r\n            result = Utf8Parser.TryParse(utf8Source.Slice(8, 4), out int lowSurrogate, out bytesConsumed, 'x');\r\n            Debug.Assert(result);\r\n            Debug.Assert(bytesConsumed == 4);\r\n\r\n            // If the first hex value is a high surrogate, the next one must be a low surrogate.\r\n            if (!JsonHelpers.IsInRangeInclusive((uint)lowSurrogate, JsonConstants.LowSurrogateStartValue, JsonConstants.LowSurrogateEndValue))\r\n            {\r\n                ThrowHelper.ThrowInvalidOperationException_ReadInvalidUTF16(lowSurrogate);\r\n            }\r\n\r\n            // To find the unicode scalar:\r\n            // (0x400 * (High surrogate - 0xD800)) + Low surrogate - 0xDC00 + 0x10000\r\n            scalar = (JsonConstants.BitShiftBy10 * (scalar - JsonConstants.HighSurrogateStartValue))\r\n                + (lowSurrogate - JsonConstants.LowSurrogateStartValue)\r\n                + JsonConstants.UnicodePlane01StartValue;\r\n\r\n            sourceBytesConsumed += 6;\r\n        }\r\n\r\n        Span<byte> destination = stackalloc byte[4];\r\n#if BUILDING_INBOX_LIBRARY\r\n        var rune = new Rune(scalar);\r\n        result = rune.TryEncodeToUtf8Bytes(destination, out int bytesWritten);\r\n        Debug.Assert(result);\r\n#else\r\n        EncodeToUtf8Bytes((uint)scalar, destination, out int bytesWritten);\r\n#endif\r\n        Debug.Assert(bytesWritten <= 4);\r\n        result = other.StartsWith(destination.Slice(0, bytesWritten));\r\n\r\n        otherBytesConsumed += bytesWritten - 1;\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Benchmark:</summary>\r\n\r\n```C#\r\npublic class Perf_TextEquals\r\n{\r\n    private readonly byte[] dataUtf8 = Encoding.UTF8.GetBytes(\"{\\\"proper\\\\u0074y1\\\": 1, \\\"proper\\\\u0074y2\\\": 2, \\\"proper\\\\u0074y3\\\": 3, \\\"proper\\\\u0074y4\\\": 4, \\\"proper\\\\u0074y5\\\": 5 }\");\r\n    private readonly byte[] dataUtf8_Unescaped = Encoding.UTF8.GetBytes(\"{\\\"property1\\\": 1, \\\"property2\\\": 2, \\\"property3\\\": 3, \\\"property4\\\": 4, \\\"property5\\\": 5 }\");\r\n    private readonly byte[] dataUtf8_One = Encoding.UTF8.GetBytes(\"{\\\"\\\\u0070\\\\u0072\\\\u006F\\\\u0070\\\\u0065\\\\u0072\\\\u0074\\\\u00791\\\": 1, \\\"property2\\\": 2, \\\"property3\\\": 3, \\\"property4\\\": 4, \\\"property5\\\": 5 }\");\r\n    private readonly byte[] dataUtf8_First = Encoding.UTF8.GetBytes(\"{\\\"\\\\u0070roperty1\\\": 1, \\\"\\\\u0070roperty2\\\": 2, \\\"\\\\u0070roperty3\\\": 3, \\\"\\\\u0070roperty4\\\": 4, \\\"\\\\u0070roperty5\\\": 5 }\");\r\n    private readonly byte[] dataUtf8_Many = Encoding.UTF8.GetBytes(\"{\\\"\\\\u0070ro\\\\u0070erty1\\\": 1, \\\"\\\\u0070ro\\\\u0070erty2\\\": 2, \\\"\\\\u0070ro\\\\u0070erty3\\\": 3, \\\"\\\\u0070ro\\\\u0070erty4\\\": 4, \\\"\\\\u0070ro\\\\u0070erty5\\\": 5 }\");\r\n    private readonly byte[] dataUtf8_All = Encoding.UTF8.GetBytes(\"{\\\"\\\\u0070\\\\u0072\\\\u006F\\\\u0070\\\\u0065\\\\u0072\\\\u0074\\\\u00791\\\": 1, \\\"\\\\u0070\\\\u0072\\\\u006F\\\\u0070\\\\u0065\\\\u0072\\\\u0074\\\\u00792\\\": 2, \\\"\\\\u0070\\\\u0072\\\\u006F\\\\u0070\\\\u0065\\\\u0072\\\\u0074\\\\u00793\\\": 3, \\\"\\\\u0070\\\\u0072\\\\u006F\\\\u0070\\\\u0065\\\\u0072\\\\u0074\\\\u00794\\\": 4, \\\"\\\\u0070\\\\u0072\\\\u006F\\\\u0070\\\\u0065\\\\u0072\\\\u0074\\\\u00795\\\": 5 }\");\r\n\r\n    private readonly byte[] lookup = Encoding.UTF8.GetBytes(\"property5\");\r\n\r\n    private readonly byte[] dataUtf8_OneProperty = Encoding.UTF8.GetBytes(\"{\\\"\\\\u0070ropertyaaaaaaaaaaaaaaaaaaaa6\\\": 6 }\");\r\n    private readonly byte[] dataUtf8_OnePropertyLargest = Encoding.UTF8.GetBytes(\"{\\\"\\\\u0070ropertyaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6\\\": 6 }\");\r\n\r\n    private readonly byte[] lookupLarge = Encoding.UTF8.GetBytes(\"propertyaaaaaaaaaaaaaaaaaaaa6\");\r\n    private readonly byte[] lookupLargest = Encoding.UTF8.GetBytes(\"propertyaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6\");\r\n\r\n    [Benchmark]\r\n    public int UTF8()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookup))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_LargeProperty()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_OneProperty, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookupLarge))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_LargestProperty()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_OnePropertyLargest, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookupLargest))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_Unescaped()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_Unescaped, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookup))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_FirstEscaped()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_First, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookup))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_ManyEscaped()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_Many, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookup))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_AllEscaped()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_All, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookup))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int UTF8_OneEscaped()\r\n    {\r\n        var json = new Utf8JsonReader(dataUtf8_One, isFinalBlock: true, default);\r\n        while (json.Read())\r\n        {\r\n            if (json.TokenType == JsonTokenType.PropertyName)\r\n            {\r\n                if (json.TextEquals(lookup))\r\n                {\r\n                    json.Read();\r\n                    int result = json.GetInt32();\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\ncc @Tornhoof, @GrabYourPitchforks, @stephentoub  ","Url":"https://github.com/dotnet/corefx/issues/36066","RelatedDescription":"Open issue \"Investigate perf optimizations of unescape logic of Utf8JsonReader TextEquals\" (#36066)"},{"Id":"421318048","IsPullRequest":false,"CreatedAt":"2019-03-15T01:50:01","Actor":"lopatnov","Number":"36063","RawContent":null,"Title":"Will you have WCF for .net core? When?","State":"open","Body":"Will you have WCF for .net core? When?","Url":"https://github.com/dotnet/corefx/issues/36063","RelatedDescription":"Open issue \"Will you have WCF for .net core? When?\" (#36063)"},{"Id":"421291718","IsPullRequest":true,"CreatedAt":"2019-03-15T01:47:51","Actor":"davidsh","Number":"36061","RawContent":null,"Title":"Add test for HttpWebRequest default proxy credentials","State":"closed","Body":"It's easier to simulate default system proxy settings on Linux since it uses environment\r\nvariables. Add a test to verify that the proxy credentials are passed from\r\nWebRequest.DefaultWebProxy.Credentials to the system proxy.\r\n\r\nFollow-up to PR #36059","Url":"https://github.com/dotnet/corefx/pull/36061","RelatedDescription":"Closed or merged PR \"Add test for HttpWebRequest default proxy credentials\" (#36061)"},{"Id":"421292050","IsPullRequest":false,"CreatedAt":"2019-03-14T23:41:45","Actor":"dtivel","Number":"36062","RawContent":null,"Title":"Add RFC 3161, SignedCms, and SignerInfo changes to netstandard2.1","State":"open","Body":"Please add to netstandard2.1:\r\n\r\n* https://github.com/dotnet/corefx/issues/24524 (including at least `SignerInfo.GetSignature()` from https://github.com/dotnet/corefx/issues/14197).\r\n* https://github.com/dotnet/corefx/issues/25449\r\n\r\nCC @bartonjs, @rrelyea ","Url":"https://github.com/dotnet/corefx/issues/36062","RelatedDescription":"Open issue \"Add RFC 3161, SignedCms, and SignerInfo changes to netstandard2.1\" (#36062)"},{"Id":"421250366","IsPullRequest":true,"CreatedAt":"2019-03-14T23:32:39","Actor":"davidsh","Number":"36059","RawContent":null,"Title":"Fix HttpWebRequest to use WebRequest.DefaultWebProxy credentials","State":"closed","Body":"If the HttpWebRequest is using the default system proxy, we need to pass any proxy\r\ncredentials that the developer might have set via the WebRequest.DefaultWebProxy.Credentials\r\nproperty. This matches .NET Framework behavior.\r\n\r\nI tested this manually using Fiddler as the authenticating proxy.\r\n\r\nFixes #36058","Url":"https://github.com/dotnet/corefx/pull/36059","RelatedDescription":"Closed or merged PR \"Fix HttpWebRequest to use WebRequest.DefaultWebProxy credentials\" (#36059)"},{"Id":"421237402","IsPullRequest":false,"CreatedAt":"2019-03-14T23:32:39","Actor":"davidsh","Number":"36058","RawContent":null,"Title":"HttpWebRequest doesn't use WebRequest.DefaultWebProxy settings","State":"closed","Body":"The design of HttpWebRequest uses the WebRequest.DefaultWebProxy static property as the default value of its .Proxy property.  And by default this points to the system proxy (e.g. on Windows it is the IE settings).  The current recommended pattern for developers on .NET Framework that need to pass proxy credentials to this proxy is to set [WebRequest.DefaultWebProxy.Credentials](https://docs.microsoft.com/en-us/dotnet/api/system.net.webrequest.defaultwebproxy?view=netframework-4.7.2#System_Net_WebRequest_DefaultWebProxy) property.\r\n\r\nThis works on .NET Framework but does not work on .NET Core.\r\n\r\nOn .NET Framework, the HttpClient APIs actually pay attention to WebRequest.DefaultWebProxy.Credentials property as a side-affect of the implementation of HttpClient on .NET Framework which uses HttpWebRequest underneath.  However, users are encouraged to migrate to the [HttpClientHandler.DefaultProxyCredentials](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclienthandler.defaultproxycredentials?view=netframework-4.7.2#System_Net_Http_HttpClientHandler_DefaultProxyCredentials) property instead.\r\n\r\nOn .NET Core, the HTTP stack itself is implemented in a different way. HttpClient is the underlying HTTP protocol stack. And HttpWebRequest is built as a thin layer on top of HttpClient APIs. The recommendation is for users to use HttpClient directly since it is the modern and higher performing API surface.\r\n\r\nOn .NET Core, the WebRequest family of objects (WebRequest, HttpWebRequest, etc.) are considered legacy APIs and provided for app-compat only.\r\n\r\nOn .NET Core, it is not intended that WebRequest.DefaultWebProxy.Credentials will be used directly by HttpClient APIs. Users can already use the [HttpClientHandler.DefaultProxyCredentials](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclienthandler.defaultproxycredentials?view=netframework-4.7.2#System_Net_Http_HttpClientHandler_DefaultProxyCredentials) property instead. However, it is expected that direct use of HttpWebRequest should work properly with WebRequest.DefaultWebProxy.Credentials regardless of how it is implemented on .NET Core.\r\n\r\nHere is some repro code to demonstrate. Assume that Fiddler is used as the proxy and requires simple Basic proxy authentication with user=\"1\" and password=\"1\".\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\n\r\ninternal class Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine($\"(Framework: {Path.GetDirectoryName(typeof(object).Assembly.Location)})\");\r\n\r\n        try\r\n        {\r\n            WebRequest.DefaultWebProxy.Credentials = new NetworkCredential(\"1\", \"1\"); // This is what Fiddler needs.\r\n\r\n            var serverUri = new Uri(\"http://corefx-net-http11.azurewebsites.net\");\r\n            HttpWebRequest request = HttpWebRequest.CreateHttp(serverUri);\r\n\r\n            var response = (HttpWebResponse)request.GetResponseAsync().GetAwaiter().GetResult();\r\n            Console.WriteLine($\"{(int)response.StatusCode} {response.StatusDescription}\");\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine(ex);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOn .NET Framework, the output is \"200 OK\" since it can successfully pass the proxy credentials to the default system proxy (Fiddler). On .NET Core, the result is a WebException being thrown with \"System.Net.WebException: The remote server returned an error: (407) Proxy Auth Required.\"\r\n","Url":"https://github.com/dotnet/corefx/issues/36058","RelatedDescription":"Closed issue \"HttpWebRequest doesn't use WebRequest.DefaultWebProxy settings\" (#36058)"},{"Id":"421272433","IsPullRequest":true,"CreatedAt":"2019-03-14T22:24:48","Actor":"tarikulsabbir","Number":"36060","RawContent":null,"Title":"Porting XEvent Delay BugFix from .Net Framework to 2.2","State":"open","Body":"Description\r\nXEvents are arriving as expected, but with 1 XEvent delay. It means that to receive the most recent XEvent, the app has to wait for another XEvent to be generated. \r\n\r\nCustomer Impact\r\nblocker for shipping the XEvent library for .NET Standard \r\n\r\nRegression\r\nNo, since this code path existed in .Net Framework before it got fixed. This PR ports the fix from .Net Framework.\r\n\r\nRisk\r\nHigh. The Threat Detection Service (TdService) in SQL Azure is susceptible to this bug as it is dependent on getting XEvents for statement execution or changes in state of DBs or policies within the SQLServer.\r\n\r\nThis is already merged to master #36015 ","Url":"https://github.com/dotnet/corefx/pull/36060","RelatedDescription":"Open PR \"Porting XEvent Delay BugFix from .Net Framework to 2.2\" (#36060)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"421768801","IsPullRequest":true,"CreatedAt":"2019-03-16T05:02:53","Actor":"jcouv","Number":"34193","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Investigating a test failure on Linux CI","Url":"https://github.com/dotnet/roslyn/pull/34193","RelatedDescription":"Closed or merged PR \"Update README.md\" (#34193)"},{"Id":"421760086","IsPullRequest":false,"CreatedAt":"2019-03-16T02:30:08","Actor":"vsfeedback","Number":"34192","RawContent":null,"Title":"Debugger fails on async lambda function","State":"open","Body":"Using .net core 2.2 c# ver 7.3 debugger fails on async lambda function (returning task) passed as parameter to another function.\n\nThe code works as expected but debugging experience is broken. Only breakpoint present after first await keyword is honored. Sometimes debugger passes several times over calling function. This can be reproduced by a trivial sample application (see bellow).\n\n\nusing System;\nusing System.Threading.Tasks;\n\ninternal class Program\n{\n    private static async Task Main(string[] args)\n    {\n        // Call Method1\n        await CallAsyncFunction(async () =&gt;\n        {\n            // Place a break point on this row\n            Console.WriteLine(&quot;A&quot;);\n            // Place a break point on this row \n            await Task.Delay(100);\n            // Place a break point on this row \n            Console.WriteLine(&quot;B&quot;);\n            await Task.Delay(100);\n            Console.WriteLine(&quot;C&quot;);\n        });\n\n        Console.ReadLine();\n    }\n\n    private static async Task CallAsyncFunction(Func&lt;Task&gt; func)\n    {\n        await func();\n    }\n}\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489653/debugger-fails-on-async-lambda-function.html\nVSTS ticketId: 820585_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/14/2019, 11:12 PM (20 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34192","RelatedDescription":"Open issue \"Debugger fails on async lambda function\" (#34192)"},{"Id":"421756741","IsPullRequest":false,"CreatedAt":"2019-03-16T01:52:21","Actor":"vsfeedback","Number":"34191","RawContent":null,"Title":"Go to implementation throws The Symbol has no implementations - ONLY for parameterized methods","State":"open","Body":"VSF_TYPE_MARKDOWNWhen I hit Go to implementation on a method in Visual Studio 2017 or 2019 Preview 3 - (started happening only on .Net core solution, .Net framework 4.7 works fine) - it throws &quot;The Symbol has no implementations&quot; pop up. \nI know this has been reported and you marked some of them as being duplicate but reporting since i found a narrowing condition. \n\nIf the method in question DOES NOT have parameters (e.g. public void MethodA()) then it works. It throws the error ONLY for methods with parameters. There you go, if that helps at all. \n\nWill be great to have this resolved because it is very annoying and cumbersome to navigate to methods behind the Interface without it. \n\nThanks!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/470557/go-to-implementation-throws-the-symbol-has-no-impl.html\nVSTS ticketId: 802805_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/26/2019, 07:06 PM (16 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34191","RelatedDescription":"Open issue \"Go to implementation throws The Symbol has no implementations - ONLY for parameterized methods\" (#34191)"},{"Id":"421752628","IsPullRequest":false,"CreatedAt":"2019-03-16T01:12:36","Actor":"KirillOsenkov","Number":"34190","RawContent":null,"Title":"Move EventHookup to EditorFeatures layer","State":"open","Body":"Currently EventHookup code is in the VisualStudio layer. To be consumed by VS for Mac it would be nice to move it down to EditorFeatures. From cursory glance we haven't found dependencies that would be hard to isolate from VS.\r\n\r\nCurrently VSMac has a copy of the code.","Url":"https://github.com/dotnet/roslyn/issues/34190","RelatedDescription":"Open issue \"Move EventHookup to EditorFeatures layer\" (#34190)"},{"Id":"421750070","IsPullRequest":false,"CreatedAt":"2019-03-16T00:47:42","Actor":"kendrahavens","Number":"34189","RawContent":null,"Title":"Suggest format specifiers based on type","State":"open","Body":"[Original developer community feedback](https://developercommunity.visualstudio.com/content/idea/482533/suggest-format-specifiers-based-on-type.html)\r\n\r\n> I have a TimeSpan object, which I need to convert into a string. When I typed ToString(\"\"), I expected to see a list of common format specifiers with examples that I could use to autocomplete my line. Sadly, this is something that Resharper provides that I have come to rely on, and it's missing in Visual Studio 2019.\r\n\r\n> My example above speaks specifically to TimeSpan objects, but it applies generally to DateTime, numerics and any other type that accepts format specifiers, both as as an argument to ToString() and inside interpolated strings.\r\n\r\n> Intellisense suggests potential methods, events, properties, etc. I'm talking about suggestions for format specifiers when calling ToString().\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Type the code below\r\n```csharp\r\nDateTime.Now.ToString(\"\r\n```\r\n\r\n**Expected Behavior**:\r\nWhen you type the quote (\") you get a autocomplete suggestion like this:\r\n```\r\nt - short time                                               6:30\r\nD - long date                             Thursday, 10 April 2008\r\nd - short date                                         04/10/2008\r\nF - full date long               Thursday, 10 April 2008 06:30:00\r\nf - full date short                 Thursday, 10 April 2008 06:30\r\nG - general long                              04/10/2008 06:30:00\r\n.\r\n.\r\n(etc)\r\n```\r\n\r\nJust arrow down to the one you need and hit Enter.\r\n\r\nSimilar autocomplete suggestions are available for numeric types and TimeSpan, to name a few.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34189","RelatedDescription":"Open issue \"Suggest format specifiers based on type\" (#34189)"},{"Id":"421747148","IsPullRequest":false,"CreatedAt":"2019-03-16T00:22:54","Actor":"vsfeedback","Number":"34188","RawContent":null,"Title":"View in Object Browser Fails for Local Projet","State":"open","Body":"VSF_TYPE_MARKDOWNI get an error diagnostic when I try to view one of my projects in the Object Browser.\n\nThe image shows a local project highlighted, as well as the diagnostic after I right-click it and select View in Object Browser.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/487037/view-in-object-browser-fails-for-local-projet.html\nVSTS ticketId: 818783_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/13/2019, 00:54 AM (2 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 3/15/2019, 03:18 PM (4 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34188","RelatedDescription":"Open issue \"View in Object Browser Fails for Local Projet\" (#34188)"},{"Id":"421744880","IsPullRequest":false,"CreatedAt":"2019-03-16T00:07:01","Actor":"tmat","Number":"34187","RawContent":null,"Title":"EnC test scenario: Multi-process updates","State":"open","Body":"**Version Used**: \r\n\r\n![image](https://user-images.githubusercontent.com/41759/54467476-8a95d680-4742-11e9-9f7b-3788cb3e0eb9.png)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Extract [MultiProcess.zip](https://github.com/dotnet/roslyn/files/2973242/MultiProcess.zip) to a directory and open MultiProcess.sln.\r\n2. Build the solution.\r\n3. Place breakpoint on `Console.WriteLine(2);` statement in `Program2.cs`.\r\n4. Debug project `ConsoleApp2` (F5)\r\n5. When the breakpoint is hit, switch to command line and run `MultiProcess\\ConsoleApp1\\bin\\Debug\\ConsoleApp1.exe`.\r\n6. Attache VS to process ConsoleApp1 (managed debugging)\r\n7. Open file `C.cs` and change statement `Console.WriteLine(\"lib\");` to `Console.WriteLine(\"lib - after edit\");`.\r\n8. Place breakpoint on the changed statement (`Console.WriteLine(\"lib - after edit\");`).\r\n9. F5 to apply the changes and continue debugging\r\n10. Switch to command line and hit `Enter`\r\n11. F5 to continue executing in ConsoleApp1\r\n\r\n**Expected Behavior**:\r\n\r\nAn error is reported that the change can't be applied since `ClassLibrary1.dll` is loaded to two processes: ConsoleApp1 and ConsoleApp2 and only one of the processes allows Edit and Continue. ConsoleApp1 does not allow EnC since we attached to it. \r\n\r\n**Actual Behavior**:\r\n\r\nThe edit is applied only in ConsoleApp2 and when the breakpoint in `C.cs` is hit by ConsoleApp1 the source code does not correspond to the actual code that's being executed.\r\n\r\n![image](https://user-images.githubusercontent.com/41759/54467806-be71fb80-4744-11e9-9cae-8774e5dda48f.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/34187","RelatedDescription":"Open issue \"EnC test scenario: Multi-process updates\" (#34187)"},{"Id":"421743826","IsPullRequest":true,"CreatedAt":"2019-03-16T00:00:35","Actor":"dotnet-bot","Number":"34186","RawContent":null,"Title":"Merge master to features/readonly-members","State":"open","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34186","RelatedDescription":"Open PR \"Merge master to features/readonly-members\" (#34186)"},{"Id":"421743805","IsPullRequest":true,"CreatedAt":"2019-03-16T00:00:29","Actor":"dotnet-bot","Number":"34185","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34185","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#34185)"},{"Id":"421743782","IsPullRequest":true,"CreatedAt":"2019-03-16T00:00:24","Actor":"dotnet-bot","Number":"34184","RawContent":null,"Title":"Merge master to features/lspSupport","State":"open","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34184","RelatedDescription":"Open PR \"Merge master to features/lspSupport\" (#34184)"},{"Id":"421743772","IsPullRequest":true,"CreatedAt":"2019-03-16T00:00:20","Actor":"dotnet-bot","Number":"34183","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34183","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#34183)"},{"Id":"421743761","IsPullRequest":true,"CreatedAt":"2019-03-16T00:00:17","Actor":"dotnet-bot","Number":"34182","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34182","RelatedDescription":"Open PR \"Merge dev16.0 to dev16.0-vs-deps\" (#34182)"},{"Id":"421741028","IsPullRequest":false,"CreatedAt":"2019-03-15T23:43:24","Actor":"vsfeedback","Number":"34181","RawContent":null,"Title":"Closing brace after single line if / while","State":"open","Body":"<p>Please provide automatic transformation which applies for control statements (while, if) in block type containing only one statement. This transformation would apply iff user removes closing or opening brace. This would automatically remove matching brace and effectivelly transform if / while from block type to single line type.<br><br>When I am refactoring I often remove one or more statements from if or while block and suddenly want to make it single line without braces. Suggested feature would make my life much easier because all I would have to do is removing opening / closing brace. </p><pre>if (a == 1) \n{\n  DoSomething();\n  /* When refactoring this method is suddenly no longer needed. I want to be able to delete it and after removing } make if only single line without braces */&lt;br&gt;  DoSomethingElse();\n}</pre>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/459346/closing-brace-after-single-line-if-while.html\nVSTS ticketId: 795120_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 2/18/2019, 02:28 AM (25 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/34181","RelatedDescription":"Open issue \"Closing brace after single line if / while\" (#34181)"},{"Id":"421739145","IsPullRequest":true,"CreatedAt":"2019-03-15T23:32:03","Actor":"sharwell","Number":"34180","RawContent":null,"Title":"Fix flaky test AsynchronousOperationListenerTests.IgnoredCancel","State":"open","Body":"Fixes #32404","Url":"https://github.com/dotnet/roslyn/pull/34180","RelatedDescription":"Open PR \"Fix flaky test AsynchronousOperationListenerTests.IgnoredCancel\" (#34180)"},{"Id":"421738009","IsPullRequest":false,"CreatedAt":"2019-03-15T23:25:12","Actor":"vsfeedback","Number":"34179","RawContent":null,"Title":"Gathering Suggestions: Pre-calculate these","State":"open","Body":"<p>When using Ctrl+. on an Intellisense red squiggle error, there is a few seconds of delay while &quot;gathering suggestions&quot;.  Perhaps, in some kind of low priority background task, Visual Studio could spend some of my spare CPU cycles working through these BEFORE I come to use Ctrl+.?  This would make for a great improvement to development experience.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/448994/gathering-suggestions-pre-calculate-these.html\nVSTS ticketId: 789069_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 2/11/2019, 02:59 AM (32 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/34179","RelatedDescription":"Open issue \"Gathering Suggestions: Pre-calculate these\" (#34179)"},{"Id":"421733175","IsPullRequest":false,"CreatedAt":"2019-03-15T22:58:44","Actor":"AArnott","Number":"34178","RawContent":null,"Title":"CS1503 reported with misleading message","State":"open","Body":"**Version Used**: Dev16 Preview 4.3 (28714.232.d16.0stg)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a .NET Core console app.\r\n2. Install the StreamJsonRpc package.\r\n3. Add this method to the `Program` class:\r\n\r\n```cs\r\npublic async System.Threading.Tasks.Task<T> GetServiceProxyAsync<T>()\r\n{\r\n    System.IO.Stream stream = null;\r\n    return StreamJsonRpc.JsonRpc.Attach<T>(stream);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nAn error telling me that `T` doesn't have sufficient generic parameter constraints to call `Attach<T>(Stream)`.\r\n\r\n**Actual Behavior**:\r\n\r\n> error CS1503: Argument 1: cannot convert from 'System.IO.Stream' to 'StreamJsonRpc.JsonRpcProxyOptions'\r\n\r\nThe error I get makes no sense, since I clearly am calling a method that takes a single `Stream` parameter only, and that exact method exists. I'm clearly calling a static method as well. My only mistake is that my method needs to have `where T : class` added as a generic type constraint.\r\n\r\nYet the error message assumes I'm calling an instance method whose signature doesn't come close to matching the one that I'm clearly trying to call.","Url":"https://github.com/dotnet/roslyn/issues/34178","RelatedDescription":"Open issue \"CS1503 reported with misleading message\" (#34178)"},{"Id":"421727489","IsPullRequest":true,"CreatedAt":"2019-03-15T22:32:46","Actor":"chborl","Number":"34177","RawContent":null,"Title":"Don't complete statement when in nested verbatim string","State":"open","Body":"Fixes #34176\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/34177","RelatedDescription":"Open PR \"Don't complete statement when in nested verbatim string\" (#34177)"},{"Id":"421673850","IsPullRequest":true,"CreatedAt":"2019-03-15T22:00:06","Actor":"dotnet-bot","Number":"34167","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34167","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#34167)"},{"Id":"421711034","IsPullRequest":false,"CreatedAt":"2019-03-15T21:28:30","Actor":"chborl","Number":"34176","RawContent":null,"Title":"Complete Statement behaves incorrectly in verbatim string that contains a Razor code block","State":"open","Body":"adding notes from taylor \r\n![image](https://user-images.githubusercontent.com/12449387/54401262-33313100-4684-11e9-90b0-77b4b1d7dae9.png)\r\n\r\n_Originally posted by @jinujoseph in https://github.com/dotnet/roslyn/issues/34088#issuecomment-473122101_","Url":"https://github.com/dotnet/roslyn/issues/34176","RelatedDescription":"Open issue \"Complete Statement behaves incorrectly in verbatim string that contains a Razor code block\" (#34176)"},{"Id":"421706073","IsPullRequest":true,"CreatedAt":"2019-03-15T21:11:54","Actor":"dibarbet","Number":"34175","RawContent":null,"Title":"Invoke new document API for fully load in code broom.","State":"open","Body":"Related to #34133\r\n\r\nWait until solution is fully loaded when the user hits the code broom.\r\n![code_broom_wait](https://user-images.githubusercontent.com/5749229/54462191-18b29280-472c-11e9-97e8-d366640cc1d3.gif)\r\n","Url":"https://github.com/dotnet/roslyn/pull/34175","RelatedDescription":"Open PR \"Invoke new document API for fully load in code broom.\" (#34175)"},{"Id":"421703865","IsPullRequest":true,"CreatedAt":"2019-03-15T21:04:28","Actor":"agocke","Number":"34174","RawContent":null,"Title":"Do not skip emit if errors are suppressed","State":"open","Body":"In the command line compilation we try to discover when to stop the\r\ncompilation stages based on if an error is produced. If the error was\r\nproduced by /warnaserror, then suppressed, this should not be considered\r\na compilation-halting error.\r\n\r\nFixes #34101","Url":"https://github.com/dotnet/roslyn/pull/34174","RelatedDescription":"Open PR \"Do not skip emit if errors are suppressed\" (#34174)"},{"Id":"421696138","IsPullRequest":false,"CreatedAt":"2019-03-15T20:41:04","Actor":"kendrahavens","Number":"34173","RawContent":null,"Title":"Code Snippets for C# just like VB side has by default","State":"open","Body":"[Original developer community feedback](https://developercommunity.visualstudio.com/content/idea/466655/code-snippets-for-c-just-like-vb-side-has-by-defau.html)\r\n\r\n**Version Used**: Visual Studio 2019 Preview\r\n\r\n**Steps to Reproduce**:\r\n1. Type (Ctrl + K, Ctrl + X) to access C# snippets.\r\n\r\n**Expected Behavior**:\r\nRich snippet library available in Visual Basic also available in C#.\r\n\r\n**Actual Behavior**:\r\nC# snippets are limited to some simple 'Surrounds With' and simple syntax options. Visual basic's snippets are more task-oriented code blocks.\r\n\r\n>Complete \"do this task\" snippets, such as Read, Write, or Delete a reg key. Read, Write, Append to a file. Complete little tasks, while C# is just quick access to common things like making a loop, else block, etc. Useful, but nowhere near as useful as VB's long list of actual tasks.\r\n\r\nC#\r\n![image](https://user-images.githubusercontent.com/8293542/54460710-96c06a80-4727-11e9-8524-40b5ee855406.png)\r\n\r\nVisual Basic\r\n![image](https://user-images.githubusercontent.com/8293542/54460669-7395bb00-4727-11e9-943b-82384b309d7e.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34173","RelatedDescription":"Open issue \"Code Snippets for C# just like VB side has by default\" (#34173)"},{"Id":"421696120","IsPullRequest":true,"CreatedAt":"2019-03-15T20:41:01","Actor":"tmat","Number":"34172","RawContent":null,"Title":"Update to Arcade SDK 1.0.0-beta.19165.2","State":"open","Body":"Brings in package licensing changes: https://github.com/dotnet/arcade/pull/2003\r\nFixes https://github.com/dotnet/roslyn/issues/31589","Url":"https://github.com/dotnet/roslyn/pull/34172","RelatedDescription":"Open PR \"Update to Arcade SDK 1.0.0-beta.19165.2\" (#34172)"},{"Id":"421684904","IsPullRequest":true,"CreatedAt":"2019-03-15T20:07:26","Actor":"AlekseyTs","Number":"34171","RawContent":null,"Title":"Prevent embedding of interfaces that contain non-abstract members.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34171","RelatedDescription":"Open PR \"Prevent embedding of interfaces that contain non-abstract members.\" (#34171)"},{"Id":"421683237","IsPullRequest":false,"CreatedAt":"2019-03-15T20:02:13","Actor":"vsfeedback","Number":"34170","RawContent":null,"Title":"Class readonly properties goes wrong","State":"open","Body":"VSF_TYPE_MARKDOWNusually , when i write this, it is ok.\n\n```\n    Public Class TestClass\n        Public ReadOnly Property Name As String\n        Public ReadOnly Property Age As Integer\n        Public Sub New(Name As String, Age As Integer)\n            Me.Name = Name\n            Me.Age = Age\n        End Sub\n    End Class\n```\n\nbut when i write like this, it goes wrong.\n\n![](https://s2.ax1x.com/2019/03/09/App8Te.png)\n\n```\n   Public Class TestClass\n        Public ReadOnly Property Name As String\n        Public ReadOnly Property Age As Integer\n        Public Sub New(Name As String, Age As Integer)\n            With Me\n                .Name = Name\n                .Age = Age\n            End With\n        End Sub\n    End Class\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/484179/class-readonly-properties-goes-wrong.html\nVSTS ticketId: 816622_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/11/2019, 00:25 AM (4 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34170","RelatedDescription":"Open issue \"Class readonly properties goes wrong\" (#34170)"},{"Id":"421679566","IsPullRequest":false,"CreatedAt":"2019-03-15T19:50:50","Actor":"vsfeedback","Number":"34169","RawContent":null,"Title":"Faulty inline temp variable suggestion","State":"open","Body":"Original code:\n\nvar response = new byte[4];\nint byteCount = m_rs485.Read(response, 0, 5);\nif (byteCount != 5 || response[3] != (byte)STATUS.SUCCESS) retVal = false;\n\nVS suggested refactoring:\n\nint byteCount = m_rs485.Read(new byte[4], 0, 5);\nif (byteCount != 5 || (new byte[4])[3] != (byte)STATUS.SUCCESS) retVal = false;\n\nBad idea!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/479229/faulty-inline-temp-variable-suggestion.html\nVSTS ticketId: 811326_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/6/2019, 01:00 AM (9 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34169","RelatedDescription":"Open issue \"Faulty inline temp variable suggestion\" (#34169)"},{"Id":"421673901","IsPullRequest":true,"CreatedAt":"2019-03-15T19:35:33","Actor":"dotnet-bot","Number":"34168","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34168","RelatedDescription":"Closed or merged PR \"Merge master to features/NullableDogfood\" (#34168)"},{"Id":"421673818","IsPullRequest":true,"CreatedAt":"2019-03-15T19:33:32","Actor":"dotnet-bot","Number":"34166","RawContent":null,"Title":"Merge dev16.0-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34166","RelatedDescription":"Open PR \"Merge dev16.0-vs-deps to master-vs-deps\" (#34166)"},{"Id":"421647202","IsPullRequest":false,"CreatedAt":"2019-03-15T18:17:52","Actor":"JoeRobich","Number":"34165","RawContent":null,"Title":"CSharpUpdateProjectToAllowUnsafe.CPSProject_GeneralPropertyGroupUpdated Fails","State":"open","Body":"[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&view=ms.vss-test-web.build-test-results-tab)\r\n\r\n```\r\nAssert.Contains() Failure\r\nNot found: (filter expression)\r\nIn value: WhereEnumerableIterator<XElement> [<PropertyGroup>\r\n <TargetFramework>netstandard2.0</TargetFramework>\r\n</PropertyGroup>]\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34165","RelatedDescription":"Open issue \"CSharpUpdateProjectToAllowUnsafe.CPSProject_GeneralPropertyGroupUpdated Fails\" (#34165)"},{"Id":"421647182","IsPullRequest":false,"CreatedAt":"2019-03-15T18:17:50","Actor":"JoeRobich","Number":"34164","RawContent":null,"Title":"CSharpUpdateProjectToAllowUnsafe.LegacyProject_AllConfigurationsUpdated Fails","State":"open","Body":"[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&view=ms.vss-test-web.build-test-results-tab)\r\n\r\nFailed when expecting `true`\r\n```\r\nAssert.All() Failure: 2 out of 2 items in the collection did not pass.\r\n[1]: Item: <PropertyGroup Condition=\\\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \\\" xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\r\n <DebugType>pdbonly</DebugType>\r\n <Optimize>true</Optimize>\r\n <OutputPath>bin\\\\Release\\\\</OutputPath>\r\n <DefineConstants>TRACE</DefineConstants>\r\n <ErrorReport>prompt</ErrorReport>\r\n <WarningLevel>4</WarningLevel>\r\n </PropertyGroup>\r\n Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n Expected: true\r\n Actual: (null)\r\n at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\StringAsserts.cs:line 244\r\n at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.<>c__DisplayClass3_0.<VerifyPropertyInEachConfiguration>b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43\r\n at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\r\n[0]: Item: <PropertyGroup Condition=\\\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \\\" xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\r\n <DebugSymbols>true</DebugSymbols>\r\n <DebugType>full</DebugType>\r\n <Optimize>false</Optimize>\r\n <OutputPath>bin\\\\Debug\\\\</OutputPath>\r\n <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n <ErrorReport>prompt</ErrorReport>\r\n <WarningLevel>4</WarningLevel>\r\n </PropertyGroup>\r\n Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n Expected: true\r\n Actual: (null)\r\n at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\StringAsserts.cs:line 244\r\n at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.<>c__DisplayClass3_0.<VerifyPropertyInEachConfiguration>b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43\r\n at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\r\n```\r\n\r\nFailed when expecting `latest`\r\n```\r\nAssert.All() Failure: 2 out of 2 items in the collection did not pass.\r\n[1]: Item: <PropertyGroup Condition=\\\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \\\" xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\r\n <DebugType>pdbonly</DebugType>\r\n <Optimize>true</Optimize>\r\n <OutputPath>bin\\\\Release\\\\</OutputPath>\r\n <DefineConstants>TRACE</DefineConstants>\r\n <ErrorReport>prompt</ErrorReport>\r\n <WarningLevel>4</WarningLevel>\r\n </PropertyGroup>\r\n Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n Expected: latest\r\n Actual: (null)\r\n at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\StringAsserts.cs:line 244\r\n at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.<>c__DisplayClass3_0.<VerifyPropertyInEachConfiguration>b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43\r\n at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\r\n[0]: Item: <PropertyGroup Condition=\\\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \\\" xmlns=\\\"http://schemas.microsoft.com/developer/msbuild/2003\\\">\r\n <DebugSymbols>true</DebugSymbols>\r\n <DebugType>full</DebugType>\r\n <Optimize>false</Optimize>\r\n <OutputPath>bin\\\\Debug\\\\</OutputPath>\r\n <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n <ErrorReport>prompt</ErrorReport>\r\n <WarningLevel>4</WarningLevel>\r\n </PropertyGroup>\r\n Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n Expected: latest\r\n Actual: (null)\r\n at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\StringAsserts.cs:line 244\r\n at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.<>c__DisplayClass3_0.<VerifyPropertyInEachConfiguration>b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43\r\n at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\CollectionAsserts.cs:line 36\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34164","RelatedDescription":"Open issue \"CSharpUpdateProjectToAllowUnsafe.LegacyProject_AllConfigurationsUpdated Fails\" (#34164)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"421688625","IsPullRequest":true,"CreatedAt":"2019-03-16T03:58:51","Actor":"jkotas","Number":"7175","RawContent":null,"Title":"Delete exclusions of selected upstack framework binaries","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7175","RelatedDescription":"Closed or merged PR \"Delete exclusions of selected upstack framework binaries\" (#7175)"},{"Id":"421749829","IsPullRequest":true,"CreatedAt":"2019-03-16T00:45:24","Actor":"nattress","Number":"7176","RawContent":null,"Title":"Dotnet publish support for ready-to-run images","State":"open","Body":"* Publishing MSBuild script changes to enable dotnet publish support with `<NativeCodeGen>ReadyToRun</NativeCodeGen>` set in the project file.\r\n    * To enable for a project, add a reference to `Microsoft.DotNet.ILCompiler` package, enable ready-to-run compilation with `<NativeCodeGen>readytorun</NativeCodeGen>` in the project file. Assemblies can be skipped by adding the assembly filename (without extension) to the `ReadyToRunSkipAssembly` item.\r\n    * In ready-to-run mode, the `BuildAllReadyToRunAssemblies` target is used to trigger ILC instead of the `LinkNative` target (which is used for single-file RyuJit mode). `BuildAllReadyToRunAssemblies` compiles assemblies in parallel through nested invocations of MSBuild, each optimizing a single assembly.\r\n    * Sub-invocations of MSBuild use the same project file but override the set of targets that are run, restricting the targets to just collecting the list of dependencies to reference and invoking IlcCompile. This keeps the compilation context the same so all intermediates and binaries go into the same bin and obj directories.\r\n* Add a functional test (WebApi) that is built using the live built compiler in this tree which starts up Asp.Net Core and sends a web request to it.\r\n* Remove .ni extension for produced images to match Crossgen\r\n* Remove the ReadyToRunMultiModule test. It is not an interesting test now we are able to compile all the assemblies in a published .NET Core app.","Url":"https://github.com/dotnet/corert/pull/7176","RelatedDescription":"Open PR \"Dotnet publish support for ready-to-run images\" (#7176)"},{"Id":"421608237","IsPullRequest":true,"CreatedAt":"2019-03-15T17:19:46","Actor":"MichalStrehovsky","Number":"7174","RawContent":null,"Title":"Make NativeCallable method static","State":"closed","Body":"I was checking something for an internal customer when I noticed this. Well, the Project N compiler noticed it. We track validation on CoreRT side in #6893.","Url":"https://github.com/dotnet/corert/pull/7174","RelatedDescription":"Closed or merged PR \"Make NativeCallable method static\" (#7174)"},{"Id":"421560612","IsPullRequest":true,"CreatedAt":"2019-03-15T17:18:51","Actor":"MichalStrehovsky","Number":"7173","RawContent":null,"Title":"Don't root reflection-blocked types and methods","State":"closed","Body":"Noticed this while working on the previous fix.\r\n\r\nReflection scanner correctly detects reflection light up here:\r\n\r\nhttps://github.com/dotnet/corert/blob/132884042966b874c830c6012e7293d70148b933/src/System.Private.CoreLib/shared/System/Resources/ResourceReader.cs#L796-L799\r\n\r\nBut since `CreateUntypedDelegate` is reflection blocked, the generated method body is useless. This then shows up as a diff between scanning phase and compilation phase (usage based metadata analyzer won't pass this additional root to the compilation phase, because the method is not a reflection root - it's compiled, but not reflection visible).","Url":"https://github.com/dotnet/corert/pull/7173","RelatedDescription":"Closed or merged PR \"Don't root reflection-blocked types and methods\" (#7173)"},{"Id":"421550405","IsPullRequest":true,"CreatedAt":"2019-03-15T17:17:46","Actor":"MichalStrehovsky","Number":"7171","RawContent":null,"Title":"Fix protocol between UsageBased and AnalysisBased metadata managers","State":"closed","Body":"In #7042 I made it possible to express reflectability of something purely based on canonical code presence (so if e.g. `Foo<__Canon>..ctor` is compiled, `Foo<__Canon>..ctor` should be considered reflectable). Previously we only considered reflectability of concrete instantiations.\r\n\r\nThis was not reflected in the protocol between usage based and analysis based metadata managers: usage based manager was forgetting to tell the analysis based metadata manager about canonical bodies. As a result, places that relied on marking canonical bodies to make things reflectable (such as RD.XML and `--rootallapplicationassemblies`) were not getting that behavior when IL scanner was involved (optimized builds).\r\n\r\nFixes #7169.","Url":"https://github.com/dotnet/corert/pull/7171","RelatedDescription":"Closed or merged PR \"Fix protocol between UsageBased and AnalysisBased metadata managers\" (#7171)"},{"Id":"421294622","IsPullRequest":false,"CreatedAt":"2019-03-15T17:17:46","Actor":"jkotas","Number":"7169","RawContent":null,"Title":"SampleWebApi sample crashes with MissingRuntimeArtifactException","State":"closed","Body":"Repro:\r\n\r\n```\r\ncd Samples\\WebApi\r\ndotnet publish -c Release -r win-x64\r\nbin\\x64\\Release\\netcoreapp2.1\\win-x64\\publish\\SampleWebApi.exe\r\n```\r\n\r\nResult:\r\n```\r\nUnhandled Exception: EETypeRva:0x01468718(System.Reflection.MissingRuntimeArtifactException): This object cannot be invoked because it was metadata-enabled for browsing only: 'Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration<Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider>..ctor(Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory)' For more information, please visit  http://go.microsoft.com/fwlink/?LinkID=616867\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimePlainConstructorInfo`1.get_UncachedMethodInvoker() + 0xa1\r\n   at System.Reflection.Runtime.MethodInfos.RuntimePlainConstructorInfo`1.Invoke(BindingFlags, Binder, Object[], CultureInfo) + 0x65\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x9e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite, ServiceProviderEngineScope) + 0x52\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite, ServiceProviderEngineScope) + 0x16\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite, ServiceProviderEngineScope) + 0x52\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider, Type) + 0x5e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider) + 0x29\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build() + 0xd1\r\n```\r\n","Url":"https://github.com/dotnet/corert/issues/7169","RelatedDescription":"Closed issue \"SampleWebApi sample crashes with MissingRuntimeArtifactException\" (#7169)"},{"Id":"421558595","IsPullRequest":true,"CreatedAt":"2019-03-15T17:06:31","Actor":"Dotnet-GitSync-Bot","Number":"7172","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @justinvp","Url":"https://github.com/dotnet/corert/pull/7172","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7172)"},{"Id":"421220216","IsPullRequest":true,"CreatedAt":"2019-03-15T06:41:43","Actor":"nattress","Number":"7167","RawContent":null,"Title":"SuperIlc show compile failures","State":"closed","Body":"Couple small quality of life improvements:\r\n* After compiling all assemblies, write a list of compilation failures to the console\r\n* Emit ready-to-run images without the `.ni` part of the extension. This was initially useful so we knew which images were R2R but the CoreCLR loader expects the app host in a .NET Core app to be a .dll and Crossgen doesn't use `.ni` anymore.","Url":"https://github.com/dotnet/corert/pull/7167","RelatedDescription":"Closed or merged PR \"SuperIlc show compile failures\" (#7167)"},{"Id":"421340652","IsPullRequest":true,"CreatedAt":"2019-03-15T05:11:32","Actor":"Dotnet-GitSync-Bot","Number":"7170","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7170","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7170)"},{"Id":"421237691","IsPullRequest":false,"CreatedAt":"2019-03-14T20:49:15","Actor":"trylek","Number":"7168","RawContent":null,"Title":"CPAOT - re-enable vtable calls within CoreLib","State":"open","Body":"We need to temporarily disable the optimization regarding vtable calls in CoreLib because it requires either re-implementing the CoreCLR method table builder in CPAOT or persisting the vtable layouts in the R2R image. Neither technology exists today. We however need to re-enable this optimization before shipping because the optimization is important for CoreLib performance and needed for letting us publish R2R (instead of fragile NGEN) CoreLib.\r\n\r\nThe bit of code I am commenting out is in ceeInfoGetCallInfo in CorInfoImpl.ReadyToRun.cs around line 1070 under the conditional clause\r\n\r\n<code>\r\nif (MethodInSystemVersionBubble(callerMethod) && MethodInSystemVersionBubble(targetMethod))\r\n</code>","Url":"https://github.com/dotnet/corert/issues/7168","RelatedDescription":"Open issue \"CPAOT - re-enable vtable calls within CoreLib\" (#7168)"},{"Id":"420920619","IsPullRequest":true,"CreatedAt":"2019-03-14T16:54:16","Actor":"MichalStrehovsky","Number":"7165","RawContent":null,"Title":"Harden reflection scanner against invalid IL","State":"closed","Body":"Should help with the KnownGood test failures seen in #7157.\r\n\r\nThe `IsValid` check in `Skip` should be all that's needed to fix the observed failures, but I went ahead and hardened it against other invalid situations (end of body in the middle of an instruction, or bad calls).","Url":"https://github.com/dotnet/corert/pull/7165","RelatedDescription":"Closed or merged PR \"Harden reflection scanner against invalid IL\" (#7165)"},{"Id":"420922804","IsPullRequest":true,"CreatedAt":"2019-03-14T14:16:52","Actor":"MichalStrehovsky","Number":"7166","RawContent":null,"Title":"Ignore scanner mismatch for ThrowPNSE helper","State":"closed","Body":"RyuJIT will inject calls to this from some HW intrinsics. This causes a compilation failure on checked builds of the compiler when optimizing. Not worth doing anything else for this at this point.","Url":"https://github.com/dotnet/corert/pull/7166","RelatedDescription":"Closed or merged PR \"Ignore scanner mismatch for ThrowPNSE helper\" (#7166)"},{"Id":"420636421","IsPullRequest":true,"CreatedAt":"2019-03-14T03:24:11","Actor":"MichalStrehovsky","Number":"7163","RawContent":null,"Title":"Fix Auto field layout","State":"closed","Body":"CLR doesn't actually use the largest alignment required to align size of the resulting type.","Url":"https://github.com/dotnet/corert/pull/7163","RelatedDescription":"Closed or merged PR \"Fix Auto field layout\" (#7163)"},{"Id":"420752557","IsPullRequest":true,"CreatedAt":"2019-03-14T03:20:54","Actor":"Dotnet-GitSync-Bot","Number":"7164","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7164","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7164)"},{"Id":"420292734","IsPullRequest":true,"CreatedAt":"2019-03-14T03:20:33","Actor":"jkotas","Number":"7159","RawContent":null,"Title":"Test","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7159","RelatedDescription":"Closed or merged PR \"Test\" (#7159)"},{"Id":"420490913","IsPullRequest":true,"CreatedAt":"2019-03-13T14:52:37","Actor":"MichalStrehovsky","Number":"7162","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7162","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7162)"},{"Id":"420366690","IsPullRequest":true,"CreatedAt":"2019-03-13T14:13:07","Actor":"Dotnet-GitSync-Bot","Number":"7160","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7160","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7160)"},{"Id":"420477915","IsPullRequest":true,"CreatedAt":"2019-03-13T13:09:47","Actor":"dotnet-bot","Number":"7161","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7161","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7161)"},{"Id":"420282368","IsPullRequest":true,"CreatedAt":"2019-03-13T03:52:31","Actor":"sergiy-k","Number":"7156","RawContent":null,"Title":"Temporary disable running the KnownGood set of CoreCLR tests","State":"closed","Body":"These tests currently take too long to finish and, as a result,\r\ntest jobs just time out. In addition, we do not have (and never had)\r\nan extended known good set of CoreCLR tests for Linux and OSX.","Url":"https://github.com/dotnet/corert/pull/7156","RelatedDescription":"Closed or merged PR \"Temporary disable running the KnownGood set of CoreCLR tests\" (#7156)"},{"Id":"420292293","IsPullRequest":true,"CreatedAt":"2019-03-13T02:53:05","Actor":"jkotas","Number":"7158","RawContent":null,"Title":"Add task to dump Win32 resources","State":"closed","Body":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095.","Url":"https://github.com/dotnet/corert/pull/7158","RelatedDescription":"Closed or merged PR \"Add task to dump Win32 resources\" (#7158)"},{"Id":"420245753","IsPullRequest":true,"CreatedAt":"2019-03-13T02:45:57","Actor":"sergiy-k","Number":"7155","RawContent":null,"Title":"Disable all non-Wasm related test jobs in Jenkins CI","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7155","RelatedDescription":"Closed or merged PR \"Disable all non-Wasm related test jobs in Jenkins CI\" (#7155)"},{"Id":"420284094","IsPullRequest":true,"CreatedAt":"2019-03-13T02:09:10","Actor":"sergiy-k","Number":"7157","RawContent":null,"Title":"[WIP] Temporary increase time out for the KnownGood set of CoreCLR tests","State":"open","Body":"Check how long it takes to run the KnowGood set of tests on Windows and\r\nLinux. In addition, find a list of all failing tests.","Url":"https://github.com/dotnet/corert/pull/7157","RelatedDescription":"Open PR \"[WIP] Temporary increase time out for the KnownGood set of CoreCLR tests\" (#7157)"},{"Id":"420215673","IsPullRequest":true,"CreatedAt":"2019-03-12T23:14:52","Actor":"Dotnet-GitSync-Bot","Number":"7153","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7153","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7153)"},{"Id":"420226148","IsPullRequest":true,"CreatedAt":"2019-03-12T22:03:20","Actor":"trylek","Number":"7154","RawContent":null,"Title":"Enable CPAOT build of S.P.Corelib; improve field access","State":"open","Body":"Based on JanK's suggestion I have temporarily commented out the\r\nCoreLib-specific optimization in getCallInfo; re-enabling this\r\noptimization would require either replicating CoreCLR method table\r\nconstruction or not yet existing support for persisting method\r\ntable layout info in R2R PE files. I have dared swap the \"default\"\r\nvs. \"conditional\" case, thus slightly diverging from the CoreCLR\r\noriginal, for the sole purpose of easier readability.\r\n\r\nTo reduce the remaining codegen differences between CPAOT and\r\nCrossgen I have ported an extra bit of code from ZapInfo::getFieldInfo\r\nregarding the different field access methods. Without this change,\r\nwe fail at runtime in various assemblies where CPAOT calculated\r\na different field layout than Crossgen. With the change, we still\r\nfail in a couple of places due to\r\n\r\nhttps://github.com/dotnet/corert/issues/6665\r\n\r\nTo further fix S.P.Corelib build, I also had to add a small hack\r\nto remove the \"ni\" part of the filename extension, otherwise the\r\nCPAOT-built S.P.Corelib gets tracked by ILC under the simple name\r\n\"System.Private.CoreLib.ni\" and fails to match the hard-coded BCL name.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7154","RelatedDescription":"Open PR \"Enable CPAOT build of S.P.Corelib; improve field access\" (#7154)"},{"Id":"420034056","IsPullRequest":true,"CreatedAt":"2019-03-12T18:03:28","Actor":"MichalStrehovsky","Number":"7152","RawContent":null,"Title":"Delete build status badges","State":"closed","Body":"Jenkins rolling builds stopped working in January.\r\n\r\nEventually, we should replace this with either the rolling build status badge (https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/corert/corert-ci?branchName=master) or the official build status.\r\n\r\n@dotnet-bot skip ci please","Url":"https://github.com/dotnet/corert/pull/7152","RelatedDescription":"Closed or merged PR \"Delete build status badges\" (#7152)"},{"Id":"419940675","IsPullRequest":true,"CreatedAt":"2019-03-12T14:54:29","Actor":"MichalStrehovsky","Number":"7150","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Picks up JitInterface changes.","Url":"https://github.com/dotnet/corert/pull/7150","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7150)"},{"Id":"419942373","IsPullRequest":true,"CreatedAt":"2019-03-12T11:46:33","Actor":"MichalStrehovsky","Number":"7151","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7151","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7151)"},{"Id":"419683481","IsPullRequest":true,"CreatedAt":"2019-03-11T23:37:06","Actor":"Dotnet-GitSync-Bot","Number":"7149","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/7149","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7149)"},{"Id":"419523272","IsPullRequest":true,"CreatedAt":"2019-03-11T20:57:30","Actor":"MichalStrehovsky","Number":"7147","RawContent":null,"Title":"Replace Delegate.CreateDelegate","State":"closed","Body":"Replacing this with a pattern that is easier to statically analyze. We use the GetType/GetMethod/CreateDelegate pattern in several places already.","Url":"https://github.com/dotnet/corert/pull/7147","RelatedDescription":"Closed or merged PR \"Replace Delegate.CreateDelegate\" (#7147)"},{"Id":"419526684","IsPullRequest":true,"CreatedAt":"2019-03-11T20:56:43","Actor":"Dotnet-GitSync-Bot","Number":"7148","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7148","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7148)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"420462297","IsPullRequest":true,"CreatedAt":"2019-03-15T20:24:11","Actor":"dotnet-maestro[bot]","Number":"3020","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3020","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3020)"},{"Id":"418571115","IsPullRequest":true,"CreatedAt":"2019-03-15T01:00:20","Actor":"dotnet-bot","Number":"3013","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3013)"},{"Id":"421179324","IsPullRequest":true,"CreatedAt":"2019-03-14T23:24:43","Actor":"johnbeisner","Number":"3022","RawContent":null,"Title":"Picking up the latest changes from the BuildPerformanceTestAssets repo","State":"closed","Body":"Reference: https://github.com/dotnet/BuildPerformanceTestAssets/pull/5\r\n\r\n@jorive","Url":"https://github.com/dotnet/sdk/pull/3022","RelatedDescription":"Closed or merged PR \"Picking up the latest changes from the BuildPerformanceTestAssets repo\" (#3022)"},{"Id":"420786755","IsPullRequest":true,"CreatedAt":"2019-03-14T23:09:17","Actor":"peterhuene","Number":"3021","RawContent":null,"Title":"Remove duplicates items from resolved publish assets.","State":"closed","Body":"When `CopyLocalLockFileAssemblies` was true, `ReferenceCopyLocalPaths`\r\ncontained the set of `RuntimePackAsset` items.\r\n\r\nWhen resolving assets to copy local for publish, the `RuntimePackAsset` items\r\nwere added twice: once explicitly and again via `ReferenceCopyLocalPaths`.\r\n\r\nThis commit fixes this by only adding to the resolved copy local assets for\r\npublish when `CopyLocalLockFileAssemblies` is false.\r\n\r\nFixes #3007.","Url":"https://github.com/dotnet/sdk/pull/3021","RelatedDescription":"Closed or merged PR \"Remove duplicates items from resolved publish assets.\" (#3021)"},{"Id":"417040414","IsPullRequest":false,"CreatedAt":"2019-03-14T23:09:16","Actor":"sbomer","Number":"3007","RawContent":null,"Title":"Duplicate items in _ResolvedCopyLocalPublishAssets","State":"closed","Body":"- When `ResolveCopyLocalAssets` runs during self-contained publish (`_UseBuildDependencyFile` is false), it outputs `_ResolvedCopyLocalPublishAssets`.\r\n- When `_ComputeResolvedCopyLocalPublishAssets` runs, it adds to `_ResolvedCopyLocalPublishAssets` the contents of (`ReferenceCopyLocalPaths` \\ `_ResolvedCopyLocalBuildAssets`):\r\nhttps://github.com/dotnet/sdk/blob/c60af5f303fa67d25550ecfa54975caef0f5c828/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L398-L399\r\n\r\n`_ResolvedCopyLocalBuildAssets` is empty, so it gets a duplicate copy of items in `ReferenceCopyLocalPaths` (which comes from `RuntimePackAsset`), for example `System.Private.CoreLib.dll`.\r\n\r\nBefore https://github.com/dotnet/sdk/pull/2646, `ResolvedAssembliesToPublish` only had one Item for System.Private.CoreLib.dll. I noticed this while trying to update https://github.com/mono/linker/blob/master/src/ILLink.Tasks/ILLink.Tasks.targets#L451 to work with the newest SDK. `_ManagedAssembliesToLink` was computed from `ResolvedAssembliesToPublish`, but that line breaks when there are multiple files with the same Filename in the input:\r\n```\r\nC:\\Users\\svbomer\\.nuget\\packages\\illink.tasks\\0.1.6\\build\\ILLink.Tasks.targets(451,34): error MSB4094: \"C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll;C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll\" is an invalid value for the \"AssemblyPath\" parameter of the \"CheckEmbeddedRootDescriptor\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\linker\\test\\ILLink.Tasks.Tests\\bin\\debug\\netcoreapp3.0\\helloworld\\helloworld.csproj]\r\n```\r\n\r\nhttps://github.com/dotnet/sdk/pull/2666 may be relevant.\r\n\r\n/cc @peterhuene @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3007","RelatedDescription":"Closed issue \"Duplicate items in _ResolvedCopyLocalPublishAssets\" (#3007)"},{"Id":"419948212","IsPullRequest":true,"CreatedAt":"2019-03-13T12:00:14","Actor":"dotnet-maestro[bot]","Number":"3018","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19161.14\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3018","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3018)"},{"Id":"420065077","IsPullRequest":true,"CreatedAt":"2019-03-12T23:01:18","Actor":"dsplaisted","Number":"3019","RawContent":null,"Title":"Don't set \"platform library\" for .NET Core 3.0 and higher","State":"closed","Body":"Don't try to exclude files from the platform library on .NET Core 3.0 and higher, which uses runtime and targeting packs instead\r\n\r\nFixes #3004\r\n\r\nTo help verify whether this is safe, I looked at the places where `MicrosoftNETPlatformLibrary` is used:\r\n\r\n- It's used by the `GenerateDepsFile`, `GenerateRuntimeConfigurationFiles`, and `ResolveCopyLocalAssets` tasks.  These all simply pass it to `LockFileExtensions.CreateProjectContext`.  In that method, it's used as part of the check to determine if the app is framework dependent:\r\n    ```C#\r\n    bool isFrameworkDependent = (platformLibrary != null || runtimeFrameworks?.Any() == true) &&\r\n        (!isSelfContained || string.IsNullOrEmpty(lockFileTarget.RuntimeIdentifier));\r\n    ```\r\n    Note that for .NET Core 3.0 and higher, the `ResolveFrameworkReferences` should add `RuntimeFramework` items, so the `isFrameworkDependent` calculation should still work.\r\n- In the created `ProjectContext`, the `GetRuntimeLibraries` method excludes assets from the platform library for framework dependent apps.\r\n- The `GenerateRuntimeConfigurationFiles` task also uses the platform library from the `ProjectContext` in order to write the runtimeconfig file, but only if there aren't any `RuntimeFrameworks`.\r\n- The `ResolvePackageAssets` task excludes assets from the platform library in `GetPlatformPackageExclusions`.  (It also excludes assets from libraries matching names of `RuntimeFrameworks`, which I believe we should now remove, as those assets will come from runtime packs and won't be in the assets file anyway now).\r\n- The `_RestoreCrossgen` and `PrepforRestoreForComposeStore` use the platform library name.  These are both part of support for `dotnet store`, which we are [considering dropping](https://github.com/dotnet/sdk/issues/2914), and which will need a lot of work in any case if we want it to work when targeting .NET Core 3","Url":"https://github.com/dotnet/sdk/pull/3019","RelatedDescription":"Closed or merged PR \"Don't set \"platform library\" for .NET Core 3.0 and higher\" (#3019)"},{"Id":"416793797","IsPullRequest":false,"CreatedAt":"2019-03-12T23:01:18","Actor":"SomeAnon42","Number":"3004","RawContent":null,"Title":"ResolvePackageAssets fails when targeting Core 3.0","State":"closed","Body":"```\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 193\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 180\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetPlatformExclusionList(LockFileTarget lockFileTarget, LockFileTargetLibrary platformLibrary, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 153\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.GetPlatformPackageExclusions() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 1191\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task, Stream stream) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 610\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 483\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 434\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 279\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 271\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tNitroSharpDbg\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t228\t\r\n```\r\n\r\nSteps to reproduce:\r\n1. Create a new console netcoreapp3.0 project\r\n2. Clone https://github.com/mellinoe/veldrid.git\r\n3. Add a reference Veldrid.ImGui.csproj\r\n```xml\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\veldrid\\src\\Veldrid.ImGui\\Veldrid.ImGui.csproj\" />\r\n</ItemGroup>\r\n```\r\n4. Build the project. \r\n\r\nThe build should fail. However, there's no issues when targeting netcoreapp2.2 or when using [the NuGet package](https://www.nuget.org/packages/ImGui.NET) instead of referencing the project.\r\n\r\n``dotnet --info`` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010582\r\n Commit:    a643588b29\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27502-7\r\n  Commit:  12aa3da961\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010582 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3004","RelatedDescription":"Closed issue \"ResolvePackageAssets fails when targeting Core 3.0\" (#3004)"},{"Id":"419043286","IsPullRequest":false,"CreatedAt":"2019-03-11T15:36:04","Actor":"saxenark","Number":"3014","RawContent":null,"Title":"Installing JRE in microsoft/dotnet:sdk container","State":"closed","Body":"Hi,\r\n\r\nI need JRE to run dependencies for my .NET core sdk 2.2 unit tests in Visual Studio 2017. I would like to know how to install JRE into my windows docker container. Through the docker environment, I tried to run java.exe but it does not run.\r\n\r\nSo, my question is how do I install JRE on my container?\r\n\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR C:/Temp\r\nCOPY jre-8u202-windows-x64.exe ./Java.exe\r\n\r\nWORKDIR C:/P4Source\r\n\r\nI am using Windows Server 2016 1607 with Docker basic EE\r\n\r\nThanks,\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3014","RelatedDescription":"Closed issue \"Installing JRE in microsoft/dotnet:sdk container\" (#3014)"},{"Id":"419249712","IsPullRequest":true,"CreatedAt":"2019-03-11T13:32:19","Actor":"dotnet-maestro[bot]","Number":"3017","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3017","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3017)"},{"Id":"419177642","IsPullRequest":true,"CreatedAt":"2019-03-10T13:16:08","Actor":"dotnet-maestro[bot]","Number":"3016","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19159.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3016","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3016)"},{"Id":"419069291","IsPullRequest":true,"CreatedAt":"2019-03-09T14:16:04","Actor":"dotnet-maestro[bot]","Number":"3015","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3015)"},{"Id":"417286822","IsPullRequest":true,"CreatedAt":"2019-03-08T14:43:34","Actor":"dotnet-maestro[bot]","Number":"3008","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19154.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19155.29\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19156.20\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.23\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3008)"},{"Id":"418539657","IsPullRequest":true,"CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Number":"3012","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012)"},{"Id":"418538996","IsPullRequest":false,"CreatedAt":"2019-03-07T22:15:49","Actor":"nkolev92","Number":"3011","RawContent":null,"Title":"The SDK should error if a FrameworkReference is not supported for a certain TFM","State":"open","Body":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera","Url":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Open issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011)"},{"Id":"417443376","IsPullRequest":false,"CreatedAt":"2019-03-06T16:38:50","Actor":"nguerrera","Number":"3009","RawContent":null,"Title":"Trouble moving bin/ and obj/ to .bin/ and .obj/","State":"closed","Body":"*Moved from https://github.com/dotnet/project-system/issues/1437#issuecomment-469568035*\r\n\r\n@dzmitry-lahoda wrote:\r\n\r\nNot sure if right thread - but some tooling is wrong...\r\n\r\nSee the line with `ProjectAssetsFile`? If I remove it - my `csproj` fails to build. \r\nWhy I ever need it? My task for to build from VS 2017 and VS Code and from `dotnet` command line into `.bin` and `.obj` because of Unity:(. So I did it. But when VS 2017 opens solution - it generates `obj`. So I did fix which kinda should work.  But got issues - I followed the path, and got into `C:\\Program Files\\dotnet\\sdk\\2.2.102\\Sdks\\Microsoft.NET.Sdk\\targets\\` folder and into `ProjectAssetsFile`. So here is fix:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- fixing VS 2017 bug which makes it output directory which is not requested -->\r\n  <PropertyGroup>\r\n    <ProjectAssetsFile>$(MSBuildProjectDirectory)\\.obj\\project.assets.json</ProjectAssetsFile>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n      <PreBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PreBuildEvent>\r\n      \r\n      <PostBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PostBuildEvent>      \r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Debug\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Release\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"$(xUnitVersion)\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"$(xUnitVersion)\" />\r\n  </ItemGroup>\r\n  </ItemGroup>  \r\n</Project>\r\n````\r\n\r\n\r\nThere is other workaround. Very weird - depends on order of and some hacky `Import` declarations, but it breaks `xunit` runner and VS Code. Ssee lines with `Microsoft.NET.Sdk`:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <ItemGroup>\r\n    <None Remove=\".gitignore\" />\r\n\r\n    <None Remove=\"**/*.meta\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Buffers\" Version=\"4.5.0\" />\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nDoes next relates dotnet/project-system#1438? \r\n\r\nI was not able to find solution on SO. \r\n\r\nShould I create separate issue with that with steps:\r\n1. Build into `.bin` and `.obj`\r\n2. Ensure there are no `bin` and `obj` created.\r\n3. Check VS Code, VS 2017, dotnet.exe\r\n\r\nOr my case is relevant for `respecting`?","Url":"https://github.com/dotnet/sdk/issues/3009","RelatedDescription":"Closed issue \"Trouble moving bin/ and obj/ to .bin/ and .obj/\" (#3009)"},{"Id":"416305439","IsPullRequest":false,"CreatedAt":"2019-03-06T16:13:21","Actor":"JoeRobich","Number":"3001","RawContent":null,"Title":"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk","State":"closed","Body":"When building Roslyn with 3.0.100-preview4-010381 installed, I get the following error on every solution build.\r\n\r\n```\r\n8>------ Build started: Project: VS.Tools.Roslyn.Package, Configuration: Debug Any CPU ------\r\n2>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010381\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(112,5): error NETSDK1085: The 'NoBuild' property was set to true but the 'Build' target was invoked.\r\n2>Done building project \"IlAsmDeploy.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/sdk/issues/3001","RelatedDescription":"Closed issue \"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk\" (#3001)"},{"Id":"417548547","IsPullRequest":false,"CreatedAt":"2019-03-05T23:22:40","Actor":"sbomer","Number":"3010","RawContent":null,"Title":"GenerateDepsFile no longer respects FilesToSkip from runtime packs","State":"open","Body":"- Runtime pack dependencies in deps.json and in the DependencyContext model have a \"runtimepack.\" prefix prependend to the nuget package id (see https://github.com/dotnet/sdk/commit/16eddf3d635133c35f42974dcd491c8263066b37#diff-0723634e548f98293eebe3970b71e0ddR328).\r\n- The heuristic in `GetPackageParts` gets the package id from the name of a nuspec in a parent directory:\r\n https://github.com/dotnet/sdk/blob/ab2176b3447e3e7820b5a340408110b6d498f907/src/Tasks/Common/NuGetUtils.cs#L48-L52\r\n\r\n`GenerateDepsFile` uses `GetPackageParts` to build the list of packages with dependencies to remove. When it looks for files to trim from the dependency model, it doesn't match any of the dependencies that have the \"runtimepack.\" prefix, so those files don't get skipped.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3010","RelatedDescription":"Open issue \"GenerateDepsFile no longer respects FilesToSkip from runtime packs\" (#3010)"},{"Id":"416947669","IsPullRequest":true,"CreatedAt":"2019-03-05T20:41:11","Actor":"nugetlurker","Number":"3006","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3006","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3006)"},{"Id":"416947647","IsPullRequest":true,"CreatedAt":"2019-03-05T00:27:04","Actor":"nugetlurker","Number":"3005","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3005","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3005)"},{"Id":"416329826","IsPullRequest":true,"CreatedAt":"2019-03-03T18:14:52","Actor":"dsplaisted","Number":"3002","RawContent":null,"Title":"Fix publishing self-contained ASP.NET apps","State":"closed","Body":"- Ignore .json files in runtime packs.  Fixes self-contained ASP.NET apps failing to launch with new runtime packs. @pakrym \r\n- Remove UseRefTargetingPacks property.  Fixes #2962","Url":"https://github.com/dotnet/sdk/pull/3002","RelatedDescription":"Closed or merged PR \"Fix publishing self-contained ASP.NET apps\" (#3002)"},{"Id":"416394963","IsPullRequest":true,"CreatedAt":"2019-03-02T14:26:05","Actor":"dotnet-maestro[bot]","Number":"3003","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19151.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3003","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3003)"},{"Id":"416214091","IsPullRequest":true,"CreatedAt":"2019-03-01T17:55:17","Actor":"JoeRobich","Number":"3000","RawContent":null,"Title":"Update the json manifest for the Dotfuscator Vsix","State":"closed","Body":"@livarcocc This is to update the dotfuscator manifest for a new build (in dotfuscator branch, which unfortunately still exists in this repo...)","Url":"https://github.com/dotnet/sdk/pull/3000","RelatedDescription":"Closed or merged PR \"Update the json manifest for the Dotfuscator Vsix\" (#3000)"},{"Id":"416092757","IsPullRequest":true,"CreatedAt":"2019-03-01T14:21:16","Actor":"dotnet-maestro[bot]","Number":"2999","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19128.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19128.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2999","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2999)"},{"Id":"415919082","IsPullRequest":false,"CreatedAt":"2019-03-01T03:00:55","Actor":"sayedihashimi","Number":"2998","RawContent":null,"Title":"Unable to run global tools in PowerShell running on macOS","State":"open","Body":"I tried to execute a global tool from PowerShell running on macOS and the tool was not located. When I run `dotnet tool list --global` it does show up. When I exit out of PowerShell, and get back into a normal bash prompt, the global tool works fine.\r\n\r\nmacOS version = 10.14.2\r\n\r\n![global-tool](https://user-images.githubusercontent.com/1283154/53613386-f3f2e280-3ba3-11e9-90de-4669536bc35e.jpg)\r\n\r\nHere are the runtime/sdks that I have installed.\r\n![image](https://user-images.githubusercontent.com/1283154/53613512-2e5c7f80-3ba4-11e9-9073-9f4d0a32e6c1.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2998","RelatedDescription":"Open issue \"Unable to run global tools in PowerShell running on macOS\" (#2998)"},{"Id":"415882721","IsPullRequest":true,"CreatedAt":"2019-03-01T00:15:02","Actor":"fadimounir","Number":"2997","RawContent":null,"Title":"Crossgen Task","State":"open","Body":"Intitial implementation of the crossgen task, and plumbing in the SDK targets to invoke the task. The crossgen task invokes crossgen from the runtime pack.\r\n\r\n- Task triggered when <ReadyToRun> is set to true in the main app's project file (opt-in feature)\r\n- Added new condition to download runtime packs: when the ReadyToRun property is set.\r\n- Adding R2R exclusion list capability\r\n- Symbol emission is optional (opt-in, when ReadyToRunEmitSymbols is set to true)","Url":"https://github.com/dotnet/sdk/pull/2997","RelatedDescription":"Open PR \"Crossgen Task\" (#2997)"},{"Id":"415838644","IsPullRequest":false,"CreatedAt":"2019-02-28T21:47:43","Actor":"nguerrera","Number":"2996","RawContent":null,"Title":"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2994#discussion_r261372831\r\n\r\nIs this by design? ","Url":"https://github.com/dotnet/sdk/issues/2996","RelatedDescription":"Open issue \"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard\" (#2996)"},{"Id":"415612168","IsPullRequest":true,"CreatedAt":"2019-02-28T14:26:25","Actor":"dotnet-maestro[bot]","Number":"2995","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19127.8\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19127.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2995)"},{"Id":"415365956","IsPullRequest":true,"CreatedAt":"2019-02-27T22:56:37","Actor":"etbyrd","Number":"2994","RawContent":null,"Title":"Remove opt-out of COM Reference Manager Tab","State":"open","Body":"This is a fix for: https://github.com/dotnet/project-system/issues/4355\r\nI tested this locally and ensured that projects built with COM references but I am not sure if anything is blocking this on the SDK side. ","Url":"https://github.com/dotnet/sdk/pull/2994","RelatedDescription":"Open PR \"Remove opt-out of COM Reference Manager Tab\" (#2994)"},{"Id":"415112893","IsPullRequest":true,"CreatedAt":"2019-02-27T14:21:22","Actor":"dotnet-maestro[bot]","Number":"2993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19126.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19126.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2993)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1106559820415406080","CreatedAt":"2019-03-15T14:16:34+00:00","UserScreenname":"dotnet","Text":".NET Core Container Images now Published to Microsoft Container Registry https://t.co/025dCayCnx","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":70,"FavoriteCount":42,"RawContent":null},{"Id":"1106511609768357889","CreatedAt":"2019-03-15T11:05:00+00:00","UserScreenname":"dotnet","Text":"Did you know you could build video games with .NET? \n\nCheck out this episode of #OnDotNet where \n@BrianPeek &amp;… https://t.co/g6DSHnfV18","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null},{"Id":"1105555943285288961","CreatedAt":"2019-03-12T19:47:31+00:00","UserScreenname":"dotnet","Text":"Tune in to the @VisualStudio channel on Thursday for a virtual workshop for Windows Application Developers\n\nMore de… https://t.co/6IsLRLIz6N","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"1105063819985014785","CreatedAt":"2019-03-11T11:12:00+00:00","UserScreenname":"dotnet","Text":"In this episode of #OnDotNet, Brady Gaster (@bradygaster) joins Cecil (@cecilphillip) to show how easy it is to add… https://t.co/qBrPW5zgnp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":21,"RawContent":null},{"Id":"1103473660508160001","CreatedAt":"2019-03-07T01:53:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 3 https://t.co/sXYAjLR9Wb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":358,"FavoriteCount":217,"RawContent":null},{"Id":"1103058093301149696","CreatedAt":"2019-03-05T22:21:57+00:00","UserScreenname":"dotnet","Text":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0 https://t.co/oYZK5AK8h6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":84,"FavoriteCount":50,"RawContent":null}]}},"RunOn":"2019-03-16T05:30:26.9573248Z","RunDurationInMilliseconds":8659}