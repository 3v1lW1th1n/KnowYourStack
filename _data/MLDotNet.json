{"Data":{"GitHub":{"Issues":[{"Id":"585723799","IsPullRequest":false,"CreatedAt":"2020-03-22T13:54:38","Actor":"mengaims","Number":"4958","RawContent":null,"Title":"Add new mode for SR anomaly detector","State":"open","Body":"### New mode for exisiting SR algorithm\r\n\r\nBy old SR(Spectral Residual) anomaly detection, user could only get whether the point is an anomaly or not, but has no way to set sensitivity value for the anomaly. Sometimes an anomaly do happens, but with a low sensitivity setting, it may not be a valid alert. With this new option, the SR anomaly detector will allow user to set sensitivity, and output margin for the point according to the sensitivity, so that when you get an an anomaly point, you could judge if it's a valid alert by comparing the value with margin.\r\n### Backward compatibility\r\n\r\nThis change is backward compatible. By default the SR anomaly detector will use AnomalyOnly mode, which have exactly the same intput and output with original method. And the user could also load old saved models with the new detector.\r\n\r\n### Benchmark report\r\n#### 1. Dataset\r\nWe evaluate on the Yahoo timeseries dataset, which has 367 timeseries and 572966 points in total.\r\n#### 2. Evaluation method\r\n\r\nWe calculate the Precision, Recall, and F1 score using the method ofï¼š [https://github.com/iopsai/iops/tree/master/evaluation](https://github.com/iopsai/iops/tree/master/evaluation).\r\n\r\nThis change did not modify the original anomaly detection part, so the scores remains the same between AnomalyOnly mode and AnomalyAndMargin mode.\r\n\r\nAnd we ran the two modes of SR on a machine with Intel(R) Xeon(R) CPU E5-2660 v3 @ 2.60GHz, 16GB memory, x64 operating system.\r\n#### 3. Score and Latency:\r\nMode | Precision | Recall | F1 | #TruePositive | #Positives | #Anomalies | Average latency to   predict the whole dataset | Fine tuned   parameters\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\nAnomalyOnly mode | 0.601 | 0.670 | 0.634 | 2625 | 4370 | 3915 | 21167ms | WindowSize=64,   BackAddWindowSize=5, LookaheadWindowSize=5, AveragingWindowSize=3,   JudgementWindowSize=64, Threshold=0.45\r\nAnomalyAndMargin mode | 0.601 | 0.670 | 0.634 | 2625 | 4370 | 3915 | 41717ms | WindowSize=64,   BackAddWindowSize=5, LookaheadWindowSize=5, AveragingWindowSize=3,   JudgementWindowSize=64, Threshold=0.45, Sensitivity=90","Url":"https://github.com/dotnet/machinelearning/issues/4958","RelatedDescription":"Open issue \"Add new mode for SR anomaly detector\" (#4958)"},{"Id":"585686510","IsPullRequest":true,"CreatedAt":"2020-03-22T10:23:51","Actor":"mstfbl","Number":"4957","RawContent":null,"Title":"Fixed path to Procdump files","State":"open","Body":"Small bug fix in PowerShell command on the exact location where Procdump files are downloaded. The unzipping of a .zip file with `Expand-Archive` does not make a new folder specifically for the .zip file.","Url":"https://github.com/dotnet/machinelearning/pull/4957","RelatedDescription":"Open PR \"Fixed path to Procdump files\" (#4957)"},{"Id":"585478512","IsPullRequest":true,"CreatedAt":"2020-03-21T11:14:52","Actor":"osaaso","Number":"4956","RawContent":null,"Title":"Created using Colaboratory","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4956","RelatedDescription":"Closed or merged PR \"Created using Colaboratory\" (#4956)"},{"Id":"584754079","IsPullRequest":true,"CreatedAt":"2020-03-19T23:18:10","Actor":"mstfbl","Number":"4955","RawContent":null,"Title":"Updated paths to test/sample datasets to local paths","State":"open","Body":"There are a lot of datasets/sample files that are downloaded from previous commits through \"raw.githubusercontent\" links. Almost all of these datasets are already available locally in the `test/data` directory. This PR edits references to these datasets so that they are no longer downloaded, and instead simply referred to locally.\r\n\r\nAlso added one dataset (`adult.txt`, 3.67 MB) that was downloaded from a \"raw.githubusercontent\" link. This dataset is small enough to be in `test/data` (biggest local dataset in \"test/data\" is `taxi-fare-train.csv` (24.9 MB).","Url":"https://github.com/dotnet/machinelearning/pull/4955","RelatedDescription":"Open PR \"Updated paths to test/sample datasets to local paths\" (#4955)"},{"Id":"579736111","IsPullRequest":true,"CreatedAt":"2020-03-19T20:32:08","Actor":"mstfbl","Number":"4938","RawContent":null,"Title":"Added working version of checking whether file is available for access","State":"closed","Body":"Recently AutoFitRegressionTest() and AutoFitBinaryTest() have been failing occasionally on our MachineLearning-Full CI builds with the error:\r\n\r\n> System.IO.IOException : The process cannot access the file 'D:\\a\\1\\s\\bin\\AnyCPU.Debug\\Microsoft.ML.AutoML.Tests\\netcoreapp2.1\\...dataset' because it is being used by another process.\r\n> \r\n> Stack trace\r\n>    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n>    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n>    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n>    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n>    at Microsoft.ML.AutoML.TextFileSample.CreateFromFullFile(String path) in D:\\a\\1\\s\\src\\Microsoft.ML.AutoML\\ColumnInference\\TextFileSample.cs:line 76\r\n>  ...\r\n\r\n(Specific errors for [AutoFitRegressionTest ](https://dev.azure.com/dnceng/public/_build/results?buildId=555337&view=logs&j=dd8eddb6-ecc6-5f65-73e6-df90e5693b94&t=5b4b90b5-382b-59ee-45ec-a64c47991239&l=202)and [AutoFitBinaryTest](https://dev.azure.com/dnceng/public/_build/results?buildId=545476&view=logs&j=41509eb4-74ce-5e57-61b4-bdf74b39e7c1&t=dbdc2969-5b98-5c39-1328-31d4a2fdc45e&l=286) from CI builds)\r\n\r\nThis indicates that the .dataset file that is trying to be reached still has a lock on it, and is not yet ready for accessing. The current method of checking whether this file is ready to be accessed (checking `new FileInfo(dataFile).Length > 0` is not sufficient. \r\n\r\nThe fix below remedies this by obtaining these dataset files from the local `test/data` path, and thereby eliminating the possibility of download locks. This fix also does the same for other datasets that are available locally that were being downloaded from a commit before, so that similar file lock issues for those datasets can be avoided as well.","Url":"https://github.com/dotnet/machinelearning/pull/4938","RelatedDescription":"Closed or merged PR \"Added working version of checking whether file is available for access\" (#4938)"},{"Id":"583555577","IsPullRequest":true,"CreatedAt":"2020-03-19T18:03:56","Actor":"justinormont","Number":"4951","RawContent":null,"Title":"Pin hash in DownloadTensorFlowSentimentModel()","State":"closed","Body":"Changes `DownloadTensorFlowSentimentModel()` to download from a specific commit ID instead of master of the dotnet/machinelearning-testdata repo.\r\n\r\nOtherwise older versions of the ML.NET code will break when the remote repo is reorganized, or the files renamed.\r\n\r\nFurther explanation in comment below: https://github.com/dotnet/machinelearning/pull/4951#discussion_r395213145","Url":"https://github.com/dotnet/machinelearning/pull/4951","RelatedDescription":"Closed or merged PR \"Pin hash in DownloadTensorFlowSentimentModel()\" (#4951)"},{"Id":"584590656","IsPullRequest":false,"CreatedAt":"2020-03-19T17:49:32","Actor":"Zeraphil","Number":"4954","RawContent":null,"Title":"Unexpected WordEmbedding behavior as feature vector to a multi-class classifier","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n3.1.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nApply the WordEmbedding transformer to a multiclass prediction trainer.\r\n- **What happened?**\r\nCross validation resulted errors and NaN scores in multiclass predictions. \r\n- **What did you expect?**\r\nI expect to be able to use the word embedding feature vector, concatenate it with other features, and apply it to my classifier.\r\n\r\n### Source code / logs\r\n\r\nI'm trying to use either downloaded FastText word vectors or the built-in ones. My Data Processing pipeline looks like this:\r\n\r\n` Append(mlContext.Transforms.Text.FeaturizeText(\"FeaturesA\", options, \"Transcript\"))\r\n .Append(mlContext.Transforms.Text.TokenizeIntoWords(\"Tokens\", \"Transcript\"))\r\n .Append(mlContext.Transforms.Text.ApplyWordEmbedding(\"WordEmbeddings\", \"OutputTokens\", WordEmbeddingEstimator.PretrainedModelKind.GloVe50D))\r\n .Append(mlContext.Transforms.Text.ApplyWordEmbedding(\"WordEmbeddings\", WORDVECTOR_PATH, \"Tokens\"))\r\n.Append(mlContext.Transforms.NormalizeMinMax(\"FeaturesA\", \"FeaturesA\"))\r\n.Append(mlContext.Transforms.CopyColumns(\"FeaturesB\", \"WordEmbeddings\"))\r\n.Append(mlContext.Transforms.Concatenate(\"Features\", \"FeaturesA\", \"FeaturesB\"))\r\n.AppendCacheCheckpoint(mlContext);\r\n \r\nvar trainer = mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName: \"Label\", featureColumnName: \"Features\")\r\n.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\nvar trainingPipeline = dataProcessPipeline.Append(trainer);'\r\n\r\nI don't get a functioning model, the prediction scores are NaN. I have a couple of questions on this.\r\nI understand that ApplyWordEmbedding returns an estimator, but I had it understood it outputs the average/min/max of all the token vectors, so word vector dimensions *3. \r\n\r\n1) Why isn't this usable as a feature vector into a classifier? If I apply another transform, like NormalizeMinMax, it suddenly works, but that's squashing the values in a way that doesn't make sense.\r\n\r\n2) Why is the model size so small? I expected that, as part of the transform, the whole wordvector model would be included, but it seems like if the data doesn't contain the token, it's not included in the model. That doesn't make word embeddings that useful as part of the point of word vectors is to provide a language model. If I want to classify a sentence containing cat as \"Animal\" but my data doesn't contain dog, the model should still be able to featurize dog as part of the sentence, but it doesn't seem like the model would be able to do that. Apologies if I'm missing something very obvious, going through the WordEmbedding documentation has been a bit difficult for me.\r\n\r\n3) How can I select just the average features? It's not clear from the docs either.\r\n\r\nThank you!\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4954","RelatedDescription":"Open issue \"Unexpected WordEmbedding behavior as feature vector to a multi-class classifier\" (#4954)"},{"Id":"583494501","IsPullRequest":true,"CreatedAt":"2020-03-18T22:14:27","Actor":"frank-dong-ms","Number":"4950","RawContent":null,"Title":"fix race condition for test MulticlassTreeFeaturizedLRTest","State":"closed","Body":"method in TreeEnsembleFeaturizerTransform will be called from multi-threading, make variable \"temp\" as local variable to avoid race condition.","Url":"https://github.com/dotnet/machinelearning/pull/4950","RelatedDescription":"Closed or merged PR \"fix race condition for test MulticlassTreeFeaturizedLRTest\" (#4950)"},{"Id":"584001656","IsPullRequest":true,"CreatedAt":"2020-03-18T21:04:38","Actor":"frank-dong-ms","Number":"4953","RawContent":null,"Title":"test for benchmark test hanging","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4953","RelatedDescription":"Open PR \"test for benchmark test hanging\" (#4953)"},{"Id":"583898371","IsPullRequest":false,"CreatedAt":"2020-03-18T17:42:12","Actor":"francescomazzurco","Number":"4952","RawContent":null,"Title":"Request: expose Experiment._modelDirectory","State":"open","Body":"Hi all,\r\n\r\nIn AutoML, when configuring the `ExperimentSettings`, one can set a `CacheDirectory` where the intermediate models will be stored. However, the models are actually stored in a subfolder, called \"ExperimentXX\", where XX in an auto-increment integer in v.0.14.0, and some random characters in the recent preview releases. Navigating the source code, I found that this path is stored inside the private readonly field `_modelDirectory` belonging to the internal class `Experiment<TRunDetail, TMetrics>`. When running many experiments, there is no way to associate each experiment to each subfolder. \r\nIn my scenario, caching is necessary due to dataset size, and I would like to delete the temporary models at the end of the experiment without bothering other experiments that may be running simultaneously.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4952","RelatedDescription":"Open issue \"Request: expose Experiment._modelDirectory\" (#4952)"},{"Id":"579694210","IsPullRequest":false,"CreatedAt":"2020-03-18T16:51:35","Actor":"philiplai","Number":"4937","RawContent":null,"Title":"model.LastTransformer doesn't exist","State":"closed","Body":"I was trying to implement Permutation Feature Importance (PFI) for Binary Classification.  But I was stuck on the following line of code.  This method simply doesn't exist.\r\n// Extract the predictor.\r\nvar linearPredictor = model.LastTransformer;\r\n\r\nI was following the example on https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet\r\n\r\nAny idea?\r\n\r\n---\r\n#### Document Details\r\n\r\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\r\n\r\n* ID: 5ec45442-8e5f-a544-cc9a-58483a383513\r\n* Version Independent ID: 040169f9-d169-cbbd-099e-f04a7a5a6b3f\r\n* Content: [PermutationFeatureImportanceExtensions.PermutationFeatureImportance Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4937","RelatedDescription":"Closed issue \"model.LastTransformer doesn't exist\" (#4937)"},{"Id":"583379348","IsPullRequest":true,"CreatedAt":"2020-03-18T00:22:16","Actor":"LittleLittleCloud","Number":"4949","RawContent":null,"Title":"Add allowBinary Flag to internal columnInference ","State":"open","Body":"Add allowBinary flag to internal columnInference API. to stop parsing label as `Boolean` type when it's not binary experiment.","Url":"https://github.com/dotnet/machinelearning/pull/4949","RelatedDescription":"Open PR \"Add allowBinary Flag to internal columnInference \" (#4949)"},{"Id":"583259931","IsPullRequest":false,"CreatedAt":"2020-03-17T19:53:12","Actor":"luisquintanilla","Number":"4948","RawContent":null,"Title":"Wrong Transform Sample","State":"open","Body":"Sample shows `LoadImages` not `LoadRawImageBytes`\r\n\r\n---\r\n#### Document Details\r\n\r\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\r\n\r\n* ID: 935b3cba-8385-d7b1-0d1c-92ce1e5b6bef\r\n* Version Independent ID: f4c01ba9-1f3e-03fa-48ea-1a62a13e11b4\r\n* Content: [ImageEstimatorsCatalog.LoadRawImageBytes(TransformsCatalog, String, String, String) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.imageestimatorscatalog.loadrawimagebytes?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/ImageEstimatorsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/ImageEstimatorsCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4948","RelatedDescription":"Open issue \"Wrong Transform Sample\" (#4948)"},{"Id":"583239359","IsPullRequest":false,"CreatedAt":"2020-03-17T19:14:56","Actor":"natke","Number":"4947","RawContent":null,"Title":"ordinal regression in ML.NET ","State":"open","Body":"The page [ordinal-regression.md](https://github.com/MicrosoftDocs/azure-reference-other/blob/master/studio-module-reference/ordinal-regression.md) describes the ordinal regression module. Is there a way to use this module/class in ML.NET in C#?\r\nAny hints are welcome.\r\nGreetings, Wido\r\n\r\nSee https://github.com/MicrosoftDocs/azure-reference-other/issues/90 for the original issue.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4947","RelatedDescription":"Open issue \"ordinal regression in ML.NET \" (#4947)"},{"Id":"583013577","IsPullRequest":true,"CreatedAt":"2020-03-17T13:29:18","Actor":"mengaims","Number":"4946","RawContent":null,"Title":"Add optional expected value and margin output for srcnn anomaly detector","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4946","RelatedDescription":"Open PR \"Add optional expected value and margin output for srcnn anomaly detector\" (#4946)"},{"Id":"581622528","IsPullRequest":false,"CreatedAt":"2020-03-16T17:40:30","Actor":"huy-lv","Number":"4944","RawContent":null,"Title":"How to train model from image bitmap","State":"closed","Body":"### System information\r\nWindow 10\r\n\r\n### Issue\r\n- **What did you do?**\r\nHi everyone, I want to build a model from training data like this\r\n```\r\nclass ModelInput {\r\n    Bitmap image { get; set; }\r\n}\r\n```\r\nI cant find any example with input data as bitmap. How do i do that?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4944","RelatedDescription":"Closed issue \"How to train model from image bitmap\" (#4944)"},{"Id":"580904660","IsPullRequest":true,"CreatedAt":"2020-03-14T00:46:43","Actor":"Lynx1820","Number":"4942","RawContent":null,"Title":"Fixes KMeans scoring differences between ORT and OnnxRunner","State":"closed","Body":"The KMeans ORT score predictions were off because batches were not being handled correctly. \r\nThere is still an issue because Nimbus produces int32 predictions, when they should be uint32, since ML.NET returns key values, but I plan on working on that separately, since it's probably a Nimbus bug. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4942","RelatedDescription":"Closed or merged PR \"Fixes KMeans scoring differences between ORT and OnnxRunner\" (#4942)"},{"Id":"580931672","IsPullRequest":true,"CreatedAt":"2020-03-13T23:33:31","Actor":"mstfbl","Number":"4943","RawContent":null,"Title":"Fixed and Added unit tests for DownloadFromUrlWithRetryAsync hanging issue  ","State":"open","Body":"Fixed DownloadFromUrlWithRetryAsync by removing the helper function ResourceManagerUtils.CheckValidDownload and by using WebClientResponseUri (an extension of WebClient)\r\n\r\nResourceManagerUtils.EnsureResourceAsync(...) appends the relative URL of a resource to the $MlNetResourcesUrl environment variable (equal to \"https://aka.ms/mlnet-resources/\" by default).\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cdb1e4b38308d9256cbde9e740a14b3bc7d64c2f/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L34\r\n\r\nFor example, this occurs in the unit test WordEmbeddingsTest.TestWordEmbeddings(), where `sentimend.emd` is downloaded from https://aka.ms/mlnet-resources/Text/Sswe/sentiment.emd .\r\n\r\nThere is a possibility of this combined URL not correctly pointing to a resource, which is why this CheckValidDownload function exists:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cdb1e4b38308d9256cbde9e740a14b3bc7d64c2f/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L168-L184\r\n\r\nThis function was not correctly warning that the HTML of www.microsoft.com was downloaded (instead of an intended data file), as the size of microsoft.com is bigger than 4 kilobytes, and the site should have the sub-strings <head and <body (not <head> and <body>).","Url":"https://github.com/dotnet/machinelearning/pull/4943","RelatedDescription":"Open PR \"Fixed and Added unit tests for DownloadFromUrlWithRetryAsync hanging issue  \" (#4943)"},{"Id":"580804713","IsPullRequest":true,"CreatedAt":"2020-03-13T20:26:22","Actor":"najeeb-kazmi","Number":"4941","RawContent":null,"Title":"Add see also section to TensorFlowEstimator docs","State":"closed","Body":"Fixes #4932 ","Url":"https://github.com/dotnet/machinelearning/pull/4941","RelatedDescription":"Closed or merged PR \"Add see also section to TensorFlowEstimator docs\" (#4941)"},{"Id":"579215175","IsPullRequest":false,"CreatedAt":"2020-03-13T20:26:22","Actor":"vslynko","Number":"4932","RawContent":null,"Title":"TensorFlowEstimator initialization info is missing","State":"closed","Body":"`TensorFlowEstimator` is not static and has no public constructors. Therefore the link to the documentation on how to initialize `TensorFlowEstimator` is essential.\r\n\r\n---\r\n#### Document Details\r\n\r\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\r\n\r\n* ID: 7366dd71-3899-63fb-690e-5e0d11a5bf13\r\n* Version Independent ID: 4e44da94-51eb-2617-135a-eb71186b4da9\r\n* Content: [TensorFlowEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.tensorflowestimator?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/TensorFlowEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/TensorFlowEstimator.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4932","RelatedDescription":"Closed issue \"TensorFlowEstimator initialization info is missing\" (#4932)"},{"Id":"579104390","IsPullRequest":true,"CreatedAt":"2020-03-13T19:01:59","Actor":"mstfbl","Number":"4931","RawContent":null,"Title":"Added hanging test mem dump feature","State":"closed","Body":"Added the option to automatically collect memory dumps on hanging and crashing tests through VSTest Tasks and ProcDump.\r\n\r\nAlso added a section in the developer guide explaining the process to collecting memory dumps from CI builds.","Url":"https://github.com/dotnet/machinelearning/pull/4931","RelatedDescription":"Closed or merged PR \"Added hanging test mem dump feature\" (#4931)"},{"Id":"580714924","IsPullRequest":true,"CreatedAt":"2020-03-13T18:19:08","Actor":"natke","Number":"4940","RawContent":null,"Title":"Fix xrefs in the LDSVM trainer docs","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4940","RelatedDescription":"Closed or merged PR \"Fix xrefs in the LDSVM trainer docs\" (#4940)"},{"Id":"580137617","IsPullRequest":true,"CreatedAt":"2020-03-12T18:26:49","Actor":"harishsk","Number":"4939","RawContent":null,"Title":"Added IDisposable support for several classes","State":"open","Body":"We have had a lot of instability in the Tensorflow tests. At least one of the issues has to do with memory leaks from ImageClassificationTrainer which holds references to the Tensorflow session and graphs. In order to fix this I have added IDisposable support for several of the classes involved in this scenario and fixed up the tests to call Dispose at the end of the tests.","Url":"https://github.com/dotnet/machinelearning/pull/4939","RelatedDescription":"Open PR \"Added IDisposable support for several classes\" (#4939)"},{"Id":"579681677","IsPullRequest":true,"CreatedAt":"2020-03-12T17:03:07","Actor":"harishsk","Number":"4936","RawContent":null,"Title":"Updated version to 1.5.0-preview3","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4936","RelatedDescription":"Closed or merged PR \"Updated version to 1.5.0-preview3\" (#4936)"},{"Id":"579653089","IsPullRequest":true,"CreatedAt":"2020-03-12T06:00:22","Actor":"frank-dong-ms","Number":"4935","RawContent":null,"Title":"Nightlybuild fix","State":"closed","Body":"several issue here:\r\n1. delete useless folder to avoid no disk space\r\n2. add missing dependency for nightly build\r\n3. fix LD_LIBRARY_PATH for CentOS to set proper native reference path\r\n4. increase build time, seems it takes more time now for net core 3.0 to build","Url":"https://github.com/dotnet/machinelearning/pull/4935","RelatedDescription":"Closed or merged PR \"Nightlybuild fix\" (#4935)"},{"Id":"578821017","IsPullRequest":true,"CreatedAt":"2020-03-11T21:34:21","Actor":"Lynx1820","Number":"4928","RawContent":null,"Title":"Fix for MulticlassNaiveBayesTrainer export to Onnx","State":"closed","Body":"- Adding support for a batch input dimension\r\n- While ML.NET doesn't use this batch dimension, ORT does.  \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4928","RelatedDescription":"Closed or merged PR \"Fix for MulticlassNaiveBayesTrainer export to Onnx\" (#4928)"},{"Id":"579469782","IsPullRequest":true,"CreatedAt":"2020-03-11T20:05:28","Actor":"najeeb-kazmi","Number":"4934","RawContent":null,"Title":"Improved documentation for LdSvmTrainer","State":"closed","Body":"Adds explanation of the algorithm, moves details to remarks, adds references to samples.","Url":"https://github.com/dotnet/machinelearning/pull/4934","RelatedDescription":"Closed or merged PR \"Improved documentation for LdSvmTrainer\" (#4934)"},{"Id":"579237248","IsPullRequest":false,"CreatedAt":"2020-03-11T12:44:08","Actor":"vslynko","Number":"4933","RawContent":null,"Title":"AccessViolationException PredictionEngine when 100-200 concurrent predictions running async","State":"open","Body":"### System information\r\n\r\n- Windows 10 64bit latest. 4 core CPU with hyperthreading.\r\n- Main app net48, that loads dependency in net472 that loads Microsoft.ML.Tensorflow 1.4: \r\n\r\n### Issue\r\n\r\n- Multiple concurrent tasks scheduled with `Task.WhenAll`. All tasks perform the same lambda, that involves calling PredictionEngineBase.Predict call. Number of tasks in parallel stacks window is about 100-200. \r\n- `AccessViolationException` thrown with message \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\r\n- As in case when number of tasks is not that big, ~30-50 I would expect no exception.\r\n\r\n### Source code / logs\r\nTwo different stack traces point to about same location in the code. The difference is that I rearrange a little async workflow by switch couple of async tasts around.\r\n```stacktrace\r\n   at System.SpanHelpers.CopyTo[T](T& dst, Int32 dstLength, T& src, Int32 srcLength)\r\n   at System.Span`1.TryCopyTo(Span`1 destination)\r\n   at Microsoft.ML.TensorFlow.TensorTypeExtensions.CopyTo[T](Tensor tensor, Span`1 values)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.Predict(TSrc example)\r\n   at InstaFlow.TensorFlow.Gp2.TfGpBaseV2`1.Predict(TfGpSeriesV2 series)\r\n   at InstaFlow.TensorFlow.Gp2.TfGpBaseV2`1.CorrectInternal(T model, TfInput input)\r\n   at InstaFlow.TensorFlow.TfEstimatorV2.TimerAction[T](Func`1 func)\r\n   at InstaFlow.TensorFlow.TfEstimatorV2.EstimateAndEvaluate(TfInput input)\r\n```\r\n\r\n```stacktrace\r\n   at Tensorflow.c_api.TF_TensorByteSize(IntPtr tensor)\r\n   at Tensorflow.Tensor.get_bytesize()\r\n   at Tensorflow.Tensor.get_size()\r\n   at Microsoft.ML.TensorFlow.TensorTypeExtensions.CopyTo[T](Tensor tensor, Span`1 values)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.Predict(TSrc example)\r\n   at InstaFlow.TensorFlow.Estimator.TfEstimatorBase.Predict(TfSeries series) in C:\\src\\instaflow\\dotnet\\InstaFlow.TensorFlow\\Estimator\\TfEstimatorBase.cs:line 101\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4933","RelatedDescription":"Open issue \"AccessViolationException PredictionEngine when 100-200 concurrent predictions running async\" (#4933)"},{"Id":"578885494","IsPullRequest":true,"CreatedAt":"2020-03-10T23:31:46","Actor":"frank-dong-ms","Number":"4929","RawContent":null,"Title":"add back lightgbm crash mitigation","State":"closed","Body":"we are seeing several crash so there might be more issue there, will remove this mitigation if we root cause and fix other remaining issue within lightgbm test\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4929","RelatedDescription":"Closed or merged PR \"add back lightgbm crash mitigation\" (#4929)"},{"Id":"578891508","IsPullRequest":true,"CreatedAt":"2020-03-10T22:11:18","Actor":"mstfbl","Number":"4930","RawContent":null,"Title":"Debugging hanging tests [Draft, WIP]","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4930","RelatedDescription":"Open PR \"Debugging hanging tests [Draft, WIP]\" (#4930)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-03-23T05:30:40.8772841Z","RunDurationInMilliseconds":915}