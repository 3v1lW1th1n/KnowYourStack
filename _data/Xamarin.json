{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null},{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null},{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8719706321","Type":"PullRequestEvent","CreatedAt":"2018-12-08T03:26:54","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2499","RelatedDescription":"Merged pull request \"[xabuild] removed need for MSBuildExtensionsPath search paths\" (#2499) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2481\r\n\r\nThe changes in #2481 showcase a problem with xabuild.\r\n\r\nTake the following example:\r\n\r\n    <MicrosoftNETBuildExtensionsTargets Condition=\"'$(MicrosoftNETBuildExtensionsTargets)' == ''\">$(MSBuildExtensionsPath)\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.targets</MicrosoftNETBuildExtensionsTargets>\r\n    <Import Condition=\"Exists('$(MicrosoftNETBuildExtensionsTargets)')\" Project=\"$(MicrosoftNETBuildExtensionsTargets)\" />\r\n\r\nIf a path to a `*.targets` file is evaluated to a property, then\r\nfallback search paths for `MSBuildExtensionsPath` cannot work! At that\r\npoint, the value has been computed and MSBuild no longer does the\r\n\"magic\" to lookup alternate `$(MSBuildExtensionsPath)` locations.\r\n\r\nHence, we should not use fallback search paths at all...\r\n\r\nWe only need to symlink two directories:\r\n\r\n    Windows:\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\r\n\r\n    Mac:\r\n    /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/xbuild/15.0\r\n    /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/xbuild/Microsoft\r\n\r\nIf we create symlinks to these locations from\r\n`.\\bin\\Debug\\lib\\xamarin.android\\xbuild\\` in-tree, we don't need to\r\nuse fallback search paths for `MSBuildExtensionsPath` any longer.\r\n\r\nWe also should ensure all search paths are cleared in the `.config`\r\nfile`. We no longer need to check and create these XML elements\r\neither.\r\n\r\nI reworked `XABuild.cs` to create these new symlinks, and removed some\r\nLINQ in the process. I also renamed `XABuildPaths.SystemProfiles` to\r\n`SystemFrameworks`, to make it more clear."},{"Id":"8719692096","Type":"PullRequestEvent","CreatedAt":"2018-12-08T03:16:30","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2508","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Support comma separators for armeabi error\" (#2508) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2507\r\nFixes: https://developercommunity.visualstudio.com/content/problem/400751/xamarin-android-build-failed-due-to-missing-folder.html\r\nContext: https://github.com/xamarin/xamarin-android/issues/2173\r\nContext: https://github.com/xamarin/xamarin-android/pull/2180"},{"Id":"8719691921","Type":"PullRequestEvent","CreatedAt":"2018-12-08T03:16:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2506","RelatedDescription":"Merged pull request \"[tests] fix for ProduceReferenceAssembly test\" (#2506) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid (commerical product), this test is failing:\r\n\r\n    Failed : Xamarin.Android.Build.Tests.IncrementalBuildTest.ProduceReferenceAssembly\r\n        `_BuildApkEmbed` should *not* be skipped!\r\n\r\nWhen \"Fast Deployment\" is enabled, the `_BuildApkFastDev` MSBuild\r\ntarget runs instead of `_BuildApkEmbed`.\r\n\r\nTo workaround it, we can just disable \"Fast Deployment\". We are really\r\njust wanting to make sure `CoreCompile` is skipped in this test."},{"Id":"8719622156","Type":"IssuesEvent","CreatedAt":"2018-12-08T02:30:01","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2507","RelatedDescription":"Opened issue \"[Xamarin.Android.Build.Tasks] Comma separators in `$(AndroidSupportedAbis)` cause the build to skip over the expected XA0115 error for `armeabi`\" (#2507) at xamarin/xamarin-android","RelatedBody":"Context: https://developercommunity.visualstudio.com/content/problem/400751/xamarin-android-build-failed-due-to-missing-folder.html\r\nContext: https://github.com/xamarin/xamarin-android/issues/2173\r\n\r\n### Steps to Reproduce\r\n\r\nAdd the following test to `Xamarin.Android.Build.Tests.BuildTest` and run it:\r\n\r\n```csharp\r\n[Test]\r\npublic void XA0115Commas ()\r\n{\r\n\tvar proj = new XamarinAndroidApplicationProject ();\r\n\tproj.SetProperty (KnownProperties.AndroidSupportedAbis, \"armeabi,armeabi-v7a\");\r\n\tusing (var builder = CreateApkBuilder (Path.Combine (\"temp\", TestContext.CurrentContext.Test.Name))) {\r\n\t\tbuilder.ThrowOnBuildFailure = false;\r\n\t\tAssert.IsFalse (builder.Build (proj), \"Build should have failed with XA0115.\");\r\n\t\tStringAssertEx.Contains ($\"error XA0115\", builder.LastBuildOutput, \"Error should be XA0115\");\r\n\t\tAssert.IsTrue (builder.Clean (proj), \"Clean should have succeeded.\");\r\n\t}\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nEither the use of commas in the `$(AndroidSupportedAbis)` should cause an error because comma separators are treated as invalid, or the `armeabi` architecture should produce the expected XA0115 error from the fix for https://github.com/xamarin/xamarin-android/issues/2173 that indicates the architecture is no longer supported:\r\n\r\n> Invalid value 'armeabi' in $(AndroidSupportedAbis). This ABI is no longer supported. Please update your project properties.\r\n\r\nIt turns out that comma separators *have been* allowed in `$(AndroidSupportedAbis)` up until now, so they must continue to be allowed, and this scenario should produce the XA0115 error.\r\n\r\n### Actual Behavior\r\n\r\nThe build produces the original unfriendly error message as reported in https://github.com/xamarin/xamarin-android/issues/2173:\r\n\r\n```\r\nXamarin.Android.Common.targets(2827,3): error MSB4018: The \"BuildApk\" task failed unexpectedly.\r\nXamarin.Android.Common.targets(2827,3): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\src\\xamarin-android\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\lib\\armeabi\\libmono-android.debug.so'.\r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at System.IO.File.OpenRead(String path)\r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at Xamarin.Android.Tasks.BuildApk.AddNativeLibrary(ZipArchiveEx apk, String abi, String filename, String inArchiveFileName) \r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at Xamarin.Android.Tasks.BuildApk.AddRuntimeLibraries(ZipArchiveEx apk, String supportedAbis) \r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at Xamarin.Android.Tasks.BuildApk.ExecuteWithAbi(String supportedAbis, String apkInputPath, String apkOutputPath) \r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at Xamarin.Android.Tasks.BuildApk.Execute() \r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\nXamarin.Android.Common.targets(2827,3): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\n### Version Information\r\n\r\nVisual Studio 2019 Preview 1"},{"Id":"8718885581","Type":"PullRequestEvent","CreatedAt":"2018-12-07T22:01:24","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2506","RelatedDescription":"Opened pull request \"[tests] fix for ProduceReferenceAssembly test\" (#2506) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid (commerical product), this test is failing:\r\n\r\n    Failed : Xamarin.Android.Build.Tests.IncrementalBuildTest.ProduceReferenceAssembly\r\n        `_BuildApkEmbed` should *not* be skipped!\r\n\r\nWhen \"Fast Deployment\" is enabled, the `_BuildApkFastDev` MSBuild\r\ntarget runs instead of `_BuildApkEmbed`.\r\n\r\nTo workaround it, we can just disable \"Fast Deployment\". We are really\r\njust wanting to make sure `CoreCompile` is skipped in this test."},{"Id":"8718798145","Type":"IssuesEvent","CreatedAt":"2018-12-07T21:42:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1891","RelatedDescription":"Closed issue \"Missing Activity Attributes such as android:enableVrMode are missing.\" (#1891) at xamarin/xamarin-android","RelatedBody":"This was flagged [in the old bug tracker](https://bugzilla.xamarin.com/show_bug.cgi?id=58958), but hasn't made it to the new one. \r\n\r\nandroid:showForAllUsers has been added since the bug was originally raised, but android:enableVrMode has not. To be fair it's not listed in the [main documentation for <activity>](https://developer.android.com/guide/topics/manifest/activity-element), but it is a [valid and necessary activity property](https://developers.google.com/vr/reference/vr-manifest)."},{"Id":"8718797357","Type":"PullRequestEvent","CreatedAt":"2018-12-07T21:42:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2109","RelatedDescription":"Merged pull request \"Add Missing Activity Attributes #1891\" (#2109) at xamarin/xamarin-android","RelatedBody":"Adds a number of attributes for an Activity that are supported in android\r\n\r\nautoRemoveFromRecents\r\nbanner\r\ncolorMode\r\ndescription(NOT FOUND IN DOCS, ONLY SOURCE)\r\nenableVrMode\r\nfinishOnCloseSystemDiaglogs(NOT FOUND IN DOCS, ONLY SOURCE)\r\nlockTaskMode(NOT FOUND IN DOCS, ONLY SOURCE)\r\nlogo(NOT FOUND IN DOCS, ONLY SOURCE)\r\nmaxAspectRatio\r\nmaxRecents\r\npersistableMode\r\nrecreateOnConfigChanges(NOT FOUND IN DOCS, ONLY SOURCE)\r\nrelinquishTaskIdentity\r\nresumeWhilePausing(NOT FOUND IN DOCS, ONLY SOURCE)\r\nrotationAnimation(NOT FOUND IN DOCS, ONLY SOURCE)\r\nshowForAllUsers\r\nshowOnLockScreen(NOT FOUND IN DOCS, ONLY SOURCE)\r\nsingleUser\r\nsplitName\r\nvisibleToInstantApps(NOT FOUND IN DOCS, ONLY SOURCE)\r\n\r\nsee #1891 "},{"Id":"8718379640","Type":"PullRequestEvent","CreatedAt":"2018-12-07T20:14:01","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2505","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] don't use so many temp files\" (#2505) at xamarin/xamarin-android","RelatedBody":"In many places throughout the Xamarin.Android build, we have a pattern\r\nof:\r\n\r\n- Generate a temp file.\r\n- Use `MonoAndroidHelper.CopyIfChanged` to put the file in the\r\n  destination. This reads both files, doing a hash comparison before\r\n  deciding to write or not.\r\n- Delete the temp file.\r\n\r\nSometimes the temp file is actually in `%TEMP%`, but other times we\r\nappend `.new` to the destination file. The case of `.new` can collide\r\nif two builds are running at once (example caused by a known VS for\r\nMac issue).\r\n\r\nThinking about this, in cases with small files, we can make a simple\r\noptimization:\r\n\r\n- Generate the file in-memory.\r\n- Use a new `MonoAndroidHelper.CopyStreamIfChanged` method`.\r\n\r\nThis has several benefits:\r\n\r\n- We never write a file to disk when there are no changes.\r\n- We don't have to *remember* to delete the file.\r\n- The code, in general, is slightly simpler.\r\n\r\nThe only place we likely shouldn't use this new pattern, would be if\r\nthe file was huge.\r\n\r\n## Changes ##\r\n\r\nI added new APIs for:\r\n\r\n- `Files.HasStreamChanged` - to compare a `Stream` in memory\r\n- `Files.HasBytesChanged` - to compare a `byte[]` in memory\r\n- `Files.CopyIfStreamChanged`\r\n- `Files.CopyIfStringChanged` - some cases we have a `string`\r\n- `Files.CopyIfBytesChanged` - this supports `string`\r\n- `MonoAndroidHelper.CopyIfStreamChanged`\r\n- `MonoAndroidHelper.CopyIfStringChanged`\r\n- `MonoAndroidHelper.CopyIfBytesChanged`\r\n\r\nI changed the following MSBuild tasks, mostly to test out the new\r\nbehavior:\r\n\r\n- `GenerateResourceDesigner` was using a `.new` file.\r\n- `GenerateJavaStubs` was using temp files in many places. I was able\r\n  to fix up all the places except where `Generator.CreateJavaSources`\r\n  writes Java code to an output directory.\r\n\r\nI made other general refactoring in `GenerateJavaStubs`:\r\n\r\n- The top-level `temp` directory we still use, should be deleted in a\r\n  `try-finally`!\r\n- Since we don't have to worry about deleting a `temp_map_file`, we\r\n  can return earlier if `Generator.CreateJavaSources` fails.\r\n- A `GetResource<T>` method, cleans up the places reading from\r\n  `EmbeddedResource` files. I also changed it up to properly `Dispose`\r\n  things.\r\n- A `save` anonymous method/delegate should just be a `SaveResource`\r\n  *regular* method.\r\n- A few places were calling `Path.GetFullPath` unecessarily. Since\r\n  this method accesses the file system, we should skip it unless the\r\n  full path is actually needed.\r\n\r\nI also added some tests for the new APIs in `MonoAndroidHelper`.\r\n\r\n## Results ##\r\n\r\nI did three test runs, because I was getting varying times for\r\n`GenerateJavaStubs`. This is the Xamarin.Forms integration project in\r\nthis repo:\r\n\r\n    Before (Clean Build):\r\n    1. 1587 ms  GenerateJavaStubs                          1 calls\r\n    2. 1503 ms  GenerateJavaStubs                          1 calls\r\n    3. 1553 ms  GenerateJavaStubs                          1 calls\r\n\r\n    After (Clean Build):\r\n    1. 1424 ms  GenerateJavaStubs                          1 calls\r\n    2. 1461 ms  GenerateJavaStubs                          1 calls\r\n    3. 1529 ms  GenerateJavaStubs                          1 calls\r\n\r\n    Before (Incremental):\r\n    1. 1775 ms  GenerateJavaStubs                          1 calls\r\n    2. 1490 ms  GenerateJavaStubs                          1 calls\r\n    3. 1664 ms  GenerateJavaStubs                          1 calls\r\n\r\n    After (Incremental):\r\n    1. 1443 ms  GenerateJavaStubs                          1 calls\r\n    2. 1480 ms  GenerateJavaStubs                          1 calls\r\n    3. 1589 ms  GenerateJavaStubs                          1 calls\r\n\r\n`GenerateJavaStubs` is now consistently faster, but it's hard to tell\r\nhow much. I feel it is likely 100ms better. I have an SSD, so I'd\r\nexpect developers with an HDD to see even bigger improvments.\r\n\r\nI could not see a difference in `GenerateResourceDesigner`, likely\r\nsince it wrote only a single temp file.\r\n\r\nNext steps would be to make changes in Java.Interop so we could get\r\nthe same `CopyIfStreamChanged` behavior for *all* generated Java\r\nfiles. There are likely other MSBuild tasks to change as well."},{"Id":"8718147768","Type":"IssuesEvent","CreatedAt":"2018-12-07T19:28:37","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2504","RelatedDescription":"Opened issue \"Add support for profiled AOT\" (#2504) at xamarin/xamarin-android","RelatedBody":"For some time mono supports feature called profiled AOT.\r\n\r\nWe should provide an easy way to use it on Android. It is useful when we don't want to AOT everything and only AOT parts of the assemblies. Like the parts used (and jitted) during application startup.\r\n\r\nCurrently it requires multiple steps to use.\r\n\r\n* build the app with the aot profiler\r\n* enable the profiling\r\n* run the app and let it exit (aot profile is created at the app shutdown)\r\n* get the profile from the device\r\n* use the profile when building the application\r\n* enjoy reasonably small quick starting app\r\n\r\nHere's an example:\r\n\r\n```\r\n[build the app with the embedded aot profiler]\r\nmsbuild /t:Install /p:AndroidEmbedProfilers=aot /p:Configuration=Release tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj\r\n\r\n[enable aot profiling]\r\nadb shell setprop debug.mono.profile aot\r\n\r\n[run the app and wait till it exits]\r\n\r\n[collect the profile]\r\nadb shell cat /data/data/Xamarin.Forms_Performance_Integration/files/.__override__/profile.aot > profile.aot\r\n\r\n[use the profile]\r\nmsbuild /t:Install /p:AndroidAotAdditionalArguments=\"profile-only,profile=profile.aot\" /p:AotAssemblies=true /p:Configuration=Release tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj\r\n```\r\n\r\nThe above example, where we use the profile for startup of the app, resulted in these apk sizes:\r\n```\r\nls -lh bin/TestRelease/Xamarin.Forms_Performance_Integration-Signed-*.apk\r\n-rw-r--r--  1 rodo  staff    38M Dec  7 20:17 bin/TestRelease/Xamarin.Forms_Performance_Integration-Signed-aot.apk\r\n-rw-r--r--  1 rodo  staff    17M Dec  7 20:18 bin/TestRelease/Xamarin.Forms_Performance_Integration-Signed-jit.apk\r\n-rw-r--r--  1 rodo  staff    19M Dec  7 20:12 bin/TestRelease/Xamarin.Forms_Performance_Integration-Signed-profiled-aot.apk\r\n```\r\nThe resulting apk sizes:\r\n\r\nbuild | normal | aot    | profiled aot\r\n--- | ---: | ---: | ---:\r\napk size | 17M     | 38M  | 19M\r\n"},{"Id":"8717595992","Type":"IssuesEvent","CreatedAt":"2018-12-07T17:38:32","Actor":"softlion","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2503","RelatedDescription":"Opened issue \"$(LLVMToolchainPrebuiltRoot) not set to \"android ndk location\" option\" (#2503) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n0. In tools/Options/Xamarin/Android settings/Android NDK location, change the path.\r\n1. Create a \"cross platform\" C++ project (which creates an Android C++ project)\r\n2. Select ARM as target platform\r\n3. Open project settings (properties)\r\n4. Browser to \"C/C++\" / \"Command line\"\r\n5. You will see path like -l \"C:\\Microsoft\\AndroidNDK64\\android-ndk-r15c\\...\"\r\n\r\n### Expected Behavior\r\nthe $(LLVMToolchainPrebuiltRoot) variable should be set to the same path set in the Xamarin options.\r\n\r\n### Actual Behavior\r\nthe $(LLVMToolchainPrebuiltRoot) variable is set to \"C:\\Microsoft\\AndroidNDK64\\android-ndk-r15c\\.\" instead of whatever is set in the Xamarin options.\r\n\r\n### Version Information\r\n```\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.3\r\nVisualStudio.15.Release/15.9.3+28307.145\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Enterprise\r\n\r\nArchitecture Diagrams and Analysis Tools   00369-90000-00000-AA445\r\nMicrosoft Architecture Diagrams and Analysis Tools\r\n\r\nVisual C++ 2017   00369-90000-00000-AA445\r\nMicrosoft Visual C++ 2017\r\n\r\nASP.NET and Web Tools 2017   15.9.04012.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60913.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.9.03024.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2018.3 EAP 7   Build 183.0.20181127.61205-eap07\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nJustDecompilePackage2017 Extension   1.0\r\nJustDecompilePackage2017 Visual Studio Extension Detailed Info\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.13.11-pre (400cfb1)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nNVIDIA CUDA 10.0 Wizards   10.0\r\nWizards to create new NVIDIA CUDA projects and source files.\r\n\r\nNVIDIA Nsight Visual Studio Edition   6.0.0.18227\r\nNVIDIA Nsight Visual Studio Edition provides tools for GPGPU and graphics development.  Copyright © NVIDIA 2010 - 2018.\r\n•Direct3D® and DirectX® are registered trademarks of Microsoft Corporation in the United States and/or other countries.\r\n•Microsoft Detours is used under the Professional license (http://research.microsoft.com/en-us/projects/detours/).\r\n•Gardens Point Parser Generator Copyright 2005 Queensland University of Technology (QUT). All rights reserved.\r\n•NLog Copyright © 2004-2006 Jaroslaw Kowalski (jaak@jkowalski.net)\r\n•IronPython and WPFToolkit used under Microsoft Public License (Ms-PL) and are Copyright © Microsoft Corporation\r\n•Portions of RadControls for WPF © 2010-2011 by Telerik Corporation.  All rights reserved.\r\n•zlib and libpng used under the zlib/libpnc license (http://opensource.org/licenses/Zlib) \r\n•QtSingleApplication Copyright 2013 Digia Plc and/or its subsidiary(-ies).\r\n•Font Awesome Copyright 2018 Fonticons, Inc.\r\n\r\nWarning: This computer program is protected by copyright law and international treaties. Unauthorized reproduction or distribution of this program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law.\r\n\r\nNVIDIA Nsight Visual Studio Edition - CUDA support   6.0.0.0\r\nNVIDIA Nsight Visual Studio Edition - CUDA support provides tools for CUDA development and debugging.\r\n\r\nPowerShell Pro Tools for Visual Studio   1.0\r\nA set of tools for developing and debugging PowerShell scripts and modules in Visual Studio.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPython   15.9.18254.1\r\nProvides IntelliSense, projects, templates, debugging, interactive windows, and other support for Python developers.\r\n\r\nPython - IronPython support   15.9.18254.1\r\nProvides templates and integration for IronPython-based projects.\r\n\r\nPython - Profiling support   15.9.18254.1\r\nProfiling support for Python projects.\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResXManager   1.29.1315.0\r\nManage localization of all ResX-Based resources in one place. Shows all resources of a solution and let's you edit the strings and their localizations in a well-arranged data grid.\r\n\r\nSQL Server Data Tools   15.1.61810.11040\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.9.20918.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   15.0.28107.00\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual C++ for Cross Platform Mobile Development (iOS)   15.0.28016.00\r\nVisual C++ for Cross Platform Mobile Development (iOS)\r\n\r\nVisual C++ for Linux Development   1.0.9.28218\r\nVisual C++ for Linux Development\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28301.59\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamaridea.VisualStudioPlugin   1.0\r\nVS + Xamarin + IDEA = Love\r\n\r\nXamarin   4.12.3.73 (d15-9@20b35b881)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.5 (6b9f32067)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.127 (e975299)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.0.38 (HEAD/61d16aa23)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.11 (5ef73d3)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n"},{"Id":"8717219401","Type":"PullRequestEvent","CreatedAt":"2018-12-07T16:31:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2502","RelatedDescription":"Merged pull request \"[build] Makefile should run /t:Restore after dependencies.csproj\" (#2502) at xamarin/xamarin-android","RelatedBody":"We want the Mono upgrade to run *before* we run `/t:Restore`.\r\n\r\nIn one case downstream in monodroid, we encountered:\r\n\r\n    error MSB4244: The SDK resolver assembly \"/Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/SdkResolvers/Microsoft.Build.NuGetSdkResolver/..\\..\\Microsoft.Build.NuGetSdkResolver.dll\" could not be loaded. Invalid Image\r\n\r\nThis error normally means the file didn't exist, although it *should*.\r\nThat file was present in my Mono 5.16 installation."},{"Id":"8717057151","Type":"PullRequestEvent","CreatedAt":"2018-12-07T16:04:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2502","RelatedDescription":"Opened pull request \"[build] Makefile should run /t:Restore after dependencies.csproj\" (#2502) at xamarin/xamarin-android","RelatedBody":"We want the Mono upgrade to run *before* we run `/t:Restore`.\r\n\r\nIn one case downstream in monodroid, we encountered:\r\n\r\n    error MSB4244: The SDK resolver assembly \"/Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/SdkResolvers/Microsoft.Build.NuGetSdkResolver/..\\..\\Microsoft.Build.NuGetSdkResolver.dll\" could not be loaded. Invalid Image\r\n\r\nThis error normally means the file didn't exist, although it *should*.\r\nThat file was present in my Mono 5.16 installation."},{"Id":"8716839744","Type":"IssuesEvent","CreatedAt":"2018-12-07T15:30:33","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2501","RelatedDescription":"Opened issue \"Encountering new ClassNotFoundException when attempting to inflate certain layouts\" (#2501) at xamarin/xamarin-android","RelatedBody":"I'm now encountering a startup crash when running a handful of projects on device. This error is not reproducible on 15.9 or earlier dev16 previews.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download and run the following project:\r\nhttps://github.com/xamarin/monodroid-samples/tree/master/android-o/EmojiCompat\r\n\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nLayout XML files which specify a fully qualified class name to a layout in a .cs file should inflate successfully.\r\n\r\n### Actual Behavior\r\n```\r\n2-07 10:27:07.762 16463 16463 E AndroidRuntime: Caused by: android.view.InflateException: Binary XML file line #1: Binary XML file line #1: Error inflating class EmojiCompatSample.CustomTextView\r\n12-07 10:27:07.762 16463 16463 E AndroidRuntime: Caused by: android.view.InflateException: Binary XML file line #1: Error inflating class EmojiCompatSample.CustomTextView\r\n12-07 10:27:07.762 16463 16463 E AndroidRuntime: Caused by: java.lang.ClassNotFoundException: Didn't find class \"EmojiCompatSample.CustomTextView\" on path: DexPathList[[zip file \"/system/framework/org.apache.http.legacy.boot.jar\", zip file \"/data/app/com.xamarin.EmojiCompat-e5BLLTVnZZzpdFtPjSKlXA==/base.apk\"],nativeLibraryDirectories=[/data/app/com.xamarin.EmojiCompat-e5BLLTVnZZzpdFtPjSKlXA==/lib/arm64, /system/fake-libs64, /data/app/com.xamarin.EmojiCompat-e5BLLTVnZZzpdFtPjSKlXA==/base.apk!/lib/arm64-v8a, /system/lib64]]\r\n12-07 10:27:07.762 16463 16463 E AndroidRuntime:        at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:134)\r\n```\r\n\r\n### Version Information\r\nMicrosoft Visual Studio Enterprise 2019 [28406.54.d16.0]\r\nXamarin.Android SDK   9.1.199.32 (HEAD/2e6d2a8d)\r\n    Mono: mono/mono/2018-06@b63e5378e38\r\n    Java.Interop: xamarin/java.interop/master@24e7725\r\n    LibZipSharp: grendello/LibZipSharp/master@de1712c\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    MXE: xamarin/mxe/xamarin@b9cbb535\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.25.2@4ea4c69\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-0-p2@9e78d6e\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttps://gist.github.com/pjcollins/06f2177156609585b506f406522f5a8c\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8721758529","Type":"IssuesEvent","CreatedAt":"2018-12-09T03:34:12","Actor":"Liam2349","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4689","RelatedDescription":"Opened issue \"[Android] StackLayout.LayoutChildren null ref XF 3.4\" (#4689) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\nFirst time reporting a bug. I hope this is an acceptable format. I have provided as much detail as I can, with a video of the issue, with timestamps, and a proposed solution at the end of this post. I use my own private source control server for my projects, so I'm also new to GitHub.\r\n\r\n### Description\r\nWhen modifying a StackLayout, a null reference exception is raised in Xamarin.Forms.Core.StackLayout.cs:66. The Plots and Requests properties of the layoutInformationCopy (and _layoutInformation) are null. This occurs on Android, when the app is minimized. I don't think this exception has been raised when the app is maximized. I guess it may have something to do with the activity being suspended.\r\n\r\nI determined this by forking the Xamarin.Forms source and debugging it, thanks to this very helpful post by Jon Goldberger: https://blog.xamarin.com/debugging-xamarin-forms/\r\n\r\nI followed his instructions, and used my own fork to figure out the above crash point. Prior to following the guide, I only knew that there was a null ref in the StackLayout.LayoutChildren method.\r\n\r\nLooking through the code, you may wonder how these properties can be null, because in my testing, CalculateLayout is ALWAYS called before this exception is raised, and CalculateLayout sets these properties to non-null. I have found that if I set a conditional breakpoint before the call to CalculateLayout, for when _layoutInformation.Plots is null, and if I then F11 into CalculateLayout and F10 over everything in there, then the Plots and Requests properties are ALWAYS non-null. However, if I hit that break point, and then F5 over the method, there is a very good chance that the properties will still be null after executing CalculateLayout, leading to a null ref on line 66.\r\n\r\nPerhaps you guys who know more about the framework will know more about how this could happen. I've not been looking at the code for very long, but I cannot see how these properties could be null. It's like there's a glitch at a deeper level.\r\n\r\nAs it's such an odd issue, I decided to make a video. Some parts are sped up, and some are slowed down, to shorten the video and make some points more clear. I also blurred a few things for privacy: https://www.youtube.com/watch?v=88mGjcyWvWg&feature=youtu.be\r\n\r\nIn the video, you can see my desktop, running VS 2017, and the WPF version of my Clipboard Everywhere app. This WPF version doesn't show the problem, but is used to demonstrate the problem on Android by sending a file to my phone, one of my new features I wanted to release soon. WPF app sends a file to the Android app, which is currently being debugged on my Note 9. The app loads, initializes, and then I minimize it. I then send the file from WPF, and if I F5 over the CalculateLayout method, the Plots and Requests properties have a good chance to be null, crashing the app. When the file is sent, this causes the layout to update. It seems the issue is close to the visibility of child items in the main StackLayout for the page. The points where the crash occur are near where these child items are made visible and invisible, but I'm not sure how to narrow it down further.\r\n\r\n**Timestamps:** \r\n* 0 to 00:23, demonstrating the null ref, I actually didn't expect this part to crash. It's a bit unstable.\r\n* 00:28 to 02:07, demonstrating that, when stepping through the method, the Plots and Requests properties are never null\r\n* 02:10 to end, demonstrating that the properties can be null when skipping the method with F5\r\n\r\nThe \"child\" always seems to be a StackLayout containing two children, which are both custom controls I made, however that's only what \"child\" refers to because it can't progress through the loop, due to the null properties. Here is the full Layout of the page. It's hosted in a TabbedPage, inside a NavigationPage: https://pastebin.com/YyrBMywr\r\n\r\nThe StackLayout with the two children is the one that's very near the top, with Orientation=\"Horizontal\". I use the CustomEntry and ImageButton (my own version, made it a bit back, it's actually not displaying images but FontAwesome icons), frequently through my apps, and haven't seen this issue anywhere else.\r\n\r\nThe layout_SendingFiles, scrollView_CurrentPath and layout_Files all contain dynamic content. Controls are added at runtime but I don't delete them, I found it better performance-wise to cache them for re-use, so they have their IsVisible set to False when not in use. When being used again, I set their properties as appropriate for the new content they are displaying. However, I have to manually set the heights of each control in the Files layouts, and the heights of the Files layouts themselves, each time the layouts are updated, as the controls seem to inexplicably double in height every time I re-use them. Perhaps this relates to a different bug in the framework. I've had to redesign a layout to avoid that issue before.\r\n\r\n### Steps to Reproduce\r\nI can't share my code, and I'm not sure if I will be able to make another project to reproduce this issue. I don't have time travel debugging, which I feel could be useful here, so I'm not sure how to investigate this further.\r\n\r\n### Expected Behavior\r\nNot crashing.\r\n\r\n### Actual Behavior\r\nCrashing due to null ref\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4\r\n- Last known good version: Unknown. Looks like StackLayout is not changed very frequently.\r\n- IDE: VS 15.9.2\r\n- Platform Target Frameworks:\r\n  - Android: v9, API 28\r\n- Android Support Library Version: v27.0.2.1\r\n- Nuget Packages: Lots. Can I get a list somewhere from VS?\r\n- Affected Devices: Galaxy Note 9 Exynos, unsure if it would happen on others. I would like to test the emulators but they don't use bridged networking so the particular software feature I've developed that raises this problem doesn't work as the emulators don't get their own IP.\r\n\r\n### Screenshots\r\nThis image shows an attempted fix, by including a null check, but the check passed and the null got through.\r\n\r\nThe three breakpoints are conditionals for when _layoutInformation.Plots is null. The first was hit, the second two were not. Looks like Plots was set to null after leaving the else block.\r\n<img width=\"935\" alt=\"stacklayoutbug_nullcheckpassed\" src=\"https://user-images.githubusercontent.com/18562068/49692473-ad1cc000-fb53-11e8-984f-fb1ad63acacb.PNG\">\r\n\r\n### Proposed Solution\r\nThe best solution I have found so far is to try/catch the LayoutChildIntoBoundingRegion method. This seems to work without any negative effects that I can see, so far. It doesn't seem to cause any layout issues. Here are the changes I would like to propose for the StackLayout.LayoutChildren method: https://github.com/Liam2349/Xamarin.Forms/commit/4fe7f9215ae65b1ea65aaf8303464fd600a4595c\r\n\r\nIn addition to my try/catch, I removed the layoutInformationCopy variable, as it doesn't seem to be a copy. Perhaps someone mixed up their reference and value-types when writing that in?\r\n\r\nIt's 3AM here in the UK, and I've been at this for a few hours now, so I'll see how it goes tomorrow. I look forward to your responses. Please let me know if I've missed anything.\r\n\r\nThanks for reading and I look forward to your responses."},{"Id":"8721597956","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:08","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4667","RelatedDescription":"Closed issue \"Starting on XF 3.3, build tasks started using net461 which breaks VS\" (#4667) at xamarin/Xamarin.Forms","RelatedBody":"Build tasks that run in VS in the csproj project system (i.e. our Android and iOS project systems) *must* target net46 and no higher. \r\n\r\nBackground: https://github.com/dotnet/project-system/blob/master/docs/compatibility.md#design-time-builds-are-run-out-of-process and https://github.com/github/VisualStudio/issues/1849#issuecomment-411570902\r\n\r\nThe symptoms manifest like this: https://gitter.im/xamarin/Xamarin.Forms?at=5c067bb943c68b3727faa983.\r\n\r\nThis is a regression."},{"Id":"8721597950","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:08","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4592","RelatedDescription":"Closed issue \"[Shell] compile the DataTemplateExtension\" (#4592) at xamarin/Xamarin.Forms","RelatedBody":"the `{DataTemplate}` markup extension is not compiled by XamlC, and could be to:\r\n- catch exception at compile time\r\n- speed up runtime"},{"Id":"8721597946","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:08","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4382","RelatedDescription":"Closed issue \"[Shell] Crash when switching Bottom Navigation Tabs too fast\" (#4382) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n```\r\n11-12 14:14:39.915 E/mono    ( 4794): Unhandled Exception:\r\n11-12 14:14:39.915 E/mono    ( 4794): System.ObjectDisposedException: Cannot access a disposed object.\r\n11-12 14:14:39.915 E/mono    ( 4794): Object name: 'Xamarin.Forms.Platform.Android.ColorChangeRevealDrawable'.\r\n11-12 14:14:39.915 E/mono    ( 4794):   at (wrapper dynamic-method) System.Object.25(intptr,intptr,intptr)\r\n11-12 14:14:39.915 E/mono-rt ( 4794): [ERROR] FATAL UNHANDLED EXCEPTION: System.ObjectDisposedException: Cannot access a disposed object.\r\n11-12 14:14:39.915 E/mono-rt ( 4794): Object name: 'Xamarin.Forms.Platform.Android.ColorChangeRevealDrawable'.\r\n11-12 14:14:39.915 E/mono-rt ( 4794):   at (wrapper dynamic-method) System.Object.25(intptr,intptr,intptr)\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n1.  pull down shell-3.4.0\r\n2. Run the Shell Control Gallery project \r\n3. click between the bottom tabs quickly\r\n\r\n### Expected Behavior\r\nNothing should crash\r\n\r\n### Actual Behavior\r\nIt Crashes\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n- Android Support Library Version: v27 and v28\r\n\r\n"},{"Id":"8721597942","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:08","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4625","RelatedDescription":"Closed issue \"[Shell] statically expose the current shell\" (#4625) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nGetting a reference to the current shell is tedious and repetitive. As the shell has to be the App.MainPage, we could expose a static version of `GoToAsync()` that tries to get the shell from there. If the shell is not found, an exception will be thrown.\r\n\r\nIf the user want to navigate on a shell that's not currently App.MainPage (multiple shell app, anyone ?) he can still keep a reference to that shell and use the non-static GoToAsync\r\n\r\nthis is required for #4594\r\n\r\n## API Changes\r\n\r\n```csharp\r\npublic Task static Shell.GoToAsync(ShellNavigationState state, bool animate = true);\r\n```\r\n## Intended Use Case\r\n\r\nreplace this usage\r\n```csharp\r\nvar shell = Application.Current.MainPage as Shell;\r\nawait shell.GoToAsync(\"app:///s/about?welcome=you\");\r\n```\r\n\r\nby\r\n```csharp\r\nawait Shell.GoToAsync(\"app:///s/about?welcome=you\");\r\n```"},{"Id":"8721597938","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:07","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4584","RelatedDescription":"Closed issue \"ImageCell ImageSource Issue: Images Not Showing After Latest Update (3.4.0.1008975).\" (#4584) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nThe issue that is occurring in my project is very similar to the issue featured in the link below (Not my SO post, but as I said, the conditions are very similar. I cannot post my exact project, but if necessary I can create a whole new project to re-create the issue and post it here):\r\n\r\nhttps://stackoverflow.com/questions/53337250/xamarin-forms-imagecell-not-displaying-the-image\r\n\r\nNo changes were made to my code or the files except for upgrading Visual Studio from 15.9.2 to 15.9.3 and upgrading Xamarin.Forms from 3.3.0.967583 to 3.4.0.1008975. Rolling back to Xamarin.Forms 3.3.0.967583 remedied the issue, alluding to an issue with 3.4.0.1008975.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Have a Xamarin.Forms 3.3.0.967583 project with a ListView with ItemSource binding, made of up ImageCell components with text and ImageSource properties that are filled using bindings. My ListView is in the Master page of a MasterDetailPage. Opening the Master page shows the ListView filled with ImageCell objects that have images for icons and text.\r\n2. Upgrade to Xamarin.Forms release 3.4.0.1008975.\r\n3. Icon images in the ImageCells no longer appear in the ListView. The text does still appear however.\r\n\r\n### Expected Behavior\r\n\r\nThe Images in the ImageCells (in the ListView) should appear.\r\n\r\n### Actual Behavior\r\n\r\nThe Images in the ImageCells (in the ListView) do not appear any longer.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1008975\r\n- Last known good version:  3.3.0.967583\r\n- IDE: Microsoft Visual Studio Professional 2017; Version 15.9.3\r\n- Platform Target Frameworks:\r\n  - Android: 8.1\r\n  - iOS: Not Tested\r\n  - UWP: Not Tested\r\n- Nuget Packages:\r\n- Affected Devices: Android Emulators in Visual Studio\r\n\r\n### Screenshots\r\n\r\nSee StackOverflow Link\r\n\r\n### Reproduction Link\r\n\r\nSee StackOverflow Link\r\n"},{"Id":"8721597934","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:07","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4597","RelatedDescription":"Closed issue \"[Android] With the introduction of ImageButton in 3.4.0, the behaviour of setting Source to null on an Image has changed in Android\" (#4597) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI cannot clear an Image by setting the source to null. \r\nThis behavior has changed in 3.4.0 with the introduction of ImageButton.\r\n\r\nThis only affects Android.\r\n\r\nThe issue is probably causes by this change in Xamarin.Forms.Platform.Android/Extensions/ImageViewExtensions.cs\r\n\r\n![image](https://user-images.githubusercontent.com/1906639/49288355-cd3be780-f4a0-11e8-8b1a-663f7f8b582f.png)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create an image view\r\n2. Set source to an image resource\r\n3. Set source back to null\r\n\r\n### Expected Behavior\r\nThe Image is goes back to its initial state without an image to show.\r\n\r\n### Actual Behavior\r\nThe old image is still visible.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0\r\n- Last known good version: 3.1\r\n"},{"Id":"8721597928","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:07","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4494","RelatedDescription":"Closed issue \"DatePicker inside TableView raises popup dialogs unexpectedly\" (#4494) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhen used inside TableView's ViewCell, a DatePicker will sometimes raise its pop up dialog unexpectedly after its value is changed.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the provided sample app in the Android emulator.\r\n2. Change the start date to 11/26.\r\n3. Change the end date to 11/29.\r\n\r\n### Expected Behavior\r\nNo further dialogs pop up after user activity has ceased.\r\n\r\n### Actual Behavior\r\nAfter setting the end date, two DatePicker dialogs pop up again without user intervention.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1008975\r\n- Last known good version: Unknown\r\n- IDE: VS 2017 15.9.2\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n- Android Support Library Version: 27.0.2.1\r\n- Nuget Packages: None\r\n- Affected Devices: N/A\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n[DatePicker.zip](https://github.com/xamarin/Xamarin.Forms/files/2602868/DatePicker.zip)\r\n"},{"Id":"8721597926","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:07","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4187","RelatedDescription":"Closed issue \"[Android] Picker list shows up, when focus is set on other controls. \" (#4187) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nAndroid issue. \r\nXamarin.Form 3.3.0.912540 issue. Works ok in 3.2.0.871581\r\n\r\nWhen setting the focus on some other control, picker list shows up. when picker and other controls are inside ListVew.DataTemplate.ViewCell.\r\n[App2.zip](https://github.com/xamarin/Xamarin.Forms/files/2508026/App2.zip)\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the attached sample solution\r\n2. Select a value from Picker\r\n3. It works correctly\r\n4. Set focus on Entry\r\n5. The picker list shows up\r\n6. That is incorrect \r\n\r\n### Expected Behavior\r\n\r\nwhen setting the focus on the entry, picker list should not show up.\r\n\r\n### Actual Behavior\r\n\r\nwhen setting the focus on the entry, picker list shows up.\r\n\r\n### Basic Information\r\n\r\n- Versions with issue: Xamarin.Form 3.3.0.912540, 3.3.0.967583, 3.4.0.1008975\r\n- Last known good version: Xamarin.Form 3.2.0.871581\r\n- IDE: 15.8.7\r\n- Platform Target Frameworks: \r\n  - Android: 9 \r\n\r\n### Sample\r\n\r\n[App2.zip](https://github.com/xamarin/Xamarin.Forms/files/2508028/App2.zip)\r\n"},{"Id":"8721597920","Type":"IssuesEvent","CreatedAt":"2018-12-09T01:17:07","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4318","RelatedDescription":"Closed issue \"[Android] Pop Up a picker when changing the page of CarouselPage\" (#4318) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen changed page of `CarouselPage` pop-ups `Picker` control as if he was pressed.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create CarouselPage \r\n2.  Add 2 pages with Picker control\r\n3.  Focus on a `Picker`\r\n4.  Change page\r\n\r\n### Expected Behavior\r\n\r\nPicker don't pops up\r\n\r\n### Actual Behavior\r\n\r\nPicker pops up\r\n\r\n### Basic Information\r\n\r\n- Version with issue: master branch\r\n- Last known good version: -\r\n- IDE: Windows Visual Studio 2017 15.8.8\r\n\r\n### Screencast\r\n\r\nhttp://recordit.co/FkHj45S1pK\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/paymicro/Xamarin.Forms/commit/1d1d01a89e0b78fd47010ad18b7ce346cca6897b\r\n"},{"Id":"8721545672","Type":"PullRequestEvent","CreatedAt":"2018-12-09T00:31:54","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4672","RelatedDescription":"Merged pull request \"[build] add a Directory.Build.props\" (#4672) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCopying `<PropertyGroup>`s on (almost) every .csproj, and get the\r\nrelative paths just right is tedious. Starting msbuild 15 (vs2017)\r\nwe can use a Directory.Build.props (and Directory.Build.targets)\r\nso I see no reason why we shouldn't.\r\n\r\nsee https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2017\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n/\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n/\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8721089173","Type":"PullRequestEvent","CreatedAt":"2018-12-08T19:19:38","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4688","RelatedDescription":"Opened pull request \"[iOS] Update cell size estimates after empty data source\" (#4688) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nNormally the CollectionView on iOS uses the first available cell as a prototype to determine the estimated size (or exact size) of subsequent cells. But if there is no first available cell when the CollectionView first appears, the estimates remain zero and new cells are added, but are not visible. \r\n\r\nThese changes allow the CollectionView to use the first available cell even if there is no data when the CollectionView first appears.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4600\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nAdded an automated test; for manual testing, in Control Gallery navigate to CollectionView Gallery -> Observable Collection Galleries -> Add/Remove Items (Grid, Initially Empty) and click the Insert button; an item should appear. Click the button again; another item should appear, and both items should be the same size.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8721044118","Type":"PullRequestEvent","CreatedAt":"2018-12-08T18:51:57","Actor":"DavidRoqueni","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4687","RelatedDescription":"Opened pull request \"GH-4686 Updated README to reflect correct name\" (#4687) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description of Change ###\r\n\r\nCorrected typo to reflect the correct Android name.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4686\r\n\r\n### API Changes ###\r\n\r\n None\r\n"},{"Id":"8721035855","Type":"IssuesEvent","CreatedAt":"2018-12-08T18:46:53","Actor":"DavidRoqueni","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4686","RelatedDescription":"Opened issue \"Update Readme\" (#4686) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nUpdate README to show the correct Android. Currently shows Android 7.1 instead of Android 7.0 for API 24."},{"Id":"8720920274","Type":"IssuesEvent","CreatedAt":"2018-12-08T17:37:07","Actor":"ysmoradi","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4685","RelatedDescription":"Opened issue \"Drop .net standard 1.0 target framework \" (#4685) at xamarin/Xamarin.Forms","RelatedBody":"Xamarin Forms 3.0 requires us to have .NET standard 2.0 supported runtime such as UWP16299, .NET 461 etc which is absolutely fine.\r\n\r\nBut I can't understand why csproj files have target framework for .net standard 1.0!\r\nI was adding [SeriazliableAttribute] to Xamarin Forms exception classes based on the following recommendations:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/creating-and-throwing-exceptions#defining-exception-classes\r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/code-quality/ca1064-exceptions-should-be-public?view=vs-2017\r\n\r\nBut I wasn't able to do that. Because [Serializable] attribute is added on .net standard 2.0 and it's not supported on .net standard 1.0\r\n\r\nWhen a project targets .net standard 2.0, it aims to use its cool features, but it's not easily possible in Xamarin Forms's current structure.\r\n\r\nI'm getting serializable exception instead of XamlParseException regularly on my projects and it's annoying )-:\r\n\r\nThanks in advance."}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8721366858","Type":"PullRequestEvent","CreatedAt":"2018-12-08T22:18:06","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5244","RelatedDescription":"Opened pull request \"[Foundation] Make sure we use the cookies from the cookie storage. Fixes #5148\" (#5244) at xamarin/xamarin-macios","RelatedBody":"The response object does not have all the cookie values, instead we must\r\nuse the cookie storage which can be used to retrieve ALL the cookies\r\nfor a task.\r\n\r\nThe header value has to be created manually because the native objects\r\ndo not expose a valid way to get the header. Tests have been added to\r\nensure we return the same as the managed client.\r\n\r\nFixes https://github.com/xamarin/xamarin-macios/issues/5148"},{"Id":"8719934515","Type":"IssuesEvent","CreatedAt":"2018-12-08T06:25:33","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4791","RelatedDescription":"Closed issue \"xamarin forms iOS LaunchScreen.storyboard ImageView's source is not being set\" (#4791) at xamarin/xamarin-macios","RelatedBody":"_From @jitendrajadav on September 12, 2018 8:19_\n\n<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nXamarin forms iOS LaunchScreen.storyboard ImageView's source is not being set\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin forms Project \r\n2. Open LaunchScreen.storyboard\r\n3. Set ImageView's source any image not being set\r\n\r\n### Expected Behavior\r\nIt has to set and show in design surface\r\n### Actual Behavior\r\nnot able to show in design surface as well run time\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n-Microsoft Visual Studio Professional 2017 \r\nVersion 15.8.4\r\nVisualStudio.15.Release/15.8.4+28010.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nVisual C++ 2017   00369-60000-00001-AA420\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.13.10627.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.8.05085.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60618.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.8.05023.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   15.9.02009.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   2.9.0-beta8-63208-01\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCrystal Reports for .NET Framework   \r\nCrystal Reports for .NET Framework\r\n\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nGitHub.VisualStudio   2.5.5.3913\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10730.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMLGen Package Extension   1.0\r\nMLGen Package Visual Studio Extension Detailed Info\r\n\r\nMono Debugging for Visual Studio   4.11.8-pre (009db7d)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61808.07020\r\nMicrosoft SQL Server Data Tools\r\n\r\nSQL Server Reporting Services   14.0.1016.285\r\nMicrosoft SQL Server Reporting Services Designers \r\nVersion 14.0.1016.285\r\n\r\nTypeScript Tools   15.8.20801.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.9.0-beta8-63208-01\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: c55dd2c3d618eb93a8d16e503947342b1fa93556.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28010.00\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWindows Template Studio   2.3.18212.1\r\nWindows Template Studio quickly builds a UWP app, using a wizard-based UI to turn your needs into a foundation of Windows 10 patterns and best practices.\r\n\r\nXamarin   4.11.0.756 (d15-8@b66ff7180)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.14.221 (a73ca07f7)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Live Reload   0.4.0 (remotes/origin/dev@75526a0)\r\nProvides live reload capabilities for Xamarin XAML.\r\n\r\nXamarin Templates   1.1.116 (9619170)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.0.0.19 (HEAD/a8a3b0ec7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.14.0.13 (373c313)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n<img width=\"960\" alt=\"stroy\" src=\"https://user-images.githubusercontent.com/1029026/45411697-82c18080-b692-11e8-9492-22bf14494b11.png\">\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#3764_\n\n> VS bug [#682885](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/682885)"},{"Id":"8718107195","Type":"PullRequestEvent","CreatedAt":"2018-12-07T19:20:32","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5238","RelatedDescription":"Merged pull request \"[AppKit] Adds some [ThreadSafe] to reported cases\" (#5238) at xamarin/xamarin-macios","RelatedBody":"Fixes xamarin/xamarin-macios#5233\r\nFixes xamarin/xamarin-macios#5234\r\nFixes xamarin/xamarin-macios#5235\r\n\r\nThe following selectors are thread safe:\r\n\r\n* NSFont fontWithName:size:\r\n* NSBezierPath bezierPathWithOvalInRect:\r\n* NSString drawAtPoint:withAttributes:\r\n\r\nFixed reported cases and created an enhancement request for us https://github.com/xamarin/xamarin-macios/issues/5237 "},{"Id":"8718107181","Type":"IssuesEvent","CreatedAt":"2018-12-07T19:20:32","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5235","RelatedDescription":"Closed issue \"NSStringDrawing.DrawAtPoint checks for UI thread but shouldn't\" (#5235) at xamarin/xamarin-macios","RelatedBody":"Like #5234, NSGraphics functionality works on background threads.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a background thread\r\n2. `\"Hello World\".DrawAtPoint (new CGPoint (0, 0), attributes);`\r\n\r\n### Expected Behavior\r\n\r\nText is drawn.\r\n\r\n### Actual Behavior\r\n\r\nThread consistency exception is thrown.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: d15-9\r\nBuild date: 2018-11-21 00:03:24-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n\r\n```\r\n"},{"Id":"8718107172","Type":"IssuesEvent","CreatedAt":"2018-12-07T19:20:32","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5234","RelatedDescription":"Closed issue \"NSBezierPath should not check for UI thread\" (#5234) at xamarin/xamarin-macios","RelatedBody":"NSBezierPaths are used throughout Cocoa for rendering on background threads in addition to foreground. Currently they throw when used in a background thread. This is wrong.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a background thread\r\n2. `NSBezierPath.FromOvalInRect (new CGRect (0, 0, 100, 100))`\r\n\r\n### Expected Behavior\r\n\r\nPath is created.\r\n\r\n### Actual Behavior\r\n\r\nUI thread consistency exception is thrown.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: d15-9\r\nBuild date: 2018-11-21 00:03:24-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n```\r\n"},{"Id":"8718107161","Type":"IssuesEvent","CreatedAt":"2018-12-07T19:20:32","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5233","RelatedDescription":"Closed issue \"NSFont FromFontName should not check for UI thread\" (#5233) at xamarin/xamarin-macios","RelatedBody":"NSFont FromFontName/fontWithName:size: should not check for the UI thread since NSFonts are used throughout the APIs for non-UI tasks. Such things include text rendering with NSGraphics, SceneKit, and just general font playing around.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a background thread\r\n2. Call NSFont.FromFontName (\"Helvetica\", 10);\r\n\r\n### Expected Behavior\r\n\r\nEverything is OK, fonts are allowed on background threads.\r\n\r\n### Actual Behavior\r\n\r\nEnsureUIThread throws an exception\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: d15-9\r\nBuild date: 2018-11-21 00:03:24-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":131,"FavoriteCount":67,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":17,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":96,"FavoriteCount":52,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":44,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":180,"FavoriteCount":104,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":17,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":60,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":30,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":20,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":33,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":32,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":111,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":56,"RawContent":null}]}},"RunOn":"2018-12-09T05:31:15.0589729Z","RunDurationInMilliseconds":3911}