{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:15:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Today, we are making the fourth preview of Entity Framework Core 3.0 available on NuGet, alongside .NET Core 3.0 Preview 4 and ASP.NET Core 3.0 Preview 4. We encourage you to install this preview to...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-4/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 4","PublishedOn":"2019-04-18T22:13:01+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 4. It includes a chart control for Windows Forms, HTTP/2 support, GC updates to use less memory, support for CPU limits with Docker, the addition of...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-4/","RawContent":null},{"Title":"Announcing the .NET Framework 4.8","PublishedOn":"2019-04-18T20:12:27+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"We are thrilled to announce the release of the .NET Framework 4.8 today. It’s included in the Windows 10 May 2019 Update. .NET Framework 4.8 is also available on Windows 7+ and Windows Server 2008...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/","RawContent":null},{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9524552406","Type":"PullRequestEvent","CreatedAt":"2019-04-28T04:24:47","Actor":"mjsabby","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24291","RelatedDescription":"Opened pull request \"Add option to only notify profiler of LOH allocations\" (#24291) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/24217."},{"Id":"9524267824","Type":"IssuesEvent","CreatedAt":"2019-04-28T01:29:32","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24290","RelatedDescription":"Opened issue \"[arm64] Test failed: System.Xml.Tests.CNameTableTestModule.RunTests\" (#24290) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/32/\r\n\r\n**Failed tests:**\r\nSystem.Xml.Tests.CNameTableTestModule.RunTests\r\n\r\n**Log:**\r\n```\r\nSystem.Xml.Tests.CNameTableTestModule.RunTests(testCase: Add an existing atomized string (with Max string for test: 1-2M), valid offset and valid length) [FAIL]\r\n      System.Xml.XmlException : The '.' character, hexadecimal value 0x00, cannot be included in a name. Line 2, position 717181.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2746,0): at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2725,0): at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2694,0): at System.Xml.XmlTextReaderImpl.Throw(Int32 pos, String res, String[] args)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(4491,0): at System.Xml.XmlTextReaderImpl.ParseElement()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(4240,0): at System.Xml.XmlTextReaderImpl.ParseElementContent()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(1202,0): at System.Xml.XmlTextReaderImpl.Read()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\tests\\Readers\\NameTable\\XmlNameTable.cs(779,0): at System.Xml.Tests.TCRecordNameTableAdd.Variation_8()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\cvariation.cs(77,0): at OLEDB.Test.ModuleCore.CVariation.Execute()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\ctestcase.cs(132,0): at OLEDB.Test.ModuleCore.CTestCase.<>c__DisplayClass7_1.<TestCases>b__0()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\XunitTestCase.cs(34,0): at OLEDB.Test.ModuleCore.XunitTestCase.Run()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\tests\\Readers\\NameTable\\CNameTableTestModule.cs(16,0): at System.Xml.Tests.CNameTableTestModule.RunTests(XunitTestCase testCase)\r\n```"},{"Id":"9524074853","Type":"PullRequestEvent","CreatedAt":"2019-04-27T23:10:32","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24289","RelatedDescription":"Opened pull request \"Resolves an assert around Sse41.ConvertToVector128Int* and Avx2.ConvertToVector256Int*\" (#24289) at dotnet/coreclr","RelatedBody":"This resolves an issue with `Sse41.ConvertToVector128Int*` and `Avx2.ConvertToVector256Int*` where the new overloads that took a pointer were not being handled correctly.\r\n\r\nIt also adds tests covering the new overloads as it looks like I missed them in the test cleanup PR."},{"Id":"9523904399","Type":"PullRequestEvent","CreatedAt":"2019-04-27T21:21:09","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24286","RelatedDescription":"Merged pull request \"Add missing check for UTF-16 low surrogate char at start of buffer\" (#24286) at dotnet/coreclr","RelatedBody":"(Found by the fuzzing run. Regression in Preview 5.)\r\n\r\nThe method `Encoding.UTF8.GetByteCount(chars)` can sometimes return an incorrect value if __all__ of the following conditions hold:\r\n\r\n* The first character of the UTF-16 input string must be a standalone low surrogate code unit, or all characters in the string before this standalone low surrogate code unit must have been ASCII characters. (There are other variations on this pattern, but this is the easiest way to trigger the bug.)\r\n* Including this standalone UTF-16 low surrogate code unit, enough data remains in the input string to fill a `Vector<ushort>`.\r\n* A custom replacement fallback mechanism has been set on the `UTF8Encoding` instance.\r\n* SSE2 is not available, perhaps because the application has been precompiled using crossgen or because the current arch is not x86-based.\r\n\r\nThe easiest way to repro the issue is to run the below console application with the environment variable `COMPLUS_ENABLESSE2=0` set.\r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n{\r\n    var encoding = Encoding.GetEncoding(\"utf-8\", new EncoderReplacementFallback(\"BAD!\"), DecoderFallback.ExceptionFallback);\r\n    char[] chars = new char[Vector<ushort>.Count];\r\n    chars[0] = '\\uD800';\r\n    Console.WriteLine(encoding.GetByteCount(chars));    // outputs '11', this is correct\r\n\r\n    chars[0] = '\\uDC00';\r\n    Console.WriteLine(encoding.GetByteCount(chars));    // outputs '10', should be '11'\r\n    return;\r\n}\r\n```\r\n\r\nThis is very similar to https://github.com/dotnet/coreclr/pull/24235 in terms of how it affects real-world applications. First, the bug manifests only in the \"count the number of output bytes\" step of the `GetBytes` method. The actual transcoding operation (where the output array is populated) does not have the same bug.\r\n\r\nSecond, the bug does not manifest unless the fallback mechanism has been replaced on the `UTF8Encoding` instance. The reason for this is that the byte counting step incorrectly reports that the invalid standalone UTF-16 surrogate code unit `U+DC00` would fall into the range of scalar values which requires 3 output UTF-8 bytes (`U+0800..U+FFFF`). Since the default replacement mechanism is to replace standalone surrogate code units with the replacement character `U+FFFD` - which is already 3 UTF-8 bytes - the count ends up being correct anyway.\r\n\r\nThird, the input must already be malformed in a very particular fashion. It's extraordinarily difficult for malformed UTF-16 data to make its way into an application using Framework-provided APIs via a networking layer. An app running as a network-facing service would need to go out of its way to allow malformed input to make its way into the system, and in doing so they've almost certainly introduced other security vulnerabilites into the app. (It may be more viable to send malformed input via RPC to an app running on the same machine.)\r\n\r\nFinally, the application must be targeting ARM, or the environment variable which disables SSE2 intrinsics must have been set, or the application must be using crossgen precompilation (which would disable hardware intrinsics entirely).\r\n\r\nFor the above reasons I'm not pushing for this to be cherry-picked into the Preview 5 branch."},{"Id":"9523757250","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:01:11","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24261","RelatedDescription":"Merged pull request \"Fix optAssertionProp_Update.\" (#24261) at dotnet/coreclr","RelatedBody":"736291405a: Add few comments and format `gtGetThisArg`.\r\n\r\n332bd2ec8a: Change `gtFindLink` to return the parent in addition to the link.\r\n\r\n6418fcf88c: Fix parent's links in `fgArgInfo` in optAssertionProp_Update. <- **this change fixes the issue.**\r\n\r\ne5decb744c: Add a repro test.\r\n\r\n0bf52e4304: Use `ReplaceOperand`.\r\n\r\nFixes #24185"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9524616774","Type":"IssuesEvent","CreatedAt":"2019-04-28T05:11:04","Actor":"sandcastle","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11259","RelatedDescription":"Opened issue \"Add flag to override default tool install behaviour when tool already installed\" (#11259) at dotnet/cli","RelatedBody":"Currently, running the install command for a tool that is already installed returns an error. This is a real pain when using this in dev and CI scripts as it will abort the script. I.\r\n\r\nIdeally, it should be an idempotent operation and not raise any error like like installing NPM, Yarn, Nuget and many other package managers. But given #9482 was closed and there appears to be no appetite to change the default, can we at least get a flag added to override the behaviour?\r\n\r\n\r\n## Steps to reproduce\r\n\r\n1. Already have the `dotnet-format`\r\n2. Run `dotnet tool install -g dotnet-format`\r\n3. You will get an error\r\n\r\n\r\n## New flag\r\n\r\nAdding a `--slient|-s` or `--no-errors|-ne` flag would work:\r\n\r\n```sh\r\ndotnet tool install -g --slient dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\nRunning the following would not raise an error:\r\n\r\n```sh\r\ndotnet tool install -g -s dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\n\r\n## Example dev/ci script\r\n\r\nHere is an example of a script that would currently blow up:\r\n\r\n```sh\r\n#!/bin/sh\r\nset -e\r\n\r\ncd \"$(dirname \"$0\")/..\"\r\n\r\n# --------\r\n\r\necho \"Installing dependencies\"\r\nif [ \"${1}\" != \"--ci\" ]; then\r\n\r\n  # Error will occur here!\r\n  dotnet tool install -g dotnet-format\r\n\r\nfi\r\n\r\ndotnet restore\r\n```\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```sh\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nPlease let me know if this is something you would like to see a PR for?"},{"Id":"9523809068","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:27:01","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11255","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11255) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.2\r\n- **Date Produced**: 4/26/2019 2:32 AM\r\n- **Commit**: 7af4517bbcf17b000889c1077ef5976f2b6350ea\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19225.2\r\n\r\n"},{"Id":"9523658348","Type":"PullRequestEvent","CreatedAt":"2019-04-27T19:08:45","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/11253","RelatedDescription":null,"RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 8:59 PM\r\n- **Commit**: b788973a620e6db7bc0458d37b449f160e40842f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19225.1\r\n\r\n"},{"Id":"9523658296","Type":"PullRequestEvent","CreatedAt":"2019-04-27T19:08:43","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/11253","RelatedDescription":"Closed pull request \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11253) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 8:59 PM\r\n- **Commit**: b788973a620e6db7bc0458d37b449f160e40842f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19225.1\r\n\r\n"},{"Id":"9523657445","Type":"PullRequestEvent","CreatedAt":"2019-04-27T19:08:13","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/11255","RelatedDescription":null,"RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.2\r\n- **Date Produced**: 4/26/2019 2:32 AM\r\n- **Commit**: 7af4517bbcf17b000889c1077ef5976f2b6350ea\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19225.2\r\n\r\n"},{"Id":"9523657369","Type":"PullRequestEvent","CreatedAt":"2019-04-27T19:08:11","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/11255","RelatedDescription":"Closed pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11255) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.2\r\n- **Date Produced**: 4/26/2019 2:32 AM\r\n- **Commit**: 7af4517bbcf17b000889c1077ef5976f2b6350ea\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19225.2\r\n\r\n"},{"Id":"9522878943","Type":"PullRequestEvent","CreatedAt":"2019-04-27T12:42:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11258","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/sdk\" (#11258) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 11:50 PM\r\n- **Commit**: 7d419793e74a2291ecfc9684aafc4dd7cc595361\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19226.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9517610793","Type":"PullRequestEvent","CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1169) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n"},{"Id":"9517582905","Type":"PullRequestEvent","CreatedAt":"2019-04-26T12:03:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1169) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n"},{"Id":"9509862577","Type":"PullRequestEvent","CreatedAt":"2019-04-25T12:14:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1168) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n"},{"Id":"9509796569","Type":"PullRequestEvent","CreatedAt":"2019-04-25T12:04:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1168) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n"},{"Id":"9507541007","Type":"IssuesEvent","CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166) at dotnet/standard","RelatedBody":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9524150581","Type":"PullRequestEvent","CreatedAt":"2019-04-28T00:06:37","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37238","RelatedDescription":"Merged pull request \"Add proxy environment variables support for Windows\" (#37238) at dotnet/corefx","RelatedBody":"Changed the Windows version of SocketsHttpHandler so that it will honor the same environment\r\nvariables similar to the Linux and OSX versions. If the environment variables are not set\r\nthen it reverts back to the Windows WinInet/IE settings behavior.\r\n\r\nI added several kinds of unit and end-to-end tests to verify the SystemProxyInfo class is\r\nmaking the correct choice for all the different platforms regarding whether the\r\nHttpEnvironmentProxy or platform proxy (HttpSystemProxy for Windows and MacProxy for OSX)\r\nis used.\r\n\r\nFixes #37187"},{"Id":"9524150577","Type":"IssuesEvent","CreatedAt":"2019-04-28T00:06:37","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37187","RelatedDescription":"Closed issue \"Add http_proxy environment variable support for Windows\" (#37187) at dotnet/corefx","RelatedBody":"In AnyUnix environments, setting a proxy is as easy as:\r\n``` sh\r\nhttp_proxy=http://localhost:8080 dotnet run\r\n```\r\nOr\r\n``` sh\r\nexport http_proxy=http://localhost:8080\r\ndotnet run\r\n```\r\n\r\nOn Windows, I want the same capability:\r\n``` ps1\r\n$env:http_proxy=\"http://localhost:8080\"\r\ndotnet run\r\n```\r\n\r\nUnfortunately, that does not work. Here is the [test code](https://github.com/dotnet/corefx/blob/09f4f7ed59992bc7bff6fe42bc75ef5b08c8c4e2/src/System.Net.Requests/tests/HttpWebRequestTest.cs#L1319-L1332) to explain:\r\n\r\n``` cs\r\n        [OuterLoop(\"Uses external server\")]\r\n        [PlatformSpecific(TestPlatforms.AnyUnix)] // The default proxy is resolved via WinINet on Windows.\r\n        [Fact]\r\n        public async Task ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed()\r\n        {\r\n            var cred = new NetworkCredential(Guid.NewGuid().ToString(\"N\"), Guid.NewGuid().ToString(\"N\"));\r\n            LoopbackServer.Options options =\r\n                new LoopbackServer.Options { IsProxy = true, Username = cred.UserName, Password = cred.Password };\r\n\r\n            await LoopbackServer.CreateServerAsync(async (proxyServer, proxyUri) =>\r\n            {\r\n                // HttpWebRequest/HttpClient will read a default proxy from the http_proxy environment variable. Ensure\r\n                // that when it does our default proxy credentials are used. To avoid messing up anything else in this\r\n                // process we run the test in another process.\r\n```\r\n\r\nCan you please add support for `http_proxy` environment variables on Windows too and then fall back to the WinINet? I don't want to change my system configuration when I just need to proxy a single app or a few `dotnet run`s.\r\n\r\nHere is a related issue, but not the same:\r\n- Implement global proxy configuration for HttpClient  https://github.com/dotnet/corefx/issues/36553"},{"Id":"9524090872","Type":"PullRequestEvent","CreatedAt":"2019-04-27T23:22:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37251","RelatedDescription":"Merged pull request \"Give SocketsHttpHandler more descriptive error messages\" (#37251) at dotnet/corefx","RelatedBody":"Currently lots of parsing failures just result in an exception stating \"The server returned an invalid or unrecognized response.\"  We can instead be more descriptive about what the problem is in most cases.\r\n\r\ncc: @davidsh, @geoffkizer, @wfurt "},{"Id":"9524022456","Type":"PullRequestEvent","CreatedAt":"2019-04-27T22:34:12","Actor":"Wraith2","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37254","RelatedDescription":"Opened pull request \"SqlClient optimize SqlDataReader async method allocations\" (#37254) at dotnet/corefx","RelatedBody":"Profiling the DataAccessPerformance project which emulates the TechEmpower fortunes benchmark shows that common async operations like ReadAsync generate context objects and delegates each time they are called which are then dropped for the GC to handle.\r\n\r\nThis PR changes the implementation of a common pattern used in similar async functions. This is currently implemented using `InvokeRetryable` `ContinueRetryable` and `CompleteRetryable`. It took some time to work out just what these functions were doing and how data flows between them and having done so I chose to rename them to Resumable instead of Retryable because retry is commonly (though you could argue incorrectly) used in contexts where we mean that an exception has occurred and we are going to try again which is not how these functions work, any exception is immediate and not retried.\r\n\r\nWhen [ReadAsync](https://github.com/dotnet/corefx/blob/610fa286999c78b841e17ea0c301c0986426635d/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs#L4268) is called the function attempts to satisfy the call synchronously if possible. If it is not possible it [generates](https://github.com/dotnet/corefx/blob/610fa286999c78b841e17ea0c301c0986426635d/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs#L4381) an async closure and func and then passes those to the retry functions. This generation of closure and function is currently per-call.\r\n\r\nI have removed all uses of the context closures by wrapping the common pattern in an abstract `Resumable<T>` class which contains common functionality. This class is then inherited and context data added to it for each of the changed async method, Because each operation now has a dedicated class static funcs can be created for the callback removing the repeated allocation of the func. The objects themselves may be reused because the `SqlDataReader` only allows a single async operation to be active so I have added cached objects for `IsDBNullAsync` and `ReadAsync` which means that only the first call to each will allocate the cached object after that they will be reused. Less commonly used async functions like `HasNextAsync` and `ReadBytesAsync` are not cahed, `GetfieldValueAsync<T>` is not cached because the range of T is unbounded.\r\n\r\nProfiles before:\r\n![readerasync-master](https://user-images.githubusercontent.com/13322696/56855757-beb90580-6944-11e9-8e3e-5722e6123379.PNG)\r\n\r\nAfter:\r\n![readerasync-branch](https://user-images.githubusercontent.com/13322696/56855759-c082c900-6944-11e9-9066-c643a8631a29.PNG)\r\n\r\nbenchmark results are small because of the prevalence of snapshot allocations, but worth having.\r\n\r\n| name | sync | threads | TPS  | stdev | description |\r\n| ---- | ---- | ------- | ---: | ----: | :---------- |\r\n|ado-sqlclient+async+64|async|64|59190|1675|asyncread master|\r\n|ado-sqlclient+async+64|async|64|60073|1650|asyncread branch|\r\n\r\nso a 1.5% throughput increase.\r\n\r\nManual and functional test pass in native mode. DataAccessPerfomance under pure load and profilers has no problems.\r\n/cc area owners @AfsanehR, @tarikulsabbir, @Gary-Zh , @David-Engel , people interested in perf @divega @roji @saurabh500"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9524257285","Type":"IssuesEvent","CreatedAt":"2019-04-28T01:22:22","Actor":"forestbat","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7369","RelatedDescription":"Opened issue \"How do you think to this repository？\" (#7369) at dotnet/corert","RelatedBody":"https://github.com/kekyo/IL2C\r\nCan this repo replace CppCodeGen？"},{"Id":"9523458371","Type":"PullRequestEvent","CreatedAt":"2019-04-27T17:25:19","Actor":"ifew","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7366","RelatedDescription":"Closed pull request \"Example connect database via Dapper\" (#7366) at dotnet/corert","RelatedBody":"Simple, Easy to understand and test corert with connect database via Dapper Library"},{"Id":"9522820239","Type":"PullRequestEvent","CreatedAt":"2019-04-27T12:09:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7363","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/corefx\" (#7363) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @ericstj"},{"Id":"9521807256","Type":"PullRequestEvent","CreatedAt":"2019-04-27T01:43:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7367","RelatedDescription":"Merged pull request \"Use implicit MTA for threadpool threads\" (#7367) at dotnet/corert","RelatedBody":"It is not ok to leave COM initialized on Win32 threadpool threads. This change skips COM initialization\r\non Win32 threadpool threads completely and takes advantage of implicit MTA that is initialized by the finalizer\r\nthread.\r\n\r\nThis fix should provide high compatiblity with .NET Framework/Core, without performance overhead of initialization/uninitializing COM every time; or running dedicated threadpool.\r\n\r\nFixes #7356"},{"Id":"9521807253","Type":"IssuesEvent","CreatedAt":"2019-04-27T01:43:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7356","RelatedDescription":"Closed issue \"ThreadPool usage on Windows\" (#7356) at dotnet/corert","RelatedBody":"I make a library, which get called from Java app with JNA on Windows.\r\nEverything was fine, until I start using of ThreadPool. After that I start getting some strange lockups of main Java application.\r\nI suspect that problem somewhere in GC. It tries to suspend and stackwalk all TPP threads, which was running .Net code. Even if there is no any .Net code currently executing in it. And it may conflict with Java GC, which also possibly tries to stackwalk this threads.\r\n\r\nMaybe we should somehow \"detach\" non CLR threads, which was exitted from .Net code?"},{"Id":"9521528400","Type":"PullRequestEvent","CreatedAt":"2019-04-26T23:36:12","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7368","RelatedDescription":"Merged pull request \"Add the enum value for manifest metadata to R2R header constants\" (#7368) at dotnet/corert","RelatedBody":"Not the real implementation, just the enum now I have it in fresh\r\nmemory from the R2RDump change :-).\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9521260960","Type":"PullRequestEvent","CreatedAt":"2019-04-26T22:14:14","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7368","RelatedDescription":"Opened pull request \"Add the enum value for manifest metadata to R2R header constants\" (#7368) at dotnet/corert","RelatedBody":"Not the real implementation, just the enum now I have it in fresh\r\nmemory from the R2RDump change :-).\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9520213829","Type":"PullRequestEvent","CreatedAt":"2019-04-26T18:48:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7367","RelatedDescription":"Opened pull request \"Use implicit MTA for threadpool threads\" (#7367) at dotnet/corert","RelatedBody":"It is not ok to leave COM initialized on Win32 threadpool threads. This change skips COM initialization\r\non Win32 threadpool threads completely and takes advantage of implicit MTA that is initialized by the finalizer\r\nthread.\r\n\r\nThis fix should provide high compatiblity with .NET Framework/Core, without performance overhead of initialization/uninitializing COM every time; or running dedicated threadpool.\r\n\r\nFixes #7356"},{"Id":"9519686361","Type":"PullRequestEvent","CreatedAt":"2019-04-26T17:20:25","Actor":"ifew","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7366","RelatedDescription":"Opened pull request \"Example connect database via Dapper\" (#7366) at dotnet/corert","RelatedBody":"Simple, Easy to understand and test corert with connect database via Dapper Library"},{"Id":"9518471036","Type":"PullRequestEvent","CreatedAt":"2019-04-26T14:17:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7365","RelatedDescription":"Merged pull request \"Fix ProjectN build breaks\" (#7365) at dotnet/corert","RelatedBody":""},{"Id":"9517881843","Type":"PullRequestEvent","CreatedAt":"2019-04-26T12:54:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7365","RelatedDescription":"Opened pull request \"Fix ProjectN build breaks\" (#7365) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9523279679","Type":"IssuesEvent","CreatedAt":"2019-04-27T15:59:11","Actor":"sdmaclea","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3185","RelatedDescription":"Opened issue \"PackageReference to classlib does not layout satellites correctly.\" (#3185) at dotnet/sdk","RelatedBody":"Observed in the tip of corefx\r\n\r\nGiven a package reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\nCulture directory is absent in target layout.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-04-27T20:23:57","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"open","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Open PR \"Add AngleSharp\" (#143)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"438011872","IsPullRequest":true,"CreatedAt":"2019-04-28T04:24:47","Actor":"mjsabby","Number":"24291","RawContent":null,"Title":"Add option to only notify profiler of LOH allocations","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/24217.","Url":"https://github.com/dotnet/coreclr/pull/24291","RelatedDescription":"Open PR \"Add option to only notify profiler of LOH allocations\" (#24291)"},{"Id":"438000617","IsPullRequest":false,"CreatedAt":"2019-04-28T01:29:32","Actor":"VincentBu","Number":"24290","RawContent":null,"Title":"[arm64] Test failed: System.Xml.Tests.CNameTableTestModule.RunTests","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/32/\r\n\r\n**Failed tests:**\r\nSystem.Xml.Tests.CNameTableTestModule.RunTests\r\n\r\n**Log:**\r\n```\r\nSystem.Xml.Tests.CNameTableTestModule.RunTests(testCase: Add an existing atomized string (with Max string for test: 1-2M), valid offset and valid length) [FAIL]\r\n      System.Xml.XmlException : The '.' character, hexadecimal value 0x00, cannot be included in a name. Line 2, position 717181.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2746,0): at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2725,0): at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(2694,0): at System.Xml.XmlTextReaderImpl.Throw(Int32 pos, String res, String[] args)\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(4491,0): at System.Xml.XmlTextReaderImpl.ParseElement()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(4240,0): at System.Xml.XmlTextReaderImpl.ParseElementContent()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs(1202,0): at System.Xml.XmlTextReaderImpl.Read()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\tests\\Readers\\NameTable\\XmlNameTable.cs(779,0): at System.Xml.Tests.TCRecordNameTableAdd.Variation_8()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\cvariation.cs(77,0): at OLEDB.Test.ModuleCore.CVariation.Execute()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\ctestcase.cs(132,0): at OLEDB.Test.ModuleCore.CTestCase.<>c__DisplayClass7_1.<TestCases>b__0()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\Common\\tests\\System\\Xml\\ModuleCore\\XunitTestCase.cs(34,0): at OLEDB.Test.ModuleCore.XunitTestCase.Run()\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Private.Xml\\tests\\Readers\\NameTable\\CNameTableTestModule.cs(16,0): at System.Xml.Tests.CNameTableTestModule.RunTests(XunitTestCase testCase)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24290","RelatedDescription":"Open issue \"[arm64] Test failed: System.Xml.Tests.CNameTableTestModule.RunTests\" (#24290)"},{"Id":"437992888","IsPullRequest":true,"CreatedAt":"2019-04-27T23:10:31","Actor":"tannergooding","Number":"24289","RawContent":null,"Title":"Resolves an assert around Sse41.ConvertToVector128Int* and Avx2.ConvertToVector256Int*","State":"open","Body":"This resolves an issue with `Sse41.ConvertToVector128Int*` and `Avx2.ConvertToVector256Int*` where the new overloads that took a pointer were not being handled correctly.\r\n\r\nIt also adds tests covering the new overloads as it looks like I missed them in the test cleanup PR.","Url":"https://github.com/dotnet/coreclr/pull/24289","RelatedDescription":"Open PR \"Resolves an assert around Sse41.ConvertToVector128Int* and Avx2.ConvertToVector256Int*\" (#24289)"},{"Id":"437908612","IsPullRequest":true,"CreatedAt":"2019-04-27T21:21:09","Actor":"GrabYourPitchforks","Number":"24286","RawContent":null,"Title":"Add missing check for UTF-16 low surrogate char at start of buffer","State":"closed","Body":"(Found by the fuzzing run. Regression in Preview 5.)\r\n\r\nThe method `Encoding.UTF8.GetByteCount(chars)` can sometimes return an incorrect value if __all__ of the following conditions hold:\r\n\r\n* The first character of the UTF-16 input string must be a standalone low surrogate code unit, or all characters in the string before this standalone low surrogate code unit must have been ASCII characters. (There are other variations on this pattern, but this is the easiest way to trigger the bug.)\r\n* Including this standalone UTF-16 low surrogate code unit, enough data remains in the input string to fill a `Vector<ushort>`.\r\n* A custom replacement fallback mechanism has been set on the `UTF8Encoding` instance.\r\n* SSE2 is not available, perhaps because the application has been precompiled using crossgen or because the current arch is not x86-based.\r\n\r\nThe easiest way to repro the issue is to run the below console application with the environment variable `COMPLUS_ENABLESSE2=0` set.\r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n{\r\n    var encoding = Encoding.GetEncoding(\"utf-8\", new EncoderReplacementFallback(\"BAD!\"), DecoderFallback.ExceptionFallback);\r\n    char[] chars = new char[Vector<ushort>.Count];\r\n    chars[0] = '\\uD800';\r\n    Console.WriteLine(encoding.GetByteCount(chars));    // outputs '11', this is correct\r\n\r\n    chars[0] = '\\uDC00';\r\n    Console.WriteLine(encoding.GetByteCount(chars));    // outputs '10', should be '11'\r\n    return;\r\n}\r\n```\r\n\r\nThis is very similar to https://github.com/dotnet/coreclr/pull/24235 in terms of how it affects real-world applications. First, the bug manifests only in the \"count the number of output bytes\" step of the `GetBytes` method. The actual transcoding operation (where the output array is populated) does not have the same bug.\r\n\r\nSecond, the bug does not manifest unless the fallback mechanism has been replaced on the `UTF8Encoding` instance. The reason for this is that the byte counting step incorrectly reports that the invalid standalone UTF-16 surrogate code unit `U+DC00` would fall into the range of scalar values which requires 3 output UTF-8 bytes (`U+0800..U+FFFF`). Since the default replacement mechanism is to replace standalone surrogate code units with the replacement character `U+FFFD` - which is already 3 UTF-8 bytes - the count ends up being correct anyway.\r\n\r\nThird, the input must already be malformed in a very particular fashion. It's extraordinarily difficult for malformed UTF-16 data to make its way into an application using Framework-provided APIs via a networking layer. An app running as a network-facing service would need to go out of its way to allow malformed input to make its way into the system, and in doing so they've almost certainly introduced other security vulnerabilites into the app. (It may be more viable to send malformed input via RPC to an app running on the same machine.)\r\n\r\nFinally, the application must be targeting ARM, or the environment variable which disables SSE2 intrinsics must have been set, or the application must be using crossgen precompilation (which would disable hardware intrinsics entirely).\r\n\r\nFor the above reasons I'm not pushing for this to be cherry-picked into the Preview 5 branch.","Url":"https://github.com/dotnet/coreclr/pull/24286","RelatedDescription":"Closed or merged PR \"Add missing check for UTF-16 low surrogate char at start of buffer\" (#24286)"},{"Id":"437967823","IsPullRequest":true,"CreatedAt":"2019-04-27T17:50:50","Actor":"am11","Number":"24288","RawContent":null,"Title":"Compute sizeof array instead of pointer","State":"open","Body":"gcc8 and clang8-pre has implemented `Wsizeof-pointer-div` analysis, which identifies two issues on amd64.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24288","RelatedDescription":"Open PR \"Compute sizeof array instead of pointer\" (#24288)"},{"Id":"437956325","IsPullRequest":false,"CreatedAt":"2019-04-27T15:58:39","Actor":"sdmaclea","Number":"24287","RawContent":null,"Title":"PackageReference of classlib with does not layout satellites correctly","State":"closed","Body":"Given a package reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nThis needs to be reported elsewhere.  MSBuild ? SDK ? \r\n@tarekgh @jkotas","Url":"https://github.com/dotnet/coreclr/issues/24287","RelatedDescription":"Closed issue \"PackageReference of classlib with does not layout satellites correctly\" (#24287)"},{"Id":"437500615","IsPullRequest":true,"CreatedAt":"2019-04-27T12:09:41","Actor":"Dotnet-GitSync-Bot","Number":"24267","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @ericstj","Url":"https://github.com/dotnet/coreclr/pull/24267","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#24267)"},{"Id":"437677961","IsPullRequest":true,"CreatedAt":"2019-04-27T12:04:06","Actor":"RussKeldorph","Number":"24272","RawContent":null,"Title":"Switch to non-Int Azure pool providers","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24272","RelatedDescription":"Closed or merged PR \"Switch to non-Int Azure pool providers\" (#24272)"},{"Id":"437874349","IsPullRequest":true,"CreatedAt":"2019-04-27T02:45:23","Actor":"github-john-doe","Number":"24280","RawContent":null,"Title":"Typos","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24280","RelatedDescription":"Closed or merged PR \"Typos\" (#24280)"},{"Id":"437894817","IsPullRequest":true,"CreatedAt":"2019-04-27T02:03:14","Actor":"AaronRobinsonMSFT","Number":"24285","RawContent":null,"Title":"Port all managed product binaries to use SDK style projects","State":"open","Body":"This PR is not complete. The optprof scenario will be broken. @jkoritzinsky suggestions are welcome.\r\n\r\nMuch of this work was ported from https://github.com/dotnet/coreclr/pull/23988. Note that this work does not upgrade to 3.0, but merely moves the product projects to SDK project types.\r\n\r\ncc @RussKeldorph @jashook @jkoritzinsky @jeffschwMSFT ","Url":"https://github.com/dotnet/coreclr/pull/24285","RelatedDescription":"Open PR \"Port all managed product binaries to use SDK style projects\" (#24285)"},{"Id":"437458656","IsPullRequest":false,"CreatedAt":"2019-04-27T02:01:02","Actor":"VincentBu","Number":"24265","RawContent":null,"Title":"Test failed: System.IO.Tests.CtorTests.NullEncodingThrows","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_baseline/911/\r\n\r\n**Failed tests:**\r\nSystem.IO.Tests.CtorTests.NullEncodingThrows\r\n\r\n**Log:**\r\n```\r\nSystem.IO.Tests.CtorTests.NullEncodingThrows [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.ArgumentNullException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline/_/fx/src/System.IO/tests/StreamWriter/StreamWriter.CtorTests.cs(41,0): at System.IO.Tests.CtorTests.NullEncodingThrows()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24265","RelatedDescription":"Closed issue \"Test failed: System.IO.Tests.CtorTests.NullEncodingThrows\" (#24265)"},{"Id":"437597841","IsPullRequest":true,"CreatedAt":"2019-04-27T00:38:38","Actor":"janvorli","Number":"24270","RawContent":null,"Title":"Fix creation of the NUMA node to heap number map","State":"closed","Body":"The current implementation assumes that the NUMA nodes of CPUs\r\nused for GC threads form a zero based continous range. However that\r\ndoesn't have to be true for cases when user selects only a subset of the\r\navailable CPUs for the GC heap threads using the\r\nCOMPlus_GCHeapAffinitizeMask or COMPlus_GCHeapAffinitizeRanges. The\r\nselected CPUs may belong only to a subset of NUMA nodes that don't\r\nnecessarily start at node 0 or form a continuous range.\r\n\r\nThis change fixes the algorithm that initializes the\r\nnuma_node_to_heap_map lookup array so that it works correctly even in\r\nsuch cases.","Url":"https://github.com/dotnet/coreclr/pull/24270","RelatedDescription":"Closed or merged PR \"Fix creation of the NUMA node to heap number map\" (#24270)"},{"Id":"437884223","IsPullRequest":true,"CreatedAt":"2019-04-27T00:10:14","Actor":"jkoritzinsky","Number":"24284","RawContent":null,"Title":"Restore IBCMerge using an authenticated service connection","State":"open","Body":"The IBCMerge package is stored on an authenticated feed. As a result, we need to pass along the authentication information to the restore process. This PR implements a method similar to CoreFX where we use a pre-made service connection to pull down the package.\r\n\r\nHowever, to use a service connection, we need to do this step as a separate step on AzDO. Additionally, we need a .NET CLI installed before doing this step. So, this PR also installs a .NET CLI onto the system separate from the one we use during build (we set `DOTNET_MULTILEVEL_LOOKUP=0` already in our scripts so we don't do multi-level lookup).\r\n\r\nFixes #24247 \r\n\r\nSee https://dev.azure.com/dnceng/internal/_build/results?buildId=171677 for succeeding official builds with IBC enabled.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24284","RelatedDescription":"Open PR \"Restore IBCMerge using an authenticated service connection\" (#24284)"},{"Id":"437882874","IsPullRequest":true,"CreatedAt":"2019-04-27T00:01:07","Actor":"briansull","Number":"24283","RawContent":null,"Title":"Updated fixes for IBC profile data on Linux ","State":"open","Body":"Added public static function GetManagedCommandLine() and SaveManagedCommandLine()\r\n\r\nMoved GetManagedCommandLine and SaveManagedCommandLine to ceeload to link\r\n\r\nDisabled the setup for BBSweep on Linux as the PAL doesn’t support process named objects\r\n\r\n    Added check for GetManagedCommandLine() returning a nullptr in ProfileDataAllocateScenarioInfo\r\n\r\n    Moved call to ReleaseManagedCommandLine() to EEShutDownHelper","Url":"https://github.com/dotnet/coreclr/pull/24283","RelatedDescription":"Open PR \"Updated fixes for IBC profile data on Linux \" (#24283)"},{"Id":"437877044","IsPullRequest":true,"CreatedAt":"2019-04-26T23:19:24","Actor":"erozenfeld","Number":"24282","RawContent":null,"Title":" Fix for a jit liveness bug.","State":"open","Body":"`fgRemoveDeadStore` has special logic for removing dead assignments\r\nwhose rhs was of type `TYP_STRUCT`:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/311b5e2fe413c6c74a2a3680ab54d8a978651472/src/jit/liveness.cpp#L2264-L2274\r\n\r\nThat logic was applied to \"normal\"\r\nassignments (i.e., direct children of `GT_STMT`) but not to \"internal\"\r\nassignments (e.g., children of `GT_COMMA`).\r\nThe test case has an internal assignment and, because this logic wasn't\r\napplied, we ended up with a standalone `GT_IND` of type `TYP_STRUCT`\r\nthat the register allocator can't handle.\r\n\r\nThis change apples the missing logic to \"internal\" assignments.\r\n\r\nThe second commit cleans up `fgRemoveDeadStore`.\r\n\r\nFixes #24253.","Url":"https://github.com/dotnet/coreclr/pull/24282","RelatedDescription":"Open PR \" Fix for a jit liveness bug.\" (#24282)"},{"Id":"437874397","IsPullRequest":true,"CreatedAt":"2019-04-26T23:09:16","Actor":"BruceForstall","Number":"24281","RawContent":null,"Title":"Disable failing corefx tests","State":"closed","Body":"Issues:\r\n\r\nhttps://github.com/dotnet/coreclr/issues/24236\r\nhttps://github.com/dotnet/coreclr/issues/23473\r\nhttps://github.com/dotnet/coreclr/issues/24265\r\nhttps://github.com/dotnet/coreclr/issues/22414\r\n","Url":"https://github.com/dotnet/coreclr/pull/24281","RelatedDescription":"Closed or merged PR \"Disable failing corefx tests\" (#24281)"},{"Id":"437847632","IsPullRequest":true,"CreatedAt":"2019-04-26T22:58:32","Actor":"briansull","Number":"24276","RawContent":null,"Title":"Revert 24229","State":"closed","Body":"Revert pull request #24229 from briansull/ibc-linux\r\n\r\n> Fixes for IBC profile data on Linux","Url":"https://github.com/dotnet/coreclr/pull/24276","RelatedDescription":"Closed or merged PR \"Revert 24229\" (#24276)"},{"Id":"437871967","IsPullRequest":true,"CreatedAt":"2019-04-26T22:51:34","Actor":"Anipik","Number":"24279","RawContent":null,"Title":"Improve Precision to 10 microseconds in timespan","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/32430\r\nRelated corefx PR https://github.com/dotnet/corefx/pull/37235\r\n\r\n```\r\ndouble millis = tmp + (value >= 0 ? 0.5 : -0.5);\r\n```\r\n\r\nThis line was added  because casting double to long was dropping the decimal part and we expect it to rounded off. This wont be the case anymore.","Url":"https://github.com/dotnet/coreclr/pull/24279","RelatedDescription":"Open PR \"Improve Precision to 10 microseconds in timespan\" (#24279)"},{"Id":"437864885","IsPullRequest":false,"CreatedAt":"2019-04-26T22:17:06","Actor":"BruceForstall","Number":"24278","RawContent":null,"Title":"[Linux/arm] Test failure: System.Dynamic.Runtime.Tests","State":"open","Body":"Happens with JitStress=2\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_corefx_jitstress2_tst/62/consoleFull\r\n```\r\n18:30:58 >>>>> /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Dynamic.Runtime.Tests\r\n18:30:58 \r\n18:30:58 Running tests in /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Dynamic.Runtime.Tests/netcoreapp-Linux-Release-arm\r\n18:30:58 timeout --kill-after=30s 20m ./RunTests.sh --runtime-path /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm --rsp-file /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/tests/scripts/run-corefx-tests-exclusions.txt\r\n18:30:58 \r\n18:30:58 ----- start 01:28:25 =============== To repro directly: =====================================================\r\n18:30:58 pushd .\r\n18:30:58 #!/usr/bin/env bash export COMPlus_TieredCompilation=0 export COMPlus_JitStress=2\r\n18:30:58 /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm/dotnet xunit.console.dll System.Dynamic.Runtime.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop @/ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/tests/scripts/run-corefx-tests-exclusions.txt\r\n18:30:58 popd\r\n18:30:58 ===========================================================================================================\r\n18:30:58 /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Dynamic.Runtime.Tests/netcoreapp-Linux-Release-arm /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Dynamic.Runtime.Tests/netcoreapp-Linux-Release-arm\r\n18:30:58   Discovering: System.Dynamic.Runtime.Tests (method display = ClassAndMethod, method display options = None)\r\n18:30:58   Discovered:  System.Dynamic.Runtime.Tests (found 2901 test cases)\r\n18:30:58   Starting:    System.Dynamic.Runtime.Tests (parallel test collections = on, max threads = 4)\r\n18:30:58 \r\n./RunTests.sh: line 179: 30693 Segmentation fault      \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Dynamic.Runtime.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop $RSP_FILE\r\n18:30:58 /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Dynamic.Runtime.Tests/netcoreapp-Linux-Release-arm\r\n18:30:58 ----- end 01:30:58 ----- exit code 139 ----------------------------------------------------------\r\n18:30:58 exit code 139 means SIGSEGV Illegal memory access. Deref invalid pointer, overrunning buffer, stack overflow etc. Core dumped.\r\n18:30:58 Looking around for any Linux dump...\r\n18:30:58 ... found no dump in /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Dynamic.Runtime.Tests/netcoreapp-Linux-Release-arm\r\n18:30:58 \r\nerror: One or more tests failed while running tests from ''.  Exit code 139.\r\n18:30:58 <<<<<\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24278","RelatedDescription":"Open issue \"[Linux/arm] Test failure: System.Dynamic.Runtime.Tests\" (#24278)"},{"Id":"437862935","IsPullRequest":true,"CreatedAt":"2019-04-26T22:08:37","Actor":"trylek","Number":"24277","RawContent":null,"Title":"Support for larger version bubbles in R2RDump","State":"open","Body":"After JanV fixed basically all test failures related to larger\r\nversion bubbles originally implemented by Andon, it's high time\r\nto fix R2RDump for its support as a prerequisite to enabling\r\nlarger version bubbles in CPAOT. This change implements this\r\nsupport via the following particular changes:\r\n\r\n1) In DumpOptions, I added a list of explicit assembly references,\r\nanother list of reference paths that are used for resolving\r\nassembly references, a cache for repeated assembly lookups and\r\na new method FindAssembly for file resolution of a given simple\r\nassembly name.\r\n\r\n2) I have moved ECMA metadata-related logic from R2RReader to\r\nits new base class EcmaMetadataReader. This class can represent\r\nboth R2R and MSIL binaries and adds the logic for reference\r\nassembly lookup.\r\n\r\n3) Large version bubble R2R PE exe's contain a special R2R header\r\ntable READYTORUN_SECTION_MANIFEST_METADATA that contains ECMA\r\nmetadata with a list of extra AssemblyRef's on top of those stored\r\nin the original MSIL. I have added support for parsing this table\r\nto the R2RReader constructor.\r\n\r\n4) I have modified R2RSignature to be based off the new\r\nEcmaMetadataReader instead of R2RReader which cannot represent\r\narbitrary reference assemblies. I have patched the two places\r\ndealing with module overrides to use the new logic to temporarily\r\nswitch to a \"remote module\" SignatureDecoder for the purpose\r\nof parsing an external entity.\r\n\r\n5) I have removed temporary hacks Andon put in place to keep\r\nR2RDump alive in some cases with larger version bubbles without\r\nproper support for parsing module overrides.\r\n\r\n6) I have added logic for dumping the contents of the manifest\r\nmetadata along with the standard AssemblyRef table to the\r\nheader dump as I fought with recalculation of the indices\r\nwhen debugging larger version bubble code for quite some time.\r\n\r\n7) As an extra half-forgotten bit from the past I added dumping\r\nof unboxing and instantiation stubs.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/24277","RelatedDescription":"Open PR \"Support for larger version bubbles in R2RDump\" (#24277)"},{"Id":"437457703","IsPullRequest":false,"CreatedAt":"2019-04-26T21:08:59","Actor":"VincentBu","Number":"24264","RawContent":null,"Title":"[x64] Build failed: error CS1503: Argument 1: cannot convert from '' to 'void*'","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_osx10.12/29338/\r\n\r\n**Log:**\r\n```\r\nbot/j/workspace/dotnet_coreclr/master/checked_osx10.12/bin/tests/OSX.x64.Checked/JIT/HardwareIntrinsics/X86/Avx_Vector128/Avx_r/Avx_r.exe\r\nBlend.UInt32.4.cs(115,30): error CS1503: Argument 1: cannot convert from '' to 'void*' [/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/src/JIT/HardwareIntrinsics/X86/Avx2_Vector128/Avx2_ro.csproj]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24264","RelatedDescription":"Closed issue \"[x64] Build failed: error CS1503: Argument 1: cannot convert from '' to 'void*'\" (#24264)"},{"Id":"437455865","IsPullRequest":true,"CreatedAt":"2019-04-26T19:55:10","Actor":"jorive","Number":"24262","RawContent":null,"Title":"Undo a change where the EventPipe sessionType is ignored.","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24262","RelatedDescription":"Closed or merged PR \"Undo a change where the EventPipe sessionType is ignored.\" (#24262)"},{"Id":"437808638","IsPullRequest":false,"CreatedAt":"2019-04-26T19:11:48","Actor":"brianrob","Number":"24275","RawContent":null,"Title":"Linux IBC Training is Broken","State":"open","Body":"After #24229 was merged, Linux IBC training no longer generates data.  I have confirmed that without this change, IBC data is generated.\r\n\r\nTraining fails with the following error, which says that no IBC files were found:\r\n```\r\n[12:08:23] Looking for IBC files in directory '/home/brianrob/src/dotnet-optimization/output/CLRx64LINmas/IBC/coreclr-master/bin/Product/Linux.x64.Release'.\r\n[12:08:23] Looking for IBC files in directory '/home/brianrob/src/dotnet-optimization/output/CLRx64LINmas/IBC/cli/x64'.\r\n[12:08:23] Failure during training scenario 'DotNet_TechEmpower'.  Exception details: System.Exception: Failed training for CLRx64LINmas: the last training scenario did not produce any data\r\n   at Microsoft.DotNet.Optimization.Linux_IBC.AcceptTrain(Product product, Scenario scenario) in /home/brianrob/src/dotnet-optimization/src/optimizationtools/Linux_IBC.cs:line 68\r\n   at Microsoft.DotNet.Optimization.TrainingJob.GenerateTrainingData(String layoutDirectory) in /home/brianrob/src/dotnet-optimization/src/core/TrainingJob.cs:line 134\r\n\r\nUnhandled Exception: System.Exception: Failed training for CLRx64LINmas: the last training scenario did not produce any data\r\n   at Microsoft.DotNet.Optimization.Linux_IBC.AcceptTrain(Product product, Scenario scenario) in /home/brianrob/src/dotnet-optimization/src/optimizationtools/Linux_IBC.cs:line 68\r\n   at Microsoft.DotNet.Optimization.TrainingJob.GenerateTrainingData(String layoutDirectory) in /home/brianrob/src/dotnet-optimization/src/core/TrainingJob.cs:line 134\r\n   at Microsoft.DotNet.Optimization.TrainingJob.Execute() in /home/brianrob/src/dotnet-optimization/src/core/TrainingJob.cs:line 53\r\n   at Microsoft.DotNet.Optimization.AutomatedOptimizationJob.processJob(Job job, Action`1 onSuccess) in /home/brianrob/src/dotnet-optimization/src/jobs/AutomatedOptimizationJob.cs:line 22\r\n   at Microsoft.DotNet.Optimization.AutomatedOptimizationJob.runJobs() in /home/brianrob/src/dotnet-optimization/src/jobs/AutomatedOptimizationJob.cs:line 131\r\n   at Microsoft.DotNet.Optimization.Program.Main(String[] args) in /home/brianrob/src/dotnet-optimization/src/Program.cs:line 29\r\n./train.sh: line 77:  4998 Aborted                 (core dumped) $dotnetCmd $currentDir/artifacts/bin/optimization/$buildConfiguration/netcoreapp2.0/optimization.dll --output-directory=\"$outputDirectory\" --train $jobs $rerunscenarios\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24275","RelatedDescription":"Open issue \"Linux IBC Training is Broken\" (#24275)"},{"Id":"437805885","IsPullRequest":false,"CreatedAt":"2019-04-26T19:03:30","Actor":"sandreenko","Number":"24274","RawContent":null,"Title":"PMI asm diffs infra failures","State":"open","Body":"The jobs are failing with:\r\n```\r\n11:55:25 dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.503/dotnet-sdk-2.1.503-win-x64.zip\r\n11:55:27 dotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.503/dotnet-sdk-2.1.503-win-x64.zip\r\n11:55:27 dotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.503/dotnet-dev-win-x64.2.1.503.zip\r\n11:55:29 dotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.503/dotnet-dev-win-x64.2.1.503.zip\r\n11:55:29 Could not find/download: \".NET Core SDK\" with version = 2.1.503\r\n```\r\n[example](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_windows_nt_pmi_asm_diffs_prtest/30/consoleFull#151315772033fe3402-0c0f-45a7-a707-47164965bab5).\r\nOther jobs run this command without any issue, for example [arm64_cross_checked_windows_nt_innerloop_prtest](https://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_cross_checked_windows_nt_innerloop_prtest/):\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.503/dotnet-sdk-2.1.503-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.503/dotnet-sdk-2.1.503-win-x64.zip\r\n```\r\n\r\nCan this link be inaccessible from win2012-* nodes?\r\n\r\ncc @BruceForstall @dotnet/dnceng ","Url":"https://github.com/dotnet/coreclr/issues/24274","RelatedDescription":"Open issue \"PMI asm diffs infra failures\" (#24274)"},{"Id":"437763519","IsPullRequest":true,"CreatedAt":"2019-04-26T17:03:25","Actor":"Anipik","Number":"24273","RawContent":null,"Title":"[DonoT review] Removing rootlength variable from removeRelative segments","State":"open","Body":"Just for testing","Url":"https://github.com/dotnet/coreclr/pull/24273","RelatedDescription":"Open PR \"[DonoT review] Removing rootlength variable from removeRelative segments\" (#24273)"},{"Id":"437647142","IsPullRequest":true,"CreatedAt":"2019-04-26T12:22:09","Actor":"kfrolov","Number":"24271","RawContent":null,"Title":"Fixed ARM single stepper: added \"ADD Rn, PC\" command emulation","State":"open","Body":"This change fixes bug #24164: pull request #11366 adds generation of\r\ncommands which use PC-relative addressing. But ArmSingleStepper doesn't\r\nimplements support for \"ADD Rn, PC\" command, so when we try to debug\r\nmanaged code, generated JIT can't be single stepped correctly.\r\n\r\nDetailed changes description:\r\n\r\n1) added \"ADD Rn, PC\" command emulation to ArmSingleStepper;\r\n2) asserts added to JIT code generator, which prevents using of CPU\r\ninstructions, which address PC (R15) register with except of only \"ADD\r\nRn, PC\" instruction (asserts generated only in Debug builds).\r\n\r\nNormally PC register shouldn't be used in arithmetic commands almost in\r\nall cases.","Url":"https://github.com/dotnet/coreclr/pull/24271","RelatedDescription":"Open PR \"Fixed ARM single stepper: added \"ADD Rn, PC\" command emulation\" (#24271)"},{"Id":"437505733","IsPullRequest":false,"CreatedAt":"2019-04-26T09:37:46","Actor":"ddobric","Number":"24268","RawContent":null,"Title":"Unexpected error CS0433: Type 'SerializableAttribute' exists in both ","State":"closed","Body":"Hi all,\r\n\r\nhave a project, which references .NET Standard (2.0) library (MyLib), which references Akka.Net. Akka.Net has a library, which provides type '**Serializable**'.\r\n\r\n**_MyProject->MyLib->Akka_**\r\n\r\nI have a class in my project decorated with **SerializableAttribute**. \r\n\r\n![image](https://user-images.githubusercontent.com/1756871/56785150-227fe900-67f4-11e9-89cc-5982fc7a9b8d.png)\r\n\r\nAlthough there is no **using** pointing to Akka and only explicit reference to 'System.Serialization' is provided,  I get following error:\r\n\r\n`error CS0433: The type 'SerializableAttribute' exists in both 'Akka, Version=1.3.12.0, Culture=neutral, PublicKeyToken=null' and 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'`","Url":"https://github.com/dotnet/coreclr/issues/24268","RelatedDescription":"Closed issue \"Unexpected error CS0433: Type 'SerializableAttribute' exists in both \" (#24268)"},{"Id":"437510488","IsPullRequest":false,"CreatedAt":"2019-04-26T05:57:00","Actor":"AriNuer","Number":"24269","RawContent":null,"Title":"Test Failure:JIT_Regression._JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_/_JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_cmd ","State":"open","Body":"Test **JIT_Regression._JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_/_JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_cmd** has failed.\r\n\r\nFailed Message :\r\n```\r\nThe syntax of the command is incorrect.\r\n\r\nReturn code:      255\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\86b6b938-5f7b-41c7-931a-dbb1f13048d4\\\\Work\\\\bbcbeeaa-23e6-4f24-988b-e5bd69efefa0\\\\Exec\\\\JIT\\\\Regression\\\\Reports\\\\JIT.Regression\\\\JitBlue\\\\DevDiv_605447\\\\DevDiv_605447\\\\DevDiv_605447.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nTest Harness Exitcode is : 255\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\86b6b938-5f7b-41c7-931a-dbb1f13048d4\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\86b6b938-5f7b-41c7-931a-dbb1f13048d4\\\\Work\\\\bbcbeeaa-23e6-4f24-988b-e5bd69efefa0\\\\Exec\\\\JIT\\\\Regression\\\\JitBlue\\\\DevDiv_605447\\\\DevDiv_605447\\\\DevDiv_605447.cmd\r\nExpected: True\r\nActual:   False\r\n```\r\nStack Trace :\r\n```\r\nat JIT_Regression._JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_._JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_cmd() in F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.arm.Release\\TestWrappers\\JIT.Regression\\JIT.Regression.XUnitWrapper.cs:line 92346\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24269","RelatedDescription":"Open issue \"Test Failure:JIT_Regression._JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_/_JitBlue_DevDiv_605447_DevDiv_605447_DevDiv_605447_cmd \" (#24269)"},{"Id":"437462787","IsPullRequest":false,"CreatedAt":"2019-04-26T01:39:43","Actor":"AriNuer","Number":"24266","RawContent":null,"Title":"[x86\\windows] error : There is not enough space on the disk","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_tieredcompilation/275/\r\n\r\n**Failed log:**\r\n```\r\nD:\\j\\workspace\\x86_checked_w---4346325a\\_\\fx\\.dotnet\\sdk\\3.0.100-preview3-010431\\NuGet.targets(119,5): error : There is not enough space on the disk. : 'C:\\Users\\dotnet-bot\\.nuget\\packages\\transport.runtime.win-x86.microsoft.netcore.runtime.coreclr\\3.0.0-preview6-27624-71\\tools\\crossgen.pdb' [D:\\j\\workspace\\x86_checked_w---4346325a\\_\\fx\\external\\runtime\\runtime.depproj]\r\n\r\nBuild FAILED.\r\n\r\nD:\\j\\workspace\\x86_checked_w---4346325a\\_\\fx\\.dotnet\\sdk\\3.0.100-preview3-010431\\NuGet.targets(119,5): error : There is not enough space on the disk. : 'C:\\Users\\dotnet-bot\\.nuget\\packages\\transport.runtime.win-x86.microsoft.netcore.runtime.coreclr\\3.0.0-preview6-27624-71\\tools\\crossgen.pdb' [D:\\j\\workspace\\x86_checked_w---4346325a\\_\\fx\\external\\runtime\\runtime.depproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:54.05\r\nBuild failed.\r\n[D:\\j\\workspace\\x86_checked_w---4346325a\\tests\\scripts\\run-corefx-tests.py]: Error: exit code 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24266","RelatedDescription":"Open issue \"[x86\\windows] error : There is not enough space on the disk\" (#24266)"},{"Id":"437456820","IsPullRequest":false,"CreatedAt":"2019-04-26T01:07:32","Actor":"VincentBu","Number":"24263","RawContent":null,"Title":"[x64] Test failed: Loader/classloader/TypeGeneratorTests/TypeGeneratorTest1183/Generated1183/Generated1183.sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_centos7.1_r2r_gcstress15_tst/138/\r\n\r\n**Failed tests:**\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1183/Generated1183/Generated1183.sh\r\n\r\n**Log:**\r\n```\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1183/Generated1183/Generated1183.sh [FAIL]\r\nAssert failure(PID 125525 [0x0001ea55], Thread: 125525 [0x1ea55]): SanityCheck()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24263","RelatedDescription":"Open issue \"[x64] Test failed: Loader/classloader/TypeGeneratorTests/TypeGeneratorTest1183/Generated1183/Generated1183.sh\" (#24263)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"438014644","IsPullRequest":false,"CreatedAt":"2019-04-28T05:11:03","Actor":"sandcastle","Number":"11259","RawContent":null,"Title":"Add flag to override default tool install behaviour when tool already installed","State":"open","Body":"Currently, running the install command for a tool that is already installed returns an error. This is a real pain when using this in dev and CI scripts as it will abort the script. I.\r\n\r\nIdeally, it should be an idempotent operation and not raise any error like like installing NPM, Yarn, Nuget and many other package managers. But given #9482 was closed and there appears to be no appetite to change the default, can we at least get a flag added to override the behaviour?\r\n\r\n\r\n## Steps to reproduce\r\n\r\n1. Already have the `dotnet-format`\r\n2. Run `dotnet tool install -g dotnet-format`\r\n3. You will get an error\r\n\r\n\r\n## New flag\r\n\r\nAdding a `--slient|-s` or `--no-errors|-ne` flag would work:\r\n\r\n```sh\r\ndotnet tool install -g --slient dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\nRunning the following would not raise an error:\r\n\r\n```sh\r\ndotnet tool install -g -s dotnet-format\r\ndotnet tool install -g -s dotnet-format\r\n```\r\n\r\n\r\n## Example dev/ci script\r\n\r\nHere is an example of a script that would currently blow up:\r\n\r\n```sh\r\n#!/bin/sh\r\nset -e\r\n\r\ncd \"$(dirname \"$0\")/..\"\r\n\r\n# --------\r\n\r\necho \"Installing dependencies\"\r\nif [ \"${1}\" != \"--ci\" ]; then\r\n\r\n  # Error will occur here!\r\n  dotnet tool install -g dotnet-format\r\n\r\nfi\r\n\r\ndotnet restore\r\n```\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```sh\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nPlease let me know if this is something you would like to see a PR for?","Url":"https://github.com/dotnet/cli/issues/11259","RelatedDescription":"Open issue \"Add flag to override default tool install behaviour when tool already installed\" (#11259)"},{"Id":"437472738","IsPullRequest":true,"CreatedAt":"2019-04-27T20:27:00","Actor":"dotnet-maestro[bot]","Number":"11255","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.2\r\n- **Date Produced**: 4/26/2019 2:32 AM\r\n- **Commit**: 7af4517bbcf17b000889c1077ef5976f2b6350ea\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19225.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11255","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11255)"},{"Id":"437936539","IsPullRequest":true,"CreatedAt":"2019-04-27T12:42:05","Actor":"dotnet-maestro[bot]","Number":"11258","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 11:50 PM\r\n- **Commit**: 7d419793e74a2291ecfc9684aafc4dd7cc595361\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19226.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11258","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11258)"},{"Id":"435917356","IsPullRequest":false,"CreatedAt":"2019-04-26T18:30:46","Actor":"danmosemsft","Number":"11231","RawContent":null,"Title":"macOS Startup System.ComponentModel.Win32Exception (13): Permission denied","State":"closed","Body":"@tn-5 commented on [Sat Apr 20 2019](https://github.com/dotnet/coreclr/issues/24146)\n\nWith the latest nightly build of netcore 3 (3.0.100-preview5-011505) it is not possible to run a net core application on macos, it give an exception on startup:\r\nSystem.ComponentModel.Win32Exception (13): Permission denied\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at Microsoft.DotNet.Cli.Utils.Command.Execute()\r\n   at Microsoft.DotNet.Tools.Run.RunCommand.Execute()\r\n   at Microsoft.DotNet.Tools.Run.RunCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\n\n---\n\n@danmosemsft commented on [Mon Apr 22 2019](https://github.com/dotnet/coreclr/issues/24146#issuecomment-485573014)\n\nBased on the linked issue, this seems to depend on install location. I'm pretty sure this isn't runtime. May not be CLI either but moving there seems a better bet.\n\n","Url":"https://github.com/dotnet/cli/issues/11231","RelatedDescription":"Closed issue \"macOS Startup System.ComponentModel.Win32Exception (13): Permission denied\" (#11231)"},{"Id":"437713329","IsPullRequest":false,"CreatedAt":"2019-04-26T15:49:27","Actor":"Kunze","Number":"11257","RawContent":null,"Title":"sdk was not found while building","State":"closed","Body":"## Steps to reproduce\r\nRun \"dotnet build\"\r\n\r\n## Expected  behavior\r\nSuccess on project building\r\n\r\n## Actual behavior\r\nError message:\r\nA compatible SDK version for global.json version: [2.1.4] from [C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src\\global.json] was not found\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\nThe target frameworks for my projects are netcoreapp2.0 and netstandard2.0.\r\nThis is my global.json:\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.1.4\"\r\n  }\r\n}\r\n\r\nIt works if I delete global.json\r\n\r\n## Environment data\r\nPS C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src> dotnet --info\r\nA compatible SDK version for global.json version: [2.1.4] from [C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src\\global.json] was not found\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.603 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nPS C:\\Users\\muril\\Desktop\\xxxxx\\merchants-service\\src>\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11257","RelatedDescription":"Closed issue \"sdk was not found while building\" (#11257)"},{"Id":"436658639","IsPullRequest":true,"CreatedAt":"2019-04-26T12:46:03","Actor":"dotnet-maestro[bot]","Number":"11242","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190423.7\r\n- **Date Produced**: 4/24/2019 12:11 AM\r\n- **Commit**: 59e1bf717c54cabaa8062d2e4293bfbced5db76a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19223.7\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190424.2\r\n- **Date Produced**: 4/24/2019 10:12 PM\r\n- **Commit**: cfadc9cd5fefa5e4e924cd528550d91e0c34b556\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19224.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 3:20 PM\r\n- **Commit**: fc4751df28d67c551ef55bf9bde6b4fea059f321\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19225.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11242","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11242)"},{"Id":"437641105","IsPullRequest":true,"CreatedAt":"2019-04-26T12:05:21","Actor":"dotnet-maestro[bot]","Number":"11256","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11256","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11256)"},{"Id":"437461461","IsPullRequest":false,"CreatedAt":"2019-04-26T01:32:06","Actor":"RyanHill-MSFT","Number":"11254","RawContent":null,"Title":"dotnet build doesn't produce mountable ZIP file","State":"open","Body":"## Steps to reproduce\r\nSee https://github.com/fnbk/world/blob/master/README.md. Originated from https://stackoverflow.com/questions/55786610/deploying-zip-file-to-azure-app-services-not-working\r\n\r\n## Expected  behavior\r\nA zip file containing the contents of wwwroot that could then be mountable by [az webapp](https://docs.microsoft.com/en-us/cli/azure/webapp/deployment/source?view=azure-cli-latest#az-webapp-deployment-source-config-zip)\r\n\r\n## Actual behavior\r\nZIP file is created with a folder structure that mimics the directory structure of the intended files. See illustration below. \r\n\r\n![image](https://user-images.githubusercontent.com/47189704/56777805-5978df00-67a1-11e9-8cd7-9e90c528ce77.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300-preview-010046\r\n Commit:    d6f4b3dc39\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18886\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300-preview-010046\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11254","RelatedDescription":"Open issue \"dotnet build doesn't produce mountable ZIP file\" (#11254)"},{"Id":"437395264","IsPullRequest":true,"CreatedAt":"2019-04-25T20:59:40","Actor":"dotnet-maestro[bot]","Number":"11253","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 8:59 PM\r\n- **Commit**: b788973a620e6db7bc0458d37b449f160e40842f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19225.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11253","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11253)"},{"Id":"437352907","IsPullRequest":true,"CreatedAt":"2019-04-25T19:08:12","Actor":"rainersigwald","Number":"11252","RawContent":null,"Title":"MSBuild 16.1.69 (2.2.3xx)","State":"open","Body":"This hasn't yet been inserted into VS ([internal PR](https://dev.azure.com/devdiv/DevDiv/MSBuild/_git/VS/pullrequest/177485)), but the QB has indicated that he'll take it so I think it's safe to go ahead here.","Url":"https://github.com/dotnet/cli/pull/11252","RelatedDescription":"Open PR \"MSBuild 16.1.69 (2.2.3xx)\" (#11252)"},{"Id":"437352196","IsPullRequest":true,"CreatedAt":"2019-04-25T19:06:16","Actor":"rainersigwald","Number":"11251","RawContent":null,"Title":"MSBuild 16.1.69 (2.1.7xx)","State":"open","Body":"This hasn't yet been inserted into VS ([internal PR](https://dev.azure.com/devdiv/DevDiv/MSBuild/_git/VS/pullrequest/177485)), but the QB has indicated that he'll take it so I think it's safe to go ahead here.","Url":"https://github.com/dotnet/cli/pull/11251","RelatedDescription":"Open PR \"MSBuild 16.1.69 (2.1.7xx)\" (#11251)"},{"Id":"437237364","IsPullRequest":false,"CreatedAt":"2019-04-25T14:40:35","Actor":"agpreynolds","Number":"11250","RawContent":null,"Title":"dotnet build fails for C++ projects","State":"open","Body":"I'm having an issue working with the dotnet tools and c++ projects. I initially encountered this issue using a c++ project as a reference to a C# project. However I have replicated it using a brand new c++ project in it's own solution.\r\n\r\nI'm probably raising this issue at the wrong part of the build chain, but any help would be greatly appreciated.\r\n\r\n## Steps to reproduce\r\n1. Create a new C++ Dynamic link library in Visual Studio 2019\r\n2. From the solution folder run `dotnet build`\r\n\r\n[CPlusPlusTest.zip](https://github.com/dotnet/cli/files/3117421/CPlusPlusTest.zip)\r\n\r\n## Expected  behavior\r\n\r\nSolution builds successfully\r\n\r\n## Actual behavior\r\n\r\n> error MSB4019: The imported project \"C:\\Microsoft.Cpp.Default.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n\r\nIt seems that the $(VCTargetsPath) variable is not being evaluated. I thought this might be just my machine having the issue, but i'm also seeing the same issue building the project in a server environment.\r\n\r\n`<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />`\r\n\r\nStrangely the solution builds fine from the visual studio UI\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.203\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11250","RelatedDescription":"Open issue \"dotnet build fails for C++ projects\" (#11250)"},{"Id":"436658469","IsPullRequest":true,"CreatedAt":"2019-04-25T12:46:01","Actor":"dotnet-maestro[bot]","Number":"11241","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11241","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11241)"},{"Id":"437166877","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:33","Actor":"dotnet-maestro[bot]","Number":"11249","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190424.1\r\n- **Date Produced**: 4/24/2019 12:53 PM\r\n- **Commit**: 7949e578e828aa16d1491c726c5b536ecfa14e42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19224.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190425.1\r\n- **Date Produced**: 4/25/2019 12:50 PM\r\n- **Commit**: 10a7e623ce57b95db5f420b2cabf59e0d58bf83d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19225.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190426.1\r\n- **Date Produced**: 4/26/2019 12:56 PM\r\n- **Commit**: 6174b5bbd0693b4c8db24eeaf7e15a77f211ba8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19226.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11249","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#11249)"},{"Id":"436890788","IsPullRequest":true,"CreatedAt":"2019-04-24T20:26:02","Actor":"dotnet-bot","Number":"11248","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11248","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11248)"},{"Id":"436861221","IsPullRequest":true,"CreatedAt":"2019-04-24T19:56:44","Actor":"johnbeisner","Number":"11247","RawContent":null,"Title":"Rebuild release/2.2.2xx","State":"closed","Body":"Updates to the ReadME in order to rebuild release 2.2.2xx\r\n","Url":"https://github.com/dotnet/cli/pull/11247","RelatedDescription":"Closed or merged PR \"Rebuild release/2.2.2xx\" (#11247)"},{"Id":"436850144","IsPullRequest":true,"CreatedAt":"2019-04-24T19:47:56","Actor":"johnbeisner","Number":"11246","RawContent":null,"Title":"Rebuild release/2.1.6xx","State":"closed","Body":"Updates to the ReadME in order to rebuild release 2.1.6xx\r\n","Url":"https://github.com/dotnet/cli/pull/11246","RelatedDescription":"Closed or merged PR \"Rebuild release/2.1.6xx\" (#11246)"},{"Id":"436790332","IsPullRequest":true,"CreatedAt":"2019-04-24T18:09:14","Actor":"johnbeisner","Number":"11245","RawContent":null,"Title":"Update the BranchInfo for release/2.1.7xx","State":"closed","Body":"Update the BranchInfo for release/2.1.7xx\r\n","Url":"https://github.com/dotnet/cli/pull/11245","RelatedDescription":"Closed or merged PR \"Update the BranchInfo for release/2.1.7xx\" (#11245)"},{"Id":"436790271","IsPullRequest":true,"CreatedAt":"2019-04-24T18:09:11","Actor":"johnbeisner","Number":"11244","RawContent":null,"Title":"Update the BranchInfo for release/2.2.3xx","State":"closed","Body":"Update the BranchInfo for release/2.2.3xx","Url":"https://github.com/dotnet/cli/pull/11244","RelatedDescription":"Closed or merged PR \"Update the BranchInfo for release/2.2.3xx\" (#11244)"},{"Id":"436661947","IsPullRequest":true,"CreatedAt":"2019-04-24T12:54:35","Actor":"dotnet-maestro[bot]","Number":"11243","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190423.1\r\n- **Date Produced**: 4/23/2019 12:54 PM\r\n- **Commit**: a5c047f4815e9a83c98f0cfb77b3554588d5db84\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19223.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11243)"},{"Id":"436439304","IsPullRequest":true,"CreatedAt":"2019-04-24T00:01:19","Actor":"dotnet-bot","Number":"11240","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11240","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#11240)"},{"Id":"436400585","IsPullRequest":true,"CreatedAt":"2019-04-23T23:13:50","Actor":"johnbeisner","Number":"11238","RawContent":null,"Title":"release/2.2.3xx: Update debain jessie image","State":"closed","Body":"The \"Dotnet CLI [AllLinuxDistrosNativeInstallers][x64][release-2.1_2.2-no-suffix]\" leg of the release/2.1.7xx CLI build is failing:\r\n\r\n**Failed to fetch http://httpredir.debian.org/debian/dists/jessie-updates/InRelease  Unable to find expected entry 'main/binary-amd64/Packages' in Release file (Wrong sources.list entry or malformed file)**\r\n\r\ndebian.org re-organized their folders anD deleted \"jessie-updates\". Cherry-picking the change that addresses this. \r\n\r\nThe release/2.2.3xx hasn't had a successful build of all legs yet - this should solve the problem.","Url":"https://github.com/dotnet/cli/pull/11238","RelatedDescription":"Closed or merged PR \"release/2.2.3xx: Update debain jessie image\" (#11238)"},{"Id":"436400597","IsPullRequest":true,"CreatedAt":"2019-04-23T23:10:42","Actor":"johnbeisner","Number":"11239","RawContent":null,"Title":"release/2.1.7xx: Update debain jessie image","State":"closed","Body":"The \"Dotnet CLI [AllLinuxDistrosNativeInstallers][x64][release-2.1_2.2-no-suffix]\" leg of the release/2.1.7xx CLI build is failing:\r\n\r\n**Failed to fetch http://httpredir.debian.org/debian/dists/jessie-updates/InRelease  Unable to find expected entry 'main/binary-amd64/Packages' in Release file (Wrong sources.list entry or malformed file)**\r\n\r\ndebian.org re-organized their folders and deleted \"jessie-updates\". Cherry-picking the change that addresses this. \r\n\r\nThe release/2.1.7xx hasn't had a successful build of all legs yet - this should solve the problem.","Url":"https://github.com/dotnet/cli/pull/11239","RelatedDescription":"Closed or merged PR \"release/2.1.7xx: Update debain jessie image\" (#11239)"},{"Id":"436098429","IsPullRequest":true,"CreatedAt":"2019-04-23T22:10:10","Actor":"vitek-karas","Number":"11233","RawContent":null,"Title":"Add --roll-forward command line usage","State":"closed","Body":"The new roll forward feature introduces a new command line option `--roll-forward`. It's implemented by the host, but the command line help is sometimes shown from the code in CLI repo.\r\n\r\nThe feature is added in dotnet/core-setup#5891\r\n\r\nThis change modifies the command line help to show `--roll-forward`.\r\nIt also removes the `--roll-forward-on-no-candidate-fx`. This setting is still supported, but the intent is to obsolete it. The new `--roll-forward` fully replaces it.\r\n\r\nFixes #11213 ","Url":"https://github.com/dotnet/cli/pull/11233","RelatedDescription":"Closed or merged PR \"Add --roll-forward command line usage\" (#11233)"},{"Id":"436151065","IsPullRequest":true,"CreatedAt":"2019-04-23T22:09:00","Actor":"dotnet-maestro[bot]","Number":"11235","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190422.14\r\n- **Date Produced**: 4/23/2019 12:16 AM\r\n- **Commit**: 792478638e670b5a916c725cc416905cd9f9f78a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19222.14\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11235","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11235)"},{"Id":"436252978","IsPullRequest":true,"CreatedAt":"2019-04-23T16:11:01","Actor":"dotnet-maestro[bot]","Number":"11237","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/23/2019 3:19 PM\r\n- **Commit**: e854a58b469c2b4a660fc6e448657d1dd8e40ab9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19223.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11237","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#11237)"},{"Id":"436154443","IsPullRequest":true,"CreatedAt":"2019-04-23T13:04:17","Actor":"dotnet-maestro[bot]","Number":"11236","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190420.1\r\n- **Date Produced**: 4/20/2019 12:43 PM\r\n- **Commit**: 7a747389b05f83a35470fec2c469a984ffcc1779\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19220.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11236","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11236)"},{"Id":"436150891","IsPullRequest":true,"CreatedAt":"2019-04-23T12:45:24","Actor":"dotnet-maestro[bot]","Number":"11234","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11234","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11234)"},{"Id":"435881727","IsPullRequest":false,"CreatedAt":"2019-04-23T01:06:08","Actor":"jkears","Number":"11230","RawContent":null,"Title":"DotNet New -n is not renaming custom template","State":"closed","Body":"## Steps to reproduce\r\n1. In a folder D:\\\\ProjectTemplates\\SomeCo.DomainTemplate.CSharp copy in a working c# class library project and rename it to **DomainTemplate.csproj**\r\n2. Add new subfolder in project root folder called .**template.config**\r\n3. Create a new **template.json** file in the .template.config folder with the following content ...\r\n{\r\n    \"$schema\": \"http://json.schemastore.org/template\",\r\n    \"author\": \"Me\",\r\n    \"classifications\": [ \"Domain\", \"Class Library\"],\r\n    \"identity\": \"SomeCo.DomainTemplate.CSharp\",\r\n    \"name\": \"SomeCo Domain Class Library\",\r\n    \"shortName\": \"scdomain\",\r\n    \"sourceName\": \"SomeCo.DomainTemplate\",      \r\n    \"preferNameDirectory\" : true\r\n   \r\n}\r\n\r\n4. Install template as follows\r\n**dotnet new -i D:\\ProjectTemplates\\SomeCo\\DomainTemplate\\CSharp**\r\nverify custom template is installed\r\n\r\n5. Create new project in a known empty folder\r\n**dotnet new scdomain --name domaina -o domaina** \r\n\r\n## Expected  behavior\r\nThat a new subfolder is created called domaina containing my custom template was created and renamed to domaina.csproj\r\n\r\n## Actual behavior\r\nA new subfolder is created called domaina and although the csproj that my custom template was created based upon is there it has the name of the project that my template had, in my case  DomainTemplate.csproj\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.202\r\n Commit:    8a7ff6789d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.202\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.3\r\n  Commit:  6b8ad509b6\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11230","RelatedDescription":"Closed issue \"DotNet New -n is not renaming custom template\" (#11230)"},{"Id":"435938436","IsPullRequest":false,"CreatedAt":"2019-04-22T23:51:18","Actor":"richlander","Number":"11232","RawContent":null,"Title":"Enable CLI config to disable preview warnings","State":"open","Body":"I'd love a config setting that disables the preview warnings. I use previews 99% of the time, and would love cleaner CLI spew ... it's a lot of text!\r\n\r\n```console\r\n/usr/local/share/dotnet/sdk/3.0.100-preview4-011222/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/Users/rich/git/sudoku-solver/src/sudoku-solver/sudoku-solver.csproj]\r\n```","Url":"https://github.com/dotnet/cli/issues/11232","RelatedDescription":"Open issue \"Enable CLI config to disable preview warnings\" (#11232)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-21T18:54:16","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-19T19:00:10","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"closed","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Closed issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:44","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"closed","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Closed or merged PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:31","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"closed","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Closed or merged PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"closed","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Closed or merged PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-19T01:28:32","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"SUGGESTION: Please Make AsnReader And AnsWriter Public","State":"closed","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Closed issue \"SUGGESTION: Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"437886516","IsPullRequest":true,"CreatedAt":"2019-04-28T00:06:36","Actor":"davidsh","Number":"37238","RawContent":null,"Title":"Add proxy environment variables support for Windows","State":"closed","Body":"Changed the Windows version of SocketsHttpHandler so that it will honor the same environment\r\nvariables similar to the Linux and OSX versions. If the environment variables are not set\r\nthen it reverts back to the Windows WinInet/IE settings behavior.\r\n\r\nI added several kinds of unit and end-to-end tests to verify the SystemProxyInfo class is\r\nmaking the correct choice for all the different platforms regarding whether the\r\nHttpEnvironmentProxy or platform proxy (HttpSystemProxy for Windows and MacProxy for OSX)\r\nis used.\r\n\r\nFixes #37187","Url":"https://github.com/dotnet/corefx/pull/37238","RelatedDescription":"Closed or merged PR \"Add proxy environment variables support for Windows\" (#37238)"},{"Id":"437980457","IsPullRequest":true,"CreatedAt":"2019-04-27T23:22:34","Actor":"stephentoub","Number":"37251","RawContent":null,"Title":"Give SocketsHttpHandler more descriptive error messages","State":"closed","Body":"Currently lots of parsing failures just result in an exception stating \"The server returned an invalid or unrecognized response.\"  We can instead be more descriptive about what the problem is in most cases.\r\n\r\ncc: @davidsh, @geoffkizer, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/37251","RelatedDescription":"Closed or merged PR \"Give SocketsHttpHandler more descriptive error messages\" (#37251)"},{"Id":"437990642","IsPullRequest":true,"CreatedAt":"2019-04-27T22:34:11","Actor":"Wraith2","Number":"37254","RawContent":null,"Title":"SqlClient optimize SqlDataReader async method allocations","State":"open","Body":"Profiling the DataAccessPerformance project which emulates the TechEmpower fortunes benchmark shows that common async operations like ReadAsync generate context objects and delegates each time they are called which are then dropped for the GC to handle.\r\n\r\nThis PR changes the implementation of a common pattern used in similar async functions. This is currently implemented using `InvokeRetryable` `ContinueRetryable` and `CompleteRetryable`. It took some time to work out just what these functions were doing and how data flows between them and having done so I chose to rename them to Resumable instead of Retryable because retry is commonly (though you could argue incorrectly) used in contexts where we mean that an exception has occurred and we are going to try again which is not how these functions work, any exception is immediate and not retried.\r\n\r\nWhen [ReadAsync](https://github.com/dotnet/corefx/blob/610fa286999c78b841e17ea0c301c0986426635d/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs#L4268) is called the function attempts to satisfy the call synchronously if possible. If it is not possible it [generates](https://github.com/dotnet/corefx/blob/610fa286999c78b841e17ea0c301c0986426635d/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs#L4381) an async closure and func and then passes those to the retry functions. This generation of closure and function is currently per-call.\r\n\r\nI have removed all uses of the context closures by wrapping the common pattern in an abstract `Resumable<T>` class which contains common functionality. This class is then inherited and context data added to it for each of the changed async method, Because each operation now has a dedicated class static funcs can be created for the callback removing the repeated allocation of the func. The objects themselves may be reused because the `SqlDataReader` only allows a single async operation to be active so I have added cached objects for `IsDBNullAsync` and `ReadAsync` which means that only the first call to each will allocate the cached object after that they will be reused. Less commonly used async functions like `HasNextAsync` and `ReadBytesAsync` are not cahed, `GetfieldValueAsync<T>` is not cached because the range of T is unbounded.\r\n\r\nProfiles before:\r\n![readerasync-master](https://user-images.githubusercontent.com/13322696/56855757-beb90580-6944-11e9-8e3e-5722e6123379.PNG)\r\n\r\nAfter:\r\n![readerasync-branch](https://user-images.githubusercontent.com/13322696/56855759-c082c900-6944-11e9-9066-c643a8631a29.PNG)\r\n\r\nbenchmark results are small because of the prevalence of snapshot allocations, but worth having.\r\n\r\n| name | sync | threads | TPS  | stdev | description |\r\n| ---- | ---- | ------- | ---: | ----: | :---------- |\r\n|ado-sqlclient+async+64|async|64|59190|1675|asyncread master|\r\n|ado-sqlclient+async+64|async|64|60073|1650|asyncread branch|\r\n\r\nso a 1.5% throughput increase.\r\n\r\nManual and functional test pass in native mode. DataAccessPerfomance under pure load and profilers has no problems.\r\n/cc area owners @AfsanehR, @tarikulsabbir, @Gary-Zh , @David-Engel , people interested in perf @divega @roji @saurabh500","Url":"https://github.com/dotnet/corefx/pull/37254","RelatedDescription":"Open PR \"SqlClient optimize SqlDataReader async method allocations\" (#37254)"},{"Id":"437982055","IsPullRequest":true,"CreatedAt":"2019-04-27T21:11:54","Actor":"stephentoub","Number":"37253","RawContent":null,"Title":"Disable sporadically failing HttpClientHandler test","State":"closed","Body":"#37250\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/37253","RelatedDescription":"Closed or merged PR \"Disable sporadically failing HttpClientHandler test\" (#37253)"},{"Id":"437980943","IsPullRequest":true,"CreatedAt":"2019-04-27T20:26:10","Actor":"GrabYourPitchforks","Number":"37252","RawContent":null,"Title":"Add more UTF-16 validation tests","State":"open","Body":"Unit tests for https://github.com/dotnet/coreclr/pull/24286. CI running with `COMPLUS_ENABLESSE2=0` will fail until that PR makes its way through coreclr and the corresponding nightly gets inserted into corefx.","Url":"https://github.com/dotnet/corefx/pull/37252","RelatedDescription":"Open PR \"Add more UTF-16 validation tests\" (#37252)"},{"Id":"437949492","IsPullRequest":true,"CreatedAt":"2019-04-27T20:25:28","Actor":"Scooletz","Number":"37244","RawContent":null,"Title":"Possible improvements for the concurrent queue","State":"closed","Body":"This is a highly experimental PR. A few optimizations could be considered like:\r\n\r\n- using `ref` locals for slots. Once obtained they could be used\r\n- once I understand how to do partials for CoreCLR (I saw https://github.com/dotnet/corefx/tree/master/src/Common/src/CoreLib#conventions ), possibly consider using Unsafe for accessing\r\n- pseudo-randomize access to slots (use bitwise operators mix indexes and lower a possibility of cache trashing)\r\n\r\nThis needs benchmarks for at least two scenarios MPMC SPSC as they might be impaired by the changes.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37244","RelatedDescription":"Closed or merged PR \"Possible improvements for the concurrent queue\" (#37244)"},{"Id":"437980315","IsPullRequest":false,"CreatedAt":"2019-04-27T20:19:07","Actor":"stephentoub","Number":"37250","RawContent":null,"Title":"UseCallback_HaveNoCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_ProxyAuthenticationRequiredStatusCode failing sporadically","State":"open","Body":"When I run the System.Net.Http test suite locally, the `System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ServerCertificates_Test.UseCallback_HaveNoCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_ProxyAuthenticationRequiredStatusCode` test fails sporadically, maybe once out of every five runs.\r\n\r\n```\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ServerCertificates_Test.UseCallback_HaveNoCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_ProxyAuthenticationRequiredStatusCode [FAIL]\r\n        System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n        ---- System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..\r\n        -------- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host.\r\n        Stack Trace:\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnection.cs(730,0): at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs(550,0): at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync(HttpConnection connection, HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs(521,0): at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs(675,0): at System.Net.Http.HttpConnectionPool.EstablishProxyTunnel(CancellationToken cancellationToken)\r\n          F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs(759,0): at System.Threading.Tasks.ValueTask`1.get_Result()\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs(620,0): at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n          F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs(759,0): at System.Threading.Tasks.ValueTask`1.get_Result()\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs(400,0): at System.Net.Http.HttpConnectionPool.GetHttp2ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n          F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\ValueTask.cs(759,0): at System.Threading.Tasks.ValueTask`1.get_Result()\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs(508,0): at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\RedirectHandler.cs(33,0): at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs(475,0): at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.ServerCertificates.cs(158,0): at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.UseCallback_HaveNoCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_ProxyAuthenticationRequiredStatusCode()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n          ----- Inner Stack Trace -----\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnection.cs(1443,0): at System.Net.Http.HttpConnection.FillAsync()\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnection.cs(1349,0): at System.Net.Http.HttpConnection.ReadNextResponseHeaderLineAsync(Boolean foldedHeadersAllowed)\r\n          D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnection.cs(536,0): at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)\r\n          ----- Inner Stack Trace -----\r\n```","Url":"https://github.com/dotnet/corefx/issues/37250","RelatedDescription":"Open issue \"UseCallback_HaveNoCredsAndUseAuthenticatedCustomProxyAndPostToSecureServer_ProxyAuthenticationRequiredStatusCode failing sporadically\" (#37250)"},{"Id":"437881884","IsPullRequest":true,"CreatedAt":"2019-04-27T18:48:53","Actor":"bartonjs","Number":"37237","RawContent":null,"Title":"Ensure that invalid AIA, CDP, and OCSP extensions don't throw.","State":"closed","Body":"Fixes #36606.","Url":"https://github.com/dotnet/corefx/pull/37237","RelatedDescription":"Closed or merged PR \"Ensure that invalid AIA, CDP, and OCSP extensions don't throw.\" (#37237)"},{"Id":"437868888","IsPullRequest":true,"CreatedAt":"2019-04-27T18:47:36","Actor":"bartonjs","Number":"37233","RawContent":null,"Title":"Add Ubuntu 19.04 RID","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37233","RelatedDescription":"Closed or merged PR \"Add Ubuntu 19.04 RID\" (#37233)"},{"Id":"437969395","IsPullRequest":false,"CreatedAt":"2019-04-27T18:08:04","Actor":"gthvidsten","Number":"37249","RawContent":null,"Title":"Proposal: Inject existing object into MEF2","State":"open","Body":"MEF1 has method `ComposeExportedValue<T>(T exportedValue)`. MEF2 should have a similar functionality in `System.Composition.Hosting.ConfigurationContainer` (as discussed in #11856 and #3636)\r\n\r\n**Suggested API**\r\n\r\n```\r\npublic ContainerConfiguration WithInstance<TExport> (TExport instance);\r\npublic ContainerConfiguration WithInstance<TExport> (string contractName, TExport instance);\r\npublic ContainerConfiguration WithInstance (Type t, object instance);\r\npublic ContainerConfiguration WithInstance (Type t, string contractName, object instance);\r\n```\r\n\r\n*(Thanks to @NEKIT-Boss for the examples in #11856)*\r\n\r\n**Usage**\r\n\r\n```\r\nContainerConfiguration containerConfig = new ContainerConfiguration()\r\n    .WithAssembly(GetType().Assembly)\r\n    .WithInstance<IExample>(new Example());\r\n\r\nvar container = containerConfig.CreateContainer();\r\nvar example = container.GetExport<IExample>();\r\n```","Url":"https://github.com/dotnet/corefx/issues/37249","RelatedDescription":"Open issue \"Proposal: Inject existing object into MEF2\" (#37249)"},{"Id":"437963525","IsPullRequest":true,"CreatedAt":"2019-04-27T17:03:29","Actor":"sdmaclea","Number":"37248","RawContent":null,"Title":"WIP ALC SatelliteAssemblies tests","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/37248","RelatedDescription":"Open PR \"WIP ALC SatelliteAssemblies tests\" (#37248)"},{"Id":"437798909","IsPullRequest":false,"CreatedAt":"2019-04-27T16:40:03","Actor":"cadilhac","Number":"37226","RawContent":null,"Title":"Unable to load a resource from a .net dll","State":"closed","Body":"As with .net framework, I'm trying to load a resource. For instance:\r\n\r\n```\r\nResourceManager systemRM = new ResourceManager(\"System\", Assembly.GetAssembly(typeof(CategoryAttribute)));\r\nvar str = systemRM.GetString(\"PropertyCategoryDefault\", System.Globalization.CultureInfo.CurrentUICulture);\r\n```\r\n\r\nI get a MissingManifestResourceException:\r\n\r\n> \"Could not find any resources appropriate for the specified culture or the neutral culture. Make sure \"System.resources\" was correctly embedded or linked into assembly \"System.ComponentModel.Primitives\" at compile time, or that all the satellite assemblies required are loadable and fully signed.\"\r\n\r\nsystemRM.GetResourceSet(CultureInfo.InvariantCulture, true, false) also returns null.\r\n","Url":"https://github.com/dotnet/corefx/issues/37226","RelatedDescription":"Closed issue \"Unable to load a resource from a .net dll\" (#37226)"},{"Id":"437914511","IsPullRequest":false,"CreatedAt":"2019-04-27T16:32:23","Actor":"JamesNK","Number":"37240","RawContent":null,"Title":"HTTP2: Provide way to access RST_STREAM reason","State":"closed","Body":"HttpClient does not provide a way to access the RST_STREAM reason returned by the server. The RST_STREAM reason can sometimes be used to communicate status in RPC scenarios: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#errors\r\n\r\nBeing able to access the reason would allow the .NET gRPC client to provide a more specific error to the user.\r\n\r\nThis feature would be useful, but not blocking, to gRPC.","Url":"https://github.com/dotnet/corefx/issues/37240","RelatedDescription":"Closed issue \"HTTP2: Provide way to access RST_STREAM reason\" (#37240)"},{"Id":"437960555","IsPullRequest":true,"CreatedAt":"2019-04-27T16:31:56","Actor":"davidsh","Number":"37247","RawContent":null,"Title":"[NO MERGE] Check WebProxy tests with loopback DNS","State":"open","Body":"Contributes to #13464 and #23766","Url":"https://github.com/dotnet/corefx/pull/37247","RelatedDescription":"Open PR \"[NO MERGE] Check WebProxy tests with loopback DNS\" (#37247)"},{"Id":"437958018","IsPullRequest":false,"CreatedAt":"2019-04-27T16:04:29","Actor":"sdmaclea","Number":"37246","RawContent":null,"Title":"Build and test layout incorrect when consuming classlib with satellite assembly.","State":"open","Body":"Given a project reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nTracking dotnet/sdk#3185\r\n\r\n/cc @jkotas @tarekgh @vivmishra I reported in SDK.\r\n","Url":"https://github.com/dotnet/corefx/issues/37246","RelatedDescription":"Open issue \"Build and test layout incorrect when consuming classlib with satellite assembly.\" (#37246)"},{"Id":"437957102","IsPullRequest":false,"CreatedAt":"2019-04-27T15:55:06","Actor":"LWChris","Number":"37245","RawContent":null,"Title":"Suggestions: Add .UniqueOrDefault() to handle multiple occurrences without Exception","State":"open","Body":"### Problem\r\n\r\nCurrently, providing `First`, `Last` and `Single` (and their `…OrDefault` variants), LINQ offers three ways of retrieving **one** element that meets certain criteria out of many candidates.\r\n\r\nThe `…OrDefault` variants provide a way to avoid the `InvalidOperationException` for `n == 0`. So we're good on that side.\r\n\r\nHowever LINQ does currently not provide an easy way allowing you to differentiate between `n == 1` and `n > 1` without the necessity to introduce exception handling: `FirstOrDefault` and `LastOrDefault` return an element whether or not it's the only matching one. `SingleOrDefault` does not return an element, but throws an `InvalidOperationException`.\r\n\r\n### Proposed solution\r\n\r\nI'm proposing `UniqueOrDefault` as an addition to the LINQ API. The method retrieves an element in case it's the only matching element, and `default(T)` in case of `n == 0` **and** `n > 1`.\r\n\r\n![UniqueOrDefault](https://user-images.githubusercontent.com/845152/56851276-79c5ac80-690d-11e9-98f5-d77233c59b94.png)\r\n\r\n### Use Case\r\n\r\nI used this method in various projects for pre-selecting a value:\r\n\r\n```cs\r\nprivate string TryGetAutoCompletion(string input) {\r\n    return CurrentEntries.UniqueOrDefault(e => e.StartsWith(input));\r\n}\r\n```\r\n\r\n```cs\r\nvar availableOptions = options.Where(o => IsOptionApplicable(o, currentSetup));\r\n\r\n// If there's only one option applicable, use that,\r\n// otherwise select default option if unambiguous.\r\nvar selectedOption = availableOptions.UniqueOrDefault()\r\n    ?? availableOptions.UniqueOrDefault(o => o.IsDefault);\r\n\r\nif (selectedOption == null) {\r\n    // No unambiguous go-to option. Let the user pick one.\r\n    selectedOption = ShowOptionSelectDialog(availableOptions);\r\n}\r\n```\r\n### Remarks\r\n\r\nOne important characteristic of my use cases is that you don't need to distinguish between `n == 0` and `n > 1`, because all you're asking is \"Is there an unambiguous choice?\". So it doesn't matter _why_ we don't have a result, it's enough to know _that_ we didn't get one.\r\n\r\nWith the possiblity of returning tuples in C# and VB.NET 2017, we _may_ consider returning a tuple `(int count, T value)` to enable differentiating that as well, but I don't know if (a) **all** languages with access to LINQ are capable of tuple returns, and (b) I'd rather stick closer to the API of `SingleOrDefault` instead of introducing the first and only method to the LINQ API that makes use of tuple return values.\r\n\r\nNote that I do not recommend to add the `Unique` function as well. Maintaining the current pattern, that method would have to throw for `n == 0` but return `default(T)` for `n > 1`.\r\n\r\nAlthough this combination is indeed missing in the grid, I find that the question of uniqueness is binary, not ternary. Either there is a unique choice, or there isn't. And if there isn't, you would either want it to throw always or never consistently. That is, you want `Single` (always throw) or `UniqueOrDefault` (never throw).\r\n\r\nI feel this is a question of naming though. While having varying behavior for a method named \"Unique\" doesn't feel intuitive to me, other names may do a better job there. So if you have a method name that intuitively conveys it will throw for `n == 0` but return `default(T)` for `n > 1` and that can be extended by `…OrDefault` to gain the functionality of my proposed `UniqueOrDefault`, then I'm all for it. Because then you **truly** have free choice of how to handle `n == 0` and `n > 1` individually according to your needs.\r\n\r\n### Implementation\r\n\r\nThe implementation is identical to `SingleOrDefault` but with `return default(TSource);` instead of `ThrowHelper.ThrowMoreThanOneElementException();`. Not much more to say about that I think.","Url":"https://github.com/dotnet/corefx/issues/37245","RelatedDescription":"Open issue \"Suggestions: Add .UniqueOrDefault() to handle multiple occurrences without Exception\" (#37245)"},{"Id":"437937570","IsPullRequest":true,"CreatedAt":"2019-04-27T14:51:21","Actor":"Dotnet-GitSync-Bot","Number":"37242","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/37242","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37242)"},{"Id":"437938063","IsPullRequest":true,"CreatedAt":"2019-04-27T13:15:37","Actor":"dotnet-maestro[bot]","Number":"37243","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190427.02\r\n- **Date Produced**: 4/27/2019 10:16 AM\r\n- **Commit**: dfdc7bc432fc67e1cba68176d664bff16c7fff84\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27627-02\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview6-27627-02\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview6-27627-02\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#37243)"},{"Id":"437935123","IsPullRequest":true,"CreatedAt":"2019-04-27T11:43:30","Actor":"Wraith2","Number":"37241","RawContent":null,"Title":"SqlClient optimize SqlDataReader and TdsStateParser snapshots","State":"open","Body":"Profiling the [DataAccessPerformance](https://github.com/aspnet/DataAccessPerformance) project which emulates the [TechEmpower fortunes benchmark](https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=fortune) shows that a lot the work done by SqlClient is spent in managing state snapshots. The data returned to the user is all string instances which are placed in a Fortune object but these aren't the dominators in the memory profile.\r\n\r\nThis PR changes the implementation of the snapshot mechanisms used by `SqlDataReader` and `TdsStateParserObject` to:\r\n- Keep track of a cached `SqlDataReader` snapshot object once one is created so that it can be efficiently reused. This is possible because a only a single async operation is permitted at any time. Access to the cached instance uses interlocked to take the instance so that it cannot ever be used twice and lazily returns the cleared object using standard assignment because creating a new one every now again again isn't a problem as long as it is usually reused. Under load one snapshot was created per reader and reused cleanly.\r\n\r\n- Keep track of a cached `TdsStateParserObject` snapshot in a similar way to `SqlDataReader` but using interlocked for both rent and return to the cache variable. \r\n\r\n- Use slightly smaller data structures by compressing multiple boolean fields on `TdsParserStateObject` into a flags enumeration, this makes multiple flags copy and restore a single copy not 5. All access to the affected properties is now done through accessor functions.\r\n\r\n- Introduce a small class `Snapshot.PLPData` to store any partially length prefixed data state if it is used, if it is not used the allocation object object and continual tracking of 128 bits of data it contains are avoided.\r\n\r\n- Change `Snapshot.PacketData` to be a self assembling singly linked list. This removes `List<PacketData>` and linked `PacketData[]` allocations when taking snapshots and allows a cached PacketData link to be retained in the snapshot since one will always be required is a snapshot is used.\r\n\r\nI also removed most of the setting of `TdsParserStateObject` variables to default values so it is now easier to tell when they are initialized to non-default values. The only exceptions are some variables which must be initialized to default because they are only touched through reflection in testing so the compiler will complain that it can't see them being set.\r\n\r\nProfile results before, green are the result objects we actually want:\r\n![snapshot-master](https://user-images.githubusercontent.com/13322696/56849086-170dea00-68e8-11e9-981b-3031564bc544.PNG)\r\n\r\nAfter: \r\n![snapshot-branch](https://user-images.githubusercontent.com/13322696/56849093-2725c980-68e8-11e9-876d-5bc8a6205006.PNG)\r\n\r\nI have another branch which removes 3 of the 4 intervening async machinery allocations which will give some more gains but they're more modest and it needs a little more polish.\r\n\r\nPerformance results are good\r\n\r\n| name | sync | threads | TPS  | stdev | description |\r\n| ---- | ---- | ------- | ---: | ----: | :---------- |\r\n|ado-sqlclient+async+64|async|64|59184|2175|snapshot master|\r\n|ado-sqlclient+async+64|async|64|69371|1019|snapshot branch|\r\n\r\n17% throughput increase and halved variance in query time.\r\n\r\nManual and functional test pass in native mode. DataAccessPerfomance under pure load and profilers has no problems. \r\n/cc area owners @afsanehr, @tarikulsabbir, @Gary-Zh , @david-engel , people interested in perf @divega @roji @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/37241","RelatedDescription":"Open PR \"SqlClient optimize SqlDataReader and TdsStateParser snapshots\" (#37241)"},{"Id":"437824154","IsPullRequest":false,"CreatedAt":"2019-04-27T07:58:21","Actor":"informatorius","Number":"37228","RawContent":null,"Title":"BitmapData SetPixel()","State":"closed","Body":"System.Drawing.Bitmap class has a SetPixel() method but it is slow for setting many pixels because each call locks in bitmap in the kernel. That is why Bitmap also has a LockBits() method which locks the bitmap and returns a System.Drawing.Imaging.BitmapData for direct manipulation. \r\n\r\nThe problem is this BitmapData class has no easy method for SetPixel() but you need to calculate with IntPtr and stride values. \r\n\r\nI wish extension methods in System.Drawing.Imaging for BitmapData which allow fast SetPixel() for many pixels\r\n","Url":"https://github.com/dotnet/corefx/issues/37228","RelatedDescription":"Closed issue \"BitmapData SetPixel()\" (#37228)"},{"Id":"437876925","IsPullRequest":true,"CreatedAt":"2019-04-27T01:05:19","Actor":"tannergooding","Number":"37236","RawContent":null,"Title":"Fixing the logic in SystemNative_GetTimestampResolution to return the correct \"ticks per second\"","State":"closed","Body":"This should resolve https://github.com/dotnet/corefx/issues/37231. CC. @MichalStrehovsky, @jkotas","Url":"https://github.com/dotnet/corefx/pull/37236","RelatedDescription":"Closed or merged PR \"Fixing the logic in SystemNative_GetTimestampResolution to return the correct \"ticks per second\"\" (#37236)"},{"Id":"437846212","IsPullRequest":false,"CreatedAt":"2019-04-27T01:05:19","Actor":"MichalStrehovsky","Number":"37231","RawContent":null,"Title":"Stopwatch is off by a factor of 100","State":"closed","Body":"I'm seeing Stopwatch.Start/Stopwatch.Stop/Stopwatch.Elapsed.TotalMilliseconds being off by a factor of 100 on WSL with the 3.0.0-preview6-27626-01 version of Microsoft.NETCore.App.\r\n\r\nThings that should take 225 ms (and diffing DateTime.Now reports them as such) get measured as 2.28 ms with Stopwatch.","Url":"https://github.com/dotnet/corefx/issues/37231","RelatedDescription":"Closed issue \"Stopwatch is off by a factor of 100\" (#37231)"},{"Id":"437837200","IsPullRequest":false,"CreatedAt":"2019-04-27T00:10:55","Actor":"tonyatl","Number":"37230","RawContent":null,"Title":"Process.StartTime Access is Denied (.Net Core)","State":"closed","Body":"Is it possible to configure security on an asp.net core 2.2 webapi service so that Process.StartTime can be authorized for access? Documentation alludes to this by mentioning link demands and full-trust, but i don't understand the mechanics to implement them - and examples are very rare to non-existent.\r\n\r\nCurrently i get Access is denied. I do not want to correlate users on each process - ie use the same one. this is not reasonable or feasible for my environment.\r\n\r\ni have detailed the issue here: https://stackoverflow.com/questions/55871898/process-starttime-access-is-denied-net-core\r\n","Url":"https://github.com/dotnet/corefx/issues/37230","RelatedDescription":"Closed issue \"Process.StartTime Access is Denied (.Net Core)\" (#37230)"},{"Id":"437871940","IsPullRequest":true,"CreatedAt":"2019-04-26T22:51:27","Actor":"Anipik","Number":"37235","RawContent":null,"Title":"Add new tests and increases precision upto 10 microseconds in existing tests","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/32430\r\nCoreclr PR https://github.com/dotnet/coreclr/pull/24279\r\n\r\nThese commits will be added to pr when maestro updates new version of coreclr into corefx\r\n","Url":"https://github.com/dotnet/corefx/pull/37235","RelatedDescription":"Open PR \"Add new tests and increases precision upto 10 microseconds in existing tests\" (#37235)"},{"Id":"437871449","IsPullRequest":true,"CreatedAt":"2019-04-26T22:49:15","Actor":"stephentoub","Number":"37234","RawContent":null,"Title":"Enable HTTP/2 in SocketsHttpHandler via HttpRequestMessage.Version","State":"open","Body":"We now respect the version: if it's 1.1, we use 1.1, and if it's 2.0, we try to use HTTP/2.  At the same time, the default for HttpRequestMessage.Version goes back to 1.1, so to use HTTP/2, you opt-in by setting the version explicitly to 2.0.\r\n\r\nThis is almost all tweaking tests.  In a few cases, I noticed some other issues in the tests as I was doing so and fixed them / moved a few things around.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35138\r\nContributes to https://github.com/dotnet/corefx/issues/37224\r\ncc: @geoffkizer, @davidsh, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/37234","RelatedDescription":"Open PR \"Enable HTTP/2 in SocketsHttpHandler via HttpRequestMessage.Version\" (#37234)"},{"Id":"437857636","IsPullRequest":false,"CreatedAt":"2019-04-26T21:47:01","Actor":"Eilon","Number":"37232","RawContent":null,"Title":"could not find file 'System.Net.Http.resources'","State":"open","Body":"_From @Rabbit021 on Friday, 26 April 2019 07:49:19_\r\n\r\n### Describe the bug\r\nMy App Crashe with Unhandled Exception:  could not find file 'System.Net.Http.resources'.\r\nI use independent publish， and I use  class **HttpClient** to request data.\r\nSome times it crash.   when my network is not fine, it crashed frequently\r\n\r\n###  Enviment\r\n1. ASP.NET Core 2.0   in Window Server 2012 R2\r\n2. I publish app with  `dotnet publish my.csproj -c debug -r win7-x64 -o %~dp0publish`\r\n\r\n### Expected behavior\r\n\r\n### Exception \r\n\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not find file 'Syste\r\nm.Net.Http.resources'.\r\n   at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name\r\n, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlM\r\nark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(Cultur\r\neInfo lookForCulture, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(Cultur\r\neInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean creat\r\neIfNotExists, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo reques\r\ntedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stack\r\nMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo cultur\r\ne, Boolean createIfNotExists, Boolean tryParents)\r\n   at System.Resources.ResourceManager.GetString(String name, CultureInfo cultur\r\ne)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.Net.Http.WinHttpHandler.HandleAsyncException(WinHttpRequestState st\r\nate, Exception ex)\r\n   at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, C\r\nontextCallback callback, Object state)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#9771_","Url":"https://github.com/dotnet/corefx/issues/37232","RelatedDescription":"Open issue \"could not find file 'System.Net.Http.resources'\" (#37232)"},{"Id":"437824339","IsPullRequest":true,"CreatedAt":"2019-04-26T20:35:50","Actor":"informatorius","Number":"37229","RawContent":null,"Title":"Provide convenient Bitmap.LockBits() method without parameters","State":"closed","Body":"Provide convenient LockBits method without parameters for easy LockBits get BitmapData comparable to easy UnlockBits set BitmapData.","Url":"https://github.com/dotnet/corefx/pull/37229","RelatedDescription":"Closed or merged PR \"Provide convenient Bitmap.LockBits() method without parameters\" (#37229)"},{"Id":"437808817","IsPullRequest":false,"CreatedAt":"2019-04-26T19:12:19","Actor":"steveharter","Number":"37227","RawContent":null,"Title":"Deserializer should support only getter for IDictionary properties","State":"open","Body":"For objects that expose an IDictionary<,> currently the deserializer requires a public property setter but ideally it should not - it should only require a public getter. The POCO type would create the dictionary itself (likely from within its constructor) and return it from the public getter.\r\n\r\nNote that IList<> currently supports this mode of not having a setter.\r\n\r\nImplementation support for this is incremental:\r\n- Add a `IsPropertyDictionary` to ReadStackFrame \r\n- Add `PopStackOnEndObject` to ReadStackFrame and use accordingly in JsonSerializer.HandleStartObject\\HandleEndObject\r\n- Modify `ApplyValueToEnumerable` to handle the property case.\r\n- Add tests for this including when there is a public setter but the dictionary is already initialized (we should just use the existing instance)\r\n- ...","Url":"https://github.com/dotnet/corefx/issues/37227","RelatedDescription":"Open issue \"Deserializer should support only getter for IDictionary properties\" (#37227)"},{"Id":"437776506","IsPullRequest":true,"CreatedAt":"2019-04-26T17:40:24","Actor":"Anipik","Number":"37225","RawContent":null,"Title":"[Donot review]changing tests according to new implementaiton","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/37225","RelatedDescription":"Open PR \"[Donot review]changing tests according to new implementaiton\" (#37225)"},{"Id":"437895896","IsPullRequest":false,"CreatedAt":"2019-04-25T01:40:31","Actor":"VincentBu","Number":"37239","RawContent":null,"Title":"[arm64] Test failed: System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x1000_tst/177/\r\n\r\n**Failed tests:**\r\nSystem.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n\r\n**Log:**\r\n```\r\nSystem.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows [FAIL]\r\n      System.NullReferenceException : Object reference not set to an instance of an object.\r\n      Stack Trace:\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x1000/_/fx/src/System.IO.Pipelines/src/System/IO/Pipelines/Pipe.cs(288,0): at System.IO.Pipelines.Pipe.CommitUnsynchronized()\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x1000/_/fx/src/System.IO.Pipelines/src/System/IO/Pipelines/Pipe.cs(337,0): at System.IO.Pipelines.Pipe.FlushAsync(CancellationToken cancellationToken)\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x1000/_/fx/src/System.IO.Pipelines/src/System/IO/Pipelines/Pipe.cs(952,0): at System.IO.Pipelines.Pipe.WriteAsync(ReadOnlyMemory`1 source, CancellationToken cancellationToken)\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x1000/_/fx/src/System.IO.Pipelines/src/System/IO/Pipelines/Pipe.DefaultPipeWriter.cs(47,0): at System.IO.Pipelines.Pipe.DefaultPipeWriter.WriteAsync(ReadOnlyMemory`1 source, CancellationToken cancellationToken)\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs0x1000/_/fx/src/System.IO.Pipelines/tests/PipeWriterTests.cs(253,0): at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows()\r\n```","Url":"https://github.com/dotnet/corefx/issues/37239","RelatedDescription":"Open issue \"[arm64] Test failed: System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\" (#37239)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"437976096","IsPullRequest":true,"CreatedAt":"2019-04-27T19:27:20","Actor":"pkulikov","Number":"35323","RawContent":null,"Title":"DynamicFileInfo.cs: fix typo in the constructor","State":"open","Body":"One of the issues found in #34725","Url":"https://github.com/dotnet/roslyn/pull/35323","RelatedDescription":"Open PR \"DynamicFileInfo.cs: fix typo in the constructor\" (#35323)"},{"Id":"437974743","IsPullRequest":false,"CreatedAt":"2019-04-27T19:11:14","Actor":"pkulikov","Number":"35322","RawContent":null,"Title":"Possible NullReferenceException in ObjectFormatterHelpers.cs","State":"open","Body":"When `type` is null, the first operand of `||` evaluates to `false`. That means the second operand is evaluated. The second operand of the `||` operator is `targetTypeName != null && type.FullName == targetTypeName`. If `targetTypeName` is not null, `type.FullName` would throw.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/Scripting/Core/Hosting/ObjectFormatter/ObjectFormatterHelpers.cs#L88-L92\r\n\r\nSource: one of the issues found in #34725","Url":"https://github.com/dotnet/roslyn/issues/35322","RelatedDescription":"Open issue \"Possible NullReferenceException in ObjectFormatterHelpers.cs\" (#35322)"},{"Id":"437972857","IsPullRequest":false,"CreatedAt":"2019-04-27T18:49:11","Actor":"pkulikov","Number":"35321","RawContent":null,"Title":"Possible NullReferenceException in TextViewWindow_InProc.cs","State":"open","Body":"When the exception message is formatted, `action.DisplayText` throws because `action` is null?\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/VisualStudio/IntegrationTest/TestUtilities/InProcess/TextViewWindow_InProc.cs#L380-L385\r\n\r\nSource: one of the issues found in #34725","Url":"https://github.com/dotnet/roslyn/issues/35321","RelatedDescription":"Open issue \"Possible NullReferenceException in TextViewWindow_InProc.cs\" (#35321)"},{"Id":"437972143","IsPullRequest":false,"CreatedAt":"2019-04-27T18:41:03","Actor":"pkulikov","Number":"35320","RawContent":null,"Title":"Possible NullReferenceException in AbstractConvertForToForEachCodeRefactoringProvider.cs","State":"open","Body":"If `collectionType.Type` is really null, then the consequent check throws.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/Features/Core/Portable/ConvertForToForEach/AbstractConvertForToForEachCodeRefactoringProvider.cs#L136-L140\r\n\r\nSource: one of the issues found in #34725","Url":"https://github.com/dotnet/roslyn/issues/35320","RelatedDescription":"Open issue \"Possible NullReferenceException in AbstractConvertForToForEachCodeRefactoringProvider.cs\" (#35320)"},{"Id":"437937239","IsPullRequest":false,"CreatedAt":"2019-04-27T12:10:23","Actor":"canton7","Number":"35319","RawContent":null,"Title":"Suboptimal codegen for conditional access on readonly unconstrained generic field","State":"open","Body":"This is minor. It does not cause incorrect behavior, but it does cause generated code to be larger than it needs to be in some cases.\r\n\r\n**Version Used**: \r\n\r\nMaster (26 April 2019)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class Foo<T>\r\n{\r\n    private readonly T ro;\r\n    private T rw;\r\n    \r\n    public void PrintRo() => Console.WriteLine(ro?.ToString());\r\n    public void PrintRw() => Console.WriteLine(rw?.ToString());\r\n}\r\n```\r\n\r\nLook at the emitted IL for `PrintRo`.\r\n\r\n[SharpLab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwDEB7ZgHgBUA+Sgb0vyD8ABwQBLAG4R4+BHAgpmAOwA2AT3wdZzchSEjxUmVoQB3XfoFCahACz4ACuKUwASswAUASnwBeLoREAJweCMwA/AB0HMwAyjDOAObeXhbWtNj2TmIurqbefgHEIWZRMfFJKboAvpRAA=).\r\n\r\n**Expected Behavior**:\r\n\r\nThe lowered version of `PrintRo` should look something like (in C#):\r\n\r\n```csharp\r\npublic void PrintRo()\r\n{\r\n    T copy = ro;\r\n    Console.WriteLine((copy != null) ? copy.ToString() : null);\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe lowered version of `PrintRo` makes a copy of `ro` correctly, and then the codegen for conditional access pulls out the full force of its \"ensure the receiver is only accessed once while still making sure it receives any mutations\" logic, and emits something like this (in C#):\r\n\r\n```csharp\r\npublic void PrintRo()\r\n{\r\n    T val = ro;\r\n    ref T reference = ref val;\r\n    T val2 = default(T);\r\n    object value;\r\n    if (val2 == null)\r\n    {\r\n        val2 = reference;\r\n        reference = ref val2;\r\n        if (val2 == null)\r\n        {\r\n            value = null;\r\n            goto IL_0038;\r\n        }\r\n    }\r\n    value = reference.ToString();\r\n    goto IL_0038;\r\n    IL_0038:\r\n    Console.WriteLine((string)value);\r\n}\r\n```\r\n\r\n**Discussion**:\r\n\r\nThis involves [`CodeGenerator.EmitLoweredConditionalAccessExpression`](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/CodeGen/EmitExpression.cs,386).\r\n\r\nIt looks like this method got confused. The body of the `PrintRo` method below `T val = ro;` is what is emitted when the receiver of the conditional access is an unconstrained generic which can change between calls (such as the `T rw` field). That's expected in the body of the `PrintRw` method. However in this case the field is `readonly`, and so a copy is created by `EmitReceiverRef` (ultimately [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/CodeGen/EmitAddress.cs,424)), which produces the `T val = ro;`. However the rest of `EmitLoweredConditionalAccessExpression` doesn't notice that it's now working with a copy, and proceeds as if it's accessing the original field.\r\n\r\nLooking [at the blame](https://github.com/dotnet/roslyn/blame/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/Compilers/CSharp/Portable/CodeGen/EmitExpression.cs#L401), it looks like this is probably unintentional.\r\n\r\nThis is a niche case, but it does affect anonymous types' `ToString` methods, [for example](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/Dw27AFnwFkAFAEpW7ThIBuEBPgAe+ALz4AdnADurfAE8l+IvgC+5ChMOVDQA===). This `ToString` method is significantly larger than it needs to be.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35319","RelatedDescription":"Open issue \"Suboptimal codegen for conditional access on readonly unconstrained generic field\" (#35319)"},{"Id":"437906448","IsPullRequest":true,"CreatedAt":"2019-04-27T04:52:47","Actor":"kceiw","Number":"35318","RawContent":null,"Title":"Support TimeTravelTraceInterop in function resolver.","State":"open","Body":"- The function resolver isn't loaded when the base monitor is\r\nTimeTravelTraceInterop, which needs it to resolve function for function\r\nbreakpoint.\r\n- To add TimeTravelTraceInterop to the right vsdconfigxml file, I also\r\nneed to update some package so that it can be built.\r\n\r\n#35317","Url":"https://github.com/dotnet/roslyn/pull/35318","RelatedDescription":"Open PR \"Support TimeTravelTraceInterop in function resolver.\" (#35318)"},{"Id":"437904567","IsPullRequest":false,"CreatedAt":"2019-04-27T04:19:48","Actor":"kceiw","Number":"35317","RawContent":null,"Title":"Roslyn’s function name resolver should support DkmBaseDebugMonitorId.TimeTravelTraceInterop","State":"open","Body":"The function breakpoint isn't set to TimeTravelTraceInterop because of this issue https://devdiv.visualstudio.com/DevDiv/_workitems/edit/824993\r\n","Url":"https://github.com/dotnet/roslyn/issues/35317","RelatedDescription":"Open issue \"Roslyn’s function name resolver should support DkmBaseDebugMonitorId.TimeTravelTraceInterop\" (#35317)"},{"Id":"437882827","IsPullRequest":true,"CreatedAt":"2019-04-27T01:30:06","Actor":"dotnet-bot","Number":"35314","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35314","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35314)"},{"Id":"437889258","IsPullRequest":true,"CreatedAt":"2019-04-27T00:57:13","Actor":"333fred","Number":"35316","RawContent":null,"Title":"Update foreach based on nullable analysis","State":"open","Body":"This makes 2 changes:\r\n1. Reinfer the GetEnumerator method based on nullable analysis of the\r\nforeach expression type.\r\n2. Use that information to update the collection element type based on\r\nthat same analysis.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33257.\r\nFixes https://github.com/dotnet/roslyn/issues/35151.\r\n@dotnet/roslyn-compiler for review.","Url":"https://github.com/dotnet/roslyn/pull/35316","RelatedDescription":"Open PR \"Update foreach based on nullable analysis\" (#35316)"},{"Id":"437885873","IsPullRequest":true,"CreatedAt":"2019-04-27T00:24:10","Actor":"tmat","Number":"35315","RawContent":null,"Title":"Use Arcade SDK infrastructure for building source packages","State":"open","Body":"Requires https://github.com/dotnet/arcade/pull/2634","Url":"https://github.com/dotnet/roslyn/pull/35315","RelatedDescription":"Open PR \"Use Arcade SDK infrastructure for building source packages\" (#35315)"},{"Id":"437882801","IsPullRequest":true,"CreatedAt":"2019-04-27T00:00:27","Actor":"dotnet-bot","Number":"35313","RawContent":null,"Title":"Merge dev16.1-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35313","RelatedDescription":"Open PR \"Merge dev16.1-vs-deps to master-vs-deps\" (#35313)"},{"Id":"437865027","IsPullRequest":true,"CreatedAt":"2019-04-26T23:30:17","Actor":"dotnet-bot","Number":"35305","RawContent":null,"Title":"Merge dev16.1 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35305","RelatedDescription":"Closed or merged PR \"Merge dev16.1 to master\" (#35305)"},{"Id":"437865109","IsPullRequest":true,"CreatedAt":"2019-04-26T23:30:12","Actor":"dotnet-bot","Number":"35307","RawContent":null,"Title":"Merge dev16.1 to dev16.1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-to-dev16.1-vs-deps\ngit reset --hard upstream/dev16.1-vs-deps\ngit merge upstream/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-to-dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35307","RelatedDescription":"Closed or merged PR \"Merge dev16.1 to dev16.1-vs-deps\" (#35307)"},{"Id":"437865120","IsPullRequest":true,"CreatedAt":"2019-04-26T23:30:06","Actor":"dotnet-bot","Number":"35308","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35308","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35308)"},{"Id":"437877986","IsPullRequest":true,"CreatedAt":"2019-04-26T23:25:58","Actor":"genlu","Number":"35312","RawContent":null,"Title":"Add new optprof test for training","State":"open","Body":"We have ported DDRIT.RPS.ManagedLangs to OptProf in this PR\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VS/pullrequest/177588?_a=overview\r\n\r\n@bradselw Is there anything else needs to be done before merging this?\r\n\r\nFYI @jaredpar @tmat @bradselw @dotnet/roslyn-infrastructure ","Url":"https://github.com/dotnet/roslyn/pull/35312","RelatedDescription":"Open PR \"Add new optprof test for training\" (#35312)"},{"Id":"437877417","IsPullRequest":true,"CreatedAt":"2019-04-26T23:21:58","Actor":"gafter","Number":"35311","RawContent":null,"Title":"Handle val escape for the switch expression.","State":"open","Body":"Fixes #35278\r\n\r\n@agocke @chsienki Could you review this please?\r\n","Url":"https://github.com/dotnet/roslyn/pull/35311","RelatedDescription":"Open PR \"Handle val escape for the switch expression.\" (#35311)"},{"Id":"437871840","IsPullRequest":true,"CreatedAt":"2019-04-26T22:51:02","Actor":"ivanbasov","Number":"35310","RawContent":null,"Title":"IntelliCode duplicate items inhibit Ctrl+Space","State":"open","Body":"Starting 16.1, Intellicode is installed with VS by default. It provides extra completion items with same filter text but with⭐ in the display text such as `⭐ Length`. Original items are kept as they were. There occurs duplicate items for ones provided with Intellicode: one with start and another regular.\r\n\r\nThe CTRL+Space action mean commit if unique. Those items become non-unique even if fully typed. CTRL+Space does not work for them.\r\n\r\nInvestigating the issue, we found that CTRL+Space does not work in case if the completion session was started with Delete/Backspace. It seems it never worked: both old and new completions. We do not fix it here. Here is an issue to track: https://github.com/dotnet/roslyn/issues/35301","Url":"https://github.com/dotnet/roslyn/pull/35310","RelatedDescription":"Open PR \"IntelliCode duplicate items inhibit Ctrl+Space\" (#35310)"},{"Id":"437865154","IsPullRequest":true,"CreatedAt":"2019-04-26T22:18:20","Actor":"dotnet-bot","Number":"35309","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35309","RelatedDescription":"Open PR \"Merge master to demos/records\" (#35309)"},{"Id":"437865054","IsPullRequest":true,"CreatedAt":"2019-04-26T22:17:56","Actor":"dotnet-bot","Number":"35306","RawContent":null,"Title":"Merge dev16.1-preview3-vs-deps to dev16.1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview3-vs-deps into dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps\ngit reset --hard upstream/dev16.1-vs-deps\ngit merge upstream/dev16.1-preview3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35306","RelatedDescription":"Open PR \"Merge dev16.1-preview3-vs-deps to dev16.1-vs-deps\" (#35306)"},{"Id":"437861796","IsPullRequest":false,"CreatedAt":"2019-04-26T22:03:48","Actor":"gafter","Number":"35304","RawContent":null,"Title":"Duplicate nullable diagnostics for lambdas in switch expression","State":"open","Body":"Tests like `CheckLambdaInSwitchExpression_01` show that we produce duplicate diagnostics for lambdas in switch expressions.  That's because we don't use placeholders like we do for other expressions where we infer a common type.  However, we don't get the inference correct for lambdas, so that placeholder approach probably won't work.  See also https://github.com/dotnet/roslyn/issues/35302","Url":"https://github.com/dotnet/roslyn/issues/35304","RelatedDescription":"Open issue \"Duplicate nullable diagnostics for lambdas in switch expression\" (#35304)"},{"Id":"437855206","IsPullRequest":true,"CreatedAt":"2019-04-26T21:37:11","Actor":"heejaechang","Number":"35303","RawContent":null,"Title":"perf tweak to run OpenFileOnly analyzers only for open files even if …","State":"open","Body":"…full solution analysis is on but still run for fix all for closed files.\r\n\r\nalso made add using test to excerice OOP code properly","Url":"https://github.com/dotnet/roslyn/pull/35303","RelatedDescription":"Open PR \"perf tweak to run OpenFileOnly analyzers only for open files even if …\" (#35303)"},{"Id":"437855145","IsPullRequest":false,"CreatedAt":"2019-04-26T21:36:57","Actor":"gafter","Number":"35302","RawContent":null,"Title":"Lambdas in array initializers not checked in nullable walker","State":"open","Body":"Lambda expressions in an array initializer are not checked against the new target type of the lambda expression.  Instead, the type from initial binding is used, and (improperly) feeds into inference.\r\n\r\n``` c#\r\n        [Fact, WorkItem(35302, \"https://github.com/dotnet/roslyn/issues/35302\")]\r\n        public void CheckLambdaInArrayInitializer_02()\r\n        {\r\n            var source =\r\n@\"using System;\r\n\r\nclass C\r\n{\r\n    static void G(object? o, string s)\r\n    {\r\n        if (o == null) return;\r\n        var f = M(o);\r\n        _ = f /*T:System.Func<object!>!*/;\r\n        var fa3 = new[] {\r\n            f,\r\n            () => null, // 1\r\n            () => {\r\n                    s = null; // 2\r\n                    return null; // 3\r\n                },\r\n            };\r\n        _ = fa3 /*T:System.Func<object!>![]!*/;\r\n        fa3[0]().ToString();\r\n    }\r\n    static Func<T> M<T>(T t) => () => t;\r\n}\r\n\";\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyTypes();\r\n            comp.VerifyDiagnostics(\r\n                // (12,19): warning CS8603: Possible null reference return.\r\n                //             () => null, // 1\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReturn, \"null\").WithLocation(12, 19),\r\n                // (14,25): warning CS8600: Converting null literal or possible null value to non-nullable type.\r\n                //                     s = null; // 2\r\n                Diagnostic(ErrorCode.WRN_ConvertingNullableToNonNullable, \"null\").WithLocation(14, 25),\r\n                // (15,28): warning CS8603: Possible null reference return.\r\n                //                     return null; // 3\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReturn, \"null\").WithLocation(15, 28));\r\n        }\r\n```\r\n\r\nThere may be similar issues in method type inference, `?:`, switch expressions, etc.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35302","RelatedDescription":"Open issue \"Lambdas in array initializers not checked in nullable walker\" (#35302)"},{"Id":"437852120","IsPullRequest":false,"CreatedAt":"2019-04-26T21:26:26","Actor":"ivanbasov","Number":"35301","RawContent":null,"Title":"completion: CTRL+Space is not applicable in Delete/Backspace triggered session","State":"open","Body":"Both old and new completions. \r\nStart with \r\nclass C\r\n```\r\n{\r\n    void Method()\r\n    {\r\n        var s = \"\";\r\n        s.Length$$\r\n    }\r\n}\r\n```\r\n\r\nIntellisense TriggerOnDelete should be ON\r\nSendBackspace\r\nSendCommitIfUnique\r\n\r\n**Expected**\r\nNo active completion session\r\n`s.Length` is in the current line\r\n\r\n**Actual**\r\nActive completion session\r\n`s.Lengt` is in the current line","Url":"https://github.com/dotnet/roslyn/issues/35301","RelatedDescription":"Open issue \"completion: CTRL+Space is not applicable in Delete/Backspace triggered session\" (#35301)"},{"Id":"437849093","IsPullRequest":true,"CreatedAt":"2019-04-26T21:16:41","Actor":"jasonmalinowski","Number":"35300","RawContent":null,"Title":"Fix applying code actions that change AdditionalDocuments","State":"open","Body":"Some code was accidentally calling GetDocument with an additional document ID; this didn't end well.","Url":"https://github.com/dotnet/roslyn/pull/35300","RelatedDescription":"Open PR \"Fix applying code actions that change AdditionalDocuments\" (#35300)"},{"Id":"437831341","IsPullRequest":false,"CreatedAt":"2019-04-26T20:21:08","Actor":"vsfeedback","Number":"35298","RawContent":null,"Title":"error CS0019: Operator '==' cannot be applied to operands of type 'KeyValuePair<ulong, string>' and 'KeyValuePair<ulong, string>'","State":"open","Body":"VSF_TYPE_MARKDOWNpublic class StringColumnActor : IStringColumnActor\n    {\n        private readonly AsyncGate _gate = new AsyncGate();\n\n        // TODO: replace with persistent storage\n        private readonly IDictionary&lt;ulong, string&gt; _valueDictionary = new Dictionary&lt;ulong, string&gt;();\n\n        public StringColumnActor()\n        {\n\n        }\n\n        public async Task&lt;ulong&gt; GetOrAddValueAsync(string value)\n        {\n            using var gateLock = _gate.WaitAsync();\n\n            var kvp = _valueDictionary.FirstOrDefault(kvp =&gt; kvp.Value.Equals(value, StringComparison.InvariantCultureIgnoreCase));\n\n            if (kvp == default(KeyValuePair&lt;ulong, string&gt;))\n            {\n\n            }\n        }\n    }\n\n\n\n// Using dotnet core 3.0 preivew\n// From Compiler Output. 1&gt;Databases\\Columns\\IStringColumnActor.cs(34,17,34,60): error CS0019: Operator '==' cannot be applied to operands of type 'KeyValuePair&lt;ulong, string&gt;' and 'KeyValuePair&lt;ulong, string&gt;'\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/475398/error-cs0019-operator-cannot-be-applied-to-operand.html\nVSTS ticketId: 807156_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/4/2019, 00:46 AM (53 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35298","RelatedDescription":"Open issue \"error CS0019: Operator '==' cannot be applied to operands of type 'KeyValuePair<ulong, string>' and 'KeyValuePair<ulong, string>'\" (#35298)"},{"Id":"437828327","IsPullRequest":false,"CreatedAt":"2019-04-26T20:11:53","Actor":"vsfeedback","Number":"35297","RawContent":null,"Title":"using C# 8 range in debugger does not work","State":"open","Body":"VSF_TYPE_MARKDOWNWhen I use a C# 8 range in the debugger is reports &quot;The debugger is unable to evaluate this expression&quot;\n\nFor example:\n\n```\n&quot;Hello&quot;[0..2]\tThe debugger is unable to evaluate this expression\tstring\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/506062/using-c-8-range-in-debugger-does-not-work.html\nVSTS ticketId: 827697_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/26/2019, 08:31 PM (30 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35297","RelatedDescription":"Open issue \"using C# 8 range in debugger does not work\" (#35297)"},{"Id":"437827832","IsPullRequest":false,"CreatedAt":"2019-04-26T20:10:16","Actor":"vsfeedback","Number":"35296","RawContent":null,"Title":"Visual Studio reports incorrect type for nullable reference type when using `var`","State":"open","Body":"VSF_TYPE_MARKDOWNVisual Studio 2019 Preview, C# 8.0 beta, .NET Core 3.0 preview of some kind. Nullable reference types enabled through `&lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;` in the `.csproj`.\n\nFor this code snippet:\n\n```\nstring? meh = null;\nvar t = meh?.GetType(); // VS thinks t is Type\n```\n\nVisual Studio, on mouse hover over `t`, reports the type of `t` as `Type` and not `Type?`.\n\nAs far as I can tell, this is incorrect. `t` is of type `Type?` and behaves as expected. For example, an attempt to then assign it to a variable of `Type` will fail:\n\n```\nType t2 = t; // warning, as expected\nType? t3 = t; // no warning, as expected\n```\n\nHere's my `.csproj`:\n\n```\n&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;\n    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;\n    &lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;PropertyGroup Condition=&quot;'$(Configuration)|$(Platform)'=='Debug|AnyCPU'&quot;&gt;\n    &lt;WarningsAsErrors&gt;NU1605;CS8600;CS8602&lt;/WarningsAsErrors&gt;\n  &lt;/PropertyGroup&gt;\n\n&lt;/Project&gt;\n```\n\nThanks!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/476671/visual-studio-reports-incorrect-type-for-nullable.html\nVSTS ticketId: 807802_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/4/2019, 06:32 PM (52 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35296","RelatedDescription":"Open issue \"Visual Studio reports incorrect type for nullable reference type when using `var`\" (#35296)"},{"Id":"437823267","IsPullRequest":false,"CreatedAt":"2019-04-26T20:08:10","Actor":"gafter","Number":"35295","RawContent":null,"Title":"Incorrect computed nullability for dynamic operations","State":"closed","Body":"Nullability warnings are (possibly) expected where indicated, but missing.\r\n\r\n``` c#\r\n#nullable enable\r\n\r\nclass Program\r\n{\r\n    public static void Main() { }\r\n\r\n    void M1(dynamic? d1, dynamic? d2)\r\n    {\r\n        d1.ToString(); // warning\r\n\r\n        var d3 = d1 + d2;\r\n        d3.ToString(); // missing warning?\r\n\r\n        var d4 = ~d1;\r\n        d4.ToSTring(); // missing warning?\r\n    }\r\n\r\n    void M2(dynamic d5)\r\n    {\r\n        var d6 = d5.M();\r\n        d6.ToString(); // missing warning?\r\n    }\r\n}\r\n```\r\n\r\nWe may need the LDM to confirm the expected behavior.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35295","RelatedDescription":"Closed issue \"Incorrect computed nullability for dynamic operations\" (#35295)"},{"Id":"437802077","IsPullRequest":true,"CreatedAt":"2019-04-26T18:52:49","Actor":"RikkiGibson","Number":"35294","RawContent":null,"Title":"Dev/rigibson/cherry pick 34909","State":"open","Body":"Copy of #35273 to try and see if we can repro the error with a commit based on master-vs-deps.","Url":"https://github.com/dotnet/roslyn/pull/35294","RelatedDescription":"Open PR \"Dev/rigibson/cherry pick 34909\" (#35294)"},{"Id":"437836482","IsPullRequest":false,"CreatedAt":"2019-04-17T12:20:20","Actor":"hughbe","Number":"35299","RawContent":null,"Title":"Ways to format attributes followed by newlines","State":"open","Body":"E.g. in this file: https://github.com/dotnet/winforms/blob/master/src/Common/src/UnsafeNativeMethods.cs\r\n\r\nWe have the following example code\r\n\r\n```cs\r\n        [DllImport(ExternDll.Oleaut32, PreserveSig = false)]\r\n        \r\n        public static extern UnsafeNativeMethods.IPicture OleCreatePictureIndirect(NativeMethods.PICTDESC pictdesc, [In]ref Guid refiid, bool fOwn);\r\n        [DllImport(ExternDll.Oleaut32, PreserveSig = false)]\r\n        \r\n        public static extern UnsafeNativeMethods.IFont OleCreateFontIndirect(NativeMethods.tagFONTDESC fontdesc, [In]ref Guid refiid);\r\n        [DllImport(ExternDll.Oleaut32, ExactSpelling = true)]\r\n        \r\n        public static extern int VarFormat(ref object pvarIn, HandleRef pstrFormat, int iFirstDay, int iFirstWeek, uint dwFlags, [In, Out]ref IntPtr pbstr);\r\n        [DllImport(ExternDll.Shell32, CharSet=CharSet.Auto)]\r\n        \r\n        public static extern int DragQueryFile(HandleRef hDrop, int iFile, StringBuilder lpszFile, int cch);\r\n```\r\n\r\nThe correctly formatted text is\r\n```cs\r\n[DllImport(ExternDll.Oleaut32, PreserveSig = false)]\r\npublic static extern UnsafeNativeMethods.IPicture OleCreatePictureIndirect(NativeMethods.PICTDESC pictdesc, [In]ref Guid refiid, bool fOwn);\r\n\r\n[DllImport(ExternDll.Oleaut32, PreserveSig = false)]\r\npublic static extern UnsafeNativeMethods.IFont OleCreateFontIndirect(NativeMethods.tagFONTDESC fontdesc, [In]ref Guid refiid);\r\n\r\n[DllImport(ExternDll.Oleaut32, ExactSpelling = true)]\r\npublic static extern int VarFormat(ref object pvarIn, HandleRef pstrFormat, int iFirstDay, int iFirstWeek, uint dwFlags, [In, Out]ref IntPtr pbstr);\r\n\r\n[DllImport(ExternDll.Shell32, CharSet=CharSet.Auto)]\r\npublic static extern int DragQueryFile(HandleRef hDrop, int iFile, StringBuilder lpszFile, int cch);\r\n```\r\n\r\nBut sadly the weird formatting where the attribute is not prefixed by a new line and is followed by a new line is maintained","Url":"https://github.com/dotnet/roslyn/issues/35299","RelatedDescription":"Open issue \"Ways to format attributes followed by newlines\" (#35299)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"438000242","IsPullRequest":false,"CreatedAt":"2019-04-28T01:22:21","Actor":"forestbat","Number":"7369","RawContent":null,"Title":"How do you think to this repository？","State":"open","Body":"https://github.com/kekyo/IL2C\r\nCan this repo replace CppCodeGen？","Url":"https://github.com/dotnet/corert/issues/7369","RelatedDescription":"Open issue \"How do you think to this repository？\" (#7369)"},{"Id":"437769279","IsPullRequest":true,"CreatedAt":"2019-04-27T17:25:18","Actor":"ifew","Number":"7366","RawContent":null,"Title":"Example connect database via Dapper","State":"closed","Body":"Simple, Easy to understand and test corert with connect database via Dapper Library","Url":"https://github.com/dotnet/corert/pull/7366","RelatedDescription":"Closed or merged PR \"Example connect database via Dapper\" (#7366)"},{"Id":"437500631","IsPullRequest":true,"CreatedAt":"2019-04-27T12:09:57","Actor":"Dotnet-GitSync-Bot","Number":"7363","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @ericstj","Url":"https://github.com/dotnet/corert/pull/7363","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7363)"},{"Id":"437800589","IsPullRequest":true,"CreatedAt":"2019-04-27T01:43:45","Actor":"jkotas","Number":"7367","RawContent":null,"Title":"Use implicit MTA for threadpool threads","State":"closed","Body":"It is not ok to leave COM initialized on Win32 threadpool threads. This change skips COM initialization\r\non Win32 threadpool threads completely and takes advantage of implicit MTA that is initialized by the finalizer\r\nthread.\r\n\r\nThis fix should provide high compatiblity with .NET Framework/Core, without performance overhead of initialization/uninitializing COM every time; or running dedicated threadpool.\r\n\r\nFixes #7356","Url":"https://github.com/dotnet/corert/pull/7367","RelatedDescription":"Closed or merged PR \"Use implicit MTA for threadpool threads\" (#7367)"},{"Id":"437235647","IsPullRequest":false,"CreatedAt":"2019-04-27T01:43:45","Actor":"hc4","Number":"7356","RawContent":null,"Title":"ThreadPool usage on Windows","State":"closed","Body":"I make a library, which get called from Java app with JNA on Windows.\r\nEverything was fine, until I start using of ThreadPool. After that I start getting some strange lockups of main Java application.\r\nI suspect that problem somewhere in GC. It tries to suspend and stackwalk all TPP threads, which was running .Net code. Even if there is no any .Net code currently executing in it. And it may conflict with Java GC, which also possibly tries to stackwalk this threads.\r\n\r\nMaybe we should somehow \"detach\" non CLR threads, which was exitted from .Net code?","Url":"https://github.com/dotnet/corert/issues/7356","RelatedDescription":"Closed issue \"ThreadPool usage on Windows\" (#7356)"},{"Id":"437864224","IsPullRequest":true,"CreatedAt":"2019-04-26T23:36:11","Actor":"trylek","Number":"7368","RawContent":null,"Title":"Add the enum value for manifest metadata to R2R header constants","State":"closed","Body":"Not the real implementation, just the enum now I have it in fresh\r\nmemory from the R2RDump change :-).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7368","RelatedDescription":"Closed or merged PR \"Add the enum value for manifest metadata to R2R header constants\" (#7368)"},{"Id":"437659417","IsPullRequest":true,"CreatedAt":"2019-04-26T14:17:21","Actor":"MichalStrehovsky","Number":"7365","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7365","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7365)"},{"Id":"437161592","IsPullRequest":false,"CreatedAt":"2019-04-26T10:46:29","Actor":"ifew","Number":"7353","RawContent":null,"Title":"System.Data.SqlClient build fails on macOS","State":"closed","Body":"I change from EFCore to Dapper Library. it's very fast x2\r\nbut I get an error when has compiled to native \r\n\r\n```bash\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54.67 ms for /Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj.\r\n  aws-lambda-lambdanative -> /Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/bin/Release/netcoreapp2.2/osx-x64/aws-lambda-lambdanative.dll\r\n  /usr/local/opt/llvm/bin/clang\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [/Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj]\r\n  Undefined symbols for architecture x86_64:\r\n    \"_NetSecurityNative_ImportPrincipalName\", referenced from:\r\n        _System_Data_SqlClient_Interop_NetSecurityNative__ImportPrincipalName in aws-lambda-lambdanative.o\r\n  ld: symbol(s) not found for architecture x86_64\r\nclang-8 : error : linker command failed with exit code 1 (use -v to see invocation) [/Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj]\r\n/Users/chitpong/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang \"obj/Release/netcoreapp2.2/osx-x64/native/aws-lambda-lambdanative.o\" -o \"bin/Release/netcoreapp2.2/osx-x64/native/aws-lambda-lambdanative\" /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libbootstrapper.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libRuntime.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libSystem.Private.CoreLib.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/sdk/libSystem.Private.TypeLoader.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Globalization.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.IO.Compression.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Net.Security.Native.a /Users/chitpong/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27625-01/framework/System.Security.Cryptography.Native.Apple.a -g -Wl,-rpath,'$ORIGIN' -lstdc++ -ldl -lm -lz -licucore -framework CoreFoundation -framework Security -framework GSS\" exited with code 1. [/Users/chitpong/Sourcecode/aws-lambda-lambdanative-db/src/aws-lambda-lambdanative/aws-lambda-lambdanative.csproj]\r\n```","Url":"https://github.com/dotnet/corert/issues/7353","RelatedDescription":"Closed issue \"System.Data.SqlClient build fails on macOS\" (#7353)"},{"Id":"437549320","IsPullRequest":true,"CreatedAt":"2019-04-26T08:04:21","Actor":"MichalStrehovsky","Number":"7364","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7364","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7364)"},{"Id":"437439250","IsPullRequest":true,"CreatedAt":"2019-04-26T02:04:13","Actor":"Suchiman","Number":"7362","RawContent":null,"Title":"Port GC changes from coreclr - 5","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7358\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/09b7f0a0f44798108a33d7e698420f147c45461b):**\r\n- https://github.com/dotnet/coreclr/commit/ac0ba59034c46da198b12812899e34dec21990e9 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/efd4d357f009e4509a6147f390d2d9fde7d717d0 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/6f013232079c2a2dd9f0f58362443b5ec5b43c15 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ea22d55fc0392cf858d4c1c17d504523a1e18732 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/734f13c964610d1f4fee08611beca1aa02de0082 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bf7cf40e14b8cf35c68be089735dd16081db9dc4 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3e6334b8797731bc24a2b9c69a7b7073a92b66a9 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/ab43a5fbeccca1e4948dd140592361fe7c3335c3 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/da00894a5d657b3ba06ebf6e004e5a5a0976434b (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/56776b20f5902ef60d43cb502d734193b2521fca (gc only port)","Url":"https://github.com/dotnet/corert/pull/7362","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 5\" (#7362)"},{"Id":"437351908","IsPullRequest":true,"CreatedAt":"2019-04-25T23:31:19","Actor":"Suchiman","Number":"7358","RawContent":null,"Title":"Port GC changes from coreclr - 4","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7342\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ed57233f4d26114d45b1293ced80a09f879f72cf):**\r\n- https://github.com/dotnet/coreclr/commit/41617fee235d22d9e6dc1fa31548de63637551fa (manual port)\r\n- https://github.com/dotnet/coreclr/commit/be8504bd8a63962c84567990f0b84019f299166c (manual port)\r\n- https://github.com/dotnet/coreclr/commit/7ba3cc8174dec2626a403f5ccd35c79a3bf6cf77 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/e17f40a186c294f977e336cab049d9026cf40c78 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/273e63414deccefd1ad048062e4d1ebfe5e5eb50 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f9d0333d8955c11a2e8f495f0a12d6384fb95541 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/7721f89f517f09f90d46a1078f0d26caf3b310c0 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/447521434ab80ea97a42108a429e3773e71f7c66 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/ea55c4a25945d8ccb39d686b89f1fa729b4ebe23 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/2dfc74df1f9fe238eb2ec25c4764b8b65432b010 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/09b7f0a0f44798108a33d7e698420f147c45461b (manual port)\r\n\r\n**Points of interest**:\r\nSome of the commits moved features to the runtime that were disabled in the GC with `#ifndef FEATURE_REDHAWK`, i've transplanted the equivalent to `gcrhenv.cpp`, do tell if you rather wish to remove it.","Url":"https://github.com/dotnet/corert/pull/7358","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 4\" (#7358)"},{"Id":"437420073","IsPullRequest":true,"CreatedAt":"2019-04-25T23:31:02","Actor":"Dotnet-GitSync-Bot","Number":"7361","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jorive","Url":"https://github.com/dotnet/corert/pull/7361","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7361)"},{"Id":"437358873","IsPullRequest":true,"CreatedAt":"2019-04-25T21:43:11","Actor":"Dotnet-GitSync-Bot","Number":"7359","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7359","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7359)"},{"Id":"436956059","IsPullRequest":true,"CreatedAt":"2019-04-25T21:42:59","Actor":"jkotas","Number":"7345","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7345","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#7345)"},{"Id":"437406314","IsPullRequest":true,"CreatedAt":"2019-04-25T21:30:33","Actor":"trylek","Number":"7360","RawContent":null,"Title":"Fix the TypeLoadException CPAOT compilation bucket","State":"open","Body":"I have fixed this by constructing TypeFixupSignature instances\r\nusing a new helper method TypeSignature (much like what we're\r\ndoing for methods) which calls the CheckCanGenerateEEType method\r\nupfront. This properly throws the exception to JIT so that it\r\ngets caught in compileMethodInternal and just suppresses jitting\r\nof a particular method rather than tearing down the entire\r\ncompilation process.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Down to 14 (compared to previous 24) ILC failures in CoreCLR Pri#1 tests.","Url":"https://github.com/dotnet/corert/pull/7360","RelatedDescription":"Open PR \"Fix the TypeLoadException CPAOT compilation bucket\" (#7360)"},{"Id":"437314563","IsPullRequest":true,"CreatedAt":"2019-04-25T19:22:16","Actor":"Dotnet-GitSync-Bot","Number":"7357","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7357","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7357)"},{"Id":"437221876","IsPullRequest":true,"CreatedAt":"2019-04-25T15:31:36","Actor":"Dotnet-GitSync-Bot","Number":"7355","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7355","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7355)"},{"Id":"436994418","IsPullRequest":true,"CreatedAt":"2019-04-25T13:23:34","Actor":"Dotnet-GitSync-Bot","Number":"7347","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jimdemis","Url":"https://github.com/dotnet/corert/pull/7347","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7347)"},{"Id":"437148429","IsPullRequest":true,"CreatedAt":"2019-04-25T13:23:15","Actor":"MichalStrehovsky","Number":"7352","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7352","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7352)"},{"Id":"437019169","IsPullRequest":true,"CreatedAt":"2019-04-25T13:03:02","Actor":"kouvel","Number":"7349","RawContent":null,"Title":"Add missing null check to ThreadInt64PersistentCounter","State":"closed","Body":"Fixes https://github.com/dotnet/corert/issues/7348\r\n- Getting the `Value` property of a `ThreadLocal` as in `ThreadInt64PersistentCounter.Increment()` would link a node into the `ThreadLocal`'s linked list, and before the `Value` property is set by `Increment()`, another thread may get a null node while scanning the linked nodes. There could be other races too.\r\n- Added check for null node when scanning the values of all threads","Url":"https://github.com/dotnet/corert/pull/7349","RelatedDescription":"Closed or merged PR \"Add missing null check to ThreadInt64PersistentCounter\" (#7349)"},{"Id":"436995276","IsPullRequest":false,"CreatedAt":"2019-04-25T13:03:02","Actor":"jkotas","Number":"7348","RawContent":null,"Title":"NullReferenceException in ThreadInt64PersistentCounter","State":"closed","Body":"We are hitting this crash pretty often in the CI:\r\n\r\n```\r\nRunning test /__w/4/s/tests/src/Simple/BasicThreading BasicThreading\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.ThreadInt64PersistentCounter.get_Count() + 0xae\r\n   at System.Threading.ClrThreadPool.AdjustMaxWorkersActive() + 0x60\r\n   at System.Threading.ClrThreadPool.NotifyWorkItemComplete() + 0xaf\r\n   at System.Threading.ThreadPool.NotifyWorkItemComplete() + 0x20\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() + 0x343\r\n   at System.Threading.ClrThreadPool.WorkerThread.WorkerThreadStart() + 0xe5\r\n```","Url":"https://github.com/dotnet/corert/issues/7348","RelatedDescription":"Closed issue \"NullReferenceException in ThreadInt64PersistentCounter\" (#7348)"},{"Id":"437170902","IsPullRequest":false,"CreatedAt":"2019-04-25T12:24:17","Actor":"hc4","Number":"7354","RawContent":null,"Title":"ES_BUILD_PN defined by default","State":"open","Body":"https://github.com/dotnet/corert/blob/d0683071605aed956497506ed1aae4d366be0190/src/System.Private.CoreLib/src/System.Private.CoreLib.csproj#L32\r\n\r\nAm I correct that ES_BUILD_PN means ProjectN?\r\nAnd ProjectN means UWP apps?\r\n\r\nI've found that there is check, for Windows version is disabled when ES_BUILD_PN  defined.\r\nhttps://github.com/dotnet/corert/blob/a3e3edbb8e8e95ba97c1ad5f36d38965b768fd55/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/EventSource.cs#L1500\r\n\r\nSo there is thrown exception on resolving EventSetInformation function on Windows 7\r\nI'am not sure if it can break something, but atleast it looks strange.","Url":"https://github.com/dotnet/corert/issues/7354","RelatedDescription":"Open issue \"ES_BUILD_PN defined by default\" (#7354)"},{"Id":"437045189","IsPullRequest":true,"CreatedAt":"2019-04-25T07:28:48","Actor":"MichalStrehovsky","Number":"7351","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7351","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7351)"},{"Id":"437044290","IsPullRequest":true,"CreatedAt":"2019-04-25T07:18:51","Actor":"dotnet-bot","Number":"7350","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7350","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7350)"},{"Id":"436956870","IsPullRequest":true,"CreatedAt":"2019-04-25T03:31:06","Actor":"Dotnet-GitSync-Bot","Number":"7346","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7346","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7346)"},{"Id":"436448513","IsPullRequest":true,"CreatedAt":"2019-04-25T02:34:45","Actor":"Suchiman","Number":"7342","RawContent":null,"Title":"Port GC changes from coreclr - 3","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7336\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/b2b4ea22fcf71ef61ff84aa9669da2419c7541a5):**\r\n- https://github.com/dotnet/coreclr/commit/41c47b8555d7d471547cfb641112cd31e37cb7ae (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/c5bfdd98204d7cb265f633534d593ca9c008ca6b ([already merged](https://github.com/dotnet/corert/commit/254ae2344a64386bbb652e7318c937d523890d49))\r\n- https://github.com/dotnet/coreclr/commit/b04644c55ae003bd1c6c8fefe33d5dfe6ef240f0 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/ab849639db83ee65e51838ef147cee8d21b813c7 ([already merged](https://github.com/dotnet/corert/commit/d56451ee402459a23ff28fe1eff672d131468580))\r\n- https://github.com/dotnet/coreclr/commit/840554e77f01a327e0c5df59d229149fd50b5c2d (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/7e4afb4fbf900b789f53ccb816c6ddba7807de68 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/c9a0d6d510e92dc4ebd4b78f766c706abce0a9af (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/8d02c0786825a27d67fb2af150f751dbda360bef (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/11f2dbd1d8376358727a686126024984b01e3383 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/c5ad5fd0f83b26d00ef567b215a7dcd5dd8394c9 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/67a8ef7380e9e30f10e67d3b34898903e6d18946 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/07fa3a32336d2da5d2bf652ad01d33f18b2debaf (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/dab2f6b76a1ed088a871374189e2133db9c9accb (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/958279de27e7f3c30ad53e35277653d1ec0f1e6e (manual port)\r\n- https://github.com/dotnet/coreclr/commit/ed57233f4d26114d45b1293ced80a09f879f72cf (manual port, omitted changes)\r\n\r\n**Points of interest**:\r\nhttps://github.com/dotnet/coreclr/commit/8d02c0786825a27d67fb2af150f751dbda360bef also contains shutdown logic which i could not identify in corert.\r\nAlso this change reordered the initialization due to \"This isn't done as part of InitializeGarbageCollector() above because it requires write barriers to have been set up on x86, which happens as part of InitJITHelpers1.\" which i've omitted as it seems to not apply to corert.","Url":"https://github.com/dotnet/corert/pull/7342","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 3\" (#7342)"},{"Id":"436884552","IsPullRequest":true,"CreatedAt":"2019-04-24T20:48:48","Actor":"MichalStrehovsky","Number":"7344","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"ProjectN is more sensitive about unreferenced parameters.","Url":"https://github.com/dotnet/corert/pull/7344","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#7344)"},{"Id":"436445576","IsPullRequest":false,"CreatedAt":"2019-04-24T15:42:56","Actor":"Alan-FGR","Number":"7341","RawContent":null,"Title":"Pinvoked libraries somehow get broken in CoreRT","State":"closed","Body":"Hello there.\r\n\r\nI'm trying to debug a pretty hairy behavior in CoreRT here. This isn't a proper issue because my time is limited and I'm struggling to make sense of what's happening, but I think it's better to use an issue instead of Gitter to log my findings and maybe get help.\r\n\r\nI'm working on [C# bindings for the PhysX library](https://github.com/Alan-FGR/SharpPhysX), and I have a testbed sample kinda thing which renders the debug geometry from the PhysX library, it's working fine on both .NET Framework (4.7.2) and .NET Core 2.1, and the code seems correct. However, I couldn't get that to work properly on CoreRT.\r\n\r\nAt first I thought it could be something in my pinvokes/wrappers, but after some investigation by debugging the output binary in VS, the stack traces point to the PhysX internals, most specifically some threading code (most of the time at least). At that point I've tried to make a minimal repro using only the PhysX libraries, but I simply couldn't get the problem to manifest. I then started from the other way and stripped stuff from the sample until I get something that works, that's when I noticed that for some reason the contact solving stuff in PhysX is broken, take a look at these lovely gifs :trollface::\r\nHere's the proper expected result on CoreCLR:\r\n![coreclr](https://user-images.githubusercontent.com/8399299/56623789-23562680-660c-11e9-896e-c1b4dcd0d7ef.gif)\r\nHere's what happens on CoreRT:\r\n![corert](https://user-images.githubusercontent.com/8399299/56623786-20f3cc80-660c-11e9-8890-0905b1785400.gif)\r\n\r\nHowever, the thing is, even though the error happens in PhysX, when I remove the other libraries (I was trying to make a minimal SSCCE), the thing works, here's a minimal code that does the same thing except the other libraries were removed (it plots the cube height to console): https://github.com/Alan-FGR/CoreRT_SharpPhysX_Debug and it works fine on CoreRT, and here's a branch of SharpPhysX with some *kinda minimal* code that doesn't work: https://github.com/Alan-FGR/SharpPhysX/tree/corert_debug, note how the code that has to do with PhysX is the same (not 1:1 but the pinvoke calls are), the project in question is the [\"dotnetCore\"](https://github.com/Alan-FGR/SharpPhysX/tree/corert_debug/dotnetCore) the code is all in the DebugRenderer though because I thought it could be the abstract impls :P...\r\n\r\nI've also tried to remove PhysX and have just the rendering (bgfx debug text and whatnot), and that works fine, **the thing only crashes when I'm using all the pinvoked libs at the same time**, what makes me think that somehow they're conflicting with each other, like maybe they're writing on each other memories or something, I don't really know... but that makes debugging very hard, especially since I'm a total n00b at debugging interop.\r\n\r\nI'm going to try and make some better repros, but in case some of you want to give it a try I think that's all you need, the native PhysX is an opensource project too (https://github.com/NVIDIAGameWorks/PhysX/tree/4.0) and the native library (LibSharpPhysX) was built against the latest 4.0.","Url":"https://github.com/dotnet/corert/issues/7341","RelatedDescription":"Closed issue \"Pinvoked libraries somehow get broken in CoreRT\" (#7341)"},{"Id":"436537371","IsPullRequest":true,"CreatedAt":"2019-04-24T13:24:32","Actor":"MichalStrehovsky","Number":"7343","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"Porting changes from the non-WinRT files.","Url":"https://github.com/dotnet/corert/pull/7343","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7343)"},{"Id":"436424914","IsPullRequest":false,"CreatedAt":"2019-04-23T22:58:43","Actor":"josephmoresena","Number":"7340","RawContent":null,"Title":"clang: warning: argument unused during compilation: '-exported_symbols_list","State":"open","Body":"I am testing the operation of shared libraries in linux and in sum everything works wonderfully however when I ran objdump in linux about the compiled .so I realized that we are exporting all the internal symbols of the library and not only those that we mark as export\r\n\r\n`clang: warning: argument unused during compilation: '-exported_symbols_list obj / Debug / netstandard2.0 / linux-x64 / native / NativeLibrary.exports' [-Wunused-command-line-argument]`\r\nThe .SO file is almost twice the size of the DLL.\r\n\r\nWindows dumpbin.exe /EXPORTS:\r\n` Section contains the following exports for NativeLibrary.dll\r\n\r\n    00000000 characteristics\r\n    FFFFFFFF time date stamp\r\n        0.00 version\r\n           1 ordinal base\r\n          19 number of functions\r\n          19 number of names\r\n\r\n    ordinal hint RVA      name\r\n\r\n          1    0 000B1DC0 callback = callback\r\n          2    1 000B0D60 create_fixed_string = create_fixed_string\r\n          3    2 000B0030 finalize_object = finalize_object\r\n          4    3 000B0A80 free_memory = free_memory\r\n          5    4 000B0B90 get_char_string = get_char_string\r\n          6    5 000B2450 get_int_array = get_int_array\r\n          7    6 000B1150 get_native_string = get_native_string\r\n          8    7 000AFEF0 get_number = get_number\r\n          9    8 000B29C0 get_object = get_object\r\n         10    9 000B2BD0 get_object_info = get_object_info\r\n         11    A 000B0850 get_object_type = get_object_type\r\n         12    B 000AFD10 get_ramdom_number = get_ramdom_number\r\n         13    C 000AF9E0 get_random_instance = get_random_instance\r\n         14    D 000AF7E0 get_random_seeded_instance = get_random_seeded_instance\r\n         15    E 000B1390 get_structure = get_structure\r\n         16    F 000B3290 print_numbers = print_numbers\r\n         17   10 000B2080 read_object = read_object\r\n         18   11 000B1720 read_structure = read_structure\r\n         19   12 000B0FE0 write_character_string = write_character_string\r\n\r\n  Summary\r\n\r\n       2B000 .data\r\n      1BC000 .managed\r\n       30000 .pdata\r\n      241000 .rdata\r\n       19000 .reloc\r\n        1000 .rsrc\r\n       AA000 .text`\r\n\r\nLinux nm -D --defined-only:\r\n`00000000001e8c70 T AppendExceptionStackFrame\r\n0000000000868258 B __bss_start\r\n000000000019a680 T callback\r\n000000000018896c T ConstrainedCallSupport_GetStubs\r\n0000000000198ee0 T create_fixed_string\r\n00000000002c5c90 T Dbl2IntOvf\r\n00000000002c5cf0 T Dbl2LngOvf\r\n00000000002c5cc0 T Dbl2UIntOvf\r\n00000000002c5d20 T Dbl2ULngOvf\r\n0000000000280de0 T DebugFuncEvalAbortHelper\r\n0000000000280d90 T DebugFuncEvalHelper\r\n0000000000868258 D _edata\r\n0000000000872090 B _end\r\n00000000001ea3f0 T FailFast\r\n0000000000198560 T finalize_object\r\n00000000003786c4 T _fini\r\n00000000002c5d50 T Flt2IntOvf\r\n00000000002c5d90 T Flt2LngOvf\r\n0000000000198b90 T free_memory\r\n0000000000479b48 R g_compilerEmbeddedSettingsBlob\r\n0000000000198d00 T get_char_string\r\n000000000019abf0 T get_int_array\r\n0000000000199340 T get_native_string\r\n0000000000197ba0 T get_number\r\n000000000019b1f0 T get_object\r\n000000000019b2f0 T get_object_info\r\n00000000001988c0 T get_object_type\r\n0000000000197990 T get_ramdom_number\r\n00000000001978c0 T get_random_instance\r\n0000000000197480 T get_random_seeded_instance\r\n00000000001e9e90 T GetRuntimeException\r\n0000000000199590 T get_structure\r\n00000000001de2c0 T GetSystemArrayEEType\r\n000000000018d940 T GlobalizationNative_ChangeCase\r\n000000000018dc50 T GlobalizationNative_ChangeCaseInvariant\r\n000000000018dfb0 T GlobalizationNative_ChangeCaseTurkish\r\n000000000018ebe0 T GlobalizationNative_CloseSortHandle\r\n000000000018eda0 T GlobalizationNative_CompareString\r\n000000000018f520 T GlobalizationNative_CompareStringOrdinalIgnoreCase\r\n000000000018f320 T GlobalizationNative_EndsWith\r\n000000000018cad0 T GlobalizationNative_EnumCalendarInfo\r\n000000000018c8c0 T GlobalizationNative_GetCalendarInfo\r\n000000000018c6a0 T GlobalizationNative_GetCalendars\r\n000000000018fc10 T GlobalizationNative_GetDefaultLocaleName\r\n0000000000192c60 T GlobalizationNative_GetICUVersion\r\n000000000018d710 T GlobalizationNative_GetJapaneseEraStartDate\r\n000000000018d660 T GlobalizationNative_GetLatestJapaneseEra\r\n00000000001902b0 T GlobalizationNative_GetLocaleInfoGroupingSizes\r\n000000000018fdd0 T GlobalizationNative_GetLocaleInfoInt\r\n0000000000190700 T GlobalizationNative_GetLocaleInfoString\r\n000000000018fa60 T GlobalizationNative_GetLocaleName\r\n000000000018f8c0 T GlobalizationNative_GetLocales\r\n0000000000191130 T GlobalizationNative_GetLocaleTimeFormat\r\n000000000018eb00 T GlobalizationNative_GetSortHandle\r\n000000000018f4a0 T GlobalizationNative_GetSortKey\r\n000000000018ed50 T GlobalizationNative_GetSortVersion\r\n0000000000191210 T GlobalizationNative_GetTimeZoneDisplayName\r\n000000000018ee20 T GlobalizationNative_IndexOf\r\n000000000018efc0 T GlobalizationNative_IndexOfOrdinalIgnoreCase\r\n000000000018ef00 T GlobalizationNative_LastIndexOf\r\n0000000000191310 T GlobalizationNative_LoadICU\r\n000000000018f1e0 T GlobalizationNative_StartsWith\r\n000000000012a368 T _init\r\n00000000002b6cf0 T InitializeFinalizerThread\r\n00000000002c52a0 T InitializeModules\r\n000000000032b0d0 T __managed__Startup\r\n00000000001a23f0 T OnFirstChanceException\r\n0000000000868088 D PointerToReturnFromCallDescrThunk\r\n00000000008680c0 D PointerToReturnFromUniversalTransition\r\n00000000008680c8 D PointerToReturnFromUniversalTransition_DebugStepTailCall\r\n00000000008680a8 D PointerToRhpCallCatchFunclet2\r\n00000000008680b8 D PointerToRhpCallFilterFunclet2\r\n00000000008680b0 D PointerToRhpCallFinallyFunclet2\r\n00000000008680a0 D PointerToRhpRethrow2\r\n0000000000868098 D PointerToRhpThrowEx2\r\n0000000000868090 D PointerToRhpThrowHwEx2\r\n000000000019ba10 T print_numbers\r\n00000000002b7750 T ProcessFinalizers\r\n000000000019a8b0 T read_object\r\n000000000019a340 T read_structure\r\n00000000002b9540 T RhAllocateThunk\r\n00000000002b9270 T RhAllocLocal\r\n00000000002b92a0 T RhAllocLocal2\r\n00000000002b9210 T RhArrayStoreCheckAny\r\n00000000002b8e50 T RhBox\r\n00000000002b9250 T RhBoxAndNullCheck\r\n00000000002b8f10 T RhBoxAny\r\n0000000000185574 T RhCallDescrWorker\r\n00000000002b8670 T RhCollect\r\n0000000000185938 T RhCommonStub\r\n00000000002b9530 T RhCreateThunksHeap\r\n00000000002b9520 T RhDisableConservativeReportingRegion\r\n00000000002b8720 T RhEndNoGCRegion\r\n00000000002b7e50 T RhExceptionHandling_FailedAllocation\r\n00000000002b7e30 T RhExceptionHandling_ThrowClasslibDivideByZeroException\r\n00000000002b7e10 T RhExceptionHandling_ThrowClasslibOverflowException\r\n00000000002b9590 T RhFreeThunk\r\n00000000002b7720 T RhGcStress_Initialize\r\n00000000002b7730 T RhGcStress_Initialize2\r\n00000000001859d6 T RhGetCommonStubAddress\r\n00000000002b9350 T RhGetCurrentThreadStackTrace\r\n00000000001859de T RhGetCurrentThunkContext\r\n00000000002b86c0 T RhGetGcTotalMemory\r\n00000000002b96a0 T RhGetThunkSize\r\n00000000002b94e0 T RhInitializeConservativeReportingRegion\r\n00000000002b92e0 T RhMemberwiseClone\r\n00000000002b8e40 T RhNewArray\r\n00000000002b8e10 T RhNewObject\r\n000000000018540b T RhNewString\r\n00000000001863b0 T RhpAssignRef\r\n00000000001863b0 T RhpAssignRefAVLocation\r\n00000000001863b0 T RhpAssignRefESI\r\n0000000000186498 T RhpByRefAssignRef\r\n00000000002b93f0 T RhpCalculateStackTraceWorker\r\n0000000000185705 T RhpCallCatchFunclet\r\n0000000000185884 T RhpCallFilterFunclet\r\n00000000001857cf T RhpCallFinallyFunclet\r\n00000000001859f8 T RhpCastableObjectDispatch_CommonStub\r\n00000000001859fb T RhpCastableObjectDispatchHelper\r\n00000000001859fa T RhpCastableObjectDispatchHelper_TailCalled\r\n00000000002b8ce0 T RhpCastableObjectResolve\r\n00000000001863da T RhpCheckedAssignRef\r\n00000000001863da T RhpCheckedAssignRefAVLocation\r\n00000000001863da T RhpCheckedAssignRefESI\r\n0000000000186416 T RhpCheckedLockCmpXchg\r\n0000000000186419 T RhpCheckedLockCmpXchgAVLocation\r\n0000000000186459 T RhpCheckedXchg\r\n000000000018645c T RhpCheckedXchgAVLocation\r\n00000000002b6ee0 T RhpCidResolve\r\n0000000000281520 T RhpDebugFuncEvalHelper\r\n00000000002b8650 T RhpFailFastForPInvokeExceptionCoop\r\n00000000002b8620 T RhpFailFastForPInvokeExceptionPreemp\r\n00000000001861e1 T RhpInitialDynamicInterfaceDispatch\r\n00000000001861e1 T RhpInitialInterfaceDispatch\r\n00000000001859fc T RhpInterfaceDispatch1\r\n0000000000185af5 T RhpInterfaceDispatch16\r\n0000000000185a15 T RhpInterfaceDispatch2\r\n0000000000185bef T RhpInterfaceDispatch32\r\n0000000000185a3b T RhpInterfaceDispatch4\r\n0000000000185de9 T RhpInterfaceDispatch64\r\n0000000000185a7b T RhpInterfaceDispatch8\r\n00000000001861e3 T RhpInterfaceDispatchSlow\r\n00000000002bb330 T RhpLdelemaRef\r\n00000000001858b8 T RhpLockCmpXchg32\r\n00000000001858bb T RhpLockCmpXchg32AVLocation\r\n00000000001858c0 T RhpLockCmpXchg64\r\n00000000001858c3 T RhpLockCmpXchg64AVLocation\r\n0000000000185473 T RhpNewArray\r\n00000000001854e6 T RhpNewArrayRare\r\n0000000000185348 T RhpNewFast\r\n0000000000185381 T RhpNewFinalizable\r\n0000000000185388 T RhpNewObject\r\n00000000001858cc T RhpPInvoke\r\n000000000018591a T RhpPInvokeReturn\r\n00000000002b6fa0 T RhpResolveInterfaceMethod\r\n0000000000185696 T RhpRethrow\r\n00000000002b9330 T RhpReversePInvokeBadTransition\r\n00000000002b78b0 T RhpSetHaveNewClasslibs\r\n00000000002bb1b0 T RhpStelemRef\r\n00000000001859f9 T RhpTailCallTLSDispatchCell\r\n00000000001855ed T RhpThrowEx\r\n0000000000185578 T RhpThrowHwEx\r\n00000000001861f4 T RhpUniversalTransition\r\n00000000001862d2 T RhpUniversalTransition_DebugStepTailCall\r\n00000000001861e0 T RhpVTableOffsetDispatch\r\n00000000002b7010 T RhResolveDispatch\r\n00000000002b7070 T RhResolveDispatchOnType\r\n00000000002b7fd0 T RhRethrow\r\n00000000002b95e0 T RhSetThunkData\r\n00000000002b8700 T RhStartNoGCRegion\r\n00000000002b7f70 T RhThrowEx\r\n00000000002b7e80 T RhThrowHwEx\r\n00000000002b9640 T RhTryGetThunkData\r\n00000000002baa90 T RhTypeCast_AreTypesAssignable\r\n00000000002bb410 T RhTypeCast_AreTypesEquivalent\r\n00000000002bb020 T RhTypeCast_CheckArrayStore\r\n00000000002bb5b0 T RhTypeCast_CheckCast\r\n00000000002bb590 T RhTypeCast_CheckCast2\r\n00000000002ba1c0 T RhTypeCast_CheckCastArray\r\n00000000002ba1a0 T RhTypeCast_CheckCastArray2\r\n00000000002b9fb0 T RhTypeCast_CheckCastClass\r\n00000000002b9f90 T RhTypeCast_CheckCastClass2\r\n00000000002baef0 T RhTypeCast_CheckCastInterface\r\n00000000002baed0 T RhTypeCast_CheckCastInterface2\r\n00000000002b9fe0 T RhTypeCast_CheckUnbox\r\n00000000002bb150 T RhTypeCast_CheckVectorElemAddr\r\n00000000002bb510 T RhTypeCast_IsInstanceOf\r\n00000000002bb4f0 T RhTypeCast_IsInstanceOf2\r\n00000000002ba040 T RhTypeCast_IsInstanceOfArray\r\n00000000002ba020 T RhTypeCast_IsInstanceOfArray2\r\n00000000002b9d90 T RhTypeCast_IsInstanceOfClass\r\n00000000002b9d70 T RhTypeCast_IsInstanceOfClass2\r\n00000000002ba210 T RhTypeCast_IsInstanceOfInterface\r\n00000000002ba1f0 T RhTypeCast_IsInstanceOfInterface2\r\n00000000002b9100 T RhUnbox2\r\n00000000002b8fb0 T RhUnboxAny\r\n00000000002b9150 T RhUnboxNullable\r\n0000000000192fc0 T __start___managedcode\r\n0000000000868250 D __start___modules\r\n00000000003759c4 T __start___unbox\r\n00000000003759c1 T __stop___managedcode\r\n0000000000868258 D __stop___modules\r\n00000000003786c1 T __stop___unbox\r\n000000000018a180 T SystemNative_Access\r\n000000000018a140 T SystemNative_ChDir\r\n000000000018a050 T SystemNative_ChMod\r\n0000000000189c60 T SystemNative_Close\r\n0000000000189e00 T SystemNative_CloseDir\r\n0000000000188db0 T SystemNative_ConfigureTerminalForChildProcess\r\n00000000001894f0 T SystemNative_ConvertErrorPalToPlatform\r\n00000000001894d0 T SystemNative_ConvertErrorPlatformToPal\r\n000000000018a8b0 T SystemNative_CopyFile\r\n0000000000189c70 T SystemNative_Dup\r\n000000000018a090 T SystemNative_FChMod\r\n0000000000189f30 T SystemNative_FcntlCanGetSetPipeSz\r\n0000000000189f40 T SystemNative_FcntlGetPipeSz\r\n0000000000189e70 T SystemNative_FcntlSetFD\r\n0000000000189fc0 T SystemNative_FcntlSetIsNonBlocking\r\n0000000000189f80 T SystemNative_FcntlSetPipeSz\r\n000000000018a100 T SystemNative_FLock\r\n000000000018aca0 T SystemNative_ForkAndExecProcess\r\n0000000000189a20 T SystemNative_FStat\r\n000000000018a0d0 T SystemNative_FSync\r\n000000000018a370 T SystemNative_FTruncate\r\n000000000018c190 T SystemNative_GetAbsoluteTime\r\n0000000000188fc0 T SystemNative_GetControlCharacters\r\n000000000018c1c0 T SystemNative_GetCpuUtilization\r\n000000000018b6c0 T SystemNative_GetCwd\r\n000000000018c530 T SystemNative_GetEGid\r\n000000000018c520 T SystemNative_GetEUid\r\n000000000018c560 T SystemNative_GetGroupList\r\n000000000018a6c0 T SystemNative_GetLine\r\n000000000018b840 T SystemNative_GetNonCryptographicallySecureRandomBytes\r\n000000000018ab50 T SystemNative_GetPeerID\r\n000000000018b4f0 T SystemNative_GetPid\r\n000000000018b680 T SystemNative_GetPriority\r\n000000000018c430 T SystemNative_GetPwNamR\r\n000000000018c340 T SystemNative_GetPwUidR\r\n0000000000189d30 T SystemNative_GetReadDirRBufferSize\r\n000000000018b410 T SystemNative_GetRLimit\r\n000000000018b500 T SystemNative_GetSid\r\n00000000001891d0 T SystemNative_GetSignalForBreak\r\n000000000018c620 T SystemNative_GetSystemTimeAsTicks\r\n000000000018c1a0 T SystemNative_GetTimebaseInfo\r\n000000000018c140 T SystemNative_GetTimestamp\r\n000000000018c0e0 T SystemNative_GetTimestampResolution\r\n000000000018c550 T SystemNative_GetUid\r\n0000000000188970 T SystemNative_GetWindowSize\r\n0000000000188c20 T SystemNative_InitializeConsoleBeforeRead\r\n0000000000189400 T SystemNative_InitializeTerminalAndSignalHandling\r\n000000000018ab30 T SystemNative_INotifyAddWatch\r\n000000000018ab20 T SystemNative_INotifyInit\r\n000000000018ab40 T SystemNative_INotifyRemoveWatch\r\n00000000001889a0 T SystemNative_IsATty\r\n000000000018b4e0 T SystemNative_Kill\r\n000000000018ac70 T SystemNative_LChflags\r\n000000000018ac90 T SystemNative_LChflagsCanSetHiddenFlag\r\n000000000018a1d0 T SystemNative_Link\r\n000000000018abd0 T SystemNative_LockFileRegion\r\n000000000018a190 T SystemNative_LSeek\r\n0000000000189b00 T SystemNative_LStat\r\n000000000018a2c0 T SystemNative_MAdvise\r\n000000000018a010 T SystemNative_MkDir\r\n000000000018a210 T SystemNative_MksTemps\r\n000000000018a250 T SystemNative_MMap\r\n000000000018a2f0 T SystemNative_MSync\r\n000000000018a2b0 T SystemNative_MUnmap\r\n0000000000189bb0 T SystemNative_Open\r\n0000000000189df0 T SystemNative_OpenDir\r\n000000000018b650 T SystemNative_PathConf\r\n000000000018b400 T SystemNative_PClose\r\n0000000000189e10 T SystemNative_Pipe\r\n000000000018a3b0 T SystemNative_Poll\r\n000000000018b3f0 T SystemNative_POpen\r\n000000000018a670 T SystemNative_PosixFAdvise\r\n000000000018a730 T SystemNative_Read\r\n0000000000189d40 T SystemNative_ReadDirR\r\n000000000018a790 T SystemNative_ReadLink\r\n0000000000189180 T SystemNative_ReadStdin\r\n000000000018abc0 T SystemNative_RealPath\r\n000000000018b970 T SystemNative_RegisterForCtrl\r\n000000000018b9f0 T SystemNative_RegisterForSigChld\r\n000000000018a7c0 T SystemNative_Rename\r\n000000000018b990 T SystemNative_RestoreAndHandleCtrl\r\n000000000018a800 T SystemNative_RmDir\r\n000000000018b7a0 T SystemNative_SchedGetAffinity\r\n000000000018b6e0 T SystemNative_SchedSetAffinity\r\n000000000018c540 T SystemNative_SetEUid\r\n00000000001889b0 T SystemNative_SetKeypadXmit\r\n000000000018b6b0 T SystemNative_SetPriority\r\n000000000018b480 T SystemNative_SetRLimit\r\n00000000001891e0 T SystemNative_SetSignalForBreak\r\n000000000018b9e0 T SystemNative_SetTerminalInvalidationHandler\r\n0000000000189cf0 T SystemNative_ShmOpen\r\n0000000000189d10 T SystemNative_ShmUnlink\r\n0000000000189940 T SystemNative_Stat\r\n00000000001890f0 T SystemNative_StdinReady\r\n00000000001898e0 T SystemNative_StrErrorR\r\n000000000018a840 T SystemNative_Sync\r\n000000000018a330 T SystemNative_SysConf\r\n000000000018b510 T SystemNative_SysLog\r\n0000000000188d80 T SystemNative_UninitializeConsoleAfterRead\r\n0000000000189cb0 T SystemNative_Unlink\r\n000000000018b980 T SystemNative_UnregisterForCtrl\r\n000000000018c060 T SystemNative_UTimensat\r\n000000000018b520 T SystemNative_WaitIdAnyExitedNoHangNoWait\r\n000000000018b5b0 T SystemNative_WaitPidExitedNoHang\r\n000000000018a850 T SystemNative_Write\r\n00000000001852f4 T unw_getcontext\r\n0000000000184ed0 T unw_get_fpreg\r\n0000000000184fa0 T unw_get_proc_info\r\n0000000000184fd0 T unw_get_proc_name\r\n0000000000184e30 T unw_get_reg\r\n0000000000184f50 T unw_get_save_loc\r\n0000000000184d90 T unw_init_local\r\n0000000000184ff0 T unw_is_fpreg\r\n0000000000185010 T unw_is_signal_frame\r\n0000000000185020 T unw_iterate_dwarf_unwind_cache\r\n0000000000868080 D unw_local_addr_space\r\n0000000000185000 T unw_regname\r\n0000000000184fc0 T unw_resume\r\n0000000000184f10 T unw_set_fpreg\r\n0000000000184e70 T unw_set_reg\r\n0000000000184f90 T unw_step\r\n0000000000199080 T write_character_string`","Url":"https://github.com/dotnet/corert/issues/7340","RelatedDescription":"Open issue \"clang: warning: argument unused during compilation: '-exported_symbols_list\" (#7340)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"437957511","IsPullRequest":false,"CreatedAt":"2019-04-27T15:59:11","Actor":"sdmaclea","Number":"3185","RawContent":null,"Title":"ProjectReference to classlib does not layout satellites correctly.","State":"open","Body":"Observed in the tip of corefx\r\n\r\nGiven a project reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\nCulture directory is absent in target layout.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nReported in dotnet/corefx#37246.  Relevant code above is from dotnet/corefx#37248\r\n","Url":"https://github.com/dotnet/sdk/issues/3185","RelatedDescription":"Open issue \"ProjectReference to classlib does not layout satellites correctly.\" (#3185)"},{"Id":"437882972","IsPullRequest":true,"CreatedAt":"2019-04-27T00:01:40","Actor":"dotnet-bot","Number":"3184","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3184","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3184)"},{"Id":"437881849","IsPullRequest":true,"CreatedAt":"2019-04-26T23:52:58","Actor":"peterhuene","Number":"3183","RawContent":null,"Title":"Import publish profiles in the .NET Core SDK.","State":"open","Body":"This commit implements importing publish profiles in the .NET Core SDK.\r\n\r\nPreviously, there were two ways to get the publish profile respected when\r\npublishing .NET Core applications:\r\n\r\n* Using the Web SDK, which implicitly imports the `Microsoft.NET.Sdk.Publish`\r\nSDK.\r\n* Explicitly referencing the `Microsoft.NET.Sdk.Publish` SDK in the `Project\r\nelement` (e.g. `Project=\"Microsoft.NET.Sdk;Microsoft.NET.Sdk.Publish\"`).\r\n\r\nThe problem is that the publish profile was being imported *after* many of the\r\nimportant SDK properties (such as RuntimeIdentifier, SelfContained, and\r\nUseAppHost) were defaulted by the .NET Core SDK.  Because the .NET Core SDK\r\ndoes not expect the values of these properties to change once defaulted, users\r\nare unable to set a particular property in the publish profile and get the\r\nexpected behavior in the .NET Core SDK.\r\n\r\nFor example, when setting just the `RuntimeIdentifier` in the publish profile,\r\nit would publish without a RID-subdirectory, not as self-contained, and without\r\nan apphost.  Contrast this to using the `--runtime` option for `dotnet\r\npublish`, which uses a RID-subdirectory and publishes self-contained with an\r\napphost. Up until now, users had to work around this by setting *all* of the\r\ndesired properties in the publish profile that would otherwise be defaulted by\r\nthe .NET Core SDK.\r\n\r\nThe Web SDK fixed this by importing the publish profile *before* the .NET Core\r\nSDK was imported (see aspnet/websdk#534).  However, this could not fix the\r\nproblem for users that have an existing project that directly references the\r\n`Microsoft.NET.Sdk.Publish` SDK.\r\n\r\nTo fix that, the .NET Core SDK will not attempt to import the publish profile\r\nif it hasn't already been imported by the Web SDK.  If the .NET Core SDK\r\nsuccessfully imports the publish profile, it sets a property that prevents the\r\nWeb SDK from attempting to import it.\r\n\r\nFixes #10647.","Url":"https://github.com/dotnet/sdk/pull/3183","RelatedDescription":"Open PR \"Import publish profiles in the .NET Core SDK.\" (#3183)"},{"Id":"435703501","IsPullRequest":true,"CreatedAt":"2019-04-26T22:30:15","Actor":"dotnet-bot","Number":"3165","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3165","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3165)"},{"Id":"437847425","IsPullRequest":true,"CreatedAt":"2019-04-26T21:11:31","Actor":"dsplaisted","Number":"3182","RawContent":null,"Title":"WIP -  Reference empty packages","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3182","RelatedDescription":"Open PR \"WIP -  Reference empty packages\" (#3182)"},{"Id":"437640705","IsPullRequest":true,"CreatedAt":"2019-04-26T12:04:17","Actor":"dotnet-maestro[bot]","Number":"3181","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3181","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3181)"},{"Id":"437465921","IsPullRequest":true,"CreatedAt":"2019-04-26T01:57:11","Actor":"swaroop-sridhar","Number":"3180","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"open","Body":"When creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\nThis fixes a non-detereministic test failure in the ILLink tests.","Url":"https://github.com/dotnet/sdk/pull/3180","RelatedDescription":"Open PR \"Fix ILLink teset flakiness\" (#3180)"},{"Id":"437399381","IsPullRequest":true,"CreatedAt":"2019-04-26T01:00:46","Actor":"dsplaisted","Number":"3179","RawContent":null,"Title":"Fix KeyNotFoundException in GenerateDepsFile task","State":"closed","Body":"This would occur when there was a library in the assets file with a dependency on a library that wasn't in the assets file.\r\n\r\nFixes #3159","Url":"https://github.com/dotnet/sdk/pull/3179","RelatedDescription":"Closed or merged PR \"Fix KeyNotFoundException in GenerateDepsFile task\" (#3179)"},{"Id":"437290082","IsPullRequest":false,"CreatedAt":"2019-04-25T16:27:32","Actor":"Lemraj","Number":"3178","RawContent":null,"Title":"Could not upgrade to .Net Core 2.2.4","State":"open","Body":"Hi,\r\n\r\nI am trying to upgrade my solution to the latest .net core version (2.2.4).\r\n\r\nI have noticed that the test projects (xunit) are not updated automatically.\r\n\r\nI could reproduce it by creating a new solution with a wen api project and xunit project.\r\n\r\n![image](https://user-images.githubusercontent.com/10677560/56751833-39d4bd00-6787-11e9-9850-ae0f142a8e16.png)\r\n\r\nI have installed the latest versions of the runtime & the SDK:\r\n![image](https://user-images.githubusercontent.com/10677560/56752028-aea7f700-6787-11e9-8dc6-75478b861287.png)\r\n![image](https://user-images.githubusercontent.com/10677560/56752052-bbc4e600-6787-11e9-9836-a9f68f444248.png)\r\n\r\n\r\nAny idea why the xunit project is not upgraded?","Url":"https://github.com/dotnet/sdk/issues/3178","RelatedDescription":"Open issue \"Could not upgrade to .Net Core 2.2.4\" (#3178)"},{"Id":"437162717","IsPullRequest":true,"CreatedAt":"2019-04-25T13:40:21","Actor":"dotnet-maestro[bot]","Number":"3177","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3177","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3177)"},{"Id":"436853725","IsPullRequest":true,"CreatedAt":"2019-04-24T20:47:36","Actor":"johnbeisner","Number":"3176","RawContent":null,"Title":"Fix the parameters: Windows call to 'RunPerfTestsOnHelix'","State":"closed","Body":"The parameters were incorrect with Windows call to 'RunPerfTestsOnHelix'. This caused the upload to Benchview 'label' to look like this: `SDK perf Windows_NT x86 Release rolling refs/heads/master master` instead of the correct naming convection: `SDK perf Ubuntu_16.04 x64 Release rolling master 5b7f189b8297594a1001159dd290fb482d718969` The commit hash is missing; the branch is mis-named.","Url":"https://github.com/dotnet/sdk/pull/3176","RelatedDescription":"Closed or merged PR \"Fix the parameters: Windows call to 'RunPerfTestsOnHelix'\" (#3176)"},{"Id":"436657996","IsPullRequest":true,"CreatedAt":"2019-04-24T14:05:53","Actor":"dotnet-maestro[bot]","Number":"3174","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3174","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3174)"},{"Id":"436707362","IsPullRequest":false,"CreatedAt":"2019-04-24T13:46:29","Actor":"RiteshKo","Number":"3175","RawContent":null,"Title":"XML is not being published through the Docker container","State":"open","Body":"I am running a .net core 2.1 application through Docker ToolBox and Kitematic. I am new to the Docker world. In the application, I am loading an XML file in the application like below:\r\n\r\nXDocument xmlFile = XDocument.Load(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"XML\\\\Lookup.xml\"));\r\n\r\nMy Docker file is: \r\n\r\nFROM microsoft/dotnet:2.1-runtime\r\n\r\nWORKDIR /app\r\nCOPY . /app\r\n\r\nENTRYPOINT [\"dotnet\", \"ConsoleApp.dll\"]\r\n\r\nAn image got created for this application but while running the same image through Kitematic I am getting below error:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not find file '/app/XML\\ObjectInfoLookup.xml'.\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)\r\n   at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)\r\n   at System.Xml.XmlTextReaderImpl.FinishInitUriString()\r\n   at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)\r\n   at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)\r\n   at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings)\r\n   at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)\r\n\r\nCan anyone help me here?\r\n \r\n","Url":"https://github.com/dotnet/sdk/issues/3175","RelatedDescription":"Open issue \"XML is not being published through the Docker container\" (#3175)"},{"Id":"436441305","IsPullRequest":false,"CreatedAt":"2019-04-24T00:10:17","Actor":"tmat","Number":"3173","RawContent":null,"Title":"Move Version calculation to targets","State":"open","Body":"Currently, the .NET Core SDK initializes `Version` property during evaluation phase in `Microsoft.NET.DefaultAssemblyInfo.targets` based on the values of `VersionPrefix` and `VersionSuffix` properties. \r\n\r\nConsider a NuGet package that provides a optional feature that generates version based on some property set by the project. The package targets do not have the opportunity to set `VersionPrefix` since there is no extension point in between the import of .NET Core `Sdk.targets` and `Microsoft.NET.DefaultAssemblyInfo.targets`. The first available extension point is an import of \"BeforeMicrosoftCommonTargets\".\r\n\r\n**Proposal**\r\n \r\nMove the `Version` initialization to a target and update all usages to depend on that target. This would be a breaking change, but would also allow more complex version calculation to be performed than can be done by just evaluation. E.g. version based on git commit depth, etc.\r\n\r\n**Alterantive**\r\n\r\nInitialize `Version` after common targets are imported.\r\nThis would also be breaking, since the version wouldn't be initialized where it would have been before.\r\n\r\n**Non-breaking alternative**\r\n\r\nAdd `ImportBeforeDotNetSdkTargets` property that contains a list of files to be imported from `Sdk.targets` before the rest of the SDK targets are imported. The SDK package could then add its targets file to the list in its `.props` file and set the `VersionPrefix` and `VersionSuffix` in that file. \r\n\r\n**Workaround**\r\nUntil one of the options above is available, we work around this in Arcade by hooking up BeforeCommonTargets and overriding all properties that were set based on `VersionPrefix` to that point. \r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3173","RelatedDescription":"Open issue \"Move Version calculation to targets\" (#3173)"},{"Id":"436370590","IsPullRequest":true,"CreatedAt":"2019-04-23T22:39:09","Actor":"dsplaisted","Number":"3172","RawContent":null,"Title":"Ignore NuGet warning NU5123 (for long paths)","State":"closed","Body":"#3132 added a test project with a long path in it (HelloWorldWithSubDirs).  When we create dotnet tool packages for the tests, we bundle the test assets in them, and this is triggering [NU5123](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5123) [in our builds](https://dev.azure.com/dnceng/internal/_build/results?buildId=166542).\r\n\r\nSo this PR fixes this by ignoring that NuGet warning.","Url":"https://github.com/dotnet/sdk/pull/3172","RelatedDescription":"Closed or merged PR \"Ignore NuGet warning NU5123 (for long paths)\" (#3172)"},{"Id":"435938360","IsPullRequest":true,"CreatedAt":"2019-04-23T21:01:47","Actor":"johnbeisner","Number":"3167","RawContent":null,"Title":"Move the SDK Performance tests to Helix","State":"closed","Body":"Move the SDK Performance tests to Helix\r\n\r\n@MattGal\r\n@DrewScoggins\r\n@adiaaida \r\n","Url":"https://github.com/dotnet/sdk/pull/3167","RelatedDescription":"Closed or merged PR \"Move the SDK Performance tests to Helix\" (#3167)"},{"Id":"436270337","IsPullRequest":true,"CreatedAt":"2019-04-23T18:21:09","Actor":"dsplaisted","Number":"3171","RawContent":null,"Title":"Updates for running tests as tools","State":"closed","Body":"- Allow test execution directory to be specified via command line\r\n- Create .binlogs for basic library building tests (this can help to investigate the environment the tests are running in, which SDK is used, etc.)","Url":"https://github.com/dotnet/sdk/pull/3171","RelatedDescription":"Closed or merged PR \"Updates for running tests as tools\" (#3171)"},{"Id":"436150441","IsPullRequest":true,"CreatedAt":"2019-04-23T13:59:54","Actor":"dotnet-maestro[bot]","Number":"3169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3169)"},{"Id":"436151372","IsPullRequest":false,"CreatedAt":"2019-04-23T12:06:14","Actor":"Rast1234","Number":"3170","RawContent":null,"Title":"dotnet test without shared runtime","State":"open","Body":"Currently we run our apps with heavily customized corporate docker image. We publish self-contained apps, because we deemed it too time consuming and potentially problematic to get shared runtime to run in there.\r\nSo basically we do this (extra stuff omitted) in microsoft's SDK image:\r\n```dockerfile\r\nRUN dotnet restore \"Foo.csproj\" --runtime linux-x64\r\nRUN dotnet build \"Foo.csproj\" --runtime linux-x64 --no-restore \r\nRUN dotnet publish \"Foo.csproj\" --runtime linux-x64 --no-restore --self-contained\r\n```\r\nThen we copy results to our image and just run the binary.\r\n\r\nIs it possible to publish and run tests the same way? I am aware that test project is not executable by itself and requires a test runner. Test runner relies on shared runtime AFAIK. Can we get a self-contained test runner somehow? Or integrate it into test project maybe?","Url":"https://github.com/dotnet/sdk/issues/3170","RelatedDescription":"Open issue \"dotnet test without shared runtime\" (#3170)"},{"Id":"436140961","IsPullRequest":false,"CreatedAt":"2019-04-23T11:39:08","Actor":"vitek-karas","Number":"3168","RawContent":null,"Title":"dotnet store fails with \"the destination is a folder instead of a file\" in 3.0 SDK","State":"open","Body":"This is based on the repro from dotnet/cli#11223 which can be found [here](https://github.com/narcis-pv/dotnet-core-target-manifest-bug).\r\n\r\nRunning the `dotnet store` command described in the repro with .NET Core SDK 3.0.100-preview6-011540 produces error like this:\r\n```\r\nMicrosoft (R) Build Engine version 16.1.65-preview+gc86abee47b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 929.46 ms for F:\\AppModel\\repro\\dotnet-core-target-manifest-bug-master\\TargetManifestBug.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011540\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(347,5): error MSB3024: Could not copy the file \"F:\\AppModel\\repro\\dotnet-core-target-manifest-bug-master\\obj\\Debug\\netcoreapp2.2\\win7-x64\\TargetManifestBug.exe\" to the destination file \"C:\\Users\\vitkaras\\.dotnet\\store\\x64\\netcoreapp2.2\\\", because the destination is a folder instead of a file. To copy the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles. [F:\\AppModel\\repro\\dotnet-core-target-manifest-bug-master\\TargetManifestBug.csproj]\r\n  Files were composed in C:\\Users\\vitkaras\\.dotnet\\store\\x64\\netcoreapp2.2\\\r\n  The list of packages stored is in C:\\Users\\vitkaras\\.dotnet\\store\\x64\\netcoreapp2.2\\artifact.xml\r\n```\r\n\r\nRunning the same on .NET Core SDK 2.2.100 (using `global.json`) works just fine.\r\nSeems like a regression in 3.0.","Url":"https://github.com/dotnet/sdk/issues/3168","RelatedDescription":"Open issue \"dotnet store fails with \"the destination is a folder instead of a file\" in 3.0 SDK\" (#3168)"},{"Id":"435563213","IsPullRequest":true,"CreatedAt":"2019-04-22T18:27:06","Actor":"wli3","Number":"3163","RawContent":null,"Title":"Update branding to preview 6","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3163","RelatedDescription":"Closed or merged PR \"Update branding to preview 6\" (#3163)"},{"Id":"435560822","IsPullRequest":true,"CreatedAt":"2019-04-22T17:51:40","Actor":"wli3","Number":"3162","RawContent":null,"Title":"Merge master to release/3.0.1xx for preview5","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3162","RelatedDescription":"Closed or merged PR \"Merge master to release/3.0.1xx for preview5\" (#3162)"},{"Id":"435738707","IsPullRequest":false,"CreatedAt":"2019-04-22T14:05:48","Actor":"bryanfarrell","Number":"3166","RawContent":null,"Title":"GenerateAssemblyInfo support for InternalsVisibleToAttribute and AssemblyMetadataAttribute","State":"open","Body":"Hello,\r\n\r\nIn our .NET 4.7.2 applications we set the InternalsVisibleTo attribute on our libraries so that our internal unit test projects can run unit tests on internal methods without having to go through the trouble of putting public signatures of these methods into the class and wrapping everything in preprocessor directives.\r\n\r\nWe also make use of the AssemblyMetadata attribute to have our build system add vital diagnostic information to our assemblies so that there is never an issue with identifying when a project was built, from what repo commit etc.  This has made identifying and fixing bugs much easier more efficient.\r\n\r\nTo set these values we've manually set the InternalsVisibleTo attribute at design time into the AssemblyInfo.cs file.  We also have our build system inject the values into the AssemblyInfo.cs file at build time during the build (but the changes are not committed as the metadata all build version related metadata).\r\n\r\nIn .NET Standard and Core we've found that the common Assembly Attributes are now set in the project file.  Do you have plans to add these other attributes to the Microsoft.NET.GenerateAssemblyInfo.targets file so that they an be included in the project file so the new generate assembly info functionality can support adding these to the output assembly?\r\n\r\nWe have read there is a workaround where we can set the property GenerateAssemblyInfo to False and add an AssemblyInfo.cs file to the .NET Standard/Core projects but we would rather not use this workaround.  For one we do not know how long it will be supported and also we do not know if it will break the new project build workflow in some way.\r\n\r\nCan you please provide some advice on how these attributes can be used in .NET Standard/Core project files without the workaround or an indication if you plan on adding support for them to the Microsoft.NET.GenerateAssemblyInfo.targets file?\r\n\r\nThank you,\r\n\r\nBryan","Url":"https://github.com/dotnet/sdk/issues/3166","RelatedDescription":"Open issue \"GenerateAssemblyInfo support for InternalsVisibleToAttribute and AssemblyMetadataAttribute\" (#3166)"},{"Id":"435688151","IsPullRequest":false,"CreatedAt":"2019-04-22T10:56:31","Actor":"raffaeler","Number":"3164","RawContent":null,"Title":"Error parsing dotnet publish parameters when using ReadyToRun ","State":"open","Body":"Version:   3.0.100-preview5-011507\r\nCommit:    fddc070d00\r\n\r\nWhen running `dotnet publish` using both `-p:ReadyToRun` and `--self-contained` the message is misleading:\r\n\r\n```\r\n$ dotnet publish -c Release -r linux-arm --self-contained -p:ReadyToRun=true -o scd\r\nMicrosoft (R) Build Engine version 16.1.65-preview+gc86abee47b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/opt/dotnet/sdk/3.0.100-preview5-011507/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.TargetingPackResolution.targets(85,33): error MSB4030: \"-p:ReadyToRun=true\" is an invalid value for the \"SelfContained\" parameter of the \"ResolveFrameworkReferences\" task.\r\nThe \"SelfContained\" parameter is of type \"System.Boolean\". [/home/pi/test3/test3.csproj]\r\n```\r\n\r\nIf instead, I specify `=true` the command succeed:\r\n```\r\n $ dotnet publish -c Release -r linux-arm --self-contained=true -p:ReadyToRun=true -o scd\r\nMicrosoft (R) Build Engine version 16.1.65-preview+gc86abee47b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 372.72 ms for /home/pi/test3/test3.csproj.\r\n/opt/dotnet/sdk/3.0.100-preview5-011507/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/pi/test3/test3.csproj]\r\n  test3 -> /home/pi/test3/bin/Release/netcoreapp3.0/linux-arm/test3.dll\r\n  test3 -> /home/pi/test3/bin/Release/netcoreapp3.0/linux-arm/test3.Views.dll\r\n  test3 -> /home/pi/test3/scd/\r\n```\r\nIt looks like `-p:ReadyToRun` already forces `--self-contained=true` but I would like the command output to clearly states whether the produced output is self-contained or not.\r\n\r\nBy the way, the parameter `--self-contained` can be used alone (without `=true`) and it has been possible even in .NET Core 2.x. The following command is valid and succeeds:\r\n```\r\ndotnet publish -c Release -r linux-arm --self-contained -o abc\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3164","RelatedDescription":"Open issue \"Error parsing dotnet publish parameters when using ReadyToRun \" (#3164)"},{"Id":"435484986","IsPullRequest":false,"CreatedAt":"2019-04-21T07:46:06","Actor":"JamesNK","Number":"3161","RawContent":null,"Title":".NET Core 3 does not load pdbs from NuGet packages","State":"open","Body":"Source Link does not work when a NuGet package has its PDB files in the primary nupkg package because the symbols are never loaded. It works in .NET Core 2.2.\r\n\r\nRepo: [ConsoleApp20.zip](https://github.com/dotnet/sdk/files/3101009/ConsoleApp20.zip)\r\n\r\nSuccess:\r\n\r\n1. View csproj and note that the version target framework is `netcoreapp2.2`\r\n2. Launch console with debugging and step into JsonConvert.SerializeObject\r\n3. Source Link downloads and opens source code file\r\n\r\nFailure:\r\n\r\n1. Change csproj target framework to `netcoreapp3.0`\r\n2. Launch console with debugging and step into JsonConvert.SerializeObject\r\n3. Visual Studio steps over the Newtonsoft.Json API.\r\n\r\nVS 2019 16.1 Preview 1\r\n.NET Core 3.0.100-preview5-011367","Url":"https://github.com/dotnet/sdk/issues/3161","RelatedDescription":"Open issue \".NET Core 3 does not load pdbs from NuGet packages\" (#3161)"},{"Id":"435390745","IsPullRequest":true,"CreatedAt":"2019-04-20T13:26:35","Actor":"dotnet-maestro[bot]","Number":"3160","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3160","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3160)"},{"Id":"435366474","IsPullRequest":false,"CreatedAt":"2019-04-20T07:27:03","Actor":"nguyenquyhy","Number":"3159","RawContent":null,"Title":"Getting \"GenerateDepsFile\" task failed unexpectedly with KeyNotFoundException when publishing project","State":"open","Body":"I am getting `\"GenerateDepsFile\" task failed unexpectedly` with `KeyNotFoundException` when publishing my projects.\r\n\r\nBelow are the conditions that trigger the issue:\r\n- .NET Core 3.0 Preview 4\r\n- WindowsAzure.Storage 9.3.3 is in a .NET Standard library\r\n\r\nThis can be fixed by either going back to Preview 3 or add WindowsAzure.Storage directly into the .NET Core project.\r\n\r\nError in build log:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(801,5): Error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.DependencyContextBuilder2.CalculateExcludedLibraries() in /_/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder2.cs:line 769\r\n   at Microsoft.NET.Build.Tasks.DependencyContextBuilder2.Build() in /_/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder2.cs:line 215\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.WriteDepsFileNew(String depsFilePath) in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 248\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 284\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.Execute() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 262\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\nSample repository: https://github.com/nguyenquyhy/IssueWindowsAzureStoragePublish","Url":"https://github.com/dotnet/sdk/issues/3159","RelatedDescription":"Open issue \"Getting \"GenerateDepsFile\" task failed unexpectedly with KeyNotFoundException when publishing project\" (#3159)"},{"Id":"435348681","IsPullRequest":true,"CreatedAt":"2019-04-20T02:51:47","Actor":"swaroop-sridhar","Number":"3158","RawContent":null,"Title":"Mark PDB files generated by R2R as ExcludeFromSingleFile","State":"open","Body":"When published with `PublishReadyToRun=true` and `PublishReadyToRunEmitSymbols=true` certain additional symbol files are generated:\r\nOn Windows: `<app>.ni.pdb`\r\nOn Linux: `<app>.<guid>.map`\r\n\r\nWhen additionally publishing with `PublishSingleFile=true` exclude the above files from being bundled into the single-file output.","Url":"https://github.com/dotnet/sdk/pull/3158","RelatedDescription":"Open PR \"Mark PDB files generated by R2R as ExcludeFromSingleFile\" (#3158)"},{"Id":"435341558","IsPullRequest":true,"CreatedAt":"2019-04-20T01:12:25","Actor":"sbomer","Number":"3157","RawContent":null,"Title":"Enable native asset filtering","State":"open","Body":"This enables ILLink.Tasks to trim native assets that are no longer necessary after linking managed code. The behavior kicks in whenever the linker runs, but can be disabled by setting `TrimmerKeepNativeAssets`.","Url":"https://github.com/dotnet/sdk/pull/3157","RelatedDescription":"Open PR \"Enable native asset filtering\" (#3157)"},{"Id":"435339950","IsPullRequest":true,"CreatedAt":"2019-04-20T00:53:31","Actor":"sbomer","Number":"3156","RawContent":null,"Title":"ILLink cleanup","State":"open","Body":"Respond to remaining feedback from https://github.com/dotnet/sdk/pull/3125:\r\n- Use default deps generation mode\r\n- Use `TrimmerRootDescriptor` (singular) itemgroup, without a corresponding property\r\n\r\n@swaroop-sridhar The second two commits set the proper linker defaults. I made them part of the same PR to avoid having to fix merge conflicts between these changes.","Url":"https://github.com/dotnet/sdk/pull/3156","RelatedDescription":"Open PR \"ILLink cleanup\" (#3156)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1121443014239379458","CreatedAt":"2019-04-25T15:57:04+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1121149312442912768","CreatedAt":"2019-04-24T20:30:00+00:00","UserScreenname":"dotnet","Text":"We're bringing Apache Spark to .NET devs with .NET for Apache Spark. #SparkAISummit \nhttps://t.co/QJBouS8GMj https://t.co/gmAEfZoOwi","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":57,"RawContent":null},{"Id":"1120820297974730752","CreatedAt":"2019-04-23T22:42:37+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":21,"FavoriteCount":6,"RawContent":null},{"Id":"1119356060135907328","CreatedAt":"2019-04-19T21:44:16+00:00","UserScreenname":"dotnet","Text":"Upcoming Updates for .NET Framework 4.8 https://t.co/MYATh2Zg6u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":86,"FavoriteCount":31,"RawContent":null},{"Id":"1119087634003841025","CreatedAt":"2019-04-19T03:57:38+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is now available. https://t.co/emspxTsaEX","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":382,"FavoriteCount":223,"RawContent":null},{"Id":"1119030394605588480","CreatedAt":"2019-04-19T00:10:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 4 https://t.co/7QaZC5qmx6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":372,"FavoriteCount":215,"RawContent":null},{"Id":"1118906461180973059","CreatedAt":"2019-04-18T15:57:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"1118551190927622144","CreatedAt":"2019-04-17T16:26:00+00:00","UserScreenname":"dotnet","Text":"If you're enjoying the DevOps for https://t.co/iOiV9qNspl Developers series on @ch9 check out this FREE ebook from… https://t.co/IlN3xK8cpo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":22,"RawContent":null},{"Id":"1118529550902865924","CreatedAt":"2019-04-17T15:00:00+00:00","UserScreenname":"dotnet","Text":"In part 3 of DevOps For https://t.co/iOiV9r53NV Developers @AbelSquidHead\n&amp; @jeremylikness show us how to create a… https://t.co/s7eQpdTakW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1118196772604530688","CreatedAt":"2019-04-16T16:57:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":20,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-04-28T05:30:29.6550018Z","RunDurationInMilliseconds":8296}