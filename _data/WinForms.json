{"Data":{"GitHub":{"Issues":[{"Id":"462346908","IsPullRequest":true,"CreatedAt":"2019-07-04T03:23:28","Actor":"JeremyKuhne","Number":"1246","RawContent":null,"Title":"Clean out dead interop code","State":"closed","Body":"Removed internal interop code with no callers. Removed FxCop suppressions related to interop (the suppressions don't match our current interop guidelines). Fixed line spacing (mostly).\r\n\r\nI kept functional changes out of this commit. There is plenty more cleanup that can be done. The cuts here remove about 8K from the release build of System.Windows.Forms.dll.\r\n\r\nThere was way more dead code than I expected when I started fixing the spacing. :) While I did keep functional changes out, it is quite a large change so I'm fine if you want to wait for master to open for post 3.0.\r\n\r\nWe can do a fair amount to further cut size down and improve performance both for PInvokes and COM interop. Cleaning up the spacing and dead code here should make that easier to digest/follow.","Url":"https://github.com/dotnet/winforms/pull/1246","RelatedDescription":"Closed or merged PR \"Clean out dead interop code\" (#1246)"},{"Id":"463062444","IsPullRequest":true,"CreatedAt":"2019-07-04T00:27:58","Actor":"RussKie","Number":"1255","RawContent":null,"Title":"Fix 989 implement PreFilterAttributes and PreFilterEvents events","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nCloses #989\r\n\r\n\r\n## Proposed changes\r\n\r\n- Copy the behaviour as provided by NET Fx.\r\n- Cleanup remove duplicated code and invert `if`s to reduce nesting","Url":"https://github.com/dotnet/winforms/pull/1255","RelatedDescription":"Closed or merged PR \"Fix 989 implement PreFilterAttributes and PreFilterEvents events\" (#1255)"},{"Id":"463362654","IsPullRequest":true,"CreatedAt":"2019-07-03T02:26:34","Actor":"hughbe","Number":"1265","RawContent":null,"Title":"Add ApplicationContext tests and cleanup code","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/1265","RelatedDescription":"Closed or merged PR \"Add ApplicationContext tests and cleanup code\" (#1265)"},{"Id":"463186221","IsPullRequest":true,"CreatedAt":"2019-07-03T01:31:33","Actor":"v-zbsail","Number":"1264","RawContent":null,"Title":"LOC CHECKIN | dotnet/winforms master | 20190702","State":"closed","Body":"Fixes #1076 ","Url":"https://github.com/dotnet/winforms/pull/1264","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/winforms master | 20190702\" (#1264)"},{"Id":"463430639","IsPullRequest":true,"CreatedAt":"2019-07-02T20:53:10","Actor":"dreddy-work","Number":"1267","RawContent":null,"Title":"Removing instances of \"Framework\" and Cleaning unised methods","State":"open","Body":"Cleaning DpiHelper class methods that were not used anymore. Removing the \"Framework\" instances. Cleaning comments and updating resx templates.\r\n\r\nFixes #485 ","Url":"https://github.com/dotnet/winforms/pull/1267","RelatedDescription":"Open PR \"Removing instances of \"Framework\" and Cleaning unised methods\" (#1267)"},{"Id":"463380066","IsPullRequest":true,"CreatedAt":"2019-07-02T19:02:34","Actor":"wtgodbe","Number":"1266","RawContent":null,"Title":"Fix COM interop ELEMDESC (#1254)","State":"closed","Body":"ELEMDESC doesn't contain a pointer. This fixes a regression introduced in #818.\r\n\r\nFixes #896\r\n\r\nHas been approved for preview7. CC @JeremyKuhne @danmosemsft \r\n\r\nCherry-pick of https://github.com/dotnet/winforms/pull/1254","Url":"https://github.com/dotnet/winforms/pull/1266","RelatedDescription":"Closed or merged PR \"Fix COM interop ELEMDESC (#1254)\" (#1266)"},{"Id":"462957323","IsPullRequest":true,"CreatedAt":"2019-07-02T17:44:25","Actor":"JeremyKuhne","Number":"1254","RawContent":null,"Title":"Fix COM interop ELEMDESC","State":"closed","Body":"ELEMDESC doesn't contain a pointer. This fixes a regression introduced in #818.\r\n\r\nFixes #896\r\n\r\nThis particular bug is breaking Office interop on WPF and WinForms. Repro is to reference the following COM components:\r\n\r\n- Microsoft.Office.Interop.Outlook\r\n- Office\r\n- stdole\r\n\r\n In a WPF app, add the following to the main Window xaml:\r\n\r\n``` xml\r\n<ComboBox ItemsSource=\"{Binding}\" DisplayMemberPath=\"DisplayName\" Height=\"27\" Width=\"332\" />\r\n```\r\n\r\nAnd the following to the code behind for Window_Loaded:\r\n\r\n``` C#\r\n\r\nusing Microsoft.Office.Interop.Outlook;\r\nusing Outlook = Microsoft.Office.Interop.Outlook;\r\n\r\n// ...\r\n        private void Window_Loaded(object sender, RoutedEventArgs e)\r\n        {\r\n            List<Account> Accounts = new List<Account>();\r\n            Outlook.Application outlook = new Outlook.Application();\r\n            foreach (Account account in outlook.Session.Accounts)\r\n            {\r\n                Accounts.Add(account);\r\n            }\r\n            this.DataContext = Accounts;\r\n        }\r\n\r\n```\r\n\r\nThis should be considered for preview 7.\r\n\r\nUltimately we should use the COM types defined in CoreFX to reduce risk and cut the assembly size for WinForms, but making that change is non-trivial for 3.0. #1253\r\n\r\ncc: @sharwell, @AaronRobinsonMSFT ","Url":"https://github.com/dotnet/winforms/pull/1254","RelatedDescription":"Closed or merged PR \"Fix COM interop ELEMDESC\" (#1254)"},{"Id":"463143796","IsPullRequest":false,"CreatedAt":"2019-07-02T10:15:41","Actor":"hughbe","Number":"1263","RawContent":null,"Title":"ComponentDesigner.DoDefaultAction throws InvalidCastException if GetCompatibleMethods contains a non-string value","State":"open","Body":"Invalid values should be skipped (e.g. enumerate using `.OfType<string>()`)\r\n\r\n```cs\r\npublic static IEnumerable<object[]> DoDefaultAction_ValidProperty_TestData()\r\n{\r\n    foreach (string property in new string[] { nameof(DefaultEventComponent.StringProperty) })\r\n    {\r\n        yield return new object[] { property, new object[] { null, new object(), \"NoSuchStringValue\" }, 1, null };\r\n        yield return new object[] { property, new object[] { null, new object(), \"NoSuchStringValue\" }, 1, string.Empty };\r\n        yield return new object[] { property, new object[] { null, new object(), \"NoSuchStringValue\" }, 1, \"UniqueMethod\" };\r\n    }\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(DoDefaultAction_ValidProperty_TestData))]\r\npublic void ComponentDesigner_DoDefaultAction_InvokeWithComponentWithHostValidProperty_Success(string property, ICollection compatibleMethods, int expectedSetCallCount, string uniqueMethodName)\r\n{\r\n    var designer = new ComponentDesigner();\r\n    var component1 = new DefaultEventComponent\r\n    {\r\n        StringProperty = \"StringValue\"\r\n    };\r\n    var component2 = new DefaultEventComponent\r\n    {\r\n        StringProperty = string.Empty\r\n    };\r\n    var component3 = new DefaultEventComponent\r\n    {\r\n        StringProperty = null\r\n    };\r\n    var mockEventBindingService = new Mock<IEventBindingService>(MockBehavior.Strict);\r\n    mockEventBindingService\r\n        .Setup(s => s.GetEventProperty(It.IsAny<EventDescriptor>()))\r\n        .Returns(TypeDescriptor.GetProperties(typeof(DefaultEventComponent))[property])\r\n        .Verifiable();\r\n    mockEventBindingService\r\n        .Setup(s => s.CreateUniqueMethodName(component3, It.IsAny<EventDescriptor>()))\r\n        .Returns(uniqueMethodName)\r\n        .Verifiable();\r\n    mockEventBindingService\r\n        .Setup(s => s.GetCompatibleMethods(It.IsAny<EventDescriptor>()))\r\n        .Returns(compatibleMethods)\r\n        .Verifiable();\r\n    var mockSelectionService = new Mock<ISelectionService>(MockBehavior.Strict);\r\n    mockSelectionService\r\n        .Setup(s => s.GetSelectedComponents())\r\n        .Returns(new object[] { component1, component2, component3 });\r\n    var mockDesignerHost = new Mock<IDesignerHost>(MockBehavior.Strict);\r\n    mockDesignerHost\r\n        .Setup(h => h.RootComponent)\r\n        .Returns<IComponent>(null);\r\n    mockDesignerHost\r\n        .Setup(h => h.CreateTransaction(It.IsAny<string>()))\r\n        .Returns<DesignerTransaction>(null)\r\n        .Verifiable();\r\n    var mockSite = new Mock<ISite>(MockBehavior.Strict);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDesignerHost)))\r\n        .Returns(mockDesignerHost.Object);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IComponentChangeService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IInheritanceService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDictionaryService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IExtenderListService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ITypeDescriptorFilterService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IEventBindingService)))\r\n        .Returns(mockEventBindingService.Object)\r\n        .Verifiable();\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ISelectionService)))\r\n        .Returns(mockSelectionService.Object)\r\n        .Verifiable();\r\n    var rootComponent = new Component\r\n    {\r\n        Site = mockSite.Object\r\n    };\r\n    designer.Initialize(rootComponent);\r\n    component1.StringPropertySetCount = 0;\r\n    component2.StringPropertySetCount = 0;\r\n    component3.StringPropertySetCount = 0;\r\n\r\n    designer.DoDefaultAction();\r\n    mockSite.Verify(s => s.GetService(typeof(IEventBindingService)), Times.Once());\r\n    mockSite.Verify(s => s.GetService(typeof(ISelectionService)), Times.Once());\r\n    mockEventBindingService.Verify(s => s.GetEventProperty(It.IsAny<EventDescriptor>()), Times.Exactly(3));\r\n    mockDesignerHost.Verify(h => h.CreateTransaction(It.IsAny<string>()), Times.Exactly(3));\r\n    mockEventBindingService.Verify(s => s.CreateUniqueMethodName(component3, It.IsAny<EventDescriptor>()), Times.Once());\r\n    mockEventBindingService.Verify(s => s.GetCompatibleMethods(It.IsAny<EventDescriptor>()), Times.Exactly(2));\r\n    Assert.Equal(\"StringValue\", component1.StringProperty);\r\n    Assert.Equal(expectedSetCallCount, component1.StringPropertySetCount);\r\n    Assert.Empty(component2.StringProperty);\r\n    Assert.Equal(1, component2.StringPropertySetCount);\r\n    Assert.Equal(uniqueMethodName, component3.StringProperty);\r\n    Assert.Equal(1, component3.StringPropertySetCount);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1263","RelatedDescription":"Open issue \"ComponentDesigner.DoDefaultAction throws InvalidCastException if GetCompatibleMethods contains a non-string value\" (#1263)"},{"Id":"463143303","IsPullRequest":false,"CreatedAt":"2019-07-02T10:14:34","Actor":"hughbe","Number":"1262","RawContent":null,"Title":"ComponentDesigner.DoDefaultAction throws NullReferenceException if GetCompatibleMethods returns null","State":"open","Body":"Should be treated as if it were empty\r\n```cs\r\npublic static IEnumerable<object[]> DoDefaultAction_ValidProperty_TestData()\r\n{\r\n    foreach (string property in new string[] { nameof(DefaultEventComponent.StringProperty) })\r\n    {\r\n        yield return new object[] { property, null, 1, null };\r\n        yield return new object[] { property, null, 1, string.Empty };\r\n        yield return new object[] { property, null, 1, \"UniqueMethod\" };\r\n    }\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(DoDefaultAction_ValidProperty_TestData))]\r\npublic void ComponentDesigner_DoDefaultAction_InvokeWithComponentWithHostValidProperty_Success(string property, ICollection compatibleMethods, int expectedSetCallCount, string uniqueMethodName)\r\n{\r\n    var designer = new ComponentDesigner();\r\n    var component1 = new DefaultEventComponent\r\n    {\r\n        StringProperty = \"StringValue\"\r\n    };\r\n    var component2 = new DefaultEventComponent\r\n    {\r\n        StringProperty = string.Empty\r\n    };\r\n    var component3 = new DefaultEventComponent\r\n    {\r\n        StringProperty = null\r\n    };\r\n    var mockEventBindingService = new Mock<IEventBindingService>(MockBehavior.Strict);\r\n    mockEventBindingService\r\n        .Setup(s => s.GetEventProperty(It.IsAny<EventDescriptor>()))\r\n        .Returns(TypeDescriptor.GetProperties(typeof(DefaultEventComponent))[property])\r\n        .Verifiable();\r\n    mockEventBindingService\r\n        .Setup(s => s.CreateUniqueMethodName(component3, It.IsAny<EventDescriptor>()))\r\n        .Returns(uniqueMethodName)\r\n        .Verifiable();\r\n    mockEventBindingService\r\n        .Setup(s => s.GetCompatibleMethods(It.IsAny<EventDescriptor>()))\r\n        .Returns(compatibleMethods)\r\n        .Verifiable();\r\n    var mockSelectionService = new Mock<ISelectionService>(MockBehavior.Strict);\r\n    mockSelectionService\r\n        .Setup(s => s.GetSelectedComponents())\r\n        .Returns(new object[] { component1, component2, component3 });\r\n    var mockDesignerHost = new Mock<IDesignerHost>(MockBehavior.Strict);\r\n    mockDesignerHost\r\n        .Setup(h => h.RootComponent)\r\n        .Returns<IComponent>(null);\r\n    mockDesignerHost\r\n        .Setup(h => h.CreateTransaction(It.IsAny<string>()))\r\n        .Returns<DesignerTransaction>(null)\r\n        .Verifiable();\r\n    var mockSite = new Mock<ISite>(MockBehavior.Strict);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDesignerHost)))\r\n        .Returns(mockDesignerHost.Object);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IComponentChangeService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IInheritanceService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDictionaryService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IExtenderListService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ITypeDescriptorFilterService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IEventBindingService)))\r\n        .Returns(mockEventBindingService.Object)\r\n        .Verifiable();\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ISelectionService)))\r\n        .Returns(mockSelectionService.Object)\r\n        .Verifiable();\r\n    var rootComponent = new Component\r\n    {\r\n        Site = mockSite.Object\r\n    };\r\n    designer.Initialize(rootComponent);\r\n    component1.StringPropertySetCount = 0;\r\n    component2.StringPropertySetCount = 0;\r\n    component3.StringPropertySetCount = 0;\r\n\r\n    designer.DoDefaultAction();\r\n    mockSite.Verify(s => s.GetService(typeof(IEventBindingService)), Times.Once());\r\n    mockSite.Verify(s => s.GetService(typeof(ISelectionService)), Times.Once());\r\n    mockEventBindingService.Verify(s => s.GetEventProperty(It.IsAny<EventDescriptor>()), Times.Exactly(3));\r\n    mockDesignerHost.Verify(h => h.CreateTransaction(It.IsAny<string>()), Times.Exactly(3));\r\n    mockEventBindingService.Verify(s => s.CreateUniqueMethodName(component3, It.IsAny<EventDescriptor>()), Times.Once());\r\n    mockEventBindingService.Verify(s => s.GetCompatibleMethods(It.IsAny<EventDescriptor>()), Times.Exactly(2));\r\n    Assert.Equal(\"StringValue\", component1.StringProperty);\r\n    Assert.Equal(expectedSetCallCount, component1.StringPropertySetCount);\r\n    Assert.Empty(component2.StringProperty);\r\n    Assert.Equal(1, component2.StringPropertySetCount);\r\n    Assert.Equal(uniqueMethodName, component3.StringProperty);\r\n    Assert.Equal(1, component3.StringPropertySetCount);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1262","RelatedDescription":"Open issue \"ComponentDesigner.DoDefaultAction throws NullReferenceException if GetCompatibleMethods returns null\" (#1262)"},{"Id":"463142654","IsPullRequest":false,"CreatedAt":"2019-07-02T10:13:13","Actor":"hughbe","Number":"1261","RawContent":null,"Title":"ComponentDesigner.DoDefaultAction throws InvalidCastException if the default event property is not a string","State":"open","Body":"Should be skipped in the same way as read-only properties\r\n```cs\r\npublic static IEnumerable<object[]> DoDefaultAction_InvalidProperty_TestData()\r\n{\r\n    yield return new object[] { null };\r\n    yield return new object[] { TypeDescriptor.GetProperties(typeof(DefaultEventComponent))[nameof(DefaultEventComponent.ReadOnlyProperty)] };\r\n    yield return new object[] { TypeDescriptor.GetProperties(typeof(DefaultEventComponent))[nameof(DefaultEventComponent.IntProperty)] };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(DoDefaultAction_InvalidProperty_TestData))]\r\npublic void ComponentDesigner_DoDefaultAction_InvokeWithComponentWithHostInvalidProperty_Success(PropertyDescriptor property)\r\n{\r\n    var designer = new ComponentDesigner();\r\n    var component = new DefaultEventComponent\r\n    {\r\n        StringProperty = \"StringValue\"\r\n    };\r\n    var mockEventBindingService = new Mock<IEventBindingService>(MockBehavior.Strict);\r\n    mockEventBindingService\r\n        .Setup(s => s.GetEventProperty(It.IsAny<EventDescriptor>()))\r\n        .Returns(property)\r\n        .Verifiable();\r\n    var mockSelectionService = new Mock<ISelectionService>(MockBehavior.Strict);\r\n    mockSelectionService\r\n        .Setup(s => s.GetSelectedComponents())\r\n        .Returns(new object[] { component });\r\n    var mockDesignerHost = new Mock<IDesignerHost>(MockBehavior.Strict);\r\n    mockDesignerHost\r\n        .Setup(h => h.RootComponent)\r\n        .Returns<IComponent>(null);\r\n    mockDesignerHost\r\n        .Setup(h => h.CreateTransaction(It.IsAny<string>()))\r\n        .Returns<DesignerTransaction>(null)\r\n        .Verifiable();\r\n    var mockSite = new Mock<ISite>(MockBehavior.Strict);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDesignerHost)))\r\n        .Returns(mockDesignerHost.Object);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IComponentChangeService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IInheritanceService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDictionaryService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IExtenderListService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ITypeDescriptorFilterService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IEventBindingService)))\r\n        .Returns(mockEventBindingService.Object)\r\n        .Verifiable();\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ISelectionService)))\r\n        .Returns(mockSelectionService.Object)\r\n        .Verifiable();\r\n    var rootComponent = new Component\r\n    {\r\n        Site = mockSite.Object\r\n    };\r\n    designer.Initialize(rootComponent);\r\n    component.StringPropertySetCount = 0;\r\n\r\n    designer.DoDefaultAction();\r\n    mockSite.Verify(s => s.GetService(typeof(IEventBindingService)), Times.Once());\r\n    mockSite.Verify(s => s.GetService(typeof(ISelectionService)), Times.Once());\r\n    mockSite.Verify(s => s.GetService(typeof(IDesignerHost)), Times.Exactly(2));\r\n    mockSelectionService.Verify(s => s.GetSelectedComponents(), Times.Once());\r\n    mockEventBindingService.Verify(s => s.GetEventProperty(It.IsAny<EventDescriptor>()), Times.Once());\r\n    Assert.Equal(\"StringValue\", component.StringProperty);\r\n    Assert.Equal(0, component.StringPropertySetCount);\r\n\r\n    // Call again.\r\n    designer.DoDefaultAction();\r\n    mockSite.Verify(s => s.GetService(typeof(IEventBindingService)), Times.Exactly(2));\r\n    mockSite.Verify(s => s.GetService(typeof(ISelectionService)), Times.Exactly(2));\r\n    mockSite.Verify(s => s.GetService(typeof(IDesignerHost)), Times.Exactly(3));\r\n    mockSelectionService.Verify(s => s.GetSelectedComponents(), Times.Exactly(2));\r\n    mockEventBindingService.Verify(s => s.GetEventProperty(It.IsAny<EventDescriptor>()), Times.Exactly(2));\r\n    Assert.Equal(\"StringValue\", component.StringProperty);\r\n    Assert.Equal(0, component.StringPropertySetCount);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1261","RelatedDescription":"Open issue \"ComponentDesigner.DoDefaultAction throws InvalidCastException if the default event property is not a string\" (#1261)"},{"Id":"463141954","IsPullRequest":false,"CreatedAt":"2019-07-02T10:11:45","Actor":"hughbe","Number":"1260","RawContent":null,"Title":"ComponentDesigner.DoDefaultAction throws NRE if GetSelectedComponents returns null","State":"open","Body":"Should be treated as if it were empty\r\n\r\n```cs\r\npublic static IEnumerable<object[]> DoDefaultAction_InvalidSelectedComponents_TestData()\r\n{\r\n    yield return new object[] { null };\r\n    yield return new object[] { new object[0] };\r\n    yield return new object[] { new object[] { null, new object() } };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(DoDefaultAction_InvalidSelectedComponents_TestData))]\r\npublic void ComponentDesigner_DoDefaultAction_InvokeWithComponentWithHostInvalidSelectedComponents_Success(ICollection selectedComponents)\r\n{\r\n    var designer = new ComponentDesigner();\r\n    var mockEventBindingService = new Mock<IEventBindingService>(MockBehavior.Strict);\r\n    var mockSelectionService = new Mock<ISelectionService>(MockBehavior.Strict);\r\n    mockSelectionService\r\n        .Setup(s => s.GetSelectedComponents())\r\n        .Returns(selectedComponents);\r\n    var mockDesignerHost = new Mock<IDesignerHost>(MockBehavior.Strict);\r\n    mockDesignerHost\r\n        .Setup(h => h.RootComponent)\r\n        .Returns<IComponent>(null);\r\n    var mockSite = new Mock<ISite>(MockBehavior.Strict);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDesignerHost)))\r\n        .Returns(mockDesignerHost.Object);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IComponentChangeService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IInheritanceService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDictionaryService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IExtenderListService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ITypeDescriptorFilterService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IEventBindingService)))\r\n        .Returns(mockEventBindingService.Object)\r\n        .Verifiable();\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ISelectionService)))\r\n        .Returns(mockSelectionService.Object)\r\n        .Verifiable();\r\n    var rootComponent = new Component\r\n    {\r\n        Site = mockSite.Object\r\n    };\r\n    designer.Initialize(rootComponent);\r\n\r\n    designer.DoDefaultAction();\r\n    mockSite.Verify(s => s.GetService(typeof(IEventBindingService)), Times.Once());\r\n    mockSite.Verify(s => s.GetService(typeof(ISelectionService)), Times.Once());\r\n    mockSite.Verify(s => s.GetService(typeof(IDesignerHost)), Times.Exactly(2));\r\n    mockSelectionService.Verify(s => s.GetSelectedComponents(), Times.Once());\r\n\r\n    // Call again.\r\n    designer.DoDefaultAction();\r\n    mockSite.Verify(s => s.GetService(typeof(IEventBindingService)), Times.Exactly(2));\r\n    mockSite.Verify(s => s.GetService(typeof(ISelectionService)), Times.Exactly(2));\r\n    mockSite.Verify(s => s.GetService(typeof(IDesignerHost)), Times.Exactly(3));\r\n    mockSelectionService.Verify(s => s.GetSelectedComponents(), Times.Exactly(2));\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1260","RelatedDescription":"Open issue \"ComponentDesigner.DoDefaultAction throws NRE if GetSelectedComponents returns null\" (#1260)"},{"Id":"463140112","IsPullRequest":false,"CreatedAt":"2019-07-02T10:07:48","Actor":"hughbe","Number":"1259","RawContent":null,"Title":"ComponentDesigner.Children throws NRE if AssociatedComponents returns null","State":"open","Body":"Should be treated as if it were empty\r\n\r\n```cs\r\npublic static IEnumerable<object[]> Children_GetInvalidService_TestData()\r\n{\r\n    foreach (ICollection associatedComponents in new object[] { null, new object[0], new object[] { new Component() }})\r\n    {\r\n        yield return new object[] { associatedComponents, null };\r\n        yield return new object[] { associatedComponents, new object() };\r\n    }\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(Children_GetInvalidService_TestData))]\r\npublic void ComponentDesigner_Children_GetWithInvalidDesignerHost_ReturnsEmpty(ICollection associatedComponents, object host)\r\n{\r\n    var designer = new CustomAssociatedComponentsComponentDesigner(associatedComponents);\r\n    ITreeDesigner treeDesigner = designer;\r\n    var mockSite = new Mock<ISite>(MockBehavior.Strict);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDesignerHost)))\r\n        .Returns(host);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IComponentChangeService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IInheritanceService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IDictionaryService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(IExtenderListService)))\r\n        .Returns(null);\r\n    mockSite\r\n        .Setup(s => s.GetService(typeof(ITypeDescriptorFilterService)))\r\n        .Returns(null);\r\n    var component = new Component\r\n    {\r\n        Site = mockSite.Object\r\n    };\r\n    designer.Initialize(component);\r\n    Assert.Empty(treeDesigner.Children);\r\n}\r\n\r\nprivate class CustomAssociatedComponentsComponentDesigner : ComponentDesigner\r\n{\r\n    private readonly ICollection _associatedComponents;\r\n\r\n    public CustomAssociatedComponentsComponentDesigner(ICollection associatedComponents)\r\n    {\r\n        _associatedComponents = associatedComponents;\r\n    }\r\n\r\n    public override ICollection AssociatedComponents => _associatedComponents;\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1259","RelatedDescription":"Open issue \"ComponentDesigner.Children throws NRE if AssociatedComponents returns null\" (#1259)"},{"Id":"463136348","IsPullRequest":false,"CreatedAt":"2019-07-02T10:00:03","Actor":"hughbe","Number":"1258","RawContent":null,"Title":"DesignSurface.View throws NRE if the root component designer has null SupportedTechnologies","State":"open","Body":"Should be treated the same as if the `SupportedTechnologies` array was empty\r\n\r\n```cs\r\n[Theory]\r\n[InlineData(typeof(NullSupportedTechnologiesRootDesignerComponent))]\r\n[InlineData(typeof(EmptySupportedTechnologiesRootDesignerComponent))]\r\npublic void DesignSurface_View_GetWithInvalidSupportedTechnologies_ThrowsNotSupportedException(Type rootComponentType)\r\n{\r\n    var surface = new SubDesignSurface();\r\n    surface.BeginLoad(rootComponentType);\r\n    Assert.Throws<NotSupportedException>(() => surface.View);\r\n}\r\n\r\nprivate class NullSupportedTechnologiesRootComponentDesigner : ComponentDesigner, IRootDesigner\r\n{\r\n    public ViewTechnology[] SupportedTechnologies => null;\r\n    public object GetView(ViewTechnology technology) => throw new NotImplementedException();\r\n}\r\n\r\n[Designer(typeof(NullSupportedTechnologiesRootComponentDesigner), typeof(IRootDesigner))]\r\nprivate class NullSupportedTechnologiesRootDesignerComponent : Component\r\n{\r\n}\r\n\r\nprivate class SubDesignSurface : DesignSurface\r\n{\r\n    public SubDesignSurface() : base()\r\n    {\r\n    }\r\n\r\n    public IDesignerLoaderHost2 Host => Assert.IsAssignableFrom<IDesignerLoaderHost2>(ComponentContainer);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1258","RelatedDescription":"Open issue \"DesignSurface.View throws NRE if the root component designer has null SupportedTechnologies\" (#1258)"},{"Id":"463135603","IsPullRequest":false,"CreatedAt":"2019-07-02T09:58:29","Actor":"hughbe","Number":"1257","RawContent":null,"Title":"DesignSurface.View throws NRE if `LoadErrors` contains a null element","State":"open","Body":"E..g\r\n```cs\r\npublic static IEnumerable<object[]> View_GetLoadError_TestData()\r\n{\r\n    yield return new object[] { new object[0] };\r\n    yield return new object[] { new object[] { new Exception() } };\r\n    yield return new object[] { new object[] { \"Error\" } };\r\n    yield return new object[] { new object[] { null } };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(View_GetLoadError_TestData))]\r\npublic void DesignSurface_View_GetWithLoadErrors_ThrowsInvalidOperationException(object[] errorCollection)\r\n{\r\n    var surface = new SubDesignSurface();\r\n    IDesignerLoaderHost2 host = surface.Host;\r\n    var mockLoader = new Mock<DesignerLoader>(MockBehavior.Strict);\r\n    mockLoader\r\n        .Setup(l => l.BeginLoad(host));\r\n    surface.BeginLoad(mockLoader.Object);\r\n    host.EndLoad(\"BaseClassName\", false, errorCollection);\r\n    Assert.Throws<InvalidOperationException>(() => surface.View);\r\n}\r\n\r\nprivate class SubDesignSurface : DesignSurface\r\n{\r\n    public SubDesignSurface() : base()\r\n    {\r\n    }\r\n\r\n    public IDesignerLoaderHost2 Host => Assert.IsAssignableFrom<IDesignerLoaderHost2>(ComponentContainer);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1257","RelatedDescription":"Open issue \"DesignSurface.View throws NRE if `LoadErrors` contains a null element\" (#1257)"},{"Id":"463133686","IsPullRequest":true,"CreatedAt":"2019-07-02T09:54:22","Actor":"hughbe","Number":"1256","RawContent":null,"Title":"Improve editor tests","State":"open","Body":"Extracted from #1215","Url":"https://github.com/dotnet/winforms/pull/1256","RelatedDescription":"Open PR \"Improve editor tests\" (#1256)"},{"Id":"462402539","IsPullRequest":true,"CreatedAt":"2019-07-01T23:46:02","Actor":"MichalStrehovsky","Number":"1247","RawContent":null,"Title":"Mark pvBuffer as In/Out","State":"closed","Body":"This parameter is actually used as out. Per https://docs.microsoft.com/en-us/dotnet/framework/interop/blittable-and-non-blittable-types these parameters must be marked as such (\"you must apply the InAttribute and OutAttribute attributes if you want to marshal the argument as an In/Out parameter\"). The code currently works, because it's taking advantage of the pinning optimization that the CLR does, otherwise it would be treated as \"in\" only. It will keep working the same with the extra metadata, but the metadata will be correct.\r\n\r\nHit this while running on a runtime that doesn't do the pinning optimization (and this annotation is a fix for that).","Url":"https://github.com/dotnet/winforms/pull/1247","RelatedDescription":"Closed or merged PR \"Mark pvBuffer as In/Out\" (#1247)"},{"Id":"462954780","IsPullRequest":false,"CreatedAt":"2019-07-01T23:34:24","Actor":"JeremyKuhne","Number":"1253","RawContent":null,"Title":"WinForms should use System.Runtime.InteropServices.ComTypes","State":"open","Body":"Doing so will significantly reduce the footprint of WinForms and will reduce risk.","Url":"https://github.com/dotnet/winforms/issues/1253","RelatedDescription":"Open issue \"WinForms should use System.Runtime.InteropServices.ComTypes\" (#1253)"},{"Id":"462891156","IsPullRequest":true,"CreatedAt":"2019-07-01T20:14:23","Actor":"hughbe","Number":"1252","RawContent":null,"Title":"Add more ComponentDesigner tests and fix some bugs","State":"open","Body":"Contributes to #817\r\nFixes #1259\r\nFixes #1260\r\nFixes #1261\r\nFixes #1262\r\nFixes #1263","Url":"https://github.com/dotnet/winforms/pull/1252","RelatedDescription":"Open PR \"Add more ComponentDesigner tests and fix some bugs\" (#1252)"},{"Id":"462162191","IsPullRequest":true,"CreatedAt":"2019-07-01T19:13:50","Actor":"dreddy-work","Number":"1243","RawContent":null,"Title":"Removing the public interface that enforce dependancy on System.Confi…","State":"closed","Body":"…guration.Manager package.\r\n\r\nWe still depend on this package for 'ToolstripSettings'. We will revisit this dependancy\r\nwhen we have solution for replacing/redesigning the way we read those settings.\r\nfixes #1007 ","Url":"https://github.com/dotnet/winforms/pull/1243","RelatedDescription":"Closed or merged PR \"Removing the public interface that enforce dependancy on System.Confi…\" (#1243)"},{"Id":"462845785","IsPullRequest":false,"CreatedAt":"2019-07-01T18:17:30","Actor":"GrabYourPitchforks","Number":"1251","RawContent":null,"Title":"Clean up usage of BinaryFormatter throughout codebase","State":"open","Body":"See https://github.com/dotnet/corefx/issues/38760 for more information.\r\n\r\nThere is a possibility that the BinaryFormatter type might be moved out of the shared framework in a future release. Since WinForms is part of the shared framework, the code base should begin preparing for this transition. The following steps will help ensure that if a \"safe\" BinaryFormatter-compatible serializer is introduced in place of the original BinaryFormatter type, WinForms will be able to drop its dependency on the legacy type and move on to the new type with minimal friction.\r\n\r\n1. Consider all usages of BinaryFormatter already in the code. Is it _absolutely mandatory_ that each of these usages be present? Is there a critical business or customer scenario that this fulfills that cannot be addressed by some other technology? Consider that some types (like `Delegate`) which are serializable in Full Framework are not serializable in Core, so this might affect some call sites which were kept for \"back compat\" reasons but which were not fully tested. If a call site does not need to exist, remove it.\r\n\r\n2. Of the remaining usages, ensure that a type-limiting `SerializationBinder` is _always_ present. Do not allow any code path which might bypass setting the `SerializationBinder` on the serializer instance. (This guidance only applies to call sites where `Deserialize` is called.)\r\n\r\nIf there are any places where these requirements cannot be met then we can work through them on a case-by-case basis. Thanks!","Url":"https://github.com/dotnet/winforms/issues/1251","RelatedDescription":"Open issue \"Clean up usage of BinaryFormatter throughout codebase\" (#1251)"},{"Id":"462773505","IsPullRequest":true,"CreatedAt":"2019-07-01T15:18:44","Actor":"hughbe","Number":"1250","RawContent":null,"Title":"Add more DesignHost/Surface tests, remove dead code and fix NRE bug","State":"open","Body":"Fixes #1257\r\nFixes #1258","Url":"https://github.com/dotnet/winforms/pull/1250","RelatedDescription":"Open PR \"Add more DesignHost/Surface tests, remove dead code and fix NRE bug\" (#1250)"},{"Id":"462588134","IsPullRequest":true,"CreatedAt":"2019-07-01T08:43:07","Actor":"RussKie","Number":"1249","RawContent":null,"Title":"Fix 988 Port EventHandlerService","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #988\r\n\r\n\r\n## Proposed changes\r\n\r\n- Port `EventHandlerService` from NET Fx\r\n- Cleanup the code to adhere to the current set of guidelines and language constructs \r\n- Add tests\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- unit tests\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1249","RelatedDescription":"Open PR \"Fix 988 Port EventHandlerService\" (#1249)"},{"Id":"462584075","IsPullRequest":true,"CreatedAt":"2019-07-01T08:34:02","Actor":"hughbe","Number":"1248","RawContent":null,"Title":"Fix coverlet code coverage","State":"open","Body":"We need this for the fix in https://github.com/tonerdo/coverlet/pull/375 to be taken in\r\nAlso add another test project exclusion","Url":"https://github.com/dotnet/winforms/pull/1248","RelatedDescription":"Open PR \"Fix coverlet code coverage\" (#1248)"},{"Id":"462189137","IsPullRequest":true,"CreatedAt":"2019-06-28T22:28:10","Actor":"zsd4yr","Number":"1245","RawContent":null,"Title":"move solution items to build, documentation, or rmv them","State":"closed","Body":"I like that the other repo has a build folder with build-common and build-related files;\r\n\r\nI also think there might be some use for a documentation folder; I did not really like having all of the solution-level stuff in their own folder because I don't think that meaningfully organizes them. I would prefer to divide stuff up in some way. This is just one way we could go","Url":"https://github.com/dotnet/winforms/pull/1245","RelatedDescription":"Closed or merged PR \"move solution items to build, documentation, or rmv them\" (#1245)"},{"Id":"462187720","IsPullRequest":true,"CreatedAt":"2019-06-28T22:08:54","Actor":"AdamYoblick","Number":"1244","RawContent":null,"Title":"change maui test to plural per PR feedback","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/1244","RelatedDescription":"Closed or merged PR \"change maui test to plural per PR feedback\" (#1244)"},{"Id":"461833848","IsPullRequest":true,"CreatedAt":"2019-06-28T21:49:09","Actor":"JeremyKuhne","Number":"1242","RawContent":null,"Title":"Remove CAS related suppressions","State":"closed","Body":"CA2122 was an FxCop violation related to code access security. Removing them as CAS isn't supported in .NET Core. (And all of the CAS attributes have been removed.)\r\n\r\nAlso remove a no-op debug track of the AppDomain for window handles. Multiple AppDomains aren't supported in .NET Core.","Url":"https://github.com/dotnet/winforms/pull/1242","RelatedDescription":"Closed or merged PR \"Remove CAS related suppressions\" (#1242)"},{"Id":"461780096","IsPullRequest":true,"CreatedAt":"2019-06-28T19:46:39","Actor":"vatsan-madhavan","Number":"1241","RawContent":null,"Title":"Add intellisense blob as part of native toolset restore and integrate xmls into package","State":"closed","Body":"@AdamYoblick Here is a basic outline that on-boards the intellisense blob to your build process. You can build on top of this and add relevant targets to integrate the right xmls into your transport package. \r\n\r\nFeel free to close the PR and cherry-pick the relevant commit directly, or use the change shown here however you want. ","Url":"https://github.com/dotnet/winforms/pull/1241","RelatedDescription":"Closed or merged PR \"Add intellisense blob as part of native toolset restore and integrate xmls into package\" (#1241)"},{"Id":"461615114","IsPullRequest":true,"CreatedAt":"2019-06-27T17:51:38","Actor":"AdamYoblick","Number":"1240","RawContent":null,"Title":"Porting maui combobox test to xUnit","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/1240","RelatedDescription":"Closed or merged PR \"Porting maui combobox test to xUnit\" (#1240)"},{"Id":"461561139","IsPullRequest":false,"CreatedAt":"2019-06-27T14:25:12","Actor":"smorrell","Number":"1239","RawContent":null,"Title":"LinkDictionary seems to really slow down ResXResourceReader","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:** A large resx with 40k entries compiles to resource file very slowly ~ 30 seconds\r\n\r\n**Expected behavior:** The same .resx file converted into a .txt file compiles very fast, under a second.  Of note,, the conversion is slow.  I would expect that both actions should take about the same time.  \r\n\r\nI think the problem is the fact that the code is using a ListDictionary which states in its code comments\r\n\r\n /// <devdoc>\r\n    ///  <para> \r\n    ///    This is a simple implementation of IDictionary using a singly linked list. This\r\n    ///    will be smaller and faster than a Hashtable if the number of elements is 10 or less.\r\n    ///    This should not be used if performance is important for large numbers of elements.\r\n    ///  </para>\r\n    /// </devdoc>\r\n\r\n**Minimal repro:**  \r\n1. Create a resx file with 40k entries and then run resgen.exe myfilename.resx \r\n==>slow\r\n\r\n2. Convert this file to a txt file using: resgen.exe myfilename.resx myfilename.txt \r\n==> slow\r\n\r\n3. Convert the txt file to resource dll using: resgen.exe myfilename.txt\r\n==>fast\r\n","Url":"https://github.com/dotnet/winforms/issues/1239","RelatedDescription":"Open issue \"LinkDictionary seems to really slow down ResXResourceReader\" (#1239)"},{"Id":"461271952","IsPullRequest":false,"CreatedAt":"2019-06-27T02:28:55","Actor":"VBAndCs","Number":"1238","RawContent":null,"Title":"Fix UserControl.DesignMode property","State":"open","Body":"\r\nIn Framework, there is an issue with UserControl.DesignMode property(more details [here]( https://stackoverflow.com/questions/34664/designmode-with-nested-controls) and I Quote:\r\n\r\n> if you nest controls then DesignMode only works for the first level. The second and lower levels DesignMode will always return FALSE. The standard hack has been to look at the name of the process that is running and if it is \"DevEnv.EXE\" then it must be studio thus DesignMode is really TRUE. The problem with that is looking for the ProcessName works its way around through the registry and other strange parts with the end result that the user might not have the required rights to see the process name. In addition this strange route is very slow. So we have had to pile additional hacks to use a singleton and if an error is thrown when asking for the process name then assume that DesignMode is FALSE. A nice clean way to determine DesignMode is in order. Acually getting Microsoft to fix it internally to the framework would be even better!\r\n\r\nI faced this problem just today, so, I hope you fix this in the CorFx version.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/1238","RelatedDescription":"Open issue \"Fix UserControl.DesignMode property\" (#1238)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-07-04T05:31:01.9871932Z","RunDurationInMilliseconds":1414}