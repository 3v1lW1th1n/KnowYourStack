{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":7,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. Security This release contains the following security changes. CVE-2017-8759 &#124; .NET Framework Remote Code Execution Vulnerability A remote code execution vulnerability exists... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null},{"Title":".NET Framework August 2017 Preview of Quality Rollup","PublishedOn":"2017-08-16T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The August 2017 Preview of Quality Rollup is now available. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Values added to System.Web.Cache expire immediately, with .NET Framework 4.7. [452228] Also reported at ASP.NET Forums #2123507 ASP.NET site running on Sitefinity broken, with .NET Framework 4.7. [457739] CLR CRWLock::StaticAcquireWriterLock() never returns if... <a aria-label=\"read more about .NET Framework August 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"The week in .NET – .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!","PublishedOn":"2017-08-15T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Previous posts: Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore MIST, F# in NYC .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, and Visual Studio 2017 Update 3 launched! This is a week to celebrate for the .NET community, as .NET Core 2.0, ASP.NET Core 2.0, and Entity Framework 2.0 shipped! We&#8217;re also... <a aria-label=\"read more about The week in .NET &#8211; .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/","RawContent":null},{"Title":"F# and .NET Core Roadmap Update","PublishedOn":"2017-08-14T00:00:00","CommentsCount":58,"FacebookCount":0,"Summary":"Now that .NET Core 2.0 has been released, we wanted to take some time to talk about F# and .NET Core. F# and .NET Core 1.0 F# has been supported on .NET Core and .NET Standard since their 1.0 releases. In the months leading up to the release of .NET Core 1.0, Enrico Sada from... <a aria-label=\"read more about F# and .NET Core Roadmap Update\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"},{"Id":"6404140964","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:08:17","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/83","RelatedDescription":"Opened issue \"Modify CSP policy to allow embedding of youtube videos\" (#83) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding the ReactiveUI video.\r\n\r\nhttps://developers.google.com/web/fundamentals/security/csp/\r\n\r\n```\r\nchild-src lists the URLs for workers and embedded frame contents. For example: child-src https://youtube.com would enable embedding videos from YouTube but not from other origins. Use this in place of the deprecated frame-src directive.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6601829046","Type":"IssuesEvent","CreatedAt":"2017-09-18T04:31:40","Actor":"wateret","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13393","RelatedDescription":"Closed issue \"[RyuJIT/arm32] Assert Failure `!foundDiff`\" (#13393) at dotnet/coreclr","RelatedBody":"This test case fail with Assert Failure `!foundDiff`\r\n\r\n- CoreMangLib.cti.system.math.MathSign5.MathSign5\r\n\r\n```\r\nat start of tree, map contains: { N133. OR -> (134.N133) }\r\n<RefPosition #111 @137 RefTypeUse <Ivl:38> BB04 regmask=[allInt] last>\r\n\r\n  N139.                    JTRUE\r\n  consume=0 produce=0\r\n\r\n\r\n\r\nCHECKING LAST USES for block 4, liveout={V01}\r\n==============================\r\nBB04: V09 is in LiveIn set, but not computed live.\r\n\r\nAssert failure(PID 4720 [0x00001270], Thread: 4720 [0x1270]): Assertion failed '!foundDiff' in 'MathSign5:PosTest3():bool:this' (IL size 91)\r\n\r\n    File: /opt/code/work/src/jit/lsra.cpp Line: 2728\r\n    Image: /opt/usr/home/owner/dotnet/ttc/corerun\r\n\r\ncrashed [1469578970] processname=corerun, pid=4720, tid=4720, signal=6[sys-assert]dladdr returnes error!\r\n[sys-assert]dladdr returnes error!\r\n[sys-assert]dladdr returnes error!\r\n```"},{"Id":"6601828202","Type":"IssuesEvent","CreatedAt":"2017-09-18T04:31:09","Actor":"wateret","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13422","RelatedDescription":"Closed issue \"[RyuJIT/armel]  Assertion failed '(op2 == idx) || (op2->gtEffectiveVal() == idx)'\" (#13422) at dotnet/coreclr","RelatedBody":"Failed Tests\r\n\r\n- JIT/SIMD/VectorConvert_r/VectorConvert_r.sh\r\n- JIT/SIMD/VectorConvert_ro/VectorConvert_ro.sh\r\n"},{"Id":"6601431201","Type":"IssuesEvent","CreatedAt":"2017-09-18T00:30:26","Actor":"sam-piper","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14033","RelatedDescription":"Opened issue \"Recursive resource lookup failure in Kestrel server app for .NET Core 2.0\" (#14033) at dotnet/coreclr","RelatedBody":"We've recently ported our ASP.NET Core 2.0 application runnning on .NET Framework 4.7 to use .NET Core 2.0, and we are seeing critical failures in our Kestrel logs now, like this:\r\n\r\nAssert Failure\r\nExpression: [Recursive resource lookup bug]\r\nApplication is shutting down...\r\nDescription: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: ArgumentNull_Generic\r\nStack Trace:\r\n  at System.SR.InternalGetResourceString(String key)\r\n  at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n  at System.ArgumentNullException..ctor(String paramName)\r\n  at System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(Assembly assembly)\r\n  at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)\r\n  at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\r\n  at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)\r\n  at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n  at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n  at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n  at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n  at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n  at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)\r\n  at System.SR.InternalGetResourceString(String key)\r\n  at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n  at System.ArgumentNullException..ctor(String paramName)\r\n  at System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(Assembly assembly)\r\n  at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)\r\n  at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\r\n  at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)\r\n   at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n   at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n   at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)\r\n   at System.SR.InternalGetResourceString(String key)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.Threading.Tasks.TaskCanceledException..ctor(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\nWe are using en-AU as our default culture.\r\n \r\nThis stack trace appears to identify a known issue that has been resolved but not released ([dotnet/coreclr/issues/12668](https://github.com/dotnet/coreclr/issues/12668). \r\n\r\nHowever, none of the following proposed workarounds in that issue and related issue ([#23608](https://github.com/dotnet/corefx/issues/23608)) worked for us:\r\n\r\n1: Adding `new ArgumentException();` into the main method of Program.cs before creating a WebHost.\r\n2. Changing the OS culture to United States, or setting CurrentUICulture to en-US.\r\n\r\nWill there be a service release to fix this issue? Any idea when that release will be available? Is there a pre-release build available that I could use to see if the issue is resolved in that build (even though not released yet?)\r\n\r\nThanks,\r\n\r\nSam"},{"Id":"6601409667","Type":"PullRequestEvent","CreatedAt":"2017-09-18T00:13:44","Actor":"parjong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14032","RelatedDescription":"Opened pull request \"Introduce FEATURE_CONSERVATIVE_VSD_CALL\" (#14032) at dotnet/coreclr","RelatedBody":"FEATURE_CONSERVATIVE_VSD_CALL enforces Legacy JIT to emit null-check before VSD call to fix #14031.\r\n\r\nThis commit does not change the default behavior. The changed behavior will be enabled only when CLR is built with FEATURE_CONSERVATIVE_VSD_CALL."},{"Id":"6601405941","Type":"IssuesEvent","CreatedAt":"2017-09-18T00:10:40","Actor":"parjong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14031","RelatedDescription":"Opened issue \"[ARM/Linux] Segmentation fault inside SIGSEGV signal handler\" (#14031) at dotnet/coreclr","RelatedBody":"We often see the following segmentation fault in ARM/Linux:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0xf76e0ee2 in VirtualCallStubManager::predictStubKind(unsigned int) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n(gdb) bt\r\n#0  0xf76e0ee2 in VirtualCallStubManager::predictStubKind(unsigned int) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#1  0xf76e902e in VirtualCallStubManager::getStubKind(unsigned int) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#2  0xf76e4b7f in VirtualCallStubManager::FindStubManager(unsigned int, VirtualCallStubManager::StubKind*) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#3  0xf77a03d0 in IsSafeToHandleHardwareException(_CONTEXT*, _EXCEPTION_RECORD*) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#4  0xf7a1be08 in SEHProcessException(PAL_SEHException*) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#5  0xf7a1d4c7 in common_signal_handler(int, siginfo_t*, void*, int, ...) () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#6  0xf7a1d30e in signal_handler_worker () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#7  0xf7a58497 in CallSignalHandlerWrapper12 () from /home2/parjong/projects/dotnet/dotnet-overlay/Linux.x86.Release.Release/libcoreclr.so\r\n#8  0x00000007 in ?? ()\r\n```\r\n\r\nI could reproduce a similar backtrace with the following code:\r\n - Program.cs\r\n```\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Runtime.Loader;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ReversePInvoke\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"libmiddle.so\")]\r\n        static extern int Invoke(int n);\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Invoke(0);\r\n        }\r\n    }\r\n}\r\n```\r\n - native.c\r\n```\r\n#include <stdio.h>\r\n\r\ntypedef void (*cb_t)(int);\r\n\r\nint Invoke(int n)\r\n{\r\n    printf(\"Invoke!\\n\");\r\n    cb_t fn = (cb_t)0x7;\r\n    fn(4);\r\n    return 0;\r\n}\r\n```\r\n\r\nThe core issue is from native code, but coredump debugging would be much easier if CLR's signal handler does not crash for this case."},{"Id":"6601198191","Type":"PullRequestEvent","CreatedAt":"2017-09-17T21:23:04","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14030","RelatedDescription":"Opened pull request \"Improve Dictionary<K,T> CQ for primitive BCL ValueTypes\" (#14030) at dotnet/coreclr","RelatedBody":"Incorporate @AndyAyersMS [Potential CQ improvements in Dictionary<K,T>](https://github.com/dotnet/coreclr/compare/master...AndyAyersMS:DictionaryHacks?expand=1)\r\n\r\nSpecialize KeyEquals and KeyHashCode to check for each of the BCL ValueType primitives, cast via object to the type and use them directly; then rely on the Jit to elide the boxing.\r\n\r\nTypes are `byte`, `sbyte`, `ushort`, `short`, `uint`, `int`, `ulong`, `long`, `IntPtr`, `UIntPtr`, `Guid`\r\n\r\nWill follow up with metrics\r\n"},{"Id":"6600967448","Type":"IssuesEvent","CreatedAt":"2017-09-17T18:41:22","Actor":"eiriktsarpalis","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/2715","RelatedDescription":"Closed issue \"Serializing exceptions in CoreCLR\" (#2715) at dotnet/coreclr","RelatedBody":"It has recently come to my attention that CoreCLR has eliminated `ISerializable`. While I believe that this is a move in the right direction, it seems to have also removed the only way possible to correctly serialize exceptions in .NET. Serialization of exceptions is tricky, because they are objects which encapsulate two types of data:\n1. Data defined at construction time, such as `Message`, `InnerException` or any other fields defined by the particular exception implementation.\n2. Data appended by the runtime, such as `StackTrace`. Importantly, this is data that cannot be modified by the user without resorting to reflection.\n\nA correct exception serialization should carry along both types of data. This is very important in distributed frameworks such as [akka.net](http://getakka.net/), [mbrace](http://mbrace.io) and I would imagine Orleans too. So my question here is, what will CoreCLR be offering as a replacement scheme for serializing exceptions?\n"},{"Id":"6600569362","Type":"PullRequestEvent","CreatedAt":"2017-09-17T13:58:16","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14029","RelatedDescription":"Opened pull request \"Remove useless TODO from genCompareInt\" (#14029) at dotnet/coreclr","RelatedBody":"gtSetEvalOrder already does this. And even if it doesn't it's not the job of genCompareInt to swap operands, that should happen in LowerCompare.\r\n\r\nAttempting to do this in LowerCompare resulted in 0 diffs.\r\n\r\nFixed #7270\r\n"},{"Id":"6600498988","Type":"IssuesEvent","CreatedAt":"2017-09-17T13:04:56","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14028","RelatedDescription":"Opened issue \"SIMD related assert in gtFoldExprCompare\" (#14028) at dotnet/coreclr","RelatedBody":"```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nstatic bool Test(Vector<int> x, Vector<int> y) => x[0] == y[0];\r\n```\r\nAssert\r\n```\r\nAssert failure(PID 1728 [0x000006c0], Thread: 10332 [0x285c]): Assertion failed '!\"unexpected binary ExOp operator\"' in 'Program:Test(struct,struct):bool' (IL size 19)\r\n\r\n    File: d:\\projects\\coreclr\\src\\jit\\gentree.cpp Line: 1317\r\n    Image: D:\\Projects\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6601227307","Type":"PullRequestEvent","CreatedAt":"2017-09-17T21:45:04","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7674","RelatedDescription":"Opened pull request \"Revert \"pin stage0 due to build failure\"\" (#7674) at dotnet/cli","RelatedBody":"This reverts commit 4fe4c4d28a5171946311ca3ebf65af95180eb11f.\r\n\r\nI checked the blobs, feed and badges. The fallout of one build definition for all Linux distros should end now\r\n"},{"Id":"6600493312","Type":"IssuesEvent","CreatedAt":"2017-09-17T13:00:36","Actor":"ernestobarros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7672","RelatedDescription":"Closed issue \"C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\NuGet.targets(102,5): error : 'W8' is not a valid version string.\" (#7672) at dotnet/cli","RelatedBody":"It's failing for all versions of dotnet sdk\r\nTried different dotnet sdk's\r\nTried: dotnet nuget locals -c all\r\n\r\n## Steps to reproduce\r\ndotnet new console -o SimpleApp\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on SimpleApp\\SimpleApp.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\NuGet.targets(102,5): error : 'W8' is not a valid version string. [C:\\Users\\$ernesto.barros\\SimpleApp\\SimpleApp.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\NuGet.targets(102,5): error : Parameter name: value [C:\\Users\\$ernesto.barros\\SimpleApp\\SimpleApp.csproj]\r\n\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.0-preview1-007209)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007209\r\n Commit SHA-1 hash:  d624a96a1f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-25616-02\r\n  Build    : 8aa34a95bad481e1b5e4c8286e5cb2d7cb6ed943\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6600476917","Type":"IssuesEvent","CreatedAt":"2017-09-17T12:47:18","Actor":"damageboy","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7673","RelatedDescription":"Opened issue \"Can't specify bitness when running dotnet test with nunit\" (#7673) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nRun dotnet test on a assembly with nunit:\r\n```\r\ndotnet test -- TargetPlatform=x64\r\n```\r\n\r\n## Expected  behavior\r\nBe able to specify bitness (x64 / x86)\r\n\r\n## Actual behavior\r\nAlways runs on x86 in Windows by default\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nC:\\projects\\junk.git\\tests\\Junk.Tests>dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n"},{"Id":"6598891558","Type":"IssuesEvent","CreatedAt":"2017-09-16T12:37:24","Actor":"ernestobarros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7672","RelatedDescription":"Opened issue \"C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\NuGet.targets(102,5): error : 'W8' is not a valid version string.\" (#7672) at dotnet/cli","RelatedBody":"It's failing for all versions of dotnet sdk\r\nTried different dotnet sdk's\r\nTried: dotnet nuget locals -c all\r\n\r\n## Steps to reproduce\r\ndotnet new console -o SimpleApp\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on SimpleApp\\SimpleApp.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\NuGet.targets(102,5): error : 'W8' is not a valid version string. [C:\\Users\\$ernesto.barros\\SimpleApp\\SimpleApp.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007209\\NuGet.targets(102,5): error : Parameter name: value [C:\\Users\\$ernesto.barros\\SimpleApp\\SimpleApp.csproj]\r\n\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6598691253","Type":"IssuesEvent","CreatedAt":"2017-09-16T09:21:51","Actor":"AhmedHussainy","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7671","RelatedDescription":"Opened issue \"Unable to create a dotnet project in Kali linux 2017.1\" (#7671) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet new console  -o example --lang c#\r\n\r\n## Expected  behavior\r\nmaking a console application in the current directory.\r\n\r\n## Actual behavior\r\n## first time it showed me this ...\r\nGetting ready...\r\nSegmentation fault\r\n\r\n## second time it showed me this...\r\n\r\nGetting ready...\r\nError: Could not install \"/usr/share/dotnet/sdk/2.0.0/Templates/microsoft.dotnet.web.projecttemplates.2.0.1.0.0-beta2-20170803-303.nupkg\".\r\nError: Error reading JObject from JsonReader. Path '', line 0, position 0.\r\nError: Could not install \"/usr/share/dotnet/sdk/2.0.0/Templates/microsoft.dotnet.web.itemtemplates.1.0.0-beta2-20170803-303.nupkg\".\r\nError: Error reading JObject from JsonReader. Path '', line 0, position 0.\r\nError: Could not install \"/usr/share/dotnet/sdk/2.0.0/Templates/microsoft.dotnet.common.projecttemplates.2.0.1.0.0-beta2-20170803-303.nupkg\".\r\nError: Error reading JObject from JsonReader. Path '', line 0, position 0.\r\nError: Could not install \"/usr/share/dotnet/sdk/2.0.0/Templates/microsoft.dotnet.web.spa.projecttemplates.1.0.417.nupkg\".\r\nError: Error reading JObject from JsonReader. Path '', line 0, position 0.\r\nError: Could not install \"/usr/share/dotnet/sdk/2.0.0/Templates/microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta2-20170803-303.nupkg\".\r\nError: Error reading JObject from JsonReader. Path '', line 0, position 0.\r\nError: Could not install \"/usr/share/dotnet/sdk/2.0.0/Templates/microsoft.dotnet.common.itemtemplates.1.0.0-beta2-20170803-303.nupkg\".\r\nError: Error reading JObject from JsonReader. Path '', line 0, position 0.\r\nObject reference not set to an instance of an object.\r\n   at Microsoft.TemplateEngine.Edge.Settings.SettingsLoader.Save(TemplateCache cacheToSave)\r\n   at Microsoft.TemplateEngine.Edge.Settings.SettingsLoader.Save()\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests)\r\n   at Microsoft.DotNet.Tools.New.NewCommandShim.FirstRun(IEngineEnvironmentSettings environmentSettings, IInstaller installer)\r\n   at Microsoft.TemplateEngine.Cli.New3Command.ConfigureEnvironment()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.Initialize()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.<ExecuteAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at Microsoft.TemplateEngine.Cli.CommandParsing.NewCommandInputCli.<>c__DisplayClass19_0.<<OnExecute>b__0>d.MoveNext()\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     kali\r\n OS Version:  2017.1\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6598196054","Type":"IssuesEvent","CreatedAt":"2017-09-16T01:25:51","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7670","RelatedDescription":"Opened issue \"Provide a way to have a single reference which brings in both libraries and tools\" (#7670) at dotnet/cli","RelatedBody":"Right now, `PackageReference` items are generally for NuGet packages that have libraries, and `DotNetCliToolReference` items are used for CLI tools which can be invoked with `dotnet <toolname>`.\r\n\r\nFor some scenarios, there are both libraries to be referenced as well as tools that should be added to the project (for example, Entity Framework provides libraries, but could also provide tools for EF migrations or other scenarios).  In those cases, it would make sense to allow the tools and the libraries to be referenced with a single item.  Right now, you need a `PackageReference` as well as a `DotNetCliToolReference`, and while in an IDE like Visual Studio there's UI for adding a `PackageReference`, you have to edit the project file to manually add the `DotNetCliToolReference`."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6598912195","Type":"IssuesEvent","CreatedAt":"2017-09-16T12:56:18","Actor":"ddobric","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/496","RelatedDescription":"Opened issue \"APIs of Net\" (#496) at dotnet/standard","RelatedBody":"What is the roadmap of https://apisof.net ?\r\n\r\nIt is a very helpful application. However it should be improved.\r\nRight now, even certificate has expired. : DLG_FLAGS_SEC_CERT_DATE_INVALID\r\n\r\nThanks\r\n\r\n\r\n\r\n\r\n"},{"Id":"6592952439","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:00:23","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Closed issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app, but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nPlease know we also tried different combinations of including the System.Runtime package, without result.  \r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6592432642","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:36","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Closed issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nNote: This is the most expensive condition in the entire build and give it only runs for .NET Standard projects it's overhead will be higher for a solution containing only .NET Standard projects.\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"},{"Id":"6591650102","Type":"IssuesEvent","CreatedAt":"2017-09-14T16:47:02","Actor":"prakashnandshukla","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/495","RelatedDescription":"Opened issue \" Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:  Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \" (#495) at dotnet/standard","RelatedBody":"Hi \r\n\r\nI am working on MS Dynamics CRM integration project with box.com, I have added Box.V2 .dll file as a reference assemble and I am using properties these assembly to generate token using JWT authentication.\r\nWhen I am creating any record I am getting this exception/error.\r\n Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:\r\n Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \r\n\r\nThanks\r\n[Box SDK exception.txt](https://github.com/dotnet/standard/files/1303750/Box.SDK.exception.txt)\r\n"},{"Id":"6589113085","Type":"IssuesEvent","CreatedAt":"2017-09-14T07:36:24","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Opened issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"},{"Id":"6588098595","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:45:49","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Opened issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app), but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6587834164","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:58:12","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Merged pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6601923546","Type":"IssuesEvent","CreatedAt":"2017-09-18T05:27:43","Actor":"koenigst","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24112","RelatedDescription":"Opened issue \"Documentation Error in System.Collections.Immutable.ImmutableInterlocked\" (#24112) at dotnet/corefx","RelatedBody":"The summary of `TryPop` in [ImmutableInterlocked](https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableInterlocked.cs) is a copy of `Push` which is obviously wrong.\r\n\r\nAs this is a very small change and I'm new to corefx I would correct this quickly."},{"Id":"6601703057","Type":"PullRequestEvent","CreatedAt":"2017-09-18T03:19:30","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24107","RelatedDescription":"Merged pull request \"Wrap cert callback leaked exceptions in WinHttpHandler\" (#24107) at dotnet/corefx","RelatedBody":" Wrap cert callback leaked exceptions in WinHttpHandler\r\n    \r\nSimilar to the fix done for CurlHandler (#21938), fix WinHttpHandler so\r\nthat leaked exceptions from the user-provided certificate callback are\r\nproperly wrapped.\r\n    \r\nThe ManagedHandler still needs to be fixed since it is not wrapping\r\nproperly.\r\n    \r\nContributes to #21904"},{"Id":"6601606422","Type":"PullRequestEvent","CreatedAt":"2017-09-18T02:24:59","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24111","RelatedDescription":"Opened pull request \"Wrap exceptions from ManagedHandler's server validation callback\" (#24111) at dotnet/corefx","RelatedBody":"To match other handlers' behaviors.\r\n\r\nContributes to #21904 \r\ncc: @davidsh, @geoffkizer \r\n\r\n(If this goes in before https://github.com/dotnet/corefx/pull/24107, https://github.com/dotnet/corefx/pull/24107/files#diff-ef1e42079489db8304cd3b3aac08d8c4R211 should be removed.  If that PR goes in first, I'll remove it in this one.)"},{"Id":"6601594371","Type":"IssuesEvent","CreatedAt":"2017-09-18T02:18:01","Actor":"maxzav","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24110","RelatedDescription":"Opened issue \"LINQ OrderBy performance drops by bazillion times in some cases\" (#24110) at dotnet/corefx","RelatedBody":"### **Input data:**\r\n`List<int> list = new List<int>();`\r\n\r\n### **Prepare data:**\r\n**random:**\r\n`var rnd = new Random();\r\nfor (var i = 0; i < n; i++)\r\n    list.Add(rnd.Next());`\r\n**desc:**\r\n`for (var i = 0; i < n; i++)\r\n                list.Add(n - i);`\r\n**asc:**\r\n` for (var i = 0; i < n; i++)\r\n                list.Add(n - i);`\r\n**desc+asc:**\r\n`for (var i = 0; i < n / 2; i++)\r\n                list.Add(n - i);\r\n            for (var i = n / 2; i < n; i++)\r\n                list.Add(i);`\r\n**asc+desc:**\r\n`for (var i = 0; i < n / 2; i++)\r\n                list.Add(i);\r\n            for (var i = n / 2; i < n; i++)\r\n                list.Add(n - i);`\r\n\r\n### **Sorting functions:**\r\n**List:**\r\n`List<int> SortByList() {\r\n    var result = list.ToList();\r\n                result.Sort();\r\n                return result;\r\n            };`\r\n**LINQ:**\r\n`List<int> SortByLINQ() => list.OrderBy(x => x).ToList();`\r\n**LINQOptimizer (https://github.com/nessos/LinqOptimizer):**\r\n`List<int> SortByLINQOptimizer() => list.AsQueryExpr().OrderBy(x => x).Run().ToList();`\r\n\r\n### **Results:**\r\n**10,000 items**\r\n```\r\n                LINQOptimizer           LINQ            List\r\nrandom          00:00:00.0016349    00:00:00.0031569    00:00:00.0007014\r\nasc             00:00:00.0012643    00:00:00.0014618    00:00:00.0001882\r\ndesc            00:00:00.0013321    00:00:00.0014991    00:00:00.0002963\r\ndesc+asc        00:00:00.0018149    00:00:00.0118873    00:00:00.0007774\r\nasc+desc        00:00:00.0020868    00:00:00.2250114    00:00:00.0008123\r\n```\r\n\r\n**100,000 items**\r\n```\r\n                LINQOptimizer           LINQ            List\r\nrandom          00:00:00.0149506    00:00:00.0341792    00:00:00.0087713\r\nasc             00:00:00.0084689    00:00:00.0184448    00:00:00.0019559\r\ndesc            00:00:00.0130457    00:00:00.0190296    00:00:00.0037221\r\ndesc+asc        00:00:00.0177337    00:00:00.4118966    00:00:00.0115277\r\nasc+desc        00:00:00.0178328    00:00:19.7172326    00:00:00.0109617\r\n```\r\n**1,000,000 items**\r\n```\r\n                LINQOptimizer           LINQ            List\r\nrandom          00:00:00.1587396    00:00:00.1570763    00:00:00.1013578\r\nasc             00:00:00.0809392    00:00:00.0828751    00:00:00.0228805\r\ndesc            00:00:00.1027216    00:00:00.1947723    00:00:00.0423382\r\ndesc+asc        00:00:00.1941634    00:02:09.9069785    00:00:00.1331413\r\nasc+desc        00:00:00.1919311    ----------------    00:00:00.1365317\r\n```\r\n\r\nWaiting about **30 MINUTES** on 1,000,000 items test with asc+desc data but LINQ is still sorting... (1 core 100% used)\r\n\r\nP.S.: Tests for LINQ and List - .Net Core 2.0, LINQOptimizer - .Net Framework 4.7. Windows 7 x64"},{"Id":"6601205447","Type":"PullRequestEvent","CreatedAt":"2017-09-17T21:28:18","Actor":"hughbe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24109","RelatedDescription":"Opened pull request \"Fix multiplying TextureBrush with a disposed matrix on Unix\" (#24109) at dotnet/corefx","RelatedBody":"Also fixed in Libgdiplus here: https://github.com/mono/libgdiplus/pull/80"},{"Id":"6601204278","Type":"IssuesEvent","CreatedAt":"2017-09-17T21:27:28","Actor":"mfeingol","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24108","RelatedDescription":"Opened issue \"Installing System.ValueTuple 4.4.0 from Nuinto UWP project causes warning\" (#24108) at dotnet/corefx","RelatedBody":"\r\n\r\nRepro steps:\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6601882642","Type":"PullRequestEvent","CreatedAt":"2017-09-18T05:03:37","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22162","RelatedDescription":"Opened pull request \"Making default type of stackalloc expression to be Span<T> when not directly in an initializer\" (#22162) at dotnet/roslyn","RelatedBody":"Making default type of stackalloc expression to be Span<T> when not directly in an initializer\r\n\r\nThis makes it unnecessary to cast in many situations where the type could be inferred to be Span<T>."},{"Id":"6600613533","Type":"PullRequestEvent","CreatedAt":"2017-09-17T14:30:11","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22018","RelatedDescription":"Merged pull request \"Make certain untested/not yet design approved IOperation APIs internal\" (#22018) at dotnet/roslyn","RelatedBody":"In preparation for a merge of features/ioperation to dev15.5, we have decided to internalize all the IOperation APIs which are either not tested or not reviewed by the design team.\r\n\r\nThis includes the following APIs with bugs tracking reviewing/adding tests for them and making them public again: IArrayElementReferenceExpression(#22006), IAwaitExpression(#22007), ICatchClause(#22008), IEndStatement(#22004), IPlaceholderExpression(#21294), ISizeOfExpression(#21296), IStopStatement(#21297), ITryStatement(#22008), ITypeOfExpression(#22003), IWithStatement(#22005), IOperation.HasErrors (#22124)\r\n\r\nThis change also includes a simple API rename: IMethodBindingExpression renamed to IMethodReferenceExpression(#21289).\r\n"},{"Id":"6600427350","Type":"IssuesEvent","CreatedAt":"2017-09-17T12:05:48","Actor":"ronelm2000","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22161","RelatedDescription":"Opened issue \"C# Compiler does not accept ?? operator of operands GenericParameterType and throw expression\" (#22161) at dotnet/roslyn","RelatedBody":"**Version Used**:  Visual Studio 2017 Community with .NET Core 2.0 SDK\r\n**Steps to Reproduce**: \r\n1. Create a project; Ensure .NET Core 2.0 is installed, and the project is built on .NET Framework 4.7.\r\n2. Type this code in any Class File.\r\n```cs\r\n    class Button<TIScreen> : IGUIEntity<TIScreen> where TIScreen : IScreen \r\n    // you can replace these with skeleton interfaces. \r\n    // The important part is it's a generic class. \r\n    // If it's important, IScreen is also an interface.\r\n    {\r\n        int[] SpriteBatch = null;\r\n        TIScreen Parent { get; private set; }\r\n        public Button (int[] batch, TIScreen screen)\r\n        {\r\n            SpriteBatch = batch ?? throw new NullReferenceException();\r\n            Parent = screen ?? throw new Exception();\r\n        }\r\n}\r\n```\r\n\r\n**Expected Behavior**: This will work. The first statement worked since I'm utilizing C# 7 and .NET Standard 2.0 / .NET Framework 4.7\r\n**Actual Behavior**: The second statement throws an error, that operator ?? cannot be applied to operands of type TIScreen and throw expression.\r\n![screenshot 2017-09-17 19 12 08](https://user-images.githubusercontent.com/12634987/30520600-7a7210d6-9be3-11e7-9df2-42e7dc005be6.png)\r\n**Workaround**: Use ? and : operators instead. eg.\r\n```cs\r\nParent = (screen != null) ? screen : throw new NullReferenceException(ExceptionMessages.ParentIsNull);\r\n```"},{"Id":"6599851183","Type":"IssuesEvent","CreatedAt":"2017-09-17T02:23:52","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21952","RelatedDescription":"Closed issue \"Improve stackalloc IL emit \" (#21952) at dotnet/roslyn","RelatedBody":"It seems very brute-force\r\n\r\nWe can do much better:\r\n- stackalloc T[0]     -  should just become \"default(target type)\"\r\n- stackalloc byte[x]   -  no need to emit \" checked(x * 1) \" \r\n- stackalloc int[128]  - we could constant-fold \"128 * 4\"\r\n- unused stackalloc should be treated as not sideeffecting. The only possible sideeffect is stackoverflow - that is hardly deterministic or useful as a dependency.\r\n"},{"Id":"6599782698","Type":"PullRequestEvent","CreatedAt":"2017-09-17T01:08:54","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22157","RelatedDescription":"Merged pull request \"Optimizes emit for trivial/common cases of stackalloc\" (#22157) at dotnet/roslyn","RelatedBody":"Optimizes emit for trivial/common cases of stackalloc\r\n\r\nFixes:#21952\r\n\r\nCurrent codegen for stackalloc seems very brute-force\r\n\r\nWe can do much better:\r\n- stackalloc T[0]     -  should just become \"default(target type)\"\r\n- stackalloc byte[x]   -  no need to emit \" checked(x * 1) \" \r\n- stackalloc int[128]  - we could constant-fold \"128 * 4\"\r\n- unused stackalloc should be treated as not sideeffecting. The only possible sideeffect is a fatal stackoverflow - that is hardly deterministic or useful as a dependency.\r\n"},{"Id":"6599212710","Type":"IssuesEvent","CreatedAt":"2017-09-16T16:49:08","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22160","RelatedDescription":"Opened issue \"Compiler invariant: the members of a type should be contained by that type\" (#22160) at dotnet/roslyn","RelatedBody":"I'd like to start documenting invariants and, if possible, implement them as assertions.\r\n\r\nIn this case, I'd propose adding to the `GetMembers` method that for each of the returned members, we can check the `ContainingType` matches `this`.\r\n\r\nFYI @cston @gafter since this relates to a recent thread."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"908763937100898304","CreatedAt":"2017-09-15T18:46:21+00:00","UserScreenname":"dotnet","Text":"Sneak peak at .NET Conf 2017 with @BethMassi and @runfaster2000 https://t.co/4TjjHQrUja","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":21,"RawContent":null},{"Id":"908559275990982656","CreatedAt":"2017-09-15T05:13:06+00:00","UserScreenname":"dotnet","Text":"Announcing SignalR for https://t.co/iOiV9qNspl Core 2.0 https://t.co/quJIZyhUdB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":338,"FavoriteCount":264,"RawContent":null},{"Id":"908126010171834368","CreatedAt":"2017-09-14T00:31:27+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 https://t.co/iOiV9qNspl and Configuration features https://t.co/6LCtKp9gfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":119,"FavoriteCount":72,"RawContent":null},{"Id":"907775139210715137","CreatedAt":"2017-09-13T01:17:13+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Security and Quality Rollup https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":26,"RawContent":null},{"Id":"906146140000841728","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"dotnet","Text":"Getting Started with Windows Containers https://t.co/UnRPIRZySp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":184,"FavoriteCount":108,"RawContent":null},{"Id":"903669794150506500","CreatedAt":"2017-09-01T17:24:02+00:00","UserScreenname":"dotnet","Text":"#dotNETConf - streaming live directly to your favorite device. Don't miss out.\n\nIs it on your calendar yet?… https://t.co/SK3CUqUkrs","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":123,"FavoriteCount":100,"RawContent":null},{"Id":"902942589053108224","CreatedAt":"2017-08-30T17:14:23+00:00","UserScreenname":"dotnet","Text":"Introducing .NET IL Linker https://t.co/ji9Uhlalw2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":301,"FavoriteCount":204,"RawContent":null},{"Id":"902581598876459009","CreatedAt":"2017-08-29T17:19:56+00:00","UserScreenname":"dotnet","Text":"The Week in .NET: Let's Encrypt WebApp Renewer, CodeCamp Seattle 2017, and links!\nhttps://t.co/Mssa964piA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":42,"RawContent":null}]}},"RunOn":"2017-09-18T05:43:36.9551245Z","RunDurationInMilliseconds":5262}