{"Data":{"GitHub":{"Issues":[{"Id":"430076989","IsPullRequest":false,"CreatedAt":"2019-04-06T21:08:37","Actor":"justinormont","Number":"3228","RawContent":null,"Title":"Overflow in MultiClassNaiveBayes","State":"open","Body":"We're storing the count of rows in an `int`. This causes an overflow for large datasets. In my case, Criteo 1TB w/ 4.4B rows. Recommend changing to a `long`.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d2bf3e72fa935b12644b0a695ad0d044a8077a83/src/Microsoft.ML.StandardTrainers/Standard/MulticlassClassification/MulticlassNaiveBayesTrainer.cs#L242\r\n\r\nError:\r\n```\r\nUnexpected exception: Arithmetic operation resulted in an overflow., 'System.OverflowException'\r\n   at System.Linq.Enumerable.Sum(IEnumerable`1 source)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3228","RelatedDescription":"Open issue \"Overflow in MultiClassNaiveBayes\" (#3228)"},{"Id":"429873479","IsPullRequest":false,"CreatedAt":"2019-04-06T05:08:33","Actor":"sfilipi","Number":"3219","RawContent":null,"Title":"Remove files with GPL v2 license from the repo","State":"closed","Body":"The following files with GPLv2 license need to be removed from the repo:\r\n\r\n- test/data/gplv2/infert.csv\r\n- test/data/gplv2/COPYING.txt\r\n- test/data/gplv2/airquality.csv\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3219","RelatedDescription":"Closed issue \"Remove files with GPL v2 license from the repo\" (#3219)"},{"Id":"429883843","IsPullRequest":true,"CreatedAt":"2019-04-05T23:18:22","Actor":"zeahmed","Number":"3222","RawContent":null,"Title":"Refactoring related to namespaces and public input/output classes.","State":"closed","Body":"This PR is related to #3205.\r\n\r\nIt also makes all the inner input/output classes to private.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3222","RelatedDescription":"Closed or merged PR \"Refactoring related to namespaces and public input/output classes.\" (#3222)"},{"Id":"429963521","IsPullRequest":true,"CreatedAt":"2019-04-05T22:58:32","Actor":"wschin","Number":"3227","RawContent":null,"Title":"Polish marshalling of MF model and MF problem and enable 32-bit tests","State":"open","Body":"Fix #1441. Also related to some suggestion made in #3210. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3227","RelatedDescription":"Open PR \"Polish marshalling of MF model and MF problem and enable 32-bit tests\" (#3227)"},{"Id":"429958911","IsPullRequest":false,"CreatedAt":"2019-04-05T22:35:26","Actor":"ganik","Number":"3226","RawContent":null,"Title":"NaiveBayes doesnt produce meaningful result on simple dataset","State":"open","Body":"Use the same dataset as in  PR #3159 for NB but get garbage results no matter how good is separation among classes","Url":"https://github.com/dotnet/machinelearning/issues/3226","RelatedDescription":"Open issue \"NaiveBayes doesnt produce meaningful result on simple dataset\" (#3226)"},{"Id":"429958745","IsPullRequest":true,"CreatedAt":"2019-04-05T22:34:39","Actor":"rogancarr","Number":"3225","RawContent":null,"Title":"Renaming OptimizationTolerance to fix a spelling error. (#3199)","State":"open","Body":"* Renaming OptimizationTolerance in LBFGS to fix a spelling bug.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3225","RelatedDescription":"Open PR \"Renaming OptimizationTolerance to fix a spelling error. (#3199)\" (#3225)"},{"Id":"429036395","IsPullRequest":true,"CreatedAt":"2019-04-05T22:11:13","Actor":"rogancarr","Number":"3199","RawContent":null,"Title":"Renaming OptimizationTolerance to fix a spelling error.","State":"closed","Body":"In the `LbfgsTrainerBase`, the `OptmizationTolerance` option was misspelled.\r\n\r\nFixes #3198","Url":"https://github.com/dotnet/machinelearning/pull/3199","RelatedDescription":"Closed or merged PR \"Renaming OptimizationTolerance to fix a spelling error.\" (#3199)"},{"Id":"429926823","IsPullRequest":true,"CreatedAt":"2019-04-05T22:06:03","Actor":"sfilipi","Number":"3223","RawContent":null,"Title":"remove unused files.","State":"closed","Body":"Fixes #502 by removing the unused files with gplv2 license. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/3223","RelatedDescription":"Closed or merged PR \"remove unused files.\" (#3223)"},{"Id":"429566389","IsPullRequest":true,"CreatedAt":"2019-04-05T22:05:51","Actor":"wschin","Number":"3210","RawContent":null,"Title":"Fix marshalling of bool flags in MF","State":"closed","Body":"Fix #3003. The marshalled Boolean size from C# to C should be 1 byte, not 4. Also, the change from LIBMF is for supporting quiet option in new implicit-feedback MF.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3210","RelatedDescription":"Closed or merged PR \"Fix marshalling of bool flags in MF\" (#3210)"},{"Id":"429944690","IsPullRequest":false,"CreatedAt":"2019-04-05T21:38:34","Actor":"eerhardt","Number":"3224","RawContent":null,"Title":"Ensure we have the proper attribution for MurmurHash3 algorithm","State":"open","Body":"We should ensure we have the correct attribution for\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.DataView/DataViewRowId.cs#L72-L76\r\n\r\nand\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/Hashing.cs#L109-L115\r\n\r\nWe should ensure this is in our third-party notice and any other attributions that are necessary.\r\n\r\n@richlander @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/3224","RelatedDescription":"Open issue \"Ensure we have the proper attribution for MurmurHash3 algorithm\" (#3224)"},{"Id":"429641271","IsPullRequest":true,"CreatedAt":"2019-04-05T21:27:33","Actor":"codemzs","Number":"3212","RawContent":null,"Title":"Rename sample methods to Example","State":"closed","Body":"Make our samples follow the convention that method name should be called \"Example\", this PR fixes samples that have any other method name.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3212","RelatedDescription":"Closed or merged PR \"Rename sample methods to Example\" (#3212)"},{"Id":"429842676","IsPullRequest":true,"CreatedAt":"2019-04-05T20:39:11","Actor":"Ivanidzo4ka","Number":"3217","RawContent":null,"Title":"Add loadable attribute for LinearMulticlassModelParameters","State":"closed","Body":"fixes #3209.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3217","RelatedDescription":"Closed or merged PR \"Add loadable attribute for LinearMulticlassModelParameters\" (#3217)"},{"Id":"429540526","IsPullRequest":false,"CreatedAt":"2019-04-05T20:39:11","Actor":"prathyusha12345","Number":"3209","RawContent":null,"Title":"[1.0.0-preview] Bug? - Getting an exception while loading .ZIP model MultiClass-Classification trained with SdcaNonCalibrated","State":"closed","Body":"I am trying to migrate IRIS Classification sample in the repo [here](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MulticlassClassification_Iris) to **v1.0.0-preview**.\r\n\r\nWhile loading the model for prediction I am getting the below error at the statement \r\n\r\n                trainedModel = mlContext.Model.Load(stream, out var modelInputSchema);\r\n\r\n\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Error during class instantiation\r\n  Source=Microsoft.ML.Core\r\n  StackTrace:\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModelCore[TRes,TSig](IHostEnvironment env, TRes& result, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelOperationsCatalog.Load(Stream stream, DataViewSchema& inputSchema)\r\n   at MulticlassClassification_Iris.Program.TestSomePredictions(MLContext mlContext) in C:\\GitRepos\\machinelearning-samples-v1.0.0-Preview\\samples\\csharp\\getting-started\\MulticlassClassification_Iris\\IrisClassification\\IrisClassificationConsoleApp\\Program.cs:line 99\r\n   at MulticlassClassification_Iris.Program.Main(String[] args) in C:\\GitRepos\\machinelearning-samples-v1.0.0-Preview\\samples\\csharp\\getting-started\\MulticlassClassification_Iris\\IrisClassification\\IrisClassificationConsoleApp\\Program.cs:line 36\r\n\r\nInner Exception 1:\r\nTargetInvocationException: Exception has been thrown by the target of an invocation.\r\n\r\nInner Exception 2:\r\nInvalidOperationException: Error during class instantiation\r\n\r\nInner Exception 3:\r\nTargetInvocationException: Exception has been thrown by the target of an invocation.\r\n\r\nInner Exception 4:\r\nInvalidOperationException: Error during class instantiation\r\n\r\nInner Exception 5:\r\nTargetInvocationException: Exception has been thrown by the target of an invocation.\r\n\r\nInner Exception 6:\r\nFormatException: Couldn't load model: 'TransformerChain\\Transform_002\\Transform_000\\Model'\r\n\r\n```\r\nthe dataset format is like this \r\n\r\n```\r\n#Label\tSepal length\tSepal width\tPetal length\tPetal width\r\n0\t5.4\t3.7\t1.5\t0.2\r\n0\t4.8\t3.4\t1.6\t0.2\r\n0\t4.8\t3.0\t1.4\t0.1\r\n0\t4.3\t3.0\t1.1\t0.1\r\n```\r\n\r\n\r\nI have pushed the code to the Github repo  here https://github.com/dotnet/machinelearning-samples/tree/migration/1.1.0-preview/samples/csharp/getting-started/MulticlassClassification_Iris\r\n\r\nI did not understand the reason for the error. Could anyone help","Url":"https://github.com/dotnet/machinelearning/issues/3209","RelatedDescription":"Closed issue \"[1.0.0-preview] Bug? - Getting an exception while loading .ZIP model MultiClass-Classification trained with SdcaNonCalibrated\" (#3209)"},{"Id":"429875926","IsPullRequest":true,"CreatedAt":"2019-04-05T18:10:41","Actor":"abgoswam","Number":"3221","RawContent":null,"Title":"Cherry pick for samples {Image, Categorical, FeatureSelection}","State":"open","Body":"This PR cherry picks the following commits from the master branch\r\n\r\n#3165 \r\n#3179 \r\n#3184 \r\n#3208 \r\n\r\n@shauheen @glebuk \r\n","Url":"https://github.com/dotnet/machinelearning/pull/3221","RelatedDescription":"Open PR \"Cherry pick for samples {Image, Categorical, FeatureSelection}\" (#3221)"},{"Id":"429874704","IsPullRequest":true,"CreatedAt":"2019-04-05T18:07:00","Actor":"Ivanidzo4ka","Number":"3220","RawContent":null,"Title":"Add loadable attribute for LinearMulticlassModelParameters","State":"open","Body":"Fixes #3209 \r\nPR towards master https://github.com/dotnet/machinelearning/pull/3217","Url":"https://github.com/dotnet/machinelearning/pull/3220","RelatedDescription":"Open PR \"Add loadable attribute for LinearMulticlassModelParameters\" (#3220)"},{"Id":"429872637","IsPullRequest":false,"CreatedAt":"2019-04-05T18:01:18","Actor":"shmoradims","Number":"3218","RawContent":null,"Title":"API reference - Finalize docs template for trainer API & estimators","State":"open","Body":"Currently API reference documentation for each trainer is split into two pages: 1) the creation method, and 2) the trainer estimator class. We also have a 3rd page for trainer options. In this issue, I want to reach a consensus about the content that goes in each page. The current proposal is as follows:\r\n\r\n# Page-1 - Creation extension methods\r\nThese methods act as the constructor for the trainer estimator class. There are two overloads per trainer and they're listed as extension methods in a MLContext trainer catalog. E.g. [BinaryClassificationCatalog.BinaryClassificationTrainers](https://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.binaryclassificationcatalog.binaryclassificationtrainers?view=ml-dotnet&branch=smoke-test-preview). \r\n\r\nBoth overloads also show up in the same page for the extension class; we call this page-1 (e.g. [LightGbm](https://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.lightgbmextensions.lightgbm?view=ml-dotnet&branch=smoke-test-preview#Microsoft_ML_LightGbmExtensions_LightGbm_Microsoft_ML_BinaryClassificationCatalog_BinaryClassificationTrainers_System_String_System_String_System_String_System_Nullable_System_Int32__System_Nullable_System_Int32__System_Nullable_System_Double__System_Int32_); please note that this page includes all LightGbm overloads including multiclass, ranking, etc and not just binary classification versions).\r\n\r\n### Summary\r\n1-liner summary of what the trainer does, then \"cref=the estimator class, i.e. page-2\"\r\nTraining algorithm details are not here, and are included in page-2, so that other overloads of this  APIs share the same content.\r\n\r\n### Remarks\r\n[Gleb: add optional description for current overload]\r\n\r\n### Parameters\r\nParameters are defined\r\n\r\n### Example\r\nOne example is provided for this API (one per overload)\r\n\r\n# Page-2 - Trainer Estimator Class\r\nThis is the page for trainer estimator class. E.g. [LightGbmBinaryTrainer](https://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmbinarytrainer?view=ml-dotnet&branch=smoke-test-preview) \r\n\r\n### Summary\r\n1-liner summary of what the trainer does with \"cref=IEstimator(TTransformer)\". [Gleb: add info on when it is good to use it. - answer the WHY question.] [Gleb: Add link to options in summary]\r\nTraining algorithm details are not in the summary.\r\n\r\n### Remarks\r\nNote about creation: \"For creating this trainer please see \"cref to both overload methods from page-1\"\r\n\r\nEasy properties:\r\n* Machine learning task: (redundant?)\r\n* Expected label type: bool, etc\r\n* Output columns: \"Score\", \"PredictedLabel\", etc with description of what each does\r\n* Is normalization required? Yes/No\r\n* Is caching required? Yes/No\r\n* Is convertible to Onnx format? Yes/No\r\n* Additional NuGet: \"Link to NuGet\" OR None of all that are included already in Microsoft.ML\r\n\r\nComplex properties:\r\n* Trainer Category (requires some taxonomy to be created)\r\n* When to use this trainer? [what goes here?]\r\n* Supported number of features?\r\n* Supported number of examples?\r\n\r\nTraining algorithm details with all the reference links.\r\n\r\n### Example\r\nRepeat example from overload-1 of page-1\r\nRepeat example from overload-2 of page-1\r\n\r\n### See also\r\n\"cref to both overload methods from page-1\"\r\n[Gleb: link to the catalog with those learners?]\r\n[Gleb: links to other similar learners?]\r\n[Gleb: links to options?]\r\n\r\n\r\n# Page-3 - Trainer Options Class\r\nThis is the page for trainer options class that's used in one of the overloads in page-1. E.g. [AveragedPerceptronTrainer.Options](https://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.averagedperceptrontrainer.options?view=ml-dotnet&branch=smoke-test-preview)\r\n\r\nPage-1 already links to this page from the type of the option parameter.\r\n\r\n### Summary\r\nOptions for \"cref=page-2\" as used in method \"cref=page-1/overload-with-option\".\r\n\r\n### Remarks\r\nNone\r\n\r\n### Example\r\nNone (page-1 already includes an example for using the options)\r\n\r\n### Parameters\r\nParameters are defined\r\n\r\n### See also\r\n[Gleb: the factory methods, the estimator]\r\n\r\n/cc @glebuk @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/3218","RelatedDescription":"Open issue \"API reference - Finalize docs template for trainer API & estimators\" (#3218)"},{"Id":"429531451","IsPullRequest":true,"CreatedAt":"2019-04-05T17:02:59","Actor":"abgoswam","Number":"3208","RawContent":null,"Title":"Fixing namespace for image samples","State":"closed","Body":"Towards #3205 \r\n\r\n- fixing the Image samples (which were previously updated via #3165)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3208","RelatedDescription":"Closed or merged PR \"Fixing namespace for image samples\" (#3208)"},{"Id":"429658946","IsPullRequest":true,"CreatedAt":"2019-04-05T17:00:52","Actor":"codemzs","Number":"3215","RawContent":null,"Title":"TimeSeriesStatics naming.","State":"closed","Body":"fixes #3203","Url":"https://github.com/dotnet/machinelearning/pull/3215","RelatedDescription":"Closed or merged PR \"TimeSeriesStatics naming.\" (#3215)"},{"Id":"429839482","IsPullRequest":true,"CreatedAt":"2019-04-05T16:30:34","Actor":"artidoro","Number":"3216","RawContent":null,"Title":"Samples for CustomMapping, IndicateMissingValues, ReplaceMissingValues","State":"open","Body":"Related to #1209 \r\nFixes #3117 \r\n\r\nMade samples for the multi-column setting of:\r\n\r\n- `ReplaceMissingValues`\r\n- `IndicateMissingValues`\r\n\r\nI also made a sample to save and load the `CustomMapping` estimator.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3216","RelatedDescription":"Open PR \"Samples for CustomMapping, IndicateMissingValues, ReplaceMissingValues\" (#3216)"},{"Id":"429306551","IsPullRequest":false,"CreatedAt":"2019-04-05T16:00:11","Actor":"luisquintanilla","Number":"3201","RawContent":null,"Title":"Normalize Transform on In-Memory Data Returns Zero","State":"closed","Body":"Given the code below:\r\n\r\n```csharp\r\nstatic void RunNormalizeExample()\r\n{\r\n    MLContext mlContext = new MLContext();\r\n\r\n    SampleData[] inMemoryCollection = new SampleData[]\r\n    {\r\n        new SampleData {Features = new float[] {5.1f,3.5f,1.4f}}\r\n    };\r\n\r\n    IDataView data = mlContext.Data.LoadFromEnumerable<SampleData>(inMemoryCollection);\r\n\r\n    IEstimator<ITransformer> dataPrep = mlContext.Transforms.Normalize(\"Features\");\r\n        \r\n    ITransformer dataPrepTransformer = dataPrep.Fit(data);\r\n\r\n    IDataView transformedDataView = dataPrepTransformer.Transform(data);\r\n\r\n    var transformedFeatures = transformedDataView.GetColumn<float[]>(mlContext, \"Features\").ToList();\r\n}\r\n```\r\n\r\nWhere the schema for `SampleData` is the following:\r\n\r\n```csharp\r\npublic class SampleData\r\n{\r\n    [VectorType(3)]\r\n    public float[] Features { get; set; }\r\n    public float Label { get; set; }\r\n}\r\n```\r\n\r\nThe values in `transformedFeatures` which are the normalized values using the default (MinMax) implementation of `Normalize` are all zero.\r\n\r\n![image](https://user-images.githubusercontent.com/46974588/55562853-cf1ded80-56c2-11e9-8ee4-d178168d7876.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3201","RelatedDescription":"Closed issue \"Normalize Transform on In-Memory Data Returns Zero\" (#3201)"},{"Id":"429656590","IsPullRequest":true,"CreatedAt":"2019-04-05T09:12:10","Actor":"codemzs","Number":"3214","RawContent":null,"Title":"Fix runtime exception in LDA sample.","State":"open","Body":"LDA sample throws an exception because the API changed after the sample was written. This PR fixes the sample and ensures output matches that of comments in the sample.","Url":"https://github.com/dotnet/machinelearning/pull/3214","RelatedDescription":"Open PR \"Fix runtime exception in LDA sample.\" (#3214)"},{"Id":"429653958","IsPullRequest":true,"CreatedAt":"2019-04-05T09:05:11","Actor":"codemzs","Number":"3213","RawContent":null,"Title":"Time Series samples for stateful prediction engine.","State":"open","Body":"Seems like PR #2900 removed the stateful prediction samples as part of refactoring and cleanup. Adding these useful samples back as they are used by customers that want to save time series model to disk and reload the model with up to date state that contains last seen values from prediction phase.","Url":"https://github.com/dotnet/machinelearning/pull/3213","RelatedDescription":"Open PR \"Time Series samples for stateful prediction engine.\" (#3213)"},{"Id":"429599216","IsPullRequest":true,"CreatedAt":"2019-04-05T06:18:48","Actor":"sfilipi","Number":"3211","RawContent":null,"Title":"Key to binary samples for documentation","State":"open","Body":"Towards #1209 \r\nThis adds the last batch of samples for the Conversions catalog.\r\nThe samples are KeyToVector and KeyToBinaryVector\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3211","RelatedDescription":"Open PR \"Key to binary samples for documentation\" (#3211)"},{"Id":"429452655","IsPullRequest":false,"CreatedAt":"2019-04-04T19:47:41","Actor":"sfilipi","Number":"3207","RawContent":null,"Title":"Error for KeyType attribute without initializing the Count ","State":"open","Body":"The KeyType attribute has a public parameterless constructor, that initializes [the Count to int.maxInt ](https://github.com/dotnet/machinelearning/blob/45b6c43387294d19cad843a21e87539213e8d34c/src/Microsoft.ML.Data/Data/SchemaDefinition.cs#L398).\r\n\r\nWhen we process the KeyTypes with  [KeyToMappingTransformer ](https://github.com/dotnet/machinelearning/blob/45b6c43387294d19cad843a21e87539213e8d34c/src/Microsoft.ML.Data/Transforms/KeyToVector.cs#L252) we [check that the Count of the KeyType is less than maxInt](https://github.com/dotnet/machinelearning/blob/45b6c43387294d19cad843a21e87539213e8d34c/src/Microsoft.ML.Core/Data/ColumnTypeExtensions.cs#L37).  \r\n\r\nThe error message is that the 'counts exceeds int.MaxValue', which for the case described (user annotating with the parameterless KeyType) leads to error. \r\n\r\nEither don't expose the parameterless KeyType constructor, or initialize to somethign else (MaxInt- 1?, is such a  large number even practical?) or accept MaxInt as a valid value. \r\n\r\n@TomFinley  @eerhardt @glebuk for suggestions. \r\n\r\nCode to repro\r\n```\r\n    class MapKeyToVector\r\n    {\r\n        /// This example demonstrates the use of the ValueMappingEstimator by mapping strings to other string values, or floats to strings. \r\n        /// This is useful to map types to a category. \r\n        public static void Example()\r\n        {\r\n            // Create a new ML context, for ML.NET operations. It can be used for exception tracking and logging, \r\n            // as well as the source of randomness.\r\n            var mlContext = new MLContext();\r\n\r\n            // Get a small dataset as an IEnumerable.\r\n            var rawData = new[] {\r\n                new DataPoint() { Timeframe = 45, Category = 5 },\r\n                new DataPoint() { Timeframe = 15, Category = 4 },\r\n                new DataPoint() { Timeframe = 65, Category = 4 },\r\n                new DataPoint() { Timeframe = 25, Category = 3 },\r\n                new DataPoint() { Timeframe = 45, Category = 3 },\r\n                new DataPoint() { Timeframe = 45, Category = 5 }\r\n            };\r\n\r\n            var data = mlContext.Data.LoadFromEnumerable(rawData);\r\n\r\n            // Constructs the ML.net pipeline\r\n            var pipeline = mlContext.Transforms.Conversion.MapKeyToVector(\"TimeframeVector\", \"Timeframe\")\r\n                           .Append(mlContext.Transforms.Conversion.MapKeyToVector(\"CategoryVector\", \"Category\", outputCountVector: true));\r\n\r\n            // Fits the pipeline to the data.\r\n            IDataView transformedData = pipeline.Fit(data).Transform(data);\r\n        }\r\n\r\n        private class DataPoint\r\n        {\r\n            [KeyType]\r\n            public uint Timeframe { get; set; }\r\n\r\n            [KeyType]\r\n            public uint Category { get; set; }\r\n\r\n        }\r\n}","Url":"https://github.com/dotnet/machinelearning/issues/3207","RelatedDescription":"Open issue \"Error for KeyType attribute without initializing the Count \" (#3207)"},{"Id":"429420795","IsPullRequest":false,"CreatedAt":"2019-04-04T18:26:22","Actor":"rogancarr","Number":"3206","RawContent":null,"Title":"ONNX Exports are Lossy","State":"open","Body":"As shown in the [ONNX Functional Tests](https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Functional.Tests/ONNX.cs), export to ONNX models are lossy: They are not high-fidelity representations of the original ML.NET model and agree numerically to a relatively lower precision than expected.","Url":"https://github.com/dotnet/machinelearning/issues/3206","RelatedDescription":"Open issue \"ONNX Exports are Lossy\" (#3206)"},{"Id":"429418962","IsPullRequest":false,"CreatedAt":"2019-04-04T18:21:57","Actor":"shmoradims","Number":"3205","RawContent":null,"Title":"API reference - Remove Microsoft.ML prefix from samples' namespace","State":"open","Body":"Currently the samples are written like this:\r\n\r\n```csharp\r\nnamespace **Microsoft.ML**.Samples.Dynamic.*\r\n{ \r\n}\r\n```\r\nThis is causing the samples to not require `using Microsoft.ML`. We want to drop the Microsoft.ML prefix from samples and write them like this:\r\n\r\n```csharp\r\nnamespace Samples.Dynamic.*\r\n{ \r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3205","RelatedDescription":"Open issue \"API reference - Remove Microsoft.ML prefix from samples' namespace\" (#3205)"},{"Id":"429393248","IsPullRequest":false,"CreatedAt":"2019-04-04T17:17:18","Actor":"sfilipi","Number":"3204","RawContent":null,"Title":"The XML documentation for the transforms should contain information about schema ","State":"open","Body":"The XML documentation for the transforms should contain information about the schema: requirements about the type of the columns to work on, and information about the type of the columns produced. \r\n\r\n@shmoradims \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3204","RelatedDescription":"Open issue \"The XML documentation for the transforms should contain information about schema \" (#3204)"},{"Id":"429317754","IsPullRequest":false,"CreatedAt":"2019-04-04T14:40:09","Actor":"esso23","Number":"3203","RawContent":null,"Title":"Extension methods from TimeSeriesStatic.cs (A Typo and A Missing Nuget for Static Time Series)","State":"open","Body":"### System information\r\n\r\n- Windows 10 Pro\r\n- .NET 4.6.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am trying to use extension method `DetectSpikeBySsa` from class `SsaSpikeDetecotStaticExtensions` (there's a typo in the name btw). I'm using static API and TimeSeries package.\r\n\r\n- **What happened?**\r\nThe extension method (and any other extension methods from that namespace) is not available to use on Scalar\\<float\\> type.\r\nI am using `SsaSpikeDetection()` test from `TimeSeriesStaticTests.cs` as a reference.\r\n\r\n- **What did you expect?**\r\nExpected usage (from the referenced test):\r\n```cs\r\nvar staticLearningPipeline = staticData.MakeNewEstimator()\r\n                .Append(r => r.Value.DetectSpikeBySsa(80, ChangeHistoryLength, TrainingWindowSize, SeasonalityWindowSize));\r\n```\r\nbut `DetectSpikeBySsa` is not available on my Scalar\\<float\\>.\r\n\r\n### Source code / logs\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Transforms;\r\nusing Microsoft.ML.Transforms.TimeSeries;\r\nusing Microsoft.ML.StaticPipe;\r\nusing Microsoft.ML.Trainers;\r\n\r\nnamespace xxx.Modules.Data.ML.Dev\r\n{\r\n    public class DataLoader\r\n    {\r\n        private sealed class SpikePrediction\r\n        {\r\n            [VectorType(3)]\r\n            public double[] Data;\r\n        }\r\n\r\n        private class DataObject\r\n        {\r\n            public float Gain { get; set; }\r\n        }\r\n\r\n        public DataLoader()\r\n        {\r\n            MLContext mlContext = new MLContext(seed: 0);\r\n            var loader = mlContext.Data.CreateTextLoader(ctx => (\r\n                    Id: ctx.LoadText(0),\r\n                    Begin: ctx.LoadText(1),\r\n                    End: ctx.LoadText(2),\r\n                    Gain: ctx.LoadFloat(3),\r\n                    Confidence: ctx.LoadFloat(4)\r\n                ), separator: ',', hasHeader: true);\r\n\r\n            var data = loader.Load(\"output_intervals.csv\");\r\n\r\n            var preview = data.AsDynamic.Preview();\r\n\r\n            var learningPipeline = loader.MakeNewEstimator()\r\n                .Append(r => (\r\n                    r.Gain.DetectSpikeBySsa(80, 800 / 4, 800 / 2, 800 / 8) // Cannot resolve symbol...\r\n                ));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIncluded packages:\r\n```\r\n<packages>\r\n  <package id=\"Castle.Core\" version=\"4.2.1\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML\" version=\"1.0.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.CpuMath\" version=\"1.0.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.DataView\" version=\"1.0.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.Experimental\" version=\"0.12.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.FastTree\" version=\"1.0.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.ImageAnalytics\" version=\"1.0.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.Mkl.Redist\" version=\"1.0.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.Recommender\" version=\"0.12.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.StaticPipe\" version=\"0.12.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Microsoft.ML.TimeSeries\" version=\"0.12.0-preview\" targetFramework=\"net461\" />\r\n  <package id=\"Newtonsoft.Json\" version=\"10.0.3\" targetFramework=\"net461\" />\r\n  <package id=\"NLog\" version=\"4.6.1\" targetFramework=\"net461\" />\r\n  <package id=\"System.Buffers\" version=\"4.4.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.CodeDom\" version=\"4.4.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Collections.Immutable\" version=\"1.5.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Drawing.Common\" version=\"4.5.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Memory\" version=\"4.5.1\" targetFramework=\"net461\" />\r\n  <package id=\"System.Numerics.Vectors\" version=\"4.4.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Reactive\" version=\"4.0.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Reflection.Emit.Lightweight\" version=\"4.3.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Runtime.CompilerServices.Unsafe\" version=\"4.5.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.Threading.Tasks.Dataflow\" version=\"4.8.0\" targetFramework=\"net461\" />\r\n  <package id=\"System.ValueTuple\" version=\"4.4.0\" targetFramework=\"net461\" />\r\n  <package id=\"WampSharp\" version=\"19.3.1\" targetFramework=\"net461\" />\r\n</packages>\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3203","RelatedDescription":"Open issue \"Extension methods from TimeSeriesStatic.cs (A Typo and A Missing Nuget for Static Time Series)\" (#3203)"},{"Id":"429316614","IsPullRequest":false,"CreatedAt":"2019-04-04T14:38:05","Actor":"luisquintanilla","Number":"3202","RawContent":null,"Title":"LoadColumn Attribute Inconsistent Behavior for Vector Properties Between File and In-Memory Sources","State":"open","Body":"Given the following data model / schema where `Features` is a float vector:\r\n\r\n```csharp\r\npublic class IrisData\r\n{\r\n    [LoadColumn(0,2)]\r\n    public float Features { get; set; }\r\n    [LoadColumn(3)]\r\n    public float Label { get; set; }\r\n}\r\n```\r\n\r\nWhen loading data from a file and applying transformations, there are no errors and transforms work as expected. However, when trying to use the same data model / schema to create and work with in-memory data, there are errors as shown in the screenshot below:\r\n\r\n![image](https://user-images.githubusercontent.com/46974588/55563915-caf2cf80-56c4-11e9-92e6-016c4932b9d7.png)\r\n\r\nWorkarounds are\r\n\r\na) Create a new data model / schema for in-memory data\r\n```csharp\r\npublic class IrisDataFloatArrayFeatures{\r\n    [LoadColumn(0,2)]\r\n    [VectorType(3)]\r\n    public float[] Features { get; set; }\r\n    [LoadColumn(3)]\r\n    public float Label { get; set; }\r\n}\r\n```\r\nb) Apply `VectorType` attribute to the original model and change property type to `float[]`\r\n```csharp\r\npublic class IrisData\r\n{\r\n    [LoadColumn(0,2)]\r\n    [VectorType(3)]\r\n    public float[] Features { get; set; }\r\n    [LoadColumn(3)]\r\n    public float Label { get; set; }\r\n}\r\n```\r\nSince `LoadColumn` works for file data, it would be preferable to reuse the same data model / schema for in-memory data. Additionally, simply converting the property type to `float[]` without the `VectorType` attribute does not work when trying to apply transforms since the framework does not automatically pick up that the `float[]` property is a vector like it otherwise would with `LoadColumn` annotation leaving it to the user to manually convert the property to a vector.","Url":"https://github.com/dotnet/machinelearning/issues/3202","RelatedDescription":"Open issue \"LoadColumn Attribute Inconsistent Behavior for Vector Properties Between File and In-Memory Sources\" (#3202)"},{"Id":"429301300","IsPullRequest":false,"CreatedAt":"2019-04-04T14:09:25","Actor":"xperiandri","Number":"3200","RawContent":null,"Title":"Templates support for Visual Studio 2019","State":"open","Body":"Add support for Visual Studio 2019 in templates\r\nhttps://marketplace.visualstudio.com/items?itemName=MLNET.07\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3200","RelatedDescription":"Open issue \"Templates support for Visual Studio 2019\" (#3200)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-04-07T05:30:30.4341077Z","RunDurationInMilliseconds":561}