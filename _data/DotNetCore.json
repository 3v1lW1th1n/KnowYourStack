{"Data":{"Blog":{"FeedItems":[{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T15:00:16+00:00","CommentsCount":2,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://devblogs.microsoft.com/dotnet/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null},{"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T13:03:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Final Update 2/19/19 @1:30 PM (PST): This advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no...","Href":"https://devblogs.microsoft.com/dotnet/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null},{"Title":"Microsoft’s Developer Blogs are Getting an Update","PublishedOn":"2019-02-13T18:49:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming days, we’ll be moving our developer blogs to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. This...","Href":"https://devblogs.microsoft.com/dotnet/microsofts-developer-blogs-are-getting-an-update/","RawContent":null},{"Title":"Help us make the .NET Architecture guides better for you!","PublishedOn":"2019-02-13T15:47:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the last couple of years, we worked with experts to create some incredible architecture guides &#38; reference samples for .NET developers. We focused on Microservices Architecture, Modernizing...","Href":"https://devblogs.microsoft.com/dotnet/help-us-make-the-net-architecture-guides-better-for-you/","RawContent":null},{"Title":".NET Framework February 2019 Security and Quality Rollup","PublishedOn":"2019-02-13T13:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Updated: February 15, 2019\n\nA new Advisory on February 2019 Security update for Windows 10 update 1809 has been released today for issues customers have reported with .NET 4.8 Preview and this...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9142546450","Type":"IssuesEvent","CreatedAt":"2019-02-26T23:12:20","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/75","RelatedDescription":"Closed issue \"Fix mailto link on Team page\" (#75) at dotnet/foundation","RelatedBody":"When visiting [https://dotnetfoundation.org/team](https://dotnetfoundation.org/team), I noticed that the email icon under **Miklos Barkoczi**'s name has `mailto:` referenced twice. It may be obvious to some, but not to others.\r\n\r\n```\r\n<a href=\"mailto:mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```\r\nshould be\r\n```\r\n<a href=\"mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```"},{"Id":"9089021734","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Merged pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9089021716","Type":"IssuesEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"9089015890","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:44:39","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Merged pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9143891610","Type":"PullRequestEvent","CreatedAt":"2019-02-27T05:04:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22864","RelatedDescription":"Merged pull request \"Make BitOperations public (CoreCLR)\" (#22864) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/35419\r\n\r\nPer api approval:\r\n* **No** functional changes\r\n* Changed name of class to `BitOperations` from `BitOps`\r\n* Changed namespace to `System.Numerics` from `System`\r\n* Updated all ~50 call-sites\r\n* Added `[CLSCompliant(false)]` to signatures with unsigned params\r\n* Sorted method names alphabetically"},{"Id":"9143808592","Type":"PullRequestEvent","CreatedAt":"2019-02-27T04:39:31","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22869","RelatedDescription":"Merged pull request \"Remove bogus assert in Thread::MarkThreadForAbort\" (#22869) at dotnet/coreclr","RelatedBody":"This is intended to fix issue https://github.com/dotnet/coreclr/issues/22868"},{"Id":"9143641636","Type":"PullRequestEvent","CreatedAt":"2019-02-27T03:47:45","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22872","RelatedDescription":"Opened pull request \"Cleanup more GCC warnings\" (#22872) at dotnet/coreclr","RelatedBody":"Suppress will never be NULL warnings\r\nConvert multi-character literal\r\nFix mutli-line comment warning\r\nRemove hr=hr undefined assignment\r\nMove declaration into same file as one was defined Extern the other one was static\r\nAdd parenthesis\r\n"},{"Id":"9143589325","Type":"PullRequestEvent","CreatedAt":"2019-02-27T03:32:35","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22852","RelatedDescription":"Merged pull request \"Update EventCounter spec\" (#22852) at dotnet/coreclr","RelatedBody":"We made a flurry of decisions in our meeting last wednesday.\r\nPartly this fills in areas of the design we didn't adequately decide on and\r\npartly this suggests a few changes after having had time to think on it.\r\n\r\n1) My suggestion to use IntervalSec as an identifier for a series doesn't\r\nwork. I proposed a new field 'Series' that is used for that same purpose.\r\n\r\n2) I am proposing we no longer standardize on the five-tuple of stats.\r\nAlthough it made sense to me at the time, decisions we made later in the\r\nmeeting invalidated the basis for that choice IMO.\r\n\r\n3) Aggregating seems like an overly generic name that all counters do, so\r\nI propose 'Incrementing' as a more specific term.\r\n\r\n4) I am proposing we stop accepting fractional time intervals because\r\nprobably nobody would have used them anyways and now we don't have to worry\r\nabout floating point rounding and canonicalization issues when determining\r\nif two clients share the same time series or in round tripping the identifier\r\nback to them.\r\n\r\n5) I defined specific fields for 'DisplayName' and 'CounterType' in our\r\nwire protocol. Although not opposed to a generic metadata field for other\r\npurposes, it seemed unnecessary for our current purposes.\r\n\r\n6) I switched Incrementing coutner to float, because it\r\nwould be a shame if we had to make a whole new counter in the future\r\nthat did exactly the same thing just with floating point values. For example\r\n'GC Seconds Paused'"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9143350859","Type":"PullRequestEvent","CreatedAt":"2019-02-27T02:28:16","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10888","RelatedDescription":"Merged pull request \"Parameterize latest patch versions.\" (#10888) at dotnet/cli","RelatedBody":"This commit parameterizes the latest patch versions in the build.\r\n"},{"Id":"9143180889","Type":"PullRequestEvent","CreatedAt":"2019-02-27T01:45:16","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10888","RelatedDescription":"Opened pull request \"Parameterize latest patch versions.\" (#10888) at dotnet/cli","RelatedBody":"This commit parameterizes the latest patch versions in the build.\r\n"},{"Id":"9142762927","Type":"PullRequestEvent","CreatedAt":"2019-02-27T00:01:20","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10887","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10887) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9142762712","Type":"PullRequestEvent","CreatedAt":"2019-02-27T00:01:17","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10886","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10886) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9142762452","Type":"PullRequestEvent","CreatedAt":"2019-02-27T00:01:14","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10885","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.1.6xx\" (#10885) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9142687903","Type":"PullRequestEvent","CreatedAt":"2019-02-26T23:43:37","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10884","RelatedDescription":"Merged pull request \"Skip the self-contained roll-forward version tests.\" (#10884) at dotnet/cli","RelatedBody":"See #10879. Disabling these tests until we figure out a way to make them work\r\nfor servicing builds that will be bumping the versions without the unreleased,\r\nupcoming shared frameworks being available.\r\n\r\n\r\n"},{"Id":"9142534889","Type":"PullRequestEvent","CreatedAt":"2019-02-26T23:09:57","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10884","RelatedDescription":"Opened pull request \"Skip the self-contained roll-forward version tests.\" (#10884) at dotnet/cli","RelatedBody":"See #10879. Disabling these tests until we figure out a way to make them work\r\nfor servicing builds that will be bumping the versions without the unreleased,\r\nupcoming shared frameworks being available.\r\n\r\n\r\n"},{"Id":"9142371933","Type":"IssuesEvent","CreatedAt":"2019-02-26T22:38:36","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10734","RelatedDescription":"Closed issue \"dotnet tool update does not have a `--version` parameter so can't be used for prereleases\" (#10734) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\ndotnet tool update Microsoft.DotNet.Darc -g --add-source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n```\r\n\r\n## Expected  behavior\r\nI would love to be able to specify something like `--version '*'` or `--prerelease`, but neither option exists.\r\n\r\n## Actual behavior\r\n![image](https://user-images.githubusercontent.com/2696087/52504747-31b0ac80-2b9e-11e9-92fe-4ef47c8313cf.png)\r\n\r\n<details>\r\n\r\n```\r\nerror NU1103: Unable to find a stable package microsoft.dotnet.darc with version\r\nerror NU1103:   - Found 595 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json [ Nearest version: 1.0.0-beta.18477.9 ]\r\nerror NU1103:   - Found 0 version(s) in /usr/local/share/dotnet/sdk/NuGetFallbackFolder\r\nerror NU1103:   - Found 0 version(s) in nuget.org\r\nTool 'microsoft.dotnet.darc' failed to update due to the following:\r\nThe tool package could not be restored.\r\nTool 'microsoft.dotnet.darc' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\n</details>\r\n\r\n## Workaround\r\n\r\n```sh\r\n( dotnet tool uninstall -g Microsoft.DotNet.Darc || true ) && dotnet tool install --version '1.1.0-*' -g Microsoft.DotNet.Darc  --add-source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n```\r\n\r\nUse `dotnet tool uninstall` + `dotnet tool install`. Use caution because `dotnet tool uninstall` fails if the tool is already uninstalled.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /Users/namc/src/aspnet/Extensions/.dotnet/sdk/3.0.100-preview-010184/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27404-9\r\n  Commit:  5ff1240bef\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010184 [/Users/namc/src/aspnet/Extensions/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27330-4 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27404-9 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9143447128","Type":"IssuesEvent","CreatedAt":"2019-02-27T02:53:50","Actor":"divega","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Opened issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092) at dotnet/standard","RelatedBody":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595, plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst "},{"Id":"9142900791","Type":"IssuesEvent","CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Opened issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091) at dotnet/standard","RelatedBody":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n"},{"Id":"9142764225","Type":"IssuesEvent","CreatedAt":"2019-02-27T00:01:35","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Opened issue \"Sort out baseline between netstandard & netcoreapp\" (#1090) at dotnet/standard","RelatedBody":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst "},{"Id":"9138348417","Type":"PullRequestEvent","CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1089) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n"},{"Id":"9138284242","Type":"PullRequestEvent","CreatedAt":"2019-02-26T13:00:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1089) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n"},{"Id":"9134985478","Type":"PullRequestEvent","CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Merged pull request \"Remove windows row\" (#1087) at dotnet/standard","RelatedBody":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander "},{"Id":"9134981607","Type":"PullRequestEvent","CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Merged pull request \"Update .NET Standard 2.1 API delta\" (#1088) at dotnet/standard","RelatedBody":""},{"Id":"9134980789","Type":"PullRequestEvent","CreatedAt":"2019-02-26T02:08:53","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Opened pull request \"Update .NET Standard 2.1 API delta\" (#1088) at dotnet/standard","RelatedBody":""},{"Id":"9134483785","Type":"PullRequestEvent","CreatedAt":"2019-02-26T00:03:49","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Opened pull request \"Remove windows row\" (#1087) at dotnet/standard","RelatedBody":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander "},{"Id":"9130150867","Type":"PullRequestEvent","CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1086) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n"},{"Id":"9130087597","Type":"PullRequestEvent","CreatedAt":"2019-02-25T13:00:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1086) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9143903123","Type":"PullRequestEvent","CreatedAt":"2019-02-27T05:08:17","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35615","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#35615) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9143891604","Type":"IssuesEvent","CreatedAt":"2019-02-27T05:04:39","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35419","RelatedDescription":"Closed issue \"Proposal: Expose existing BitOps methods\" (#35419) at dotnet/corefx","RelatedBody":"In a series of recent PRs ([LZCNT, LOG2](https://github.com/dotnet/coreclr/pull/22497), [TZCNT](https://github.com/dotnet/coreclr/pull/22333), [ROTL/R, POPCNT](https://github.com/dotnet/coreclr/pull/22584)) we consolidated and perf-tuned a basic set of bit-twiddling routines into a `coreclr` `internal static class`. \r\nThe ask is to expose these methods as `public` in `corefx` (via ref assembly).\r\n\r\n### Rationale and Usage\r\nBackground & justification in the related issue https://github.com/dotnet/corefx/issues/32269 (which also proposes `BT`, `BTS`, `BTR`, `BTC` intrinsics)\r\n\r\nHere is a **brief summary** to avoid reading the miles of comments there:\r\n\r\nDuplicate implementations of the proposed functions were already implemented pervasively throughout the stack (`coreclr`, `corert`, `corefx`), often with different algorithms and certainly with different performance characteristics and little to no explicit test coverage.\r\nSome existing callsites listed [here](https://github.com/dotnet/corefx/issues/32269#issuecomment-457689128)\r\nSome of the implementation had [suboptimal performance](https://github.com/dotnet/coreclr/blob/499e97e17ab07938f229f286427537a8e464c0a4/src/System.Private.CoreLib/shared/System/Buffers/Text/FormattingHelpers.CountDigits.cs#L13-L66) or [bugs](https://github.com/dotnet/coreclr/issues/22326). \r\n\r\nThese issues have been attended to, but the class is `internal` and so not easily available for consumption by downstream projects.\r\n\r\n### Scope\r\nThis issue is scoped to exposing **just the existing methods**.\r\nThere is no intent to add new signatures in this issue (unless required by api review)\r\n\r\n### Proposed API\r\nExisting implementation here: [BitOps.cs](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/BitOps.cs)\r\n```csharp\r\nnamespace System\r\n{\r\n    ...\r\n    public static partial class BitOps\r\n    {\r\n        public static int LeadingZeroCount(uint value) { throw null; }\r\n        public static int LeadingZeroCount(ulong value) { throw null; }\r\n\r\n        public static int Log2(uint value) { throw null; }\r\n        public static int Log2(ulong value) { throw null; }\r\n\r\n        public static int PopCount(uint value) { throw null; }\r\n        public static int PopCount(ulong value) { throw null; }\r\n\r\n        public static uint RotateLeft(uint value, int bitOffset) { throw null; }\r\n        public static ulong RotateLeft(ulong value, int bitOffset) { throw null; }\r\n        public static uint RotateRight(uint value, int bitOffset) { throw null; }\r\n        public static ulong RotateRight(ulong value, int bitOffset) { throw null; }\r\n\r\n        public static int TrailingZeroCount(int value) { throw null; }\r\n        public static int TrailingZeroCount(long value) { throw null; }\r\n        public static int TrailingZeroCount(uint value) { throw null; }\r\n        public static int TrailingZeroCount(ulong value) { throw null; }\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### Details\r\nThe internal routines have already been implemented as follows:\r\n* **Centralized & standardized** implementation of several intrinsics ([LZCNT, LOG2](https://github.com/dotnet/coreclr/pull/22497), [TZCNT](https://github.com/dotnet/coreclr/pull/22333), [ROTL/R, POPCNT](https://github.com/dotnet/coreclr/pull/22584)) \r\n* Uses **hardware** intrinsics where possible\r\n* **Optimized** software fallbacks\r\n* Updated all known **callsites** in `coreclr`\r\n* Added unit [tests](https://github.com/dotnet/corefx/blob/master/src/Common/tests/Tests/System/BitOpsTests.cs) for all `BitOps` methods (in `corefx`) \r\n\r\nThere are downstream callsites in `corefx` and `corert` as well as externals such as `roslyn` that would benefit from these intrinsics, as well as external (3rd party) projects.\r\n\r\ncc @tannergooding, @jkotas \r\n"},{"Id":"9143728971","Type":"IssuesEvent","CreatedAt":"2019-02-27T04:14:38","Actor":"m5x","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35614","RelatedDescription":"Closed issue \"add span support to MemoryMappedFiles\" (#35614) at dotnet/corefx","RelatedBody":"`Span<T>` wave seems to have missed `System.IO.MemoryMappedFiles`. Is there some particular blocker for this? There are many scenarios in which it would be very useful to be able to access mapped memory as `Span<T>`."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9143696558","Type":"IssuesEvent","CreatedAt":"2019-02-27T04:04:20","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25619","RelatedDescription":"Closed issue \"[Highlighting] TODO comments\" (#25619) at dotnet/roslyn","RelatedBody":"In VS4MAC we had a list of tags for comments like todo/fixme and so on these got added to the task list - AFAIK VS.NET shares this feature.\r\n\r\nVS4Mac added colorization for these tags inside comments - is that something that's planed for VS.NET as well ? "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9143903634","Type":"PullRequestEvent","CreatedAt":"2019-02-27T05:08:26","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7093","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7093) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9143570486","Type":"IssuesEvent","CreatedAt":"2019-02-27T03:27:20","Actor":"rainbowlee","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7092","RelatedDescription":"Opened issue \"Oracle Mysql.Data System.TypeInitializationException:\" (#7092) at dotnet/corert","RelatedBody":"I wrote a test Project\r\n\r\nPackage Mysql.Data\r\n\r\n### code:\r\nusing System;\r\nusing MySql;\r\n\r\nnamespace TestMysql\r\n{\r\n  class Program\r\n  {\r\n    internal static string MySqlConnectString\r\n    {\r\n      get\r\n      {\r\n        string mysqlConnString = string.Format(\"SERVER={0};UID={1};PWD={2};DATABASE={3};CHARSET=utf8;Pooling=true;Min Pool Size=10;Max Pool Size={4};\",\r\n                                    \"127.0.0.1\", \"dfds\", \"dfds\" , \"dsnode\", 10);\r\n\r\n        return mysqlConnString;\r\n      }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n      for ( int i = 0; i < 10; i++)\r\n      {\r\n        Console.WriteLine(\"count{0}\", i);\r\n        try\r\n        {\r\n          MySql.Data.MySqlClient.MySqlConnection conn = new MySql.Data.MySqlClient.MySqlConnection(MySqlConnectString);\r\n          Console.WriteLine(\"open\");\r\n          conn.Open();\r\n          Console.WriteLine(\"close\");\r\n          conn.Close();\r\n        }\r\n\r\n        catch(Exception ex)\r\n        {\r\n          Console.WriteLine(\"MySql Connection ERROR :{0}\", ex);\r\n        }\r\n      }\r\n      Console.WriteLine(\"Hello World!\");\r\n    }\r\n  }\r\n}\r\n\r\nwhen ran , exception as follows:\r\n\r\nMySql Connection ERROR :System.TypeInitializationException: A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property. ---> System.TypeInitializationException: A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property. ---> System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize ---> System.MissingMethodException: No parameterless constructor defined for this object.\r\n   at System.ActivatorImplementation.CreateInstance(Type, Boolean) + 0xfe\r\n   at System.Configuration.Internal.ConfigSystem.System.Configuration.Internal.IConfigSystem.Init(Type, Object[]) + 0x40\r\n   at System.Configuration.ClientConfigurationSystem..ctor() + 0x47\r\n   at System.Configuration.ConfigurationManager.EnsureConfigurationSystem() + 0x5f\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Configuration.ConfigurationManager.EnsureConfigurationSystem() + 0xfa\r\n   at System.Configuration.ConfigurationManager.PrepareConfigSystem() + 0x13\r\n   at System.Configuration.ConfigurationManager.GetSection(String) + 0x25\r\n   at MySql.Data.MySqlClient.MySqlConfiguration..cctor() + 0x11\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0xd5\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0x18d\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstructionReturnGCStaticBase(StaticClassConstructionContext*, Object) + 0xd\r\n   at MySql.Data.MySqlClient.Replication.ReplicationManager..cctor() + 0x6a\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0xd5\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0x18d\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstructionReturnNonGCStaticBase(StaticClassConstructionContext*, IntPtr) + 0xd\r\n   at MySql.Data.MySqlClient.Replication.ReplicationManager.IsReplicationGroup(String) + 0x22\r\n   at MySql.Data.MySqlClient.MySqlConnection.Open() + 0x422\r\n   at TestMysql.Program.Main(String[]) + 0x71\r\n\r\nIs there any idea for this problem? \r\n\r\n"},{"Id":"9143567382","Type":"PullRequestEvent","CreatedAt":"2019-02-27T03:26:26","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7091","RelatedDescription":"Opened pull request \"[WIP] Add scripts to set up CI with Azure Pipelines\" (#7091) at dotnet/corert","RelatedBody":"All scripts have been copied from the CoreCLR repo and adjusted for CoreRT.\r\n\r\nThe first goal is enable Windows_NT Debug build without running any tests."},{"Id":"9143087039","Type":"IssuesEvent","CreatedAt":"2019-02-27T01:21:09","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7090","RelatedDescription":"Opened issue \"wasm: Question about ExportedType.IsForwarder\" (#7090) at dotnet/corert","RelatedBody":"I'm trying out ilc for wasm on some larger programs, and I'm hitting \r\nhttps://github.com/dotnet/corert/blob/5056fd45b076277579c84833060447415b7b9403/src/Common/src/TypeSystem/Ecma/EcmaModule.cs#L305\r\nfor a type that has `IsForwarder == true`.  (Type is `System.Threading.PreAllocatedOverlapped` and it looks in the `implementation` for `System.Private.CoreLib`).  Am I right in thinking this is for types that are forwarded to another assemby using `System.Runtime.CompilerServices.TypeForwardedTo`?  If so I suppose what could be happening is that the module which now contains the type, is not getting this type added through the dependency analysis as the actual reference is to the type when it was in the \"older\" module.  Does that make sense?"},{"Id":"9143000065","Type":"PullRequestEvent","CreatedAt":"2019-02-27T01:00:10","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7089","RelatedDescription":"Opened pull request \"[SuperIlc] Pass through unmanaged assets during compilation\" (#7089) at dotnet/corert","RelatedBody":"Improve quality of life by passing through to the output all inputs that aren't managed assemblies. This also includes the input assembly if we're unable to successfully compile the assembly, which is useful during CPAOT workload bring-up. If the input folder is a an published with `dotnet publish --self-contained` and contains the runtime, this results in a nice runnable output folder."},{"Id":"9142912380","Type":"PullRequestEvent","CreatedAt":"2019-02-27T00:38:08","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7088","RelatedDescription":"Opened pull request \"Produce full vtables in CPAOT\" (#7088) at dotnet/corert","RelatedBody":"I believe it's inappropriate to try to \"optimize\" the VTable\r\nas it's not us, it's the CoreCLR runtime that actually emits the\r\nvtable based on type metadata. In contrast to full AOT, we're not\r\nrequired to produce the complete code graph and so we currently\r\ndon't need the detailed VirtualMethodUse tracking that is required\r\nfor lazy vtable construction to work properly.\r\n\r\nThis change fixes CPAOT build of System.Private.CoreLib, hopefully\r\nthe last remaining issue in CoreCLR framework and ASP.NET assembly\r\nbuilds.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9142711038","Type":"PullRequestEvent","CreatedAt":"2019-02-26T23:49:11","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7085","RelatedDescription":null,"RelatedBody":"Thanks to help from Michal I have discovered that two structurally\r\ndifferent methods on instantiated types can have identical textual\r\nrepresentation as the type / method definition can contain references\r\nto different generic argument indices that just happen to resolve\r\nto the same types in the instantiated entity. Based on Michal's\r\nsuggestion I have changed context method formating to use the\r\nNameMangler formatting methods that take care of this issue.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9142710775","Type":"PullRequestEvent","CreatedAt":"2019-02-26T23:49:08","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7085","RelatedDescription":"Closed pull request \"Fix spurious duplicate symbol in Microsoft.EntityFrameworkCore.Design\" (#7085) at dotnet/corert","RelatedBody":"Thanks to help from Michal I have discovered that two structurally\r\ndifferent methods on instantiated types can have identical textual\r\nrepresentation as the type / method definition can contain references\r\nto different generic argument indices that just happen to resolve\r\nto the same types in the instantiated entity. Based on Michal's\r\nsuggestion I have changed context method formating to use the\r\nNameMangler formatting methods that take care of this issue.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9142410363","Type":"PullRequestEvent","CreatedAt":"2019-02-26T22:45:31","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7087","RelatedDescription":"Opened pull request \"Fix CPAOT build of three more ASP.NET assemblies\" (#7087) at dotnet/corert","RelatedBody":"1) throw \"requires runtime JIT\" on INITCLASS / INITINSTCLASS like\r\nCrossgen does;\r\n\r\n2) throw \"requires runtime JIT\" on embedMethodHandle like Crossgen\r\ndoes;\r\n\r\n3) Apply GetMangledMethodName in MethodFixupSignature to fix\r\nspurious symbol name matches.\r\n\r\n4) In ImportedMethodNode, suppress constrained type for local methods;\r\notherwise we could end up with two different TypeAndMethod keys\r\n(because of the different constrained type) but we ended up\r\nproducing an identical LocalMethodImport in both cases.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9142156605","Type":"PullRequestEvent","CreatedAt":"2019-02-26T22:01:23","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7085","RelatedDescription":null,"RelatedBody":"Thanks to help from Michal I have discovered that two structurally\r\ndifferent methods on instantiated types can have identical textual\r\nrepresentation as the type / method definition can contain references\r\nto different generic argument indices that just happen to resolve\r\nto the same types in the instantiated entity. Based on Michal's\r\nsuggestion I have changed context method formating to use the\r\nNameMangler formatting methods that take care of this issue.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9142156028","Type":"PullRequestEvent","CreatedAt":"2019-02-26T22:01:18","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7085","RelatedDescription":"Closed pull request \"Fix spurious duplicate symbol in Microsoft.EntityFrameworkCore.Design\" (#7085) at dotnet/corert","RelatedBody":"Thanks to help from Michal I have discovered that two structurally\r\ndifferent methods on instantiated types can have identical textual\r\nrepresentation as the type / method definition can contain references\r\nto different generic argument indices that just happen to resolve\r\nto the same types in the instantiated entity. Based on Michal's\r\nsuggestion I have changed context method formating to use the\r\nNameMangler formatting methods that take care of this issue.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9142065746","Type":"PullRequestEvent","CreatedAt":"2019-02-26T21:47:16","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7082","RelatedDescription":"Merged pull request \"Add tests for CPAOT method handle lookup\" (#7082) at dotnet/corert","RelatedBody":"This is the remains of my method handle PR after rebasing against Tomas' very similar change.\r\n\r\n* Test a variety of method handle lookups\r\n\r\n* Generic methods need an instantiating stub in their signature when looking up their method handle."},{"Id":"9142058773","Type":"PullRequestEvent","CreatedAt":"2019-02-26T21:46:08","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7083","RelatedDescription":"Merged pull request \"[CPAOT] Fix GC Ref Map Emission for uncompilable methods\" (#7083) at dotnet/corert","RelatedBody":"`ReadyToRunCodegenNodeFactory` always wraps method entry points in an import helper cell. This is not correct when simply asking that a method be compiled such as when rooting methods for compilation. Separate the two concepts so it's possible to ask for either a method's code to be added to the graph (`MethodEntryPoint`) so we can express that we want a method to be compiled, and `ImportedMethodNode` which will wrap the entrypoint with a method import cell. `ImportedMethodNode` should be used at callsites where the import is actually needed.\r\n\r\nWith this fix, we no longer root method import cells for every method at the beginning of compilation; their presence should now rely on the calling method compiling successfully. Methods that refer to the indeterminate sized `Vector<T>` will no longer leave orphaned method imports with gc ref maps that can't compute the size of that type.\r\n\r\nThis fixes compilation of microsoft.aspnetcore.server.kestrel.core in the WebAPI workload.\r\n"},{"Id":"9141424651","Type":"PullRequestEvent","CreatedAt":"2019-02-26T20:06:19","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7086","RelatedDescription":"Opened pull request \"wasm: fix for Initobj fails to compile for structs with double fields\" (#7086) at dotnet/corert","RelatedBody":"There was no path for initialising double fields in structs so the following struct failed to compile the Initobj call:\r\n```\r\npublic struct StructWithDouble\r\n{\r\n    public double DoubleField;\r\n}\r\nThis PR adds double support for Initobj opcode."},{"Id":"9139722914","Type":"PullRequestEvent","CreatedAt":"2019-02-26T16:05:39","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7085","RelatedDescription":"Opened pull request \"Fix spurious duplicate symbol in Microsoft.EntityFrameworkCore.Design\" (#7085) at dotnet/corert","RelatedBody":"Thanks to help from Michal I have discovered that two structurally\r\ndifferent methods on instantiated types can have identical textual\r\nrepresentation as the type / method definition can contain references\r\nto different generic argument indices that just happen to resolve\r\nto the same types in the instantiated entity. Based on Michal's\r\nsuggestion I have changed context method formating to use the\r\nNameMangler formatting methods that take care of this issue.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9139033672","Type":"IssuesEvent","CreatedAt":"2019-02-26T14:43:36","Actor":"MarcoRossignoli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7084","RelatedDescription":"Opened issue \"Bump build tools to support vs 2019\" (#7084) at dotnet/corert","RelatedBody":"I need https://github.com/dotnet/buildtools/pull/2205 to open projects(ILVerify) with vs 2019\r\nI tried to bump build version to corefx one https://github.com/dotnet/corefx/blob/c8e44c3d027d0539e7f9091336cc48e59e7d03e8/eng/dependencies.props#L61 but after that repo build fails.\r\n\r\n/cc @jkotas @MichalStrehovsky "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9143099752","Type":"PullRequestEvent","CreatedAt":"2019-02-27T01:24:23","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2990","RelatedDescription":"Merged pull request \"Add hook to redirect common props, only ref m.nc.platforms when necessary\" (#2990) at dotnet/sdk","RelatedBody":"1. Introduce $(AlternateCommonProps) to redirect the Sdk common props import to a user-defined location. This is morally equivalent to $(LanguageTargets) being customizable on the targets side. Having full control over both of these imports makes it much easier to integrate the SDK into existing heavily-customized builds. The current use case is to get some internal builds over to netcoreapp3.0\r\n\r\n2. Getting an intermittent error about 'vs' not being found from dogfood script. Removing unnecessary setting of msbuildEngine seems to have fixed it.\r\n\r\n3. With https://github.com/dotnet/core-sdk/pull/698, microsoft.netcore.platforms becomes the only package that cannot be resolved from packs. Make it so that we only pull it in when there are other package references. Otherwise, nuget doesn't need to see it as a package reference. This is just moving the temporary solution around, but means that we can get a working offline experience before we figure out how to adress the runtime graph going into to nuget (or sdk taking over for nuget)."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"414821988","IsPullRequest":true,"CreatedAt":"2019-02-27T05:04:38","Actor":"grant-d","Number":"22864","RawContent":null,"Title":"Make BitOperations public (CoreCLR)","State":"closed","Body":"Resolves https://github.com/dotnet/corefx/issues/35419\r\n\r\nPer api approval:\r\n* **No** functional changes\r\n* Changed name of class to `BitOperations` from `BitOps`\r\n* Changed namespace to `System.Numerics` from `System`\r\n* Updated all ~50 call-sites\r\n* Added `[CLSCompliant(false)]` to signatures with unsigned params\r\n* Sorted method names alphabetically","Url":"https://github.com/dotnet/coreclr/pull/22864","RelatedDescription":"Closed or merged PR \"Make BitOperations public (CoreCLR)\" (#22864)"},{"Id":"414905233","IsPullRequest":true,"CreatedAt":"2019-02-27T04:39:30","Actor":"cshung","Number":"22869","RawContent":null,"Title":"Remove bogus assert in Thread::MarkThreadForAbort","State":"closed","Body":"This is intended to fix issue https://github.com/dotnet/coreclr/issues/22868","Url":"https://github.com/dotnet/coreclr/pull/22869","RelatedDescription":"Closed or merged PR \"Remove bogus assert in Thread::MarkThreadForAbort\" (#22869)"},{"Id":"414931923","IsPullRequest":true,"CreatedAt":"2019-02-27T03:47:44","Actor":"franksinankaya","Number":"22872","RawContent":null,"Title":"Cleanup more GCC warnings","State":"open","Body":"Suppress will never be NULL warnings\r\nConvert multi-character literal\r\nFix mutli-line comment warning\r\nRemove hr=hr undefined assignment\r\nMove declaration into same file as one was defined Extern the other one was static\r\nAdd parenthesis\r\n","Url":"https://github.com/dotnet/coreclr/pull/22872","RelatedDescription":"Open PR \"Cleanup more GCC warnings\" (#22872)"},{"Id":"414567434","IsPullRequest":true,"CreatedAt":"2019-02-27T03:32:35","Actor":"noahfalk","Number":"22852","RawContent":null,"Title":"Update EventCounter spec","State":"closed","Body":"We made a flurry of decisions in our meeting last wednesday.\r\nPartly this fills in areas of the design we didn't adequately decide on and\r\npartly this suggests a few changes after having had time to think on it.\r\n\r\n1) My suggestion to use IntervalSec as an identifier for a series doesn't\r\nwork. I proposed a new field 'Series' that is used for that same purpose.\r\n\r\n2) I am proposing we no longer standardize on the five-tuple of stats.\r\nAlthough it made sense to me at the time, decisions we made later in the\r\nmeeting invalidated the basis for that choice IMO.\r\n\r\n3) Aggregating seems like an overly generic name that all counters do, so\r\nI propose 'Incrementing' as a more specific term.\r\n\r\n4) I am proposing we stop accepting fractional time intervals because\r\nprobably nobody would have used them anyways and now we don't have to worry\r\nabout floating point rounding and canonicalization issues when determining\r\nif two clients share the same time series or in round tripping the identifier\r\nback to them.\r\n\r\n5) I defined specific fields for 'DisplayName' and 'CounterType' in our\r\nwire protocol. Although not opposed to a generic metadata field for other\r\npurposes, it seemed unnecessary for our current purposes.\r\n\r\n6) I switched Incrementing coutner to float, because it\r\nwould be a shame if we had to make a whole new counter in the future\r\nthat did exactly the same thing just with floating point values. For example\r\n'GC Seconds Paused'","Url":"https://github.com/dotnet/coreclr/pull/22852","RelatedDescription":"Closed or merged PR \"Update EventCounter spec\" (#22852)"},{"Id":"414916336","IsPullRequest":true,"CreatedAt":"2019-02-27T02:35:50","Actor":"jkotas","Number":"22871","RawContent":null,"Title":"Preserve Marshal.GetLastWin32Error in SafeHandle.DangerousRelease","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22871","RelatedDescription":"Open PR \"Preserve Marshal.GetLastWin32Error in SafeHandle.DangerousRelease\" (#22871)"},{"Id":"414911062","IsPullRequest":true,"CreatedAt":"2019-02-27T02:11:45","Actor":"jorive","Number":"22870","RawContent":null,"Title":"[Test fix] Test failure: tracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_/_eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd","State":"open","Body":"- Fixes #19302\r\nFor more information: https://github.com/dotnet/coreclr/issues/19302#issuecomment-460344470","Url":"https://github.com/dotnet/coreclr/pull/22870","RelatedDescription":"Open PR \"[Test fix] Test failure: tracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_/_eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd\" (#22870)"},{"Id":"414904243","IsPullRequest":false,"CreatedAt":"2019-02-27T01:42:44","Actor":"cshung","Number":"22868","RawContent":null,"Title":"_ASSERTE ((requester & TAR_Thread) == TAR_Thread);","State":"open","Body":"In a certain debugging scenario, we have this call stack and causing the process to crash.\r\n```\r\nAssert failure(PID 50716 [0x0000c61c], Thread: 51816 [0xca68]): (requester & TAR_Thread) == TAR_Thread\r\n\r\nCORECLR! Thread::MarkThreadForAbort + 0x16A (0x00007fff`b641443a)\r\nCORECLR! Thread::UserAbort + 0x568 (0x00007fff`b6420318)\r\nCORECLR! Debugger::FuncEvalAbort + 0x2CA (0x00007fff`b701988a)\r\nCORECLR! Debugger::HandleIPCEvent + 0x222F (0x00007fff`b70253af)\r\nCORECLR! `HandleIPCEventWrapper'::`3'::__Body::Run + 0x58 (0x00007fff`b707f8b8)\r\nCORECLR! HandleIPCEventWrapper + 0x58 (0x00007fff`b707d6a8)\r\nCORECLR! DebuggerRCThread::HandleRSEA + 0x40B (0x00007fff`b707db1b)\r\nCORECLR! DebuggerRCThread::MainLoop + 0x877 (0x00007fff`b707ee67)\r\nCORECLR! DebuggerRCThread::ThreadProc + 0x7BC (0x00007fff`b70819ec)\r\nCORECLR! DebuggerRCThread::ThreadProcStatic + 0x56 (0x00007fff`b7081ae6)\r\n    File: c:\\repro\\coreclr\\src\\vm\\threadsuspend.cpp Line: 2245\r\n    Image: C:\\Repro\\blah\\runtime\\CoreRun.exe\r\n```\r\n\r\nWith the stack trace, it is fairly obvious why this assert trips, we are passing `TAR_FuncEval` from [Debugger::FuncEvalAbort()](https://github.com/dotnet/coreclr/blob/6b088eea28220094f2d0023165d30b5e676c20ef/src/debug/ee/debugger.cpp#L15503) to [Thread::UserAbort()](https://github.com/dotnet/coreclr/blob/ea5971a6fe1672f0334c9530d68e8621a9877128/src/vm/threadsuspend.cpp#L1284) to [Thread::MarkThreadForAbort()](https://github.com/dotnet/coreclr/blob/ea5971a6fe1672f0334c9530d68e8621a9877128/src/vm/threadsuspend.cpp#L2236\r\n). As is, the code will fail, always.\r\n\r\nI believe it is caused by https://github.com/dotnet/coreclr/pull/22185\r\n\r\nJudging from the pull request, it appears that the removal of the `TAR_StackOverflow` side of the assertion expression is causing the issue, Before the change, it appears to me the `TAR_StackOverflow` side of the boolean expression is always true (since no code is specify that as the ThreadAbortRequester), so the assertion would never trip, but with the removal, the assertion is now too strict.\r\n\r\nI suggest we can simply removal the assertion. The debugger scenario is fine with it.","Url":"https://github.com/dotnet/coreclr/issues/22868","RelatedDescription":"Open issue \"_ASSERTE ((requester & TAR_Thread) == TAR_Thread);\" (#22868)"},{"Id":"414858546","IsPullRequest":true,"CreatedAt":"2019-02-27T00:58:37","Actor":"sandreenko","Number":"22865","RawContent":null,"Title":"Fix `optVNConstantPropOnJTrue`.","State":"closed","Body":"It should use the same VN that `optVNConstantPropOnTree` uses. That was changed in #20033 but this method slipped through.\r\n\r\n`optVNConstantPropOnJTrue` stopped working properly after #21386.\r\n\r\nFound it when worked at #18291.\r\n\r\nWindows x64 Checked fx pmi diffs:\r\n```\r\nTotal bytes of diff: -70 (0.00% of base)\r\n    diff is an improvement.\r\nTop file improvements by size (bytes):\r\n         -49 : Microsoft.CodeAnalysis.dasm (0.00% of base)\r\n         -12 : Microsoft.Diagnostics.Tracing.TraceEvent.dasm (0.00% of base)\r\n          -9 : Microsoft.DotNet.Cli.Utils.dasm (-0.01% of base)\r\n3 total files with size differences (3 improved, 0 regressed), 126 unchanged.\r\nTop method improvements by size (bytes):\r\n         -49 (-24.75% of base) : Microsoft.CodeAnalysis.dasm - Roslyn.Utilities.ArrayExtensions:Append(ref,struct):ref\r\n         -12 (-14.29% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - Microsoft.Diagnostics.Symbols.SourceFile:ArrayEquals(ref,ref):bool\r\n          -9 (-2.46% of base) : Microsoft.DotNet.Cli.Utils.dasm - Microsoft.DotNet.Cli.Utils.BlockingMemoryStream:Read(ref,int,int):int:this\r\nTop method improvements by size (percentage):\r\n         -49 (-24.75% of base) : Microsoft.CodeAnalysis.dasm - Roslyn.Utilities.ArrayExtensions:Append(ref,struct):ref\r\n         -12 (-14.29% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - Microsoft.Diagnostics.Symbols.SourceFile:ArrayEquals(ref,ref):bool\r\n          -9 (-2.46% of base) : Microsoft.DotNet.Cli.Utils.dasm - Microsoft.DotNet.Cli.Utils.BlockingMemoryStream:Read(ref,int,int):int:this\r\n3 total methods with size differences (3 improved, 0 regressed), 225349 unchanged.\r\n1 files had text diffs but not size diffs.\r\nSystem.Private.CoreLib.dasm had 1140 diffs\r\n```\r\n\r\ncc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/22865","RelatedDescription":"Closed or merged PR \"Fix `optVNConstantPropOnJTrue`.\" (#22865)"},{"Id":"414886182","IsPullRequest":true,"CreatedAt":"2019-02-27T00:28:28","Actor":"AndyAyersMS","Number":"22867","RawContent":null,"Title":"JIT: allow slightly more general promotion of structs with struct fields","State":"open","Body":"For a while now the jit has been able to promote an outer struct A with an\r\ninner struct field B that itself has a single non-struct field C, provided\r\nthat C occupies all of B and that C and B are pointer-sized.\r\n\r\nFor example, this comes up when supporting promotion of `Span<T>`, as a span\r\ncontains a `ByReference<T>` field that itself contains a pointer-sized field.\r\n\r\nThis change relaxes the constraints slightly, allowing B and C to be less than\r\npointer sized, provided C still occupies all of B, and B is suitably aligned\r\nwithin A.\r\n\r\nDoing so allows promotion of the new `Range` type, which contains two `Index`\r\nfields that each wrap an `int`. This improves performance for uses of `Range`\r\nfor simple examples like those in #22079.","Url":"https://github.com/dotnet/coreclr/pull/22867","RelatedDescription":"Open PR \"JIT: allow slightly more general promotion of structs with struct fields\" (#22867)"},{"Id":"414884297","IsPullRequest":true,"CreatedAt":"2019-02-27T00:21:15","Actor":"Maoni0","Number":"22866","RawContent":null,"Title":"added a lightweight GC profiling option","State":"open","Body":"added a profiling event mask in the high 32-bit, COR_PRF_HIGH_BASIC_GC, for basic GC monitoring. it can be set via `ICorProfilerInfo5::SetEventMask2`. all this gives you is \r\n\r\n+ GC start callback\r\n+ GC end callback\r\n+ update generational bounds\r\n\r\nnote that one different behavior between this and the existing COR_PRF_MONITOR_GC is, aside from the obvious that it doesn't give you any info beyond the above, is that the GC end callback + update generational bounds are enabled for *all* GCs, not just non concurrent GCs. I kept the behavior the same for COR_PRF_MONITOR_GC because I don't want to risk breaking existing profiling tools that do not anticipate these for concurrent GCs.\r\n\r\nI marked it as [WIP] because I have NOT tested it! \r\n\r\n@sywhang @noahfalk \r\n\r\n@mjsabby I thought there was an issue that you opened for this but I can't find it...do you know what happened to it?\r\n","Url":"https://github.com/dotnet/coreclr/pull/22866","RelatedDescription":"Open PR \"added a lightweight GC profiling option\" (#22866)"},{"Id":"414712388","IsPullRequest":true,"CreatedAt":"2019-02-26T22:16:55","Actor":"ericstj","Number":"22856","RawContent":null,"Title":"Fix _IlasmDir definition","State":"closed","Body":"When rebasing to accommodate for some changes that Viktor made last month I broke this pretty badly but didn't retest.  This fixes that.\r\n\r\nThis will still require a small change on the corefx side to react to it, which I will make upon ingesting the fix.","Url":"https://github.com/dotnet/coreclr/pull/22856","RelatedDescription":"Closed or merged PR \"Fix _IlasmDir definition\" (#22856)"},{"Id":"414819296","IsPullRequest":false,"CreatedAt":"2019-02-26T21:07:24","Actor":"pakrym","Number":"22863","RawContent":null,"Title":"Automatically stackalloc array allocations if they are assigned to a Span","State":"open","Body":"Considering that we know that allocated memory would not leave the stack JIT could optimize the following cases:\r\n\r\n1. When using a const as array size allocation can be turned into a stackalloc if it meets some predefined threshold for safe stackallocs.\r\n\r\n``` C#\r\nSpan<byte> bytes = new byte[20];\r\n// ->\r\nSpan<byte> bytes = stackalloc byte[20];\r\n```\r\n\r\n``` C#\r\nSpan<byte> bytes = new byte[2000];\r\n// -> is not transformed because doesn't meet the threshold\r\nSpan<byte> bytes = new byte[2000];\r\n```\r\n\r\n2. For dynamic array sizes condition might be transformed into an intrinsic:\r\n\r\n``` C#\r\nSpan<byte> bytes = new byte[lenght];\r\n// ->\r\nSpan<byte> bytes = maybe_alloc_stack_bytes(lenght);\r\n// where maybe_alloc_stack_bytes would be equivalent to lenght <= MAX_STACKALOC ? stackalloc byte[lenght]: new byte[lenght]\r\n```\r\n\r\n@jkotas @AndyAyersMS @davidfowl @KrzysztofCwalina ","Url":"https://github.com/dotnet/coreclr/issues/22863","RelatedDescription":"Open issue \"Automatically stackalloc array allocations if they are assigned to a Span\" (#22863)"},{"Id":"414788449","IsPullRequest":false,"CreatedAt":"2019-02-26T19:50:08","Actor":"ericstj","Number":"22862","RawContent":null,"Title":"ILAsm should support full signing","State":"open","Body":"Roslyn can do full-signing on CoreCLR, ILAsm should do the same.  https://github.com/dotnet/roslyn/issues/8210\r\n\r\n/cc @jkotas ","Url":"https://github.com/dotnet/coreclr/issues/22862","RelatedDescription":"Open issue \"ILAsm should support full signing\" (#22862)"},{"Id":"414785896","IsPullRequest":true,"CreatedAt":"2019-02-26T19:44:18","Actor":"vkvenkat","Number":"22861","RawContent":null,"Title":"Fix Linux FP exception when NUMA nodes greater than 1","State":"open","Body":"The GC heap count is currently being set to zero when the available NUMA nodes are greater than 1 on Linux, leading to a Divide by Zero error. Reverting the GC heap count calculation logic to the version before PR #[22180](https://github.com/dotnet/coreclr/pull/22180).\r\n\r\nFixed the process mask on Linux for GC threads to get affinitized to the right core & for GCHeapAffinitizeMask to control the number of heaps and processor affinities when GCCpuGroup is not set.\r\n\r\nAlso, [GCToOSInterface::CanEnableGCCPUGroups](https://github.com/dotnet/coreclr/blob/master/src/vm/gcenv.os.cpp#L757) always returned FALSE on Linux when NUMA nodes > 1. Some GetProcAddress calls in util.cpp were failing, which made [CPUGroupInfo::InitCPUGroupInfoAPI](https://github.com/dotnet/coreclr/blob/master/src/utilcode/util.cpp#L861) & [NumaNodeInfo::InitNumaNodeInfoAPI](https://github.com/dotnet/coreclr/blob/master/src/utilcode/util.cpp#L763) to return FALSE. Fixed these by changing the GetProcAddress calls to direct API calls instead as all of them are present at least from Windows 7 on.\r\n\r\nPTAL @Maoni0 @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/22861","RelatedDescription":"Open PR \"Fix Linux FP exception when NUMA nodes greater than 1\" (#22861)"},{"Id":"414770224","IsPullRequest":true,"CreatedAt":"2019-02-26T19:07:23","Actor":"RussKeldorph","Number":"22860","RawContent":null,"Title":"Remove BuildTestsAgainstPackages logic","State":"open","Body":"No longer necessary without PipeBuild logic","Url":"https://github.com/dotnet/coreclr/pull/22860","RelatedDescription":"Open PR \"Remove BuildTestsAgainstPackages logic\" (#22860)"},{"Id":"414731831","IsPullRequest":true,"CreatedAt":"2019-02-26T18:42:03","Actor":"grant-d","Number":"22859","RawContent":null,"Title":"[WIP] Trim methods for Memory<char> and Span<char>","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/31011\r\nSee related: https://github.com/dotnet/coreclr/pull/22798\r\n\r\nAdds the following methods:\r\n```\r\nTrim(Span<Char>)\r\nTrimEnd(Span<Char>)\r\nTrimStart(Span<Char>)\r\n\r\nTrim(ReadOnlyMemory<Char>)\r\nTrimEnd(ReadOnlyMemory<Char>)\r\nTrimStart(ReadOnlyMemory<Char>)\r\n\r\nTrim(Memory<Char>)\r\nTrimEnd(Memory<Char>)\r\nTrimStart(Memory<Char>)\r\n```","Url":"https://github.com/dotnet/coreclr/pull/22859","RelatedDescription":"Closed or merged PR \"[WIP] Trim methods for Memory<char> and Span<char>\" (#22859)"},{"Id":"414730350","IsPullRequest":false,"CreatedAt":"2019-02-26T17:30:19","Actor":"benaadams","Number":"22858","RawContent":null,"Title":"Add API IndexNotOf","State":"closed","Body":"```csharp\r\npublic static partial class MemoryExtensions\r\n{\r\n    int IndexNotOf(this Span<T> span, T value);\r\n    int IndexNotOfAny(this Span<T> span, T value0, T value1);\r\n    int IndexNotOfAny(this Span<T> span, T value0, T value1, T value2);\r\n    int IndexNotOfAny(this Span<T> span, ReadOnlySpan<T> values);\r\n    \r\n    int LastIndexNotOf(this ReadOnlySpan<T> span, T value);\r\n    int LastIndexNotOfAny(this ReadOnlySpan<T> span, T value0, T value1);\r\n    int LastIndexNotOfAny(this ReadOnlySpan<T> span, T value0, T value1, T value2);\r\n    int LastIndexNotOfAny(this ReadOnlySpan<T> span, ReadOnlySpan<T> values);\r\n}\r\n```\r\nExample usage:\r\n```csharp\r\nvar firstNonSpace = span.IndexNotOf(' ');\r\nif (firstNonSpace > 0)\r\n{\r\n    return span.Slice(firstNonSpace);\r\n}\r\n\r\nreturn span;\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22858","RelatedDescription":"Closed issue \"Add API IndexNotOf\" (#22858)"},{"Id":"414717135","IsPullRequest":true,"CreatedAt":"2019-02-26T17:00:00","Actor":"jkoritzinsky","Number":"22857","RawContent":null,"Title":"Add coreclr blob feed to dependencies.props","State":"open","Body":"This should fix the failing maestro PR.","Url":"https://github.com/dotnet/coreclr/pull/22857","RelatedDescription":"Open PR \"Add coreclr blob feed to dependencies.props\" (#22857)"},{"Id":"414626287","IsPullRequest":false,"CreatedAt":"2019-02-26T14:02:18","Actor":"MichalStrehovsky","Number":"22855","RawContent":null,"Title":"Assert slotNumber < GetNumVtableSlots() when running crossgen with IBC","State":"open","Body":"Can be hit with Linux crossgen on System.Collections.Immutable with IBC data generated in the optimization repo.\r\n\r\n```\r\n#0  DBG_DebugBreak () at /home/michals/git/coreclr/src/pal/src/arch/amd64/debugbreak.S:10\r\n#1  0x000000000087d8a1 in DebugBreak () at /home/michals/git/coreclr/src/pal/src/debug/debug.cpp:405\r\n#2  0x00000000007f86ea in CHECK::Setup (this=0x7ffffffec230, message=0xa26e77 \"\",\r\n    condition=0x9878f7 \"slotNumber < GetNumVtableSlots()\",\r\n    file=0x987918 \"/home/michals/git/coreclr/src/vm/crossgen/../methodtable.h\", line=1396)\r\n    at /home/michals/git/coreclr/src/utilcode/check.cpp:210\r\n#3  0x0000000000435068 in MethodTable::GetSlot (this=0x7fffff4a79c8, slotNumber=65535)\r\n    at /home/michals/git/coreclr/src/vm/crossgen/../methodtable.h:1396\r\n#4  0x0000000000452948 in MethodTable::GetRestoredSlot (this=0x7ffffb2ddb98, slotNumber=65535)\r\n    at /home/michals/git/coreclr/src/vm/methodtable.cpp:9619\r\n#5  0x000000000043553f in MethodTable::GetMethodDescForSlot (this=0x7ffffb2ddb98, slot=65535)\r\n    at /home/michals/git/coreclr/src/vm/crossgen/../methodtable.inl:605\r\n#6  0x000000000055d9ac in Module::LoadIBCMethodHelper (this=0x7fffff659110, image=0xe697c0,\r\n    pBlobSigEntry=0x7fffff58be06) at /home/michals/git/coreclr/src/vm/ceeload.cpp:7445\r\n#7  0x000000000055ef58 in Module::ExpandAll (this=0x7fffff659110, image=0xe697c0)\r\n    at /home/michals/git/coreclr/src/vm/ceeload.cpp:7881\r\n#8  0x00000000005c7a17 in CEEPreloader::Preload (this=0xe65f40, profileData=0xe693b0)\r\n    at /home/michals/git/coreclr/src/vm/compile.cpp:4593\r\n#9  0x00000000005c78dc in CEECompileInfo::PreloadModule (this=0xdf4420, module=0x7fffff659110, pData=0xe64c80,\r\n    profileData=0xe693b0) at /home/michals/git/coreclr/src/vm/compile.cpp:4532\r\n#10 0x000000000077de20 in ZapImage::Preload (this=0xe64b80) at /home/michals/git/coreclr/src/zap/zapimage.cpp:1408\r\n#11 0x0000000000775f9a in Zapper::CompileModule (this=0xdf4f30, hModule=0x7fffff659110, pAssemblyEmit=0xe0f398)\r\n    at /home/michals/git/coreclr/src/zap/zapper.cpp:1576\r\n```\r\n\r\nFrom @briansull:\r\n\r\nThis looks like it is due to having ENCODE_METHOD_SIG_SlotInsteadOfToken set for some generic methods.\r\n\r\nI don’t believe that we should be setting or using  this flag.\r\n\r\nIt looks like some ReadyToRun changes may have has a side effect of setting this flag.\r\n\r\nYou can either ignore this flag when running a cross targeting crossgen \r\n\r\n\r\nMake changes here:\r\nvm\\eeload.cpp:\r\n\r\n```c++\r\n        BOOL fMethodUsesSlotEncoding = ((methodFlags & ENCODE_METHOD_SIG_SlotInsteadOfToken) == ENCODE_METHOD_SIG_SlotInsteadOfToken);\r\n\r\n        if ( fMethodUsesSlotEncoding )\r\n        {\r\n            // get the method desc using slot number\r\n            DWORD slot;\r\n            IfFailThrow(p.GetData(&slot));\r\n\r\n            pMethod = pOwnerMT->GetMethodDescForSlot(slot);\r\n        }\r\n```\r\n\r\nOr fix the place where it getting set:\r\n\r\nMake changes here:\r\nvm\\zapsig.cpp\r\n\r\n```c++\r\n#ifdef FEATURE_READYTORUN_COMPILER\r\n    if (IsReadyToRunCompilation())\r\n    {\r\n        if (pConstrainedResolvedToken != NULL)\r\n        {\r\n            methodFlags |= ENCODE_METHOD_SIG_Constrained;\r\n        }\r\n\r\n        Module * pReferencingModule = (Module *)pResolvedToken->tokenScope;\r\n\r\n        if (!pReferencingModule->IsInCurrentVersionBubble())\r\n        {\r\n            // FUTURE: Encoding of new cross-module references for ReadyToRun\r\n            // This warning is hit for recursive cross-module inlining. It is commented out to avoid noise.\r\n            // GetSvcLogger()->Printf(W(\"ReadyToRun: Method reference outside of current version bubble cannot be encoded\\n\"));\r\n            ThrowHR(E_FAIL);\r\n        }\r\n        _ASSERTE(pReferencingModule == GetAppDomain()->ToCompilationDomain()->GetTargetModule());\r\n\r\n        methodToken = pResolvedToken->token;\r\n\r\n        if (TypeFromToken(methodToken) == mdtMethodSpec)\r\n        {\r\n            IfFailThrow(pReferencingModule->GetMDImport()->GetMethodSpecProps(methodToken, &methodToken, NULL, NULL));\r\n        }\r\n\r\n        switch (TypeFromToken(methodToken))\r\n        {\r\n        case mdtMethodDef:\r\n            _ASSERTE(pResolvedToken->pTypeSpec == NULL);\r\n            if (!ownerType.HasInstantiation() || ownerType.IsTypicalTypeDefinition())\r\n            {\r\n                methodFlags &= ~ENCODE_METHOD_SIG_OwnerType;\r\n            }\r\n            break;\r\n\r\n        case mdtMemberRef:\r\n            methodFlags |= ENCODE_METHOD_SIG_MemberRefToken;\r\n\r\n            if (pResolvedToken->pTypeSpec == NULL)\r\n            {\r\n                methodFlags &= ~ENCODE_METHOD_SIG_OwnerType;\r\n            }\r\n            else\r\n                if (!(methodFlags & ENCODE_METHOD_SIG_InstantiatingStub))\r\n                {\r\n                    if (SigPointer(pResolvedToken->pTypeSpec, pResolvedToken->cbTypeSpec).IsPolyType(NULL) == hasNoVars)\r\n                        methodFlags &= ~ENCODE_METHOD_SIG_OwnerType;\r\n                }\r\n            break;\r\n\r\n        default:\r\n            _ASSERTE(!\"Unexpected method token type!\");\r\n            ThrowHR(E_NOTIMPL);\r\n        }\r\n    }\r\n    else\r\n#endif\r\n    if (IsNilToken(methodToken))\r\n    {\r\n        methodFlags |= ENCODE_METHOD_SIG_SlotInsteadOfToken;\r\n    }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22855","RelatedDescription":"Open issue \"Assert slotNumber < GetNumVtableSlots() when running crossgen with IBC\" (#22855)"},{"Id":"414624315","IsPullRequest":true,"CreatedAt":"2019-02-26T13:57:59","Actor":"dotnet-maestro[bot]","Number":"22854","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27425-7\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22854","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#22854)"},{"Id":"414600360","IsPullRequest":true,"CreatedAt":"2019-02-26T13:02:45","Actor":"marek-safar","Number":"22853","RawContent":null,"Title":"Remove unused code from EventSource","State":"open","Body":"FallbackActivityId is theoretically references in CoreFX but it's under never defined `FEATURE_ACTIVITYSAMPLING` and the implementation should live in CoreFX part anyway","Url":"https://github.com/dotnet/coreclr/pull/22853","RelatedDescription":"Open PR \"Remove unused code from EventSource\" (#22853)"},{"Id":"414549190","IsPullRequest":false,"CreatedAt":"2019-02-26T10:52:42","Actor":"k15tfu","Number":"22851","RawContent":null,"Title":"Freeing of rgILMapEntries in ProfToEEInterfaceImpl::SetILInstrumentedCodeMap()","State":"open","Body":"Hi guys!\r\n\r\nI'm not sure who is right because there are almost no any information about releasing of `rgILMapEntries` argument in `ICorProfilerInfo::SetILInstrumentedCodeMap()`, but probably we forgot to free that memory.\r\n\r\nThis page [ https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms232500(v%3Dvs.100) ] says nothing about transferring ownership for `rgILMapEntries`, but in this book [ http://blog.monstuff.com/archives/images/Profiling.pdf ] it says `The code profiler should not attempt to free this memory.`\r\n\r\nMoreover, OpenCover does release this memory on .NET 4: https://github.com/OpenCover/opencover/blob/d94d935bfe77a48395096e17ab430a142b3f628b/main/OpenCover.Profiler/CodeCoverage.cpp#L389\r\n\r\nIt's not clear what it is the memory should be: how to allocate it, and when to release. Could someone shed more light on this?\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/22851","RelatedDescription":"Open issue \"Freeing of rgILMapEntries in ProfToEEInterfaceImpl::SetILInstrumentedCodeMap()\" (#22851)"},{"Id":"414464579","IsPullRequest":false,"CreatedAt":"2019-02-26T07:14:52","Actor":"fiigii","Number":"22850","RawContent":null,"Title":"HW intrinsic: Assertion failed 'src->gtObj.gtClass == structHnd' on OSX","State":"open","Body":"Test case:\r\n```csharp\r\n        static unsafe bool test128(byte v)\r\n        {\r\n            return Avx2.BroadcastScalarToVector128(&v).Equals(Vector128.Create(v));\r\n        }\r\n```\r\nThat triggers the assert\r\n```\r\nAssert failure(PID 36783 [0x00008faf], Thread: 1960296 [0x1de968]): Assertion failed 'src->gtObj.gtClass == structHnd' in 'System.Runtime.Intrinsics.Vector128`1[Byte][System.Byte]:Equals(struct):bool:this' (IL size 281)\r\n\r\n    File: /Users/fiigii/workspace/coreclr/src/jit/importer.cpp Line: 1314\r\n    Image: /usr/local/share/dotnet/dotnet\r\n```\r\n\r\nWe saw this failure in https://github.com/dotnet/coreclr/pull/22705, maybe related to `AsXXX`.\r\n\r\ncc @tannergooding @CarolEidt ","Url":"https://github.com/dotnet/coreclr/issues/22850","RelatedDescription":"Open issue \"HW intrinsic: Assertion failed 'src->gtObj.gtClass == structHnd' on OSX\" (#22850)"},{"Id":"414456050","IsPullRequest":false,"CreatedAt":"2019-02-26T06:43:33","Actor":"dotnet-mc-bot","Number":"22849","RawContent":null,"Title":"Test failure: JIT_Methodical._VT_etc__dbgknight__dbgknight_/_VT_etc__dbgknight__dbgknight_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `JIT_Methodical._VT_etc__dbgknight__dbgknight_/_VT_etc__dbgknight__dbgknight_cmd` has failed.\n\nFailure Message:\n```\n\n\nReturn code:      -1073741819\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\9bb06bb0-0b46-4f72-b406-3af16b78fe75\\\\Work\\\\195c5757-75cf-4de5-8ec9-544c2459791e\\\\Exec\\\\Reports\\\\JIT.Methodical\\\\VT\\\\etc\\\\_dbgknight\\\\_dbgknight.output.txt\nRaw output:\nBEGIN EXECUTION\\r\nTest Harness Exitcode is : -1073741819\\r\n\nTo run the test:\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\9bb06bb0-0b46-4f72-b406-3af16b78fe75\\\\Payload\n> C:\\\\dotnetbuild\\\\work\\\\9bb06bb0-0b46-4f72-b406-3af16b78fe75\\\\Work\\\\195c5757-75cf-4de5-8ec9-544c2459791e\\\\Exec\\\\VT\\\\etc\\\\_dbgknight\\\\_dbgknight.cmd\n\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at JIT_Methodical._VT_etc__dbgknight__dbgknight_._VT_etc__dbgknight__dbgknight_cmd() in F:\\vsagent\\7\\s\\bin\\tests\\Windows_NT.arm.Release\\TestWrappers\\JIT.Methodical\\JIT.Methodical.XUnitWrapper.cs:line 137309\n```\n\nBuild : 3.0 - 20190225.73 (Ready-To-Run Tests)\nFailing configurations:\n- Windows.10.Arm64\n  - arm\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190225.73/workItem/JIT.Methodical/analysis/xunit/JIT_Methodical._VT_etc__dbgknight__dbgknight_~2F_VT_etc__dbgknight__dbgknight_cmd","Url":"https://github.com/dotnet/coreclr/issues/22849","RelatedDescription":"Open issue \"Test failure: JIT_Methodical._VT_etc__dbgknight__dbgknight_/_VT_etc__dbgknight__dbgknight_cmd\" (#22849)"},{"Id":"414436469","IsPullRequest":true,"CreatedAt":"2019-02-26T05:22:34","Actor":"ArtBlnd","Number":"22848","RawContent":null,"Title":"[WIP] Remove extra bound checks for explicit range checks","State":"open","Body":"Currently, removing bound checks for explicit array range check on some major patterns.\r\nsuch as\r\n```\r\nif (array.Length > 0 && array[0] expr)\r\n```\r\n\r\n\r\nRelated to https://github.com/dotnet/coreclr/issues/19620","Url":"https://github.com/dotnet/coreclr/pull/22848","RelatedDescription":"Open PR \"[WIP] Remove extra bound checks for explicit range checks\" (#22848)"},{"Id":"414400119","IsPullRequest":false,"CreatedAt":"2019-02-26T02:27:25","Actor":"AaronRobinsonMSFT","Number":"22847","RawContent":null,"Title":"Remove remnants of native activation for managed COM servers","State":"open","Body":"Cruft:\r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/appdomain.hpp#L2453\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.CoreCLR.cs#L747-L751\r\n\r\nWill have to update RCW activation as well.\r\n\r\nRemove entirely:\r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/classfactory.cpp","Url":"https://github.com/dotnet/coreclr/issues/22847","RelatedDescription":"Open issue \"Remove remnants of native activation for managed COM servers\" (#22847)"},{"Id":"414399064","IsPullRequest":true,"CreatedAt":"2019-02-26T02:23:06","Actor":"AaronRobinsonMSFT","Number":"22846","RawContent":null,"Title":"Support IClassFactory2 - LicenseManager use in COM activation","State":"open","Body":"Properly implement IClassFactory2 for licensing. Adds basic tests for IClassFactory2 activation.\r\n\r\nThis PR requires work in CoreFX as well https://github.com/dotnet/corefx/pull/35577.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/20563\r\n\r\ncc @jeffschwMSFT ","Url":"https://github.com/dotnet/coreclr/pull/22846","RelatedDescription":"Open PR \"Support IClassFactory2 - LicenseManager use in COM activation\" (#22846)"},{"Id":"414395399","IsPullRequest":false,"CreatedAt":"2019-02-26T02:07:49","Actor":"iskiselev","Number":"22845","RawContent":null,"Title":"CoreCLR version in profiler API","State":"open","Body":"Profiler API already exposed method that expect to be used to resolve version, ICorProfilerInfo3::GetRuntimeInformation.\r\nUnfortunately there is no documentation that will map results from it to marketing CoreCLR releases.\r\nPer my tests it returns on Windows:\r\n4.0.22220 for CoreCLR 2.0.9\r\n4.0.30319 for  CoreCLR 2.1.8, 2.2.0\r\n\r\nShould it return value unique for each CoreCLR release? Should there be another API to resolve coreclr version (if we are talking about profiler, it will be some version associated with coreclr.dll)? Is there any existing way to resolve this version cross-platform? coreclr.dll on windows has File Version and Product version, are there something similar on other OS?\r\n\r\nWill #22844 fix version resolution in profiler API?\r\n\r\ncc: @noahfalk","Url":"https://github.com/dotnet/coreclr/issues/22845","RelatedDescription":"Open issue \"CoreCLR version in profiler API\" (#22845)"},{"Id":"414359273","IsPullRequest":false,"CreatedAt":"2019-02-25T23:36:44","Actor":"richlander","Number":"22844","RawContent":null,"Title":"[Breaking Change] Improving .NET Core Version APIs","State":"open","Body":"# [Breaking Change] Improving .NET Core Version APIs\r\n\r\nWe are improving the .NET Core version APIs in .NET Core 3.0. The particular changes we made are technically breaking. The changes are currently only in the master branch, so will be part of .NET Core 3.0 Preview 4, modulo feedback.\r\n\r\nAlso posted at [dotnet/corefx #35573](https://github.com/dotnet/corefx/issues/35573)\r\n\r\nRelated:\r\n\r\n* [Improve .NET Core version APIs dotnet/corefx #35361](https://github.com/dotnet/corefx/issues/35361)\r\n* [Make Environment.Version return the actual runtime version dotnet/corefx #31099](https://github.com/dotnet/corefx/issues/31099)\r\n* [Use product version in RuntimeInformation.FrameworkDescription dotnet/corefx #35516](https://github.com/dotnet/corefx/pull/35516)\r\n* [Change Environment.Version to return product version dotnet/coreclr #22664](https://github.com/dotnet/coreclr/pull/22664)\r\n\r\n## Goal\r\n\r\nThe goal of the improvement is to enable access to accurate and precise product version information, like is displayed in the following example:\r\n\r\n```console\r\nC:\\testapps\\versioninfo>dotnet run\r\n.NET Core version:\r\nEnvironment.Version: 3.0.0\r\nRuntimeInformation.FrameworkDescription: .NET Core 3.0.0-preview4.19113.15\r\nCoreFX Build: 3.0.0-preview4.19113.15\r\nCoreFX Hash: add4cacbfb7f7d3f5f07630d10b24e38da4ad027\r\n```\r\n\r\nCode: https://gist.github.com/richlander/f5849c6967c66d699301f75101906f99\r\n\r\n## Existing Behavior\r\n\r\nThe product (as of .NET Core 3.0 Preview 3) does not provide the version information displayed above, but seemingly arbitrary values, as displayed in the following example (using the same code):\r\n\r\nC:\\testapps\\versioninfo>dotnet run\r\n.NET Core version:\r\nEnvironment.Version: 4.0.30319.42000\r\nRuntimeInformation.FrameworkDescription: .NET Core 4.6.27415.71\r\nCoreFX Build: 4.7.0-preview4.19113.15\r\nCoreFX Hash: add4cacbfb7f7d3f5f07630d10b24e38da4ad027\r\n\r\nNote: These version strings are based on the .NET Framework heritage of the product.\r\n\r\n## Breaking Change\r\n\r\nThe change is technically breaking because it resets the versioning scheme of the product as reported by these APIs. Some code somewhere will break, however, we do not expect that to be pervasive. Unfortunately, it will be hard to write code that works with both the new behavior and old behavior given how close the values are.\r\n\r\nWe should never have shipped .NET Core 1.0 with this behavior to avoid this problem now. We decided that .NET Core 3.0 is likely our last chance to fix these APIs, so decided to take the opportunity now.\r\n\r\n## Feedback\r\n\r\nWe would love your feedback.","Url":"https://github.com/dotnet/coreclr/issues/22844","RelatedDescription":"Open issue \"[Breaking Change] Improving .NET Core Version APIs\" (#22844)"},{"Id":"414355638","IsPullRequest":true,"CreatedAt":"2019-02-25T23:23:19","Actor":"jkoritzinsky","Number":"22843","RawContent":null,"Title":"Turn on IBC and enforce PGO in official and release builds.","State":"open","Body":"- Turn on the `-ibcoptimize` flag on official builds.\r\n- Add the `-enforcepgo` flag to Windows non-arm release builds (same as Jenkins implementation).\r\n\r\nAdditionally, fix the pgocheck script to work on both python2 and python3 for local builds with `-enforcepgo` turned on and python3 installed.","Url":"https://github.com/dotnet/coreclr/pull/22843","RelatedDescription":"Open PR \"Turn on IBC and enforce PGO in official and release builds.\" (#22843)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"414904831","IsPullRequest":true,"CreatedAt":"2019-02-27T02:28:15","Actor":"peterhuene","Number":"10888","RawContent":null,"Title":"Parameterize latest patch versions.","State":"closed","Body":"This commit parameterizes the latest patch versions in the build.\r\n","Url":"https://github.com/dotnet/cli/pull/10888","RelatedDescription":"Closed or merged PR \"Parameterize latest patch versions.\" (#10888)"},{"Id":"414879189","IsPullRequest":true,"CreatedAt":"2019-02-27T00:01:19","Actor":"dotnet-bot","Number":"10887","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10887","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10887)"},{"Id":"414879179","IsPullRequest":true,"CreatedAt":"2019-02-27T00:01:17","Actor":"dotnet-bot","Number":"10886","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10886","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10886)"},{"Id":"414879169","IsPullRequest":true,"CreatedAt":"2019-02-27T00:01:14","Actor":"dotnet-bot","Number":"10885","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10885","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10885)"},{"Id":"414864905","IsPullRequest":true,"CreatedAt":"2019-02-26T23:43:36","Actor":"peterhuene","Number":"10884","RawContent":null,"Title":"Skip the self-contained roll-forward version tests.","State":"closed","Body":"See #10879. Disabling these tests until we figure out a way to make them work\r\nfor servicing builds that will be bumping the versions without the unreleased,\r\nupcoming shared frameworks being available.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10884","RelatedDescription":"Closed or merged PR \"Skip the self-contained roll-forward version tests.\" (#10884)"},{"Id":"414700165","IsPullRequest":false,"CreatedAt":"2019-02-26T18:34:54","Actor":"rchande","Number":"10883","RawContent":null,"Title":"The version of microsoft.net.sdk used this project is insufficient to support references to libraries targeting .net standard 1.5 or higher","State":"closed","Body":"## Steps to reproduce\r\n(On Windows)\r\nClone https://github.com/OmniSharp/omnisharp-roslyn.git \r\nAt the root of the repro, run `build.cmd -target Quick`\r\nOpen the solution in VS 2017 15.9.8\r\n\r\nThis repo has a global json that targets 2.1.301, which I don't have on my machine. Because I don't have this particular SDK, I get confusing errors. If I change the global.json to use an SDK I do have, the errors go away. \r\n\r\n## Expected  behavior\r\nIntellisense, etc works\r\n\r\n## Actual behavior\r\nEvery project has an error \r\n```\r\nNETSDK1050\tThe version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher.  Please install version 2.0 or higher of the .NET Core SDK.\r\n```\r\n\r\nThis is really confusing because the projects in this solution target net461...\r\n\r\n## Environment data\r\n```\r\ndotnet --info\r\nA compatible installed dotnet SDK for global.json version: [2.1.301] from [C:\\omnisharp-roslyn\\global.json] was not found\r\nPlease install the [2.1.301] SDK or update [C:\\omnisharp-roslyn\\global.json] with an installed dotnet SDK:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010343 [C:\\Program Files\\dotnet\\sdk]\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27421-7\r\n  Commit:  80d779364c\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010343 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19121-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27421-7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27420-40 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10883","RelatedDescription":"Closed issue \"The version of microsoft.net.sdk used this project is insufficient to support references to libraries targeting .net standard 1.5 or higher\" (#10883)"},{"Id":"413552689","IsPullRequest":true,"CreatedAt":"2019-02-26T18:09:19","Actor":"peterhuene","Number":"10867","RawContent":null,"Title":"Add properties to control shared framework versions for servicing releases.","State":"closed","Body":"This PR adds properties to control the shared framework versions for the 2.1 and 1.x servicing releases.\r\n\r\nThis will be used when building the servicing releases to bump the versions to what is forthcoming.","Url":"https://github.com/dotnet/cli/pull/10867","RelatedDescription":"Closed or merged PR \"Add properties to control shared framework versions for servicing releases.\" (#10867)"},{"Id":"414676649","IsPullRequest":false,"CreatedAt":"2019-02-26T15:40:34","Actor":"scottsauber","Number":"10882","RawContent":null,"Title":"Uninstalling Preview 2 Does Not Clean Up After Itself","State":"open","Body":"## Steps to reproduce\r\nRunning Windows 10 and uninstalled Preview 2 (2.1.600-preview-009497) via Add/Remove Programs.  Rebooted and now when I run dotnet --info I get:\r\n\r\n```Found dotnet SDK, but did not find dotnet.dll at [C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009497\\dotnet.dll]```\r\n\r\nI had to delete the C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009497 folder to get the .NET CLI to work\r\n\r\n## Expected  behavior\r\nIt removes C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009497 for me\r\n\r\n## Actual behavior\r\nIt does not\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nFound dotnet SDK, but did not find dotnet.dll at [C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009497\\dotnet.dll]\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10882","RelatedDescription":"Open issue \"Uninstalling Preview 2 Does Not Clean Up After Itself\" (#10882)"},{"Id":"414645499","IsPullRequest":false,"CreatedAt":"2019-02-26T14:40:32","Actor":"ganeshran","Number":"10881","RawContent":null,"Title":"dotnet build not forwarding --using-lock-file switch to dotnet restore","State":"open","Body":"## Steps to reproduce\r\ndotnet build --use-lock-file\r\n\r\n## Expected  behavior\r\nThe project builds with implict restore and passes the --use-lock-file switch to dotnet restore.\r\n\r\n## Actual behavior\r\nError Message: \r\nMSBUILD : error MSB1001: Unknown switch.\r\nSwitch: --use-lock-file\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10881","RelatedDescription":"Open issue \"dotnet build not forwarding --using-lock-file switch to dotnet restore\" (#10881)"},{"Id":"414110202","IsPullRequest":true,"CreatedAt":"2019-02-26T14:11:43","Actor":"dotnet-maestro[bot]","Number":"10878","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19124.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19125.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10878","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#10878)"},{"Id":"414606907","IsPullRequest":true,"CreatedAt":"2019-02-26T13:18:35","Actor":"dotnet-maestro[bot]","Number":"10880","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19126.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10880","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10880)"},{"Id":"414370629","IsPullRequest":false,"CreatedAt":"2019-02-26T00:20:11","Actor":"peterhuene","Number":"10879","RawContent":null,"Title":"Re-enable latest runtime for self-contained publish tests.","State":"open","Body":"This issue is tracking the re-enabling of the tests in `test/EndToEnd/GivenSelfContainedAppsRollForward.cs`.\r\n\r\nThese are being disabled so that orchestrated servicing builds can bump these versions without having to order the builds so that they produce the unreleased shared frameworks for the previous versions and publish them to a place discoverable by the tests.\r\n\r\nWe need to figure out how to replicate these checks in an automated fashion.  Until then, we'll be increasing the priority of this test scenario with the test team.","Url":"https://github.com/dotnet/cli/issues/10879","RelatedDescription":"Open issue \"Re-enable latest runtime for self-contained publish tests.\" (#10879)"},{"Id":"413624894","IsPullRequest":true,"CreatedAt":"2019-02-25T16:47:03","Actor":"dotnet-bot","Number":"10870","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10870","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10870)"},{"Id":"413624882","IsPullRequest":true,"CreatedAt":"2019-02-25T16:45:45","Actor":"dotnet-bot","Number":"10869","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10869","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10869)"},{"Id":"413820347","IsPullRequest":true,"CreatedAt":"2019-02-25T13:46:08","Actor":"dotnet-maestro[bot]","Number":"10874","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19124.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19125.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10874","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10874)"},{"Id":"414080549","IsPullRequest":false,"CreatedAt":"2019-02-25T12:26:28","Actor":"loop-evgeny","Number":"10877","RawContent":null,"Title":"Creating a self-contained executable with dotnet publish -r ignores umask and marks libraries as executable (chmod +x)","State":"open","Body":"## Steps to reproduce\r\n\r\n```\r\numask 0022\r\ndotnet publish -r linux-x64 -o test-publish\r\n```\r\n\r\n## Expected  behavior\r\n1. The libraries copied to the publish output directories are not executable (don't have the +x mode set). Only executable files (e.g. createdump and the project executable) have +x set.\r\n2. File permissions follow the user's umask. E.g.\r\n\r\n-rwxr-xr-x  1 root    root       82152 Jun 14  2018 createdump*\r\n-rw-r--r--  1 root    root      221184 Mar  8  2017 log4net.dll*\r\n-rw-r--r--  1 root    root        6656 Jun 14  2018 System.Security.dll*\r\n\r\n## Actual behavior\r\n1. Both .NET Core runtime and NuGet package DLLs and .so files are executable.\r\n2. All these files are also other-writable. Eg.\r\n\r\n-rwxrw-rw-  1 root    root       82152 Jun 14  2018 createdump*\r\n-rwxrw-rw-  1 root    root      221184 Mar  8  2017 log4net.dll*\r\n-rwxrw-rw-  1 root    root        6656 Jun 14  2018 System.Security.dll*\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.504\r\n Commit:    91e160c7f0\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.504/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.8\r\n  Commit:  209f8aa25c\r\n\r\n.NET Core SDKs installed:\r\n  2.1.504 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10877","RelatedDescription":"Open issue \"Creating a self-contained executable with dotnet publish -r ignores umask and marks libraries as executable (chmod +x)\" (#10877)"},{"Id":"413882032","IsPullRequest":true,"CreatedAt":"2019-02-24T23:55:16","Actor":"dotnet-maestro[bot]","Number":"10876","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19124.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10876","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10876)"},{"Id":"413479291","IsPullRequest":false,"CreatedAt":"2019-02-24T19:21:24","Actor":"aateeque","Number":"10865","RawContent":null,"Title":"Incorrect sdk selected","State":"closed","Body":"## Steps to reproduce\r\nCreate a new dotnet app from CLI\r\n\r\n```\r\nD:\\>mkdir a & cd a\r\n\r\nD:\\a>dotnet new webapp\r\nThe template \"ASP.NET Core Web App\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on D:\\a\\a.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK d\r\noes not support targeting .NET Core 2.2.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [D:\\a\\a.\r\ncsproj]\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n```\r\n\r\n## Expected  behavior\r\nShould work just fine; there is __no__ _global.json_ in D:\\\r\n\r\n\r\n## Actual behavior\r\nReports missing SDK\r\n\r\n\r\n## Environment data\r\n```\r\n`dotnet --info` output:\r\nD:\\>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10865","RelatedDescription":"Closed issue \"Incorrect sdk selected\" (#10865)"},{"Id":"412906588","IsPullRequest":false,"CreatedAt":"2019-02-24T18:37:44","Actor":"shai-glat","Number":"10861","RawContent":null,"Title":"Creating nuget package using dotnet pack command and <NuspecFile> tag creates a package targeting .Net Framework","State":"closed","Body":"## Steps to reproduce\r\n1. Create a csproj and generated a nuget package from it - works as expected\r\n2. Open the package and take out the generated nuspec file.\r\n3. Add the following tag to csproj:\r\n`\t<PropertyGroup>\r\n\t\t<NuspecFile>nuspec\\MyProj.nuspec</NuspecFile>\r\n\t</PropertyGroup>\r\n`\r\n4. Add the `files` tag to nuspec file as follows:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n..... (unmodified)\r\n  </metadata>\r\n\t<files>\r\n\t\t<file src=\"<Path>/MyProj.dll\" target=\"lib\" />\r\n\t\t<file src=\"<Path>/OtherFile.dll\" target=\"lib\" />\r\n\t</files>\r\n</package>\r\n```\r\n5. run `dotnet pack MyProj.csproj -o out /p:Version=1.0.1`\r\n## Expected  behavior\r\nGenerated package is a valid .NET Core package\r\n\r\n## Actual behavior\r\nPackage contents are all .NET Core dlls, but when adding the package visual studio it states the package was restored using .NetFramework 4.6 instead of .Net Core 2.1\r\n\r\n## Environment data\r\n`dotnet --info` output: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n## Additional notes\r\nI had the same problem when adding NuspecFile via dotnet CLI, as well as when i started with an empty nuspec file and simply added the files tag as stated above","Url":"https://github.com/dotnet/cli/issues/10861","RelatedDescription":"Closed issue \"Creating nuget package using dotnet pack command and <NuspecFile> tag creates a package targeting .Net Framework\" (#10861)"},{"Id":"413823025","IsPullRequest":true,"CreatedAt":"2019-02-24T14:10:25","Actor":"dotnet-maestro[bot]","Number":"10875","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19123.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10875","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#10875)"},{"Id":"413760631","IsPullRequest":true,"CreatedAt":"2019-02-24T00:16:06","Actor":"thomasgassmann","Number":"10873","RawContent":null,"Title":"add --no-solution-folders flag to dotnet sln add","State":"open","Body":"Closes #10427\r\n\r\nAdds the `--no-solution-folders` flag to the `dotnet sln add` command. ","Url":"https://github.com/dotnet/cli/pull/10873","RelatedDescription":"Open PR \"add --no-solution-folders flag to dotnet sln add\" (#10873)"},{"Id":"413694802","IsPullRequest":true,"CreatedAt":"2019-02-23T16:11:51","Actor":"dotnet-maestro[bot]","Number":"10872","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19123.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10872","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10872)"},{"Id":"413628582","IsPullRequest":true,"CreatedAt":"2019-02-23T01:01:54","Actor":"dotnet-maestro[bot]","Number":"10871","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19121.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10871","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10871)"},{"Id":"413546931","IsPullRequest":true,"CreatedAt":"2019-02-23T00:45:12","Actor":"peterhuene","Number":"10866","RawContent":null,"Title":"[WIP] Bump the patch versions for 1.x.","State":"closed","Body":"This is a test PR for now.","Url":"https://github.com/dotnet/cli/pull/10866","RelatedDescription":"Closed or merged PR \"[WIP] Bump the patch versions for 1.x.\" (#10866)"},{"Id":"413274666","IsPullRequest":false,"CreatedAt":"2019-02-22T23:52:43","Actor":"KevinRansom","Number":"10864","RawContent":null,"Title":"Build behavior change between 2.1.403 and 3.0.100-preview-010000","State":"closed","Body":"On version: 2.1.403\r\n\r\nThis project builds correctly:  https://github.com/Microsoft/visualfsharp/blob/master/src/buildtools/buildtools.proj\r\n\r\nc:\\kevinransom\\visualfsharp\\fcs>dotnet build ..\\src\\buildtools\\buildtools.proj\r\nMicrosoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 19.05 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fslex\\fslex.fsproj.\r\n  Restore completed in 1.76 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fsyacc\\fsyacc.fsproj.\r\n  fslex -> c:\\kevinransom\\visualfsharp\\artifacts\\bin\\fslex\\Debug\\netcoreapp2.0\\fslex.dll\r\n  fsyacc -> c:\\kevinransom\\visualfsharp\\artifacts\\bin\\fsyacc\\Debug\\netcoreapp2.0\\fsyacc.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.64\r\n\r\nWith version 3.0.100-preview-010000 installed the behavior has changed:\r\n\r\nc:\\kevinransom\\visualfsharp\\fcs>dotnet build ..\\src\\buildtools\\buildtools.proj\r\nMicrosoft (R) Build Engine version 16.0.284-preview+g7905402dc6 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fslex\\fslex.fsproj...\r\n  Generating MSBuild file c:\\kevinransom\\visualfsharp\\artifacts\\obj\\fslex\\fslex.fsproj.nuget.g.props.\r\n  Restore completed in 125.12 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fslex\\fslex.fsproj.\r\n  Restoring packages for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fsyacc\\fsyacc.fsproj...\r\n  Generating MSBuild file c:\\kevinransom\\visualfsharp\\artifacts\\obj\\fsyacc\\fsyacc.fsproj.nuget.g.props.\r\n  Restore completed in 59.86 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fsyacc\\fsyacc.fsproj.\r\nc:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj : error MSB4025: The project file could not be loaded. Could not find a part of the path 'c:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj'.\r\n\r\nBuild FAILED.\r\n\r\nc:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj : error MSB4025: The project file could not be loaded. Could not find a part of the path 'c:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj'.\r\n   0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.80\r\n\r\nI assume this is a bug.\r\n\r\nKevin\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10864","RelatedDescription":"Closed issue \"Build behavior change between 2.1.403 and 3.0.100-preview-010000\" (#10864)"},{"Id":"413619331","IsPullRequest":false,"CreatedAt":"2019-02-22T23:31:58","Actor":"peterhuene","Number":"10868","RawContent":null,"Title":"Replace MIT License with .NET Library EULA in Windows installer","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Install a 3.0.100 SDK preview for Windows using the installer.\r\n\r\n## Expected  behavior\r\n\r\nThe link for \"MIT License\" should be replaced with \".NET Library EULA\".\r\n\r\n## Actual behavior\r\n\r\nThe link for the \"MIT License\" remains.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10868","RelatedDescription":"Open issue \"Replace MIT License with .NET Library EULA in Windows installer\" (#10868)"},{"Id":"412919223","IsPullRequest":true,"CreatedAt":"2019-02-22T21:19:26","Actor":"dotnet-maestro[bot]","Number":"10862","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19121.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19122.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19122.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10862","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10862)"},{"Id":"413037854","IsPullRequest":false,"CreatedAt":"2019-02-21T17:23:31","Actor":"KathleenDollard","Number":"10863","RawContent":null,"Title":"Nicer message for `dotnet tool install` failure","State":"open","Body":"## Steps to reproduce\r\n\r\nIn a directory that does not have a manifest file, enter\r\n\r\n```\r\n$ dotnet tool install dotnet-format\r\n```\r\n\r\nNote, I neglected to enter `-g`\r\n\r\n## Expected  behavior\r\n\r\nSomething nice, and not a list of places searched. Suggestion below.\r\n\r\n(Note: Since this is a common mistake, I think we made the right decision not to create a manifest automatically). \r\n\r\n## Actual behavior\r\n\r\n```\r\n$ dotnet tool install dotnet-format\r\nCannot find any manifests file. Searched:\r\n/Users/kathleen/repos/designs-microsoft/designs-microsoft/.config/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/designs-microsoft/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/.config/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/dotnet-tools.json\r\n/Users/kathleen/repos/.config/dotnet-tools.json\r\n/Users/kathleen/repos/dotnet-tools.json\r\n/Users/kathleen/.config/dotnet-tools.json\r\n/Users/kathleen/dotnet-tools.json\r\n/Users/.config/dotnet-tools.json\r\n/Users/dotnet-tools.json\r\n/.config/dotnet-tools.json\r\n/dotnet-tools.json\r\n```\r\n\r\n## Suggested message \r\n\r\n```\r\nCannot find a manifest file. \r\nIf you intended to install a global tool, add `--global` to the command.\r\nIf you would like to create a manifest, use `dotnet new tool-manifest` first, usually in the repo root directory\r\nFor a list of locations searched, use `dotnet tool install <toolname> -v`\r\n```\r\n\r\n-v would add the places searched before or after this message. \r\n\r\n## Environment data\r\n```\r\ndotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009988\r\n Commit:    8d071f3d19\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009988/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009988 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10863","RelatedDescription":"Open issue \"Nicer message for `dotnet tool install` failure\" (#10863)"},{"Id":"412864127","IsPullRequest":false,"CreatedAt":"2019-02-21T10:54:52","Actor":"couven92","Number":"10860","RawContent":null,"Title":"Add `dotnet tool update --all` option","State":"open","Body":"## Request\r\n\r\nWhen multiple tools are installed, either globally or locally, it becomes hard to keep track of which tools are outdated and which are not, and updating all outdated tools is time-consuming and boring copy-paste work, since the package id of each installed package needs to be provided to the `dotnet tool update` command.\r\n\r\nI propose to add the `--all` (alias: `-a`) option to the `dotnet tool update` command. This option would simply run `dotnet tool list` internally and use the results obtained from that command to get the package ids that are installed. Then the `dotnet tool update` command could be called with each of these package ids.\r\n\r\n## Background\r\n\r\nUpdating all installed programs is very usual operation for package maintance application to do. `apt upgrade` on Debian/Ubuntu, `npm upgrade` for NPM, etc.\r\n\r\nI have encountered the same problem in Python, however, there one can (semi-)easily write a Windows CMD `FOR` command that uses the `pip list --outdated --format=freeze` command.\r\n\r\nCurrently, the only way to update all packages installed with `dotnet tool` is to parse the output of `dotnet tool list`. That means I now have to write a PowerShell script that ignores the first two lines (the header and header-splitter) and parses the package id from the start of the line to the first whitespace. Yes, it's doable, but it would be much more convenient to have a command that just does all that for you. Also, adding an option in the actual executable means that `dotnet` can use it's own data representation of the information on the installed packages, and thus does not have to be subject to changes in the output format, invalid characters when printed to the console, and all that stuff.\r\n\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n``` txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview1-009349 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview-26820-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10860","RelatedDescription":"Open issue \"Add `dotnet tool update --all` option\" (#10860)"},{"Id":"412780084","IsPullRequest":true,"CreatedAt":"2019-02-21T07:53:47","Actor":"livarcocc","Number":"10859","RawContent":null,"Title":"SDK 2.1.600-preview-63821-02","State":"closed","Body":"This contains a matching NuGet version.\r\n","Url":"https://github.com/dotnet/cli/pull/10859","RelatedDescription":"Closed or merged PR \"SDK 2.1.600-preview-63821-02\" (#10859)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"408526522","IsPullRequest":false,"CreatedAt":"2019-02-23T00:00:14","Actor":"jmroyb","Number":"1066","RawContent":null,"Title":"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?","State":"closed","Body":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers","Url":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Closed issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"408429514","IsPullRequest":false,"CreatedAt":"2019-02-21T19:39:58","Actor":"kaby76","Number":"1065","RawContent":null,"Title":"CI build status log is not public","State":"closed","Body":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work.","Url":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Closed issue \"CI build status log is not public\" (#1065)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410533703","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Number":"1069","RawContent":null,"Title":"Label package as 'preview3'","State":"closed","Body":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Closed or merged PR \"Label package as 'preview3'\" (#1069)"},{"Id":"410527393","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:45","Actor":"wtgodbe","Number":"1067","RawContent":null,"Title":"Add netstandard.xml Intellisense file back to NetStandard.Library","State":"closed","Body":"The SDK expects `XmlDocFileRoot` to be defined by the repo so that it can find the intellisense file to binplace into the package - redefining this property makes it so we get `netstandard.xml` in the package again for 2.1.\r\n\r\nCC @dsplaisted @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1067","RelatedDescription":"Closed or merged PR \"Add netstandard.xml Intellisense file back to NetStandard.Library\" (#1067)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"},{"Id":"410528981","IsPullRequest":true,"CreatedAt":"2019-02-14T23:12:42","Actor":"dotnet-maestro[bot]","Number":"1068","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19113.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1068","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#1068)"},{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"414947487","IsPullRequest":true,"CreatedAt":"2019-02-27T05:08:16","Actor":"Dotnet-GitSync-Bot","Number":"35615","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corefx/pull/35615","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#35615)"},{"Id":"414925862","IsPullRequest":false,"CreatedAt":"2019-02-27T04:14:38","Actor":"m5x","Number":"35614","RawContent":null,"Title":"add span support to MemoryMappedFiles","State":"closed","Body":"`Span<T>` wave seems to have missed `System.IO.MemoryMappedFiles`. Is there some particular blocker for this? There are many scenarios in which it would be very useful to be able to access mapped memory as `Span<T>`.","Url":"https://github.com/dotnet/corefx/issues/35614","RelatedDescription":"Closed issue \"add span support to MemoryMappedFiles\" (#35614)"},{"Id":"414923141","IsPullRequest":false,"CreatedAt":"2019-02-27T03:06:13","Actor":"miguep","Number":"35613","RawContent":null,"Title":"GetHashCode seems to only use the first field of a struct to calculate hash code","State":"open","Body":"With a struct like this:\r\n```csharp\r\n    struct MyStruct\r\n        {\r\n            public float a,b;\r\n        };\r\n```\r\nif I try the following:\r\n\r\n```csharp\r\n            MyStruct myStruct1 = new MyStruct { b= 1.0f, a = 2.0f};\r\n            MyStruct myStruct2 = new MyStruct { b= 1.0f, a = 1.0f};\r\n\r\n            int hash = myStruct1.GetHashCode();\r\n            int hash2 = myStruct2.GetHashCode();\r\n```\r\nhash and hash2 are different, but trying this:\r\n\r\n```csharp\r\n            MyStruct myStruct1 = new MyStruct { a= 1.0f, b = 2.0f};\r\n            MyStruct myStruct2 = new MyStruct { a= 1.0f, b = 1.0f};\r\n\r\n            int hash = myStruct1.GetHashCode();\r\n            int hash2 = myStruct2.GetHashCode();\r\n```\r\nhash and hash2 are the same.\r\n\r\nThis behavior is different from the one in .NET Framework","Url":"https://github.com/dotnet/corefx/issues/35613","RelatedDescription":"Open issue \"GetHashCode seems to only use the first field of a struct to calculate hash code\" (#35613)"},{"Id":"414917187","IsPullRequest":true,"CreatedAt":"2019-02-27T02:39:43","Actor":"jkotas","Number":"35612","RawContent":null,"Title":"Add test to verify that DangerousRelease preserves Marshal.GetLastWin32Error","State":"open","Body":"Regression test for https://github.com/dotnet/coreclr/pull/22871","Url":"https://github.com/dotnet/corefx/pull/35612","RelatedDescription":"Open PR \"Add test to verify that DangerousRelease preserves Marshal.GetLastWin32Error\" (#35612)"},{"Id":"414916511","IsPullRequest":false,"CreatedAt":"2019-02-27T02:36:42","Actor":"divega","Number":"35611","RawContent":null,"Title":"Consider adding string overloads of DbDataReader.GetFieldValueAsync and DbDataReader.IsDBNullAsync","State":"open","Body":"When we reviewed the API for #31595 we decided to leave async methods for later, for various reasons:\r\n\r\n- It is less commonly used API (only required for sequential access) \r\n- We were hoping to come up with some new API pattern for handling nullability that takes advantage of the new support for nullable reference types in C#\r\n- We had doubts on whether new fine-grained async API should return `ValueTask<T>` instead of `Task<T>` \r\n\r\nHowever, given that we haven't made progress towards a new API pattern for nullability, and that this async API isn't that commonly used, it seems to me that adding the corresponding string versions for the two existing async methods is the simplest way to complete the improvement we started in #31595. \r\n\r\nProposed API:\r\n\r\n``` csharp\r\n public abstract class DbDataReader\r\n {\r\n    public Task<T> GetFieldValueAsync<T>(string name) => GetFieldValueAsync(GetOrdinal(name));\r\n    public Task<bool> IsDBNullAsync(string name) => IsDBNullAsync(GetOrdinal(name));\r\n}\r\n```\r\ncc @roji @ajcvickers ","Url":"https://github.com/dotnet/corefx/issues/35611","RelatedDescription":"Open issue \"Consider adding string overloads of DbDataReader.GetFieldValueAsync and DbDataReader.IsDBNullAsync\" (#35611)"},{"Id":"414904382","IsPullRequest":false,"CreatedAt":"2019-02-27T01:43:18","Actor":"ahsonkhan","Number":"35610","RawContent":null,"Title":"Should GenAPI be removing the InterfaceType attribute?","State":"open","Body":"Example usage: https://github.com/dotnet/corefx/blob/23c06516a29ac94585cee09e82b5ddf57d0cae0e/src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs#L1241-L1242\r\n\r\nExcluded here: https://github.com/dotnet/corefx/blob/23c06516a29ac94585cee09e82b5ddf57d0cae0e/eng/DefaultGenApiDocIds.txt#L30\r\n\r\nShould we be emitting these or retain them?\r\n\r\ncc @AaronRobinsonMSFT, @jkoritzinsky ","Url":"https://github.com/dotnet/corefx/issues/35610","RelatedDescription":"Open issue \"Should GenAPI be removing the InterfaceType attribute?\" (#35610)"},{"Id":"414852860","IsPullRequest":true,"CreatedAt":"2019-02-27T01:07:26","Actor":"ViktorHofer","Number":"35604","RawContent":null,"Title":"Darc update from build '20190226.3'","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/35563\r\n\r\nConsume a fix in the Arcade SDK. The changes seem to be safe (finger crossed).","Url":"https://github.com/dotnet/corefx/pull/35604","RelatedDescription":"Closed or merged PR \"Darc update from build '20190226.3'\" (#35604)"},{"Id":"414884738","IsPullRequest":true,"CreatedAt":"2019-02-27T00:22:53","Actor":"steveharter","Number":"35609","RawContent":null,"Title":"Initial Json serialization functionality","State":"open","Body":"This adds basic Json serialization functionality per https://github.com/dotnet/corefx/issues/34372\r\n\r\nNotes:\r\n- Only the APIs which have been reviewed are made public which includes the main entry points in `JsonSerializer` and the corresponding options class `JsonSerializerOptions`.\r\n  - There is a `MAKE_UNREVIEWED_APIS_INTERNAL` define to make the unreviewed APIs `internal` instead of `public`. Code marked with this define does not have to be necessarily reviewed because it will likely change to some extent when the API review is completed.\r\n- Api documentation will be added soon to the reviewed APIs.\r\n\r\ncc @joshfree @terrajobst @davidfowl ","Url":"https://github.com/dotnet/corefx/pull/35609","RelatedDescription":"Open PR \"Initial Json serialization functionality\" (#35609)"},{"Id":"414726264","IsPullRequest":true,"CreatedAt":"2019-02-26T23:54:39","Actor":"ericstj","Number":"35593","RawContent":null,"Title":"Use ILAsm/ILDasm that are restored as part of external","State":"closed","Body":"Also fixes a test project to build correctly and deletes a checked in binary.","Url":"https://github.com/dotnet/corefx/pull/35593","RelatedDescription":"Closed or merged PR \"Use ILAsm/ILDasm that are restored as part of external\" (#35593)"},{"Id":"414877359","IsPullRequest":false,"CreatedAt":"2019-02-26T23:54:17","Actor":"ahsonkhan","Number":"35608","RawContent":null,"Title":"Should GenAPI be removing the ComVisible attribute?","State":"open","Body":"Example usages: https://github.com/dotnet/corefx/blob/77cde697f9ee9941bdc76e02b9481d781790e86a/src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs#L321-L322\r\nhttps://github.com/dotnet/corefx/blob/77cde697f9ee9941bdc76e02b9481d781790e86a/src/System.Diagnostics.EventLog/ref/System.Diagnostics.EventLog.cs#L164-L165\r\n\r\nExcluded here: https://github.com/dotnet/corefx/blob/77cde697f9ee9941bdc76e02b9481d781790e86a/eng/DefaultGenApiDocIds.txt#L28\r\n\r\nShould we be emitting these or retain them?\r\n\r\ncc @bartonjs, @vancem ","Url":"https://github.com/dotnet/corefx/issues/35608","RelatedDescription":"Open issue \"Should GenAPI be removing the ComVisible attribute?\" (#35608)"},{"Id":"414876946","IsPullRequest":false,"CreatedAt":"2019-02-26T23:52:33","Actor":"ahsonkhan","Number":"35607","RawContent":null,"Title":"Should GenAPI be removing the ToolboxItem attribute?","State":"open","Body":"Example usages: https://github.com/dotnet/corefx/blob/77cde697f9ee9941bdc76e02b9481d781790e86a/src/System.Diagnostics.EventLog/ref/System.Diagnostics.EventLog.cs#L101-L102\r\nhttps://github.com/dotnet/corefx/blob/77cde697f9ee9941bdc76e02b9481d781790e86a/src/System.Management/ref/System.Management.cs#L136-L137\r\n\r\nExcluded here: https://github.com/dotnet/corefx/blob/77cde697f9ee9941bdc76e02b9481d781790e86a/eng/DefaultGenApiDocIds.txt#L7\r\n\r\nShould we be emitting these or retain them?\r\n\r\ncc @vancem ","Url":"https://github.com/dotnet/corefx/issues/35607","RelatedDescription":"Open issue \"Should GenAPI be removing the ToolboxItem attribute?\" (#35607)"},{"Id":"414868904","IsPullRequest":true,"CreatedAt":"2019-02-26T23:23:27","Actor":"grant-d","Number":"35606","RawContent":null,"Title":"[WIP] Make BitOperations public (CoreFX)","State":"open","Body":"See related: https://github.com/dotnet/coreclr/pull/22864","Url":"https://github.com/dotnet/corefx/pull/35606","RelatedDescription":"Open PR \"[WIP] Make BitOperations public (CoreFX)\" (#35606)"},{"Id":"414868479","IsPullRequest":true,"CreatedAt":"2019-02-26T23:21:57","Actor":"wfurt","Number":"35605","RawContent":null,"Title":"enable GetAsync_AllowedSSLVersion_Succeeds for SocketHttpHandler","State":"open","Body":"fixes #26186, related to #35574 \r\n\r\nI did more testing around SSLv3 and RH6 and few other distributions. \r\nIt seems like SSLv3 is available and using SslStream with SSLv3 should work when SupportsSsl3 is true.\r\n\r\nOn RH6, only platform handler is failing. It sends SSLv3 ClientHello and when it gets SSLv3 ServerHello it fails to parse it. I did look at curl source code and RH patches and it seems like -ssl3 for curl does more to enable SSLv3. It seems like it is not worth of investing effort to old platform and deprecated protocol so I add skip for this one particular combination. SocketHttpHandler can negotiate sslv3 on RH6. \r\n\r\nWith this, all HTTP ssl related tests should be passing.  \r\n\r\n \r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35605","RelatedDescription":"Open PR \"enable GetAsync_AllowedSSLVersion_Succeeds for SocketHttpHandler\" (#35605)"},{"Id":"414824155","IsPullRequest":true,"CreatedAt":"2019-02-26T23:10:39","Actor":"wfurt","Number":"35600","RawContent":null,"Title":"no-merge: enable GetAsync_AllowedSSLVersion_Succeeds for SocketHttpHandler","State":"closed","Body":"and disable curl on RH6. ","Url":"https://github.com/dotnet/corefx/pull/35600","RelatedDescription":"Closed or merged PR \"no-merge: enable GetAsync_AllowedSSLVersion_Succeeds for SocketHttpHandler\" (#35600)"},{"Id":"414815687","IsPullRequest":true,"CreatedAt":"2019-02-26T22:23:28","Actor":"krwq","Number":"35598","RawContent":null,"Title":"Do not include System.IO.Ports.Native.* in NetCoreApp","State":"closed","Body":"Fixes: https://github.com/dotnet/corefx/issues/35358\r\n\r\nSystem.IO.Ports.Native currently ships OOB so it's not needed in the framework anymore.\r\n\r\nI believe this simple fix should remove it - not seeing .so file under runtimes/linux-x64/native on the runtime package (runtime.linux-x64.Microsoft.Private.CoreFx.NETCoreApp) produced on linux","Url":"https://github.com/dotnet/corefx/pull/35598","RelatedDescription":"Closed or merged PR \"Do not include System.IO.Ports.Native.* in NetCoreApp\" (#35598)"},{"Id":"414849012","IsPullRequest":false,"CreatedAt":"2019-02-26T22:22:32","Actor":"ahsonkhan","Number":"35603","RawContent":null,"Title":"Should GenAPI be removing the StructLayout attribute?","State":"open","Body":"https://github.com/dotnet/corefx/pull/35557#discussion_r259773232\r\n\r\nIf we are excluding this attribute, we should excluded `FieldOffsetAttribute` as well.\r\nhttps://github.com/dotnet/corefx/blob/26b932e3c56702382d13ece010b300d3181d2891/eng/DefaultGenApiDocIds.txt#L31\r\n\r\nOtherwise, we should keep this attribute.","Url":"https://github.com/dotnet/corefx/issues/35603","RelatedDescription":"Open issue \"Should GenAPI be removing the StructLayout attribute?\" (#35603)"},{"Id":"414848195","IsPullRequest":false,"CreatedAt":"2019-02-26T22:20:18","Actor":"ahsonkhan","Number":"35602","RawContent":null,"Title":"Should GenAPI be removing the AsyncMethodBuilder attribute?","State":"open","Body":"See https://github.com/dotnet/corefx/pull/35557#discussion_r259772806\r\n\r\nThis attribute is required to avoid compiler errors (for verifying that async methods return a task-like type), but it is being excluded here:\r\nhttps://github.com/dotnet/corefx/blob/26b932e3c56702382d13ece010b300d3181d2891/eng/DefaultGenApiDocIds.txt#L53\r\n\r\n```text\r\nerror CS1983: The return type of an async method must be void, Task, Task<T>, a task-like type, IAsyncEnumerable<T>, or IAsyncEnumerator<T>\r\n```\r\n\r\n**Given that behaviour, we should consider removing the exclusion from the list.**\r\n\r\ncc @jaredpar, @ericstj, @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/35602","RelatedDescription":"Open issue \"Should GenAPI be removing the AsyncMethodBuilder attribute?\" (#35602)"},{"Id":"414847295","IsPullRequest":false,"CreatedAt":"2019-02-26T22:17:48","Actor":"ahsonkhan","Number":"35601","RawContent":null,"Title":"Should GenAPI be removing the DebuggerDisplay and DebuggerStepThrough attributes?","State":"open","Body":"Currently the automatic generation of reference assemblies excludes some of the Debugger* attributes:\r\nhttps://github.com/dotnet/corefx/blob/7c37cfbd03d058b966160fdc39cd902ef3b2782c/eng/DefaultGenApiDocIds.txt#L12-L17\r\n\r\nThis is relevant to Xml.ReaderWriter:\r\nhttps://github.com/dotnet/corefx/blob/7c37cfbd03d058b966160fdc39cd902ef3b2782c/src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs#L528\r\nhttps://github.com/dotnet/corefx/blob/7c37cfbd03d058b966160fdc39cd902ef3b2782c/src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs#L815\r\n\r\nShould we be emitting these or retain them?\r\n\r\nFor context: https://github.com/dotnet/corefx/pull/35557#discussion_r259776563\r\n\r\ncc @ericstj, @krwq \r\n","Url":"https://github.com/dotnet/corefx/issues/35601","RelatedDescription":"Open issue \"Should GenAPI be removing the DebuggerDisplay and DebuggerStepThrough attributes?\" (#35601)"},{"Id":"414816898","IsPullRequest":false,"CreatedAt":"2019-02-26T21:01:16","Actor":"krwq","Number":"35599","RawContent":null,"Title":"Enable testing for System.IO.Ports package","State":"open","Body":"Related:\r\n- https://github.com/dotnet/corefx/issues/35358\r\n- https://github.com/dotnet/corefx/issues/33374\r\n\r\nWhen creating a package for native (https://github.com/dotnet/corefx/pull/35126) I have disabled package testing because of some infrastructure issues (build require that a package was already on nuget before it was uploaded) - this should be possible to re-enable now.","Url":"https://github.com/dotnet/corefx/issues/35599","RelatedDescription":"Open issue \"Enable testing for System.IO.Ports package\" (#35599)"},{"Id":"414796974","IsPullRequest":true,"CreatedAt":"2019-02-26T20:11:00","Actor":"JeremyKuhne","Number":"35597","RawContent":null,"Title":"Fix advance for single length delimiter","State":"open","Body":"If the delimiter span for TryReadTo was only one character long we weren't advancing past the delimiter if requested. Add regression test.\r\n\r\ncc: @jkotalik ","Url":"https://github.com/dotnet/corefx/pull/35597","RelatedDescription":"Open PR \"Fix advance for single length delimiter\" (#35597)"},{"Id":"414777970","IsPullRequest":true,"CreatedAt":"2019-02-26T19:26:22","Actor":"tannergooding","Number":"35596","RawContent":null,"Title":"Removing the ExtractVector128 and InsertVector128 APIs that take an address.","State":"open","Body":"This resolves #35560.\r\n\r\nCC. @mikedn, @fiigii, @CarolEidt","Url":"https://github.com/dotnet/corefx/pull/35596","RelatedDescription":"Open PR \"Removing the ExtractVector128 and InsertVector128 APIs that take an address.\" (#35596)"},{"Id":"414759220","IsPullRequest":true,"CreatedAt":"2019-02-26T18:40:16","Actor":"stephentoub","Number":"35595","RawContent":null,"Title":"Revert \"Revert \"Add another Zip IEnumerable<T> extension method (#26582)\"\"","State":"open","Body":"Reverts dotnet/corefx#33709\r\n\r\nBrings back Enumerable.Zip now that we agreed on naming conventions around tuples in public API.","Url":"https://github.com/dotnet/corefx/pull/35595","RelatedDescription":"Open PR \"Revert \"Revert \"Add another Zip IEnumerable<T> extension method (#26582)\"\"\" (#35595)"},{"Id":"414731149","IsPullRequest":false,"CreatedAt":"2019-02-26T17:30:56","Actor":"benaadams","Number":"35594","RawContent":null,"Title":"Add API IndexNotOf ","State":"open","Body":"```csharp\r\npublic static partial class MemoryExtensions\r\n{\r\n    int IndexNotOf(this Span<T> span, T value);\r\n    int IndexNotOfAny(this Span<T> span, T value0, T value1);\r\n    int IndexNotOfAny(this Span<T> span, T value0, T value1, T value2);\r\n    int IndexNotOfAny(this Span<T> span, ReadOnlySpan<T> values);\r\n    \r\n    int LastIndexNotOf(this ReadOnlySpan<T> span, T value);\r\n    int LastIndexNotOfAny(this ReadOnlySpan<T> span, T value0, T value1);\r\n    int LastIndexNotOfAny(this ReadOnlySpan<T> span, T value0, T value1, T value2);\r\n    int LastIndexNotOfAny(this ReadOnlySpan<T> span, ReadOnlySpan<T> values);\r\n}\r\n```\r\nExample usage:\r\n```csharp\r\nvar firstNonSpace = span.IndexNotOf(' ');\r\nif (firstNonSpace > 0)\r\n{\r\n    return span.Slice(firstNonSpace);\r\n}\r\n\r\nreturn span;\r\n```","Url":"https://github.com/dotnet/corefx/issues/35594","RelatedDescription":"Open issue \"Add API IndexNotOf \" (#35594)"},{"Id":"414700222","IsPullRequest":false,"CreatedAt":"2019-02-26T16:25:51","Actor":"bgribaudo","Number":"35592","RawContent":null,"Title":"API Proposal: DbCommandSet -- allows multiple DbCommands to be transmitted to server in single message","State":"open","Body":"_This is offered in the friendliest way possible as an alternative to #35135 (this general idea was discussed in that thread but didn't fit the direction being taken for that proposal). Both have the same high-level goal but differ in the details of how they achieve that goal._\r\n\r\n# Need/Problem Statement\r\n\r\nWithin the realm of SQL-based relational database engines:\r\n\r\n* All support executing command batches that consist of a single SQL statement.\r\n* Some support command batches that consist of multiple SQL statements (e.g. SQL Server supports `SELECT * FROM TableA; SELECT * FROM TableB`).\r\n* Some _also_ support multiple _independent_ command batches being sent in the same wire protocol level message. (In turn, depending on the server, these independent batches may themselves each contain multiple SQL statements.) Transmitting multiple commands in the same message can offer performance benefits.\r\n\r\nThe first two scenarios are supported by ADO.Net's DbCommand. *However, no public ADO.Net API currently exists which allows multiple DbCommands to be grouped into a single wire protocol level message.* This proposal suggests one way to add this functionality.\r\n\r\n# Design Strategy \r\nCommands are passed in as independent units. Results are returned in similar fashion—as independent units, one unit per command passed in. \r\n\r\nIn general, the consumer's experience in retrieving results should be (almost) _identical_ to the experience they'd have if they executed each command _separately_. For example, the consumer should be able to easily determine which result set (or result sets, as a single command can possibly return several) came from which command, affected row counts should be determinable on a per-command basis and the reader-level optimizations achieved by methods like `ExecuteScalar` as well as `CommandBehavior` options should be available on a per-command basis (as different optimizations may apply to different commands in the set).\r\n\r\n# API Proposal Draft\r\n\r\n````\r\npublic abstract class DbCommandSet : IDisposable, IAsyncDisposable, IEnumerable<(DbCommand, CommandBehavior)>\r\n{\r\n\r\n  #region Command-Set Management\r\n\r\n  // Adds a single command to the set\r\n  public abstract void Add(DbCommand command);\r\n  public abstract void Add(DbCommand command, CommandBehavior commandBehavior);\r\n\r\n  // Adds multiple commands to the set\r\n  public virtual void AddRange(IEnumerable<DbCommand> commands);\r\n  public virtual void AddRange(IEnumerable<DbCommand> commands, CommandBehavior commandBehavior);\r\n  public virtual void AddRange(IEnumerable<(DbCommand, CommandBehavior)> commands);\r\n\r\n  // Clears all commands \r\n  public abstract void Clear();\r\n\r\n  public abstract IEnumerator<(DbCommand, CommandBehavior)> GetEnumerator();\r\n  IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\r\n\r\n  #endregion\r\n\r\n\r\n  #region Execution\r\n\r\n  public abstract DbCommandSetResult Execute();\r\n  public abstract Task<DbCommandSetResult> ExecuteAsync(CancellationToken cancellationToken = default);\r\n\r\n  // Shortcut - executes then returns sum of number of rows affected by each command in the set\r\n  public abstract int ExecuteNonQuery();\r\n  public abstract Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken = default);\r\n\r\n  public abstract void Prepare();\r\n  public abstract Task PrepareAsync(CancellationToken cancellationToken = default);\r\n\r\n  public abstract void Cancel();\r\n  public abstract Task CancelAsync(CancellationToken cancellationToken = default);\r\n  \r\n  #endregion\r\n  \r\n\r\n  // Could be used for any command that does not have a timeout set; or individual command timeouts could be ignored in deference to this timeout.\r\n  public abstract int Timeout { get; set; }\r\n\r\n  // Specifies the connection to be used when executed. (If a connection is set on an individual command and it does not match this connection, possibly an exception should be thrown.)\r\n  public abstract DbConnection Connection { get; set; }\r\n\r\n  // If set, used for all commands in the set. (If a transaction is set on an individual command and it does not match this transaction, possibly an exception should be thrown.)\r\n  public abstract DbTransaction Transaction { get; set; }\r\n}\r\n\r\npublic abstract class DbCommandSetResults : IDisposable, IAsyncDisposable, IEnumerable<DbCommandSetResult> {\r\n  public virtual DbDataReader GetReader();\r\n  public abstract DbDataReader GetReader(CommandBehavior commandBehavior);\r\n  public virtual Task<DbDataReader> GetReaderAsync(CancellationToken cancellationToken = default);\r\n  public abstract Task<DbDataReader> GetReaderAsync(CommandBehavior commandBehavior, CancellationToken cancellationToken = default);\r\n\r\n  public abstract int GetNonQueryResult();\r\n  public abstract Task<int> GetNonQueryResultAsync(CancellationToken cancellationToken = default);\r\n  \r\n  public abstract object GetScalarResult();\r\n  public abstract Task<object> GetScalarResultAsync(CancellationToken cancellationToken = default);\r\n\r\n  // Advances DbCommandSetResults to the results associated with the next command in the set.\r\n  public abstract bool NextCommandSetResult(); \r\n}\r\n````\r\n\r\n## Notes\r\n* `CommandBehavior` may optionally be passed when adding commands to the set _and_ when reading results. Depending on the database server, some behaviors (e.g. `KeyInfo`, `SchemaOnly`) affect the query executed, so need to be specified before execution (e.g. when the command is added to the set). Other behaviors may only be of interest to the data reader (for example, so it can optimized reading: `SequentialAccess`, `SingleResult`, `SingleRow`) and so only need to be passed at the time of reading. If a reading-specific behavior is passed when a command is added or an execution-level behavior is passed during reading, an exception should be thrown.\r\n\r\n## Example\r\n````\r\nusing (var set = new SqlDbCommandSet(connection)) {\r\n  set.Add(command1);\r\n  set.Add(command2, CommandBehavior.SchemaInfo);\r\n  set.Add(otherCommandsEnumerable);\r\n  \r\n  using (var setResults = set.Execute()) {  \r\n    // Get affected row count from first command\r\n    var command1AffectedRows = setResults.GetNonQueryResult();\r\n    \r\n    // Move to second command's results\r\n    setResults.NextCommandSetResults();\r\n    \r\n    // Get schema details from results\r\n    var command2Schema = setResults.GetColumnSchema();\r\n    \r\n    // Loop through remaining commands' results, processing each\r\n    while (setResults.NextCommandSetResults()) {\r\n      using (var reader = setResults.GetReader()) {\r\n        ProcessReader(reader);\r\n      }\r\n    }\r\n  }\r\n}\r\n","Url":"https://github.com/dotnet/corefx/issues/35592","RelatedDescription":"Open issue \"API Proposal: DbCommandSet -- allows multiple DbCommands to be transmitted to server in single message\" (#35592)"},{"Id":"414626077","IsPullRequest":true,"CreatedAt":"2019-02-26T15:54:43","Actor":"dotnet-maestro[bot]","Number":"35588","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/standard\r\n\r\n- NETStandard.Library - 2.1.0-prerelease.19125.3\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35588","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/standard\" (#35588)"},{"Id":"414683761","IsPullRequest":false,"CreatedAt":"2019-02-26T15:54:13","Actor":"danmosemsft","Number":"35591","RawContent":null,"Title":"SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions failed on Win81","State":"open","Body":" SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions and SendPingAsyncWithHostAndTimeoutAndBuffer\r\n\r\n@wfurt is there more information we can put in the exception beyond `An exception occurred during a Ping request.` such as eg an error code or more detailed text?\r\n```\r\nWindows.81.Amd64.Open-x86-Release\r\nGet Repro environment\r\nUnhandled Exception of Type System.Net.NetworkInformation.PingException\r\nMessage :\r\nSystem.Net.NetworkInformation.PingException : An exception occurred during a Ping request.\r\n---- System.ComponentModel.Win32Exception : The operation completed successfully.\r\nStack Trace :\r\n   at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in D:\\a\\1\\s\\src\\System.Net.Ping\\src\\System\\Net\\NetworkInformation\\Ping.cs:line 408\r\n   at System.Net.NetworkInformation.Tests.PingTest.SendPingAsync(Func`2 sendPing, Action`1 pingResultValidator) in D:\\a\\1\\s\\src\\System.Net.Ping\\tests\\FunctionalTests\\PingTest.cs:line 750\r\n   at System.Net.NetworkInformation.Tests.PingTest.SendPingAsyncWithHostAndTimeoutAndBuffer() in D:\\a\\1\\s\\src\\System.Net.Ping\\tests\\FunctionalTests\\PingTest.cs:line 458\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.NetworkInformation.Ping.DoSendPingCore(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options, Boolean isAsync) in D:\\a\\1\\s\\src\\System.Net.Ping\\src\\System\\Net\\NetworkInformation\\Ping.Windows.cs:line 92\r\n   at System.Net.NetworkInformation.Ping.SendPingAsyncCore(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in D:\\a\\1\\s\\src\\System.Net.Ping\\src\\System\\Net\\NetworkInformation\\Ping.Windows.cs:line 42\r\n   at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in D:\\a\\1\\s\\src\\System.Net.Ping\\src\\System\\Net\\NetworkInformation\\Ping.cs:line 395\r\n```\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F35588~2Fmerge/test~2Ffunctional~2Fcli~2F/20190226.6/workItem/System.Net.Ping.Functional.Tests","Url":"https://github.com/dotnet/corefx/issues/35591","RelatedDescription":"Open issue \"SendPingAsyncWithHostAndTimeoutAndBufferAndPingOptions failed on Win81\" (#35591)"},{"Id":"414627353","IsPullRequest":true,"CreatedAt":"2019-02-26T15:42:41","Actor":"dotnet-maestro[bot]","Number":"35589","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/standard\r\n\r\n- NETStandard.Library - 2.1.0-prerelease.19125.3\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35589","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/standard\" (#35589)"},{"Id":"414673960","IsPullRequest":true,"CreatedAt":"2019-02-26T15:35:19","Actor":"bartonjs","Number":"35590","RawContent":null,"Title":"[release/2.1] Ignore CTRequired when building an X509 chain on macOS","State":"open","Body":"Port #35246 to release/2.1 to prevent the new \"CTRequired\" errors from failing X509Chain builds on macOS.\r\n\r\n#### Description\r\n\r\nRecent change to macOS has caused a new error code to appear during X509Chain building. Since this error code has been identified as not having impact on the .NET X509Chain class, ignore it.\r\n\r\n#### Customer Impact\r\n\r\nWithout this fix, customers who upgrade their macOS version and build X509Chains against certificates/certificate-authorities which result in the CTRequired code will get a CryptographicException due to the unmapped error.\r\n\r\n#### Regression?\r\n\r\nNo, reaction to OS update.\r\n\r\n#### Packaging reviewed?\r\n\r\nRequired shim library, no packaging impact.\r\n\r\n#### Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/corefx/pull/35590","RelatedDescription":"Open PR \"[release/2.1] Ignore CTRequired when building an X509 chain on macOS\" (#35590)"},{"Id":"414619725","IsPullRequest":true,"CreatedAt":"2019-02-26T15:23:50","Actor":"dotnet-maestro[bot]","Number":"35587","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19126.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#35587)"},{"Id":"414603174","IsPullRequest":true,"CreatedAt":"2019-02-26T13:09:59","Actor":"dotnet-maestro[bot]","Number":"35586","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27425-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27425-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27425-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35586","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#35586)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"414913105","IsPullRequest":true,"CreatedAt":"2019-02-27T02:21:04","Actor":"jasonmalinowski","Number":"33712","RawContent":null,"Title":"Create Workspace APIs for .editorconfig files, and wire everything up","State":"open","Body":"This is a **draft** pull request which makes .editorconfig files a first-class part of the workspace, wires it to the project system support in Visual Studio, and uses these .editorconfig files when running analyzers and providing options.","Url":"https://github.com/dotnet/roslyn/pull/33712","RelatedDescription":"Open PR \"Create Workspace APIs for .editorconfig files, and wire everything up\" (#33712)"},{"Id":"414833891","IsPullRequest":false,"CreatedAt":"2019-02-27T02:19:35","Actor":"smitpatel","Number":"33702","RawContent":null,"Title":"Coalescing assignment shows incorrect unused variable","State":"closed","Body":"When function has coalescing assignment, VS shows suggestion.\r\n![image](https://user-images.githubusercontent.com/1528107/53448380-1e8a4300-39cc-11e9-8c75-7055cdb4939b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1528107/53448438-3e216b80-39cc-11e9-8fec-5ff33134d4d7.png)\r\n\r\nOnce you apply the fix, it fades out the input parameter suggesting it is unused but it is actually used.\r\n\r\n![image](https://user-images.githubusercontent.com/1528107/53448488-5db89400-39cc-11e9-9381-d5c17a7c8791.png)\r\n\r\n\r\n**Version Used**: \r\nfrom `dotnet --info`\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.200\r\n Commit:    27f814f6ba\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.200\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009804 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\nVS version: VS 16.0.0 Preview 4.0 28622.103.d16.0","Url":"https://github.com/dotnet/roslyn/issues/33702","RelatedDescription":"Closed issue \"Coalescing assignment shows incorrect unused variable\" (#33702)"},{"Id":"414904021","IsPullRequest":false,"CreatedAt":"2019-02-27T01:41:47","Actor":"kendrahavens","Number":"33711","RawContent":null,"Title":"Place ‘Microsoft’ directives second when sorting usings","State":"open","Body":"Internal customer request.\r\n\r\nSome users consider Microsoft usings similar to System usings as they are `1st party` and considered part of the platform. They'd expect to have an option in **Tools > Options > Text Editor > C# > Advanced > Using Directives** to 'Place ‘Microsoft’ directives second when sorting usings'. This means Microsoft usings would follow System and helpfully separate this from the user's other.\r\n\r\n**Version Used**: \r\nVS 2019 preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open **Tools > Options > Text Editor > C# > Advanced > Using Directives**\r\n\r\n**Expected Behavior**:\r\nBe able to optionally group 'first party' directives at top. With checkbox:\r\n`Place ‘Microsoft’ directives second when sorting usings`\r\n\r\n![image](https://user-images.githubusercontent.com/8293542/53459072-535ac200-39ed-11e9-96af-d306bac94e8d.png)\r\n\r\n**Actual Behavior**:\r\nNo option.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33711","RelatedDescription":"Open issue \"Place ‘Microsoft’ directives second when sorting usings\" (#33711)"},{"Id":"414878973","IsPullRequest":true,"CreatedAt":"2019-02-27T01:30:06","Actor":"dotnet-bot","Number":"33707","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33707","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33707)"},{"Id":"414889045","IsPullRequest":false,"CreatedAt":"2019-02-27T00:39:53","Actor":"ivanbasov","Number":"33710","RawContent":null,"Title":"async completion: check for !IsCommitCharacter is not covered by Roslyn unit tests","State":"open","Body":"See a fix in https://github.com/dotnet/roslyn/pull/33588. There is code in CommitManager:\r\n```\r\n if (typeChar != '\\t' && typeChar != '\\n' && typeChar != '\\0' && !IsCommitCharacter(serviceRules, roslynItem, typeChar, filterText))\r\n{\r\n    // Returning None means we complete the current session with a void commit. \r\n   // The Editor then will try to trigger a new completion session for the character.\r\n    return new AsyncCompletionData.CommitResult(isHandled: true, AsyncCompletionData.CommitBehavior.None);\r\n}\r\n```\r\nwhich is not used in main scenarios in Roslyn.\r\n\r\n1. Add more comments to the change\r\n2. Check for scenarios using `CharacterSetModificationKind.Remove` in `CommitCharacterRules` and add unit tests.","Url":"https://github.com/dotnet/roslyn/issues/33710","RelatedDescription":"Open issue \"async completion: check for !IsCommitCharacter is not covered by Roslyn unit tests\" (#33710)"},{"Id":"414887200","IsPullRequest":true,"CreatedAt":"2019-02-27T00:32:32","Actor":"AlekseyTs","Number":"33709","RawContent":null,"Title":"Enable to run apps targeting netcoreapp2.1 against netcoreapp3.0","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33709","RelatedDescription":"Open PR \"Enable to run apps targeting netcoreapp2.1 against netcoreapp3.0\" (#33709)"},{"Id":"414884027","IsPullRequest":false,"CreatedAt":"2019-02-27T00:20:12","Actor":"dpoeschl","Number":"33708","RawContent":null,"Title":"Resetting a user-customized color to an \"enhanced\" color is difficult","State":"open","Body":"**Version Used**: 16 P4 28621.222.d16.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Apply \"Enhanced Colors\" from Tools | Options. Methods/Properties/etc. should be colored differently now. You can use this code to try it out (if you're in one of the light themes, then `M` should be brown and `if` should be purple):\r\n```C#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        if (true) { M(); }\r\n    }\r\n}\r\n```\r\n2. Go customize the Method color to Lime under Tools | Options | Environment | Fonts & Colors | Display items | User Members - Methods.\r\n3. Lime methods are hard to read, so try to go reset it to the brown color.\r\n\r\n**Expected Behavior**: There should be a reasonable-ish way to do this.\r\n**Actual Behavior**: It's difficult. As far as I know, you have to:\r\n\r\n1. In Fonts & Colors, reset all color entries that Roslyn considers \"enhanced\" to their default values (there's no way for users to know this sub-list). You can use the \"Use Defaults\" button there, but that resets _everything_.\r\n2. Go to the Options page with the \"Use enhanced colors\" checkbox, **uncheck** the box, hit OK.\r\n3. Go to the Options page with the \"Use enhanced colors\" checkbox, **check** the box, hit OK.\r\n\r\nThings should now be restored.\r\n\r\n**Proposal**: There are really three states -- all colors defaulted, all colors enhanced, or mixed/customized. When in a mixed/custom state, toggling the checkbox doesn't actually do anything AFAICT.\r\n\r\nA button-based mechanism next to the checkbox (or something like this) that can _force_ reset the colors to their IDE-level defaults (ignoring Enhanced Colors) or to the recommended Enhanced Colors (even when they are in a mixed state, which is when the checkbox doesn't like doing anything).","Url":"https://github.com/dotnet/roslyn/issues/33708","RelatedDescription":"Open issue \"Resetting a user-customized color to an \"enhanced\" color is difficult\" (#33708)"},{"Id":"414878956","IsPullRequest":true,"CreatedAt":"2019-02-27T00:00:31","Actor":"dotnet-bot","Number":"33706","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33706","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#33706)"},{"Id":"414875080","IsPullRequest":false,"CreatedAt":"2019-02-26T23:45:26","Actor":"mrlokeshagarwal","Number":"33705","RawContent":null,"Title":"Code Analysis Security Rules CA2100 and CA2105 are not working in Asp.net Core project","State":"open","Body":"**Version Used**: \r\nVS 15.9.2\r\n**Steps to Reproduce**:\r\n\r\n1.  Adding a new .Net Core 2.0 project\r\n2.  Adding Microsoft.CodeAnalysis.FxCopAnalyzers 2.6.3 package into project\r\n3.  Setting the Severity of CA2100 and CA2105 as Error\r\n4. Adding code to produce CA2100 or CA2105\r\n5. Running Code analysis on this project\r\n\r\n**Expected Behavior**:\r\nCode Analysis should show CA2100 or CA2105 as violation (Error) and Error should be thrown\r\n**Actual Behavior**:\r\nNothing happens and Code successfully builds.","Url":"https://github.com/dotnet/roslyn/issues/33705","RelatedDescription":"Open issue \"Code Analysis Security Rules CA2100 and CA2105 are not working in Asp.net Core project\" (#33705)"},{"Id":"414871701","IsPullRequest":true,"CreatedAt":"2019-02-26T23:33:22","Actor":"AlekseyTs","Number":"33704","RawContent":null,"Title":"Follow up on the addition of Preview langversion, handle custom diagnostics.","State":"open","Body":"Fixes #33684.","Url":"https://github.com/dotnet/roslyn/pull/33704","RelatedDescription":"Open PR \"Follow up on the addition of Preview langversion, handle custom diagnostics.\" (#33704)"},{"Id":"414866873","IsPullRequest":true,"CreatedAt":"2019-02-26T23:16:26","Actor":"chsienki","Number":"33703","RawContent":null,"Title":"Nullability for NVT with no constructor argument:","State":"open","Body":"- Explicitly check if an object creation is a nullable value type\r\n- Set its state to nullable when no argument is passed in\r\n- Update tests\r\n\r\nFixes #31502","Url":"https://github.com/dotnet/roslyn/pull/33703","RelatedDescription":"Open PR \"Nullability for NVT with no constructor argument:\" (#33703)"},{"Id":"414829693","IsPullRequest":false,"CreatedAt":"2019-02-26T21:33:20","Actor":"vatsalyaagrawal","Number":"33701","RawContent":null,"Title":"Provide support for highlighting usage of multiple identifiers.","State":"open","Body":"Highlight usages of multiple identifiers - currently, placing the cursor on an identifier highlights all usages of that identifier; user would like to highlight two or more different identifiers. Also the read and write to be highlighted with different colors.","Url":"https://github.com/dotnet/roslyn/issues/33701","RelatedDescription":"Open issue \"Provide support for highlighting usage of multiple identifiers.\" (#33701)"},{"Id":"414802428","IsPullRequest":false,"CreatedAt":"2019-02-26T20:24:27","Actor":"vsccarl","Number":"33700","RawContent":null,"Title":"CSharpUpgradeProjectCodeFixProvider crashes in ASP.Net Core application","State":"open","Body":"Copied from VSO/797009.\r\n\r\n**Version Used**: \r\nAffected Branch: 16.0 Preview 4 \r\nAffected Build: 16.0 Preview 4 [28619.130.d16.0] \r\nAffected Product Language: English \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new ASP.Net Core Application project with template Web Application\r\n2. Edit Startup.cs to contain a c# 8 feature (e.g. static local function)\r\n3. Alt+Enter on the red squiggled static keyword to upgrade the project c# version.\r\n\r\n**Expected Behavior**:\r\nProject is upgrade to c# 8 and I can use static local functions.\r\n\r\n**Actual Behavior**:\r\nYellow warning appears at the top that says \"CSharpUpgradeProjectCodeFixProvider encountered an error and has been disabled\"\r\nWith stack trace\r\n```\r\nSystem.AggregateException : One or more errors occurred. ---> Changing document 'C:\\Users\\dabarbet\\source\\repos\\WebApplication1\\WebApplication1\\Pages\\Privacy.g.cs' is not supported.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n---> (Inner Exception #0) System.NotSupportedException : Changing document 'C:\\Users\\dabarbet\\source\\repos\\WebApplication1\\WebApplication1\\Pages\\Privacy.g.cs' is not supported.\r\n   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)<---\r\n```\r\n\r\nIt seems like this might be expected but it isn't completely clear.","Url":"https://github.com/dotnet/roslyn/issues/33700","RelatedDescription":"Open issue \"CSharpUpgradeProjectCodeFixProvider crashes in ASP.Net Core application\" (#33700)"},{"Id":"414801356","IsPullRequest":false,"CreatedAt":"2019-02-26T20:21:43","Actor":"vsccarl","Number":"33699","RawContent":null,"Title":"Introduce using statement should offer a using declaration in C# 8.0 projects","State":"open","Body":"Copied from VSO/796019. Original by @davidwengier\r\n\r\n**Version Used**: \r\nVersion 16.0.0 Preview 3.0\r\n\r\n**Steps to Reproduce**:\r\nI've enabled C# 8 for my project but the Introduce Using fixer is suggesting to create using blocks. That is perfectly valid, so it could just be a matter of adding another fixer, or option for this one, to add the expression style.\r\n\r\nNote that the suggested fix in my case would result in a compile error (see red squiggle), so as well as driving adoption of new language features, the expression version is potentially more likely to be correct.\r\n\r\n![d52676e2-53a3-4268-8cd8-80c394c0aa94](https://user-images.githubusercontent.com/12900364/53443538-c863d280-39c0-11e9-8f31-f618741a576d.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/33699","RelatedDescription":"Open issue \"Introduce using statement should offer a using declaration in C# 8.0 projects\" (#33699)"},{"Id":"414800185","IsPullRequest":false,"CreatedAt":"2019-02-26T20:18:47","Actor":"vsccarl","Number":"33698","RawContent":null,"Title":"CS8625 reported by Build but not IntelliSense","State":"open","Body":"Copied from VSO/795726. Original by @davidwengier \r\n\r\n**Version Used**: \r\nAffected Branch: Version 16.0.0 Preview 3.0\r\nAffected Build: VisualStudio.16.Preview/16.0.0-pre.3.0+28608.199\r\nAffected Product Language: English\r\n\r\n**Steps to Reproduce**:\r\nSee attached recorded GIF and ETL trace.\r\n\r\nI don't have a minimal repro, but this is from a Windows Forms app targetting .NET Core 3.0, with nullable enabled in the project file, and disabled with #nullable around the main form constructor, to avoid nullable warnings on the generated code.\r\n\r\n**Actual Behavior**:\r\nCS8625 is being reported in the Build context but not IntelliSense context, which means it shows up in the Error List after a build for a few seconds, then goes away once the IntelliSense build is finished and de-duping is done. Flipping to Build Only can get it back of course.\r\n\r\n\r\n![cs8625recording](https://user-images.githubusercontent.com/12900364/53442989-7c645e00-39bf-11e9-82b9-243fe12ed66b.gif)\r\n\r\nTrace:\r\n\\\\mlangfs1\\public\\v-sccarl\\795726\\CS8625Trace.etl.zip","Url":"https://github.com/dotnet/roslyn/issues/33698","RelatedDescription":"Open issue \"CS8625 reported by Build but not IntelliSense\" (#33698)"},{"Id":"414729306","IsPullRequest":false,"CreatedAt":"2019-02-26T18:15:34","Actor":"bkoelman","Number":"33696","RawContent":null,"Title":"Nullable reference types: property access inside lambda","State":"closed","Body":"**Version Used**: \r\nVS 2019 Preview 3\r\n\r\n**Steps to Reproduce**:\r\nConsider the next block of code:\r\n```csharp\r\nif (typeCache.DebuggerNonUserCodeAttribute != null)\r\n{\r\n    ImmutableArray<AttributeData> attributes = memberSymbol.GetAttributes();\r\n    return attributes.Any(attr => typeCache.DebuggerNonUserCodeAttribute.Equals(attr.AttributeClass)); // CS8602\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warning, because property is being checked for `null` before dereferencing it.\r\n\r\n**Actual Behavior**:\r\nCS8602: Possible dereference of a null reference\r\nat `typeCache.DebuggerNonUserCodeAttribute` on the last line","Url":"https://github.com/dotnet/roslyn/issues/33696","RelatedDescription":"Closed issue \"Nullable reference types: property access inside lambda\" (#33696)"},{"Id":"414744280","IsPullRequest":true,"CreatedAt":"2019-02-26T18:02:37","Actor":"gafter","Number":"33697","RawContent":null,"Title":"Correct parsing of a parenthesized constant pattern expression in switch expression arm","State":"open","Body":"Fixes #33675\r\n","Url":"https://github.com/dotnet/roslyn/pull/33697","RelatedDescription":"Open PR \"Correct parsing of a parenthesized constant pattern expression in switch expression arm\" (#33697)"},{"Id":"414712497","IsPullRequest":false,"CreatedAt":"2019-02-26T16:50:25","Actor":"jaredpar","Number":"33695","RawContent":null,"Title":"Microsoft.Net.Compilers.Toolset completion","State":"open","Body":"Once [the PR](https://github.com/dotnet/roslyn/pull/33665) for creating Microsoft.Net.Compilers.Toolset is merged there are several follow up actions that need to be done to complete the change:\r\n\r\n- [ ] Change the checked in toolset of Roslyn to use the package. Need to wait for an official build to complete though so we have a fully signed package.\r\n- [ ] Change the checked in toolset of arcade to use the package.\r\n- [ ] Reach out to [RoslynCodeDomProvider](https://github.com/aspnet/RoslynCodeDomProvider) to help move them to the new package.\r\n- [ ] Ensure the CLI team has an issue tracking them moving to the new package.\r\n- [ ] Delete Microsoft.Net.Compilers and Microsoft.NETCore.Compilers\r\n","Url":"https://github.com/dotnet/roslyn/issues/33695","RelatedDescription":"Open issue \"Microsoft.Net.Compilers.Toolset completion\" (#33695)"},{"Id":"414704175","IsPullRequest":false,"CreatedAt":"2019-02-26T16:33:27","Actor":"bkoelman","Number":"33694","RawContent":null,"Title":"Nullable reference types: parameter nullability not inferred","State":"open","Body":"**Version Used**: \r\nVS 2019 Preview 3\r\n\r\n**Steps to Reproduce**:\r\nConsider the next code snippet:\r\n```csharp\r\nprivate void Move(DirectoryEntry sourceDirectory, DirectoryEntry destinationDirectory)\r\n{\r\n    if (sourceDirectory.Parent == destinationDirectory)\r\n    {\r\n        var name = sourceDirectory.Parent.Name; // CS8602\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warning, because parameter `destinationDirectory` is declared as not-nullable, so `sourceDirectory.Parent` cannot be null inside the if statement.\r\n\r\n**Actual Behavior**:\r\nCS8602: Possible dereference of a null reference\r\nat `sourceDirectory.Parent` inside the `if` statement.","Url":"https://github.com/dotnet/roslyn/issues/33694","RelatedDescription":"Open issue \"Nullable reference types: parameter nullability not inferred\" (#33694)"},{"Id":"414637262","IsPullRequest":false,"CreatedAt":"2019-02-26T14:24:29","Actor":"sharwell","Number":"33693","RawContent":null,"Title":"Expose \"Surround With\" snippets as a refactoring","State":"open","Body":"Currently Surround With snippets are not especially discoverable. An IDE refactoring could be added that adds a Surround With item to the light bulb, and expands the available snippets as items on that menu.","Url":"https://github.com/dotnet/roslyn/issues/33693","RelatedDescription":"Open issue \"Expose \"Surround With\" snippets as a refactoring\" (#33693)"},{"Id":"414576141","IsPullRequest":true,"CreatedAt":"2019-02-26T13:30:14","Actor":"dotnet-bot","Number":"33690","RawContent":null,"Title":"Merge dev16.0 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33690","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to master\" (#33690)"},{"Id":"414576263","IsPullRequest":true,"CreatedAt":"2019-02-26T13:30:10","Actor":"dotnet-bot","Number":"33691","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33691","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33691)"},{"Id":"414576280","IsPullRequest":true,"CreatedAt":"2019-02-26T13:30:05","Actor":"dotnet-bot","Number":"33692","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33692","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33692)"},{"Id":"414501651","IsPullRequest":false,"CreatedAt":"2019-02-26T09:05:30","Actor":"ExplicitlyImplicit","Number":"33689","RawContent":null,"Title":"No warnings or errors are shown inside Visual Studio for rules in .editorconfig","State":"open","Body":"**Version Used**: \r\n\r\nVisual Studio 2017 15.9.7\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a .net core console app (I'm using .net core 2.2)\r\n2. Add an .editorconfig\r\n3. Make some change that violate a rule that has :error or :warning\r\n\r\n<img width=\"187\" alt=\"vs_solution\" src=\"https://user-images.githubusercontent.com/19637414/53400220-b167b500-39ad-11e9-87c3-f5b8b231e6d9.png\">\r\n<img width=\"452\" alt=\"vs_editorconfig\" src=\"https://user-images.githubusercontent.com/19637414/53400231-b4fb3c00-39ad-11e9-8f67-138903be400d.png\">\r\n<img width=\"521\" alt=\"vs_program\" src=\"https://user-images.githubusercontent.com/19637414/53400237-b6c4ff80-39ad-11e9-820f-7b6bcb8951fa.png\">\r\n\r\n**Expected Behavior**:\r\nAn error or a warning is shown inside the text editor view\r\n\r\n**Actual Behavior**:\r\nNo change in the text editor view\r\n\r\n**Notes**\r\nI've tried reloading/restarting but that does not help.\r\nVisual Studio automatically fixes the violation if I format the document.","Url":"https://github.com/dotnet/roslyn/issues/33689","RelatedDescription":"Open issue \"No warnings or errors are shown inside Visual Studio for rules in .editorconfig\" (#33689)"},{"Id":"414498007","IsPullRequest":false,"CreatedAt":"2019-02-26T08:56:32","Actor":"vsfeedback","Number":"33688","RawContent":null,"Title":"Object Browser does not show base types for interfaces","State":"open","Body":"Priority 1 issue tracked by DC \r\n\r\nWhen you selected an interface in Object Browser, there is no way to see interfaces that it implements.  There is no &quot;Base Types&quot; node under the interface like there is for concrete types.  There is no logical reason for this.  This is a problem much more so now than in earlier times.  With the proliferation of dependency injection, code is increasingly using interfaces rather than concrete types.  With more and more open source NuGet packages being used, this problem becomes severe, because most open source packages have zero documentation.  For such packages, the only way to see what interfaces another interface inherits from is to click Go to Definition and look at the metadata.  But object browser would be a so much quicker solution.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/151976/object-browser-does-not-show-base-types-for-interf.html\r\nVSTS ticketId: 525997_\r\n_These are the original issue comments:_\r\n\r\nnull on 1/22/2019, 03:52 AM (34 days ago): <p>Strange: This is only a problem if \"My Solution\" is active. If you select a Framework version there are the nodes \"Base Types\" and \"Derived Types\".</p>\r\n\r\n_These are the original issue solutions:_\r\n\r\nРоман Квасов solved on 3/6/2018, 11:29 AM (356 days ago), 2 votes: \r\n<p>Hey! Is anybody here? it is broken at least are year, it is time to fix it!</p> \r\n","Url":"https://github.com/dotnet/roslyn/issues/33688","RelatedDescription":"Open issue \"Object Browser does not show base types for interfaces\" (#33688)"},{"Id":"414477996","IsPullRequest":false,"CreatedAt":"2019-02-26T07:59:27","Actor":"kg","Number":"33687","RawContent":null,"Title":"Use of two locks / mutex state for compiler server can be eliminated","State":"open","Body":"The review process for #31497 revealed that while there are currently two state bits being used (is the mutex alive/abandoned, is the mutex held) the compiler server likely only needs the held/not held state bit. Cleaning up the code would allow the use of that and eliminate the extra file lock that is used to represent the alive/abandoned state under Mono.\r\n\r\ncc @agocke","Url":"https://github.com/dotnet/roslyn/issues/33687","RelatedDescription":"Open issue \"Use of two locks / mutex state for compiler server can be eliminated\" (#33687)"},{"Id":"414477391","IsPullRequest":false,"CreatedAt":"2019-02-26T07:57:37","Actor":"kg","Number":"33686","RawContent":null,"Title":"Compiler server will leak a lock file when running under Mono","State":"open","Body":"The changes in PR #31497 update the compiler server support to run on Mono but add an issue where the server's lock file will be left on disk after the server terminates. The lock file is 0 bytes (and ideally will be in /tmp) so it's not a major issue, but it's worth cleaning up. The relevant code is in BuildServerConnection.cs.\r\n\r\ncc @jaredpar ","Url":"https://github.com/dotnet/roslyn/issues/33686","RelatedDescription":"Open issue \"Compiler server will leak a lock file when running under Mono\" (#33686)"},{"Id":"414472413","IsPullRequest":false,"CreatedAt":"2019-02-26T07:40:50","Actor":"Droni","Number":"33685","RawContent":null,"Title":"SyntaxFactory.SwitchStatement without parentheses in VS 2019 Preview 3","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 Preview 3\r\n**Steps to Reproduce**:\r\n\r\n1. Use SyntaxFactory.SwitchStatement(ExpressionSyntax) (C#)\r\n\r\n**Expected Behavior**:\r\nThe switch statement should surround the expression with parentheses\r\n\r\n**Actual Behavior**:\r\nThe expression inserts without parentheses\r\n\r\nInside the Visual Studio 2017 (15.9.7) the expression correctly inserts with parentheses but in VS 2019 Preview 3 not. If we manually add parentheses, then in VS 2017, double parentheses will be inserted.","Url":"https://github.com/dotnet/roslyn/issues/33685","RelatedDescription":"Open issue \"SyntaxFactory.SwitchStatement without parentheses in VS 2019 Preview 3\" (#33685)"},{"Id":"414449123","IsPullRequest":false,"CreatedAt":"2019-02-26T06:15:42","Actor":"AlekseyTs","Number":"33684","RawContent":null,"Title":"Incomplete handling of Preview language version in diagnostics","State":"open","Body":"Look for \"8.0\" in src\\Compilers\\CSharp\\Test\\Semantic\\Semantics\\NullableReferenceTypesTests.cs. There are a lot of references to C# 8.0 in error messages. For example:\r\n```\r\n// error CS8630: Invalid 'NullableContextOptions' value: 'Enable' for C# 7.3. Please use language version 8.0 or greater.\r\nDiagnostic(ErrorCode.ERR_NullableOptionNotAvailable).WithArguments(\"NullableContextOptions\", \"Enable\", \"7.3\", \"8.0\").WithLocation(1, 1)\r\n```\r\n\r\nExpected:\r\nThe message to suggest to use \"use the 'preview' language version\" suggestion instead. ","Url":"https://github.com/dotnet/roslyn/issues/33684","RelatedDescription":"Open issue \"Incomplete handling of Preview language version in diagnostics\" (#33684)"},{"Id":"414393449","IsPullRequest":false,"CreatedAt":"2019-02-26T01:59:26","Actor":"gafter","Number":"33683","RawContent":null,"Title":"Quadratic copying of nullable states","State":"open","Body":"In the nullable walker, we copy the states from the elements of one variable to another on assignment.  However, in order to do so we scan all of the elements of the entire state to see if any of them are members of the right-hand-side.  Then, if we find one, we again scan the entire state to see if any of them are members of the that.  And so on.  This process is quadratic in the number of variables.","Url":"https://github.com/dotnet/roslyn/issues/33683","RelatedDescription":"Open issue \"Quadratic copying of nullable states\" (#33683)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"414947522","IsPullRequest":true,"CreatedAt":"2019-02-27T05:08:26","Actor":"Dotnet-GitSync-Bot","Number":"7093","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corert/pull/7093","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7093)"},{"Id":"414927790","IsPullRequest":false,"CreatedAt":"2019-02-27T03:27:20","Actor":"rainbowlee","Number":"7092","RawContent":null,"Title":"Oracle Mysql.Data System.TypeInitializationException:","State":"open","Body":"I wrote a test Project\r\n\r\nPackage Mysql.Data\r\n\r\n### code:\r\nusing System;\r\nusing MySql;\r\n\r\nnamespace TestMysql\r\n{\r\n  class Program\r\n  {\r\n    internal static string MySqlConnectString\r\n    {\r\n      get\r\n      {\r\n        string mysqlConnString = string.Format(\"SERVER={0};UID={1};PWD={2};DATABASE={3};CHARSET=utf8;Pooling=true;Min Pool Size=10;Max Pool Size={4};\",\r\n                                    \"127.0.0.1\", \"dfds\", \"dfds\" , \"dsnode\", 10);\r\n\r\n        return mysqlConnString;\r\n      }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n      for ( int i = 0; i < 10; i++)\r\n      {\r\n        Console.WriteLine(\"count{0}\", i);\r\n        try\r\n        {\r\n          MySql.Data.MySqlClient.MySqlConnection conn = new MySql.Data.MySqlClient.MySqlConnection(MySqlConnectString);\r\n          Console.WriteLine(\"open\");\r\n          conn.Open();\r\n          Console.WriteLine(\"close\");\r\n          conn.Close();\r\n        }\r\n\r\n        catch(Exception ex)\r\n        {\r\n          Console.WriteLine(\"MySql Connection ERROR :{0}\", ex);\r\n        }\r\n      }\r\n      Console.WriteLine(\"Hello World!\");\r\n    }\r\n  }\r\n}\r\n\r\nwhen ran , exception as follows:\r\n\r\nMySql Connection ERROR :System.TypeInitializationException: A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property. ---> System.TypeInitializationException: A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property. ---> System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize ---> System.MissingMethodException: No parameterless constructor defined for this object.\r\n   at System.ActivatorImplementation.CreateInstance(Type, Boolean) + 0xfe\r\n   at System.Configuration.Internal.ConfigSystem.System.Configuration.Internal.IConfigSystem.Init(Type, Object[]) + 0x40\r\n   at System.Configuration.ClientConfigurationSystem..ctor() + 0x47\r\n   at System.Configuration.ConfigurationManager.EnsureConfigurationSystem() + 0x5f\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Configuration.ConfigurationManager.EnsureConfigurationSystem() + 0xfa\r\n   at System.Configuration.ConfigurationManager.PrepareConfigSystem() + 0x13\r\n   at System.Configuration.ConfigurationManager.GetSection(String) + 0x25\r\n   at MySql.Data.MySqlClient.MySqlConfiguration..cctor() + 0x11\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0xd5\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0x18d\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstructionReturnGCStaticBase(StaticClassConstructionContext*, Object) + 0xd\r\n   at MySql.Data.MySqlClient.Replication.ReplicationManager..cctor() + 0x6a\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0xd5\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0x18d\r\n   at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstructionReturnNonGCStaticBase(StaticClassConstructionContext*, IntPtr) + 0xd\r\n   at MySql.Data.MySqlClient.Replication.ReplicationManager.IsReplicationGroup(String) + 0x22\r\n   at MySql.Data.MySqlClient.MySqlConnection.Open() + 0x422\r\n   at TestMysql.Program.Main(String[]) + 0x71\r\n\r\nIs there any idea for this problem? \r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7092","RelatedDescription":"Open issue \"Oracle Mysql.Data System.TypeInitializationException:\" (#7092)"},{"Id":"414927624","IsPullRequest":true,"CreatedAt":"2019-02-27T03:26:26","Actor":"sergiy-k","Number":"7091","RawContent":null,"Title":"[WIP] Add scripts to set up CI with Azure Pipelines","State":"open","Body":"All scripts have been copied from the CoreCLR repo and adjusted for CoreRT.\r\n\r\nThe first goal is enable Windows_NT Debug build without running any tests.","Url":"https://github.com/dotnet/corert/pull/7091","RelatedDescription":"Open PR \"[WIP] Add scripts to set up CI with Azure Pipelines\" (#7091)"},{"Id":"414899180","IsPullRequest":false,"CreatedAt":"2019-02-27T01:21:09","Actor":"yowl","Number":"7090","RawContent":null,"Title":"wasm: Question about ExportedType.IsForwarder","State":"open","Body":"I'm trying out ilc for wasm on some larger programs, and I'm hitting \r\nhttps://github.com/dotnet/corert/blob/5056fd45b076277579c84833060447415b7b9403/src/Common/src/TypeSystem/Ecma/EcmaModule.cs#L305\r\nfor a type that has `IsForwarder == true`.  (Type is `System.Threading.PreAllocatedOverlapped` and it looks in the `implementation` for `System.Private.CoreLib`).  Am I right in thinking this is for types that are forwarded to another assemby using `System.Runtime.CompilerServices.TypeForwardedTo`?  If so I suppose what could be happening is that the module which now contains the type, is not getting this type added through the dependency analysis as the actual reference is to the type when it was in the \"older\" module.  Does that make sense?","Url":"https://github.com/dotnet/corert/issues/7090","RelatedDescription":"Open issue \"wasm: Question about ExportedType.IsForwarder\" (#7090)"},{"Id":"414893982","IsPullRequest":true,"CreatedAt":"2019-02-27T01:00:09","Actor":"nattress","Number":"7089","RawContent":null,"Title":"[SuperIlc] Pass through unmanaged assets during compilation","State":"open","Body":"Improve quality of life by passing through to the output all inputs that aren't managed assemblies. This also includes the input assembly if we're unable to successfully compile the assembly, which is useful during CPAOT workload bring-up. If the input folder is a an published with `dotnet publish --self-contained` and contains the runtime, this results in a nice runnable output folder.","Url":"https://github.com/dotnet/corert/pull/7089","RelatedDescription":"Open PR \"[SuperIlc] Pass through unmanaged assets during compilation\" (#7089)"},{"Id":"414888622","IsPullRequest":true,"CreatedAt":"2019-02-27T00:38:07","Actor":"trylek","Number":"7088","RawContent":null,"Title":"Produce full vtables in CPAOT","State":"open","Body":"I believe it's inappropriate to try to \"optimize\" the VTable\r\nas it's not us, it's the CoreCLR runtime that actually emits the\r\nvtable based on type metadata. In contrast to full AOT, we're not\r\nrequired to produce the complete code graph and so we currently\r\ndon't need the detailed VirtualMethodUse tracking that is required\r\nfor lazy vtable construction to work properly.\r\n\r\nThis change fixes CPAOT build of System.Private.CoreLib, hopefully\r\nthe last remaining issue in CoreCLR framework and ASP.NET assembly\r\nbuilds.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7088","RelatedDescription":"Open PR \"Produce full vtables in CPAOT\" (#7088)"},{"Id":"414857140","IsPullRequest":true,"CreatedAt":"2019-02-26T22:45:31","Actor":"trylek","Number":"7087","RawContent":null,"Title":"Fix CPAOT build of three more ASP.NET assemblies","State":"open","Body":"1) throw \"requires runtime JIT\" on INITCLASS / INITINSTCLASS like\r\nCrossgen does;\r\n\r\n2) throw \"requires runtime JIT\" on embedMethodHandle like Crossgen\r\ndoes;\r\n\r\n3) Apply GetMangledMethodName in MethodFixupSignature to fix\r\nspurious symbol name matches.\r\n\r\n4) In ImportedMethodNode, suppress constrained type for local methods;\r\notherwise we could end up with two different TypeAndMethod keys\r\n(because of the different constrained type) but we ended up\r\nproducing an identical LocalMethodImport in both cases.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7087","RelatedDescription":"Open PR \"Fix CPAOT build of three more ASP.NET assemblies\" (#7087)"},{"Id":"414466328","IsPullRequest":true,"CreatedAt":"2019-02-26T21:47:16","Actor":"nattress","Number":"7082","RawContent":null,"Title":"Add tests for CPAOT method handle lookup","State":"closed","Body":"This is the remains of my method handle PR after rebasing against Tomas' very similar change.\r\n\r\n* Test a variety of method handle lookups\r\n\r\n* Generic methods need an instantiating stub in their signature when looking up their method handle.","Url":"https://github.com/dotnet/corert/pull/7082","RelatedDescription":"Closed or merged PR \"Add tests for CPAOT method handle lookup\" (#7082)"},{"Id":"414475540","IsPullRequest":true,"CreatedAt":"2019-02-26T21:46:07","Actor":"nattress","Number":"7083","RawContent":null,"Title":"[CPAOT] Fix GC Ref Map Emission for uncompilable methods","State":"closed","Body":"`ReadyToRunCodegenNodeFactory` always wraps method entry points in an import helper cell. This is not correct when simply asking that a method be compiled such as when rooting methods for compilation. Separate the two concepts so it's possible to ask for either a method's code to be added to the graph (`MethodEntryPoint`) so we can express that we want a method to be compiled, and `ImportedMethodNode` which will wrap the entrypoint with a method import cell. `ImportedMethodNode` should be used at callsites where the import is actually needed.\r\n\r\nWith this fix, we no longer root method import cells for every method at the beginning of compilation; their presence should now rely on the calling method compiling successfully. Methods that refer to the indeterminate sized `Vector<T>` will no longer leave orphaned method imports with gc ref maps that can't compute the size of that type.\r\n\r\nThis fixes compilation of microsoft.aspnetcore.server.kestrel.core in the WebAPI workload.\r\n","Url":"https://github.com/dotnet/corert/pull/7083","RelatedDescription":"Closed or merged PR \"[CPAOT] Fix GC Ref Map Emission for uncompilable methods\" (#7083)"},{"Id":"414795101","IsPullRequest":true,"CreatedAt":"2019-02-26T20:06:18","Actor":"yowl","Number":"7086","RawContent":null,"Title":"wasm: fix for Initobj fails to compile for structs with double fields","State":"open","Body":"There was no path for initialising double fields in structs so the following struct failed to compile the Initobj call:\r\n```\r\npublic struct StructWithDouble\r\n{\r\n    public double DoubleField;\r\n}\r\n```\r\nThis PR adds double support for Initobj opcode.","Url":"https://github.com/dotnet/corert/pull/7086","RelatedDescription":"Open PR \"wasm: fix for Initobj fails to compile for structs with double fields\" (#7086)"},{"Id":"414689687","IsPullRequest":true,"CreatedAt":"2019-02-26T16:05:39","Actor":"trylek","Number":"7085","RawContent":null,"Title":"Fix spurious duplicate symbol in Microsoft.EntityFrameworkCore.Design","State":"open","Body":"Thanks to help from Michal I have discovered that two structurally\r\ndifferent methods on instantiated types can have identical textual\r\nrepresentation as the type / method definition can contain references\r\nto different generic argument indices that just happen to resolve\r\nto the same types in the instantiated entity. Based on Michal's\r\nsuggestion I have changed context method formating to use the\r\nNameMangler formatting methods that take care of this issue.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7085","RelatedDescription":"Open PR \"Fix spurious duplicate symbol in Microsoft.EntityFrameworkCore.Design\" (#7085)"},{"Id":"414647004","IsPullRequest":false,"CreatedAt":"2019-02-26T14:43:35","Actor":"MarcoRossignoli","Number":"7084","RawContent":null,"Title":"Bump build tools to support vs 2019","State":"open","Body":"I need https://github.com/dotnet/buildtools/pull/2205 to open projects(ILVerify) with vs 2019\r\nI tried to bump build version to corefx one https://github.com/dotnet/corefx/blob/c8e44c3d027d0539e7f9091336cc48e59e7d03e8/eng/dependencies.props#L61 but after that repo build fails.\r\n\r\n/cc @jkotas @MichalStrehovsky ","Url":"https://github.com/dotnet/corert/issues/7084","RelatedDescription":"Open issue \"Bump build tools to support vs 2019\" (#7084)"},{"Id":"414412013","IsPullRequest":true,"CreatedAt":"2019-02-26T06:54:22","Actor":"Dotnet-GitSync-Bot","Number":"7081","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7081","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7081)"},{"Id":"414320190","IsPullRequest":true,"CreatedAt":"2019-02-26T03:12:11","Actor":"Dotnet-GitSync-Bot","Number":"7079","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ericstj @marek-safar @filipnavara","Url":"https://github.com/dotnet/corert/pull/7079","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7079)"},{"Id":"414344841","IsPullRequest":true,"CreatedAt":"2019-02-25T22:48:52","Actor":"sbomer","Number":"7080","RawContent":null,"Title":"Set up CI with Azure Pipelines","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7080","RelatedDescription":"Open PR \"Set up CI with Azure Pipelines\" (#7080)"},{"Id":"413641865","IsPullRequest":true,"CreatedAt":"2019-02-25T21:36:37","Actor":"Dotnet-GitSync-Bot","Number":"7074","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7074","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7074)"},{"Id":"413695008","IsPullRequest":true,"CreatedAt":"2019-02-25T19:24:12","Actor":"MichalStrehovsky","Number":"7075","RawContent":null,"Title":"Make binary serialization work","State":"closed","Body":"Three parts:\r\n\r\n* Expose serialization-related metadata in the type system.\r\n* Poke holes into reflection blocking to make binary serialization work for FX types\r\n* Update the usage based metadata analyzer to scan for binary serialization.\r\n\r\nThis fixes about 300 failing tests newly exposed in #6987.","Url":"https://github.com/dotnet/corert/pull/7075","RelatedDescription":"Closed or merged PR \"Make binary serialization work\" (#7075)"},{"Id":"413877055","IsPullRequest":true,"CreatedAt":"2019-02-24T22:33:06","Actor":"MichalStrehovsky","Number":"7078","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"git merge 617d11b313ebdf83cd4e697dd0b04c290472d4ad\r\n\r\nNot picking up the header change that messed up Redhawk.","Url":"https://github.com/dotnet/corert/pull/7078","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7078)"},{"Id":"413695028","IsPullRequest":true,"CreatedAt":"2019-02-24T16:08:12","Actor":"MichalStrehovsky","Number":"7076","RawContent":null,"Title":"Fix generation of type forwarder metadata","State":"closed","Body":"We were not setting the public key/token for the reference.","Url":"https://github.com/dotnet/corert/pull/7076","RelatedDescription":"Closed or merged PR \"Fix generation of type forwarder metadata\" (#7076)"},{"Id":"413711302","IsPullRequest":true,"CreatedAt":"2019-02-23T16:23:04","Actor":"yowl","Number":"7077","RawContent":null,"Title":"WIP: wasm: fix for incorrect use of VirtualMethodUseNode for generic method","State":"open","Body":"fixes #7073 .  Generic virtual methods were creating a `VirtualMethodUseNode` which I understand to be incorrect.  This PR adds a test for this type of call and calls `NodeFactory.MethodEntrypoint` instead.  I'd welcome feedback on how correct that is, it passes the simple test here, but possibly I'm not understanding the full implication.  Also I've not changed the processing for the `Ldvirtftn` opcode, would that suffer the same problem and if so, how would that be exercised?","Url":"https://github.com/dotnet/corert/pull/7077","RelatedDescription":"Open PR \"WIP: wasm: fix for incorrect use of VirtualMethodUseNode for generic method\" (#7077)"},{"Id":"413631372","IsPullRequest":false,"CreatedAt":"2019-02-23T00:38:11","Actor":"yowl","Number":"7073","RawContent":null,"Title":"wasm: A generic method on an interface fails to compile","State":"open","Body":"The following code fails to compile as it hits an assert:\r\n```\r\n    private static void TestVirtualMethodUse()\r\n    {\r\n        TestGenItf implInt = new TestGenItf();\r\n        implInt.Log<object>(new object());\r\n    }\r\n\r\n    public interface ITestGenItf\r\n    {\r\n        bool Log<TState>(TState state);\r\n    }\r\n\r\n    public class TestGenItf : ITestGenItf\r\n    {\r\n        public bool Log<TState>(TState state)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n```\r\n\r\nHits the assert at \r\nhttps://github.com/dotnet/corert/blob/a99bac8c410b9cbb2b5f6583105ea53db372e61d/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/VirtualMethodUseNode.cs#L39\r\nwhen compiling the method `{[HelloWasm]Program+TestGenItf.Log<TState>(!!0)}`\r\n\r\nStack is\r\n```\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Debug.Assert(bool condition, string message, string detailMessage) Line 107\tC#\r\n>\tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.VirtualMethodUseNode.VirtualMethodUseNode(Internal.TypeSystem.MethodDesc decl) Line 39\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.CreateNodeCaches.AnonymousMethod__36_19(Internal.TypeSystem.MethodDesc method) Line 303\tC#\r\n \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode>.GetOrAdd(Internal.TypeSystem.MethodDesc key, System.Func<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode> valueFactory) Line 989\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NodeCache<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode>.GetOrAdd(Internal.TypeSystem.MethodDesc key) Line 150\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.VirtualMethodUse(Internal.TypeSystem.MethodDesc decl) Line 885\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.AddVirtualMethodReference(Internal.TypeSystem.MethodDesc method) Line 2330\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.HandleCall(Internal.TypeSystem.MethodDesc callee, Internal.TypeSystem.MethodSignature signature, Internal.IL.StackEntry[] argumentValues, Internal.IL.ILOpcode opcode, Internal.TypeSystem.TypeDesc constrainedType, LLVMSharp.LLVMValueRef calliTarget, Internal.TypeSystem.TypeDesc forcedReturnType) Line 2037\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.HandleCall(Internal.TypeSystem.MethodDesc callee, Internal.TypeSystem.MethodSignature signature, Internal.IL.ILOpcode opcode, Internal.TypeSystem.TypeDesc constrainedType, LLVMSharp.LLVMValueRef calliTarget) Line 2029\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportCall(Internal.IL.ILOpcode opcode, int token) Line 1688\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlock(Internal.IL.ILImporter.BasicBlock basicBlock) Line 581\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlocks() Line 304\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.Import() Line 163\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CompileMethod(ILCompiler.WebAssemblyCodegenCompilation compilation, ILCompiler.DependencyAnalysis.WebAssemblyMethodCodeNode methodCodeNodeNeedingCode) Line 86\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.ComputeDependencyNodeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> obj) Line 62\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> deferredStaticDependencies) Line 139\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeMarkedNodes() Line 262\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.CompileInternal(string outputFile, ILCompiler.ObjectDumper dumper) Line 51\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.ILCompiler.ICompilation.Compile(string outputFile, ILCompiler.ObjectDumper dumper) Line 382\tC#\r\n \tilc.dll!ILCompiler.Program.Run(string[] args) Line 574\tC#\r\n \tilc.dll!ILCompiler.Program.Main(string[] args) Line 730\tC#\r\n```","Url":"https://github.com/dotnet/corert/issues/7073","RelatedDescription":"Open issue \"wasm: A generic method on an interface fails to compile\" (#7073)"},{"Id":"413582574","IsPullRequest":true,"CreatedAt":"2019-02-22T22:28:10","Actor":"Dotnet-GitSync-Bot","Number":"7072","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7072","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7072)"},{"Id":"413511611","IsPullRequest":true,"CreatedAt":"2019-02-22T17:51:48","Actor":"kouvel","Number":"7071","RawContent":null,"Title":"Change Timer implementation on Unixes to use only one scheduling thread","State":"open","Body":"- Separated from https://github.com/dotnet/corert/pull/7066\r\n\r\nCC @filipnavara ","Url":"https://github.com/dotnet/corert/pull/7071","RelatedDescription":"Open PR \"Change Timer implementation on Unixes to use only one scheduling thread\" (#7071)"},{"Id":"413336838","IsPullRequest":true,"CreatedAt":"2019-02-22T17:41:03","Actor":"filipnavara","Number":"7069","RawContent":null,"Title":"Fix timer firing bug introduced in commit e652d4d (#6905 / #6898)","State":"closed","Body":"This is minimal fix for the problem described in https://github.com/dotnet/corert/pull/7066. I took the liberty to also include the accompanying test from that PR. I fully anticipate that this fix will eventually get superseded by the fix from #7066, but I would like to fix the regression as fast as possible for the master builds without waiting for unrelated changes to diagnostic counters.\r\n\r\n/cc @kouvel @jkotas ","Url":"https://github.com/dotnet/corert/pull/7069","RelatedDescription":"Closed or merged PR \"Fix timer firing bug introduced in commit e652d4d (#6905 / #6898)\" (#7069)"},{"Id":"413341138","IsPullRequest":true,"CreatedAt":"2019-02-22T14:03:16","Actor":"MichalStrehovsky","Number":"7070","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"We need to specify SkipImportRoslynProps because we don't want to include the props file from a bogus file path below, but we do want the 8.0 LangVersion treatment in ProjectN. Since this line is temporary until Roslyn decides that 8.0 is in fact the latest version, I don't feel too bad about this.","Url":"https://github.com/dotnet/corert/pull/7070","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#7070)"},{"Id":"413316220","IsPullRequest":true,"CreatedAt":"2019-02-22T10:33:17","Actor":"Dotnet-GitSync-Bot","Number":"7068","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7068","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7068)"},{"Id":"412787041","IsPullRequest":true,"CreatedAt":"2019-02-22T09:26:35","Actor":"Dotnet-GitSync-Bot","Number":"7065","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7065","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7065)"},{"Id":"413152043","IsPullRequest":true,"CreatedAt":"2019-02-21T22:24:05","Actor":"filipnavara","Number":"7067","RawContent":null,"Title":"Move Thread to shared CoreLib","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22744.","Url":"https://github.com/dotnet/corert/pull/7067","RelatedDescription":"Open PR \"Move Thread to shared CoreLib\" (#7067)"},{"Id":"413116684","IsPullRequest":true,"CreatedAt":"2019-02-21T20:47:42","Actor":"kouvel","Number":"7066","RawContent":null,"Title":"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes","State":"open","Body":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- May depend on https://github.com/dotnet/coreclr/pull/22754\r\n- Fixed `Timer` implementation on Unixes. Previously there was only ever one timer request from the upper-level implementation and that is not the case anymore, so the lower-level \"app domain timer\" implementation needed to handle multiple timer requests.","Url":"https://github.com/dotnet/corert/pull/7066","RelatedDescription":"Open PR \"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes\" (#7066)"},{"Id":"412718852","IsPullRequest":true,"CreatedAt":"2019-02-21T07:36:24","Actor":"Dotnet-GitSync-Bot","Number":"7064","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7064","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7064)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"414342537","IsPullRequest":true,"CreatedAt":"2019-02-27T01:24:23","Actor":"nguerrera","Number":"2990","RawContent":null,"Title":"Add hook to redirect common props, only ref m.nc.platforms when necessary","State":"closed","Body":"1. Introduce $(AlternateCommonProps) to redirect the Sdk common props import to a user-defined location. This is morally equivalent to $(LanguageTargets) being customizable on the targets side. Having full control over both of these imports makes it much easier to integrate the SDK into existing heavily-customized builds. The current use case is to get some internal builds over to netcoreapp3.0\r\n\r\n2. Getting an intermittent error about 'vs' not being found from dogfood script. Removing unnecessary setting of msbuildEngine seems to have fixed it.\r\n\r\n3. With https://github.com/dotnet/core-sdk/pull/698, microsoft.netcore.platforms becomes the only package that cannot be resolved from packs. Make it so that we only pull it in when there are other package references. Otherwise, nuget doesn't need to see it as a package reference. This is just moving the temporary solution around, but means that we can get a working offline experience before we figure out how to adress the runtime graph going into to nuget (or sdk taking over for nuget).","Url":"https://github.com/dotnet/sdk/pull/2990","RelatedDescription":"Closed or merged PR \"Add hook to redirect common props, only ref m.nc.platforms when necessary\" (#2990)"},{"Id":"414599677","IsPullRequest":true,"CreatedAt":"2019-02-26T14:21:42","Actor":"dotnet-maestro[bot]","Number":"2991","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2991","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2991)"},{"Id":"414093522","IsPullRequest":true,"CreatedAt":"2019-02-25T14:21:40","Actor":"dotnet-maestro[bot]","Number":"2988","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2988","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2988)"},{"Id":"414119637","IsPullRequest":false,"CreatedAt":"2019-02-25T14:02:53","Actor":"loop-evgeny","Number":"2989","RawContent":null,"Title":"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"","State":"open","Body":"I created a new console application in VS 2017 using .NET Core 2.1. Published it as a self-contained linux-x64 app without any changes and tried to run it on an Ubuntu 18.04 VM. Got this error:\r\n\r\n```\r\n ./LinuxTest \r\nThis executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\r\nA fatal error was encountered. This executable was not bound to load a managed DLL.\r\n```\r\n\r\nc3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 is apparently the SHA256 hash of \"foobar\", so whatever the real problem is, this is a very weird error message, too!\r\n\r\nLinuxTest.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProgram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace LinuxTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nResulting self-contained binary: [LinuxTest.zip](https://github.com/dotnet/sdk/files/2900841/LinuxTest.zip)\r\n\r\nIf I install dotnet-runtime-2.1 on the Linux VM and run `dotnet LinuxTest.dll` it works.","Url":"https://github.com/dotnet/sdk/issues/2989","RelatedDescription":"Open issue \"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"\" (#2989)"},{"Id":"413818973","IsPullRequest":true,"CreatedAt":"2019-02-25T13:00:49","Actor":"dotnet-maestro[bot]","Number":"2985","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2985","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2985)"},{"Id":"413197636","IsPullRequest":false,"CreatedAt":"2019-02-25T02:30:23","Actor":"natemcmaster","Number":"2976","RawContent":null,"Title":"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec","State":"closed","Body":"https://github.com/dotnet/sdk/blob/0690b28e426f5b7e6dfe7ab4200b83ce3c96bc95/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L81-L87\r\n\r\nThis should probably have been 'PrivateAssets=All'. \r\n\r\nAll aspnet 3.0 Preview 3 packages which target netcoreapp3.0 have this dependency in their nuspec. cc @Eilon @livarcocc \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/53213059-4e1c0280-35fc-11e9-9591-32f81f33502c.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2976","RelatedDescription":"Closed issue \"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec\" (#2976)"},{"Id":"413886149","IsPullRequest":true,"CreatedAt":"2019-02-25T02:30:21","Actor":"dotnet-bot","Number":"2987","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2987","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2987)"},{"Id":"413843026","IsPullRequest":true,"CreatedAt":"2019-02-24T21:53:25","Actor":"dsplaisted","Number":"2986","RawContent":null,"Title":"Mark implicit platforms package reference as PrivateAssets","State":"closed","Body":"Fixes #2976","Url":"https://github.com/dotnet/sdk/pull/2986","RelatedDescription":"Closed or merged PR \"Mark implicit platforms package reference as PrivateAssets\" (#2986)"},{"Id":"413641877","IsPullRequest":false,"CreatedAt":"2019-02-24T18:29:59","Actor":"SergeyKhutornoy","Number":"2982","RawContent":null,"Title":"donet publish always publishes web.Release.config","State":"closed","Body":"When you run dotnet publish command for a Microsoft.NET.Sdk.Web project targeting **net462**, the tool always publishes web.*.config files (web.debug.config and web.release.config in addition to the transformed web.config).\r\n\r\nProject file (.csproj):\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <ProductVersion>8.0.30703</ProductVersion>\r\n    <ProjectGuid>{842f247f-8658-4b47-b9cf-5582f7c1e26e}</ProjectGuid>\r\n    <RootNamespace>Service</RootNamespace>\r\n    <AssemblyName>Service</AssemblyName>\r\n    <TargetFramework>net462</TargetFramework>\r\n    <AssemblyTitle>Service</AssemblyTitle>\r\n    <OutputPath>bin\\$(Configuration)\\</OutputPath>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.configuration\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n    <Reference Include=\"System.ServiceModel\" />\r\n    <Reference Include=\"System\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n## Steps to reproduce\r\n1. Create web.config, web.Debug.config, web.Release.config files in the project root folder.\r\n2. Run `dotnet publish /p:Configuration=Release`\r\n\r\nor\r\n\r\n1. Create web.config, web.Debug.config, web.Release.config files in the project root folder.\r\n2. Run `msbuild Service.csproj /p:DeployOnBuild=true /p:Configuration=Release /p:PublishProfile=FolderProfile`\r\n\r\n## Expected behavior\r\nThere is only transformed web.config file in the publish folder.\r\n\r\n## Actual behavior\r\nweb.config, web.release.config, web.debug.config files are in the publish folder.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]","Url":"https://github.com/dotnet/sdk/issues/2982","RelatedDescription":"Closed issue \"donet publish always publishes web.Release.config\" (#2982)"},{"Id":"413639072","IsPullRequest":false,"CreatedAt":"2019-02-24T18:29:13","Actor":"YankdaCode","Number":"2981","RawContent":null,"Title":"Error on implementing custom FileProvider - Cannot find compilation library location for package 'projectCLB'","State":"closed","Body":"So, I am designing a very customized solution from scratch wherein I have asp.net mvc core app as the main web app. Then I create separate class libraries and update the SDK to Microsoft.NET.Sdk.Razor and use:\r\n    `<PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.2.0\" />`\r\nThis allows me to create MVC type class library, lets say \"projectCLB\" and then at startup I scan the folder that is located outside of the project main directory and load the assemblies for my project:\r\nprojectCLB.dll\r\nprojectCLB.Views.dll\r\n\r\nThis was working fine by the following code:\r\n`\r\n```\r\nAssembly assembly;\r\n                try\r\n                {\r\n                    assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(file.FullName);\r\n                }\r\n                catch (FileLoadException ex)\r\n                {\r\n                    // If assembly is already loaded, we'll just catch it and continue to the next one, plugins can have same dependencies:\r\n                    if (ex.Message == \"Assembly with same name is already loaded\")\r\n                    {\r\n                        continue;\r\n                    }\r\n                    throw;\r\n                }\r\n\r\n// Check if the assembly has already been loaded:\r\n                if (!(mvcBuilder.PartManager.ApplicationParts.Any(x => x.Name == assembly.GetName().Name)))\r\n                {\r\n                    //Load the pre-compiled Views:\r\n                    if (assembly.ManifestModule.Name.Contains(\".Views.dll\"))\r\n                    {\r\n                        mvcBuilder.ConfigureApplicationPartManager(mgr =>\r\n                        {\r\n                            foreach (var b in CompiledRazorAssemblyApplicationPartFactory.GetDefaultApplicationParts(assembly))\r\n                            {\r\n                                mvcBuilder.ConfigureApplicationPartManager(apm => apm.ApplicationParts.Add(b));\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n                    // Load the plug in assemblies:\r\n                    else\r\n                    {\r\n                        \r\n                        mvcBuilder.AddApplicationPart(assembly);\r\n                     \r\n                       \r\n\r\n                    }\r\n\r\n                }\r\n```\r\n`\r\n\r\n\r\nThis is how my class library project file looks:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\r\n\r\n\r\n  <PropertyGroup Label=\"Globals\">\r\n    <SccProjectName>SAK</SccProjectName>\r\n    <SccProvider>SAK</SccProvider>\r\n    <SccAuxPath>SAK</SccAuxPath>\r\n    <SccLocalPath>SAK</SccLocalPath>\r\n  </PropertyGroup>\r\n\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    \r\n  </PropertyGroup>\r\n\r\n\r\n  <ItemGroup>\r\n    \r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"Content\\\" />\r\n    <Folder Include=\"Infrastructure\\Data\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n\r\n    <ProjectReference Include=\"..\\..\\<baseapp project>.Common\\baseapp project.Common.csproj\" />\r\n\r\n    <ProjectReference Include=\"..\\..\\baseapp project.Data\\baseapp project.Data.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\baseapp project.Repositories\\baseapp project.Repositories.csproj\" />\r\n  </ItemGroup>\r\n  <Target Name=\"UpdateTargetPath\" BeforeTargets=\"AssignRazorGenerateTargetPaths\">\r\n    <ItemGroup>\r\n      <RazorGenerate Include=\"@(RazorGenerate)\" Link=\"$(TargetName)\\plugin\\%(RazorGenerate.RelativeDir)%(RazorGenerate.FileName)%(RazorGenerate.Extension)\" />\r\n\r\n    </ItemGroup>\r\n  </Target>\r\n \r\n\r\n</Project>\r\n\r\n```\r\n\r\nIt was working all fine until I implemented a File Provider so that we can use cshtml files at development time instead of precompiled views since I was having to copy the dlls/ rebuild after a cshtml change. \r\nReason being that PhysicalFileProvider doesn't look outside of the webroot. Now I get this error and there are other posts that I saw but none of the workarounds actually work for me.\r\n\r\n\r\n`System.InvalidOperationException: Cannot find compilation library location for package 'projectCLB'\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n   at System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.LazyMetadataReferenceFeature.get_References()\r\n   at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine.ProcessCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)`","Url":"https://github.com/dotnet/sdk/issues/2981","RelatedDescription":"Closed issue \"Error on implementing custom FileProvider - Cannot find compilation library location for package 'projectCLB'\" (#2981)"},{"Id":"413780813","IsPullRequest":true,"CreatedAt":"2019-02-24T04:32:29","Actor":"dsplaisted","Number":"2984","RawContent":null,"Title":"Add CI legs to run tests as tools","State":"open","Body":"Eventually I'd like to use the tests from this repo in other repos such as dotnet/core-sdk.  This PR adds CI legs which runs the tests as tools, in order to make sure they run correctly as tools.","Url":"https://github.com/dotnet/sdk/pull/2984","RelatedDescription":"Open PR \"Add CI legs to run tests as tools\" (#2984)"},{"Id":"413693389","IsPullRequest":true,"CreatedAt":"2019-02-23T14:21:28","Actor":"dotnet-maestro[bot]","Number":"2983","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2983","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2983)"},{"Id":"413638871","IsPullRequest":true,"CreatedAt":"2019-02-23T01:33:35","Actor":"natemcmaster","Number":"2980","RawContent":null,"Title":"Change publish feed to workaround 'Waiting to obtain an exclusive lock on the feed.'","State":"open","Body":"We're getting consistent build timeouts. Changing to a unique feed instead. \n\nNote!!! Each upstream repo will need to add this to restore sources.","Url":"https://github.com/dotnet/sdk/pull/2980","RelatedDescription":"Open PR \"Change publish feed to workaround 'Waiting to obtain an exclusive lock on the feed.'\" (#2980)"},{"Id":"413617702","IsPullRequest":true,"CreatedAt":"2019-02-22T23:24:14","Actor":"wli3","Number":"2979","RawContent":null,"Title":"Fix 1.0 project tools missing dll in runtime","State":"open","Body":"By Disabling targeting pack reference in generate deps.json\r\n\r\nIn short, since generating deps.json in 2.x.xxx SDK does not have Microsoft.NETCore.App reference. We need to do the same for 2.x.xxx.\r\n\r\nDetail:\r\n\r\nProject Tools deps.json generator is not ideal. When restore, since we don’t know what is the tool’s TFM before restoring it, we will always restore with SDK’s TFM, which is netcoreapp3.0.\r\n\r\nIn 2.x.xxx time due to special restore logic, there is no reference to Microsoft.NETCore.App in asset.json file. So when generate deps.son, assets from the packages will be in deps.json instead of being removed by conflict resolution. This is important since when invoke the command, 1.0 runtime will be used (due to the tool is targeting 1.0), and 1.0 runtime will not have all the dlls restored in netcoreapp2.0 TFM available to load these dll need dep.json.\r\n\r\nAnd now in 3.0, ImplicitFrameworkReferences need to be disabled to match existing “no reference to Microsoft.NETCore.App” behavior.","Url":"https://github.com/dotnet/sdk/pull/2979","RelatedDescription":"Open PR \"Fix 1.0 project tools missing dll in runtime\" (#2979)"},{"Id":"413284966","IsPullRequest":false,"CreatedAt":"2019-02-22T21:29:36","Actor":"jimmylewis","Number":"2977","RawContent":null,"Title":"Installing 3.0 Preview 3 SDK broke build for 3.0 Preview 2 Razor Components app","State":"closed","Body":"I created an app with the Preview 2 SDK (released bits).  Today I installed the latest available Preview 3 bits (https://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/3.0.1xx/dotnet-sdk-latest-win-x64.exe) and now I get build errors for the Razor Components cshtml files.  I'm not sure if this is expected, since there have been a lot of changes in this area between Preview 2 and Preview 3.\r\n\r\nInstallation reported these bits, for context:\r\n>The following were installed at: 'C:\\Program Files\\dotnet'\r\n>    • .NET Core SDK 3.0.100-preview3-010343\r\n>    • .NET Core Runtime 3.0.0-preview3-27421-7\r\n>    • ASP.NET Core Runtime 3.0.0-preview3-19121-17\r\n>    • .NET Core Windows Desktop Runtime 3.0.0-preview3-27420-40\r\n\r\nThe build errors I get are like this one (note, it's in a generated file for the .cshtml):\r\n> obj\\Debug\\netstandard2.0\\Razor\\Pages\\Counter.cshtml.g.cs(35,48): error CS0234: The type or namespace name 'EventCallback' does not exist in the namespace 'Microsoft.AspNetCore.Components' (are you missing an assembly reference?) [D:\\src\\AppBuilding\\src\\OrderSite.App\\OrderSite.App.csproj]\r\n\r\nThe generated line of code is:\r\n```\r\nbuilder.AddAttribute(7, \"onclick\", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, IncrementCount));\r\n```\r\n\r\nWith the Preview 2 SDK, the generated line of code was:\r\n\r\n```\r\nbuilder.AddAttribute(7, \"onclick\", Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Components.UIMouseEventArgs>(IncrementCount));\r\n```\r\n\r\nNote: if I create a new Razor Components project with the Preview 3 SDK installed, it builds fine.  The project created is very different from the Preview 2 template however.","Url":"https://github.com/dotnet/sdk/issues/2977","RelatedDescription":"Closed issue \"Installing 3.0 Preview 3 SDK broke build for 3.0 Preview 2 Razor Components app\" (#2977)"},{"Id":"412718584","IsPullRequest":true,"CreatedAt":"2019-02-22T19:32:40","Actor":"tmat","Number":"2971","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/sdk/pull/2971","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#2971)"},{"Id":"413394061","IsPullRequest":true,"CreatedAt":"2019-02-22T14:46:46","Actor":"dotnet-maestro[bot]","Number":"2978","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2978","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2978)"},{"Id":"413180902","IsPullRequest":true,"CreatedAt":"2019-02-22T02:00:20","Actor":"dotnet-bot","Number":"2975","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2975","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2975)"},{"Id":"412792797","IsPullRequest":true,"CreatedAt":"2019-02-21T19:16:46","Actor":"dsplaisted","Number":"2972","RawContent":null,"Title":"Add test and fix self-contained app using ASP.NET Core","State":"closed","Body":"Test scenario for https://github.com/aspnet/AspNetCore/issues/7782","Url":"https://github.com/dotnet/sdk/pull/2972","RelatedDescription":"Closed or merged PR \"Add test and fix self-contained app using ASP.NET Core\" (#2972)"},{"Id":"412890450","IsPullRequest":true,"CreatedAt":"2019-02-21T15:00:25","Actor":"dotnet-bot","Number":"2973","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2973","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2973)"},{"Id":"412913042","IsPullRequest":true,"CreatedAt":"2019-02-21T14:16:41","Actor":"dotnet-maestro[bot]","Number":"2974","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2974","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2974)"},{"Id":"412680563","IsPullRequest":true,"CreatedAt":"2019-02-21T06:42:17","Actor":"nugetlurker","Number":"2970","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2970","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into sdk\" (#2970)"},{"Id":"412680549","IsPullRequest":true,"CreatedAt":"2019-02-21T06:41:58","Actor":"nugetlurker","Number":"2969","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2969","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into sdk\" (#2969)"},{"Id":"412603209","IsPullRequest":true,"CreatedAt":"2019-02-21T00:12:52","Actor":"dsplaisted","Number":"2965","RawContent":null,"Title":"Update stage 0, Fix .NET Standard 2.1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2965","RelatedDescription":"Closed or merged PR \"Update stage 0, Fix .NET Standard 2.1\" (#2965)"},{"Id":"412613270","IsPullRequest":true,"CreatedAt":"2019-02-20T21:40:19","Actor":"wli3","Number":"2967","RawContent":null,"Title":"WIP Update stage0 and nuget","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2967","RelatedDescription":"Closed or merged PR \"WIP Update stage0 and nuget\" (#2967)"},{"Id":"412641119","IsPullRequest":true,"CreatedAt":"2019-02-20T21:39:36","Actor":"wli3","Number":"2968","RawContent":null,"Title":"WIP merge release/2.2.2xx to release/release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2968","RelatedDescription":"Open PR \"WIP merge release/2.2.2xx to release/release/3.0.1xx\" (#2968)"},{"Id":"412604385","IsPullRequest":false,"CreatedAt":"2019-02-20T20:03:26","Actor":"tmat","Number":"2966","RawContent":null,"Title":"Global tool shims: Store package version in Win32 version resource ","State":"open","Body":"**Issue**\r\n\r\nCurrently the tool shim embeds a relative path to the target .dll in a `.data` section that includes package version:\r\n\r\nFor example:\r\n```\r\n.store\\microsoft.dotnet.darc\\1.1.0-beta.19081.1\\microsoft.dotnet.darc\\1.1.0-beta.19081.1\\tools\\netcoreapp2.1\\any\\Microsoft.DotNet.Darc.dll\r\n```\r\n\r\nThis design makes it very difficult to change the version number in a post-build step. \r\nThis approach is not compatible with some of our build tools and deterministic build tools that build artifacts without versions and stamp them with the version afterwards.\r\n\r\n**Proposal**\r\n\r\nInstead of embedding relative path, store the package version in a version resource, read the version and construct the path in the shim.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2966","RelatedDescription":"Open issue \"Global tool shims: Store package version in Win32 version resource \" (#2966)"},{"Id":"412390668","IsPullRequest":true,"CreatedAt":"2019-02-20T15:00:53","Actor":"dotnet-bot","Number":"2963","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2963","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2963)"},{"Id":"412413417","IsPullRequest":true,"CreatedAt":"2019-02-20T14:26:53","Actor":"dotnet-maestro[bot]","Number":"2964","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2964","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2964)"},{"Id":"412091091","IsPullRequest":false,"CreatedAt":"2019-02-19T19:39:26","Actor":"dsplaisted","Number":"2962","RawContent":null,"Title":"Remove UseRefTargetingPacks once SDK round-trips through core-sdk","State":"open","Body":"#2919 added a `UseRefTargetingPacks` flag to enable using the new .Ref targeting packs instead of the ones in the bundled versions file.  Once that PR has flowed into core-sdk, we should update the stage 0 in dotnet/sdk and remove the flag.","Url":"https://github.com/dotnet/sdk/issues/2962","RelatedDescription":"Open issue \"Remove UseRefTargetingPacks once SDK round-trips through core-sdk\" (#2962)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1098610296367841282","CreatedAt":"2019-02-21T15:48:00+00:00","UserScreenname":"dotnet","Text":"The #dotnet blog just got a makeover!\n\nDiscover and share great content while enjoying the modern, clean design of… https://t.co/b0rdirHuPF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":15,"RawContent":null},{"Id":"1098594189313363968","CreatedAt":"2019-02-21T14:44:00+00:00","UserScreenname":"dotnet","Text":". @ChristosMatskas joins #OnDotNet to share the story of an application he built using the Azure SDKs for .NET and… https://t.co/TR4ua9BnvV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"1098337450924040194","CreatedAt":"2019-02-20T21:43:49+00:00","UserScreenname":"dotnet","Text":"Check out the February updates for .NET. https://t.co/8Fz51sPyod","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"1097924819415326720","CreatedAt":"2019-02-19T18:24:10+00:00","UserScreenname":"dotnet","Text":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019 https://t.co/45GssRCrZk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":128,"FavoriteCount":133,"RawContent":null}]}},"RunOn":"2019-02-27T05:30:51.282025Z","RunDurationInMilliseconds":18753}