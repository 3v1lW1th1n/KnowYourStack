{"Data":{"Blog":{"FeedItems":[{"Title":"A Brief History of .NET Standard","PublishedOn":"2018-04-16T16:21:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin (and before that, Mono) allowed .NET code to run on multiple platforms for years. These days, there&#8217;s a new push in cross-platform with .NET Core and .NET Standard. This post looks at...","Href":"https://blog.xamarin.com/history-dot-net-standard/","RawContent":null},{"Title":"Using the iOS 11 Drag and Drop APIs in Xamarin.iOS Apps","PublishedOn":"2018-04-13T17:07:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS 11 introduced drag and drop, a feature that allows users to easily move or copy data within or between apps. With drag and drop, users can: Select items to drag Add extra items to a drag after it...","Href":"https://blog.xamarin.com/drag-and-drop-apis-for-xamarin-apps/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio 2017","PublishedOn":"2018-04-11T18:30:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 previews are now available, featuring significant improvements to the XAML experience for mobile developers. The Xamarin.Forms XAML editing experience is now powered by...","Href":"https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2017 Version 15.7 Preview 3","PublishedOn":"2018-04-09T21:32:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 Preview 3 was released today (April 9, 2018) and includes many improvements for mobile developers in Visual Studio. This release sports a brand new IntelliSense...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-7-preview-3/","RawContent":null},{"Title":"Right-To-Left Localization in Xamarin.Forms","PublishedOn":"2018-04-06T20:05:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re making apps that support right-to-left languages, we have great news for you: Xamarin.Forms 3.0 makes it easier than ever to flip layouts to match language direction! We&#8217;ll use...","Href":"https://blog.xamarin.com/right-to-left-localization-xamarin-forms/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 3 – Mono","PublishedOn":"2018-04-04T18:38:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the third post of four in the Debugging Xamarin Open Source Frameworks series, debugging Mono. Part 1 covers building Xamarin.Forms from the source and debugging that code, Part 2 covers...","Href":"https://blog.xamarin.com/debugging-xamarin-mono/","RawContent":null},{"Title":"Find Local Xamarin and .NET Developer Events This April","PublishedOn":"2018-04-02T18:42:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Spring into action this April by finding a Xamarin or .NET user group hosting Xamarin (and related technology) events near you! Get the latest news on exciting releases, tooling, and updates all month...","Href":"https://blog.xamarin.com/xamarin-developer-community-events-april/","RawContent":null},{"Title":"Update to Xamarin.Forms 3.0 Pre-Release Available Today!","PublishedOn":"2018-03-30T19:02:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that the latest update to the Xamarin.Forms 3.0 Pre-release is now available! Help us make this our best Xamarin.Forms release ever by updating today and giving it a...","Href":"https://blog.xamarin.com/update-to-xamarin-forms-3-0-pre-release-available-today/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 2 – Xamarin.iOS","PublishedOn":"2018-03-28T19:17:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the second part in a four-part series. In the first post, we covered building Xamarin.Forms from the source and then stepping into and debugging that code. In this post, we&#8217;ll explore...","Href":"https://blog.xamarin.com/debugging-xamarin-ios/","RawContent":null},{"Title":"New Xamarin.Android and Xamarin.iOS Project Templates Now Available","PublishedOn":"2018-03-26T18:31:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Whether you&#8217;re new or a seasoned Xamarin developer, project templates are an important part of the app building journey. They should be easy to find and set you up for success from the start. As...","Href":"https://blog.xamarin.com/new-xamarin-android-ios-templates/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7546345823","Type":"IssuesEvent","CreatedAt":"2018-04-18T02:23:58","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1561","RelatedDescription":"Closed issue \"[Mono-2018-02] BCL Test suite is regularly crashing with a TypeInitializationException\" (#1561) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Install the bcl-test suite on device and run the NUnit instrumentation as shown below:\r\n> adb shell am instrument -w Xamarin.Android.Bcl_Tests/xamarin.android.bcltests.NUnitInstrumentation\r\n\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nSuite runs to completion.\r\n\r\n### Actual Behavior\r\nI'm seeing the following unhandled exception when executing this suite on many devices against the mono-2018-02 branch, however I don't believe it to be directly related to mono changes based on the JNI related stack trace:\r\n```\r\n04-13 17:22:13.032 E/mono-rt ( 2310): [ERROR] FATAL UNHANDLED EXCEPTION: System.TypeInitializationException: The type initializer for 'Types' threw an exception. ---> System.DllNotFoundException: jvm.dll\r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at (wrapper managed-to-native) Java.Interop.NativeMethods.JNI_GetCreatedJavaVMs(intptr[],int,int&)\r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniRuntime.GetAvailableInvocationPointers () [0x00000] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniRuntime.get_CurrentRuntime () [0x0007b] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniEnvironmentInfo..ctor () [0x00006] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniEnvironment+<>c.<.cctor>b__35_0 () [0x00000] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.ThreadLocal`1[T].GetValueSlow () [0x00031] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.ThreadLocal`1[T].get_Value () [0x0003e] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniEnvironment.get_CurrentInfo () [0x00000] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniEnvironment+Types.FindClass (System.String classname) [0x00026] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniType..ctor (System.String classname) [0x00006] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniEnvironment+Types..cctor () [0x000d2] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):    --- End of inner exception stack trace ---\r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniType..ctor (System.String classname) [0x00006] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniType.GetCachedJniType (Java.Interop.JniType& cachedType, System.String classname) [0x00018] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniPeerMembers.get_JniPeerType () [0x0000c] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniPeerMembers+JniStaticMethods.GetMethodInfo (System.String encodedMember) [0x0002b] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Java.Interop.JniPeerMembers+JniStaticMethods.InvokeObjectMethod (System.String encodedMember, Java.Interop.JniArgumentValue* parameters) [0x00000] in <24e668a472b84815ba42576d196fd0e0>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Android.OS.Looper.get_MainLooper () [0x00000] in /Users/builder/data/lanes/5930/9aa1f0c7/source/monodroid/external/xamarin-android/src/Mono.Android/obj/Release/android-27/mcw/Android.OS.Looper.cs:68 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at Android.Runtime.AndroidEnvironment.GetDefaultSyncContext () [0x00000] in /Users/builder/data/lanes/5930/9aa1f0c7/source/monodroid/external/xamarin-android/src/Mono.Android/Android.Runtime/AndroidEnvironment.cs:259 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.AndroidPlatform.GetDefaultSyncContext () [0x00000] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.SynchronizationContext.GetThreadLocalContext () [0x00005] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.SynchronizationContext.get_Current () [0x00016] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.WaitHandle.WaitOneNative (System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.UInt32 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) [0x00002] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.WaitHandle.InternalWaitOne (System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) [0x00014] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.WaitHandle.WaitOne (System.Int64 timeout, System.Boolean exitContext) [0x00000] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.WaitHandle.WaitOne (System.Int32 millisecondsTimeout, System.Boolean exitContext) [0x00019] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.WaitHandle.WaitOne (System.Int32 millisecondsTimeout) [0x00000] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.Timer+Scheduler.SchedulerThread () [0x0020b] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n04-13 17:22:13.032 E/mono-rt ( 2310):   at System.Threading.ThreadHelper.ThreadStart_Context (System.Object state) [0x00014] in <4775dd050ce546a9814a2d17717c9d37>:0 \r\n```\r\n\r\n### Version Information\r\nOperating System: Mac OS X 10.12.3\r\nProduct Name: Xamarin.Android\r\nBranch Name: mono-2018-02\r\nBuild Revision: 998d3039edf500b71ccc2a2e0aac076aa62516eb\r\n\r\n[Device] Manufacturer: Google, Model: Pixel XL, Version: 8.0.0, ABI: arm64-v8a\r\n[Device] Manufacturer: HUAWEI, Model: VTR-L29, Version: 7.0, ABI: arm64-v8a\r\n[Device] Manufacturer: LENOVO, Model: Lenovo K900_ROW, Version: 4.2.1, ABI: x86\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttp://xqa.blob.core.windows.net/gist/log-e9dea303ade84275a91249d678efb5d5.txt\r\nhttp://xqa.blob.core.windows.net/gist/log-0331d118f1e047a39556bdc81129fd60.txt\r\nhttp://xqa.blob.core.windows.net/gist/log-73af3bd7f90c4806bc618b515cd5be9e.txt\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7545583890","Type":"PullRequestEvent","CreatedAt":"2018-04-17T22:12:41","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1572","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] plumbing for coded warnings\" (#1572) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1560\r\n\r\nTo get started in fixing #1560, some of our helper methods need updating\r\nin order to completely support coded warnings in MSBuild tasks.\r\n\r\n- `AsyncTask` needs \"background-thread-safe\" versions of `LogWarning`\r\nthat allow us to specify error codes. The `WaitForCompletion` method\r\nalso needed to call `LogCodedWarning` internally.\r\n- `MSBuildExtensions` need proper method overloads for\r\n`LogCodedWarning`, I copied what we have for `LogCodedError` so\r\n`LogCodedWarning` will match it exactly\r\n\r\nChanges to `<Aapt />`, as a guinea pig:\r\n- All warnings will report APT0000\r\n- Updated tests where appropriate, note that MSBuild appends\r\n`warning APT0000:` and `aapt` prints its own `warning :` afterward\r\n- It doesn't look like we can make an error coming from `aapt` any more\r\nspecific than `APT0000`, but open to suggestions"},{"Id":"7544783188","Type":"PullRequestEvent","CreatedAt":"2018-04-17T19:30:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1571","RelatedDescription":"Opened pull request \"[build] Use `msbuild` by default to build xamarin-android\" (#1571) at xamarin/xamarin-android","RelatedBody":"`xbuild` is \"wonky\" in all manner of ways -- for better or worse\r\n(648aff99, e3abe4b8, 069c65ae).\r\n\r\nWorse, our unit tests has a tendency to throw\r\n`ArgumentOutOfRangeException` when running under `xbuild`, e.g. this\r\nrecent [`BuildAotApplicationAndBundle(\"armeabi\",True,True)` error][0]\r\nwhich produces a (temporary, Workspace-local) [log file][1] with:\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/955/testReport/Xamarin.Android.Build.Tests/BuildTest/BuildAotApplicationAndBundle__armeabi__True_True_/\r\n[1]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/ws/xamarin-android/bin/TestRelease/temp/BuildAotApplicationAndBundle_armeabi_True_True/build.log\r\n\r\n\t…/xamarin-android/bin/Release/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets: error : Error executing task BuildApk: Non-negative number required.\r\n\tParameter name: srcOffset\r\n\tError executing task BuildApk: System.ArgumentOutOfRangeException: Non-negative number required.\r\n\tParameter name: srcOffset\r\n\t  at System.Buffer.BlockCopy (System.Array src, System.Int32 srcOffset, System.Array dst, System.Int32 dstOffset, System.Int32 count) [0x0009d] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/ReferenceSources/Buffer.cs:65\r\n\t  at System.IO.FileStream.WriteSegment (System.Byte[] src, System.Int32 src_offset, System.Int32 count) [0x00023] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.IO/FileStream.cs:995\r\n\t  at System.IO.FileStream.WriteInternal (System.Byte[] src, System.Int32 offset, System.Int32 count) [0x00099] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.IO/FileStream.cs:647\r\n\t  at System.IO.FileStream.Write (System.Byte[] array, System.Int32 offset, System.Int32 count) [0x00090] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.IO/FileStream.cs:614\r\n\t  at System.IO.StreamWriter.Flush (System.Boolean flushStream, System.Boolean flushEncoder) [0x0007e] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/io/streamwriter.cs:318\r\n\t  at System.IO.StreamWriter.Write (System.Char[] buffer, System.Int32 index, System.Int32 count) [0x00078] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/io/streamwriter.cs:411\r\n\t  at System.IO.TextWriter.WriteLine (System.String value) [0x00070] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/io/textwriter.cs:490\r\n\t  at Microsoft.Build.BuildEngine.ConsoleLogger+BuildRecord.WriteLine (System.String message) [0x00051] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/ConsoleLogger.cs:856\r\n\t  at Microsoft.Build.BuildEngine.ConsoleLogger+BuildRecord.MessageHandler (Microsoft.Build.Framework.BuildMessageEventArgs args) [0x0001c] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/ConsoleLogger.cs:708\r\n\t  at Microsoft.Build.BuildEngine.ConsoleLogger.MessageHandler (System.Object sender, Microsoft.Build.Framework.BuildMessageEventArgs e) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/ConsoleLogger.cs:344\r\n\t  at Microsoft.Build.BuildEngine.EventSource.FireMessageRaised (System.Object sender, Microsoft.Build.Framework.BuildMessageEventArgs bmea) [0x00008] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/EventSource.cs:69\r\n\t  at Microsoft.Build.BuildEngine.BuildEngine.LogMessageEvent (Microsoft.Build.Framework.BuildMessageEventArgs e) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/BuildEngine.cs:130\r\n\t  at Microsoft.Build.Utilities.TaskLoggingHelper.LogMessageFromText (System.String lineOfText, Microsoft.Build.Framework.MessageImportance messageImportance) [0x00031] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/TaskLoggingHelper.cs:314\r\n\t  at Microsoft.Build.Utilities.TaskLoggingHelper.LogMessage (Microsoft.Build.Framework.MessageImportance importance, System.String message, System.Object[] messageArgs) [0x0000e] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/TaskLoggingHelper.cs:248\r\n\t  at (wrapper remoting-invoke-with-check) Microsoft.Build.Utilities.TaskLoggingHelper.LogMessage(Microsoft.Build.Framework.MessageImportance,string,object[])\r\n\t  at Xamarin.Android.Tasks.MSBuildExtensions.LogDebugTaskItems (Microsoft.Build.Utilities.TaskLoggingHelper log, System.String message, Microsoft.Build.Framework.ITaskItem[] items) [0x00030] in <d1b2bbe8a91444ef81018dda8acfe92a>:0\r\n\t  at Xamarin.Android.Tasks.BuildApk.Execute () [0x001da] in <d1b2bbe8a91444ef81018dda8acfe92a>:0\r\n\t  at Microsoft.Build.BuildEngine.TaskEngine.Execute () [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/TaskEngine.cs:134\r\n\t  at Microsoft.Build.BuildEngine.BuildTask.Execute () [0x0008d] in /Users/builder/jenkins/workspace/build-package-osx-mono/2017-12/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/BuildTask.cs:101\r\n\r\nIt's hard to have a \"green\" build when the build system randomly\r\nfails. Furthermore, `xbuild` is no longer maintained, so whatever\r\nbug we're triggering in `xbuild` *will not be fixed*, `xbuild` itself\r\nis ***deprecated***, and the #mono team wants us to use `msbuild`.\r\n\r\nUpdate the build system so that we use `msbuild` by default instead.\r\n\r\nIf necessary, `xbuild` can continue to be used to build things:\r\n\r\n\tmake all MSBUILD=xbuild\r\n\r\nHowever, we make no guarantees for how long `xbuild` will continue to\r\nwork going forward."},{"Id":"7544589223","Type":"PullRequestEvent","CreatedAt":"2018-04-17T18:54:24","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1570","RelatedDescription":"Opened pull request \"[android-toolchain] support Windows again\" (#1570) at xamarin/xamarin-android","RelatedBody":"Context fef4541\r\n\r\nSince the `mono-sdks` took over the installation of `android-toolchain`,\r\nthese dependencies are now installed by `make` scripts. This\r\nunfortunately, will not work on Windows since we allow builds with\r\na vanilla install of Visual Studio 2017 and a simple:\r\n`msbuild Xamarin.Android.sln /t:Prepare` then `/t:Build`.\r\n\r\nTo fix this, I brought back the old MSBuild code in a\r\n`android-toolchain-windows.targets` file to be used only on Windows. I\r\nhad to rearrange how things are imported a bit to get this to work\r\nproperly.\r\n\r\nThis should give us what we want:\r\n- The `mono-sdks` install the Android toolchain on macOS/linux\r\n- Windows still functions as it did before"},{"Id":"7543882469","Type":"PullRequestEvent","CreatedAt":"2018-04-17T16:43:09","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1569","RelatedDescription":"Opened pull request \" [performance] initial MSBuild project timing\" (#1569) at xamarin/xamarin-android","RelatedBody":"The first step in tracking our build times is to at least some of our\r\nexisting projects' build times recorded as plots on Jenkins. This works\r\nby running a custom MSBuild logger (written by Grendel) that records\r\ndetailed timing information down to even each MSBuild task. For now, I\r\nam aggregating these results to a single CSV file to be ingested by\r\nJenkins plots.\r\n\r\nProjects built:\r\n- `samples/HelloWorld`\r\n- `tests/Xamarin.Forms-Performance-Integration`\r\n\r\nFour types of builds:\r\n- Fresh build (simulated fresh checkout)\r\n- Second build (no changes)\r\n- Touch C# file, build again\r\n- Touch Android resource XML file, build again\r\n\r\nI am timing the `SignAndroidPackage` and `Install` targets for each of\r\nthese cases.\r\n\r\nResults are aggregated into `TestResult-MSBuild-times.csv` for\r\nprocessing on Jenkins. After this gets merged into master, there will be\r\nsome configuration needed to setup the new plot.\r\n\r\nExample results:\r\n\r\n| HelloWorld-FreshBuild-Debug | HelloWorld-FreshInstall-Debug | XF-FreshBuild-Debug | XF-FreshInstall-Debug |\r\n| ---:                        | ---:                          | ---:                | ---:                  |\r\n| 00:00:16.3538291            | 00:00:04.7940071              | 00:00:27.5263076    | 00:00:22.6720137      |\r\n\r\nOther changes:\r\n- I let VS 2017 re-sort/fixup `Xamarin.Android.sln`\r\n- Split up `timing.csproj` into `timing.targets` and `timing.projitems`\r\n- Updated `Makefile` to include a `run-performance-tests` target.\r\n- A new `ProcessMSBuildTimings` task to aggregate the results\r\n\r\nUpstream in `monodroid`:\r\n- Since it is not built on Jenkins, these timings need to go somewhere\r\nelse TBD\r\n- Plans are to test more \"real world\" apps here, and inject as many\r\n`<XamarinAndroidProject />` items as needed during the timings\r\n- We should also leverage the more detailed timings collected, timing\r\nspecific MSBuild tasks and other statistical processing would be useful."},{"Id":"7543675142","Type":"PullRequestEvent","CreatedAt":"2018-04-17T16:07:25","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1568","RelatedDescription":"Opened pull request \"Generate source file with XA build paths\" (#1568) at xamarin/xamarin-android","RelatedBody":"The generated file contains paths to the top source directory, `xabuild`,\r\n`xabuild.exe`, current `bin` directory, current test output directory and a\r\nconstant with the current configuration name. The paths can be useful in test\r\nprojects to find various bits and pieces which are currently referred to using\r\npaths relative to a specific location and thus not really \"portable\" between\r\nvarious test projects."},{"Id":"7543553848","Type":"PullRequestEvent","CreatedAt":"2018-04-17T15:48:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1565","RelatedDescription":"Merged pull request \"[tests] Use explicit Activity name in XF test\" (#1565) at xamarin/xamarin-android","RelatedBody":"Looks like the hash in the `MainActivity` activity name is changing, so\r\ngive the activity an explicit name.\r\n\r\nThis fixes the performance measurements for XF test."},{"Id":"7543252203","Type":"PullRequestEvent","CreatedAt":"2018-04-17T15:03:10","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1550","RelatedDescription":"Merged pull request \"[Android.Runtime] Use JniTypeManager to register natives\" (#1550) at xamarin/xamarin-android","RelatedBody":"The new code uses `JniTypeManager`'s `RegisterNativeMembers` method to\r\nregister native marshaling methods. The type manager itself uses the\r\nregister method generated by *jnimarshalmethod-gen* tool or method(s)\r\nof the given type, which have\r\n`JniAddNativeMethodRegistrationAttribute`.\r\n\r\nWhen no such register method exists (`registered` = *false*), we\r\nfallback to the original (old) code.\r\n\r\nExample register method generated by the *jnimarshalmethod-gen* tool:\r\n\r\n```\r\n[JniAddNativeMethodRegistration]\r\npublic static void __RegisterNativeMembers (JniNativeMethodRegistrationArguments args)\r\n{\r\n\targs.AddRegistrations (new JniNativeMethodRegistration[] {\r\n\t\tnew JniNativeMethodRegistration (\"n_onCreate\", \"(Landroid/os/Bundle;)V\", new Action<IntPtr, IntPtr, IntPtr> (MainActivity.__<$>_jni_marshal_methods.n_onCreate_Landroid_os_Bundle_))\r\n\t});\r\n}\r\n```"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7546191216","Type":"IssuesEvent","CreatedAt":"2018-04-18T01:30:58","Actor":"motoko89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2491","RelatedDescription":"Opened issue \"Xamarin Forms Android app crash on boot in Release config with ProGuard on\" (#2491) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nThis happen after I upgraded `Xamarin.Android.Support.*` packages to version 27.0.2. App works when build and run in Debug but failed when published to the Store. I tried Release config and it indeed crashes on boot\r\n\r\nI followed the suggestion here https://bugzilla.xamarin.com/show_bug.cgi?id=36287 and turned off ProGuard for Release config\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create Xamarin Forms project\r\n2. Update all packages to the latest version\r\n3. \r\n\r\n### Expected Behavior\r\n\r\nNot crash on boot\r\n\r\n### Actual Behavior\r\n\r\nCrash on boot\r\n\r\n### Basic Information\r\n\r\n- Version with issue: `Xamarin.Android.Support.*` 27.0.2\r\n- Last known good version: `Xamarin.Android.Support.*` 26.1.0.1\r\n- IDE: VS for Mac 7.4.3 (build 10) Stable Channel\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: target API Level 27\r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages: Xamarin.Forms 2.5.0.280555\r\n- Affected Devices: all Android versions\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7544886270","Type":"IssuesEvent","CreatedAt":"2018-04-17T19:51:14","Actor":"Paul-Brenner-Tangoe","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2490","RelatedDescription":"Opened issue \"[iOS] PageRenderer is not called on TabbedPage and NavigationPage\" (#2490) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nA PageRenderer with the ExportRenderer set to be called on a Xamarin.Forms.Page is not called for TabbedPages and NavigationPages on iOS. On Android it does get called.\r\n\r\n### Steps to Reproduce\r\n\r\nRun app in debug mode on iOS\r\nThere is a WriteLine call in the PageRenderer. Note that on iOS it outputs:\r\nMain - the first page\r\nPress the \"press me\" button. It loads the tabbed page with 2 tabs\r\nNote it outputs:\r\nOne - that's the first tab\r\nTwo- that's the second tab\r\n\r\nRepeat on Android (see note)\r\nNote it outputs:\r\nnav - that's the navigation page the main page is wrapped in\r\nmain - the first page\r\ntab - that's the tabbed page\r\ntabone - that's the navigation page that the first tab is wrapped in\r\none - the first tab\r\ntabtwo - that's the navigation page that the second tab is wrapped in\r\ntwo - the second tab\r\n\r\n### Expected Behavior\r\nThe PageRenderer gets hit for everything that inherits from Xamarin.Forms.Page\r\n\r\n### Actual Behavior\r\nIt only seems to get hit for ContentPages\r\n\r\nNote: Ignore the broken UI on Android, that's from bug #2489\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.444934\r\n- Last known good version: N/A\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  yes\r\n  - Android: no\r\n  - UWP:  not tested\r\n- Android Support Library Version: 26\r\n- Nuget Packages: just forms\r\n- Affected Devices: Tested on Nexus 5x on Android 8 and iPhone 6 running iOS 9.3\r\n\r\n### Reproduction Link\r\nhttps://www.dropbox.com/s/b0l0vojl273ffrj/tabpagesamplebug.zip?dl=0\r\n"},{"Id":"7544788379","Type":"IssuesEvent","CreatedAt":"2018-04-17T19:31:35","Actor":"Paul-Brenner-Tangoe","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2489","RelatedDescription":"Opened issue \"[Android] Using a page renderer on Android completely breaks the UI\" (#2489) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhile creating a sample for a different bug, I came across a very odd issue.\r\n\r\nThe sample app is just a content page in a navigation page with a button to go to a tabbed page with two tabs. \r\n\r\nIf you have the page renderer enabled (the renderer just has a WriteLine), when you press the button to go to the tabbed page, the tabbed page comes up all messed up (see screen shots). If you remove the renderer, it works fine. No issues on iOS.\r\n\r\n### Steps to Reproduce\r\n\r\nLoad app.\r\nPress the \"press me\" button\r\nNote that the button is still on the page and text is displayed on top of it\r\nGo the the android APageRenderer class and remove the ExportRenderer\r\nLoad app and press the button again\r\nNote that the tabbed page looks fine \r\n\r\n### Expected Behavior\r\nApp loads the tabbed page without issue\r\n\r\n### Actual Behavior\r\nUI is messed up \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.444934\r\n- Last known good version: N/A\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  no\r\n  - Android: yes\r\n  - UWP:  not tested\r\n- Android Support Library Version: 26\r\n- Nuget Packages: just forms\r\n- Affected Devices: Tested on Nexus 5x on Android 8 and iPhone 6 running iOS 9.3\r\n\r\n### Screenshots\r\nhttps://imgur.com/a/7fIAu\r\n\r\n### Reproduction Link\r\nhttps://www.dropbox.com/s/b0l0vojl273ffrj/tabpagesamplebug.zip?dl=0  \r\n"},{"Id":"7544489407","Type":"PullRequestEvent","CreatedAt":"2018-04-17T18:35:47","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2488","RelatedDescription":"Opened pull request \"Removed invalid test that was adding no value\" (#2488) at xamarin/Xamarin.Forms","RelatedBody":"Removed test as it's based on an invalid custom implementation of ObservableCollection. Code works fine if you base test on default implementation of ObservableCollection but at that point the test really isn't testing anything of value"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7546148020","Type":"PullRequestEvent","CreatedAt":"2018-04-18T01:15:34","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3937","RelatedDescription":"Merged pull request \"[d15-7][mtouch] watchOS extensions are top-level containers. Fixes issue #3930. (#3934)\" (#3937) at xamarin/xamarin-macios","RelatedBody":"watchOS extensions are top-level containers in our build (because we ignore\nwatchOS apps entirely in mtouch), so treat them as such when computing the\nprotocol member map.\n\nFixes issue https://github.com/xamarin/xamarin-macios/issues/3930."},{"Id":"7546146927","Type":"PullRequestEvent","CreatedAt":"2018-04-18T01:15:13","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3916","RelatedDescription":"Merged pull request \"[d15-7][msbuild] Fix AOT options from IDE\" (#3916) at xamarin/xamarin-macios","RelatedBody":"- Cherry pick of https://github.com/xamarin/xamarin-macios/pull/3914\r\n- Fix https://github.com/xamarin/xamarin-macios/issues/3920 in 15.7"},{"Id":"7545603405","Type":"PullRequestEvent","CreatedAt":"2018-04-17T22:17:44","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3950","RelatedDescription":"Merged pull request \"Fix API diff markdown and make sure wrench shows the link to the .md files\" (#3950) at xamarin/xamarin-macios","RelatedBody":"The existing Makefile copy api-diff.html to index.html before it was\nupdated with the .md links.\n\nThe mono-api-html.exe was reversing the diff (old/new) sections."},{"Id":"7544456514","Type":"PullRequestEvent","CreatedAt":"2018-04-17T18:29:37","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3950","RelatedDescription":"Opened pull request \"Fix API diff markdown and make sure wrench shows the link to the .md files\" (#3950) at xamarin/xamarin-macios","RelatedBody":"The existing Makefile copy api-diff.html to index.html before it was\nupdated with the .md links.\n\nThe mono-api-html.exe was reversing the diff (old/new) sections."},{"Id":"7543213367","Type":"IssuesEvent","CreatedAt":"2018-04-17T14:57:39","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3949","RelatedDescription":"Opened issue \"Transitive nuget dependencies are not handled with netstandard libraries\" (#3949) at xamarin/xamarin-macios","RelatedBody":"A netstandard library that depends on nuget libraries will not be correctly resolved unless the XM or XI library in question also resolves those libraries independently.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1.  [TestNugetProjectOverRefs.zip](https://github.com/xamarin/xamarin-macios/files/1920333/TestNugetProjectOverRefs.zip)\r\n2. Build XM (TestNugetProjectOverRefs) project and run. Note runtime failure\r\n3. Build XI (TestNugetProjectOverRefs.iOS) project. It will fail in linking.\r\n\r\n### Expected Behavior\r\n\r\nThe XI and XM library to resolve the nuget required by the netstd library. \r\n\r\n### Actual Behavior\r\n\r\nThe \"transitive\" dependency of a dependency is not resolved correctly.\r\n\r\n### Environment\r\n\r\nhttps://gist.github.com/chamons/a1fb655991f9bb749168b406e7544cce\r\n\r\n### Build Logs\r\n\r\nhttps://gist.github.com/chamons/f66954a712614afa70058b63e909041a\r\n\r\n### Example Project (If Possible)\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"986268805629345792","CreatedAt":"2018-04-17T15:43:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expe… https://t.co/eK0geeikW6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":16,"RawContent":null},{"Id":"985953326079594496","CreatedAt":"2018-04-16T18:49:25+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":33,"RawContent":null},{"Id":"985907924479479811","CreatedAt":"2018-04-16T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/HMGMdGgDYr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":13,"RawContent":null},{"Id":"985296899346456576","CreatedAt":"2018-04-14T23:21:01+00:00","UserScreenname":"xamarinhq","Text":"Try out the #Xamarin Android Device Manager Preview, a tool for creating, editing, and controlling Android virtual… https://t.co/POMrs2vlnD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":33,"RawContent":null},{"Id":"984843662428459008","CreatedAt":"2018-04-13T17:20:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/1JLVLvKR0M","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":25,"RawContent":null},{"Id":"984821292938465285","CreatedAt":"2018-04-13T15:51:07+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/KTX4gcGjqZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":11,"RawContent":null},{"Id":"984463408073408513","CreatedAt":"2018-04-12T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/tX03cw88GD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null},{"Id":"984140279061020672","CreatedAt":"2018-04-11T18:45:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with new #XamarinForms #XAML IntelliSense functionality in #VisualStudio 2017: https://t.co/EPKoitU5bA https://t.co/JnlquxCZN9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":37,"RawContent":null},{"Id":"983738884319334400","CreatedAt":"2018-04-10T16:10:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build Xamarin.iOS from the source code in the second part of our four-part series on debugging… https://t.co/uVkITyoInQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":11,"RawContent":null},{"Id":"983374729166934016","CreatedAt":"2018-04-09T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/O4ILyulYAJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":27,"RawContent":null},{"Id":"983104477468266496","CreatedAt":"2018-04-08T22:09:07+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your Xamarin apps with Azure CosmosDB: https://t.co/acrN8gdJdS https://t.co/7dgtdHbqn9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":14,"RawContent":null},{"Id":"982728475831390208","CreatedAt":"2018-04-07T21:15:01+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/FGw0WVLZMU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":20,"RawContent":null},{"Id":"982351517544996870","CreatedAt":"2018-04-06T20:17:07+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/0hyFj6caS2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":27,"RawContent":null},{"Id":"982287570737315842","CreatedAt":"2018-04-06T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/jQc7aGUfzQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"981917376756232193","CreatedAt":"2018-04-05T15:32:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"981605676123344896","CreatedAt":"2018-04-04T18:53:25+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/eB7EyBcngh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":14,"RawContent":null},{"Id":"981383112331493377","CreatedAt":"2018-04-04T04:09:01+00:00","UserScreenname":"xamarinhq","Text":"Add cloud storage to your #Xamarin apps with #Azure Blob Storage: https://t.co/xM3dAE2jRZ https://t.co/pKafHtrM4C","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":27,"RawContent":null},{"Id":"981202163941761024","CreatedAt":"2018-04-03T16:10:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to merge multiple resource dictionaries in the most recent stable release of #XamarinForms for even great… https://t.co/Kg5Dh5x1pO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":22,"RawContent":null},{"Id":"980881805221007371","CreatedAt":"2018-04-02T18:57:00+00:00","UserScreenname":"xamarinhq","Text":"Jump into #Xamarin with an event near you this April: https://t.co/Tg8HHIbUDA https://t.co/OJW7RynVmV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-04-18T05:30:40.5757027Z","RunDurationInMilliseconds":4765}