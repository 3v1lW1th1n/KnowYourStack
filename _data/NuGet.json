{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10250938312","Type":"IssuesEvent","CreatedAt":"2019-08-21T04:22:09","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7466","RelatedDescription":"Closed issue \"[Azure Search] Don't allow skip higher than 100,000\" (#7466) at NuGet/NuGetGallery","RelatedBody":"Got some 503 returned from Azure Search when someone skipped beyond 100000, i.e. tried to go to page 5001)."},{"Id":"10249866097","Type":"PullRequestEvent","CreatedAt":"2019-08-20T23:27:34","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7469","RelatedDescription":"Opened pull request \"Fix Error when Authed, but deleted\" (#7469) at NuGet/NuGetGallery","RelatedBody":"In the case when a session was authenticated as a user, but the user was deleted BEFORE the session was logged out, every subsequent to the gallery would 500.\r\n\r\nThis fix makes it so if we get into this state, the user will be logged out, redirected to the home page, and shown a message indicating that their account was deleted.\r\n\r\nPreview:\r\n![image](https://user-images.githubusercontent.com/11051729/63391456-5e245d00-c367-11e9-8531-a5dcc3d7245e.png)\r\n"},{"Id":"10249628320","Type":"IssuesEvent","CreatedAt":"2019-08-20T22:31:02","Actor":"karann-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7468","RelatedDescription":"Opened issue \"Update docs link in header to point to https://docs.microsoft.com/nuget/\" (#7468) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10249306192","Type":"IssuesEvent","CreatedAt":"2019-08-20T21:30:02","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7467","RelatedDescription":"Opened issue \"[Azure Search] Bug bash hijacked APIs\" (#7467) at NuGet/NuGetGallery","RelatedBody":"Come up with test cases to cover hijacked OData queries. Validate that Azure Search responds to as expected.\r\n\r\n* Restore\r\n* Visual Studio PM UI?\r\n* NuGet List?"},{"Id":"10249213942","Type":"IssuesEvent","CreatedAt":"2019-08-20T21:14:38","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7411","RelatedDescription":"Closed issue \"Update ServerCommon dependencies in NuGetGallery\" (#7411) at NuGet/NuGetGallery","RelatedBody":"React to the breaking API changes in https://github.com/NuGet/ServerCommon/pull/303, which blocks testing https://github.com/NuGet/ServerCommon/pull/297"},{"Id":"10249212571","Type":"IssuesEvent","CreatedAt":"2019-08-20T21:14:25","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7346","RelatedDescription":"Closed issue \"[GitHub Usage] Fix trailing space\" (#7346) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/94054/61257467-f8b8cd00-a725-11e9-97d9-bfdf25e5dd7c.png)\r\n\r\n/cc @loic-sharma @mogah \r\n\r\nUnforgivable "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10250724327","Type":"IssuesEvent","CreatedAt":"2019-08-21T03:21:26","Actor":"iDFLO","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8475","RelatedDescription":"Closed issue \"@nkolev92 I can confirm that that works for me.\" (#8475) at NuGet/Home","RelatedBody":"@nkolev92 I can confirm that that works for me.\r\n\r\n(`rm -rf /tmp/NuGetScratch`, then `ln -s /tmp/NuGetScratch <a user-local folder>`, then `nuget install` works)\r\n\r\n_Originally posted by @aveao in https://github.com/NuGet/Home/issues/7341#issuecomment-450332885_"},{"Id":"10250723693","Type":"IssuesEvent","CreatedAt":"2019-08-21T03:21:15","Actor":"iDFLO","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8475","RelatedDescription":"Opened issue \"@nkolev92 I can confirm that that works for me.\" (#8475) at NuGet/Home","RelatedBody":"@nkolev92 I can confirm that that works for me.\r\n\r\n(`rm -rf /tmp/NuGetScratch`, then `ln -s /tmp/NuGetScratch <a user-local folder>`, then `nuget install` works)\r\n\r\n_Originally posted by @aveao in https://github.com/NuGet/Home/issues/7341#issuecomment-450332885_"},{"Id":"10250093051","Type":"IssuesEvent","CreatedAt":"2019-08-21T00:28:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8459","RelatedDescription":"Reopened issue \"Distribute the .NET CLI as a .NET Core Global Tool\" (#8459) at NuGet/Home","RelatedBody":"I.e. so that it can be installed using `dotnet tool install`.\r\n\r\nA continuous source of pain is the mismatch between `dotnet` and `nuget.exe`. The former does not support all the operations of the latter, and often lags behind when new features are released. Some of the problems described in https://github.com/dotnet/coreclr/issues/26175 also apply with regard to issues and repos. Often, I find it near to impossible find out which version of the SDK is going to contain a given change to the NuGet client.\r\n\r\nWhile it possible to use nuget.exe instead, bootstrapping this from, for example, a build script is relatively painful in that it requires a non-trivial amount of boilerplate code. Whereas it's trivial to bootstrap a .NET Core Global Tool (`dotnet tool install --tool-path ...`).\r\n\r\nIf the NuGet CLI was distributed as a .NET Core Global Tool, that would probably solve most of these issues. We could choose to ignore any NuGet commands in the SDK and use the .NET Core Global Tool instead. We could follow issues in the NuGet repo in isolation, and pick up the new versions of the .NET Core Global Tool when we need to."},{"Id":"10249803684","Type":"IssuesEvent","CreatedAt":"2019-08-20T23:12:08","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8277","RelatedDescription":"Closed issue \"Show warning icons on PMUI Installed tab for deprecated packages\" (#8277) at NuGet/Home","RelatedBody":"When an installed package is deprecated, show the warning icon in as per the [spec](https://github.com/NuGet/Home/wiki/Deprecate-packages#visual-studio):\r\n* Next to the text `Installed` on the tab header\r\n* As an icon overlay next to the package ID of the deprecated installed packages in search results\r\n\r\n![image](https://user-images.githubusercontent.com/880728/60345284-f67e1100-99b8-11e9-8b80-a405d8a8b0ae.png)\r\n\r\nThis work can happen in parallel but depends on server-side work to flow deprecation info into search service [#7297](https://github.com/nuget/nugetgallery/issues/7297)"},{"Id":"10249635927","Type":"IssuesEvent","CreatedAt":"2019-08-20T22:32:38","Actor":"xavierdecoster","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8454","RelatedDescription":"Closed issue \"Invalid options message outdated/deprecated for list package should be the same for dotnet cli and dotnet nuget\" (#8454) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/pull/3003/files#diff-0bcb0e6b25126ef631b9e118f853abebL213\r\n\r\nListPkg_InvalidOptionsOutdatedAndDeprecated and it's cli counterpart should be the exact same string. \r\n\r\n//cc @xavierdecoster @donnie-msft "},{"Id":"10249465762","Type":"IssuesEvent","CreatedAt":"2019-08-20T21:58:32","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8474","RelatedDescription":"Opened issue \"Adapt to moving package feed for CPS packages\" (#8474) at NuGet/Home","RelatedBody":"CPS is moving their packages from myget to a public Azure DevOps feed."},{"Id":"10249317004","Type":"IssuesEvent","CreatedAt":"2019-08-20T21:31:48","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8468","RelatedDescription":"Closed issue \"Azure DevOps Nuget login fail on Mac\" (#8468) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet version: 5.1.0.6013\r\nVS: Visual Studio Community 2019 for Mac Version 8.2.3 (build 16)\r\nOS version: Mac OS 10.13.6\r\n\r\n## Detailed repro steps\r\n\r\nIn our company we use local Azure DevOps (TFS) with set up for automatic builds and publishing NuGet packages to our private repository. \r\nTo login we usually use TFS credentials, but this works only on WIndows machines.\r\nI use Mac and I could not login using my TFS credentials. I tried this [tutorial](https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops) for generating and using personal access token. And this actually worked for a short period of time. \r\nThere were several updates installed for Visual Studio. But I don't know which one caused the problem, as I was temporarily using my Windows machine for another project.\r\nI tried to downgrade nuget.exe with no success."},{"Id":"10248827083","Type":"IssuesEvent","CreatedAt":"2019-08-20T20:16:07","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8473","RelatedDescription":"Opened issue \"Warn that default symbols package format will change\" (#8473) at NuGet/Home","RelatedBody":"In preparation for eventually changing the default: #7815 "},{"Id":"10248669323","Type":"IssuesEvent","CreatedAt":"2019-08-20T19:52:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8472","RelatedDescription":"Opened issue \"Certain version ranges have a normalized version string that does not round trip.\" (#8472) at NuGet/Home","RelatedBody":"More specifically: \r\n```cs\r\n        /// <summary>\r\n        /// A range that accepts all versions, prerelease and stable.\r\n        /// </summary>\r\n        public static readonly VersionRange All = new VersionRange(null, true, null, true);\r\n\r\n        /// <summary>\r\n        /// A range that accepts all versions, prerelease and stable, and floats to the highest.\r\n        /// </summary>\r\n        public static readonly VersionRange AllFloating = new VersionRange(null, true, null, true, new FloatRange(NuGetVersionFloatBehavior.AbsoluteLatest));\r\n\r\n        /// <summary>\r\n        /// A range that accepts all stable versions\r\n        /// </summary>\r\n        public static readonly VersionRange AllStable = new VersionRange(null, true, null, true);\r\n\r\n        /// <summary>\r\n        /// A range that accepts all versions, prerelease and stable, and floats to the highest.\r\n        /// </summary>\r\n        public static readonly VersionRange AllStableFloating = new VersionRange(null, true, null, true, new FloatRange(NuGetVersionFloatBehavior.Major));\r\n\r\n```\r\n\r\nAll normalize to `(, )`. We should avoid usage of these Version Ranges. \r\n\r\nThere's no straightforward intuitive way to change the normalization to represent these ranges, especially when you consider that for some of these ranges there's an implicit lower version.\r\n\r\nFor example, AllStable & AllStableFloating have a min version of `0,0,0`. \r\n\r\nThis, alongside the fact that * is parsed into something resembling AllStableFloating (with an originalString of \"*\", has caused multiple bugs: \r\n\r\nSpecifically: \r\nhttps://github.com/NuGet/Home/issues/8432 - nuget.exe issue with `*` versions. \r\nhttps://github.com/NuGet/Home/issues/8073 - Lock file not honoring `*`. \r\nhttps://github.com/NuGet/Home/issues/6697 - Pack does not honor PackageDependencies with `*`\r\n\r\n"},{"Id":"10247869740","Type":"IssuesEvent","CreatedAt":"2019-08-20T17:54:30","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8434","RelatedDescription":"Closed issue \"dotnet package list --outdate --transitive crashes with LINQ issue\" (#8434) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.6136\r\n\r\ndotnet.exe --version (if appropriate): 2.2.302-preview-010246 (the ones used for debugging)\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 10.0.18362 Build 18362\r\n\r\n\r\nWorked before? If so, with which NuGet version: 5.3.0.6103 was fine\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a solution with two projects: ProjA and ProjB\r\n2. Create a ProjectReference in ProjA pointing to ProjB\r\n3. Add Newtonsoft.Json 12.0.1 (NOT the latest version) to ProjA as a PackageReference\r\n4. `dotnet package list --outdated --include-transitive` with the relevant patched version of dotnet\r\n\r\n## Other suggested things\r\n\r\nAssuming I got everything right (which is a stretch, I'm very new to this whole debugging dotnet.exe part), git bisect tells me this regression happened with https://github.com/NuGet/NuGet.Client/pull/2928\r\n\r\n/cc @xavierdecoster @rrelyea @nkolev92 \r\n\r\n### Verbose Logs\r\nStack trace:\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Sequence contains no matching element\r\n  Source=System.Linq\r\n  StackTrace:\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at NuGet.CommandLine.XPlat.ListPackageCommandRunner.GetVersionsFromDict(IEnumerable`1 packages, Dictionary`2 packagesVersionsDict, ListPackageArgs listPackageArgs) in C:\\Users\\kmarchan\\source\\repos\\Nuget\\Nuget.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Commands\\PackageReferenceCommands\\ListPackage\\ListPackageCommandRunner.cs:line 294\r\n```\r\n\r\n"},{"Id":"10246917505","Type":"IssuesEvent","CreatedAt":"2019-08-20T15:41:41","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8471","RelatedDescription":"Opened issue \"Reduce memory usage (unsubscribe from events)\" (#8471) at NuGet/Home","RelatedBody":"From internal bug 951916, someone from the VS perf team did an analysis of some high memory usage scenarios and found that `VSSettings.SettingsChanged` had an average of 301 subscriptions, max of 3724.\r\n\r\nMore generally, we should find anywhere that uses `+=` to subscribe to an event, and ensure there are matching `-=`."},{"Id":"10242203145","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:51:25","Actor":"yanshouwang","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8470","RelatedDescription":"Opened issue \"NU5030 error when pack package with NuGet.exe\" (#8470) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n- NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n- 5.1.0.6013\r\n\r\ndotnet.exe --version (if appropriate):\r\n- 2.2.401\r\n\r\nVS version (if appropriate):\r\n- VS 2019 16.2.2\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n- Windows 10, V18362.295\r\n\r\nWorked before? If so, with which NuGet version:\r\nNo\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. My .nuspec use embeded license like this, which the licence file is located in the parent folder\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package>\r\n  <metadata>\r\n    ...\r\n    <license type=\"file\">LICENSE</license>\r\n    ...\r\n  </metadata>\r\n  <files>\r\n    <file src=\"..\\LICENSE\" target=\"\"/>\r\n    ...\r\n  </files>\r\n</package>\r\n```\r\n\r\n2. run nuget pack command, and throw the NU5030 error:\r\nError NU5030: The license file 'LICENSE' does not exist in the package.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-08-21T05:30:45.0793819Z","RunDurationInMilliseconds":2460}