{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 7 and Entity Framework 6.3 Preview 7","PublishedOn":"2019-07-23T17:06:53+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are making new previews of EF Core 3.0 and EF 6.3 available on nuget.org.\n.NET Core 3.0 Preview 7 and ASP.NET Core 3.0 Preview 7 were also made available today.\nWe encourage you to install...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-7-and-entity-framework-6-3-preview-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 7","PublishedOn":"2019-07-23T17:00:54+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 7. We&#8217;ve transitioned from creating new features to polishing the release. Expect a singular focus on quality for the remaining preview...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-7/","RawContent":null},{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."},{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10161210202","Type":"PullRequestEvent","CreatedAt":"2019-08-07T01:32:05","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26036","RelatedDescription":"Opened pull request \"Delete TRANSLATE_PDB.\" (#26036) at dotnet/coreclr","RelatedBody":"Does anybody know what it was for and if it is still used?\r\nI have not found any references in desktop sources.\r\nI see that `TRANSLATE_PDB` existed before 2001, but can't find when it was introduced and how it was used.\r\n\r\nWhen you enable it there are many compile errors.\r\n\r\n\r\nPTAL @dotnet/jit-contrib "},{"Id":"10161145803","Type":"IssuesEvent","CreatedAt":"2019-08-07T01:13:09","Actor":"guodf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25983","RelatedDescription":"Closed issue \"Hopefully .net core supports all cpu architectures\" (#25983) at dotnet/coreclr","RelatedBody":"C#本来是一门优秀的语言，绝对有可能一统江湖，结果一手好牌被打的稀巴烂。\r\n以前因为不开源，处处受到限制，现在因为生态，处处受到限制，未来因为平台，依然会处处受到限制。\r\n从.net到.net core,从.net core到.net 5,我想说你们真的很闲，虽然统一.net这一步意义重大，但是当下环境可能并不是最重要的。\r\n最让人感觉垃圾的地方在于，不停的优化asp.net core，ef core，以及性能上的优化，我想问这些真的很重要吗？难道社区就不能出来做这些吧，好吧，我承认.net社区真的很烂，但是能怪谁呢！.net做的越多，社区做的就越少，可能最后都懒得做了，拿现成的用好了。\r\n尤其是.net在中国的市场，一步步被瓜分，不知道我软是否考虑过原因。\r\n.net core我们已经给了你5年的时间了，结果你也看见了，如果你以为这是绝地重生，我只能说哈哈~~你赢了。\r\n在中国这个市场，不是你想怎么做就怎么做的，如果你跟着政府的步伐走一定会走的很好。\r\n最后，从目前.net/.net core的市场情况来看，优化.net性能并不重要，现在的性能我们可以接收，ef core，asp.net core好不好用我们不在乎，能用就行，我们最关注的是你的可能性，可以在各种cpu架构下运行，支持所有国产操作系统（即使这些系统再垃圾），起码中国的市场还有一部分人愿意守护，维护你。\r\n\r\nIt would have been an excellent language, it is absolutely possible to unify the river and lake, the result of a good card was beaten with a thin bar.\r\nPreviously because not open source, everywhere is restricted, now because of ecology, everywhere is restricted, the future because of the platform, will still be restricted everywhere.\r\nFrom .net to .net core, from .net core to .net 5, I'd like to say that you're really idle, and while the step of unifying .net is significant, the environment may not be the most important.\r\nWhat makes people feel most trashy is that it's really important to keep optimizing asp.net core, ef core, and performance optimization. Can't the community come out and do this, well, I admit, the .net community is really bad, but who can blame it! .net do more, the less the community does, and may end up too lazy to do it, get ready-made.\r\nEspecially in the Chinese market.net, step by step is divided, do not know whether I soft whether to consider the reason.\r\n.net core we have given you 5 years, the result you also see, if you think this is the Rebirth of the Jedi, I can only say haha - you won.\r\nIn This market in China, it's not what you want to do, and if you follow the pace of the government, you'll definitely go well.\r\nFinally, from the current market situation of .net/ .net core, optimization of .net performance is not important, now the performance we can receive, ef core, asp.net core good use we do not care, can use on the line, we are most concerned about your possibility, Can run under a variety of cpu architecture, support all domestic operating systems (even if these systems are garbage), at least china's market there is still some people willing to guard, maintain you."},{"Id":"10161059332","Type":"PullRequestEvent","CreatedAt":"2019-08-07T00:47:18","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26018","RelatedDescription":"Merged pull request \"Superpmi mch merge\" (#26018) at dotnet/coreclr","RelatedBody":"Another requirement to use chem.\r\n\r\n/cc @dotnet/jit-contrib. "},{"Id":"10160885012","Type":"PullRequestEvent","CreatedAt":"2019-08-06T23:56:32","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26035","RelatedDescription":"Opened pull request \"Improve ArgumentNullExceptions on DiagnosticCounter.DisplayName/Unit\" (#26035) at dotnet/coreclr","RelatedBody":"Fix #25967. \r\n\r\ncc @stephentoub "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10161866118","Type":"IssuesEvent","CreatedAt":"2019-08-07T04:35:04","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10009","RelatedDescription":"Closed issue \"Patch roll-forward support for .NET Core 3.0\" (#10009) at dotnet/cli","RelatedBody":"As of .NET Core SDK 2.1.300, we [use the latest patch of the runtime](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-patch-selection) for self-contained publish.  There are a few issues with the way it currently works:\r\n\r\n- The \"latest version\" used is defined by the current version of the .NET Core SDK which is being used.  Installing a new patch to the runtime doesn't update the version used for self-contained publish- you need an update to the .NET Core SDK which knows about the updated runtime patch.\r\n- The version of the runtime used is selected at restore time.  So you can get errors if you try to do a self-contained publish with the `--no-restore` option, because the original restore didn't roll forward to the latest patch.\r\n\r\nFor .NET Core 3.0, we would like to take the maximum of the following as the latest version:\r\n\r\n- The latest installed patch of the targeted Major.Minor Shared Framework.  This means that installing an updated Shared Framework is enough for self contained deployments to include it.\r\n- The version from a list of latest patches which ships in the .NET Core SDK.  The list should include the latest patch for each Major.Minor version of each Base Shared Framework and Optional Component.  This helps self-contained publish use the latest Runtime Pack patch for apps that target prior versions of .NET Core which aren't currently installed as Shared Frameworks.\r\n- The `MinimumRuntimeFrameworkVersion` property for the Base Shared Framework, or the `MinimumVersion` metadata on a `SharedFrameworkReference` item (property and metadata names subject to change).  This allows a project to specify that a given patch level is required without relying on whether the desired patch has been installed on the build machine.  In contrast to the current `RuntimeFrameworkVersion` property, it doesn't lock to exactly that version, but allows the patch version to roll forward to later patches if a later patch is found via other means."},{"Id":"10161860722","Type":"IssuesEvent","CreatedAt":"2019-08-07T04:33:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10007","RelatedDescription":"Closed issue \"Runtime pack support for .NET Core 3.0\" (#10007) at dotnet/cli","RelatedBody":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3 which are deployed with self-contained apps.\r\n\r\nThis issue tracks the work required in order to support runtime packs.  This includes:\r\n\r\n- Figuring out the layout of runtime packs\r\n- [Resolve runtime pack to use for self-contained publish (including RID)](https://github.com/dotnet/cli/issues/10095)\r\n- [Consuming the assets from a runtime pack for self-contained publish](https://github.com/dotnet/cli/issues/10096)\r\n- Creating the runtime packs for each supported shared framework:\r\n  - .NET Core\r\n  - ASP.NET Core\r\n  - Microsoft.DesktopUI\r\n- Potentially, [supporting explicit runtime pack acquisition](https://github.com/dotnet/cli/issues/10086) (via a command such as `dotnet runtime-pack install Microsoft.NETCore.App -version 2.0.6 -rid linux-x64`"},{"Id":"10161857876","Type":"IssuesEvent","CreatedAt":"2019-08-07T04:32:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10041","RelatedDescription":"Closed issue \"Make .NET Core SDK build experience more consistent with the publish experience\" (#10041) at dotnet/cli","RelatedBody":"## Steps to reproduce\n\n1. `dotnet build`.\n\n## Expected  behavior\n\nThe build output folder should contain an apphost and your copy-local dependencies.\n\n## Actual behavior\n\nThere is no apphost and no dependencies copied.  Users cannot copy the contents of the build directory to another machine to run.\n\n\n## Environment data\n`dotnet --info` output:\n\n\n\n\n\n\n"},{"Id":"10161393353","Type":"IssuesEvent","CreatedAt":"2019-08-07T02:23:15","Actor":"AungMy0","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12160","RelatedDescription":"Opened issue \"INFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern Jenkin Xunit Test generate Report\" (#12160) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI tried to integrate Xunit Test plugin with jenkin and to generate my unit test report\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\nJenkin said no test report files found.\r\n\r\nINFO: Processing xUnit.Net-v2 (default)\r\nINFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern 'HelloJenkinTest\\TestResults\\*/xml' \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10160405737","Type":"PullRequestEvent","CreatedAt":"2019-08-06T22:00:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12159","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12159) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190806.3\r\n- **Date Produced**: 8/6/2019 9:27 PM\r\n- **Commit**: 11e0233a76795f37e8a938ba2c738c2b379d0abb\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview9.19406.3\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n\r\n\r\n"},{"Id":"10160255255","Type":"IssuesEvent","CreatedAt":"2019-08-06T21:32:32","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9656","RelatedDescription":"Closed issue \"[SDK 2.1.300] Command 'dotnet publish' fails for projects with GeneratePackageOnBuild=true\" (#9656) at dotnet/cli","RelatedBody":"@gitorrin commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778)\n\nCommand 'dotnet publish' fails for projects publishing with GeneratePackageOnBuild=true. \r\nTargetFramework is netcoreapp2.0.\r\n\r\n`<PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>`\r\n\r\nThis used to work with the previous SDK version 2.1.101. \r\nThe error it generates is:\r\n\"C:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(168,5): error MSB3030: Could not copy the file \"obj\\Debug\\netcoreapp2.0\\<anyAssemblyName>.dll\" because it was not found. \"\r\n\r\n\r\n\n\n---\n\n@dasMulli commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778#issuecomment-404486224)\n\nDo you have ay steps to reproduce? what project type is affected? I couldn't reproduce with a couple of configurations I thought you could have.\n\n---\n\n@gitorrin commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778#issuecomment-404496749)\n\nSorry, apparently I haven't added enough details. Thank you for reacting so fast. \r\n\r\n1. Open Command Prompt\r\n2. run dotnet new classlib\r\n3. Edit project file to have GeneratePackageOnBuild set to true & target net core 2.0\r\n\r\nProject file should look like this:\r\n`<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n</Project>`\r\n\r\n4. (optional)\r\nAdd global.json to project folder with content \r\n`{\r\n  \"sdk\": {\r\n    \"version\": \"2.1.300\"\r\n  }  \r\n}\r\n`\r\n4. run dotnet publish\r\n\r\nFails with error \r\n\r\n> C:\\Program C:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(168,5): error MSB3030: Could not copy the file \"obj\\Debug\\netstandard2.0\\test1.dll\" because it was not found. [C:\\Users\\<user>\\Documents\\Visual Studio 2017\\Projects\\test1\\test1.csproj]\r\n\r\nPS: modifying the global.json file to \r\n`{\r\n  \"sdk\": {\r\n    \"version\": \"2.1.101\"\r\n  }  \r\n}`\r\nand running dotnet publish succeeds \n\n---\n\n@dasMulli commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778#issuecomment-404507887)\n\nThanks, can repro now. the important part to the repro is that no `dotnet build` etc. have been called before.\n\n---\n\n@dasMulli commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778#issuecomment-404509150)\n\n@nguerrera the problem here is that the new `--no-build` option for publish is interfering with the existing NuGet logic for `GeneratePackageOnBuild` which has logic to not trigger a build again while packing.\r\n\r\nIn essence, both pieces of logic use `$(NoBuild)` for this 😱 \r\nIs it still possible to rename publish's `NoBuild` to `NoBuildOnPublish` or something similar?\n\n---\n\n@dasMulli commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778#issuecomment-404509993)\n\n@gitorrin you are right, this is a regression in 2.1.3xx. The workaround is to explicitly build (`dotnet build`) before publishing.\n\n---\n\n@gitorrin commented on [Thu Jul 12 2018](https://github.com/dotnet/core/issues/1778#issuecomment-404514358)\n\nThanks for looking into this, @dasMulli.\n\n"},{"Id":"10160232563","Type":"IssuesEvent","CreatedAt":"2019-08-06T21:28:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12129","RelatedDescription":"Closed issue \"CLI option to Build with full .NET Framework MSBuild\" (#12129) at dotnet/cli","RelatedBody":"I'm currently trying to build a net472 application that has a ComReference. ComReferences are not yet support by the msbuild that is integrated in the dotnet core sdk.\r\n\r\nI would like to propose a feature that allows us to use the dotnet cli to spawn a full .net framework MSBuild process. Something like\r\n\r\n> dotnet msbuild-net /t:Publish ....\r\n\r\nI think it wouldn't be a big issue to implement this. But it would help the developers to prepare everything for the future. Currently I would now have to find a why to get the path to the full msbuild.exe. Btw. is there a easy way to determine the latest msbuild.exe on a machine (e.g. via envrionment variable?\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10158956917","Type":"IssuesEvent","CreatedAt":"2019-08-06T18:11:50","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1403","RelatedDescription":"Opened issue \"What version of .NET Standard should be bundled in 5.0 SDK builds?\" (#1403) at dotnet/standard","RelatedBody":"Currently, we bundle netstandard 2.1 in SDK 3.0. I see dotnet/standard `master` is producing netstandard 2.2.\r\n\r\nShould Core-Setup bundle up 2.2 and have that used in the SDK (https://github.com/dotnet/core-setup/issues/7567)? Or should the SDK continue to bundle netstandard 2.1? Should more than one version be bundled?\r\n\r\nThe question of whether we need more .NET Standard releases in a 5.0 world seems very relevant. (I don't know any newer info than https://devblogs.microsoft.com/dotnet/introducing-net-5/.)\r\n\r\n@wtgodbe @nguerrera "},{"Id":"10158801026","Type":"PullRequestEvent","CreatedAt":"2019-08-06T17:48:47","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1401","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1401) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10156568743","Type":"PullRequestEvent","CreatedAt":"2019-08-06T13:07:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1402","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1402) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10156489082","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:56:54","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1402","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1402) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10156481365","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:55:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1401","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1401) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10156189569","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:15:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1400","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1400) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10156185348","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:14:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1399","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1399) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10156122386","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:05:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1400","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1400) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10161597071","Type":"PullRequestEvent","CreatedAt":"2019-08-07T03:18:00","Actor":"PRIMETSS","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39943","RelatedDescription":null,"RelatedBody":"Issue:\r\nhttps://github.com/dotnet/corefx/issues/35722\r\nhttps://github.com/dotnet/corefx/issues/32847\r\n\r\nOn Windows 10 IoT device (eg Rasbery Pi 3+) with Serial USB device connected `System.IO.Ports.SerialPort .GetPortNames() `returns garbage non chars.\r\n![image](https://user-images.githubusercontent.com/11331370/62270410-29626b80-b475-11e9-857c-e0129a6bb905.png)\r\n\r\nReason:\r\n`System.IO.Ports.SerialPort .GetPortNames()' was reading registry key \r\n![image](https://user-images.githubusercontent.com/11331370/62270526-56af1980-b475-11e9-8243-f483073ba092.png)\r\nBut this appears not to be correctly initialised by Serial Function Driver (serenum.sys) when USB device is connect to a Win10IoT device.\r\n[https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports](https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports)\r\n \r\nSuggested Fix:\r\nSince there appears to be no sure fire way to enumerate both legacy Com & USB PnP COM ports on Windows OS, and Win10 IoT also seem to handle initialisation of ports differently again.\r\nSuggested returning both the Registry COM[x] port names and also the DosDevice HardwareID (?) Port Name to allow connection to previously un-able to open ports due to no valid port name to open.\r\n\r\nHardware Tests:\r\nAs testing this issue requires multiple hardware, not only different OS's but also a variety of different COM port devices, eg Legacy on board UARTS IC's and also USB PnP Serial Ports. Testing is laborious.\r\n\r\nTested: \r\nLegacy Desktop System (Intel MB, on-board Serial port UART) (Win7) [On-board Serial Port + Multiple USB PnP comm port devices]\r\nRaspberry Pi 3B+ (Win10 IoT ARM32) [Multiple USB PnP comm port devices + OnBoard SoC UART]\r\nHP Pro Desktop (Windows 10 Pro 64 bit) [Multiple USB PnP comm port devices]\r\n\r\nWindows 8 { Not tested yet }\r\n"},{"Id":"10161596933","Type":"PullRequestEvent","CreatedAt":"2019-08-07T03:17:58","Actor":"PRIMETSS","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39943","RelatedDescription":"Closed pull request \"Fix System.IO.Ports.SerialPort GetPortNames() Returns garbage chars on Win10IoT Devices with USB Serial ports\" (#39943) at dotnet/corefx","RelatedBody":"Issue:\r\nhttps://github.com/dotnet/corefx/issues/35722\r\nhttps://github.com/dotnet/corefx/issues/32847\r\n\r\nOn Windows 10 IoT device (eg Rasbery Pi 3+) with Serial USB device connected `System.IO.Ports.SerialPort .GetPortNames() `returns garbage non chars.\r\n![image](https://user-images.githubusercontent.com/11331370/62270410-29626b80-b475-11e9-857c-e0129a6bb905.png)\r\n\r\nReason:\r\n`System.IO.Ports.SerialPort .GetPortNames()' was reading registry key \r\n![image](https://user-images.githubusercontent.com/11331370/62270526-56af1980-b475-11e9-8243-f483073ba092.png)\r\nBut this appears not to be correctly initialised by Serial Function Driver (serenum.sys) when USB device is connect to a Win10IoT device.\r\n[https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports](https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports)\r\n \r\nSuggested Fix:\r\nSince there appears to be no sure fire way to enumerate both legacy Com & USB PnP COM ports on Windows OS, and Win10 IoT also seem to handle initialisation of ports differently again.\r\nSuggested returning both the Registry COM[x] port names and also the DosDevice HardwareID (?) Port Name to allow connection to previously un-able to open ports due to no valid port name to open.\r\n\r\nHardware Tests:\r\nAs testing this issue requires multiple hardware, not only different OS's but also a variety of different COM port devices, eg Legacy on board UARTS IC's and also USB PnP Serial Ports. Testing is laborious.\r\n\r\nTested: \r\nLegacy Desktop System (Intel MB, on-board Serial port UART) (Win7) [On-board Serial Port + Multiple USB PnP comm port devices]\r\nRaspberry Pi 3B+ (Win10 IoT ARM32) [Multiple USB PnP comm port devices + OnBoard SoC UART]\r\nHP Pro Desktop (Windows 10 Pro 64 bit) [Multiple USB PnP comm port devices]\r\n\r\nWindows 8 { Not tested yet }\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10161944719","Type":"IssuesEvent","CreatedAt":"2019-08-07T04:58:02","Actor":"peteraritchie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37782","RelatedDescription":"Closed issue \"Project > Add > New Item > Analyzer (C#) does not install necessary Nuget packages, resulting in compile errors\" (#37782) at dotnet/roslyn","RelatedBody":"**Version Used**: 16.2.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create class library, .net standard, c#\r\n2. Right-click new library in solution explorer\r\n3. Click New > Add Item > Extensibility > Analyzer\r\n4. Click Analyzer\r\n5. Press Add\r\n6 Build class library\r\n\r\n**Expected Behavior**:\r\nNo compile errors\r\n\r\n**Actual Behavior**:\r\nCompile Errors:\r\n```\r\n2>------ Build started: Project: ClassLibrary1, Configuration: Debug Any CPU ------\r\n2>Analyzer1.cs(3,26,3,35): error CS0234: The type or namespace name 'Immutable' does not exist in the namespace 'System.Collections' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(6,17,6,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(7,17,7,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(8,17,8,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(9,17,9,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(14,30,14,48): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,25,23,61): error CS0246: The type or namespace name 'ImmutableArray<>' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,40,23,60): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzerAttribute' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,25,13,38): error CS0103: The name 'LanguageNames' does not exist in the current context\r\n2>Analyzer1.cs(25,41,25,56): error CS0246: The type or namespace name 'AnalysisContext' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,62,23,82): error CS0115: 'Analyzer1.SupportedDiagnostics': no suitable method found to override\r\n2>Analyzer1.cs(17,34,17,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(18,34,18,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(21,25,21,45): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\n```"},{"Id":"10161827257","Type":"IssuesEvent","CreatedAt":"2019-08-07T04:23:39","Actor":"peteraritchie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37782","RelatedDescription":"Opened issue \"Project > Add > New Item > Analyzer (C#) does not install necessary Nuget packages, resulting in compile errors\" (#37782) at dotnet/roslyn","RelatedBody":"**Version Used**: 16.2.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create class library, .net standard, c#\r\n2. Right-click new library in solution explorer\r\n3. Click New > Add Item > Extensibility > Analyzer\r\n4. Click Analyzer\r\n5. Press Add\r\n6 Build class library\r\n\r\n**Expected Behavior**:\r\nNo compile errors\r\n\r\n**Actual Behavior**:\r\nCompile Errors:\r\n```\r\n2>------ Build started: Project: ClassLibrary1, Configuration: Debug Any CPU ------\r\n2>Analyzer1.cs(3,26,3,35): error CS0234: The type or namespace name 'Immutable' does not exist in the namespace 'System.Collections' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(6,17,6,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(7,17,7,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(8,17,8,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(9,17,9,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(14,30,14,48): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,25,23,61): error CS0246: The type or namespace name 'ImmutableArray<>' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,40,23,60): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzerAttribute' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,25,13,38): error CS0103: The name 'LanguageNames' does not exist in the current context\r\n2>Analyzer1.cs(25,41,25,56): error CS0246: The type or namespace name 'AnalysisContext' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,62,23,82): error CS0115: 'Analyzer1.SupportedDiagnostics': no suitable method found to override\r\n2>Analyzer1.cs(17,34,17,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(18,34,18,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(21,25,21,45): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\n```"},{"Id":"10161326215","Type":"PullRequestEvent","CreatedAt":"2019-08-07T02:04:44","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37627","RelatedDescription":"Merged pull request \"Consume the new IMethodSymbol.Construct overload that takes nullability\" (#37627) at dotnet/roslyn","RelatedBody":""},{"Id":"10161310673","Type":"PullRequestEvent","CreatedAt":"2019-08-07T02:00:32","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37752","RelatedDescription":"Merged pull request \"Merge release/dev16.3-preview2 to master\" (#37752) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10161271512","Type":"IssuesEvent","CreatedAt":"2019-08-07T01:49:37","Actor":"mjsabby","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7672","RelatedDescription":"Opened issue \"Add Span/ROSpan to Test.CoreLib\" (#7672) at dotnet/corert","RelatedBody":"I think add Span and ROS to Test.CoreLib makes it considerably more useful. I'm not sure what the threshold for Test.CoreLib is. Is it the absolute minimum? Or is it the absolute minimum + extremely extremely important stuff.\r\n\r\nFor example, I don't believe `object.ToString()` needs to be in Test.CoreLib but I can understand if this starts to get into a slippery slope."},{"Id":"10158921401","Type":"PullRequestEvent","CreatedAt":"2019-08-06T18:06:22","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7671) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10156436745","Type":"PullRequestEvent","CreatedAt":"2019-08-06T12:50:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7670","RelatedDescription":"Merged pull request \"Fix a couple R2R issues I hit\" (#7670) at dotnet/corert","RelatedBody":"* I don't know how, but I missed the PInvoke ReadyToRun helpers exist in CoreCLR\r\n* Add a couple more CORINFO_HELP helpers that don't have R2R mapping\r\n* Cannot get FieldInfo for a field with an indeterminate offset."},{"Id":"10155226683","Type":"PullRequestEvent","CreatedAt":"2019-08-06T09:49:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7670","RelatedDescription":"Opened pull request \"Fix a couple R2R issues I hit\" (#7670) at dotnet/corert","RelatedBody":"* I don't know how, but I missed the PInvoke ReadyToRun helpers exist in CoreCLR\r\n* Add a couple more CORINFO_HELP helpers that don't have R2R mapping\r\n* Cannot get FieldInfo for a field with an indeterminate offset."},{"Id":"10153051013","Type":"PullRequestEvent","CreatedAt":"2019-08-06T02:41:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7669","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#7669) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10149412157","Type":"PullRequestEvent","CreatedAt":"2019-08-05T15:10:07","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7669","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#7669) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10146455203","Type":"PullRequestEvent","CreatedAt":"2019-08-05T08:11:44","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Merged pull request \"Fix stack traces when reflection is disabled\" (#7665) at dotnet/corert","RelatedBody":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled."},{"Id":"10146265912","Type":"PullRequestEvent","CreatedAt":"2019-08-05T07:41:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Merged pull request \"Prevent computing bad layout\" (#7659) at dotnet/corert","RelatedBody":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures."},{"Id":"10145686190","Type":"PullRequestEvent","CreatedAt":"2019-08-05T05:39:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7668","RelatedDescription":"Merged pull request \"Add link to CoreRT Future issue\" (#7668) at dotnet/corert","RelatedBody":""},{"Id":"10145685464","Type":"PullRequestEvent","CreatedAt":"2019-08-05T05:39:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7668","RelatedDescription":"Opened pull request \"Add link to CoreRT Future issue\" (#7668) at dotnet/corert","RelatedBody":""},{"Id":"10144261872","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:18:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Merged pull request \"Add a note about `strip` program\" (#7666) at dotnet/corert","RelatedBody":""},{"Id":"10144241977","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:07:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Opened pull request \"Add a doc on debugging CoreRT programs\" (#7667) at dotnet/corert","RelatedBody":"A couple useful tips."},{"Id":"10144241682","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:07:43","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Opened pull request \"Add a note about `strip` program\" (#7666) at dotnet/corert","RelatedBody":""},{"Id":"10144241361","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:07:32","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Opened pull request \"Fix stack traces when reflection is disabled\" (#7665) at dotnet/corert","RelatedBody":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10161495330","Type":"PullRequestEvent","CreatedAt":"2019-08-07T02:50:24","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3513","RelatedDescription":"Opened pull request \"React to removal of types in Microsoft.VisualBasic.Core.dll\" (#3513) at dotnet/sdk","RelatedBody":"Due to layering issues, several types that are necessary for VB My.* support are being removed from 3.0. Furthermore, this would cause all .NET Core 3.0 projects to fail to build without this change, which sets MyType=Empty by default to prevent the My.* code spit that would depend on these types from happening by default.\r\n\r\nNote that .NET Core 2.x is not impacted because it still uses VBRuntime=Embed, which also suppresses My.*. It also prevents other VB constructs from working that still work .NET Core 3.0 without these types. The test has been adapted to test some of those constructs for 3.0 instead of testing for My.* working.\r\n\r\nAlso fix related issue that could cause a bug or misconfigured project to result in the .NET Framework VB compiler trying to reference the .NET Framework Microsoft.VisualBasic.dll in the runtime directory instead of the resolved Microsoft.VisualBasic.dll."},{"Id":"10160509932","Type":"IssuesEvent","CreatedAt":"2019-08-06T22:22:06","Actor":"vatsan-madhavan","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3512","RelatedDescription":"Opened issue \"Theme assemblies cannot be referenced from XAML in latest SDK\" (#3512) at dotnet/sdk","RelatedBody":"@vatsan-madhavan commented on [Tue Aug 06 2019](https://github.com/dotnet/wpf/issues/1552)\n\nThis is related to #765, which primarily deals with the inability to reference theme assemblies for consumption in C#/VB etc. code. \r\n\r\nIn recent preview8 builds, XAML like this no longer builds because the WPF theme assembles are no longer referenced by default by `Microsoft.WindowsDesktop`.\r\n\r\n```XAML\r\n... xmlns:theme=\"clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero\"\r\n\r\n<theme:SystemDropShadowChrome>\r\n       <HeaderedContentControl Padding=\"10\" Foreground=\"#CCFFFFFF\">\r\n              <HeaderedContentControl.Header>\r\n\r\n```\r\n\r\nGiven there is no way to reference these directly at build-time,  the theme assemblies are not complete unusable. \r\n\r\nThis change was made by https://github.com/dotnet/core-setup/issues/7218, which was done in due to a miscommunication between the WPF and the SDK teams. We are working with the SDK team to undo this change for .NET Core 3.0. \r\n\r\nAlso related: https://github.com/dotnet/sdk/issues/3265\n\n"},{"Id":"10159731641","Type":"IssuesEvent","CreatedAt":"2019-08-06T20:09:36","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3367","RelatedDescription":"Closed issue \"\"dotnet publish\" failed when GeneratePackageOnBuild is true (version 3.0.100-preview6-012264)\" (#3367) at dotnet/sdk","RelatedBody":"Running \"dotnet publish\" on a console projects failed when GeneratePackageOnBuild is true.\r\ndotnet --version                                                                                                                                                                                                                                                                                          3.0.100-preview6-012264\r\nIt seems Microsoft.NET.Publish.targets skips build when  GeneratePackageOnBuild is true.\r\n\r\n**Steps to reproduce:**\r\n1.install .NETCore SDK 3.0.100-preview6-012264\r\n2.run \"dotnet new console\" to create a project A\r\n3.add \"`<GeneratePackageOnBuild>true</GeneratePackageOnBuild>`\" in A.csproj PropertyGroup and save.\r\n4.run \"dotnet publish A.csproj\"\r\n\r\n**Expected behavior:**\r\nPublish successfully.\r\n**Actual behavior:**\r\nFailed with following error messages:\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(149,5): error MSB3030: Could not copy the file \"obj\\Debug\\netcoreapp3.0\\A.dll\" because it was not found. [C:\\repos\\A\\A.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(149,5): error MSB3030: Could not copy the file \"C:\\repos\\A\\bin\\Debug\\netcoreapp3.0\\A.deps.json\" because it was not found. [C:\\repos\\A\\A.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(149,5): error MSB3030: Could not copy the file \"obj\\Debug\\netcoreapp3.0\\A.pdb\" because it was not found. [C:\\repos\\A\\A.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(149,5): error MSB3030: Could not copy the file \"C:\\repos\\A\\bin\\Debug\\netcoreapp3.0\\A.runtimeconfig.json\" because it was not found. [C:\\repos\\A\\A.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(149,5): error MSB3030: Could not copy the file \"C:\\repos\\A\\obj\\Debug\\netcoreapp3.0\\A.exe\" because it was not found. [C:\\repos\\A\\A.csproj]"},{"Id":"10159728310","Type":"IssuesEvent","CreatedAt":"2019-08-06T20:09:06","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3023","RelatedDescription":"Closed issue \"PackAsTool true breaks debugging in Visual Studio when project is WPF\" (#3023) at dotnet/sdk","RelatedBody":"I'm writing a tool application that uses WPF. It is intended to be called from console, but it shows graphics that cannot be represented by text, therefore I need WPF. It works fine in .NET Framework, but when migrating to .NET Core, when I add `<PackAsTool>true</PackAsTool>`, VS2019 cannot debug it anymore, saying:\r\n\r\n **The debug executable 'c:\\path\\to\\mytool.exe' specified in 'mytool' debug profile does not exist.**\r\n\r\nThis might be a VS2019 issue (as you are probably thinking right now 😉), however it seems that when `<PackAsTool>true</PackAsTool>` is added to the `.csproj`, it **changes the output type to dll**, even though the project says it's `WinExe`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <PackageType>DotnetTool</PackageType>\r\n    <PackAsTool>true</PackAsTool>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis is bad because I cannot use the simplicity of `<PackAsTool>true</PackAsTool>` for publishing and installation (i.e. have an automatic shim installed to path).\r\n\r\nEven if I ignore the VS limitation, I'm also not sure if a DLL would work as expected for a WPF project. My understanding is that WPF requires `WinExe` for certain features.\r\n\r\nHere's my `dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nAnd this is my VS version:\r\n\r\n![image](https://user-images.githubusercontent.com/8313235/54486907-1b0c0e00-484c-11e9-80a9-9503c7136747.png)\r\n"},{"Id":"10159722408","Type":"PullRequestEvent","CreatedAt":"2019-08-06T20:08:09","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3505","RelatedDescription":"Merged pull request \"Need apphost in build but do not pack it\" (#3505) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/sdk/issues/3023\r\n\r\n### Description\r\n\r\nApphost generation is disabled for dotnet tools to prevent the apphost from being packaged in the package. When debugging a WPF or Winforms project that has PackAsTool set to true, there is no exe generated with appropriate Windows PE bits set, because we disabled it as described above. Instead of disabling apphost generation when PackAsTool=true, SDK should generate it during build, but prevent it from being packaged in the nupkg.\r\n\r\n### Customer Impact\r\n\r\nWhen debugging an WPF or Winforms dotnet tool project (PackAsTool=true) in VS, the user would see the command line instead of the GUI. The app's GUI is not rendered and you get only a blank command prompt.\r\n\r\n### Regression?\r\n\r\nYes. This regressed from .NET Core SDK 3.0.100-preview3 due to https://github.com/dotnet/sdk/commit/3487007c6bf8316ce3c871aadbe75498ab2da7c4\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\n\r\nAdded new unit test coverage to ensure `RunCommand`(which VS debug calls) uses the apphost exe instead of the dll."},{"Id":"10159720579","Type":"PullRequestEvent","CreatedAt":"2019-08-06T20:07:52","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3473","RelatedDescription":"Merged pull request \"Fix Publish with GeneratePackageOnBuild=true\" (#3473) at dotnet/sdk","RelatedBody":"### Description\r\n\r\nThe previous change https://github.com/dotnet/sdk/pull/3255/files caused the _Build_ target to no longer be part of the dependency of the _Publish_ target when `GeneratePackageOnBuild=true`. With this change, we edited the dependency targets graph to add the targets publish needs without adding _Build back to the list. We also added test coverage for the combination of related msbuild properties to prevent future regression.\r\n\r\n### Customer Impact\r\n\r\n`dotnet publish` fails when `GeneratePackageOnBuild=true`\r\n\r\n### Regression?\r\n\r\nYes. By https://github.com/dotnet/sdk/pull/3255/files, since dotne core SDK 3.0.100-preview 6\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\n\r\nAdded `GeneratePackageOnBuild` + `PackAsTool` + Publish/Build/Pack all combinations in unit test.\r\n\r\n===============\r\n\r\nFix https://github.com/dotnet/sdk/issues/3367\r\n\r\n===============\r\n\r\nWhat I did is essentially write a different dependency graph in GeneratePackageOnBuild = true to avoid circular dependency . Original bug. I added the https://github.com/dotnet/sdk/pull/3255/files and essentially regressed https://github.com/NuGet/Home/issues/7801. Instead of the logic is in nuget, it is in SDK now. Publish should not skip Build  if GeneratePackageOnBuild is true. Or it will mean no build even use Publish verb.\r\n\r\nBut revert 3255 means, https://github.com/dotnet/sdk/issues/2114 will be back. The solution is to break Pack’s dependency on Build in GeneratePackageOnBuild. But it still need Publish. So I need to let Pack depend directly on no build version of publish.\r\n\r\n> Why cannot directly use “_PublishNoBuildAlternative”?\r\n\r\nWe want to exclude Build step regardless NoBuild flag is true or not.\r\n\r\n> Test coverage\r\n\r\nI have GeneratePackageOnBuild + PackAsTool + Publish/Build/Pack all combinations covered in tests. Although I did discover GeneratePackageOnBuild+Pack https://github.com/dotnet/sdk/issues/3471 does not work. But it was there since 2.0. And without nuget help, we cannot easily fix it."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"477662981","IsPullRequest":true,"CreatedAt":"2019-08-07T01:32:05","Actor":"sandreenko","Number":"26036","RawContent":null,"Title":"Delete TRANSLATE_PDB.","State":"open","Body":"Does anybody know what it was for and if it is still used?\r\nI have not found any references in desktop sources.\r\nI see that `TRANSLATE_PDB` existed before 2001, but can't find when it was introduced and how it was used.\r\n\r\nWhen you enable it there are many compile errors.\r\n\r\n\r\nPTAL @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/26036","RelatedDescription":"Open PR \"Delete TRANSLATE_PDB.\" (#26036)"},{"Id":"477093621","IsPullRequest":true,"CreatedAt":"2019-08-07T00:47:18","Actor":"jashook","Number":"26018","RawContent":null,"Title":"Superpmi mch merge","State":"closed","Body":"Another requirement to use chem.\r\n\r\n/cc @dotnet/jit-contrib. ","Url":"https://github.com/dotnet/coreclr/pull/26018","RelatedDescription":"Closed or merged PR \"Superpmi mch merge\" (#26018)"},{"Id":"477643020","IsPullRequest":true,"CreatedAt":"2019-08-06T23:56:32","Actor":"sywhang","Number":"26035","RawContent":null,"Title":"Improve ArgumentNullExceptions on DiagnosticCounter.DisplayName/Unit","State":"open","Body":"Fix #25967. \r\n\r\ncc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/26035","RelatedDescription":"Open PR \"Improve ArgumentNullExceptions on DiagnosticCounter.DisplayName/Unit\" (#26035)"},{"Id":"477111146","IsPullRequest":true,"CreatedAt":"2019-08-06T18:32:19","Actor":"elinor-fung","Number":"26023","RawContent":null,"Title":"Use Arcade's internal tool restore project for restoring IBCMerge","State":"closed","Body":"With the recent update to a newer version of Arcade, the DefaultVersions.props no longer sets default `RestoreSources` values. Our ibcmerge.csproj was relying on this. We should just use Arcade's system for restoring IBC merge instead.\r\n\r\nThis change only makes the restore go through Arcade. We have more work to do to use Arcade for actually running IBC merge (#24751), but this at least makes the official build stop failing at restoring internal tools.\r\n\r\ncc @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/pull/26023","RelatedDescription":"Closed or merged PR \"Use Arcade's internal tool restore project for restoring IBCMerge\" (#26023)"},{"Id":"477351654","IsPullRequest":true,"CreatedAt":"2019-08-06T16:53:52","Actor":"dotnet-maestro[bot]","Number":"26032","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19405.13\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26032","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26032)"},{"Id":"477353478","IsPullRequest":true,"CreatedAt":"2019-08-06T14:44:52","Actor":"dotnet-maestro[bot]","Number":"26033","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26033","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26033)"},{"Id":"477348757","IsPullRequest":true,"CreatedAt":"2019-08-06T14:44:33","Actor":"dotnet-maestro[bot]","Number":"26031","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26031","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26031)"},{"Id":"477315350","IsPullRequest":true,"CreatedAt":"2019-08-06T13:16:23","Actor":"vitek-karas","Number":"26030","RawContent":null,"Title":"Remove inspection only from binder","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26030","RelatedDescription":"Closed or merged PR \"Remove inspection only from binder\" (#26030)"},{"Id":"477360966","IsPullRequest":false,"CreatedAt":"2019-08-06T12:49:11","Actor":"GSPP","Number":"26034","RawContent":null,"Title":"Cannot profile exception performance possibly due to stack walking issue","State":"open","Body":"It appears impossible to profile the CPU usage of exceptions. There seems to be some issue with stack walking.\r\n\r\n            while (true)\r\n            {\r\n                try\r\n                {\r\n                    var reader = new Utf8JsonReader(new byte[] { (byte)'{' });\r\n                    while (reader.Read()) ;\r\n                }\r\n                catch\r\n                {\r\n                }\r\n            }\r\n\r\nProcess Explorer shows a truncated stack with unusual 0x0000 entries:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62540924-fba46a80-b858-11e9-9150-b541726554f0.png)\r\n\r\nPerfView loses track of where the time is spent:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62540993-2262a100-b859-11e9-8dec-2f404646204f.png)\r\n\r\nNote, that 95% of the time is unaccounted for and it appears as if JSON code calls into `Main`.\r\n\r\nDotTrace shows a lot of time spent in \"Unsafe Stack Walking\" but in the wrong place:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62540942-065eff80-b859-11e9-9b3d-d3c7f343aa4f.png)\r\n\r\nThere might be some quicks in how the tools are functioning. But it seems that the basic stack walking data available to profilers is broken.\r\n\r\nEnvironment:\r\n\r\n* In 3.0.100-preview7-012821\r\n* Windows 10\r\n* Latest Windows SDK for dbghelp.dll\r\n* Latest PerfView\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26034","RelatedDescription":"Open issue \"Cannot profile exception performance possibly due to stack walking issue\" (#26034)"},{"Id":"477263169","IsPullRequest":true,"CreatedAt":"2019-08-06T11:48:16","Actor":"jkotas","Number":"26029","RawContent":null,"Title":"Revert \"Fix issue with out-of-scope GCFrame in Frame list\"","State":"closed","Body":"Reverts dotnet/coreclr#25795","Url":"https://github.com/dotnet/coreclr/pull/26029","RelatedDescription":"Closed or merged PR \"Revert \"Fix issue with out-of-scope GCFrame in Frame list\"\" (#26029)"},{"Id":"477062216","IsPullRequest":true,"CreatedAt":"2019-08-06T10:45:17","Actor":"vitek-karas","Number":"26015","RawContent":null,"Title":"Binder minor cleanup","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26015","RelatedDescription":"Closed or merged PR \"Binder minor cleanup\" (#26015)"},{"Id":"476914265","IsPullRequest":true,"CreatedAt":"2019-08-06T09:11:20","Actor":"Dotnet-GitSync-Bot","Number":"26007","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/26007","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#26007)"},{"Id":"477191670","IsPullRequest":true,"CreatedAt":"2019-08-06T09:10:40","Actor":"jcorrius","Number":"26027","RawContent":null,"Title":"Fix List Format","State":"closed","Body":"Although the source text is correct, \"1)\" gets interpreted as another element of the list and it is automatically changed to \"3)\"\r\nI added the word \"Option\" in front of it just to make sure \"1)\" is interpreted as intended.","Url":"https://github.com/dotnet/coreclr/pull/26027","RelatedDescription":"Closed or merged PR \"Fix List Format\" (#26027)"},{"Id":"477212366","IsPullRequest":false,"CreatedAt":"2019-08-06T07:21:44","Actor":"SuperSnowYao","Number":"26028","RawContent":null,"Title":"> C#本来是一门优秀的语言，绝对有可能一统江湖，结果一手好牌被打的稀巴烂。","State":"closed","Body":"> C#本来是一门优秀的语言，绝对有可能一统江湖，结果一手好牌被打的稀巴烂。\r\n\r\nC#仅仅是主流语言里的优秀者而已，语言特性上还有不少的可改进之处\r\n\r\n> 最让人感觉垃圾的地方在于，不停的优化asp.net core，ef core，以及性能上的优化，我想问这些真的很重要吗？难道社区就不能出来做这些吧\r\n\r\n你好，真的很重要，社区真的做不出来，因为水平太菜\r\n我们无法忍受用着各种开发效率和运行效率都垃圾的东西了\r\n\r\n> .net core我们已经给了你5年的时间了，结果你也看见了，如果你以为这是绝地重生，我只能说哈哈~~你赢了。\r\n\r\n本来就不是绝地，中途转型而已，并给出了和旧.net人划清界限的机会\r\n\r\n> 尤其是.net在中国的市场，一步步被瓜分，不知道我软是否考虑过原因。\r\n\r\n原因是中国还处于软件小农阶段，有工业品概念的人都很少\r\n原先的市场大部分是拖控件和WebForm，这些人根本无法有效转化为现代程序工作者，徒给.net添加坏名而已\r\n\r\n> 我们最关注的是你的可能性，可以在各种cpu架构下运行，支持所有国产操作系统（即使这些系统再垃圾）\r\n\r\n请问“所有”有多少？拿出一个不是Windows、macOS、linux、FreeBSD的？\r\n\r\n> 你的未来就在我这个issus上了，想要迎头赶上java，py的生态我们就不奢望了，支持所有平台是你唯一歪道超车的机会\r\n\r\n看看现在C的困境吧，有支持广度又能怎样呢\r\n\r\n> Many people have to give up .net and use Java instead. \r\n\r\nDid they **ever** use **real** .net?\r\nLoongnix has a team to support .net on them.\r\n\r\n\r\nWhy Java? Android. Why Python? Tensorflow and PyTorch. Why JavaScript? Chrome.\r\nMake .NET popular? Bring back Windows Phone and Silverlight and make them popular. Make ML.Net better.\r\nThe popular languages are never popular themselves.\r\n\r\n_Originally posted by @huoyaoyuan in https://github.com/dotnet/coreclr/issues/25983#issuecomment-518531260_","Url":"https://github.com/dotnet/coreclr/issues/26028","RelatedDescription":"Closed issue \"> C#本来是一门优秀的语言，绝对有可能一统江湖，结果一手好牌被打的稀巴烂。\" (#26028)"},{"Id":"477100086","IsPullRequest":true,"CreatedAt":"2019-08-06T05:36:20","Actor":"elinor-fung","Number":"26021","RawContent":null,"Title":"Prefix error messages in init-tools to make them logging commands in Azure DevOps","State":"closed","Body":"Prefix error messages in init-tools to make logging commands in Azure DevOps (such that they show up as errors in the timeline and telemetry)","Url":"https://github.com/dotnet/coreclr/pull/26021","RelatedDescription":"Closed or merged PR \"Prefix error messages in init-tools to make them logging commands in Azure DevOps\" (#26021)"},{"Id":"477159325","IsPullRequest":false,"CreatedAt":"2019-08-06T04:10:48","Actor":"jashook","Number":"26026","RawContent":null,"Title":"[Linux][Arm32] update ubuntu 14.04 arm32 queue to ubuntu 16.04","State":"open","Body":"Currently our outerloop arm32 machines are the older ubuntu 14.04 jetson tk1s. These machines are currently not handling workloads, and it is worth updating to the new tx2 queues.","Url":"https://github.com/dotnet/coreclr/issues/26026","RelatedDescription":"Open issue \"[Linux][Arm32] update ubuntu 14.04 arm32 queue to ubuntu 16.04\" (#26026)"},{"Id":"477153383","IsPullRequest":false,"CreatedAt":"2019-08-06T03:42:08","Actor":"jashook","Number":"26025","RawContent":null,"Title":"[Linux][Arm] assert currentProcessCpuCount == g_processAffinitySet.Count() in GC/API/GC/KeepAliveNull/KeepAliveNull.sh","State":"open","Body":"```\r\nGC/API/GC/KeepAliveNull/KeepAliveNull.sh [FAIL]\r\n      \r\n      Assert failure(PID 24052 [0x00005df4], Thread: 24052 [0x5df4]): currentProcessCpuCount == g_processAffinitySet.Count()\r\n          File: /__w/2/s/src/vm/gcenv.os.cpp Line: 114\r\n          Image: /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Payload/corerun\r\n      \r\n      /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Work/ea6de819-2a26-464b-aba9-057e7137059f/Exec/GC/API/GC/KeepAliveNull/KeepAliveNull.sh: line 252: 24052 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n      \r\n      Return code:      1\r\n      Raw output file:      /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Work/ea6de819-2a26-464b-aba9-057e7137059f/Exec/GC/API/Reports/GC.API/GC/KeepAliveNull/KeepAliveNull.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Payload/corerun KeepAliveNull.exe ''\r\n      Expected: 100\r\n      Actual: 134\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=/ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Payload\r\n      > /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Work/ea6de819-2a26-464b-aba9-057e7137059f/Exec/GC/API/GC/KeepAliveNull/KeepAliveNull.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /__w/2/s/bin/tests/Linux.arm.Checked/TestWrappers/GC.API/GC.API.XUnitWrapper.cs(2856,0): at GC_API._GC_KeepAliveNull_KeepAliveNull_._GC_KeepAliveNull_KeepAliveNull_sh()\r\n      Output:\r\n        \r\n        Assert failure(PID 24052 [0x00005df4], Thread: 24052 [0x5df4]): currentProcessCpuCount == g_processAffinitySet.Count()\r\n            File: /__w/2/s/src/vm/gcenv.os.cpp Line: 114\r\n            Image: /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Payload/corerun\r\n        \r\n        /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Work/ea6de819-2a26-464b-aba9-057e7137059f/Exec/GC/API/GC/KeepAliveNull/KeepAliveNull.sh: line 252: 24052 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        \r\n        Return code:      1\r\n        Raw output file:      /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Work/ea6de819-2a26-464b-aba9-057e7137059f/Exec/GC/API/Reports/GC.API/GC/KeepAliveNull/KeepAliveNull.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Payload/corerun KeepAliveNull.exe ''\r\n        Expected: 100\r\n        Actual: 134\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Payload\r\n        > /ssd/dotnetbuild/work/66290456-48d2-448c-ae61-9d5ab09b9d72/Work/ea6de819-2a26-464b-aba9-057e7137059f/Exec/GC/API/GC/KeepAliveNull/KeepAliveNull.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26025","RelatedDescription":"Open issue \"[Linux][Arm] assert currentProcessCpuCount == g_processAffinitySet.Count() in GC/API/GC/KeepAliveNull/KeepAliveNull.sh\" (#26025)"},{"Id":"477117758","IsPullRequest":true,"CreatedAt":"2019-08-06T01:00:08","Actor":"Maoni0","Number":"26024","RawContent":null,"Title":"pinned heap design doc","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26024","RelatedDescription":"Closed or merged PR \"pinned heap design doc\" (#26024)"},{"Id":"477104951","IsPullRequest":false,"CreatedAt":"2019-08-05T23:52:13","Actor":"jakobbotsch","Number":"26022","RawContent":null,"Title":"[RyuJIT] Incorrect frame alignment with simple rsp-based frames","State":"open","Body":"`Foo` in the following throws a null-ref exception because of a SEGFAULT due to `vmovapd` used on an unaligned location:\r\n\r\n```csharp\r\nprivate static int Main()\r\n{\r\n    s_f = default; // no helper call\r\n    Console.WriteLine(((Func<S40, Vector128<int>, long>)Foo)(default, default));\r\n    return 100;\r\n}\r\n\r\nprivate static Vector128<int> s_f;\r\nprivate static long Foo(S40 a, Vector128<int> looksAligned)\r\n{\r\n    s_f = looksAligned;\r\n    return 0;\r\n}\r\n\r\nprivate struct S40\r\n{\r\n    public long A, B, C, D, E;\r\n}\r\n```\r\nThe code generated is:\r\n```asm\r\n; Assembly listing for method test:Foo(struct,struct):long\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Unix\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 arg0         [V00    ] (  0,  0   )  struct (40) zero-ref    do-not-enreg[S]\r\n;  V01 arg1         [V01,T00] (  1,  1   )  simd16  ->  [rsp+0x30]  \r\n;# V02 OutArgs      [V02    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M9171_IG01:\r\n       C5F877               vzeroupper \r\n       6690                 nop      \r\n\r\nG_M9171_IG02:\r\n       48B8F80B006C577F0000 mov      rax, 0x7F576C000BF8\r\n       488B00               mov      rax, gword ptr [rax]\r\n       C5F928442430         vmovapd  xmm0, xmmword ptr [rsp+30H] // rsp+30H is unaligned\r\n       C5F9114008           vmovupd  xmmword ptr [rax+8], xmm0\r\n       33C0                 xor      rax, rax\r\n\r\nG_M9171_IG03:\r\n       C3                   ret      \r\n\r\n; Total bytes of code 32, prolog size 5 for method test:Foo(struct,struct):long\r\n; ============================================================\r\n```\r\n\r\ncc @BruceForstall @CarolEidt ","Url":"https://github.com/dotnet/coreclr/issues/26022","RelatedDescription":"Open issue \"[RyuJIT] Incorrect frame alignment with simple rsp-based frames\" (#26022)"},{"Id":"477098280","IsPullRequest":true,"CreatedAt":"2019-08-05T23:20:53","Actor":"AaronRobinsonMSFT","Number":"26020","RawContent":null,"Title":"Add support for servicing (post-build.yml)","State":"open","Body":"Blocked by https://github.com/dotnet/arcade/pull/3572\r\n\r\ncc @JohnTortugo @mmitche \r\n\r\n@dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/pull/26020","RelatedDescription":"Open PR \"Add support for servicing (post-build.yml)\" (#26020)"},{"Id":"477094529","IsPullRequest":true,"CreatedAt":"2019-08-05T23:05:09","Actor":"jashook","Number":"26019","RawContent":null,"Title":"Disable test based on repeated failures","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26019","RelatedDescription":"Open PR \"Disable test based on repeated failures\" (#26019)"},{"Id":"477078335","IsPullRequest":true,"CreatedAt":"2019-08-05T22:04:10","Actor":"tannergooding","Number":"26017","RawContent":null,"Title":"Updating Math.Round and MathF.Round to be IEEE compliant so that the intrinsic and managed form are deterministic.","State":"open","Body":"### Description\r\n\r\nThe managed implementations of the Math.Round functions were not IEEE compliant and would return a different result between Debug and Release mode. In .NET Core 3 with the tiered JIT support they now return a different result for the first 29 calls of the function before the JIT recognizes them as \"hot\" and they are rejitted.\r\n\r\n### Customer Impact\r\n\r\nCustomers calling `Math.Round` or `MathF.Round` may get different behavior between two consecutive calls to the functions.\r\n\r\n### Regression?\r\n\r\nYes, as per the description.\r\n\r\n### Risk\r\n\r\nLow. This is pulling in a port of a known good implementation from the BSD SoftFloat library. It was additionally validated that all 4 billion inputs for the single-precision input range are returning the correct values as compared to the intrinsic forms of these APIs (which compile down to the `roundss` and `roundsd` instructions).","Url":"https://github.com/dotnet/coreclr/pull/26017","RelatedDescription":"Open PR \"Updating Math.Round and MathF.Round to be IEEE compliant so that the intrinsic and managed form are deterministic.\" (#26017)"},{"Id":"477064010","IsPullRequest":false,"CreatedAt":"2019-08-05T21:21:56","Actor":"tmat","Number":"26016","RawContent":null,"Title":"Edit and Continue regressed in 3.0","State":"open","Body":"Repro:\r\n\r\n1. Create a simple console app that targets `netcoreapp3.0`:\r\n\r\n```C#\r\nclass Program\r\n{\r\n  static void Main(string[] args)\r\n  {\r\n      Console.WriteLine(\"Hello World!\"); // Add a breakpoint\r\n  }\r\n}\r\n```\r\n\r\n2. Place breakpoint.\r\n3. Start debugging and break at specific line;\r\n4. Add a new method to the class:\r\n\r\n```C#\r\nstatic void Foo()\r\n{ \r\n}\r\n```\r\n\r\n5. EnC will fail and the debug session will stop.\r\n\r\nThe error occurs in the runtime while applying the change.\r\n\r\nThe same repro works fine when targeting .NET Framework (net472, for example). \r\nI have also tried .NET Core 2.1.12 and it works there as well.","Url":"https://github.com/dotnet/coreclr/issues/26016","RelatedDescription":"Open issue \"Edit and Continue regressed in 3.0\" (#26016)"},{"Id":"477059028","IsPullRequest":false,"CreatedAt":"2019-08-05T21:14:47","Actor":"iskiselev","Number":"26014","RawContent":null,"Title":"Prefer32Bit is ignored","State":"closed","Body":"Project file setting <Prefer32Bit>true</Prefer32Bit> is ignored on CoreCLR 3.0 it produce x64 executable. Technically, produced executable is only entry point and is unmanaged - so corflags will even not show anything. But this flag option is still visible in VisualStudio, which mislead.\r\n\r\nI'm not sure where it should be reported - here, in core-setup, sdk or Visual Studio.","Url":"https://github.com/dotnet/coreclr/issues/26014","RelatedDescription":"Closed issue \"Prefer32Bit is ignored\" (#26014)"},{"Id":"477055823","IsPullRequest":false,"CreatedAt":"2019-08-05T20:59:14","Actor":"jashook","Number":"26013","RawContent":null,"Title":"[Linux Musl][Arm64] Failure to submit to helix","State":"open","Body":"```\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : Work item Loader.classloader.TypeGeneratorTests.TypeGeneratorTest0-299 in job f47973ed-9ced-40ec-90a2-9f066eaaa8fb has failed, logs available here: https://helix.dot.net/api/2019-06-17/jobs/f47973ed-9ced-40ec-90a2-9f066eaaa8fb/workitems/Loader.classloader.TypeGeneratorTests.TypeGeneratorTest0-299/console. [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n##[error].packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : Work item Loader.classloader.TypeGeneratorTests.TypeGeneratorTest0-299 in job f47973ed-9ced-40ec-90a2-9f066eaaa8fb has failed, logs available here: https://helix.dot.net/api/2019-06-17/jobs/f47973ed-9ced-40ec-90a2-9f066eaaa8fb/workitems/Loader.classloader.TypeGeneratorTests.TypeGeneratorTest0-299/console.\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : InvalidOperationException: Sequence contains no elements [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :    at System.Linq.ThrowHelper.ThrowNoElementsException() [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :    at System.Linq.Enumerable.First[TSource](IEnumerable`1 source) [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :    at Microsoft.DotNet.Helix.AzureDevOps.CheckHelixJobStatus.CreateFakeTestResultAsync(HttpClient client, String testRunId, String workItemFriendlyName) in /_/src/Microsoft.DotNet.Helix/Sdk/CheckHelixJobStatus.cs:line 173 [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :    at Microsoft.DotNet.Helix.AzureDevOps.CheckHelixJobStatus.CheckHelixJobAsync(HttpClient client, String jobName, String testRunId, CancellationToken cancellationToken) in /_/src/Microsoft.DotNet.Helix/Sdk/CheckHelixJobStatus.cs:line 59 [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :    at Microsoft.DotNet.Helix.AzureDevOps.CheckHelixJobStatus.ExecuteCoreAsync(HttpClient client, CancellationToken cancellationToken) in /_/src/Microsoft.DotNet.Helix/Sdk/CheckHelixJobStatus.cs:line 33 [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :    at Microsoft.DotNet.Helix.AzureDevOps.AzureDevOpsHelixTask.Execute() in /_/src/Microsoft.DotNet.Helix/Sdk/AzureDevOpsHelixTask.cs:line 76 [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n/__w/2/s/.packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error :  [/__w/2/s/tests/helixpublishwitharcade.proj]\r\n##[error].packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19402.16/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : InvalidOperationException: Sequence contains no elements\r\n   at System.Linq.ThrowHelper.ThrowNoElementsException()\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n   at Microsoft.DotNet.Helix.AzureDevOps.CheckHelixJobStatus.CreateFakeTestResultAsync(HttpClient client, String testRunId, String workItemFriendlyName) in /_/src/Microsoft.DotNet.Helix/Sdk/CheckHelixJobStatus.cs:line 173\r\n   at Microsoft.DotNet.Helix.AzureDevOps.CheckHelixJobStatus.CheckHelixJobAsync(HttpClient client, String jobName, String testRunId, CancellationToken cancellationToken) in /_/src/Microsoft.DotNet.Helix/Sdk/CheckHelixJobStatus.cs:line 59\r\n   at Microsoft.DotNet.Helix.AzureDevOps.CheckHelixJobStatus.ExecuteCoreAsync(HttpClient client, CancellationToken cancellationToken) in /_/src/Microsoft.DotNet.Helix/Sdk/CheckHelixJobStatus.cs:line 33\r\n   at Microsoft.DotNet.Helix.AzureDevOps.AzureDevOpsHelixTask.Execute() in /_/src/Microsoft.DotNet.Helix/Sdk/AzureDevOpsHelixTask.cs:line 76\r\n\r\n  Stopping Azure Pipelines Test Run Linux arm64 Checked @ (Alpine.38.Arm64.Open)Ubuntu.1604.Arm64.Docker.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.8-helix-arm64v8-a45aeeb-20190620184035\r\n\r\nBuild FAILED.\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=295340&view=logs&jobId=c4f05322-0119-5c43-60a1-eb927f127ca4","Url":"https://github.com/dotnet/coreclr/issues/26013","RelatedDescription":"Open issue \"[Linux Musl][Arm64] Failure to submit to helix\" (#26013)"},{"Id":"477047337","IsPullRequest":false,"CreatedAt":"2019-08-05T20:38:08","Actor":"jashook","Number":"26012","RawContent":null,"Title":"[OSX] Failure to initialize build tools.","State":"open","Body":"build-test.sh still unfortunately uses build tools. On OSX strangely we are intermitedenly seeing:\r\n\r\n```\r\nUsing RID osx-x64 for BuildTools native tools\r\nInitializing BuildTools...\r\nERROR: An error occurred when trying to initialize the tools.\r\nPlease check the detailed log that follows.\r\nRunning: /Users/vsts/agent/2.155.1/work/1/s/init-tools.sh\r\nRunning: /Users/vsts/agent/2.155.1/work/1/s/.dotnet/dotnet restore \"/Users/vsts/agent/2.155.1/work/1/s/init-tools.msbuild\" --no-cache --packages /Users/vsts/agent/2.155.1/work/1/s/.packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json /p:BuildToolsPackageVersion=3.0.0-preview4-04022-01 /p:ToolsDir=/Users/vsts/agent/2.155.1/work/1/s/Tools\r\n```\r\n\r\nSee: https://dev.azure.com/dnceng/public/_build/results?buildId=295344","Url":"https://github.com/dotnet/coreclr/issues/26012","RelatedDescription":"Open issue \"[OSX] Failure to initialize build tools.\" (#26012)"},{"Id":"477032794","IsPullRequest":false,"CreatedAt":"2019-08-05T20:02:12","Actor":"iskiselev","Number":"26011","RawContent":null,"Title":"Big stack usage on exception handling win-x64","State":"open","Body":"On Windows x64 CoreCLR use 9 KiB of stack space per each frame that has catch block that will rethrow exception up to frame that will finally handle exception. On x86 stack space is not used for the same pattern at all. Per our test it is not used on Linux-X64 too.\r\n.Net Framework x64 is also affected by the same problem (it use 8 KiB for ,Net Framework 4.7.2 and more for 3.5.).\r\nHere is test sample:\r\n```c#\r\nusing System;\r\n\r\nnamespace teststackoverflow\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            if (args.Length != 1 || !int.TryParse(args[0], out var maxRecursion))\r\n            {\r\n                maxRecursion = 250;\r\n            }\r\n            try\r\n            {\r\n\r\n                WithExceptionRecurse(1, maxRecursion);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"WithExceptionRecurse thrown\");\r\n            }\r\n        }\r\n\r\n        static void WithExceptionRecurse(int count, int maxRecursion)\r\n        {\r\n            try\r\n            {\r\n                Console.WriteLine(\"Frame {0}\", count);\r\n                if (count > maxRecursion)\r\n                {\r\n                    Console.WriteLine(\"Frame {0} Throws\", count);\r\n                    throw new Exception(count.ToString());\r\n                }\r\n                WithExceptionRecurse(count+1, maxRecursion);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"Frame Exception {0}\", count);\r\n                //RecursionTest.WriteStack();\r\n\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*internal class RecursionTest\r\n    {\r\n        [DllImport(\"kernel32.dll\")]\r\n        static extern void GetCurrentThreadStackLimits(out UIntPtr lowLimit, out UIntPtr highLimit);\r\n\r\n        public static unsafe void WriteStack()\r\n        {\r\n            UIntPtr low;\r\n            UIntPtr high;\r\n\r\n            GetCurrentThreadStackLimits(out low, out high);\r\n            var size = ((long) high - (long) low) / 1024; // in KB\r\n            ulong current = (ulong) (UIntPtr) (void*) &size;\r\n            var left = ((long) current - (long) low) / 1024; // in KB\r\n\r\n\r\n            bool isSufficientStack = false;\r\n            try\r\n            {\r\n                RuntimeHelpers.EnsureSufficientExecutionStack();\r\n                isSufficientStack = true;\r\n            }\r\n            catch (Exception)\r\n            {\r\n            }\r\n\r\n            Console.WriteLine($\"Stack: size={size}, left={left}, isSufficientStack={isSufficientStack}\");\r\n        }\r\n    }*/\r\n}\r\n```\r\n\r\nIf this app will be published with `dotnet publish -c release -r win-x86 --self-contained`, that can be called without StackOverfolowExcpetion with deep recursions, i.e 250.\r\nBut if it was published with `dotnet publish -c release -r win-x64 --self-contained`, it will fail with StackOverfolowExcpetion with only recursion layer 160.\r\n\r\nIt is even bigger problem on .Net Framework hosted inside w3wp, as it allocates only 512 KiB of stack - so it is reproducible with only 51 recursion there. Looks like some work have been done to provide a way to override stack size for w3wp in .Net Core hosting scenarios (#21450), which may help in hosted scenarios on CoreCLR.\r\n\r\nI've added commented diagnostic code that should show available stack space (if it  will be uncommented).\r\n\r\nIs it possible to update Win-x64 codegen to not use stack space at all (same as x86) or at least use smaller amount of stack space in recursive throw scenarios?","Url":"https://github.com/dotnet/coreclr/issues/26011","RelatedDescription":"Open issue \"Big stack usage on exception handling win-x64\" (#26011)"},{"Id":"477010722","IsPullRequest":false,"CreatedAt":"2019-08-05T19:02:50","Actor":"stephentoub","Number":"26010","RawContent":null,"Title":"STATUS_STACK_BUFFER_OVERRUN in corefx consuming updated coreclr","State":"open","Body":"https://github.com/dotnet/corefx/pull/39995#issuecomment-518300413\r\n![image](https://user-images.githubusercontent.com/2642209/62488304-f6c8b380-b791-11e9-940f-a542148ea2f2.png)\r\n\r\nFrom @jkotas:\r\n\"This is most likely caused by @janvorli change dotnet/coreclr#25795 . @janvorli Could you please take a look?\"","Url":"https://github.com/dotnet/coreclr/issues/26010","RelatedDescription":"Open issue \"STATUS_STACK_BUFFER_OVERRUN in corefx consuming updated coreclr\" (#26010)"},{"Id":"476991589","IsPullRequest":true,"CreatedAt":"2019-08-05T18:13:06","Actor":"CarolEidt","Number":"26009","RawContent":null,"Title":"Repro for #25468","State":"open","Body":"Also some additional dump & debugging support.","Url":"https://github.com/dotnet/coreclr/pull/26009","RelatedDescription":"Open PR \"Repro for #25468\" (#26009)"},{"Id":"476968606","IsPullRequest":false,"CreatedAt":"2019-08-05T17:13:24","Actor":"bclothier","Number":"26008","RawContent":null,"Title":"AV due to non-compliant type infos passed to CLR","State":"open","Body":"When using `CImportTlb` to build a CLR type from a type library, we encountered a situation where non-compliant library can cause an AV in CLR, specifically this line:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/4cf8a6b082d9bb1789facd996d8265d3908757b2/src/md/enc/imptlb.cpp#L4602\r\n\r\nSee [this comment](\r\nhttps://github.com/rubberduck-vba/Rubberduck/pull/4706#issuecomment-517883758) for details. Basically, the type infos we receive incorrectly have `Vars` filled for a `TKIND_MODULE`, and those `VARDESC`s have flags of `VAR_STATIC`. Some of those do have valid pointers but others won't and thus `lpvarValue` is zero. So resolving the `vt` member causes an AV. \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26008","RelatedDescription":"Open issue \"AV due to non-compliant type infos passed to CLR\" (#26008)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"477673528","IsPullRequest":false,"CreatedAt":"2019-08-07T02:23:15","Actor":"AungMy0","Number":"12160","RawContent":null,"Title":"INFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern Jenkin Xunit Test generate Report","State":"open","Body":"## Steps to reproduce\r\nI tried to integrate Xunit Test plugin with jenkin and to generate my unit test report\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\nJenkin said no test report files found.\r\n\r\nINFO: Processing xUnit.Net-v2 (default)\r\nINFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern 'HelloJenkinTest\\TestResults\\*/xml' \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12160","RelatedDescription":"Open issue \"INFO: [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern Jenkin Xunit Test generate Report\" (#12160)"},{"Id":"477557157","IsPullRequest":true,"CreatedAt":"2019-08-06T22:00:31","Actor":"dotnet-maestro[bot]","Number":"12159","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190806.3\r\n- **Date Produced**: 8/6/2019 9:27 PM\r\n- **Commit**: 11e0233a76795f37e8a938ba2c738c2b379d0abb\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview9.19406.3\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12159","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12159)"},{"Id":"477431638","IsPullRequest":false,"CreatedAt":"2019-08-06T21:25:23","Actor":"VictorioBerra","Number":"12155","RawContent":null,"Title":"dotnet nuget push source does not recognize PSDrive.","State":"closed","Body":"## Steps to reproduce\r\n- Mount a PSDrive without using `-Persist`\r\n- Try and push a nuget package to it.\r\n\r\n## Expected  behavior\r\nIt should see it as a file source and just work (tm)\r\n\r\n## Actual behavior\r\nI get an error about not providing an API Key as if it were a MyGet server or something.\r\n\r\nIf I use `-Persist`, the code works just fine.\r\n\r\n```powershell\r\n$null = new-psdrive Name \"X\" -PSProvider FileSystem -root $DeploymentTarget -Credential $cred -ErrorAction Stop;\r\ndotnet nuget push something.nupkg -s \"X:\\\"; # ERROR!!! MISSING API KEY\r\n```\r\n\r\nSimply adding `-Persist` will map the share top a drive letter and things work again.\r\n\r\nIs there some way around this? I do not want to use `-Persist` on my build server.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12155","RelatedDescription":"Closed issue \"dotnet nuget push source does not recognize PSDrive.\" (#12155)"},{"Id":"477556852","IsPullRequest":true,"CreatedAt":"2019-08-06T19:33:06","Actor":"dotnet-maestro[bot]","Number":"12158","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190806.3\r\n- **Date Produced**: 8/6/2019 7:32 PM\r\n- **Commit**: e7398ca25d53432eb96dc7d4e0d56be501b771a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19406.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12158","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12158)"},{"Id":"477518845","IsPullRequest":false,"CreatedAt":"2019-08-06T18:02:46","Actor":"eiriktsarpalis","Number":"12157","RawContent":null,"Title":"Disabling first run welcome message?","State":"open","Body":"Is there a good way to completely disable the first time user notice when installing a new version of the SDK? Looking at the code, it seems that it can only be done by creating the appropriate [`dotnetFirstTimeUseSentinel`](https://github.com/dotnet/cli/blob/143a75dcacfbcc3665d9bbfa54d14217ce3e0ab3/src/Microsoft.DotNet.Configurer/FirstTimeUseNoticeSentinel.cs#L13) file.\r\n\r\nThere should be an easier way to disable this, like setting an environment variable maybe. \r\nI work a lot with nightly builds of the sdk across multiple machines, so the message is a minor source of annoyance for me.","Url":"https://github.com/dotnet/cli/issues/12157","RelatedDescription":"Open issue \"Disabling first run welcome message?\" (#12157)"},{"Id":"477493329","IsPullRequest":true,"CreatedAt":"2019-08-06T17:33:35","Actor":"dotnet-maestro[bot]","Number":"12156","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190806.1\r\n- **Date Produced**: 8/6/2019 5:01 PM\r\n- **Commit**: 7c9956bc0e4c5fe5390ce82a9806dbf8af9d050e\r\n- **Branch**: refs/heads/release/3.0.100-preview8\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19406.1\r\n\r\n[marker]: <> (End:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12156","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/sdk\" (#12156)"},{"Id":"477163721","IsPullRequest":true,"CreatedAt":"2019-08-06T14:39:31","Actor":"dotnet-maestro[bot]","Number":"12148","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3cd0c0b2-118b-4b45-565e-08d7114adc5e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190805.7\r\n- **Date Produced**: 8/6/2019 4:30 AM\r\n- **Commit**: 4a42afc5aea63750638e118560d43db04bd9ccc2\r\n- **Branch**: refs/heads/release/3.0-preview8\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19405.7\r\n\r\n[marker]: <> (End:3cd0c0b2-118b-4b45-565e-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12148","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from aspnet/AspNetCore\" (#12148)"},{"Id":"477416823","IsPullRequest":false,"CreatedAt":"2019-08-06T14:31:35","Actor":"MisinformedDNA","Number":"12154","RawContent":null,"Title":"Feature request: Add ability to build solution filter","State":"open","Body":"In VS2019 we are able to create solution filters of file type *.slnf. It would be great if we could build these file types at the command line (i.e. `dotnet build [solution].slnf`).\r\n\r\nI can see this as beneficial in CI workflows where only the selected projects need to be built. I could just use SLN files, but then I would ditch SLNF files as I don't want to maintain two solutions.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.700\r\n Commit:    c2ef055a0f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.700\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12154","RelatedDescription":"Open issue \"Feature request: Add ability to build solution filter\" (#12154)"},{"Id":"477345057","IsPullRequest":true,"CreatedAt":"2019-08-06T13:01:14","Actor":"dotnet-maestro[bot]","Number":"12153","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/5/2019 12:55 PM\r\n- **Commit**: 39c2dd5fde6368747fe127b9dde822b3b6afce08\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19405.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12153","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12153)"},{"Id":"477345003","IsPullRequest":true,"CreatedAt":"2019-08-06T12:56:32","Actor":"dotnet-maestro[bot]","Number":"12152","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/5/2019 12:55 PM\r\n- **Commit**: 39c2dd5fde6368747fe127b9dde822b3b6afce08\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19405.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12152","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12152)"},{"Id":"477341820","IsPullRequest":true,"CreatedAt":"2019-08-06T12:49:17","Actor":"dotnet-maestro[bot]","Number":"12151","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12151","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12151)"},{"Id":"477341499","IsPullRequest":true,"CreatedAt":"2019-08-06T12:48:35","Actor":"dotnet-maestro[bot]","Number":"12150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12150)"},{"Id":"477325111","IsPullRequest":true,"CreatedAt":"2019-08-06T11:27:51","Actor":"Cosebdd","Number":"12149","RawContent":null,"Title":"Solution items are now considered when removing empty folders","State":"open","Body":"Solution items are now considered when removing empty folders. A test added to check whether the logic is maintained. Fixes #10669\r\n\r\nhttps://github.com/dotnet/cli/issues/10669\r\n","Url":"https://github.com/dotnet/cli/pull/12149","RelatedDescription":"Open PR \"Solution items are now considered when removing empty folders\" (#12149)"},{"Id":"477120500","IsPullRequest":true,"CreatedAt":"2019-08-06T01:48:52","Actor":"dotnet-maestro[bot]","Number":"12147","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/6/2019 1:13 AM\r\n- **Commit**: 4f452f6da9d6aeb389d79432febb160b5aab4eed\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview9.19405.1\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12147","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12147)"},{"Id":"477091432","IsPullRequest":true,"CreatedAt":"2019-08-05T23:27:37","Actor":"dotnet-maestro[bot]","Number":"12146","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190805.4\r\n- **Date Produced**: 8/5/2019 10:51 PM\r\n- **Commit**: 397f924e8da45975d38f5d2c2a1e097399365eba\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19405.4\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12146","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12146)"},{"Id":"477061010","IsPullRequest":true,"CreatedAt":"2019-08-05T22:27:43","Actor":"dotnet-maestro[bot]","Number":"12145","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.07\r\n- **Date Produced**: 8/5/2019 9:13 PM\r\n- **Commit**: d01b2fb7bc6bd4911e157fbd51353059a3ba1a6c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28405-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28405-07\r\n\r\n[marker]: <> (End:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12145","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#12145)"},{"Id":"476825991","IsPullRequest":true,"CreatedAt":"2019-08-05T16:29:03","Actor":"dotnet-maestro[bot]","Number":"12143","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:51 PM\r\n- **Commit**: 3717c89af67bc055ad07599cddf08330a7878f32\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12143)"},{"Id":"476822509","IsPullRequest":true,"CreatedAt":"2019-08-05T16:27:50","Actor":"dotnet-maestro[bot]","Number":"12140","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12140","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12140)"},{"Id":"476928807","IsPullRequest":true,"CreatedAt":"2019-08-05T16:08:22","Actor":"dotnet-maestro[bot]","Number":"12144","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190805.1\r\n- **Date Produced**: 8/5/2019 3:37 PM\r\n- **Commit**: 2ff6a5c0f8b2905e42d8bb6ff70e53d3f056f6ef\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19405.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12144","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12144)"},{"Id":"476825838","IsPullRequest":true,"CreatedAt":"2019-08-05T15:58:17","Actor":"dotnet-maestro[bot]","Number":"12142","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:51 PM\r\n- **Commit**: 3717c89af67bc055ad07599cddf08330a7878f32\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12142","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12142)"},{"Id":"476822815","IsPullRequest":true,"CreatedAt":"2019-08-05T12:43:54","Actor":"dotnet-maestro[bot]","Number":"12141","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12141","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12141)"},{"Id":"476546570","IsPullRequest":true,"CreatedAt":"2019-08-04T12:54:11","Actor":"dotnet-maestro[bot]","Number":"12138","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:49 PM\r\n- **Commit**: ee824bdd8d041c4eb731f000f7dadcf458274f69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19403.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12138","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12138)"},{"Id":"476546470","IsPullRequest":true,"CreatedAt":"2019-08-04T12:51:30","Actor":"dotnet-maestro[bot]","Number":"12137","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:49 PM\r\n- **Commit**: ee824bdd8d041c4eb731f000f7dadcf458274f69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19403.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12137)"},{"Id":"476545836","IsPullRequest":true,"CreatedAt":"2019-08-04T12:44:06","Actor":"dotnet-maestro[bot]","Number":"12136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12136)"},{"Id":"476545827","IsPullRequest":true,"CreatedAt":"2019-08-04T12:43:11","Actor":"dotnet-maestro[bot]","Number":"12135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12135)"},{"Id":"476538965","IsPullRequest":false,"CreatedAt":"2019-08-04T10:39:37","Actor":"TFTomSun","Number":"12134","RawContent":null,"Title":"Why does dotnet update reinstall the existing version?","State":"open","Body":"`dotnet update -g MyTool `\r\nseems to reinstall the tool, which takes quite long. In case the version is up to date i get the following output:\r\n\r\n> 'MyTool' was reinstalled with the latest stable version (version '1.0.1564914607')\r\n\r\n\r\n What I wish is just an check for a newer version, and install it if available. Is there any undocumented flag to achieve that?\r\n\r\nWhy do I need that? I distribute workflows (e.g. Build pipelines) via global tools. And provide shell scripts for the workflows. So whenever the shell script is executed it shall run with the latest global tool behind, but in the same time the shell script should start as fast as possible. Thats why the reinstallation of the tools when they are already up to date is a bit annoying.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12134","RelatedDescription":"Open issue \"Why does dotnet update reinstall the existing version?\" (#12134)"},{"Id":"476512417","IsPullRequest":true,"CreatedAt":"2019-08-04T04:35:45","Actor":"dotnet-maestro[bot]","Number":"12133","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.6\r\n- **Date Produced**: 8/4/2019 4:04 AM\r\n- **Commit**: b6f1a505833b552e425a8833f0b4bf9ca0c2e84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19403.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12133","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12133)"},{"Id":"476507088","IsPullRequest":true,"CreatedAt":"2019-08-04T02:51:11","Actor":"dotnet-maestro[bot]","Number":"12132","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.5\r\n- **Date Produced**: 8/4/2019 2:20 AM\r\n- **Commit**: 9f2b53443625493d425e3f8235567f2541098d33\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19403.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12132","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12132)"},{"Id":"476495110","IsPullRequest":true,"CreatedAt":"2019-08-03T23:01:48","Actor":"dotnet-maestro[bot]","Number":"12131","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.4\r\n- **Date Produced**: 8/3/2019 10:30 PM\r\n- **Commit**: 3148acfb105a16aa6c535d00eb0e50ec03992f3f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19403.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12131","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12131)"},{"Id":"476467326","IsPullRequest":true,"CreatedAt":"2019-08-03T17:03:17","Actor":"dotnet-maestro[bot]","Number":"12130","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.2\r\n- **Date Produced**: 8/3/2019 4:27 PM\r\n- **Commit**: a69555ad965be37858738ec9fccd4a1df87800b2\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19403.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12130","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12130)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"477522586","IsPullRequest":false,"CreatedAt":"2019-08-06T18:11:49","Actor":"dagood","Number":"1403","RawContent":null,"Title":"What version of .NET Standard should be bundled in 5.0 SDK builds?","State":"open","Body":"Currently, we bundle netstandard 2.1 in SDK 3.0. I see dotnet/standard `master` is producing netstandard 2.2.\r\n\r\nShould Core-Setup bundle up 2.2 and have that used in the SDK (https://github.com/dotnet/core-setup/issues/7567)? Or should the SDK continue to bundle netstandard 2.1? Should more than one version be bundled?\r\n\r\nThe question of whether we need more .NET Standard releases in a 5.0 world seems very relevant. (I don't know any newer info than https://devblogs.microsoft.com/dotnet/introducing-net-5/.)\r\n\r\n@wtgodbe @nguerrera ","Url":"https://github.com/dotnet/standard/issues/1403","RelatedDescription":"Open issue \"What version of .NET Standard should be bundled in 5.0 SDK builds?\" (#1403)"},{"Id":"477364336","IsPullRequest":true,"CreatedAt":"2019-08-06T17:48:46","Actor":"dotnet-maestro[bot]","Number":"1401","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1401","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1401)"},{"Id":"477364832","IsPullRequest":true,"CreatedAt":"2019-08-06T13:07:00","Actor":"dotnet-maestro[bot]","Number":"1402","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19405.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1402","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1402)"},{"Id":"477340949","IsPullRequest":true,"CreatedAt":"2019-08-06T12:15:23","Actor":"dotnet-maestro[bot]","Number":"1400","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1400","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1400)"},{"Id":"477340687","IsPullRequest":true,"CreatedAt":"2019-08-06T12:14:45","Actor":"dotnet-maestro[bot]","Number":"1399","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1399","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1399)"},{"Id":"476843973","IsPullRequest":true,"CreatedAt":"2019-08-05T13:05:59","Actor":"dotnet-maestro[bot]","Number":"1398","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.2\r\n- **Date Produced**: 8/4/2019 3:02 PM\r\n- **Commit**: 8df22b4642c83e646b4472860442ab1fb11fb3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1398","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1398)"},{"Id":"476843431","IsPullRequest":true,"CreatedAt":"2019-08-05T13:04:49","Actor":"dotnet-maestro[bot]","Number":"1397","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.2\r\n- **Date Produced**: 8/4/2019 3:02 PM\r\n- **Commit**: 8df22b4642c83e646b4472860442ab1fb11fb3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1397","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1397)"},{"Id":"476821836","IsPullRequest":true,"CreatedAt":"2019-08-05T12:15:23","Actor":"dotnet-maestro[bot]","Number":"1396","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1396","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1396)"},{"Id":"476821605","IsPullRequest":true,"CreatedAt":"2019-08-05T12:14:47","Actor":"dotnet-maestro[bot]","Number":"1395","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 12:42 PM\r\n- **Commit**: b1c2f33f0cef32d1df6e7f388017fd6761d3fcad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19404.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19404.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1395","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1395)"},{"Id":"476550793","IsPullRequest":true,"CreatedAt":"2019-08-04T13:07:29","Actor":"dotnet-maestro[bot]","Number":"1394","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1394","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1394)"},{"Id":"476550563","IsPullRequest":true,"CreatedAt":"2019-08-04T13:05:09","Actor":"dotnet-maestro[bot]","Number":"1393","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1393","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1393)"},{"Id":"476545674","IsPullRequest":true,"CreatedAt":"2019-08-04T12:15:06","Actor":"dotnet-maestro[bot]","Number":"1392","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1392","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1392)"},{"Id":"476545661","IsPullRequest":true,"CreatedAt":"2019-08-04T12:14:53","Actor":"dotnet-maestro[bot]","Number":"1391","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1391","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1391)"},{"Id":"476449316","IsPullRequest":true,"CreatedAt":"2019-08-03T13:04:37","Actor":"dotnet-maestro[bot]","Number":"1390","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1390","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1390)"},{"Id":"476448944","IsPullRequest":true,"CreatedAt":"2019-08-03T13:00:12","Actor":"dotnet-maestro[bot]","Number":"1389","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1389","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1389)"},{"Id":"476445367","IsPullRequest":true,"CreatedAt":"2019-08-03T12:14:47","Actor":"dotnet-maestro[bot]","Number":"1388","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1388","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1388)"},{"Id":"476445350","IsPullRequest":true,"CreatedAt":"2019-08-03T12:14:32","Actor":"dotnet-maestro[bot]","Number":"1387","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1387","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1387)"},{"Id":"476164729","IsPullRequest":true,"CreatedAt":"2019-08-02T13:02:57","Actor":"dotnet-maestro[bot]","Number":"1386","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190801.3\r\n- **Date Produced**: 8/2/2019 12:21 AM\r\n- **Commit**: c4e7347021eabaac1bdc0b0e13dc46f8c1e37419\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19401.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19401.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19401.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1386","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1386)"},{"Id":"476146337","IsPullRequest":true,"CreatedAt":"2019-08-02T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1385","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190801.23\r\n- **Date Produced**: 8/2/2019 6:58 AM\r\n- **Commit**: 941d6497356e00ea6b2bc35a22a67f4ecf988fd6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19401.23\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1385","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1385)"},{"Id":"475661515","IsPullRequest":true,"CreatedAt":"2019-08-01T12:54:03","Actor":"dotnet-maestro[bot]","Number":"1384","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190731.8\r\n- **Date Produced**: 8/1/2019 2:10 AM\r\n- **Commit**: a12c557a72988070b8624cc7ecc46899629895c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19381.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19381.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19381.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1384","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1384)"},{"Id":"475644095","IsPullRequest":true,"CreatedAt":"2019-08-01T12:14:44","Actor":"dotnet-maestro[bot]","Number":"1383","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1383","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1383)"},{"Id":"475352106","IsPullRequest":false,"CreatedAt":"2019-07-31T20:52:29","Actor":"mwpowellhtx","Number":"1382","RawContent":null,"Title":"Reconsider Debug.Listeners API exposure","State":"open","Body":"I am staring at a use case right now that I need to listen for ``System.Diagnostics.Debug.WriteLine`` messages and a listener would be just what I need to get the job done. Therefore, I strongly suggest [reconsidering Debug.Listeners exposure](/dotnet/standard/issues/84). Absent that we must look at adding unnecessary layers of overhead to our ``Debug.WriteLine`` listening efforts when a listener would fit the bill nicely.","Url":"https://github.com/dotnet/standard/issues/1382","RelatedDescription":"Open issue \"Reconsider Debug.Listeners API exposure\" (#1382)"},{"Id":"475124222","IsPullRequest":true,"CreatedAt":"2019-07-31T12:57:06","Actor":"dotnet-maestro[bot]","Number":"1381","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190730.6\r\n- **Date Produced**: 7/30/2019 8:44 PM\r\n- **Commit**: 5b6a74d8455aab11f64377f3200ace1df71110ea\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19380.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19380.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19380.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1381","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1381)"},{"Id":"474306086","IsPullRequest":true,"CreatedAt":"2019-07-30T16:43:12","Actor":"JohnTortugo","Number":"1379","RawContent":null,"Title":"Patch reference to _PublishUsingPipelines","State":"closed","Body":"For context see description of this Arcade PR: https://github.com/dotnet/arcade/pull/3482\r\n\r\n/cc @riarenas @jcagme ","Url":"https://github.com/dotnet/standard/pull/1379","RelatedDescription":"Closed or merged PR \"Patch reference to _PublishUsingPipelines\" (#1379)"},{"Id":"474564366","IsPullRequest":true,"CreatedAt":"2019-07-30T12:56:42","Actor":"dotnet-maestro[bot]","Number":"1380","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/30/2019 5:11 AM\r\n- **Commit**: b2ff0db61cc9348775d73a8934ad80218ded8bc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19379.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1380","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1380)"},{"Id":"474034730","IsPullRequest":true,"CreatedAt":"2019-07-29T13:03:24","Actor":"dotnet-maestro[bot]","Number":"1378","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190728.4\r\n- **Date Produced**: 7/29/2019 4:09 AM\r\n- **Commit**: e36291288fc182e94a919f45e61a8924f953c3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19378.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1378","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1378)"},{"Id":"473740823","IsPullRequest":true,"CreatedAt":"2019-07-28T13:03:23","Actor":"dotnet-maestro[bot]","Number":"1376","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190727.2\r\n- **Date Produced**: 7/28/2019 5:49 AM\r\n- **Commit**: 57df8b38e4e70fc25aabe3d061cd1745cff0b26b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19377.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19377.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19377.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1376","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1376)"},{"Id":"473635514","IsPullRequest":true,"CreatedAt":"2019-07-27T13:03:22","Actor":"dotnet-maestro[bot]","Number":"1375","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190726.14\r\n- **Date Produced**: 7/27/2019 4:10 AM\r\n- **Commit**: 8a6389529afdc0dd53d4c94fe665695ec54c21af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19376.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19376.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19376.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1375","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1375)"},{"Id":"473583225","IsPullRequest":false,"CreatedAt":"2019-07-27T01:16:07","Actor":"GrabYourPitchforks","Number":"1374","RawContent":null,"Title":"Obsolete String.Copy in netstandard","State":"open","Body":"This is obsoleted in .NET Core 3 (see https://github.com/dotnet/corefx/issues/32563). It needs to be obsoleted in netstandard as well for consistency.","Url":"https://github.com/dotnet/standard/issues/1374","RelatedDescription":"Open issue \"Obsolete String.Copy in netstandard\" (#1374)"},{"Id":"473519038","IsPullRequest":true,"CreatedAt":"2019-07-26T21:14:24","Actor":"wtgodbe","Number":"1373","RawContent":null,"Title":"Enable YAML Stages publishing","State":"closed","Body":"Resolves https://github.com/dotnet/standard/issues/1372 & takes care of https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md for Standard.\r\n\r\n@riarenas @safern PTAL\r\n\r\nDiff is easier to reason about if you just look at https://github.com/dotnet/standard/pull/1373/commits/a2553ad6d898cf5c2db8940eb6ad4c1f65448557 - the other commit just fixes indentation","Url":"https://github.com/dotnet/standard/pull/1373","RelatedDescription":"Closed or merged PR \"Enable YAML Stages publishing\" (#1373)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"477650360","IsPullRequest":true,"CreatedAt":"2019-08-07T00:29:08","Actor":"scalablecory","Number":"40082","RawContent":null,"Title":"Support PAC scripts that return multiple proxies","State":"open","Body":"This enables `SocketsHttpHandler` support for PAC scripts that return multiple eligible proxies for a single URL.\r\n\r\nIf a single proxy is returned, the old proxy path is followed.\r\n\r\nIf multiple proxies are returned, they will be used for failover in left-to-right order. A request finally fails after it has tried each proxy.\r\nThis behavior works across requests: if one request fails over and has success on the 2nd proxy, subsequent requests will begin by using the 2nd proxy. To accomplish this, a cache (keyed on proxy config string) is used behind the scenes which is occasionally cleared of unused entries. The cache also serves to reduce per-request allocation overhead (versus today) even in non-multiproxy cases.\r\n\r\nResolves #39370.","Url":"https://github.com/dotnet/corefx/pull/40082","RelatedDescription":"Open PR \"Support PAC scripts that return multiple proxies\" (#40082)"},{"Id":"477480063","IsPullRequest":false,"CreatedAt":"2019-08-06T23:08:54","Actor":"josundt","Number":"40062","RawContent":null,"Title":"IgnoreDataMember","State":"closed","Body":"**NewtonSoft.Json** is aware of certain attributes in the `System.Runtime.Serialization` namespace (`System.Runtime.Serialization.Primitives` assembly) like **`IgnoreDataMemberAttribute`**.\r\n\r\nProperties with this attribute will not be serialized by NewtonSoft.Json.\r\n\r\nAre you planning to support this with **`System.Text.Json.JsonSerializer`**, or is there a different approach I can use to annotate properties that should be ignored?","Url":"https://github.com/dotnet/corefx/issues/40062","RelatedDescription":"Closed issue \"IgnoreDataMember\" (#40062)"},{"Id":"477627655","IsPullRequest":true,"CreatedAt":"2019-08-06T22:52:41","Actor":"krwq","Number":"40080","RawContent":null,"Title":"Fix build on OSX","State":"closed","Body":"Seems https://github.com/dotnet/corefx/pull/39572 has forgotten to remove unused field which is causing build to fail. Interestingly this didn't fail on that PR.","Url":"https://github.com/dotnet/corefx/pull/40080","RelatedDescription":"Closed or merged PR \"Fix build on OSX\" (#40080)"},{"Id":"477597892","IsPullRequest":true,"CreatedAt":"2019-08-06T21:16:11","Actor":"stephentoub","Number":"40079","RawContent":null,"Title":"Re-enable xunit warning 1026 (unused theory arguments)","State":"open","Body":"Some of these were addressed by explicitly discarding theory arguments, generally in cases where either a) the argument was being used as a description to aid in debugging failures, or b) the argument was part of a member data that was used by some theories and not by others all sharing the same member data.\r\n\r\nHowever, there are quite a few legitimate bugs being fixed here, enough that highlights it's worthwhile to have the rule enabled.  Some are cases where the argument was supposed to be used but wasn't.  Some are cases where the argument isn't used at all, and in many cases where we end up running the same test over and over and wasting cycles.  Some are cases where we're unnecessarily including irrelevant inputs to the tests and making the input data more complicated than it needs to be.  Etc.\r\n\r\n(Along the way, I also fixed some cases where VS was warning about lambdas being used instead of local functions, and in cases where I agreed I fixed them, via auto-fixers.)\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/39697\r\ncc: @ViktorHofer, @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/40079","RelatedDescription":"Open PR \"Re-enable xunit warning 1026 (unused theory arguments)\" (#40079)"},{"Id":"477595136","IsPullRequest":true,"CreatedAt":"2019-08-06T21:09:05","Actor":"buyaa-n","Number":"40078","RawContent":null,"Title":"[release/3.0] Custom converter contravariant test coverage","State":"open","Body":"Test coverage improvement only, ported from https://github.com/dotnet/corefx/pull/39558","Url":"https://github.com/dotnet/corefx/pull/40078","RelatedDescription":"Open PR \"[release/3.0] Custom converter contravariant test coverage\" (#40078)"},{"Id":"477574381","IsPullRequest":true,"CreatedAt":"2019-08-06T20:59:23","Actor":"danmosemsft","Number":"40076","RawContent":null,"Title":"Update IconCodecTests.cs","State":"closed","Body":"```\r\nError message\r\nSystem.ArgumentException : Parameter is not valid.\r\n\r\nStack trace\r\n   at System.Drawing.Bitmap..ctor(String filename)\r\n   at MonoTests.System.Drawing.Imaging.IconCodecTest.Bitmap16Features_Palette_Entries_Windows() in /_/src/System.Drawing.Common/tests/mono/System.Drawing.Imaging/IconCodecTests.cs:line 15\r\n```","Url":"https://github.com/dotnet/corefx/pull/40076","RelatedDescription":"Closed or merged PR \"Update IconCodecTests.cs\" (#40076)"},{"Id":"477580834","IsPullRequest":true,"CreatedAt":"2019-08-06T20:33:25","Actor":"layomia","Number":"40077","RawContent":null,"Title":"Support null serialization for objects and dictionaries as values in …","State":"open","Body":"…Dictionary and KeyValuePair types.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/39808.","Url":"https://github.com/dotnet/corefx/pull/40077","RelatedDescription":"Open PR \"Support null serialization for objects and dictionaries as values in …\" (#40077)"},{"Id":"477532883","IsPullRequest":true,"CreatedAt":"2019-08-06T20:18:04","Actor":"EgorBo","Number":"40065","RawContent":null,"Title":"Disable some tests for Mono","State":"closed","Body":"A few precise GC related (similar to https://github.com/dotnet/corefx/pull/39176)\r\nAnd `PropertyTest2` uses a 32 bit ctor (fails on mono with OverflowException due to 64bit pointer in MRE.Handle + ToInt32)","Url":"https://github.com/dotnet/corefx/pull/40065","RelatedDescription":"Closed or merged PR \"Disable some tests for Mono\" (#40065)"},{"Id":"477568500","IsPullRequest":true,"CreatedAt":"2019-08-06T20:02:44","Actor":"jkoritzinsky","Number":"40075","RawContent":null,"Title":"Error out clearly when trying to use COM objects with the DLR.","State":"open","Body":"Since .NET Core doesn't support using `dynamic` with COM objects, add in exception throws with a standardized message that explains that the dynamic binder doesn't work with COM objects outside of .NET Framework.\r\n\r\nInitially we thought that the `RuntimeBinderException` that was being thrown for not finding a member on `System.__ComObject` would cover all of our cases, but we learned in #40053, .NET constructs that are valid in COM but not in C# can cause other exceptions with poor error messages to leak out of the binder.\r\n\r\nThis PR changes the C# binders to throw an exception in the dynamic binder when trying to dynamically resolve a COM object without an enabled COM binder.\r\n\r\ncc: @jaredpar @jkotas @davidwrighton \r\n","Url":"https://github.com/dotnet/corefx/pull/40075","RelatedDescription":"Open PR \"Error out clearly when trying to use COM objects with the DLR.\" (#40075)"},{"Id":"477567061","IsPullRequest":false,"CreatedAt":"2019-08-06T19:59:08","Actor":"ahsonkhan","Number":"40074","RawContent":null,"Title":"Use Strings resx file for the exception messages within System.Text.Encodings.Web","State":"open","Body":"See https://github.com/dotnet/corefx/pull/39900#discussion_r309495299\r\n\r\nWe currently inline the exception message strings when throwing in System.Text.Encodings.Web.\r\nWe should be adding these to a Strings.resx file and use `SR.X` to access them.\r\n\r\nEven though we're not currently localizing exception strings on .NET Core, being in the Strings.resx file does mean that a) there aren't two different copies that get out of sync if the message gets tweaked and b) we could localize if desired.\r\n\r\nLook at other projects for examples. E.g:\r\nhttps://github.com/dotnet/corefx/blob/c6f5ceedea28edf01ae7d3e13c02935669dad434/src/System.Text.Json/src/Resources/Strings.resx#L138-L140\r\nhttps://github.com/dotnet/corefx/blob/47c35fe385c18d5f0a4ceacea381f790db472ba2/src/System.Text.Json/src/System/Text/Json/ThrowHelper.cs#L443-L446\r\nhttps://github.com/dotnet/corefx/blob/82408cd90f4d4573d502e8df2ca437b35e6a37f7/src/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.Unescaping.cs#L209\r\n\r\nThe use of the \"ThrowHelper\" pattern isn't necessary here (applied on case-by-case basis where performance concerns were higher than code readability).\r\n\r\nAnother example:\r\nhttps://github.com/dotnet/corefx/blob/82408cd90f4d4573d502e8df2ca437b35e6a37f7/src/System.Private.Xml/src/Resources/Strings.resx#L134-L136\r\nhttps://github.com/dotnet/corefx/blob/e5d38a54cf21f6427ae4fe99c3841c8067139e75/src/System.Private.Xml/src/System/Xml/Xslt/XslCompiledTransform.cs#L475-L485\r\n\r\ncc @GrabYourPitchforks ","Url":"https://github.com/dotnet/corefx/issues/40074","RelatedDescription":"Open issue \"Use Strings resx file for the exception messages within System.Text.Encodings.Web\" (#40074)"},{"Id":"477565787","IsPullRequest":false,"CreatedAt":"2019-08-06T19:56:05","Actor":"ahsonkhan","Number":"40073","RawContent":null,"Title":"Fix up System.Text.Encodings.Web test namespace to be consistent with other corefx projects","State":"open","Body":"See https://github.com/dotnet/corefx/pull/39900#discussion_r309387083\r\n\r\nRename the namespace in the test project from `Microsoft.Framework.WebEncoders` to `System.Text.Encodings.Web.Tests`\r\n\r\nhttps://github.com/dotnet/corefx/blob/c6f5ceedea28edf01ae7d3e13c02935669dad434/src/System.Text.Encodings.Web/tests/IHtmlEncoder.cs#L8\r\n\r\ncc @GrabYourPitchforks ","Url":"https://github.com/dotnet/corefx/issues/40073","RelatedDescription":"Open issue \"Fix up System.Text.Encodings.Web test namespace to be consistent with other corefx projects\" (#40073)"},{"Id":"477520295","IsPullRequest":true,"CreatedAt":"2019-08-06T19:49:45","Actor":"Dotnet-GitSync-Bot","Number":"40064","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @lambdageek","Url":"https://github.com/dotnet/corefx/pull/40064","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#40064)"},{"Id":"477559494","IsPullRequest":true,"CreatedAt":"2019-08-06T19:40:06","Actor":"steveharter","Number":"40072","RawContent":null,"Title":"Add Encode(Span<char>) API (#39900)","State":"open","Body":"Port https://github.com/dotnet/corefx/pull/39900 to 3.0\r\n\r\ncc: @ericstj, @danmosemsft, @GrabYourPitchforks, @ahsonkhan \r\n\r\n## Description\r\n\r\n- Adds a new [API ](https://github.com/dotnet/corefx/issues/39523)to System.Text.Encoding.Web for encoding Utf16\\char when dealing with `Span<char>`.\r\n- System.Text.Json uptake of this API. This is for both performance and consistency:\r\n  - Performance: previously the code in System.Text.Json had a workaround that converted Utf16 to Utf8, then performed the encoding, and then converted back to Utf16. The new API avoids this workaround and gains a performance improvement of ~25%.\r\n  - Consistency: the new API replaces unpaired surrogates with the \"replacement character\" `0xFFFD`. Previously the code in System.Text.Json would throw. Using replacement characters makes the semantics consistent with Utf8 behavior and with similar APIs in System.Text.Encoding.Web.\r\n- Addresses a performance regression for Utf8 (byte) encoding when there is no encoding necessary, or encoding occurs later in the string. The performance is improved ~15% in Utf8JsonWriter cases.\r\n\r\n## Customer Impact\r\n\r\nImproved performance when encoding with System.Text.Json and prevents unwanted exceptions when encoding unpaired surrogates.\r\n\r\nAbility for others to call an `Encode(Span<char>)` method in System.Text.Encoding.Json for ease-of-use and performance. This new API matches the equivalent Utf8 API (already existing) in signature , except `char` is used instead of `byte`.\r\n\r\n## Regression?\r\n\r\nNo; the code is new in 3.0.\r\n\r\n## Risk\r\n\r\nLow. Several tests added to both System.Text.Encoding.Web and System.Text.Json covering the scenarios.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40072","RelatedDescription":"Open PR \"Add Encode(Span<char>) API (#39900)\" (#40072)"},{"Id":"477552076","IsPullRequest":true,"CreatedAt":"2019-08-06T19:21:28","Actor":"steveharter","Number":"40071","RawContent":null,"Title":"Support cyclic types when using collections (#39936)","State":"open","Body":"Port https://github.com/dotnet/corefx/commit/69df8abea7bd02fcaa47befb6f9722bf2908e6ac to 3.0\r\n\r\nIssue https://github.com/dotnet/corefx/issues/39769.\r\n\r\ncc: @ericstj, @danmosemsft\r\n\r\n## Description\r\n\r\nPrevents a `StackOverflowException` from occurring when serializing or deserializing an object graph that has type cycles in collection references, such as `IList<MyDependency>`.\r\n\r\nChanges the behavior to not call `JsonSerializerOptions.JsonClassInfo GetOrAddClass(Type classType)` during the \"warm-up\" phase where metadata is being obtained for use with (de)serialization. Previously this was protected against `StackOverflowException` due to circular type references but not for collections (only for properties that returned an object directly).\r\n\r\n## Customer Impact\r\n\r\nThis was reported by a customer; unable to serialize circular object graphs in certain cases.\r\n\r\n## Regression?\r\n\r\nNo; the code is new in 3.0.\r\n\r\n## Risk\r\n\r\nLow. The original repro was verified and additional tests added with no known issues.","Url":"https://github.com/dotnet/corefx/pull/40071","RelatedDescription":"Open PR \"Support cyclic types when using collections (#39936)\" (#40071)"},{"Id":"477548271","IsPullRequest":true,"CreatedAt":"2019-08-06T19:12:01","Actor":"ViktorHofer","Number":"40070","RawContent":null,"Title":"Enable leaf project restore from root build","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/40052\r\n\r\ncc @Wraith2 ","Url":"https://github.com/dotnet/corefx/pull/40070","RelatedDescription":"Open PR \"Enable leaf project restore from root build\" (#40070)"},{"Id":"477273927","IsPullRequest":false,"CreatedAt":"2019-08-06T18:35:59","Actor":"EuroEager2008","Number":"40053","RawContent":null,"Title":"COM Interop not working without dynamic keyword support","State":"closed","Body":"I reported this via Visual Studio/Send Feedback, but perhaps that is wrong place so I repeat here:\r\nThe following code works fine with full framework, but with .net core 3 (preview 7) it throws a System.IndexOutOfRangeException:\r\n\r\nMicrosoft.Office.Interop.Excel.Application excelApp = new Excel.Application();\r\nMicrosoft.Office.Interop.Excel.Workbook workbook = excelApp.Workbooks.Open(excelPath);\r\nMicrosoft.Office.Interop.Excel.Worksheet worksheet = (Microsoft.Office.Interop.Excel.Worksheet)workbook.Worksheets[“Sheet1”]; //Note the excplicit cast which is only necessary with Core, not full Fx\r\nMicrosoft.Office.Interop.Excel.Range dataRange = worksheet.Range[worksheet.Cells[2, 1], worksheet.Cells[data.GetUpperBound(0) + 2, data.GetUpperBound(1) + 1]];\r\n\r\nThe workbook (given by excelPath argument) is the exact same one in both full framework case and the core case.","Url":"https://github.com/dotnet/corefx/issues/40053","RelatedDescription":"Closed issue \"COM Interop not working without dynamic keyword support\" (#40053)"},{"Id":"477533147","IsPullRequest":true,"CreatedAt":"2019-08-06T18:35:53","Actor":"ViktorHofer","Number":"40066","RawContent":null,"Title":"Move externals to eng/restore dir","State":"open","Body":"Externals with depproj should go away slowly but until we have more time to tackle that it makes sense to move it to the eng/restore dir to reduce the root noise.","Url":"https://github.com/dotnet/corefx/pull/40066","RelatedDescription":"Open PR \"Move externals to eng/restore dir\" (#40066)"},{"Id":"477502796","IsPullRequest":true,"CreatedAt":"2019-08-06T17:24:23","Actor":"buyaa-n","Number":"40063","RawContent":null,"Title":"Handle `UnparseableExtension` status code when building X509Chain on OSX","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/39988","Url":"https://github.com/dotnet/corefx/pull/40063","RelatedDescription":"Open PR \"Handle `UnparseableExtension` status code when building X509Chain on OSX\" (#40063)"},{"Id":"477472481","IsPullRequest":false,"CreatedAt":"2019-08-06T17:01:07","Actor":"mthalman","Number":"40060","RawContent":null,"Title":"\"Invalid Typeref token\" error in app's async method when PublishTrimmed option enabled","State":"closed","Body":"Repro Steps:\r\n1. `git clone https://github.com/dotnet/docker-tools.git`\r\n1. `cd docker-tools`\r\n1. `git checkout 0034133bf2214492c2949e7bd31bf22a85ab1856`\r\n1. `echo [] > image-info.json`\r\n1. `dotnet build Microsoft.DotNet.ImageBuilder\\Microsoft.DotNet.ImageBuilder.sln`\r\n1. `dotnet publish .\\Microsoft.DotNet.ImageBuilder\\src\\Microsoft.DotNet.ImageBuilder.csproj -c Release -o out -r win7-x64`\r\n1. `out\\Microsoft.DotNet.ImageBuilder.exe rebuildStaleImages \"\" \"\" \"\" --subscriptions-path eng/check-base-image-subscriptions.json --image-info-path image-info.json`\r\n\r\nResult:\r\n```\r\nSystem.AggregateException: One or more errors occurred. ([C:\\repos\\temp\\docker-tools\\out\\Microsoft.DotNet.ImageBuilder.dll] Invalid Typeref token.)\r\n ---> System.BadImageFormatException: [C:\\repos\\temp\\docker-tools\\out\\Microsoft.DotNet.ImageBuilder.dll] Invalid Typeref token.\r\n   at Microsoft.DotNet.ImageBuilder.Commands.RebuildStaleImagesCommand.GetGitRepoPath(Subscription sub)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.DotNet.ImageBuilder.Commands.RebuildStaleImagesCommand.GetGitRepoPath(Subscription sub)\r\n   at Microsoft.DotNet.ImageBuilder.Commands.RebuildStaleImagesCommand.GetPathsToRebuildAsync(Subscription subscription, RepoData[] repos)\r\n   at Microsoft.DotNet.ImageBuilder.Commands.RebuildStaleImagesCommand.QueueBuildForStaleImages(Subscription subscription, RepoData[] repos)\r\n   at Microsoft.DotNet.ImageBuilder.Commands.RebuildStaleImagesCommand.ExecuteAsync()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at Microsoft.DotNet.ImageBuilder.ImageBuilder.Main(String[] args)\r\n```\r\n\r\nIf you change `Microsoft.DotNet.ImageBuilder\\src\\Microsoft.DotNet.ImageBuilder.csproj` so that `PublishTrimmed` is set to `False`, then you will no longer get this `Invalid Typeref token` error.  Instead, you'll get an an error saying `The resource cannot be found`, which is expected because of how the project's code is written.","Url":"https://github.com/dotnet/corefx/issues/40060","RelatedDescription":"Closed issue \"\"Invalid Typeref token\" error in app's async method when PublishTrimmed option enabled\" (#40060)"},{"Id":"477476389","IsPullRequest":true,"CreatedAt":"2019-08-06T16:23:00","Actor":"ericstj","Number":"40061","RawContent":null,"Title":"Enable partial package build during source build","State":"open","Body":"This turns on package build during source build and builds all the library packages.\r\n\r\nPackages omit any library build that wasn't part of source build, and do so in a way that won't change nuget resolution.  We also include assets that might only build during source build (eg: a netcoreapp3.0 targeting library when the package might only contain a netcoreapp2.0 targeting version).\r\n\r\nThis should satisfy all up-stack dependencies for netcoreapp3.0 on corefx produced packages.\r\n\r\nThe SDK also has some dependencies on desktop assets that are not covered by this, due to the packages shipping a netstandard2.0 asset but having a \"better\" netcoreapp3.0 specific asset that will be built.  To ensure we build the netstandard asset I made sure that we build the best configurations for both netcoreapp and netstandard for all src projects.\r\n\r\nFixes #39787 #39793 ","Url":"https://github.com/dotnet/corefx/pull/40061","RelatedDescription":"Open PR \"Enable partial package build during source build\" (#40061)"},{"Id":"477376442","IsPullRequest":true,"CreatedAt":"2019-08-06T14:14:23","Actor":"dotnet-maestro[bot]","Number":"40059","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19405.9\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19405.9\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19405.13\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190805.2\r\n- **Date Produced**: 8/5/2019 1:19 PM\r\n- **Commit**: a5882a52348c333477f9d505c64e9cb1e5044b5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19405.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40059","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#40059)"},{"Id":"477362179","IsPullRequest":true,"CreatedAt":"2019-08-06T13:45:14","Actor":"dotnet-maestro[bot]","Number":"40058","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19405.9\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19405.9\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190805.13\r\n- **Date Produced**: 8/6/2019 1:51 AM\r\n- **Commit**: c707378f2a8ae1da5ebc5d02bbe2e0a3fd26a6a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19405.13\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19405.13\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40058","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx\" (#40058)"},{"Id":"477361794","IsPullRequest":true,"CreatedAt":"2019-08-06T13:26:02","Actor":"dotnet-maestro[bot]","Number":"40057","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190803.2\r\n- **Date Produced**: 8/4/2019 12:37 AM\r\n- **Commit**: 69649624d71a4d7ebcae2ce5420508e5fe5ba7f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19403.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19403.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19403.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40057","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#40057)"},{"Id":"477340735","IsPullRequest":true,"CreatedAt":"2019-08-06T13:25:52","Actor":"dotnet-maestro[bot]","Number":"40056","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19405.9\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19405.9\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40056","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40056)"},{"Id":"477340481","IsPullRequest":true,"CreatedAt":"2019-08-06T13:10:21","Actor":"dotnet-maestro[bot]","Number":"40055","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19405.9\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19405.9\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19405.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40055","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40055)"},{"Id":"477305761","IsPullRequest":false,"CreatedAt":"2019-08-06T10:43:27","Actor":"alexischr","Number":"40054","RawContent":null,"Title":"macOS FileSystemWatcher sometimes throws ArgumentOutOfRangeException while processing events","State":"open","Body":"See https://github.com/mono/mono/issues/15575 for some more details and a stacktrace (note that the class namespace is renamed to `System.IO.CoreFX` under Mono)\r\n\r\nIt seems (we have not yet confirmed, but nothing else shows from the code) that in some events, `_fullDirectory` is longer than some of the paths returned in the event list used by `ProcessEvents()`, signifying a completely different root. We have a candidate fix of sorts at https://github.com/mono/corefx/pull/317 , where we just don't try to slice if the lengths are out of range, but a more proper solution is probably to always ensure `_fullDirectory` is the first part of any path before we try to just slice it out.\r\n\r\nThe issue seems to happen more often in macOS Catalina according to crash reports, but we don't yet have a reliable reproduction.","Url":"https://github.com/dotnet/corefx/issues/40054","RelatedDescription":"Open issue \"macOS FileSystemWatcher sometimes throws ArgumentOutOfRangeException while processing events\" (#40054)"},{"Id":"477253593","IsPullRequest":false,"CreatedAt":"2019-08-06T08:55:10","Actor":"Wraith2","Number":"40052","RawContent":null,"Title":"Build: individual project build failures","State":"open","Body":"Setup. On a clean up to date master I did `build -clean`, `build -allconfigurations` so everything Is clean and restored, no errors so baseline is good. From this point trying to build an individual project, example `build src\\System.Data.SqlClient` or `src\\System.Data.Common` (I have tried others, all the same) I get the error.\r\n\r\n`E:\\Programming\\csharp7\\corefx\\.dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(234,5): error NETSDK1004: Assets file 'E:\\Programming\\csharp7\\corefx\\artifacts\\obj\\System.Data.Common.Tests\\project.assets.json' not found. Run a NuGet package restore to generate this file. [E:\\Programming\\csharp7\\corefx\\src\\System.Data.Common\\tests\\System.Data.Common.Tests.csproj]\r\n`\r\n\r\nI've also seen this error in both visual studio and the corefx build output at various points.\r\n`NU1105\tUnable to find project information for 'E:\\Programming\\csharp7\\corefx\\src\\Common\\tests\\CoreFx.Private.TestUtilities\\CoreFx.Private.TestUtilities.csproj'. Inside Visual Studio, this may be because the project is unloaded or not part of current solution so please run a restore from command-line. Otherwise the project file may be invalid or missing targets required for restore.\tSystem.Data.SqlClient.ManualTesting.Tests\tE:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\tests\\ManualTests\\System.Data.SqlClient.ManualTesting.Tests.csproj\r\n`\r\n\r\nIn visual studio 2019 latest stable I also get a number of other errors, this might not be supported but it points at the sdk again so I thought it worth including.\r\n`NETSDK1042\tCould not load PlatformManifest from 'E:\\Programming\\csharp7\\corefx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Debug-x64\\shared\\Microsoft.NETCore.App\\5.0.0\\PlatformManifest.txt' because it did not exist.\tAddress\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets\r\n`\r\n\r\nThis means that the only way to iterate an individual library is to do a full rebuild which is undesirable and slow. \r\n/cc @ViktorHofer for test project nuget restore issue, not sure who'd look at the rest.\r\n","Url":"https://github.com/dotnet/corefx/issues/40052","RelatedDescription":"Open issue \"Build: individual project build failures\" (#40052)"},{"Id":"477163948","IsPullRequest":false,"CreatedAt":"2019-08-06T04:32:08","Actor":"JamesNK","Number":"40051","RawContent":null,"Title":"HTTP2: Flakyness when server doesn't completely read request","State":"open","Body":"I have created a repro for an error that sometimes shows up on the grpc-dotnet CI server.\r\n\r\nRepro:\r\n1. `git clone https://github.com/JamesNK/grpc-dotnet.git`\r\n2. `git checkout jamesnk/stress-maxsize`\r\n3. `dotnet test test\\FunctionalTests --filter Name~ReceivedMessageExceedsSize_ThrowError`\r\n\r\nLogic in the test is like:\r\n1. Client makes a non-streaming call to the server and sends a large request body\r\n2. Server ends response without reading complete request body\r\n3. Client asserts response\r\n4. Go to 1.\r\n\r\nWhen one thread is executing this will not error.\r\n\r\nWhen multiple threads share one HttpClient it consistently throws this error:\r\n\r\n```\r\nSystem.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n  Stack Trace: \r\n    at TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n    at Http2Connection.SendStreamDataAsync(Int32 streamId, ReadOnlyMemory`1 buffer, CancellationToken cancellationToken)\r\n    at Http2Stream.SendDataAsync(ReadOnlyMemory`1 buffer, CancellationToken cancellationToken)\r\n    at HttpContent.CopyToAsyncCore(ValueTask copyTask)\r\n    at Http2Stream.SendRequestBodyAsync(CancellationToken cancellationToken)\r\n    at Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    at HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n    at RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    at HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n    at TaskExtensions.TimeoutAfter[T](Task`1 task, TimeSpan timeout, String filePath, Int32 lineNumber) in TaskExtensions.cs line: 58\r\n    at <<ReceivedMessageExceedsSize_ThrowError>b__1>d.MoveNext() in MaxMessageSizeTests.cs line: 77\r\n    at --- End of stack trace from previous location where exception was thrown ---\r\n    at MaxMessageSizeTests.ReceivedMessageExceedsSize_ThrowError() in MaxMessageSizeTests.cs line: 87\r\n    at GenericAdapter`1.BlockUntilCompleted()\r\n    at NoMessagePumpStrategy.WaitForCompletion(AwaitAdapter awaitable)\r\n    at AsyncToSyncAdapter.Await(Func`1 invoke)\r\n    at TestMethodCommand.RunTestMethod(TestExecutionContext context)\r\n    at TestMethodCommand.Execute(TestExecutionContext context)\r\n    at <>c__DisplayClass1_0.<Execute>b__0()\r\n    at BeforeAndAfterTestCommand.RunTestMethodInThreadAbortSafeZone(TestExecutionContext context, Action action)\r\n```\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-013697\r\n Commit:    baac5f4d5c\r\n```\r\n\r\n// @geoffkizer ","Url":"https://github.com/dotnet/corefx/issues/40051","RelatedDescription":"Open issue \"HTTP2: Flakyness when server doesn't completely read request\" (#40051)"},{"Id":"477139721","IsPullRequest":false,"CreatedAt":"2019-08-06T02:39:43","Actor":"herrozerro","Number":"40050","RawContent":null,"Title":"[System.Text.Json]: Recursive property in IEnumerable type results in stackoverflow","State":"open","Body":"Possibly related to #37313\r\n\r\n\r\n```\r\n    void Main()\r\n    {\r\n\t    testThing thing = new testThing();\r\n\r\n\t    var s = System.Text.Json.JsonSerializer.Serialize(thing);\r\n    }\r\n\r\n    public class testThing\r\n    {\r\n\t    public IEnumerable<testThing> things {get;set;}\r\n    }\r\n```\r\n\r\nEnvironment: 3.0.100-preview7-012821\r\n\r\nWorks with list, but IEnumerable breaks it.","Url":"https://github.com/dotnet/corefx/issues/40050","RelatedDescription":"Open issue \"[System.Text.Json]: Recursive property in IEnumerable type results in stackoverflow\" (#40050)"},{"Id":"477121995","IsPullRequest":true,"CreatedAt":"2019-08-06T01:21:04","Actor":"Anipik","Number":"40049","RawContent":null,"Title":"changing netcoreapp targetframework from 3.0 to 5.0 and adding support for targetgroup = netcoreapp5.0","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/40049","RelatedDescription":"Open PR \"changing netcoreapp targetframework from 3.0 to 5.0 and adding support for targetgroup = netcoreapp5.0\" (#40049)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"477699984","IsPullRequest":false,"CreatedAt":"2019-08-07T04:58:01","Actor":"peteraritchie","Number":"37782","RawContent":null,"Title":"Project > Add > New Item > Analyzer (C#) does not install necessary Nuget packages, resulting in compile errors","State":"closed","Body":"**Version Used**: 16.2.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create class library, .net standard, c#\r\n2. Right-click new library in solution explorer\r\n3. Click New > Add Item > Extensibility > Analyzer\r\n4. Click Analyzer\r\n5. Press Add\r\n6 Build class library\r\n\r\n**Expected Behavior**:\r\nNo compile errors\r\n\r\n**Actual Behavior**:\r\nCompile Errors:\r\n```\r\n2>------ Build started: Project: ClassLibrary1, Configuration: Debug Any CPU ------\r\n2>Analyzer1.cs(3,26,3,35): error CS0234: The type or namespace name 'Immutable' does not exist in the namespace 'System.Collections' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(6,17,6,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(7,17,7,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(8,17,8,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(9,17,9,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n2>Analyzer1.cs(14,30,14,48): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,25,23,61): error CS0246: The type or namespace name 'ImmutableArray<>' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,40,23,60): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzerAttribute' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(13,25,13,38): error CS0103: The name 'LanguageNames' does not exist in the current context\r\n2>Analyzer1.cs(25,41,25,56): error CS0246: The type or namespace name 'AnalysisContext' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(23,62,23,82): error CS0115: 'Analyzer1.SupportedDiagnostics': no suitable method found to override\r\n2>Analyzer1.cs(17,34,17,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(18,34,18,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Analyzer1.cs(21,25,21,45): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/37782","RelatedDescription":"Closed issue \"Project > Add > New Item > Analyzer (C#) does not install necessary Nuget packages, resulting in compile errors\" (#37782)"},{"Id":"477339617","IsPullRequest":true,"CreatedAt":"2019-08-07T02:00:22","Actor":"dotnet-bot","Number":"37753","RawContent":null,"Title":"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37753","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps\" (#37753)"},{"Id":"477658104","IsPullRequest":true,"CreatedAt":"2019-08-07T01:08:28","Actor":"heejaechang","Number":"37781","RawContent":null,"Title":"[Draft] move to new OperationProgress API.","State":"open","Body":"no VS SDK version update since there is no nuget yet. so it won't build.","Url":"https://github.com/dotnet/roslyn/pull/37781","RelatedDescription":"Open PR \"[Draft] move to new OperationProgress API.\" (#37781)"},{"Id":"477457608","IsPullRequest":false,"CreatedAt":"2019-08-07T01:08:00","Actor":"NMSAzulX","Number":"37760","RawContent":null,"Title":"Question: How do I use the \"refs\" tag?","State":"closed","Body":"> Alternatively, projects that use .NET SDK can set PreserveCompilationContext build property to true. Publishing such project will copy reference assemblies for the framework the project targets to a refs sub-directory of the publish directory.\r\n\r\nI used `< PreserveCompilationContext > true < / PreserveCompilationContext >` and published the WEB application, but I didn't see the refs subfolder. How do I use the refs tag?\r\n\r\n![image](https://user-images.githubusercontent.com/16236903/62554702-2a93fe00-b8a4-11e9-9503-2d368bb83a26.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37760","RelatedDescription":"Closed issue \"Question: How do I use the \"refs\" tag?\" (#37760)"},{"Id":"477339720","IsPullRequest":true,"CreatedAt":"2019-08-07T01:00:22","Actor":"dotnet-bot","Number":"37754","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37754","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37754)"},{"Id":"477656089","IsPullRequest":false,"CreatedAt":"2019-08-07T00:58:24","Actor":"ivanbasov","Number":"37780","RawContent":null,"Title":"Completion does not check for type constraints when is called for extension methods","State":"open","Body":"```\r\n    public static class Ext \r\n    {\r\n        public static void DoSmt<T>(this T thing, string s) where T : class, I\r\n        { \r\n        }\r\n    }\r\n\r\n    public interface I \r\n    {\r\n        void A();\r\n    }\r\n\r\n\r\n    public class Class1\r\n    {\r\n        public void M(string s)\r\n        {\r\n            this.$$\r\n        }\r\n    }\r\n```\r\n\r\nStart typing at $$\r\n\r\n**Expected**\r\nDoSmt does not appear in the completion list\r\n\r\n**Actual**\r\nDoSmt appears in the completion list","Url":"https://github.com/dotnet/roslyn/issues/37780","RelatedDescription":"Open issue \"Completion does not check for type constraints when is called for extension methods\" (#37780)"},{"Id":"477654990","IsPullRequest":false,"CreatedAt":"2019-08-07T00:52:57","Actor":"jasonmalinowski","Number":"37779","RawContent":null,"Title":"Diagnostics with severity changed by .editorconfig doesn't block emitting the output","State":"open","Body":"**Version Used**: Version 16.3.0 Preview 3.0 [29205.144.master], Roslyn part is 3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new .NET Core console application.\r\n2. Update the contents of Main to have:\r\n```c#\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            return;\r\n\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n```\r\nThis is to produce a warning (unreachable code).\r\n3. Add an .editorconfig and add `dotnet_diagnostic.CS0162.severity = error` to it so it applies to the file.\r\n4. Build. In the build output, you see a build error. (Note: it may not reflect in the IDE due to feature flag concerns at the moment.)\r\n5. Build a second time.\r\n\r\n**Expected Behavior**: the second build still shows an error.\r\n**Actual Behavior**: the second build just says \"succeeded\".\r\n\r\nThis is happening because the first build, despite emitting an error, is still outputting it's output binary. Thus, the second build sees \"everything up to date\" and simply builds successfully.","Url":"https://github.com/dotnet/roslyn/issues/37779","RelatedDescription":"Open issue \"Diagnostics with severity changed by .editorconfig doesn't block emitting the output\" (#37779)"},{"Id":"477651411","IsPullRequest":true,"CreatedAt":"2019-08-07T00:34:25","Actor":"jasonmalinowski","Number":"37778","RawContent":null,"Title":"Remove flighting and have a checkbox opt out of new .editorconfig support","State":"open","Body":"At this point, the flighting controls we have aren't really useful anymore: we want this on for everybody unless the opt out, and that opt-out would be specific to certain users that are running into issues with the new system to keep them unblocked. I'm keeping this a per- machine setting (that doesn't roam) because it's really repo or VS version specific.","Url":"https://github.com/dotnet/roslyn/pull/37778","RelatedDescription":"Open PR \"Remove flighting and have a checkbox opt out of new .editorconfig support\" (#37778)"},{"Id":"477629921","IsPullRequest":true,"CreatedAt":"2019-08-07T00:19:35","Actor":"JoeRobich","Number":"37774","RawContent":null,"Title":"Adding Skip to CSharpInteractiveCommands.VerifyPreviousAndNextHistory","State":"closed","Body":"Pass rate is below 99% - https://github.com/dotnet/roslyn/issues/18779\r\n","Url":"https://github.com/dotnet/roslyn/pull/37774","RelatedDescription":"Closed or merged PR \"Adding Skip to CSharpInteractiveCommands.VerifyPreviousAndNextHistory\" (#37774)"},{"Id":"477647059","IsPullRequest":true,"CreatedAt":"2019-08-07T00:14:25","Actor":"petrroll","Number":"37777","RawContent":null,"Title":"[WIP] Initial support for CodeRefactorings ordering.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37777","RelatedDescription":"Open PR \"[WIP] Initial support for CodeRefactorings ordering.\" (#37777)"},{"Id":"477644413","IsPullRequest":true,"CreatedAt":"2019-08-07T00:02:34","Actor":"dotnet-bot","Number":"37776","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"open","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37776","RelatedDescription":"Open PR \"Merge master to features/param-nullchecking\" (#37776)"},{"Id":"477643924","IsPullRequest":true,"CreatedAt":"2019-08-07T00:00:33","Actor":"dotnet-bot","Number":"37775","RawContent":null,"Title":"Merge release/dev16.2 to release/dev16.3-preview2","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-to-release/dev16.3-preview2\ngit reset --hard upstream/release/dev16.3-preview2\ngit merge upstream/release/dev16.2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37775","RelatedDescription":"Open PR \"Merge release/dev16.2 to release/dev16.3-preview2\" (#37775)"},{"Id":"477533188","IsPullRequest":true,"CreatedAt":"2019-08-06T23:48:12","Actor":"JoeRobich","Number":"37764","RawContent":null,"Title":"Skip tests requiring legacy EditorConfig","State":"closed","Body":"Now that the integration test vm images have been updated with the latest preview build of 16.3 these tests are consistently failing in runs for branches dev16.3-preview1 and earlier.","Url":"https://github.com/dotnet/roslyn/pull/37764","RelatedDescription":"Closed or merged PR \"Skip tests requiring legacy EditorConfig\" (#37764)"},{"Id":"477628408","IsPullRequest":false,"CreatedAt":"2019-08-06T22:52:45","Actor":"RikkiGibson","Number":"37773","RawContent":null,"Title":"Parent type constraints aren't checked on members referencing an inner class declared on a base type","State":"closed","Body":"Related to #37320 and #32536\r\n\r\nThe general scenario shown below will not report constraint violation errors:\r\n\r\n```cs\r\nclass A\r\n{\r\n    public class B { }\r\n}\r\n\r\nclass C<T> : A where T : class { }\r\n\r\nclass Test\r\n{\r\n    // in post-binding checks the type is seen as `A.B` so there's nothing to error about\r\n    C<int>.B f;\r\n}\r\n```\r\n\r\nThis is true for types used in:\r\n- properties, fields, and events\r\n- method parameters and returns\r\n- base clauses\r\n\r\nand likely other places.\r\n\r\nHowever, the impact in practice is minimal because this bug doesn't cause the compiler to actually emit constructed types which violate constraints. In the scenario above, the emitted type of the field `Test.f` will be `A.B`.","Url":"https://github.com/dotnet/roslyn/issues/37773","RelatedDescription":"Closed issue \"Parent type constraints aren't checked on members referencing an inner class declared on a base type\" (#37773)"},{"Id":"477626061","IsPullRequest":true,"CreatedAt":"2019-08-06T22:43:34","Actor":"gafter","Number":"37772","RawContent":null,"Title":"Eliminate host dependence for constant folding floating-point to integral conversions.","State":"open","Body":"Fixes #37527\r\n","Url":"https://github.com/dotnet/roslyn/pull/37772","RelatedDescription":"Open PR \"Eliminate host dependence for constant folding floating-point to integral conversions.\" (#37772)"},{"Id":"477622556","IsPullRequest":true,"CreatedAt":"2019-08-06T22:30:46","Actor":"jasonmalinowski","Number":"37771","RawContent":null,"Title":"Update CODEOWNERS","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37771","RelatedDescription":"Open PR \"Update CODEOWNERS\" (#37771)"},{"Id":"477613788","IsPullRequest":true,"CreatedAt":"2019-08-06T22:00:47","Actor":"agocke","Number":"37770","RawContent":null,"Title":"Fix namespace incremental parsing bug","State":"open","Body":"There was a previous parsing change (#32999) which modified namespace\r\nparsing to allow modifiers and attributes on namespaces, to improve\r\nerror recovery.\r\n\r\nThis PR contained a bug because it didn't move the incremental parsing\r\ncheck to before parsing attributes and modifiers, which should now\r\nbe included in incremental parsing to prevent changes from being dropped\r\n\r\nFixes #37665, #37664, #37663","Url":"https://github.com/dotnet/roslyn/pull/37770","RelatedDescription":"Open PR \"Fix namespace incremental parsing bug\" (#37770)"},{"Id":"477610794","IsPullRequest":false,"CreatedAt":"2019-08-06T21:51:34","Actor":"ivanbasov","Number":"37769","RawContent":null,"Title":"Implement an analyzer to remove unused references","State":"open","Body":"IDE task which is a part of https://github.com/dotnet/roslyn/issues/36068\r\n\r\nThe analyzer depends on \r\n - the compiler API (https://github.com/dotnet/roslyn/issues/37768) for unused references\r\n - the file generated by MS Build which will provide dependencies between references and packages and point which 'unused' references are actually transitively used.\r\n - the project-system API (for the analyzer fixer)\r\n\r\nThe analyzer should report which references are actually could be removed. The fixer should allow removing them.","Url":"https://github.com/dotnet/roslyn/issues/37769","RelatedDescription":"Open issue \"Implement an analyzer to remove unused references\" (#37769)"},{"Id":"477609918","IsPullRequest":false,"CreatedAt":"2019-08-06T21:48:51","Actor":"ivanbasov","Number":"37768","RawContent":null,"Title":"Provide a compiler level API to list used (or the opposite unused) references per compilation","State":"open","Body":"Required for https://github.com/dotnet/roslyn/issues/36068","Url":"https://github.com/dotnet/roslyn/issues/37768","RelatedDescription":"Open issue \"Provide a compiler level API to list used (or the opposite unused) references per compilation\" (#37768)"},{"Id":"477600471","IsPullRequest":true,"CreatedAt":"2019-08-06T21:23:01","Actor":"ivanbasov","Number":"37767","RawContent":null,"Title":"VSSDK update","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37767","RelatedDescription":"Open PR \"VSSDK update\" (#37767)"},{"Id":"477571012","IsPullRequest":true,"CreatedAt":"2019-08-06T20:09:13","Actor":"jasonmalinowski","Number":"37766","RawContent":null,"Title":"Create a UIContext triggered by projects in the VisualStudioWorkspace","State":"open","Body":"Sometimes other features need to light up if there's a C# or VB project present. A good example is some of the test tooling: they don't want to load their components with Roslyn unless somebody is also using the test tooling, but you don't want to accidentally load Roslyn if somebody is using the test tooling only for C++.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_queries/edit/844761/","Url":"https://github.com/dotnet/roslyn/pull/37766","RelatedDescription":"Open PR \"Create a UIContext triggered by projects in the VisualStudioWorkspace\" (#37766)"},{"Id":"477545879","IsPullRequest":false,"CreatedAt":"2019-08-06T19:05:51","Actor":"TessenR","Number":"37765","RawContent":null,"Title":"`DoesNotReturnIf` attribute should be processed after the containing invocation instead of the argument's evaluation","State":"open","Body":"**Version Used**: \r\n\r\n```\r\ncommit baa0dcc0f3d023c37c069c4feb36986e979036cd\r\nMerge: 548db2b498 f889038688\r\nAuthor: dotnet-automerge-bot <38986832+dotnet-automerge-bot@users.noreply.github.com>\r\nDate:   Mon Aug 5 16:00:23 2019 -0700\r\n\r\n    Merge pull request #37730 from dotnet/merges/release/dev16.3-preview2-to-master\r\n\r\n    Merge release/dev16.3-preview2 to master\r\n```\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n#nullable enable\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass C\r\n{\r\n  static void Main()\r\n  {\r\n    Test(null);\r\n  }\r\n\r\n  static void Test(string? s)\r\n  {\r\n    M(s != null, s.ToString());\r\n  }\r\n\r\n  static void M([DoesNotReturnIf(false)] bool b, string s) { if (!b) throw new Exception(s); }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nWarning for `s.ToString()` as `s` is not known to be not null until the invocation of `M` which happens before all of its arguments' evaluation\r\n\r\n**Actual Behavior**:\r\nNo warnings. The code crashes at runtime with a `NullReferenceException`","Url":"https://github.com/dotnet/roslyn/issues/37765","RelatedDescription":"Open issue \"`DoesNotReturnIf` attribute should be processed after the containing invocation instead of the argument's evaluation\" (#37765)"},{"Id":"477524118","IsPullRequest":false,"CreatedAt":"2019-08-06T18:15:19","Actor":"vsfeedback","Number":"37763","RawContent":null,"Title":"Debugger doesn't show value of variable, instead says 'x' threw an exception of type 'System.NullReferenceException'","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679617/debugger-doesnt-show-value-of-variable-instead-say.html)._\r\n\r\n---\r\nEnvironment: Visual Studio 2019 Preview 16.3.0 Preview 1.0, dotnet core 3.0 preview 7\r\nTo reproduce: Write the following code in a new Console App (.Net Core):\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace WatchBug\r\n{\r\n    class Program\r\n    {\r\n        public static async Task Main(string[] args)\r\n        {\r\n            foreach (var module in new List<object> { new object() })\r\n            {\r\n                new List<object>().FirstOrDefault(x => module != null);\r\n            }\r\n\r\n            foreach (var module in new List<object> { new object() })\r\n            {\r\n                module.ToString();\r\n                new List<object>().FirstOrDefault(x => module != null);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nPut a breakepoint on the line &quot;module. ToString()&quot;.\r\nHover over the variable module. Observe that it does not show a popup as usual.\r\nLook at the Locals window. Observe that module is listed as an exception: &quot;'module' threw an exception of type 'System.NullReferenceException'&quot;\r\nAdd &quot;module&quot; as a watch: Observe that it is listed as an exception again.\r\n\r\nExpected behaviour is to be able to see the variable's value with the above methods.\r\nNote that the code runs fine, it is just the debugging that doesn't.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Tomas Matousek [MSFT] on 8/6/2019, 11:14 AM: \r\n\r\nWe have converted this feedback item from idea to problem. This change was done to better reflect the feedback's nature. It will allow other developers to easily find it and engage on it.\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37763","RelatedDescription":"Open issue \"Debugger doesn't show value of variable, instead says 'x' threw an exception of type 'System.NullReferenceException'\" (#37763)"},{"Id":"477519245","IsPullRequest":true,"CreatedAt":"2019-08-06T18:03:41","Actor":"gafter","Number":"37762","RawContent":null,"Title":"Treat parameters and local variables as having the default state for their type before they are assigned.","State":"open","Body":"Fixes #36052\r\n","Url":"https://github.com/dotnet/roslyn/pull/37762","RelatedDescription":"Open PR \"Treat parameters and local variables as having the default state for their type before they are assigned.\" (#37762)"},{"Id":"477511499","IsPullRequest":true,"CreatedAt":"2019-08-06T17:45:30","Actor":"jaredpar","Number":"37761","RawContent":null,"Title":"Publish Ngen logs separately","State":"open","Body":"The NGEN log files are published inside our \"Build Diagnostic Logs\"\r\ncontainer today. That is regularly around 160MB in size of which the\r\nNGEN logs take up ~700K.\r\n\r\nBeen working on some automation / processing that is specific to NGEN\r\nlog files. Downloading the other 159MB is fairly wasteful and slow for\r\nthis automation. Publishing the NGEN files separately so I can make this\r\nautomation more effecient.","Url":"https://github.com/dotnet/roslyn/pull/37761","RelatedDescription":"Open PR \"Publish Ngen logs separately\" (#37761)"},{"Id":"477455950","IsPullRequest":false,"CreatedAt":"2019-08-06T15:41:54","Actor":"alphonseg","Number":"37759","RawContent":null,"Title":"VS2017 Debugging - Use the legacy C# and VB Expression Evaluators - Deprecated","State":"open","Body":"**Version Used**: VS 2017 15.9.14\r\n\r\n**Steps to Reproduce**:\r\nWith Use the legacy C# and VB Expression Evaluators, unchecked\r\n1. `Dim strTest as String = <someobjectValue> & vbcrlf & <someotherobjectvalue>`\r\n2. Debug and set breakpoint on next line.\r\n3. In Immediate window type `?strTest`.\r\n**Expected Behavior**: Display `\"firstvalue secondvalue\"`\r\n\r\n**Actual Behavior**: Displays `\"firstvalue\" & vbcrlf & \"secondvalue\"`\r\n\r\nIt is necessary to have the expected behavior for many debugging reasons.\r\nEither have the new version display properly or leave in the legacy option.\r\n","Url":"https://github.com/dotnet/roslyn/issues/37759","RelatedDescription":"Open issue \"VS2017 Debugging - Use the legacy C# and VB Expression Evaluators - Deprecated\" (#37759)"},{"Id":"477451913","IsPullRequest":true,"CreatedAt":"2019-08-06T15:34:01","Actor":"sharwell","Number":"37758","RawContent":null,"Title":"Enable nullable reference types for generated code","State":"open","Body":"Review commit-by-commit is recommended.","Url":"https://github.com/dotnet/roslyn/pull/37758","RelatedDescription":"Open PR \"Enable nullable reference types for generated code\" (#37758)"},{"Id":"477377489","IsPullRequest":true,"CreatedAt":"2019-08-06T13:20:47","Actor":"roji","Number":"37757","RawContent":null,"Title":"Remove module scope from NullableContextAttribute","State":"open","Body":"Following https://github.com/dotnet/roslyn/pull/37610","Url":"https://github.com/dotnet/roslyn/pull/37757","RelatedDescription":"Open PR \"Remove module scope from NullableContextAttribute\" (#37757)"},{"Id":"477374224","IsPullRequest":true,"CreatedAt":"2019-08-06T13:14:32","Actor":"v-zbsail","Number":"37756","RawContent":null,"Title":"LOC CHECKIN | dotnet/roslyn master | 20190806 | bugfix","State":"open","Body":"Bugfix for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/961405","Url":"https://github.com/dotnet/roslyn/pull/37756","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/roslyn master | 20190806 | bugfix\" (#37756)"},{"Id":"477340881","IsPullRequest":true,"CreatedAt":"2019-08-06T12:05:05","Actor":"filipw","Number":"37755","RawContent":null,"Title":"workspace.TryApplyChanges should respect changes to DefaultNamespace","State":"open","Body":"This is a follow up PR to https://github.com/dotnet/roslyn/pull/35486\r\n\r\nIn the original PR, the default namespace APIs were made public but the `TryApplyChanges` method of the workspace wouldn't respect it. As a result, we needed to use a [reflection workaround in OmniSharp](https://github.com/OmniSharp/omnisharp-roslyn/blob/master/src/OmniSharp.Roslyn/OmniSharpWorkspace.cs#L478-L492).\r\n\r\nThis PR ensures that default namespace change is propagated via `TryApplyChanges`.","Url":"https://github.com/dotnet/roslyn/pull/37755","RelatedDescription":"Open PR \"workspace.TryApplyChanges should respect changes to DefaultNamespace\" (#37755)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"477666470","IsPullRequest":false,"CreatedAt":"2019-08-07T01:49:36","Actor":"mjsabby","Number":"7672","RawContent":null,"Title":"Add Span/ROSpan to Test.CoreLib","State":"open","Body":"I think add Span and ROS to Test.CoreLib makes it considerably more useful. I'm not sure what the threshold for Test.CoreLib is. Is it the absolute minimum? Or is it the absolute minimum + extremely extremely important stuff.\r\n\r\nFor example, I don't believe `object.ToString()` needs to be in Test.CoreLib but I can understand if this starts to get into a slippery slope.","Url":"https://github.com/dotnet/corert/issues/7672","RelatedDescription":"Open issue \"Add Span/ROSpan to Test.CoreLib\" (#7672)"},{"Id":"477520366","IsPullRequest":true,"CreatedAt":"2019-08-06T18:06:22","Actor":"Dotnet-GitSync-Bot","Number":"7671","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @lambdageek","Url":"https://github.com/dotnet/corert/pull/7671","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7671)"},{"Id":"477280907","IsPullRequest":true,"CreatedAt":"2019-08-06T12:50:02","Actor":"MichalStrehovsky","Number":"7670","RawContent":null,"Title":"Fix a couple R2R issues I hit","State":"closed","Body":"* I don't know how, but I missed the PInvoke ReadyToRun helpers exist in CoreCLR\r\n* Add a couple more CORINFO_HELP helpers that don't have R2R mapping\r\n* Cannot get FieldInfo for a field with an indeterminate offset.","Url":"https://github.com/dotnet/corert/pull/7670","RelatedDescription":"Closed or merged PR \"Fix a couple R2R issues I hit\" (#7670)"},{"Id":"476914604","IsPullRequest":true,"CreatedAt":"2019-08-06T02:41:03","Actor":"Dotnet-GitSync-Bot","Number":"7669","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7669","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7669)"},{"Id":"476583874","IsPullRequest":true,"CreatedAt":"2019-08-05T08:11:44","Actor":"MichalStrehovsky","Number":"7665","RawContent":null,"Title":"Fix stack traces when reflection is disabled","State":"closed","Body":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled.","Url":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Closed or merged PR \"Fix stack traces when reflection is disabled\" (#7665)"},{"Id":"474043889","IsPullRequest":true,"CreatedAt":"2019-08-05T07:41:06","Actor":"MichalStrehovsky","Number":"7659","RawContent":null,"Title":"Prevent computing bad layout","State":"closed","Body":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures.","Url":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Closed or merged PR \"Prevent computing bad layout\" (#7659)"},{"Id":"476665808","IsPullRequest":true,"CreatedAt":"2019-08-05T05:39:28","Actor":"jkotas","Number":"7668","RawContent":null,"Title":"Add link to CoreRT Future issue","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7668","RelatedDescription":"Closed or merged PR \"Add link to CoreRT Future issue\" (#7668)"},{"Id":"476583894","IsPullRequest":true,"CreatedAt":"2019-08-04T19:18:34","Actor":"MichalStrehovsky","Number":"7666","RawContent":null,"Title":"Add a note about `strip` program","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Closed or merged PR \"Add a note about `strip` program\" (#7666)"},{"Id":"476583904","IsPullRequest":true,"CreatedAt":"2019-08-04T19:07:53","Actor":"MichalStrehovsky","Number":"7667","RawContent":null,"Title":"Add a doc on debugging CoreRT programs","State":"open","Body":"A couple useful tips.","Url":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Open PR \"Add a doc on debugging CoreRT programs\" (#7667)"},{"Id":"476442652","IsPullRequest":false,"CreatedAt":"2019-08-03T13:05:03","Actor":"shaggygi","Number":"7664","RawContent":null,"Title":"[Question] Clean up milestones","State":"closed","Body":"Not a biggie, but could older milestones be closed?  See [September](https://github.com/dotnet/corert/milestone/15) and [October](https://github.com/dotnet/corert/milestone/14).","Url":"https://github.com/dotnet/corert/issues/7664","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#7664)"},{"Id":"476147096","IsPullRequest":true,"CreatedAt":"2019-08-02T13:36:07","Actor":"Dotnet-GitSync-Bot","Number":"7663","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7663","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7663)"},{"Id":"475993675","IsPullRequest":true,"CreatedAt":"2019-08-02T12:03:22","Actor":"Dotnet-GitSync-Bot","Number":"7662","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @josalem","Url":"https://github.com/dotnet/corert/pull/7662","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7662)"},{"Id":"475915591","IsPullRequest":true,"CreatedAt":"2019-08-02T04:42:37","Actor":"Dotnet-GitSync-Bot","Number":"7661","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @ts2do @sywhang","Url":"https://github.com/dotnet/corert/pull/7661","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7661)"},{"Id":"475661957","IsPullRequest":false,"CreatedAt":"2019-08-01T13:06:06","Actor":"kvittokonito","Number":"7660","RawContent":null,"Title":"Inconsistent usage of rd.xml on referenced projects","State":"closed","Body":"When AOT compiling projects with dependent referenced projects via CoreRT, the rd.xml of the referenced child dependent projects is read used but that feature seems to be inconsistent at best.\r\nSupported directives are properly parsed and used but unsupported directives that would error on the root project such as \"<Namespace />\" do not throw an error and instead are ignored without warning.\r\n\r\nFor example, the following directive will produce an unsupported error when it is included in the rd.xml of the root project:\r\n`<Namespace Name=\"System.Collections.Generic\" Dynamic=\"Required All\" />`\r\n\r\nHowever, this directive will simply be silently ignored if it is included in the rd.xml of a project referenced via \"<ProjectReference />\" on the csproj of the root project.","Url":"https://github.com/dotnet/corert/issues/7660","RelatedDescription":"Closed issue \"Inconsistent usage of rd.xml on referenced projects\" (#7660)"},{"Id":"473658285","IsPullRequest":true,"CreatedAt":"2019-07-29T06:41:45","Actor":"MichalStrehovsky","Number":"7657","RawContent":null,"Title":"Split interop manager to usage- and analysis-based","State":"closed","Body":"This puts interop manager on the same plan as metadata manager. The reason we need two managers is inlining: to determine what structs/delegates need marshaling data, we look at what methods got compiled. This works great as long as there's no inlining of these methods. If we inline a method used as such marker, we lose track of what needs interop data.\r\n\r\nWith this split, we can collect usage information during the IL scanning phase, and for codegen phase, we can reuse the information from the scanner.\r\n\r\nCommit 4c1058a removes a bunch of workarounds that we had in place because of this.\r\n\r\nThe commits mostly make sense (might help reviewing this big change), although I'm planning to squash them anyway. The `Don't make so much marshalling data` commit undoes something I did wrong in the `Track interop dependencies in the dependency graph` commit.\r\n\r\nFixes #6063.","Url":"https://github.com/dotnet/corert/pull/7657","RelatedDescription":"Closed or merged PR \"Split interop manager to usage- and analysis-based\" (#7657)"},{"Id":"473677246","IsPullRequest":true,"CreatedAt":"2019-07-27T21:00:42","Actor":"Suchiman","Number":"7658","RawContent":null,"Title":"Add support for embedding and processing embedded stacktrace line infos","State":"open","Body":"As discussed @MichalStrehovsky \r\n**TODO**:\r\n- configurability\r\n- compression\r\n- disabling reflection fallback\r\n\r\nUncompressed numbers for sizes:\r\nFor a debug Hello World application (which includes debug information for corelib).\r\n\r\n| Section | bytes | count |\r\n| --- | --- | --- |\r\n| rvaTokenMap | 127.788 | 10.648 |\r\n| sequencePoints | 1.012.608 | 111.737 |\r\n| stringHeap | 70.160 | 767 |","Url":"https://github.com/dotnet/corert/pull/7658","RelatedDescription":"Open PR \"Add support for embedding and processing embedded stacktrace line infos\" (#7658)"},{"Id":"472235106","IsPullRequest":false,"CreatedAt":"2019-07-27T17:10:19","Actor":"FrancoisM","Number":"7648","RawContent":null,"Title":"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017","State":"closed","Body":"My project has built on Azure Pipelines hosted agent for months.\r\nI switched from VS2017 to VS2019. Now it fails with \"nutc_driver.exe returned exit code 1\".\r\n\r\nI read about similar issue saying to use `<Use64BitCompiler>true</Use64BitCompiler>`. I did yet the problem remains. Other issues mention \"Out of memory\" or other errors. In my case, the log doesn't have any other errors but the one I report.\r\n\r\nI tried to uncheck \"native compilation\" but then the build took 2min (instead of over an hour), the app was about 30mb (vs 100mb usually) and would'nt install.\r\n","Url":"https://github.com/dotnet/corert/issues/7648","RelatedDescription":"Closed issue \"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017\" (#7648)"},{"Id":"473484940","IsPullRequest":true,"CreatedAt":"2019-07-27T09:46:44","Actor":"MichalStrehovsky","Number":"7656","RawContent":null,"Title":"Use a single ReadyToRunHelper enum","State":"closed","Body":"When I was troubleshooting the double/float helpers issue, it was really hairy because we have two copies or ReadyToRunHelper. We only need one.\r\n\r\nWhen Jan initially added the ILCompiler version in #129, it already came with `Keep in sync with https://github.com/dotnet/coreclr/blob/master/src/inc/readytorun.h`. We then added a couple helpers that don't exist in CoreCLR R2R because it was convenient, but we do want these numbers to match.\r\n\r\nI extracted the AOT specific ones to the end of the file, realizing that the ReadyToRun mode is trying to handle things it shouldn't. I deleted those.","Url":"https://github.com/dotnet/corert/pull/7656","RelatedDescription":"Closed or merged PR \"Use a single ReadyToRunHelper enum\" (#7656)"},{"Id":"473380499","IsPullRequest":true,"CreatedAt":"2019-07-26T19:08:27","Actor":"MichalStrehovsky","Number":"7653","RawContent":null,"Title":"Delete dead code in ILCompiler.ReadyToRun","State":"closed","Body":"Not sure how much of this is earmarked for the future (I left a couple that I found obvious), and how much is just leftovers from old designs that we should delete.","Url":"https://github.com/dotnet/corert/pull/7653","RelatedDescription":"Closed or merged PR \"Delete dead code in ILCompiler.ReadyToRun\" (#7653)"},{"Id":"473452930","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:42","Actor":"Dotnet-GitSync-Bot","Number":"7654","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7654","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7654)"},{"Id":"473357025","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:33","Actor":"MichalStrehovsky","Number":"7652","RawContent":null,"Title":"Add R2R implementation of getMethodSync","State":"closed","Body":"The R2R implementation is to just throw.\r\n\r\nThis doesn't throw in crossgen, but it takes an NGen-specific code path and _then_ throws when we deal with `CORINFO_HELP_MON_ENTER_STATIC`/`CORINFO_HELP_MON_EXIT_STATIC` (that the result of `getMethodSync` is the parameter for).","Url":"https://github.com/dotnet/corert/pull/7652","RelatedDescription":"Closed or merged PR \"Add R2R implementation of getMethodSync\" (#7652)"},{"Id":"473477763","IsPullRequest":true,"CreatedAt":"2019-07-26T18:15:15","Actor":"trylek","Number":"7655","RawContent":null,"Title":"One more fix for SuperILC OOM","State":"open","Body":"In my previous change I fixed OOM's caused by copying too long\r\nexecution log files but I forgot to apply the same fix to compilation\r\nlogs. This additional delta does just that.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7655","RelatedDescription":"Open PR \"One more fix for SuperILC OOM\" (#7655)"},{"Id":"473264674","IsPullRequest":true,"CreatedAt":"2019-07-26T11:03:46","Actor":"trylek","Number":"7651","RawContent":null,"Title":"Fork RyuJit and ReadyToRun version of getGSCookie","State":"closed","Body":"In CPAOT, we need a CoreCLR-compatible version of the GS cookie\r\nusing the appropriate R2R helper, not some hardcoded constant\r\npresumably used by the full AOT CoreRT runtime.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7651","RelatedDescription":"Closed or merged PR \"Fork RyuJit and ReadyToRun version of getGSCookie\" (#7651)"},{"Id":"473050887","IsPullRequest":true,"CreatedAt":"2019-07-26T06:02:22","Actor":"MichalStrehovsky","Number":"7650","RawContent":null,"Title":"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"","State":"closed","Body":"Reverts dotnet/corert#6779\r\n\r\nThis is so that the enum matches CoreCLR readytorun.h.","Url":"https://github.com/dotnet/corert/pull/7650","RelatedDescription":"Closed or merged PR \"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"\" (#7650)"},{"Id":"472326257","IsPullRequest":true,"CreatedAt":"2019-07-25T07:51:34","Actor":"Dotnet-GitSync-Bot","Number":"7649","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7649","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7649)"},{"Id":"472004492","IsPullRequest":true,"CreatedAt":"2019-07-24T02:07:47","Actor":"Dotnet-GitSync-Bot","Number":"7647","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7647","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7647)"},{"Id":"471969859","IsPullRequest":true,"CreatedAt":"2019-07-24T02:00:21","Actor":"nattress","Number":"7646","RawContent":null,"Title":"Add Linux / Mac ReadyToRun CI testing","State":"closed","Body":"* Remove Windows_NT only condition on CI R2R test leg\r\n* Use Top200 suite of CoreCLR tests since they reliably pass in R2R mode","Url":"https://github.com/dotnet/corert/pull/7646","RelatedDescription":"Closed or merged PR \"Add Linux / Mac ReadyToRun CI testing\" (#7646)"},{"Id":"471965978","IsPullRequest":true,"CreatedAt":"2019-07-23T21:35:43","Actor":"trylek","Number":"7645","RawContent":null,"Title":"CoreCLR Pri#1 fixes for the IsManagedSequential method","State":"open","Body":"This change fixes all remaining differences between CPAOT\r\nand Crossgen for the CoreCLR Pri#1 tests w.r.t. my recently\r\nimplemented IsManagedSequential instrumentation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7645","RelatedDescription":"Open PR \"CoreCLR Pri#1 fixes for the IsManagedSequential method\" (#7645)"},{"Id":"471750238","IsPullRequest":true,"CreatedAt":"2019-07-23T21:09:18","Actor":"trylek","Number":"7644","RawContent":null,"Title":"Mechanical move of IsManagedSequentialType to R2R field algorithm","State":"closed","Body":"Based on JanK's suggestion I'm moving IsManagedSequentialType\r\nto ReadyToRunMetadataFieldLayoutAlgorithm. In this change I'm not\r\nmaking any semantic changes to the method; I'll send out a subsequent\r\nPR for an additional delta fixing discrepancies in the method\r\nas discovered by the instrumentation I recently implemented.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7644","RelatedDescription":"Closed or merged PR \"Mechanical move of IsManagedSequentialType to R2R field algorithm\" (#7644)"},{"Id":"471340295","IsPullRequest":false,"CreatedAt":"2019-07-22T21:15:59","Actor":"nattress","Number":"7643","RawContent":null,"Title":"Compile static constructors for R2R","State":"open","Body":"CPAOT doesn't compile static constructors which has a runtime JIT cost. We should measure with them enabled (rooting them all for compilation) to assess if they give a startup benefit worth the cost of carrying them in the binary.","Url":"https://github.com/dotnet/corert/issues/7643","RelatedDescription":"Open issue \"Compile static constructors for R2R\" (#7643)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"477679461","IsPullRequest":true,"CreatedAt":"2019-08-07T02:50:23","Actor":"nguerrera","Number":"3513","RawContent":null,"Title":"React to removal of types in Microsoft.VisualBasic.Core.dll","State":"open","Body":"Due to layering issues, several types that are necessary for VB My.* support are being removed from 3.0:\r\n\r\nhttps://github.com/dotnet/corefx/pull/39972\r\n\r\nFurthermore, this would cause all .NET Core 3.0 projects to fail to build without this change, which sets MyType=Empty by default to prevent the My.* code spit that would depend on these types from happening by default.\r\n\r\nNote that .NET Core 2.x is not impacted because it still uses VBRuntime=Embed, which also suppresses `My.*`. It also prevents other VB constructs from working that still work .NET Core 3.0 without these types. The test has been adapted to test some of those constructs for 3.0 instead of testing for `My.*` working.\r\n\r\nAlso fix related issue that could cause a bug or misconfigured project to result in the .NET Framework VB compiler trying to reference the .NET Framework Microsoft.VisualBasic.dll in the runtime directory instead of the resolved Microsoft.VisualBasic.dll.","Url":"https://github.com/dotnet/sdk/pull/3513","RelatedDescription":"Open PR \"React to removal of types in Microsoft.VisualBasic.Core.dll\" (#3513)"},{"Id":"477620210","IsPullRequest":false,"CreatedAt":"2019-08-06T22:22:05","Actor":"vatsan-madhavan","Number":"3512","RawContent":null,"Title":"Theme assemblies cannot be referenced from XAML in latest SDK","State":"open","Body":"@vatsan-madhavan commented on [Tue Aug 06 2019](https://github.com/dotnet/wpf/issues/1552)\r\n\r\nThis is related to #765, which primarily deals with the inability to reference theme assemblies for consumption in C#/VB etc. code. \r\n\r\nIn recent preview8 builds, XAML like this no longer builds because the WPF theme assembles are no longer referenced by default by `Microsoft.WindowsDesktop`.\r\n\r\n```XAML\r\n... xmlns:theme=\"clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero\"\r\n\r\n<theme:SystemDropShadowChrome>\r\n       <HeaderedContentControl Padding=\"10\" Foreground=\"#CCFFFFFF\">\r\n              <HeaderedContentControl.Header>\r\n\r\n```\r\n\r\nGiven there is no way to reference these directly at build-time,  the theme assemblies are not complete unusable. \r\n\r\nThis change was made by https://github.com/dotnet/core-setup/issues/7218, which was done in due to a miscommunication between the WPF and the SDK teams. We are working together to undo this change for .NET Core 3.0. \r\n\r\nAlso related: https://github.com/dotnet/sdk/issues/3265\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3512","RelatedDescription":"Open issue \"Theme assemblies cannot be referenced from XAML in latest SDK\" (#3512)"},{"Id":"476666506","IsPullRequest":true,"CreatedAt":"2019-08-06T20:08:09","Actor":"wli3","Number":"3505","RawContent":null,"Title":"Need apphost in build but do not pack it","State":"closed","Body":"fix https://github.com/dotnet/sdk/issues/3023\r\n\r\n### Description\r\n\r\nApphost generation is disabled for dotnet tools to prevent the apphost from being packaged in the package. When debugging a WPF or Winforms project that has PackAsTool set to true, there is no exe generated with appropriate Windows PE bits set, because we disabled it as described above. Instead of disabling apphost generation when PackAsTool=true, SDK should generate it during build, but prevent it from being packaged in the nupkg.\r\n\r\n### Customer Impact\r\n\r\nWhen debugging an WPF or Winforms dotnet tool project (PackAsTool=true) in VS, the user would see the command line instead of the GUI. The app's GUI is not rendered and you get only a blank command prompt.\r\n\r\n### Regression?\r\n\r\nYes. This regressed from .NET Core SDK 3.0.100-preview3 due to https://github.com/dotnet/sdk/commit/3487007c6bf8316ce3c871aadbe75498ab2da7c4\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\n\r\nAdded new unit test coverage to ensure `RunCommand`(which VS debug calls) uses the apphost exe instead of the dll.","Url":"https://github.com/dotnet/sdk/pull/3505","RelatedDescription":"Closed or merged PR \"Need apphost in build but do not pack it\" (#3505)"},{"Id":"477085186","IsPullRequest":true,"CreatedAt":"2019-08-06T18:23:39","Actor":"peterhuene","Number":"3511","RawContent":null,"Title":"Fix publishing of applications that specify a full path to the profile.","State":"closed","Body":"#### Description\r\n\r\nWhen an application is published in Visual Studio, the full path to the publish\r\nprofile is passed as the `WebPublishProfileFile` global property.\r\n\r\nBecause the .NET Core SDK now imports the publish profile, this caused every\r\nproject referenced to also import the publish profile during restore. This may\r\nhave unintentional consequences of restoring `netstandard` projects as\r\n`netcoreapp` if a `netcoreapp` TFM is set in the publish profile, for example.\r\n\r\nHowever, during build/publish, the Web SDK is removing `WebPublishProfileFile`\r\nfrom the global properties for project references.  This causes an error due to\r\na potential mismatch between the TFM restored and the TFM being\r\nbuilt/published for dependent projects.\r\n\r\nFixes aspnet/websdk#604.\r\n\t\t\r\n#### Customer Impact\r\n\r\nCustomers will not be able to publish their .NET Core web applications that have references on projects that have a different TFM (e.g. `netstandard` libraries) from Visual Studio.\r\n\t\t\r\n#### Regression?\r\n\r\nYes.\r\n\t\t\r\n#### Risk\r\n\r\nRisk is low.\r\n\r\nThe fix is to import the publish profile only when the full path isn't set or\r\nif the project being built is the one being published (i.e. the project to\r\noverride project extensions for).","Url":"https://github.com/dotnet/sdk/pull/3511","RelatedDescription":"Closed or merged PR \"Fix publishing of applications that specify a full path to the profile.\" (#3511)"},{"Id":"476393427","IsPullRequest":true,"CreatedAt":"2019-08-06T18:23:24","Actor":"peterhuene","Number":"3500","RawContent":null,"Title":"Retry apphost creation. ","State":"closed","Body":"#### Description\r\n\r\nThis PR implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes [AB#950462](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/950462).\r\nFixes dotnet/cli#11650.\r\n\t\t\r\n#### Customer Impact\r\n\r\nSome users are running into an issue where an external application has the intermediate apphost exclusively locked.  This change helps mitigate the issue by retrying the apphost modification a configurable number of times.\r\n\t\t\r\n#### Regression?\r\n\r\nNo.\r\n\t\t\r\n#### Risk\r\n\r\nLow.\r\n","Url":"https://github.com/dotnet/sdk/pull/3500","RelatedDescription":"Closed or merged PR \"Retry apphost creation. \" (#3500)"},{"Id":"474566203","IsPullRequest":true,"CreatedAt":"2019-08-06T17:37:25","Actor":"dotnet-maestro[bot]","Number":"3487","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3487","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3487)"},{"Id":"476146474","IsPullRequest":true,"CreatedAt":"2019-08-06T17:37:03","Actor":"dotnet-maestro[bot]","Number":"3498","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3498","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3498)"},{"Id":"477060930","IsPullRequest":true,"CreatedAt":"2019-08-06T03:58:51","Actor":"dotnet-maestro[bot]","Number":"3507","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.07\r\n- **Date Produced**: 8/5/2019 9:13 PM\r\n- **Commit**: d01b2fb7bc6bd4911e157fbd51353059a3ba1a6c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28405-07\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3507","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3507)"},{"Id":"477071789","IsPullRequest":true,"CreatedAt":"2019-08-05T23:44:49","Actor":"wli3","Number":"3509","RawContent":null,"Title":"Change the assertion to not to catch the RAR warning","State":"closed","Body":"It is intent to catch the warning from Conflict Resolution.\r\n\r\nContinue investigation on why RAR start to have such warning in https://github.com/dotnet/sdk/issues/3508\r\n\r\n### Description\r\n\r\n The test is blocking any SDK PR. `It_tolerates_newline_in_hint_path` is intended to prevent regression of \"crash in conflict resolution when hintpath has new line\". However, due to a msbuild change, the RAR warning also has the same partial text the test asserts on.\r\n\r\n### Customer Impact\r\n\r\nno\r\n\r\n### Regression?\r\n\r\nno\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\n\r\nN/A","Url":"https://github.com/dotnet/sdk/pull/3509","RelatedDescription":"Closed or merged PR \"Change the assertion to not to catch the RAR warning\" (#3509)"},{"Id":"477073127","IsPullRequest":false,"CreatedAt":"2019-08-05T21:48:06","Actor":"fadimounir","Number":"3510","RawContent":null,"Title":"Double writes on publish, causes R2R task failure","State":"open","Body":"I don't know if this is related to #3257, but I was able to repro this issue again using the latest Preview9 bits (8e9948a3b768811ca5b3a666ff06207a16be69ec, 3.0.100-preview9-013692).\r\n\r\nHere's the repro:\r\n1) clone https://github.com/aspnet/Benchmarks (commit hash for repro: 3ddf6558ec4d3636dc8fec4f0c142834ffa38bf5)\r\n2) dotnet publish  -f netcoreapp3.0 -r win-x64 -v n src\\BenchmarksServer  /bl\r\n\r\nThere are 3 files double-written:\r\n- Dia2Lib.dll\r\n- TraceReloggerLib.dll\r\n- OSExtensions.dll.\r\n\r\nI'll attach the binlog.\r\n\r\nAlso, this causes the R2R task to fail with errors like this one, if you add /p:PublishReadyToRun=true to the publish command:\r\n```console\r\ne:\\dotnet_preview9\\sdk\\3.0.100-preview9-013692\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(308,28): error MSB4094: \"C:\\Users\\fadim\\.nuget\\packages\\microsoft.diagnostics.tracing.traceevent\\2.0.44\\lib\\netstandard1.6\\OSExtensions.dll;C:\\Users\\fadim\\.nuget\\packages\\microsoft.diagnostics.tracing.traceevent\\2.0.44\\lib\\netstandard2.0\\OSExtensions.dll\" is an invalid value for the \"CompilationEntry\" parameter of the \"RunReadyToRunCompiler\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\GIT\\Benchmarks\\src\\BenchmarksServer\\BenchmarksServer.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3510","RelatedDescription":"Open issue \"Double writes on publish, causes R2R task failure\" (#3510)"},{"Id":"477070233","IsPullRequest":false,"CreatedAt":"2019-08-05T21:39:19","Actor":"wli3","Number":"3508","RawContent":null,"Title":"Warning from RAR with hint path has extra new line","State":"open","Body":"Given a hint path has extra new line. On full msbuild it will have warning:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3246: Resolved file has a bad image, no metada\r\nta, or is otherwise inaccessible. Illegal characters in path. [C:\\work\\temp\\notNETFrameworkLibrary2\\NETFrameworkLibrary.csproj]\r\n```\r\n\r\n- [ ] Check if 16.2 has the same warning, the message might be different\r\n- [ ] core does not have that error, why?\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <RestoreAdditionalProjectSources>$(RestoreAdditionalProjectSources);https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json</RestoreAdditionalProjectSources>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0-preview.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Net.Http\">\r\n      <HintPath>\r\n      C:\\work\\sdk3\\artifacts\\tmp\\Debug\\SimpleNamesWi---6143883E\\NETFrameworkLibrary\\bin\\Debug\\net462\\NETFrameworkLibrary.dll\r\n      </HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3508","RelatedDescription":"Open issue \"Warning from RAR with hint path has extra new line\" (#3508)"},{"Id":"476972296","IsPullRequest":true,"CreatedAt":"2019-08-05T17:23:03","Actor":"jkoritzinsky","Number":"3506","RawContent":null,"Title":"Emit progid information into the CLSIDMap.","State":"open","Body":"This is the SDK-side of the work for https://github.com/dotnet/core-setup/pull/7551. These PRs allow users to activate .NET classes via COM using ProgIDs instead of CLSIDs for languages or platforms that do not support using CLSIDs.\r\n\r\nAdditionally, fixes a bug that would cause loading nested classes via COM to fail to find the type.\r\n\r\nContributes to dotnet/coreclr#25966\r\n\r\nThis PR doesn't need to wait for dotnet/core-setup#7551 to go in since the changes are backward compatible with previous versions of the COM host that don't have ProgID support.\r\n\r\ncc: @nguerrera \r\n\r\n================================\r\n\r\n#### Description\r\nAdd support for generating .cslidmaps with ProgIDs for com registration. See dotnet/core-setup#7573 for the host work. This PR also fixes a bug that breaks loading nested types via COM.\r\n\r\n#### Customer Impact\r\nWithout this support consumption of COM classes in languages that don't have `GUID` support is impossible.\r\n\r\nAdditionally, without the fix for nested types, it is impossible to activate a nested type via COM on .NET Core.\r\n\r\nFixes: dotnet/coreclr#25966\r\nRelated: https://github.com/dotnet/coreclr/issues/25946\r\n\r\n#### Regression?\r\nCOM support is new in 3.0 so this is not a regression from a previous .NET Core release, but is a regression in COM support from .NET Framework using the `RegAsm` tool.\r\n\r\n#### Risk\r\nMinimal. Unused information in the clsidmap such as ProgId information is ignored in previous previews of .NET Core.","Url":"https://github.com/dotnet/sdk/pull/3506","RelatedDescription":"Open PR \"Emit progid information into the CLSIDMap.\" (#3506)"},{"Id":"476589815","IsPullRequest":false,"CreatedAt":"2019-08-04T20:17:24","Actor":"nguerrera","Number":"3504","RawContent":null,"Title":"Defensively set DisableSdkPath=true for non .NET framework VB projects","State":"open","Body":"Generally, this is benign, because we pass VBRuntime which will override the SDK path, but if there is a bug or other misconfiguration, the compiler will try to locate the SDK Path using the current runtime. This causes it to try to use Microsoft.VisualBasic.dll from the .NET framework while building against core, and leads to confounding errors such as \r\n\r\n```\r\nvbc error BC30560: 'User' is ambiguous in the namespace 'Microsoft.VisualBasic.ApplicationServices'. [C:\\Users\\nicholg\\Source\\repos\\WpfControlLibrary2\\WpfControlLibrary2\\WpfControlLibrary2.vbproj]\r\n```\r\n\r\nWithout the fix for https://github.com/dotnet/sdk/issues/3450, you get errors like above with `msbuild` instead of the \"Could not find library Microsoft.VisualBasic.dll\" that was reported for `dotnet bulild`.\r\n\r\nWe should make a defensive change to set DisableSdkPath=true so that the symptom for any failure to find the correct vb runtime is consistently cannot find Microsoft.VisualBasic.dll regardless of which compiler (.NET Core or desktop) is used.\r\n\r\nThis is not a blocking issue, though, as it changes the error symptoms only when the product has other bugs or the project has been misconfigured.\r\n\r\nRelated to https://dev.azure.com/devdiv/DevDiv/_workitems/edit/960757","Url":"https://github.com/dotnet/sdk/issues/3504","RelatedDescription":"Open issue \"Defensively set DisableSdkPath=true for non .NET framework VB projects\" (#3504)"},{"Id":"475397200","IsPullRequest":false,"CreatedAt":"2019-08-03T21:53:55","Actor":"sebastienros","Number":"3496","RawContent":null,"Title":"ResolveAssemblyReference returns 3.0 assemblies when 5.0 is requested","State":"closed","Body":"I have a project where I try to use the latest 5.0 branded aspnet core. I use a `FrameworkReference` update to do so. The machine has the latest sdk (5.0.x) and the latest aspnet core shared runtimes 3.0.x and 5.0.x.\r\n\r\nAt compilation I get this:\r\n\r\n```\r\nStartup.cs(188,21): error CS1705: Assembly 'Microsoft.AspNetCore.Mvc.NewtonsoftJson' with identity 'Microsoft.AspNetCore.Mvc.NewtonsoftJson, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'Microsoft.AspNetCore.Mvc.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' which has a higher version than referenced assembly 'Microsoft.AspNetCore.Mvc.Core' with identity 'Microsoft.AspNetCore.Mvc.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' [/tmp/BenchmarksServer/43sztvs0.trd/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\nProgram.cs(117,21): error CS1705: Assembly 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv' with identity 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'Microsoft.AspNetCore.Hosting.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' which has a higher version than referenced assembly 'Microsoft.AspNetCore.Hosting.Abstractions' with identity 'Microsoft.AspNetCore.Hosting.Abstractions, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' [/tmp/BenchmarksServer/43sztvs0.trd/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\n```\r\n\r\nThe .binlog shows that `ResolveAssemblyReference` is returning these conflicting assemblies where it should instead pick them from the 5.0.x folder.\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/sdk/files/3454241/msbuild.binlog.zip)\r\n\r\nRename the file by removing the .zip extension, don't extract it (GH limitation)\r\n","Url":"https://github.com/dotnet/sdk/issues/3496","RelatedDescription":"Closed issue \"ResolveAssemblyReference returns 3.0 assemblies when 5.0 is requested\" (#3496)"},{"Id":"476449692","IsPullRequest":true,"CreatedAt":"2019-08-03T12:59:37","Actor":"dotnet-maestro[bot]","Number":"3503","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/5/2019 10:41 PM\r\n- **Commit**: 490c40397e4645cf0c47e528466b6d4a301cc04c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19405.9\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3503","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3503)"},{"Id":"476445375","IsPullRequest":true,"CreatedAt":"2019-08-03T12:04:51","Actor":"dotnet-maestro[bot]","Number":"3502","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3502","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3502)"},{"Id":"476418956","IsPullRequest":true,"CreatedAt":"2019-08-03T05:44:40","Actor":"nguerrera","Number":"3501","RawContent":null,"Title":"Removed outdated, commented out code","State":"open","Body":"Fixing small things that distracted me while doing https://github.com/dotnet/core-sdk/pull/3741\r\n\r\nSubmitting for P9 consideration as I'd prefer not to stay confused by this for the lifetime of 3.0","Url":"https://github.com/dotnet/sdk/pull/3501","RelatedDescription":"Open PR \"Removed outdated, commented out code\" (#3501)"},{"Id":"474386703","IsPullRequest":true,"CreatedAt":"2019-08-03T00:00:40","Actor":"peterhuene","Number":"3484","RawContent":null,"Title":"Retry apphost creation.","State":"closed","Body":"This PR implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes [AB#950462](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/950462).\r\nFixes dotnet/cli#11650.","Url":"https://github.com/dotnet/sdk/pull/3484","RelatedDescription":"Closed or merged PR \"Retry apphost creation.\" (#3484)"},{"Id":"476341414","IsPullRequest":false,"CreatedAt":"2019-08-02T20:20:33","Actor":"nguerrera","Number":"3499","RawContent":null,"Title":"Redundant PackageName and NuGetPackageId metadata","State":"open","Body":"There's a mix of checking PackageName and NuGetPackageId in the targets and now we seem to be setting both all the time in ResolvePackageAssets.\r\n\r\nI actually trimmed down the metadata in 2.1 to stop doing this, but it crept back in c7549ffe\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3499","RelatedDescription":"Open issue \"Redundant PackageName and NuGetPackageId metadata\" (#3499)"},{"Id":"475644278","IsPullRequest":true,"CreatedAt":"2019-08-01T14:11:23","Actor":"dotnet-maestro[bot]","Number":"3497","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3497","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3497)"},{"Id":"475349038","IsPullRequest":true,"CreatedAt":"2019-08-01T03:37:28","Actor":"nugetlurker","Number":"3494","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6136 into sdk","State":"closed","Body":"Insert NuGet Build 5.3.0-preview.2.6136 into sdk release/3.0.100-preview8 branch","Url":"https://github.com/dotnet/sdk/pull/3494","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.3.0-preview.2.6136 into sdk\" (#3494)"},{"Id":"475361769","IsPullRequest":false,"CreatedAt":"2019-07-31T21:17:43","Actor":"nguerrera","Number":"3495","RawContent":null,"Title":"Inclusion of runtime graph for all TFMs causes existing .NET Framework projects to turn x86","State":"open","Body":"So, it seems that giving the runtime graph to nuget for all TFMs is actually a pretty severe breaking change for .NET Framework in some cases.\r\n\r\nRoslyn builds with preview 8 (maybe 7, not sure when the rid graph change landed) will switch the .NET Framework csc.exe, vbc.exe, VBCSCompiler.exe to x86 from Any CPU.\r\n\r\nThis happens because they have a ref to Microsoft.DiasymReader.Native which has runtimes/win-x86 assets. The design for .NET Framework is that when we find RID-specific assets AND there is no explicit AnyCPU and no explicit RID, then we take the win7-x86 assets and use PlatformTarget=x86. \r\n\r\n(I regret this design, but that is the design since 1.0 SDK. It was done so that .NET Framework ASP.NET Core projects could consume libuv without setting a RID or PlatformTarget. Project.json just picked the RID of the current machine, which was worse as you get different apps on different machines. We tried to make it an error and say you had to pick a PlatformTarget or RID on .NET Framework exes, but there was a ton of complaints about it and we landed on the design described above by compromise.)\r\n\r\nThe thing is that we use win7-x86, but without a RID graph, we/NuGet don't know that win-x86 assets are applicable to win7-x86. Now that we have the RID graph always, we discover these win-x86 assets for the first time and the (regrettable) design actually kicks in.\r\n\r\nMy suggestion to avoid a breaking change here is to not pass the RID graph by default for TFMs that are not .NET Core 3.0+ or .NET Standard 2.1+. We can put it behind an opt-in for other TFMs.\r\n\r\nSeparately, roslyn should explicitly set Any CPU defensively so that they are not sensitive to which SDK is used to build them.\r\n\r\ncc @jaredpar @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3495","RelatedDescription":"Open issue \"Inclusion of runtime graph for all TFMs causes existing .NET Framework projects to turn x86\" (#3495)"},{"Id":"474566979","IsPullRequest":true,"CreatedAt":"2019-07-31T20:00:57","Actor":"dotnet-maestro[bot]","Number":"3488","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.05\r\n- **Date Produced**: 7/29/2019 3:24 PM\r\n- **Commit**: d15a0adeb874801e7bfaa4fbbb306a2efa268497\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-05\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3488","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3488)"},{"Id":"475103999","IsPullRequest":true,"CreatedAt":"2019-07-31T15:57:53","Actor":"dotnet-maestro[bot]","Number":"3493","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190730.3\r\n- **Date Produced**: 7/30/2019 6:57 PM\r\n- **Commit**: def377f94747dac91482aad67b33a1c011ffc770\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19380.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3493","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3493)"},{"Id":"474677142","IsPullRequest":true,"CreatedAt":"2019-07-30T23:33:44","Actor":"dotnet-maestro[bot]","Number":"3491","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.08\r\n- **Date Produced**: 7/30/2019 7:48 PM\r\n- **Commit**: c855ac718789051d5d67282c88decca445de7711\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28380-08\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3491","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3491)"},{"Id":"474614791","IsPullRequest":false,"CreatedAt":"2019-07-30T22:18:15","Actor":"JohanLarsson","Number":"3489","RawContent":null,"Title":"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"","State":"closed","Body":"Repro steps:\r\n\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Check created package.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nI tried `<PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>` but it did not have any effect.\r\n\r\nIs there a way to pack this so that analyzers are not excluded?\r\nIs there documentation about this?","Url":"https://github.com/dotnet/sdk/issues/3489","RelatedDescription":"Closed issue \"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"\" (#3489)"},{"Id":"474858582","IsPullRequest":false,"CreatedAt":"2019-07-30T18:57:29","Actor":"davidmatson","Number":"3492","RawContent":null,"Title":"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU","State":"open","Body":"**Visual Studio Version**:\r\n2019 (16.2.0)\r\n\r\n**Summary**:\r\nWhen using the new-style (CPS?) csproj but targeting .NET Framework, the default TargetPlatform is differe than either .NET Core or old-style .NET Framework csprojs (x86 rather than AnyCPU).\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New -> Project -> .NET Core exe\r\n\r\n2. Unload the csproj and replace the target framework line with: ```<TargetFramework>net472</TargetFramework>```\r\n\r\n3. Releoad the project and check its properties\r\n\r\n**Expected Behavior**:\r\nTarget platform in AnyCPU.\r\n\r\n**Actual Behavior**:\r\nTarget platform is x86.\r\n\r\n**User Impact**:\r\nConfusing behavior when restoring NuGet packages, and inconsistency with all other C# project variants.","Url":"https://github.com/dotnet/sdk/issues/3492","RelatedDescription":"Open issue \"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU\" (#3492)"},{"Id":"474626403","IsPullRequest":false,"CreatedAt":"2019-07-30T14:40:37","Actor":"JohanLarsson","Number":"3490","RawContent":null,"Title":"Pack without explicit NETStandard.Library dependency","State":"open","Body":"Repro steps:\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>\r\n    <PackageReference Update=\"NETStandard.Library\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Inspect package:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3490","RelatedDescription":"Open issue \"Pack without explicit NETStandard.Library dependency\" (#3490)"},{"Id":"474545209","IsPullRequest":true,"CreatedAt":"2019-07-30T14:36:33","Actor":"dotnet-maestro[bot]","Number":"3486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190729.29\r\n- **Date Produced**: 7/29/2019 10:51 PM\r\n- **Commit**: 84d9a013b66c3e14a67ace0a99ae84e6eb8b6a7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19379.29\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3486)"},{"Id":"474481551","IsPullRequest":false,"CreatedAt":"2019-07-30T09:41:44","Actor":"mcartoixa","Number":"3485","RawContent":null,"Title":"When using custom $(BaseIntermediateOutputPath) the build still picks files from obj/","State":"open","Body":"I like to customize `$(BaseIntermediateOutputPath)` on my build servers to a centralized location so that I am very sure to start from fresh (just delete the folder and there you go).\r\nOn a development machine, Visual Studio generates files (e.g. `AssemblyInfo.cs`) in the default folder, (`obj/`, inside the project folder). When trying the build server script, it regenerates those files in the customized `$(BaseIntermediateOutputPath)` folder but it stills picks up the default ones that have been generated before for compilation...\r\n\r\nMy workaround is to add the following property on my projects in the build server script: `DefaultItemExcludesInProjectFolder=bin/**;obj/**`. My use case might be a fringe one, but I think these folders should be excluded by default, in a hardcoded way (cf. https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L39).\r\n\r\nUsing .NET Core 3.0 preview 7.","Url":"https://github.com/dotnet/sdk/issues/3485","RelatedDescription":"Open issue \"When using custom $(BaseIntermediateOutputPath) the build still picks files from obj/\" (#3485)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1158903079120470016","CreatedAt":"2019-08-07T00:50:00+00:00","UserScreenname":"dotnet","Text":"Try out Nullable Reference Types\n\nhttps://t.co/slv9yaObMI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":30,"RawContent":null},{"Id":"1158800246995992576","CreatedAt":"2019-08-06T18:01:23+00:00","UserScreenname":"dotnet","Text":"Improving .NET Core installation in Visual Studio and on Windows https://t.co/xLzfvAyAXw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":18,"RawContent":null},{"Id":"1158783788219940866","CreatedAt":"2019-08-06T16:55:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1158741011876552706","CreatedAt":"2019-08-06T14:06:00+00:00","UserScreenname":"dotnet","Text":"Dive deep into the Visual Studio Test Platform with @gotheap &amp; @sarabjotkochar \n\nhttps://t.co/Uiitu1jeiG #VisualStudio #SoftwareTesting","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":8,"RawContent":null},{"Id":"1157309583326633988","CreatedAt":"2019-08-02T15:18:01+00:00","UserScreenname":"dotnet","Text":"•Unity? ✔\n•Visual Studio? ✔\n•C#? ✔\n•41 videos on scripting fundamentals? ✔\n•$$$ - free\nCheck out our new, free lear… https://t.co/x9mazJYw7c","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":139,"FavoriteCount":45,"RawContent":null},{"Id":"1156973009279733761","CreatedAt":"2019-08-01T17:00:35+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"1156590592089964544","CreatedAt":"2019-07-31T15:41:00+00:00","UserScreenname":"dotnet","Text":"Learn how you can measure code coverage in your .NET Core projects using Coverlet.\n\nhttps://t.co/xkEUGtRScd #dotnetcore #testing","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":84,"FavoriteCount":28,"RawContent":null},{"Id":"1156333221136625664","CreatedAt":"2019-07-30T22:38:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":8,"FavoriteCount":3,"RawContent":null},{"Id":"1155911372049461248","CreatedAt":"2019-07-29T18:42:01+00:00","UserScreenname":"dotnet","Text":"The journey to a better game development experience starts here. Whether you’re new to game development or need a r… https://t.co/UjsTqoHRxc","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":46,"FavoriteCount":14,"RawContent":null},{"Id":"1154430362157821952","CreatedAt":"2019-07-25T16:37:01+00:00","UserScreenname":"dotnet","Text":"Game development can be fun we have the right tools to help you get off the ground quickly with a new, free learnin… https://t.co/AivXhRP7Sb","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":31,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2019-08-07T05:30:39.1034642Z","RunDurationInMilliseconds":16077}