{"Data":{"GitHub":{"Issues":[{"Id":"370375288","IsPullRequest":true,"CreatedAt":"2018-10-15T22:57:59","Actor":"eerhardt","Number":"1270","RawContent":null,"Title":"WIP: Introduce ReadOnlyVBuffer and use it all over.","State":"open","Body":"This is a prototype of one direction we could take VBuffer - introduce a ReadOnlyVBuffer for methods that are guaranteed not to modify the buffer. That way a caller can safely be assured that the buffer will not be mutated during the method.\r\n\r\nWorking towards #608.","Url":"https://github.com/dotnet/machinelearning/pull/1270","RelatedDescription":"Open PR \"WIP: Introduce ReadOnlyVBuffer and use it all over.\" (#1270)"},{"Id":"370374613","IsPullRequest":true,"CreatedAt":"2018-10-15T22:54:44","Actor":"singlis","Number":"1269","RawContent":null,"Title":"Replace DropColumns,KeepColumns and ChooseColumns with SelectColumns","State":"open","Body":"This adds the SelectColumns Transform and Estimator that is replacing\r\nthe DropColumns and ChooseColumns Transforms. With this check-in, Drop\r\nand Choose are still in the code base but will be removed. In order to\r\nsupport loading older models, SelectColumns supports loading in Drop and\r\nChoose transforms. The changes include:\r\n- Implementation of the SelectColumnsTransform,\r\nSelectColumnsDataTransform and SelectColumnsEstimator\r\n- Backward compatibility with Drop and Choose columns by providing\r\nfunctions on SelectColumns that will be called when loading the model.\r\n- Entry point apis for calling select from the command line.\r\n- Additional tests.\r\n\r\nThese changes are related to #754.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1269","RelatedDescription":"Open PR \"Replace DropColumns,KeepColumns and ChooseColumns with SelectColumns\" (#1269)"},{"Id":"370343842","IsPullRequest":false,"CreatedAt":"2018-10-15T21:06:14","Actor":"justinormont","Number":"1268","RawContent":null,"Title":"Micro-accuracy for Multiclass Classification tests","State":"open","Body":"Micro-accuracy is _generally_ better aligned with the business needs of ML predictions. If we are only choosing one metric to report for a multiclass classification task, it should be micro-accuracy. \r\n\r\nExample, for a support ticket classification task: _(maps incoming tickets to teams)_\r\n* Micro-accuracy -- how often does an incoming ticket get classified to the right team?\r\n* Macro-accuracy -- for an average team, how often is an incoming ticket correct for their team?\r\n\r\nMacro-accuracy overweights small teams in this example; a small team which gets only 10 tickets per year counts as much as a large team with 10k tickets per year. Micro-accuracy in this case correlates better with the business need of, \"how much time/money can the company save by automating my ticket routing process\". \r\n\r\nBelow we are reporting only macro-accuracy:\r\nhttps://github.com/dotnet/machinelearning/blob/23659b013eb2d0233cd92072f32a6daddfe613e3/test/Microsoft.ML.Benchmarks/StochasticDualCoordinateAscentClassifierBench.cs#L42-L43\r\n\r\nBenchmark output: ([src](https://github.com/dotnet/machinelearning/pull/1229#issuecomment-429892852))\r\n```\r\n              Method |         Mean |      Error |     StdDev |        Extra Metric |\r\n-------------------- |-------------:|-----------:|-----------:|--------------------:|\r\n         PredictIris |     1.650 ms |  0.0151 ms |  0.0141 ms | AccuracyMacro: 0.98 |\r\n PredictIrisBatchOf1 |     1.599 ms |  0.0362 ms |  0.0339 ms | AccuracyMacro: 0.98 |\r\n PredictIrisBatchOf2 |     1.646 ms |  0.0179 ms |  0.0167 ms | AccuracyMacro: 0.98 |\r\n PredictIrisBatchOf5 |     1.635 ms |  0.0192 ms |  0.0179 ms | AccuracyMacro: 0.98 |\r\n```\r\n\r\nFor this Iris dataset benchmark, the difference between macro/micro-accuracy are non-important, though it sets a bad precedent which will be replicated in further benchmarks.\r\n\r\nWork: \r\n* The [above test](https://github.com/dotnet/machinelearning/blob/23659b013eb2d0233cd92072f32a6daddfe613e3/test/Microsoft.ML.Benchmarks/StochasticDualCoordinateAscentClassifierBench.cs#L42-L43) should be changed to report micro-accuracy\r\n* See if other benchmarks are reporting macro-accuracy\r\n* (future) Report additional metrics instead of just one","Url":"https://github.com/dotnet/machinelearning/issues/1268","RelatedDescription":"Open issue \"Micro-accuracy for Multiclass Classification tests\" (#1268)"},{"Id":"369748577","IsPullRequest":false,"CreatedAt":"2018-10-15T19:49:40","Actor":"vaeksare","Number":"1250","RawContent":null,"Title":"Improve testing on ONNX exporting","State":"closed","Body":"Currently, tests for saving models as ONNX just check to make sure the ONNX models themselves are as expected by comparing them to a pre-saved version of that ONNX model. These tests do not actually check that these models are runnable or that they produce the same results as the original transform. With the new ONNXTransform, this testing framework could be improved to ensure correct exportability.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1250","RelatedDescription":"Closed issue \"Improve testing on ONNX exporting\" (#1250)"},{"Id":"370316590","IsPullRequest":false,"CreatedAt":"2018-10-15T19:48:31","Actor":"PraveenVerma17","Number":"1267","RawContent":null,"Title":"Schema mismatch for input column 'Structure': expected I4, got Key<U4, 0-1>","State":"open","Body":"### System information\r\n\r\n### Issue\r\nSchema mismatch for input column 'Structure': expected I4, got Key<U4, 0-1>\r\nParameter name: inputSchema\r\n\r\n### Source code / logs\r\n static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Machine Learning Code Started...\");\r\n\r\n            //Create a learning pipeline\r\n            var pipeline = new LearningPipeline();\r\n\r\n\r\n            //Load the data into the pipeline\r\n            string filepath = \"fruit_data.txt\";\r\n            pipeline.Add(new TextLoader(filepath).CreateFrom<FruitData>(useHeader: false, separator: ','));\r\n\r\n\r\n            //Transform the data\r\n            pipeline.Add(new Dictionarizer(\"Structure\"));\r\n            pipeline.Add(new Dictionarizer(\"Fruit\"));\r\n            Console.WriteLine(\"Transformation of data has been completed...\");\r\n\r\n\r\n            //Put all the data into vector\r\n            pipeline.Add(new ColumnConcatenator(\"Features\", \"Weight\", \"Structure\"));\r\n\r\n            //add the classifier \r\n            pipeline.Add(new FastTreeBinaryClassifier());\r\n\r\n            //Convert the label back to text\r\n\r\n\r\n            //Train the model\r\n            var model = pipeline.Train<FruitData, PredictedFruit>();\r\n\r\n            Console.WriteLine(\"Training of the model has been completed\");\r\n\r\n        }\r\n\r\nHere is the data i have:-\r\n\r\n140,pulpi, orange\r\n120,pulpi, orange\r\n130,hard, apple\r\n156,hard, apple\r\n131,pulpi, orange\r\n142,hard, apple\r\n95,hard, apple","Url":"https://github.com/dotnet/machinelearning/issues/1267","RelatedDescription":"Open issue \"Schema mismatch for input column 'Structure': expected I4, got Key<U4, 0-1>\" (#1267)"},{"Id":"370312760","IsPullRequest":true,"CreatedAt":"2018-10-15T19:37:07","Actor":"timitoc","Number":"1266","RawContent":null,"Title":"Added Documentation snippets for regressor trainers","State":"open","Body":"Added FastTreeRegression and LightGBM documentation samples to resolve #1256 \r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1266","RelatedDescription":"Open PR \"Added Documentation snippets for regressor trainers\" (#1266)"},{"Id":"370288900","IsPullRequest":true,"CreatedAt":"2018-10-15T19:11:22","Actor":"epicalyx","Number":"1264","RawContent":null,"Title":"Logistic regression for classification problems","State":"closed","Body":"Implementation for logistic regression which can be used for classification problems such as sentiment analysis.\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1264","RelatedDescription":"Closed or merged PR \"Logistic regression for classification problems\" (#1264)"},{"Id":"370291047","IsPullRequest":false,"CreatedAt":"2018-10-15T18:35:03","Actor":"eerhardt","Number":"1265","RawContent":null,"Title":"Add xml summary comments and argument validation to CpuMathUtils","State":"open","Body":"Our `CpuMathUtils` class is public with public methods, but we don't have any xml summary comments, and only use `asserts` for argument checking.\r\n\r\nSince these are public members, we should have xml doc comments and real argument checking.\r\n\r\nSee example:\r\nhttps://github.com/dotnet/machinelearning/blob/7e9e4687284786ae241b2e8c8457a02686e639e9/src/Microsoft.ML.CpuMath/CpuMathUtils.netcoreapp.cs#L198-L207\r\n\r\nAlso, see PR comment here: https://github.com/dotnet/machinelearning/pull/1229#discussion_r224550873","Url":"https://github.com/dotnet/machinelearning/issues/1265","RelatedDescription":"Open issue \"Add xml summary comments and argument validation to CpuMathUtils\" (#1265)"},{"Id":"370265407","IsPullRequest":true,"CreatedAt":"2018-10-15T17:28:40","Actor":"wschin","Number":"1263","RawContent":null,"Title":"[WIP] Making MF to a part of ML.NET","State":"open","Body":"This PR is mainly for porting an internal MF module to ML.NET. Related issue: #1262 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1263","RelatedDescription":"Open PR \"[WIP] Making MF to a part of ML.NET\" (#1263)"},{"Id":"370258070","IsPullRequest":false,"CreatedAt":"2018-10-15T17:08:06","Actor":"wschin","Number":"1262","RawContent":null,"Title":"Nice to have matrix factorization","State":"open","Body":"It'd be nice to have a matrix factorization, like [LibMF](https://www.csie.ntu.edu.tw/~cjlin/libmf/), for large-scale recommender systems.","Url":"https://github.com/dotnet/machinelearning/issues/1262","RelatedDescription":"Open issue \"Nice to have matrix factorization\" (#1262)"},{"Id":"370254966","IsPullRequest":true,"CreatedAt":"2018-10-15T16:59:35","Actor":"sfilipi","Number":"1261","RawContent":null,"Title":"updating with the info for mlnetmkldeps 0.0.0.7","State":"open","Body":"Recording the MKL functions used for the 0.0.0.7 package\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1261","RelatedDescription":"Open PR \"updating with the info for mlnetmkldeps 0.0.0.7\" (#1261)"},{"Id":"370248232","IsPullRequest":false,"CreatedAt":"2018-10-15T16:41:09","Actor":"sfilipi","Number":"1260","RawContent":null,"Title":"Fix the formatting of the XML documentation for the OnnxConverter","State":"open","Body":"All the information for the [ONNX Converter](https://github.com/dotnet/machinelearning/blob/160b0dfa8de334c8c6db3e0bf58653def0cea171/src/Microsoft.ML.Legacy/Models/OnnxConverter.cs) is placed inside the summary tag, which causes formatting issues like in [here](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.legacy.models.onnxconverter.convert?view=ml-dotnet#Microsoft_ML_Legacy_Models_OnnxConverter_Convert_Microsoft_ML_Legacy_PredictionModel_). \r\n\r\n\r\nRestructure the XML to have most of the content inside the <remarks> tag. Structure lists and paragraphs using [the dotnet XML tags](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments)","Url":"https://github.com/dotnet/machinelearning/issues/1260","RelatedDescription":"Open issue \"Fix the formatting of the XML documentation for the OnnxConverter\" (#1260)"},{"Id":"370237352","IsPullRequest":false,"CreatedAt":"2018-10-15T16:12:08","Actor":"xadupre","Number":"1259","RawContent":null,"Title":"OVA does not work if features column is not \"Features\"","State":"open","Body":"### System information\r\n\r\n- **Windows**: 10.0.17134\r\n- **.NET Version (eg., dotnet --info)**: 2.1.402\r\n\r\n### Issue\r\n\r\nOVA still looks for columns \"Features\" and cannot find it in the Following test. \r\n\r\n### Source code / logs\r\n\r\n        [Fact]\r\n        public void New_MetacomponentsFeaturesRenamed()\r\n        {\r\n            using (var env = new LocalEnvironment())\r\n            {\r\n                var data = new TextLoader(env, MakeIrisTextLoaderArgs())\r\n                    .Read(new MultiFileSource(GetDataPath(TestDatasets.irisData.trainFilename)));\r\n\r\n                var sdcaTrainer = new LinearClassificationTrainer(env, \"Vars\", \"Label\", advancedSettings: (s) => { s.MaxIterations = 100; s.Shuffle = true; s.NumThreads = 1; });\r\n                var pipeline = new ConcatEstimator(env, \"Vars\", \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\")\r\n                    .Append(new TermEstimator(env, \"Label\"), TransformerScope.TrainTest)\r\n                    .Append(new Ova(env, sdcaTrainer))\r\n                    .Append(new KeyToValueEstimator(env, \"PredictedLabel\"));\r\n\r\n                var model = pipeline.Fit(data);\r\n            }\r\n        }\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1259","RelatedDescription":"Open issue \"OVA does not work if features column is not \"Features\"\" (#1259)"},{"Id":"370018395","IsPullRequest":true,"CreatedAt":"2018-10-15T14:40:03","Actor":"rauhs","Number":"1258","RawContent":null,"Title":"Fix spelling","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/1258","RelatedDescription":"Closed or merged PR \"Fix spelling\" (#1258)"},{"Id":"370008862","IsPullRequest":false,"CreatedAt":"2018-10-15T05:54:08","Actor":"sfilipi","Number":"1257","RawContent":null,"Title":"Documentation samples for binary classifiers","State":"open","Body":"Similar to the sample code for [SDCA regression](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L19), we need samples for the binary classifiers:\r\n[SDCA](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/SdcaStatic.cs#L97)\r\n[AveragedPerceptron](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/Online/OnlineLearnerStatic.cs#L40)\r\n[FastTree](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.FastTree/FastTreeStatic.cs#L87)\r\n[LightGBM](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.LightGBM/LightGbmStatic.cs#L87)\r\n\r\nThere are two things to do, to resolve this issue:\r\n1. Add a sample for each of the trainers in [Microsoft.ML.Samples/Trainers.cs](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L1)\r\nThe samples can look similar to the [cookbook example](https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/Scenarios/Api/CookbookSamples/CookbookSamples.cs#L369)\r\nDownload the [adult dataset](https://raw.githubusercontent.com/dotnet/machinelearning/master/test/data/adult.train) for the data to use. \r\nTake a look at the  [SDCA example](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L19), for reference.\r\n\r\n2. Add a link to the xml documentation of [SDCA](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/SdcaStatic.cs#L97)\r\n[AveragedPerceptron](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/Online/OnlineLearnerStatic.cs#L40)\r\n[FastTree](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.FastTree/FastTreeStatic.cs#L87)\r\n[LightGBM](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.LightGBM/LightGbmStatic.cs#L87)\r\n to reference the new sample methods, like the one in [SDCA](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/SdcaStatic.cs#L38) has. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1257","RelatedDescription":"Open issue \"Documentation samples for binary classifiers\" (#1257)"},{"Id":"370004029","IsPullRequest":false,"CreatedAt":"2018-10-15T05:28:03","Actor":"sfilipi","Number":"1256","RawContent":null,"Title":"Documentation snippets for regressor trainers","State":"open","Body":"Similar to the sample code for [SDCA regression](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L19), we need samples for the other regressors:\r\n[FastTreeRegression](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.FastTree/FastTreeStatic.cs#L39)\r\n[LightGBM](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.LightGBM/LightGbmStatic.cs#L38)\r\n\r\nSo there are two things to do, to resolve this issue:\r\n1. Add a sample for LightGBM and FastTree in [Microsoft.ML.Samples/Trainers.cs](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L1)\r\nThe samples can look exactly as the [SDCA one](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L19), but substituting [the trainer](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Trainers.cs#L48) with FastTree or LightGBM. \r\n2. Add a documentaiton link to \r\n\r\n2. Add a link to the xml documentaiton of [FastTreeRegression](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.FastTree/FastTreeStatic.cs#L39)\r\n[LightGBM](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.LightGBM/LightGbmStatic.cs#L38) to reference the new sample methods, like the one [SDCA](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/SdcaStatic.cs#L38) has. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1256","RelatedDescription":"Open issue \"Documentation snippets for regressor trainers\" (#1256)"},{"Id":"369929710","IsPullRequest":false,"CreatedAt":"2018-10-14T18:29:15","Actor":"lefig","Number":"1255","RawContent":null,"Title":"Q: Feature Importance, new API","State":"open","Body":"Hi there,\r\n\r\nI have been looking forward to getting my hands on the new API and taking a look at using it to discover feature scores/importance used. Several requests were raised with this in mind and there is an implementation now. But I am struggling to find an example or test by way of illustration. Can someone please forward a link or any snippets. Thanks!\r\n\r\nBest regards\r\nFig\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1255","RelatedDescription":"Open issue \"Q: Feature Importance, new API\" (#1255)"},{"Id":"369852212","IsPullRequest":true,"CreatedAt":"2018-10-13T23:43:41","Actor":"ganik","Number":"1254","RawContent":null,"Title":"Estimators for Timeseries SSA / IID ChangepointDetection and SpikeDetection transforms","State":"open","Body":"* Created Estimators for SSAChangePointDetector, SSASpikeDetector,  IidChangePointDetector, IidSpikeDetector\r\n* Added unit tests ","Url":"https://github.com/dotnet/machinelearning/pull/1254","RelatedDescription":"Open PR \"Estimators for Timeseries SSA / IID ChangepointDetection and SpikeDetection transforms\" (#1254)"},{"Id":"369790713","IsPullRequest":true,"CreatedAt":"2018-10-13T10:48:36","Actor":"stunner2k18","Number":"1253","RawContent":null,"Title":"ml_hin.md","State":"open","Body":"Some basic point on machine learning translated in hindi..!!\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1253","RelatedDescription":"Open PR \"ml_hin.md\" (#1253)"},{"Id":"369755906","IsPullRequest":true,"CreatedAt":"2018-10-13T01:52:31","Actor":"Zruty0","Number":"1252","RawContent":null,"Title":"ML Context to create them all","State":"open","Body":"Fixes #1098 . \r\nAdds a couple extensions for transforms, and almost all trainers.\r\nAdds text loading and saving, model loading.","Url":"https://github.com/dotnet/machinelearning/pull/1252","RelatedDescription":"Open PR \"ML Context to create them all\" (#1252)"},{"Id":"369698942","IsPullRequest":true,"CreatedAt":"2018-10-13T01:25:44","Actor":"f1x3d","Number":"1243","RawContent":null,"Title":"Fix string normalization in tests","State":"closed","Body":"Since the `%Source%` path can be a substring of the `%Output%` path, we should replace the larger one first.\r\n\r\nFixes #810\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1243","RelatedDescription":"Closed or merged PR \"Fix string normalization in tests\" (#1243)"},{"Id":"369751433","IsPullRequest":false,"CreatedAt":"2018-10-13T00:56:11","Actor":"Zruty0","Number":"1251","RawContent":null,"Title":"Make Binary classification evaluator configurable","State":"open","Body":"The following method:\r\n```csharp\r\n        public BinaryClassifierEvaluator.CalibratedResult Evaluate(IDataView data, string label = DefaultColumnNames.Label, string score = DefaultColumnNames.Score,\r\n            string probability = DefaultColumnNames.Probability, string predictedLabel = DefaultColumnNames.PredictedLabel)\r\n```\r\nneeds to expose additional parameters from `BinaryClassifierEvaluator.Arguments`, or a delegate to set them.","Url":"https://github.com/dotnet/machinelearning/issues/1251","RelatedDescription":"Open issue \"Make Binary classification evaluator configurable\" (#1251)"},{"Id":"369744891","IsPullRequest":true,"CreatedAt":"2018-10-12T23:54:46","Actor":"vaeksare","Number":"1249","RawContent":null,"Title":"WIP: Export WordEmbeddingsTransform to ONNX","State":"open","Body":"Implements the ability to export the WordEmbeddingsTransform by converting it to an ONNX model, as well as expanding the functionality of some existing structures to allow for more efficient conversion implementation. The detailed conversion strategy can be found in comments inline. Fixes #1248 \r\n\r\nTesting was done through running the model on the same input using ML.NET and Lotus runtime directly using python bindings, producing the same results. Due to this testing strategy, no formal tests are currently checked in to ML.NET repo, but WIP is being done on improving the testing functionality for ONNX exporting using the ONNXTransform.\r\n\r\nThe resulting ONNX model looks as follows:\r\n![image](https://user-images.githubusercontent.com/42353187/46898532-2f805080-ce3f-11e8-96a5-ade1d8b768e9.png)\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1249","RelatedDescription":"Open PR \"WIP: Export WordEmbeddingsTransform to ONNX\" (#1249)"},{"Id":"369742927","IsPullRequest":false,"CreatedAt":"2018-10-12T23:40:13","Actor":"vaeksare","Number":"1248","RawContent":null,"Title":"Export WordEmbeddingsTransform to ONNX","State":"open","Body":"WordEmbeddingsTransform applies a series of simple matrix/tensor operations based on a pretrained model, as is therefore exportable to ONNX using a combination of existing ONNX ops.","Url":"https://github.com/dotnet/machinelearning/issues/1248","RelatedDescription":"Open issue \"Export WordEmbeddingsTransform to ONNX\" (#1248)"},{"Id":"369739043","IsPullRequest":false,"CreatedAt":"2018-10-12T23:13:53","Actor":"danmosemsft","Number":"1247","RawContent":null,"Title":"Remove unnecessary JIT SBCG workaround","State":"open","Body":"```c#\r\n        public static uint GetLo(ulong uu)\r\n        {\r\n            // REVIEW: Work around Dev10 Bug 884217: JIT64  -Silent bad codegen for accessing 4-byte parts of 8-byte locals\r\n            // http://vstfdevdiv:8080/WorkItemTracking/WorkItem.aspx?artifactMoniker=884217\r\n            // return (uint)uu;\r\n            return (uint)(uu & 0xFFFFFFFF);\r\n        }\r\n```\r\n\r\nI dug up this bug, it was fixed in a dev branch in 4/2010 and it looks like it reached 4.0 - certainly would be fixed in 4.5.0 which shipped in 8/2012. Although we don't explicitly state what .NET Framework versions we support, is probably reasonable for us to expect 4.5 or later and safe for us to remove this workaround.","Url":"https://github.com/dotnet/machinelearning/issues/1247","RelatedDescription":"Open issue \"Remove unnecessary JIT SBCG workaround\" (#1247)"},{"Id":"369735798","IsPullRequest":false,"CreatedAt":"2018-10-12T22:57:48","Actor":"Zruty0","Number":"1246","RawContent":null,"Title":"FastTreeRanking doesn't have non-advanced args","State":"open","Body":"Consider the following constructors:\r\n```csharp\r\n        public FastTreeBinaryClassificationTrainer(IHostEnvironment env,\r\n            string labelColumn,\r\n            string featureColumn,\r\n            string weightColumn = null,\r\n            int numLeaves = Defaults.NumLeaves,\r\n            int numTrees = Defaults.NumTrees,\r\n            int minDocumentsInLeafs = Defaults.MinDocumentsInLeafs,\r\n            double learningRate = Defaults.LearningRates,\r\n            Action<Arguments> advancedSettings = null)\r\n\r\n        public FastTreeRegressionTrainer(IHostEnvironment env,\r\n            string labelColumn,\r\n            string featureColumn,\r\n            string weightColumn = null,\r\n            int numLeaves = Defaults.NumLeaves,\r\n            int numTrees = Defaults.NumTrees,\r\n            int minDocumentsInLeafs = Defaults.MinDocumentsInLeafs,\r\n            double learningRate = Defaults.LearningRates,\r\n            Action<Arguments> advancedSettings = null)\r\n\r\n        public FastTreeRankingTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string groupIdColumn,\r\n            string weightColumn = null, Action<Arguments> advancedSettings = null)\r\n```\r\n\r\nThere is no reason to have disparity here: ranker should expose the same `numLeaves`, `numTrees` etc.\r\n\r\nThe only difference should be the presence of required `groupId` in the ranker constructor.","Url":"https://github.com/dotnet/machinelearning/issues/1246","RelatedDescription":"Open issue \"FastTreeRanking doesn't have non-advanced args\" (#1246)"},{"Id":"369720097","IsPullRequest":false,"CreatedAt":"2018-10-12T21:42:02","Actor":"Anipik","Number":"1245","RawContent":null,"Title":"Dead Add Flag in Matrix Multiplication","State":"open","Body":"we are not using the ```Add``` Flag in Matrix multiplication.\r\n\r\nShould we go ahead and remove it ?\r\n\r\n```public static void MatTimesSrc(bool tran, bool add, AlignedArray mat, AlignedArray src, AlignedArray dst, int crun)```\r\n\r\ncc @danmosemsft @eerhardt @tannergooding @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1245","RelatedDescription":"Open issue \"Dead Add Flag in Matrix Multiplication\" (#1245)"},{"Id":"369702794","IsPullRequest":false,"CreatedAt":"2018-10-12T20:40:36","Actor":"Ivanidzo4ka","Number":"1244","RawContent":null,"Title":"Add property to Environment class which would indicate can we use disk operations or not","State":"open","Body":"In some environments we can be limited by access to disk, so we need to perform all operations in memory. We already has code which specify should we use file system or not for loading/unloading model\r\nhttps://github.com/dotnet/machinelearning/blob/f8f3873958a0a8114df49bb6d8dc292dc071820b/src/Microsoft.ML.Data/Model/Repository.cs#L438\r\n\r\nor HybridMemoryStream should respect that parameter as well.\r\n\r\nAny temporary file creations need to respect this property and create memory streams instead.","Url":"https://github.com/dotnet/machinelearning/issues/1244","RelatedDescription":"Open issue \"Add property to Environment class which would indicate can we use disk operations or not\" (#1244)"},{"Id":"369684645","IsPullRequest":false,"CreatedAt":"2018-10-12T19:37:40","Actor":"Zruty0","Number":"1242","RawContent":null,"Title":"Debugger visualizer for DataView's","State":"open","Body":"1. Implement a custom data view debug visualizer.\r\n - It should have a column view and a row view\r\n - Column view will present values as `IEnumerable<object>`\r\n - Row view will present values as `Dictionary<string, object>\r\n\r\n2. Implement custom `ToString` for schema columns and for metadata.\r\n- For `Schema.Column` it should be something like `{ColumnName: ColumnType}`\r\n- For `Schema.Metadata` we would probably want to visualize that as `Dictionary<string, object>`\r\n\r\n3. Custom visualizers for `VBuffer`\r\n- Similar to the code in TLC GUI\r\n\r\n4. Custom visualizer for key values in a column view\r\n- For example, display as `KeyValue (Key)`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1242","RelatedDescription":"Open issue \"Debugger visualizer for DataView's\" (#1242)"},{"Id":"369672201","IsPullRequest":false,"CreatedAt":"2018-10-12T18:58:44","Actor":"danmosemsft","Number":"1241","RawContent":null,"Title":"Remove IndentingTextWriter in favor of the existing IndentedTextWriter ","State":"open","Body":"Remove ML.NET's IndentingTextWriter in favor of System.CodeDom.Compiler.IndentedTextWriter (a mainstream type in S.Runtime.Extensions.dll just in an oddly chosen namespace)\r\n\r\nThe main thing IndentedTextWriter doesn't have is the little IDisposable Scope helper that ML.NET uses in a decent number of places, that lets you write code like `using (writer.Nest()) { /* indented */ }` rather than explicitly indenting and outdenting before and after.  For now it could be left as an 8-line helper in ML.NET, but based on IndentedTextWriter instead of their IndentingTextWriter, and optionally open an API proposal in the CoreFX repo to add such a small feature.\r\n\r\nPer discussions w/ @stephentoub @Zruty0 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1241","RelatedDescription":"Open issue \"Remove IndentingTextWriter in favor of the existing IndentedTextWriter \" (#1241)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-16T05:30:34.8493219Z","RunDurationInMilliseconds":959}