{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null},{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in which the Framework throws an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9266559615","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:03:34","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Merged pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "},{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9436319630","Type":"PullRequestEvent","CreatedAt":"2019-04-13T05:21:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23961","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup to preview4-03913-01, preview5-27612-73, preview5.19212.14, preview5-27612-12, respectively (feature/utf8string)\" (#23961) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9436259925","Type":"PullRequestEvent","CreatedAt":"2019-04-13T04:42:35","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23936","RelatedDescription":"Merged pull request \"Nullable: src\\System\\Runtime\\InteropServices\" (#23936) at dotnet/coreclr","RelatedBody":""},{"Id":"9436131889","Type":"IssuesEvent","CreatedAt":"2019-04-13T03:22:16","Actor":"caozhiyuan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23960","RelatedDescription":"Opened issue \"[question] choosing between class and struct\" (#23960) at dotnet/coreclr","RelatedBody":"here has a docment write in 2008 :\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct\r\n\r\nit suggest ：\r\nX AVOID defining a struct unless the type has all of the following characteristics:\r\nIt logically represents a single value, similar to primitive types (int, double, etc.).\r\nIt has an instance size under 16 bytes.\r\nIt is immutable.\r\nIt will not have to be boxed frequently.\r\n\r\nnow . in net core ,instance size changed ? i seems remeber 40 bytes. \r\n\r\n@jkotas help , thanks.\r\n\r\n"},{"Id":"9436101688","Type":"PullRequestEvent","CreatedAt":"2019-04-13T03:04:30","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23959","RelatedDescription":"Opened pull request \"JIT: handle pinned pointers in inlinee\" (#23959) at dotnet/coreclr","RelatedBody":"We may see pins on locals that are not gc types. Handle this case.\r\n\r\nCloses #23950.\r\n\r\nAlso added a missing copyright header on an unrelated test."},{"Id":"9436012669","Type":"PullRequestEvent","CreatedAt":"2019-04-13T02:13:40","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23958","RelatedDescription":"Opened pull request \"WIP Add ComponentActivator\" (#23958) at dotnet/coreclr","RelatedBody":"Add ComponentActivator helper for loading\r\nand running components in isolated AssemblyLoadContexts\r\n\r\n/cc @jeffschwMSFT For 10% feedback... \r\n\r\nThis is an early draft helper for NativeHosting.\r\n\r\n* I was not sure what we wanted, so I basically exposed the Type.InvokeMethod on the loaded type.\r\n* I really do not have a full grasp on the scenario, so not sure what is needed and what is not needed.\r\n* I do not have marshalling experience, so do not know what is hard.\r\n* I included passing result objects back so the caller can do complicated things from `C++`.  It may be better to do more limited things and keep managed objects in C#. i.e. create a session and store results in a session dictionary in C# for reuse by later calls.\r\n* Maybe we don't need to support instance methods\r\n* Maybe we don't need to support an arg object array\r\n* Maybe we don't need the result"},{"Id":"9435966174","Type":"IssuesEvent","CreatedAt":"2019-04-13T01:47:27","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23756","RelatedDescription":"Closed issue \"Diagnostics IPC might not stream Events as fast as we want\" (#23756) at dotnet/coreclr","RelatedBody":"With https://github.com/dotnet/coreclr/pull/23448 we can now stream events out of proc in \"real time\" through IPC. However, because we currently don't touch buffers that are being written to when trying to write events through the IPC channel, when buffers aren't filling up as fast as the rate at which we poll these buffers to stream events out, we may run into situations where events get written to the IPC channels at a very very slow rate. \r\n\r\nThis is keeping non-verbose events like the runtime performance counters from being streamed over IPC near real-time. \r\n\r\nWe should instead do what EventListener is doing - get events out of the buffer before they fill up. \r\n\r\nNote that there is one more place we may need to change, which is the implementation of `EventPipeFile` where it has its own cache of `EventPipeBlock` that it tries to fill up before pushing things on the pipe. This wasn't an issue for EventListener because EventListener directly puts the payload into managed callback."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9435806354","Type":"PullRequestEvent","CreatedAt":"2019-04-13T00:26:15","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11143","RelatedDescription":"Merged pull request \"dotnet tool --local update\" (#11143) at dotnet/cli","RelatedBody":"**Please review by commit**\r\n\r\nthe follow 2 are large but they are refactorings to reduce the duplication:\r\nCreate applied option class 7d65d20\r\nExtract a class and a extension to minimize the dup from install and update 8ae38bd\r\n\r\nImpl dotnet tool update a438573 is the actual feature"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9435642371","Type":"IssuesEvent","CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141) at dotnet/standard","RelatedBody":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?"},{"Id":"9435589905","Type":"IssuesEvent","CreatedAt":"2019-04-12T23:08:22","Actor":"danny-may","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Opened issue \"Linq extensions for IAsyncEnumerable\" (#1141) at dotnet/standard","RelatedBody":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item % 2 == 1);\r\n```"},{"Id":"9432987504","Type":"IssuesEvent","CreatedAt":"2019-04-12T15:17:59","Actor":"hinteadan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140) at dotnet/standard","RelatedBody":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`"},{"Id":"9432957173","Type":"IssuesEvent","CreatedAt":"2019-04-12T15:14:00","Actor":"hinteadan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Opened issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140) at dotnet/standard","RelatedBody":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`"},{"Id":"9431629615","Type":"PullRequestEvent","CreatedAt":"2019-04-12T12:13:54","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1139) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n"},{"Id":"9431569332","Type":"PullRequestEvent","CreatedAt":"2019-04-12T12:03:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1139) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n"},{"Id":"9428686315","Type":"IssuesEvent","CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Opened issue \"Xml validate [ type is not declared ]\" (#1138) at dotnet/standard","RelatedBody":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```"},{"Id":"9423569421","Type":"PullRequestEvent","CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1137) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n"},{"Id":"9423504616","Type":"PullRequestEvent","CreatedAt":"2019-04-11T12:03:44","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1137) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9436267521","Type":"PullRequestEvent","CreatedAt":"2019-04-13T04:47:31","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36832","RelatedDescription":"Merged pull request \"Fix TypeInfoTests.GenericParameterConstraints() test\" (#36832) at dotnet/corefx","RelatedBody":"It was a Theory instead of a Fact and the method parameter wasn't being used.\r\n\r\nWe noticed this when running the test on Xamarin.Android (I assume because we use a different xunit runner?) which gave the following error:\r\n\r\n```\r\n Failed tests:\r\n 1)    Test name: System.Reflection.Tests.TypeInfoTests.GenericParameterConstraints\r\n    Assembly:  [monodroid_corlib_xunit-test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756]\r\n    Exception messages: System.InvalidOperationException : No data found for System.Reflection.Tests.TypeInfoTests.GenericParameterConstraints \r\n```"},{"Id":"9436266322","Type":"PullRequestEvent","CreatedAt":"2019-04-13T04:46:44","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36831","RelatedDescription":"Merged pull request \"overwrite -> overwriteFiles\" (#36831) at dotnet/corefx","RelatedBody":"Fixes #36804 \r\n\r\nI kept the name of the internal static method as-is but let me know if you'd like me to update this as well.\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFileExtensions.ZipArchiveEntry.Extract.cs#L90\r\n\r\n/cc @ahsonkhan @safern @carlossanlop "},{"Id":"9436266318","Type":"IssuesEvent","CreatedAt":"2019-04-13T04:46:44","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36804","RelatedDescription":"Closed issue \"Ref and src folders have mismatched param names\" (#36804) at dotnet/corefx","RelatedBody":"@carlossanlop and I are looking into adding more API docs and we ran into an issue where the source has a parameter name that is different than what we're seeing in the reference assemblies.\r\n\r\nI'm guessing it's because of the mismatch we're seeing between the src and ref folders?\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs#L16\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.Extract.cs#L78\r\n\r\n**ref** calls it _overwriteFiles_, **src** calls it _overwrite_.\r\n\r\n/cc @terrajobst @karelz "},{"Id":"9436266039","Type":"PullRequestEvent","CreatedAt":"2019-04-13T04:46:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36837","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#36837) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9436264477","Type":"PullRequestEvent","CreatedAt":"2019-04-13T04:45:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36830","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#36830) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @grant-d @stephentoub"},{"Id":"9436263891","Type":"PullRequestEvent","CreatedAt":"2019-04-13T04:45:12","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36808","RelatedDescription":"Merged pull request \"Port ErrObject and CreateProjectError\" (#36808) at dotnet/corefx","RelatedBody":"Port `ErrObject` and `CreateProjectError` from reference source."},{"Id":"9436218108","Type":"IssuesEvent","CreatedAt":"2019-04-13T04:15:07","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36688","RelatedDescription":"Closed issue \"Test failure: System.Net.WebSockets.Client.Tests.AbortTest/Abort_CloseAndAbort_Success(server: ws://corefx-net-http11.azurewebsites.net/WebSocket/EchoWebSocket.ashx)\" (#36688) at dotnet/corefx","RelatedBody":"Opened on behalf of @AriNuer\n\nThe test `System.Net.WebSockets.Client.Tests.AbortTest/Abort_CloseAndAbort_Success(server: ws://corefx-net-http11.azurewebsites.net/WebSocket/EchoWebSocket.ashx)` has failed.\n\nFailure Message:\n```\nState immediately after ConnectAsync incorrect: Closed\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.<>c__DisplayClass4_0.<<GetConnectedWebSocket>b__0>d.MoveNext() in F:\\workspace\\_work\\1\\s\\src\\System.Net.WebSockets.Client\\tests\\WebSocketHelper.cs:line 86\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.Retry[T](ITestOutputHelper output, Func`1 func)\n   at System.Net.WebSockets.Client.Tests.ClientWebSocketTestBase.TestCancellation(Func`2 action, Uri server) in F:\\workspace\\_work\\1\\s\\src\\System.Net.WebSockets.Client\\tests\\ClientWebSocketTestBase.cs:line 66\n   at System.Net.WebSockets.Client.Tests.AbortTest.Abort_CloseAndAbort_Success(Uri server) in F:\\workspace\\_work\\1\\s\\src\\System.Net.WebSockets.Client\\tests\\AbortTest.cs:line 92\n--- End of stack trace from previous location where exception was thrown ---\n```\n\nBuild : 3.0 - 20190407.7 (UWP F5 Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS5-x86\n  - Release\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fuwp~2F/build/20190407.7/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.AbortTest~2FAbort_CloseAndAbort_Success(server:%20ws:~2F~2Fcorefx-net-http11.azurewebsites.net~2FWebSocket~2FEchoWebSocket.ashx)"},{"Id":"9436130521","Type":"IssuesEvent","CreatedAt":"2019-04-13T03:21:23","Actor":"chuanjiao10","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36836","RelatedDescription":"Opened issue \".net core should return 24hours datetime by format string \"H\",instead of format string \"h\"\" (#36836) at dotnet/corefx","RelatedBody":".net framework on win return 24 hours datetime by format string \"H\",\r\nBut .net core 2.2 on win,linux return 12 hours datetime by format string \"h\",\r\nThis will affect the time that powershell displays in getchilditem on win, linux.\r\n\r\nam,pm,上午,下午.\r\nIn the Chinese get-childitem return, the columns cannot be aligned.\r\n\r\nI have reported issues to powershell on github, https://github.com/PowerShell/PowerShell/issues/8099\r\nBut this seems to be a problem with the .net core.\r\n\r\nnote:\r\nls retrun 24 hours datetime on linux. \r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```c#\r\nusing System;\r\nusing System.Globalization;\r\n\r\nnamespace DotnetCoreTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            DateTime now = DateTime.Now;\r\n\t\t\tCultureInfo enus = new CultureInfo(\"en-us\");\r\n\t\t\tCultureInfo zhhans = new CultureInfo(\"zh-hans\");\r\n\t\t\tConsole.WriteLine(enus.DateTimeFormat.ShortTimePattern);\r\n\t\t\tConsole.WriteLine(enus.DateTimeFormat.LongDatePattern);\r\n\t\t\tConsole.WriteLine(now.ToString(enus.DateTimeFormat));\r\n\r\n\t\t\tConsole.WriteLine(\"--------\");\r\n\r\n\t\t\tConsole.WriteLine(zhhans.DateTimeFormat.ShortTimePattern);\r\n\t\t\tConsole.WriteLine(zhhans.DateTimeFormat.LongDatePattern);\r\n\t\t\tConsole.WriteLine(now.ToString(zhhans.DateTimeFormat));\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nreturn:\r\n![9318](https://user-images.githubusercontent.com/8968667/56074032-3c760080-5dde-11e9-8398-f3213f001710.png)\r\n\r\n\r\n\r\n\r\n```powershell\r\n\r\n$日期对象 = Get-Date\r\n$日期格式 = New-Object System.Globalization.CultureInfo \"en-us\"\r\n$日期格式.DateTimeFormat.ShortTimePattern\r\n$日期格式.DateTimeFormat.LongDatePattern\r\n$日期对象.ToString($日期格式)\r\n\r\nwrite-host '-------------'\r\n$中文日期格式 = New-Object System.Globalization.CultureInfo \"zh-cn\"\r\n$中文日期格式.DateTimeFormat.ShortTimePattern\r\n$中文日期格式.DateTimeFormat.LongDatePattern\r\n$日期对象.ToString($中文日期格式)\r\n\r\n\r\n```\r\nlinux return:\r\n\r\nh:mm tt\r\ndddd, MMMM d, yyyy\r\n4/13/2019 10:36:58 AM\r\n-------------\r\ntth:mm\r\nyyyy年M月d日dddd\r\n19-4-13 上午10:46:27\r\n\r\n\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n.net core 2.2\r\npowershell 6.2.0 on centos 7.6\r\n\r\n\r\n\r\nreporter\r\n----------------\r\nBy the chinese powershell study & research group. QQ group No. is 183173532\r\n\r\n"},{"Id":"9436104071","Type":"IssuesEvent","CreatedAt":"2019-04-13T03:05:52","Actor":"VBAndCs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36835","RelatedDescription":"Opened issue \"String.Replace overload to do multiple replacements with an array of tuples\" (#36835) at dotnet/corefx","RelatedBody":"I wrote this code:\r\n```VB.NET\r\nReturn xml.ToString(SaveOptions.DisableFormatting).\r\n            Replace(\"<zml>\", \"\").Replace(\"</zml>\", \"\").\r\n            Replace(\"__ltn__\", \"<\").Replace(\"__gtn__\", \">\").\r\n            Replace(\"__amp__\", \"&\")\r\n```\r\n\r\nUsing successive replacements creates many visions of the string, which is less efficient, so I wrote it using tuples like this:\r\n```VB.NET\r\nReturn xml.ToString(SaveOptions.DisableFormatting).\r\n            Replace(\r\n                     (\"<zml>\", \"\"), (\"</zml>\", \"\"),\r\n                     (\"__ltn__\", \"<\"), (\"__gtn__\", \">\"),\r\n                     (\"__amp__\", \"&\")\r\n                   )\r\n```\r\n\r\nWhich is more compact and more efficient. It can be implemented with this extension method:\r\n```VB.NET\r\n<Extension>\r\nFunction Replace(s As String, ParamArray repPairs() As (repStr As String, repWithStr As String))\r\n        Dim sb As New Text.StringBuilder(s)\r\n        For Each x In repPairs\r\n            sb.Replace(x.repStr, x.repWithStr)\r\n        Next\r\n        Return sb.ToString()\r\nEnd Function\r\n```\r\n\r\nI suggest to add this Replace overload to the string class. \r\n"},{"Id":"9435960767","Type":"PullRequestEvent","CreatedAt":"2019-04-13T01:44:19","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36756","RelatedDescription":"Merged pull request \"Add support for generic interface-based collections in JsonSerializer\" (#36756) at dotnet/corefx","RelatedBody":"Specifically, add enumerable converters for:\r\n\r\n* IEnumerable<T>\r\n* ICollection<T>\r\n* IList<T>\r\n* IReadOnlyCollection<T>\r\n* IReadOnlyList<T>\r\n\r\nThis partially addresses https://github.com/dotnet/corefx/issues/36643."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9435934417","Type":"PullRequestEvent","CreatedAt":"2019-04-13T01:30:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34972","RelatedDescription":"Merged pull request \"Merge master-vs-deps to features/razorSupport2\" (#34972) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9435830044","Type":"PullRequestEvent","CreatedAt":"2019-04-13T00:36:51","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34974","RelatedDescription":"Opened pull request \"Ignore completion item span\" (#34974) at dotnet/roslyn","RelatedBody":"Followup to https://github.com/dotnet/roslyn/pull/34952\r\n\r\nThis is currently mutable, which makes sharing completion items hard.  Now, instead, we just track the completion span we are told on the completion context and pass that along at the end when making changes. That helps ensure completion items can be safely shared across invocations."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9435391724","Type":"PullRequestEvent","CreatedAt":"2019-04-12T22:14:13","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7282","RelatedDescription":"Merged pull request \"Improving PE section management in CPAOT\" (#7282) at dotnet/corert","RelatedBody":"The ability to use SuperIlc to ILC the entire Pri#1 test suite\r\nlet me quickly identify several remaining CPAOT compilation\r\nissues. This change should be fixing the biggest bucket of 8\r\nfailing compilations.\r\n\r\nAs in contrast to Crossgen we don't copy the input MSIL\r\nselectively to the output R2R PE image (which may change soon\r\nwith Simon's latest changes), in case of RVA fields we just\r\nstore the section name in which the field content resides\r\nand, when serializing the sections to the output PE, we\r\nresolve the appropriate SectionStartNode's in the symbol map\r\nfor the relocation pass.\r\n\r\nAs the R2R PE emitter is basically the oldest part of the CPAOT\r\ncompiler, I was naturally making various arbitrary choices during\r\nits initial implementation and because of this the section\r\nmanagement logic ended up somewhat randomly scattered among\r\nReadyToRunObjectWriter, SectionBuilder and R2RPEBuilder.\r\n\r\nThe SectionBuilder only knew about the sections emitted by\r\nthe CPAOT compiler itself, not about the incoming sections from\r\nthe input MSIL; those got only combined with the SectionBuilder\r\nsections in R2RPEBuilder constructor.\r\n\r\nDue to this fact the section serialization code in SectionBuilder\r\ndidn't know about the MSIL section holding the RVA field (as it\r\nwasn't one of the sections produced by the CPAOT compiler) and\r\nso it didn't resolve its start node in the symbol map.\r\n\r\nTo fix this, I have centralized the logic for building the list\r\nof output sections in SectionBuilderExtensions.PrepareSections\r\nwhere we compose the complete section list upfront and set it\r\nto SectionBuilder. R2RPEBuilder constructor can be much simpler\r\nas it can reuse the SectionBuilder section map and the section\r\nstart nodes get properly resolved even for the MSIL input\r\nsections.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I tried to explain the logic in maximum detail because\r\naccording to our yesterday meeting Simon is investigating / making\r\nchanges in this area as part of removing the previously produced\r\nR2R code when CPAOT-compiling an already R2R-compiled PE executable\r\nand RVA field management is exactly the area that will break and\r\nwill need fixing if he decides to switch over to selective copying\r\nof the input executable to the R2R output file as opposed to blindly\r\ncopying all the pre-existing sections as we do today."},{"Id":"9435265231","Type":"PullRequestEvent","CreatedAt":"2019-04-12T21:45:23","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7290","RelatedDescription":"Opened pull request \"[WIP] Update CoreCLR test scripting\" (#7290) at dotnet/corert","RelatedBody":"The scripts to support running downloaded CoreCLR tests are from 2017\r\nand have received some compelling updates since then:\r\n\r\n- No longer depend on desktop Xunit runner (`xunit.runner.msbuild`) and\r\ninstead uses `xunit.console`. This should unblock\r\nhttps://github.com/dotnet/corert/issues/7032.\r\n- Cross platform Python script to drive test execution which lets us\r\nremove a bunch of the scripting we brought over last time.\r\n\r\nThe process here was similar to last time - drop runtest.py into this\r\nrepo and then bring over enough scripts to make it run the test tree.\r\nAlternatively, we could have re-written this scripting to clone CoreCLR,\r\nbuild the product and tests, and run them with a custom launcher that\r\nfirst runs CPAOT / ILC. This takes about 25 minutes for the Pri0 tests\r\nand would slow our CI down significantly. The Pri0 test binaries are\r\nstored in an Azure blob which downloads and extracts in 1 minute at a\r\nperiodic cost of updating these scripts (currently a 2 year period).\r\n\r\nThe Windows test binaries are supported with this commit. Unix support\r\nwill be added once the CI looks good for Windows.\r\n\r\nNB: The wrappers are extremely slow to generate (5 minutes on my machine) and run each time we run CoreCLR tests. If we change test exclusion file they need generating, otherwise we can re-use if it's the same test subset. An optimization here would improve quality of life."},{"Id":"9434297345","Type":"PullRequestEvent","CreatedAt":"2019-04-12T18:46:53","Actor":"krwq","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7289","RelatedDescription":"Opened pull request \"Remove duplicate GetCurrentThreadId\" (#7289) at dotnet/corert","RelatedBody":"Found as part of https://github.com/dotnet/coreclr/pull/23914\r\ncc: @stephentoub "},{"Id":"9433816759","Type":"PullRequestEvent","CreatedAt":"2019-04-12T17:26:12","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7288","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7288) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9433772644","Type":"PullRequestEvent","CreatedAt":"2019-04-12T17:18:41","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7287","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7287) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub @sdmaclea @GrabYourPitchforks"},{"Id":"9433576059","Type":"PullRequestEvent","CreatedAt":"2019-04-12T16:45:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7287","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7287) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"9431629701","Type":"PullRequestEvent","CreatedAt":"2019-04-12T12:13:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7286","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#7286) at dotnet/corert","RelatedBody":""},{"Id":"9431627772","Type":"PullRequestEvent","CreatedAt":"2019-04-12T12:13:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7286","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#7286) at dotnet/corert","RelatedBody":""},{"Id":"9430095954","Type":"IssuesEvent","CreatedAt":"2019-04-12T08:10:11","Actor":"RehanSaeed","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7285","RelatedDescription":"Opened issue \"Techniques for Reducing Size of .NET Native Binaries\" (#7285) at dotnet/corert","RelatedBody":"I'm working on a UWP app being built with .NET native. Reducing the app size is very important. Are there any techniques, guidance or documentation available to help reduce the app size? Are there ways we can help the .NET native tree shaking algorithm be more effective? \r\n\r\nSome of the simple techniques I can think of are pretty basic:\r\n\r\n1. Code reuse.\r\n2. Avoid `await` as this generates a lot of state machine code e.g. Adding six awaits increased the size of my app by 20KB.\r\n3. Compress static assets like images etc."},{"Id":"9429280791","Type":"PullRequestEvent","CreatedAt":"2019-04-12T05:19:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7284","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7284) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern"},{"Id":"9427073144","Type":"PullRequestEvent","CreatedAt":"2019-04-11T20:12:32","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7283","RelatedDescription":"Merged pull request \"Minor SuperIlc fixes / improvements found while using the tool\" (#7283) at dotnet/corert","RelatedBody":"One non-trivial revelation I made is that my previous introduction\r\nof Outcome was inconsistent w.r.t. the summary table as there is\r\ngenerally a different number of compilations and executions.\r\nI have fixed this by splitting the summary table in two for\r\ncompilations and executions.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9426345827","Type":"PullRequestEvent","CreatedAt":"2019-04-11T18:18:01","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7284","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7284) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9435741101","Type":"PullRequestEvent","CreatedAt":"2019-04-13T00:00:42","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3112","RelatedDescription":"Merged pull request \"Escape output item specs for ResolvePackageAssets task.\" (#3112) at dotnet/sdk","RelatedBody":"This commit fixes the ResolvePackageAssets task to escape the output\r\nitem specs.  This allows assets in packages to contain characters that\r\nmight get unescaped by MSBuild.\r\n\r\nFixes #3069."},{"Id":"9435741091","Type":"IssuesEvent","CreatedAt":"2019-04-13T00:00:42","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3069","RelatedDescription":"Closed issue \"ProduceContentAssets should not \"url decode\" paths provided by NuGet\" (#3069) at dotnet/sdk","RelatedBody":"Create the following project and run `dotnet build`.\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ContentFilesExample\" Version=\"*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nMake sure that nuget.org is among the sources. \r\n\r\n```\r\n dotnet build\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 530.45 ms for C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: The \"ProduceContentAssets\" task failed unexpectedly. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\globalPackagesFolder\\contentfilesexample\\1.0.2\\contentFiles\\cs\\portable-net45+wpa81+wp8+win8\\ExampleReader.cs.pp'. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.File.OpenRead(String path) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.NugetContentAssetPreprocessor.Process(String originalAssetPath, String relativeOutputPath, String& pathToFinalAsset) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ProduceContentAsset(ITaskItem contentFile) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ExecuteCore() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: The \"ProduceContentAssets\" task failed unexpectedly. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\globalPackagesFolder\\contentfilesexample\\1.0.2\\contentFiles\\cs\\portable-net45+wpa81+wp8+win8\\ExampleReader.cs.pp'. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.File.OpenRead(String path) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.NugetContentAssetPreprocessor.Process(String originalAssetPath, String relativeOutputPath, String& pathToFinalAsset) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ProduceContentAsset(ITaskItem contentFile) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ExecuteCore() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.67\r\n```\r\n\r\nThe issue here is that the selected framework for the contentfiles is a PCL framework and `+` in the name, encoded as `%2B`. \r\n\r\nNuGet extracts the encoded name, and writes that to the assets file, g.props as needed.\r\n\r\nPaths that the targets read from NuGet should be treated as strings and not decoded in any way. \r\n"},{"Id":"9435709963","Type":"PullRequestEvent","CreatedAt":"2019-04-12T23:48:58","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3114","RelatedDescription":"Closed pull request \"[WIP] running perf tests and upload to benchview in Azure DevOps\" (#3114) at dotnet/sdk","RelatedBody":"First draft: running perf tests and upload to benchview in Azure DevOps"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"432809448","IsPullRequest":true,"CreatedAt":"2019-04-13T05:21:24","Actor":"dotnet-maestro-bot","Number":"23961","RawContent":null,"Title":"Update BuildTools, CoreClr, CoreFx, CoreSetup to preview4-03913-01, preview5-27612-73, preview5.19212.14, preview5-27612-12, respectively (feature/utf8string)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/23961","RelatedDescription":"Open PR \"Update BuildTools, CoreClr, CoreFx, CoreSetup to preview4-03913-01, preview5-27612-73, preview5.19212.14, preview5-27612-12, respectively (feature/utf8string)\" (#23961)"},{"Id":"432684253","IsPullRequest":true,"CreatedAt":"2019-04-13T04:42:34","Actor":"stephentoub","Number":"23936","RawContent":null,"Title":"Nullable: src\\System\\Runtime\\InteropServices","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23936","RelatedDescription":"Closed or merged PR \"Nullable: src\\System\\Runtime\\InteropServices\" (#23936)"},{"Id":"432801922","IsPullRequest":false,"CreatedAt":"2019-04-13T03:22:15","Actor":"caozhiyuan","Number":"23960","RawContent":null,"Title":"[question] choosing between class and struct","State":"open","Body":"here has a docment write in 2008 :\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct\r\n\r\nit suggest ：\r\nX AVOID defining a struct unless the type has all of the following characteristics:\r\nIt logically represents a single value, similar to primitive types (int, double, etc.).\r\nIt has an instance size under 16 bytes.\r\nIt is immutable.\r\nIt will not have to be boxed frequently.\r\n\r\nnow . in net core ,instance size changed ? i seems remeber under 40 bytes. \r\n\r\n@jkotas help , thanks.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/23960","RelatedDescription":"Open issue \"[question] choosing between class and struct\" (#23960)"},{"Id":"432800684","IsPullRequest":true,"CreatedAt":"2019-04-13T03:04:29","Actor":"AndyAyersMS","Number":"23959","RawContent":null,"Title":"JIT: handle pinned pointers in inlinee","State":"open","Body":"We may see pins on locals that are not gc types. Handle this case.\r\n\r\nCloses #23950.\r\n\r\nAlso added a missing copyright header on an unrelated test.","Url":"https://github.com/dotnet/coreclr/pull/23959","RelatedDescription":"Open PR \"JIT: handle pinned pointers in inlinee\" (#23959)"},{"Id":"432797046","IsPullRequest":true,"CreatedAt":"2019-04-13T02:13:39","Actor":"sdmaclea","Number":"23958","RawContent":null,"Title":"WIP Add ComponentActivator","State":"open","Body":"Add ComponentActivator helper for loading\r\nand running components in isolated AssemblyLoadContexts\r\n\r\n/cc @jeffschwMSFT For 10% feedback... \r\n\r\nThis is an early draft helper for NativeHosting.\r\n\r\n* I was not sure what we wanted, so I basically exposed the Type.InvokeMethod on the loaded type.\r\n* I really do not have a full grasp on the scenario, so not sure what is needed and what is not needed.\r\n* I do not have marshalling experience, so do not know what is hard.\r\n* I included passing result objects back so the caller can do complicated things from `C++`.  It may be better to do more limited things and keep managed objects in C#. i.e. create a session and store results in a session dictionary in C# for reuse by later calls.\r\n* Maybe we don't need to support instance methods\r\n* Maybe we don't need to support an arg object array\r\n* Maybe we don't need the result\r\n* Made an arbitrary decision that the native strings are in UTF8.","Url":"https://github.com/dotnet/coreclr/pull/23958","RelatedDescription":"Open PR \"WIP Add ComponentActivator\" (#23958)"},{"Id":"432699991","IsPullRequest":true,"CreatedAt":"2019-04-13T01:09:42","Actor":"echesakovMSFT","Number":"23942","RawContent":null,"Title":"Exclude ResolveEventTests.cmd and CallbackTests.cmd on Windows_NT x86","State":"closed","Body":"Related issue: https://github.com/dotnet/coreclr/issues/23941","Url":"https://github.com/dotnet/coreclr/pull/23942","RelatedDescription":"Closed or merged PR \"Exclude ResolveEventTests.cmd and CallbackTests.cmd on Windows_NT x86\" (#23942)"},{"Id":"432677918","IsPullRequest":true,"CreatedAt":"2019-04-13T01:04:42","Actor":"BruceForstall","Number":"23935","RawContent":null,"Title":"Fix arm64 localloc with large outgoing argument space","State":"closed","Body":"With a large outgoing argument space, we were attempting to\r\ngenerate un-encodable ADD and SUB instructions. Call an existing\r\nhelper instead that uses the reserved register when needed to\r\nload large constants into a register.","Url":"https://github.com/dotnet/coreclr/pull/23935","RelatedDescription":"Closed or merged PR \"Fix arm64 localloc with large outgoing argument space\" (#23935)"},{"Id":"432790566","IsPullRequest":true,"CreatedAt":"2019-04-13T00:54:23","Actor":"echesakovMSFT","Number":"23957","RawContent":null,"Title":"Use xUnit TestOutputHelper to get proper test output in Azure DevOps Tests Explorer","State":"open","Body":"In addition to this format\r\n![image](https://user-images.githubusercontent.com/5292656/56073063-60d8cb00-5d53-11e9-85a1-4e12ad458065.png)\r\n\r\nhave \r\n\r\n![image](https://user-images.githubusercontent.com/5292656/56073067-7817b880-5d53-11e9-9828-7ae8605dd30c.png)\r\n\r\nThe reason why I am keeping both formats is that I want to have the output still being reported to Kusto (that as far as I know can be done only by using Assert.True() argument).","Url":"https://github.com/dotnet/coreclr/pull/23957","RelatedDescription":"Open PR \"Use xUnit TestOutputHelper to get proper test output in Azure DevOps Tests Explorer\" (#23957)"},{"Id":"432790078","IsPullRequest":true,"CreatedAt":"2019-04-13T00:49:16","Actor":"jorive","Number":"23956","RawContent":null,"Title":"[EventPipe] Minor bug fixes, and remove redundant/unused code.","State":"open","Body":"These changes are based on the tests I've been doing, and it matches the latest changes on `dotnet-trace` (remove enable tracing to file, and disconnect now return a value).","Url":"https://github.com/dotnet/coreclr/pull/23956","RelatedDescription":"Open PR \"[EventPipe] Minor bug fixes, and remove redundant/unused code.\" (#23956)"},{"Id":"432788680","IsPullRequest":true,"CreatedAt":"2019-04-13T00:36:02","Actor":"jkoritzinsky","Number":"23955","RawContent":null,"Title":"Workaround users having strongly typed HRESULTs on instance methods such as PreserveSig'd COM members","State":"open","Body":"Some of our users (such as WPF), use a struct to wrap their HRESULT return types on COM members when they use `PreserveSig`. When we updated CoreCLR to correctly handle the Windows calling convention, we broke this behavior.\r\n\r\nThis PR adds a workaround to marshal structs that have only one member that is a (struct that has only one member of a...) primitive type as though it was the primitive type.\r\n\r\nAdd tests verifying behavior.\r\n\r\ncc: @jeffschwMSFT @davidwrighton","Url":"https://github.com/dotnet/coreclr/pull/23955","RelatedDescription":"Open PR \"Workaround users having strongly typed HRESULTs on instance methods such as PreserveSig'd COM members\" (#23955)"},{"Id":"432786029","IsPullRequest":false,"CreatedAt":"2019-04-13T00:13:04","Actor":"gregg-miskelly","Number":"23954","RawContent":null,"Title":"Provide Catch Handler Found notifications for async exceptions re-caught in library code","State":"open","Body":"## Summary\r\n\r\nThis work item is needed to allow the VS debugger to break when a user's `async Task` method throws an exception back to framework code. This is very common in ASP.NET.\r\n\r\nThis is part of the larger theme of improving the async experience tracked with https://github.com/dotnet/diagnostics/issues/90.\r\n\r\n## Details\r\n\r\nToday, if a debugger has disabled catch handler found notifications in library code via `ICorDebugProcess8.EnableExceptionCallbacksOutsideOfMyCode(false)`, there is no way to obtain a catch handler found notification for a particular exception object. For non-async code, this is fine. But with `async Task` methods, the user's `async Task` method will always catch the exception and return the exception to library code through the Task's `Exception` property. So the debugger needs the ability to selectively re-enable CatchHandlerFound notifications if the specific exception object being caught is one that traveled through user code.\r\n\r\nThe VS debugger team's tentative preference would be to add a something like:\r\n\r\n```\r\ninterface ICorDebugExceptionObjectValue2 : IUnknown\r\n{\r\n    HRESULT ForceCatchHandlerFoundEvents([in] BOOL enableEvents);\r\n};\r\n```\r\n\r\nAlternatively, the runtime could also decide on its own that the exception traveled through user code. But I think it might be better to put the debugger in charge so that the debugger can restrict the notification down to the one case that it cares about (`async Task` method exceptions).","Url":"https://github.com/dotnet/coreclr/issues/23954","RelatedDescription":"Open issue \"Provide Catch Handler Found notifications for async exceptions re-caught in library code\" (#23954)"},{"Id":"432785595","IsPullRequest":true,"CreatedAt":"2019-04-13T00:10:03","Actor":"sdmaclea","Number":"23953","RawContent":null,"Title":"EnterContextualReflection handle null","State":"open","Body":"Fixes #23952 \r\n\r\n/cc @safern @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/23953","RelatedDescription":"Open PR \"EnterContextualReflection handle null\" (#23953)"},{"Id":"432660964","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:35","Actor":"buyaa-n","Number":"23933","RawContent":null,"Title":"Nullable: Enums, Structures from Reflection folder","State":"closed","Body":"Easy code review @dotnet/nullablefc ","Url":"https://github.com/dotnet/coreclr/pull/23933","RelatedDescription":"Closed or merged PR \"Nullable: Enums, Structures from Reflection folder\" (#23933)"},{"Id":"432711465","IsPullRequest":true,"CreatedAt":"2019-04-12T23:33:55","Actor":"echesakovMSFT","Number":"23945","RawContent":null,"Title":"Add R2R prefix to TestRunNamePrefix when running ReadyToRun jobs","State":"closed","Body":"To make R2R and non-R2R tests distinguishable in Azure DevOps Tests Explorer ","Url":"https://github.com/dotnet/coreclr/pull/23945","RelatedDescription":"Closed or merged PR \"Add R2R prefix to TestRunNamePrefix when running ReadyToRun jobs\" (#23945)"},{"Id":"432776889","IsPullRequest":false,"CreatedAt":"2019-04-12T23:13:08","Actor":"safern","Number":"23952","RawContent":null,"Title":"AssemblyLoadContext.EnterContextualReflection could produce a null reference exception","State":"open","Body":"During nullable annotations I noticed that when calling `AssemblyLoadContext.EnterContextualReflection(Assembly)` with an implementation of `Assembly` that it's base type is not `RuntimeAssembly` it would produce a null reference exception. \r\n\r\nWe call `GetLoadContext` which will return null if the `Assembly` is not a `RuntimeAssembly` -- then we try to dereference it without checking for null.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/Loader/AssemblyLoadContext.CoreCLR.cs#L257\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Runtime/Loader/AssemblyLoadContext.cs#L513\r\n\r\ncc: @stephentoub @jkotas @sdmaclea ","Url":"https://github.com/dotnet/coreclr/issues/23952","RelatedDescription":"Open issue \"AssemblyLoadContext.EnterContextualReflection could produce a null reference exception\" (#23952)"},{"Id":"432770914","IsPullRequest":false,"CreatedAt":"2019-04-12T22:43:13","Actor":"luhenry","Number":"23951","RawContent":null,"Title":"Loss of `CGroup::GetCpuLimit` in GC","State":"open","Body":"With https://github.com/dotnet/coreclr/pull/23537, we removed the capability to rely on the various `--cpus*` options passed to Docker (https://github.com/dotnet/coreclr/pull/23537/files#diff-884426ee59a5c24ed71672ecde49b06cL556).\r\n\r\nThis impacts our ability to scale the GC in cases where the machine has lots of processors but the docker is only given a small limit (`--cpus=0.5` for example).\r\n\r\nIf we decide that it is not worth it, it means we can remove the various uses of `CGroup::GetCpuLimit` in `src/gc/unix/cgroup.cpp` and `src/gc/unix/gcenv.unix.cpp`.\r\n\r\n@janvorli could you please post the various benchmarks you have run, with the configurations and the results?\r\n\r\n/cc @Maoni0 @sergiy-k \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/23951","RelatedDescription":"Open issue \"Loss of `CGroup::GetCpuLimit` in GC\" (#23951)"},{"Id":"432769936","IsPullRequest":false,"CreatedAt":"2019-04-12T22:38:32","Actor":"marklio","Number":"23950","RawContent":null,"Title":"Assertion failed '!inlineeLocal.lclIsPinned'","State":"open","Body":"See IL repro at the bottom. Please let me know if you need more info, or a repro of a different form. This assert is seen on 479 real assemblies from NuGet.org. This IL pattern seems to be an older pattern formerly produced by csc for fixed blocks, but the code for the packages I could find no longer produces this pattern on recent compilers (there is a &int32 that is pinned rather than the int32*).\r\n\r\nSave the IL below as test.il\r\nilasm test.il /dll\r\nrun amd64 CHK crossgen on test.dll:\r\ncrossgen.exe /in test.dll /out test.ni /nologo /verbose /platform_assemblies_paths \"paths_to_il\"\r\nExpected: successful compilation\r\nActual:\r\n```\r\nOpening input file\r\nPreloading input file D:\\scratch\\crossgenrepros\\!inlineeLocal.lclIsPinned\\test.dll\r\nCompiling input file D:\\scratch\\crossgenrepros\\!inlineeLocal.lclIsPinned\\test.dll\r\nCompiling method Program.Main\r\n\r\nAssert failure(PID 30140 [0x000075bc], Thread: 25608 [0x6408]): Assertion failed '!inlineeLocal.lclIsPinned' in 'Program:Main(ref):int' (IL size 12)\r\n\r\n    File: c:\\users\\markmil\\source\\repos\\coreclr\\src\\jit\\importer.cpp Line: 19084\r\n    Image: C:\\Users\\markmil\\Source\\Repos\\PMIExperiment\\CrossGenner\\bin\\Debug\\netcoreapp3.0\\coreclr\\crossgen.exe\r\n```\r\nIL Repro:\r\n\r\n```\r\n.assembly extern mscorlib\r\n{\r\n  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\\V.4..\r\n  .ver 4:0:0:0\r\n}\r\n\r\n.assembly Test\r\n{\r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) \r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx\r\n                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.\r\n  .hash algorithm 0x00008004\r\n  .ver 1:0:0:0\r\n}\r\n.module Test.dll\r\n.imagebase 0x00400000\r\n.file alignment 0x00000200\r\n.stackreserve 0x00100000\r\n.subsystem 0x0003       // WINDOWS_CUI\r\n.corflags 0x00020003    //  ILONLY 32BITPREFERRED\r\n\r\n.class public sequential ansi sealed beforefieldinit Program\r\n\textends [mscorlib]System.Object\r\n{\r\n\t.method private hidebysig static \r\n\t\tint32 Main (\r\n\t\t\tstring[] args\r\n\t\t) cil managed \r\n\t{\r\n\r\n\t\t.maxstack 1\r\n\t\t.entrypoint\r\n\t\t.locals init (\r\n\t\t\t[0] int32\r\n\t\t)\r\n\t\tnop\r\n\t\tldc.i4.s 100\r\n\t\tstloc.0\r\n\t\tldloca.s 0\r\n\t\tcall int32 Program::GetValueUnsafe(int32&)\r\n\t\tret\r\n\t}\r\n\r\n\t.method private hidebysig \r\n\t\tstatic int32 GetValueUnsafe (\r\n\t\t\tint32& buffer\r\n\t\t) cil managed \r\n\t{\r\n\t\t.maxstack 3\r\n\t\t.locals init (\r\n\t\t\t[0] int32* pinned\r\n\t\t)\r\n\r\n\t\tldarg.0\r\n\t\tstloc.0\r\n\t\tldloc.0\r\n\t\tldind.i4\r\n\t\tret\r\n\t}\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23950","RelatedDescription":"Open issue \"Assertion failed '!inlineeLocal.lclIsPinned'\" (#23950)"},{"Id":"432744340","IsPullRequest":false,"CreatedAt":"2019-04-12T21:01:56","Actor":"luhenry","Number":"23949","RawContent":null,"Title":"Switch to workstation GC in case of constrained CPU resources","State":"open","Body":"Right now, if the user sets the configuration so that the server GC is used, the server GC will be loaded even in conditions where we know the workstation GC would fare better. An example of such conditions is constrained environment where there is only 1 or less CPU or with very low memory.\r\n\r\nThis can be harmful if users deploy the same projects on different kind of platforms: deploying to a 20+ cores server and to Azure Functions will require largely different configurations for the runtime.\r\n\r\nA constraint is we do not necessarily want to transparently switch under the hood, without leaving the final choice to the user.\r\n\r\nThere are already multiple ways for the user to specify to use the server GC or not:\r\n - setting `COMPlus_gcServer` as an environment variable\r\n - setting `gcServer` in the configuration file\r\n - setting `System.GC.Server` passed to `coreclr_initialize`\r\n\r\nThe questions are:\r\n 1. is it ok to switch under the hood, even going against the user's request?\r\n 1. if so, how do we signal it?\r\n 1. if not, how do we surface this possibility of using the server GC if and only if the resources on the machine allows it?\r\n\r\nI would favor surfacing to the user a knob (fitting in the existing ones) to try loading the server GC, knowing that it will fallback to workstation GC in case of low resources.\r\n\r\n/cc @Maoni0 @jkotas @sergiy-k @davidwrighton ","Url":"https://github.com/dotnet/coreclr/issues/23949","RelatedDescription":"Open issue \"Switch to workstation GC in case of constrained CPU resources\" (#23949)"},{"Id":"432686826","IsPullRequest":true,"CreatedAt":"2019-04-12T21:01:18","Actor":"hoyosjs","Number":"23937","RawContent":null,"Title":"Add PAL exports to DAC and remove linkage of PAL from static utility library","State":"closed","Body":"As explained in #23924, #22861 introduced a dependency in PAL APIs in the util library, which gets transitively linked in the DBI. Replicating Jan's suggested fix, we take the additional APIs needed from the PAL by exporting them on the DAC. The list looks a bit different as there's been some churn in master, which changes the exports needed, but this is a more conservative approach than taking the closure of commits needed for the other commit to be picked into this branch.\r\n\r\nI verified this fixes the process attach for OSX and that it causes no issues on Linux-x64 on the customer scenarios that reported it. \r\n\r\ncc: @mmitche @tommcdon","Url":"https://github.com/dotnet/coreclr/pull/23937","RelatedDescription":"Closed or merged PR \"Add PAL exports to DAC and remove linkage of PAL from static utility library\" (#23937)"},{"Id":"432731524","IsPullRequest":true,"CreatedAt":"2019-04-12T20:25:27","Actor":"BruceForstall","Number":"23948","RawContent":null,"Title":"Update maximum allowed arm prolog size","State":"open","Body":"Change #23715 changed the localloc stack probe loop to load a\r\nnegative constant instead of zero to start the probing loop.\r\nThis increased the size of the probing loop, and hence the\r\nsize of the maximum prolog, by 4 bytes. Bump the assert on\r\nthe maximum size to match.\r\n\r\nNote that as the comment says, the maximum size there is not\r\nactually a maximum (it was originally), it is just to alert\r\nus when the maximum generated prolog size has gone up.\r\n\r\nFixes #23920\r\n\r\nAlso, when dumping an arm instruction, and when we don't have the actual\r\ncode bytes (such as during code generation, as opposed to emission),\r\ndisplay the (current) instruction size, either 2 bytes (2B),\r\n4 bytes (4B), or 6 bytes (6B).","Url":"https://github.com/dotnet/coreclr/pull/23948","RelatedDescription":"Open PR \"Update maximum allowed arm prolog size\" (#23948)"},{"Id":"432729656","IsPullRequest":true,"CreatedAt":"2019-04-12T20:20:37","Actor":"sandreenko","Number":"23947","RawContent":null,"Title":"Reenable System.ComponentModel.Composition.Tests arm64 Windows.","State":"open","Body":"Closes #18913","Url":"https://github.com/dotnet/coreclr/pull/23947","RelatedDescription":"Open PR \"Reenable System.ComponentModel.Composition.Tests arm64 Windows.\" (#23947)"},{"Id":"432716599","IsPullRequest":true,"CreatedAt":"2019-04-12T19:42:12","Actor":"sergiy-k","Number":"23946","RawContent":null,"Title":"Fix precompiling CoreRoot overlay with crossgen for Windows arm/arm64","State":"open","Body":"This is an existing issue in the Windows scripts that I found while adding FX pre-compilation for Linux.\r\n/cc: @RussKeldorph @echesakovMSFT ","Url":"https://github.com/dotnet/coreclr/pull/23946","RelatedDescription":"Open PR \"Fix precompiling CoreRoot overlay with crossgen for Windows arm/arm64\" (#23946)"},{"Id":"432704590","IsPullRequest":true,"CreatedAt":"2019-04-12T19:06:38","Actor":"echesakovMSFT","Number":"23944","RawContent":null,"Title":"Downgrade xUnit package version","State":"open","Body":"Make it the same with what dotnet/arcade uses for building \"custom\" xunit.console.dll https://github.com/dotnet/arcade/blob/9d0fd805448082c8d55e2434607b481bca70a146/eng/Versions.props#L52","Url":"https://github.com/dotnet/coreclr/pull/23944","RelatedDescription":"Open PR \"Downgrade xUnit package version\" (#23944)"},{"Id":"432700886","IsPullRequest":false,"CreatedAt":"2019-04-12T18:56:14","Actor":"sandreenko","Number":"23943","RawContent":null,"Title":"Assertion failed 'isValidSimm19(distVal)' emitarm64.cpp: 8841","State":"open","Body":"The failing test: JIT/Regression/VS-ia64-JIT/V1.2-M02/b28158/b28158/b28158.sh\r\nConf: Linux arm64 Checked jitstress2_jitstressregs8 @ (Alpine.38.Arm64.Open)Ubuntu.1604 or R2R without stress.\r\n\r\nIt started failing between 4/4 and 4/10.\r\n\r\nADO example: https://dev.azure.com/dnceng/public/_build/results?buildId=152561&view=ms.vss-test-web.build-test-results-tab\r\n\r\ncc @dotnet/jit-contrib \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/23943","RelatedDescription":"Open issue \"Assertion failed 'isValidSimm19(distVal)' emitarm64.cpp: 8841\" (#23943)"},{"Id":"432699344","IsPullRequest":false,"CreatedAt":"2019-04-12T18:52:05","Actor":"echesakovMSFT","Number":"23941","RawContent":null,"Title":"CallbackTests.cmd and ResolveEventTests.cmd time out on Windows_NT x86 in PRs","State":"open","Body":"For example,\r\nhttps://mc.dot.net/#/user/coreclr-ci/pr~2Fdotnet~2Fcoreclr~2Frefs~2Fpull~2F23916~2Fmerge/test~2Ffunctional~2Fr2r~2Fcli~2F/20190412.713/workItem/Interop/wilogs\r\n\r\n```\r\n  Discovering: Interop.NativeLibraryResolveCallback.XUnitWrapper\r\n\r\n  Discovered:  Interop.NativeLibraryResolveCallback.XUnitWrapper\r\n\r\n  Starting:    Interop.NativeLibraryResolveCallback.XUnitWrapper\r\n\r\n    Interop\\NativeLibraryResolveCallback\\CallbackTests\\CallbackTests.cmd [FAIL]\r\n\r\n      \r\ncmdLine:C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveCallback\\CallbackTests\\CallbackTests.cmd Timed Out\r\n\r\n      \r\n\r\nReturn code:      -100\r\nRaw output file:      C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveCallback\\Reports\\Interop.NativeLibraryResolveCallback\\CallbackTests\\CallbackTests.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\r\n              1 file(s) copied.\r\n\r\n      \" C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload\\crossgen.exe\"  /Platform_Assemblies_Paths C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload;C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveCallback\\CallbackTests\\IL;C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveCallback\\CallbackTests /in CallbackTests.org /out CallbackTests.exe\r\n\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n      \r\n\r\n      Native image CallbackTests.exe generated successfully.\r\n\r\n       \"C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload\\corerun.exe\" CallbackTests.exe \r\n\r\n      \r\ncmdLine:C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveCallback\\CallbackTests\\CallbackTests.cmd Timed Out\r\n\r\n      Test Harness Exitcode is : -100\r\n\r\n      \r\nTo run the test:\r\n> set CORE_ROOT=C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload\r\n> C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveCallback\\CallbackTests\\CallbackTests.cmd\r\n\r\n\r\n      Expected: True\r\n\r\n      Actual:   False\r\n\r\n      Stack Trace:\r\n\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Interop.NativeLibraryResolveCallback\\Interop.NativeLibraryResolveCallback.XUnitWrapper.cs(112,0): at Interop_NativeLibraryResolveCallback._CallbackTests_CallbackTests_._CallbackTests_CallbackTests_cmd()\r\n\r\n  Finished:    Interop.NativeLibraryResolveCallback.XUnitWrapper\r\n\r\n  Discovering: Interop.NativeLibraryResolveEvent.XUnitWrapper\r\n\r\n  Discovered:  Interop.NativeLibraryResolveEvent.XUnitWrapper\r\n\r\n  Starting:    Interop.NativeLibraryResolveEvent.XUnitWrapper\r\n\r\n    Interop\\NativeLibraryResolveEvent\\ResolveEventTests\\ResolveEventTests.cmd [FAIL]\r\n\r\n      \r\ncmdLine:C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveEvent\\ResolveEventTests\\ResolveEventTests.cmd Timed Out\r\n\r\n      \r\n\r\nReturn code:      -100\r\nRaw output file:      C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveEvent\\Reports\\Interop.NativeLibraryResolveEvent\\ResolveEventTests\\ResolveEventTests.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\r\n              1 file(s) copied.\r\n\r\n      \" C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload\\crossgen.exe\"  /Platform_Assemblies_Paths C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload;C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveEvent\\ResolveEventTests\\IL;C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveEvent\\ResolveEventTests /in ResolveEventTests.org /out ResolveEventTests.exe\r\n\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n      \r\n\r\n      Native image ResolveEventTests.exe generated successfully.\r\n\r\n       \"C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload\\corerun.exe\" ResolveEventTests.exe \r\n\r\n      \r\ncmdLine:C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveEvent\\ResolveEventTests\\ResolveEventTests.cmd Timed Out\r\n\r\n      Test Harness Exitcode is : -100\r\n\r\n      \r\nTo run the test:\r\n> set CORE_ROOT=C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Payload\r\n> C:\\dotnetbuild\\work\\4e090433-57c6-49bb-9125-aec3d3edac31\\Work\\85b7d86f-1623-4ea4-867f-3640b46ef123\\Exec\\Interop\\NativeLibraryResolveEvent\\ResolveEventTests\\ResolveEventTests.cmd\r\n\r\n\r\n      Expected: True\r\n\r\n      Actual:   False\r\n\r\n      Stack Trace:\r\n\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Interop.NativeLibraryResolveEvent\\Interop.NativeLibraryResolveEvent.XUnitWrapper.cs(112,0): at Interop_NativeLibraryResolveEvent._ResolveEventTests_ResolveEventTests_._ResolveEventTests_ResolveEventTests_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23941","RelatedDescription":"Open issue \"CallbackTests.cmd and ResolveEventTests.cmd time out on Windows_NT x86 in PRs\" (#23941)"},{"Id":"432698834","IsPullRequest":true,"CreatedAt":"2019-04-12T18:50:38","Actor":"fadimounir","Number":"23940","RawContent":null,"Title":"Check for null methodhandle before checking if the method is in the same version bubble","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/23939","Url":"https://github.com/dotnet/coreclr/pull/23940","RelatedDescription":"Open PR \"Check for null methodhandle before checking if the method is in the same version bubble\" (#23940)"},{"Id":"432697694","IsPullRequest":false,"CreatedAt":"2019-04-12T18:47:20","Actor":"marklio","Number":"23939","RawContent":null,"Title":"new AV during crossgen introduced by PR 23828","State":"open","Body":"Commit 5608b4ff0f81b99a5d436dec1e23b393503a4e07 introduced the check:\r\n\r\n```\r\n    if (IsReadyToRunCompilation() && !m_pImage->GetCompileInfo()->IsInCurrentVersionBubble(m_pEEJitInfo->getMethodModule(method)))\r\n```\r\n\r\nThere are cases where method can be null here, which leads to an eventual AV.  SharpDX  (https://www.nuget.org/packages/SharpDX/2.6.3) is an example of a NuGet package that hits this. I'd be happy to provide others.","Url":"https://github.com/dotnet/coreclr/issues/23939","RelatedDescription":"Open issue \"new AV during crossgen introduced by PR 23828\" (#23939)"},{"Id":"432692054","IsPullRequest":true,"CreatedAt":"2019-04-12T18:31:48","Actor":"GrabYourPitchforks","Number":"23938","RawContent":null,"Title":"Remove old method names from Rune","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/23319.\r\n\r\nThese methods were renamed and are no longer exposed in the __System.Runtime__ ref asm.","Url":"https://github.com/dotnet/coreclr/pull/23938","RelatedDescription":"Open PR \"Remove old method names from Rune\" (#23938)"},{"Id":"432676308","IsPullRequest":true,"CreatedAt":"2019-04-12T17:49:21","Actor":"franksinankaya","Number":"23934","RawContent":null,"Title":"Integer Conversion Issues and incompatible linker flag","State":"open","Body":"Debugger is being linked with -fPIE but dependent libraries are compiled with -fPIC. GCC is having trouble linking these.\r\n\r\n@am11 @janvorli @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/23934","RelatedDescription":"Open PR \"Integer Conversion Issues and incompatible linker flag\" (#23934)"},{"Id":"432656236","IsPullRequest":true,"CreatedAt":"2019-04-12T16:51:20","Actor":"briansull","Number":"23932","RawContent":null,"Title":"Fixes for tracking struct field sequences","State":"open","Body":"Fixes for Zero Offset field sequence tracking\r\n\r\n - A GT_LCL_VAR may have a zeroOffset field\r\n - Add an assert to prevent building field sequences with duplicates\r\n - Fix fgMorphField when we have a zero offset field\r\n\r\nImprove fgAddFieldSeqForZeroOffset\r\n - Add JItDump info\r\n - Handle GT_LCL_FLD","Url":"https://github.com/dotnet/coreclr/pull/23932","RelatedDescription":"Open PR \"Fixes for tracking struct field sequences\" (#23932)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"432335674","IsPullRequest":true,"CreatedAt":"2019-04-13T00:26:14","Actor":"wli3","Number":"11143","RawContent":null,"Title":"dotnet tool --local update","State":"closed","Body":"**Please review by commit**\r\n\r\nthe follow 2 are large but they are refactorings to reduce the duplication:\r\nCreate applied option class 7d65d20\r\nExtract a class and a extension to minimize the dup from install and update 8ae38bd\r\n\r\nImpl dotnet tool update a438573 is the actual feature","Url":"https://github.com/dotnet/cli/pull/11143","RelatedDescription":"Closed or merged PR \"dotnet tool --local update\" (#11143)"},{"Id":"432704924","IsPullRequest":false,"CreatedAt":"2019-04-12T19:07:39","Actor":"danielancich","Number":"11148","RawContent":null,"Title":"dotnet test --runtime linux-x64 copies wrong nuget dependencies into ouput folder","State":"open","Body":"## Steps to reproduce\r\n1. Have a nuget package with .dll in the lib/netcoreapp2.2 folder. And the respective .dll and .so in the runtimes/{os}/native folders. \r\n2. Run 'dotnet test --configuration Release --runtime linux-x64 --logger:trx $csprojFile'\r\n\r\n## Expected  behavior\r\nThe output folder 'bin/Release/netcoreapp2.2/linux-x64/' should contain the .so files and run the tests.\r\n\r\n## Actual behavior\r\nThe output folder 'bin/Release/netcoreapp2.2/linux-x64/' contains .dll files and cannot run the tests.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\nVersion:   2.2.105\r\nCommit:    7cecb35b92\r\nRuntime Environment:\r\n  OS Name:     amzn\r\n  OS Version:  2018.03\r\n  OS Platform: Linux\r\n  RID:         linux-x64\r\n  Base Path:   /var/build/workspace/core-unit-tests/dotnet/cli/sdk/2.2.105/\r\nHost (useful for support):\r\n  Version: 2.2.3\r\n  Commit:  6b8ad509b6\r\n.NET Core SDKs installed:\r\n  2.2.105 [/var/build/workspace/core-unit-tests/dotnet/cli/sdk]\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.3 [/var/build/workspace/core-unit-tests/dotnet/cli/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.3 [/var/build/workspace/core-unit-tests/dotnet/cli/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [/var/build/workspace/core-unit-tests/dotnet/cli/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11148","RelatedDescription":"Open issue \"dotnet test --runtime linux-x64 copies wrong nuget dependencies into ouput folder\" (#11148)"},{"Id":"432668327","IsPullRequest":true,"CreatedAt":"2019-04-12T18:40:17","Actor":"wli3","Number":"11147","RawContent":null,"Title":"Remove duplication in message","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/11146","Url":"https://github.com/dotnet/cli/pull/11147","RelatedDescription":"Closed or merged PR \"Remove duplication in message\" (#11147)"},{"Id":"432659759","IsPullRequest":false,"CreatedAt":"2019-04-12T18:40:17","Actor":"wli3","Number":"11146","RawContent":null,"Title":"Duplication in first run welcome message","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/issues/11146","RelatedDescription":"Closed issue \"Duplication in first run welcome message\" (#11146)"},{"Id":"432330562","IsPullRequest":true,"CreatedAt":"2019-04-12T15:55:19","Actor":"dotnet-bot","Number":"11142","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11142","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11142)"},{"Id":"432536103","IsPullRequest":true,"CreatedAt":"2019-04-12T12:44:08","Actor":"dotnet-maestro[bot]","Number":"11145","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190411.1\r\n- **Date Produced**: 4/11/2019 12:58 PM\r\n- **Commit**: df99030c70eb20df18f953a62f3cf9d56ea20d6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19211.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11145)"},{"Id":"432533019","IsPullRequest":true,"CreatedAt":"2019-04-12T12:05:16","Actor":"dotnet-maestro[bot]","Number":"11144","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11144","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11144)"},{"Id":"432330547","IsPullRequest":true,"CreatedAt":"2019-04-12T00:01:22","Actor":"dotnet-bot","Number":"11141","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11141","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11141)"},{"Id":"432330533","IsPullRequest":true,"CreatedAt":"2019-04-12T00:01:19","Actor":"dotnet-bot","Number":"11140","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11140","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11140)"},{"Id":"432306299","IsPullRequest":false,"CreatedAt":"2019-04-11T22:53:55","Actor":"wli3","Number":"11139","RawContent":null,"Title":"Local tools uninstall should uninstall from the first manfiest with package id","State":"open","Body":"instead of the first manfiest regradless","Url":"https://github.com/dotnet/cli/issues/11139","RelatedDescription":"Open issue \"Local tools uninstall should uninstall from the first manfiest with package id\" (#11139)"},{"Id":"432300975","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:46","Actor":"nugetlurker","Number":"11138","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into cli","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/11138","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into cli\" (#11138)"},{"Id":"432300960","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:42","Actor":"nugetlurker","Number":"11137","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into cli","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/11137","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into cli\" (#11137)"},{"Id":"432123258","IsPullRequest":true,"CreatedAt":"2019-04-11T16:44:20","Actor":"JohnTortugo","Number":"11136","RawContent":null,"Title":"Onboard with async publishing","State":"open","Body":"Relates to: https://github.com/dotnet/arcade/issues/2444\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=151209\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4497","Url":"https://github.com/dotnet/cli/pull/11136","RelatedDescription":"Open PR \"Onboard with async publishing\" (#11136)"},{"Id":"431986370","IsPullRequest":true,"CreatedAt":"2019-04-11T15:37:23","Actor":"dotnet-maestro[bot]","Number":"11133","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11133","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11133)"},{"Id":"431772102","IsPullRequest":true,"CreatedAt":"2019-04-11T15:14:59","Actor":"dotnet-bot","Number":"11128","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11128","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11128)"},{"Id":"431772125","IsPullRequest":true,"CreatedAt":"2019-04-11T15:14:35","Actor":"dotnet-bot","Number":"11129","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11129","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11129)"},{"Id":"431825950","IsPullRequest":true,"CreatedAt":"2019-04-11T14:37:08","Actor":"dotnet-maestro[bot]","Number":"11131","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190410.3\r\n- **Date Produced**: 4/11/2019 4:31 AM\r\n- **Commit**: 814b7898f9908a88f62706331cf56f1ecc9745eb\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19210.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11131","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11131)"},{"Id":"431772092","IsPullRequest":true,"CreatedAt":"2019-04-11T14:18:59","Actor":"dotnet-bot","Number":"11127","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11127","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11127)"},{"Id":"431990089","IsPullRequest":true,"CreatedAt":"2019-04-11T12:54:47","Actor":"dotnet-maestro[bot]","Number":"11135","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190410.1\r\n- **Date Produced**: 4/10/2019 1:08 PM\r\n- **Commit**: 0ea905c56ab0c8a8d17b1781486dad2e754afca3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19210.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11135)"},{"Id":"431986530","IsPullRequest":true,"CreatedAt":"2019-04-11T12:40:51","Actor":"dotnet-maestro[bot]","Number":"11134","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190410.2\r\n- **Date Produced**: 4/11/2019 3:46 AM\r\n- **Commit**: 6916b50efb78f126aa68a5d183993f55fb6e03c9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19210.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11134","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11134)"},{"Id":"431952527","IsPullRequest":false,"CreatedAt":"2019-04-11T10:39:30","Actor":"PDostalek","Number":"11132","RawContent":null,"Title":"[loc][Query][dotnet_cli] Localizability of string:  0; \"UnexpectedTypeInJson\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\n\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question to Core team.\r\n\r\nCould you help please? Thanks!**\r\n\r\nSource:\r\nExpected a {0} for property '{1}'.\r\n\r\nFile Name:\r\ndotnet\\ToolManifest\\xlf\\LocalizableStrings.xlf\r\n\r\nResource ID:\r\n0; \"UnexpectedTypeInJson\"\r\n\r\nQuery:\r\nCould you provide the meaning of the placeholders?","Url":"https://github.com/dotnet/cli/issues/11132","RelatedDescription":"Open issue \"[loc][Query][dotnet_cli] Localizability of string:  0; \"UnexpectedTypeInJson\"\" (#11132)"},{"Id":"431790349","IsPullRequest":false,"CreatedAt":"2019-04-11T01:36:07","Actor":"KirillOsenkov","Number":"11130","RawContent":null,"Title":"NETCoreSdkResolver should give a clear error message when preview SDK is rejected due to UsePreviews=false","State":"open","Body":"Currently the experience we see when a preview SDK is rejected due to DisallowPrerelease()\r\nhttps://github.com/dotnet/cli/blob/bfffcb23ba270640b355e729f36b34c04fad0121/src/Microsoft.DotNet.MSBuildSdkResolver/VSSettings.cs#L75\r\n\r\nis not good. It's a generic failed to load .NET SDK error, and it's super hard to figure out that the SDK was actually found, but it was pre-release and the checkbox wasn't set.\r\n\r\nSee related: \r\nhttps://github.com/dotnet/roslyn/issues/34927\r\n\r\nIf I wasted four hours figuring this out and debugging through the SDK resolver, the UX here should really be improved.","Url":"https://github.com/dotnet/cli/issues/11130","RelatedDescription":"Open issue \"NETCoreSdkResolver should give a clear error message when preview SDK is rejected due to UsePreviews=false\" (#11130)"},{"Id":"431734701","IsPullRequest":false,"CreatedAt":"2019-04-10T21:52:38","Actor":"wli3","Number":"11126","RawContent":null,"Title":"Remove checked-in ArrayBufferWriter","State":"open","Body":"https://github.com/dotnet/corefx/issues/34794#issuecomment-457031923\r\n\r\nit is available now\r\n","Url":"https://github.com/dotnet/cli/issues/11126","RelatedDescription":"Open issue \"Remove checked-in ArrayBufferWriter\" (#11126)"},{"Id":"431463968","IsPullRequest":true,"CreatedAt":"2019-04-10T16:53:07","Actor":"dotnet-bot","Number":"11121","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11121","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11121)"},{"Id":"431543474","IsPullRequest":true,"CreatedAt":"2019-04-10T16:52:21","Actor":"dotnet-maestro-bot","Number":"11125","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11125","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.6xx)\" (#11125)"},{"Id":"431542272","IsPullRequest":true,"CreatedAt":"2019-04-10T16:51:51","Actor":"dotnet-maestro-bot","Number":"11124","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/11124","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#11124)"},{"Id":"431469381","IsPullRequest":true,"CreatedAt":"2019-04-10T12:49:47","Actor":"dotnet-maestro[bot]","Number":"11123","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/10/2019 6:04 AM\r\n- **Commit**: 0ae2028f4ed06c931e5eddb1079134a9a924330e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19209.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11123","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11123)"},{"Id":"431465456","IsPullRequest":true,"CreatedAt":"2019-04-10T12:40:29","Actor":"dotnet-maestro[bot]","Number":"11122","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11122","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11122)"},{"Id":"431229716","IsPullRequest":true,"CreatedAt":"2019-04-10T00:39:42","Actor":"dotnet-bot","Number":"11119","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11119","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11119)"},{"Id":"431229736","IsPullRequest":true,"CreatedAt":"2019-04-09T23:29:17","Actor":"dotnet-bot","Number":"11120","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11120","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11120)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"},{"Id":"432357589","IsPullRequest":false,"CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Number":"1138","RawContent":null,"Title":"Xml validate [ type is not declared ]","State":"open","Body":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```","Url":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Open issue \"Xml validate [ type is not declared ]\" (#1138)"},{"Id":"431985706","IsPullRequest":true,"CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Number":"1137","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1137)"},{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"429978073","IsPullRequest":true,"CreatedAt":"2019-04-09T16:30:37","Actor":"JohnTortugo","Number":"1126","RawContent":null,"Title":"Onboard on async publishing","State":"closed","Body":"Relates to: https://github.com/dotnet/arcade/issues/2442\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=144566\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4241","Url":"https://github.com/dotnet/standard/pull/1126","RelatedDescription":"Closed or merged PR \"Onboard on async publishing\" (#1126)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"},{"Id":"430411848","IsPullRequest":true,"CreatedAt":"2019-04-08T12:13:43","Actor":"dotnet-maestro[bot]","Number":"1130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19207.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1130)"},{"Id":"430137273","IsPullRequest":true,"CreatedAt":"2019-04-07T12:13:36","Actor":"dotnet-maestro[bot]","Number":"1129","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190406.5\r\n- **Date Produced**: 4/6/2019 5:35 PM\r\n- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19206.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1129)"},{"Id":"429990573","IsPullRequest":false,"CreatedAt":"2019-04-07T05:49:47","Actor":"benneyman","Number":"1127","RawContent":null,"Title":"[Help] Targeting netstandard2.0 for a class library","State":"closed","Body":"After a lot of googling I came to realize that my existing class library(net462) should be targeting netstandard2.0 to be able to reference into my react app (dotnet new react) which targets netcoreapp2.1.\r\n\r\nI am not sure how to make my class library to target netstandard2.0 from Visual Studio 2013. From the extensive googling I did I know we need VS 2017 (15.3) to do this. I do not have access to VS 2017.\r\n\r\nI feel there could be other ways of doing this without having to have VS2017 from the googling I did. But I can't any concrete solutions.\r\n\r\nCould you please guide me on how to target a class library to netstandard2.0 from Visual Studio 2013 or using CLI tools so that I will be able to add a project reference to my react project.","Url":"https://github.com/dotnet/standard/issues/1127","RelatedDescription":"Closed issue \"[Help] Targeting netstandard2.0 for a class library\" (#1127)"},{"Id":"430027157","IsPullRequest":true,"CreatedAt":"2019-04-06T12:13:34","Actor":"dotnet-maestro[bot]","Number":"1128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1128)"},{"Id":"429720581","IsPullRequest":true,"CreatedAt":"2019-04-05T12:11:02","Actor":"dotnet-maestro[bot]","Number":"1125","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1125","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1125)"},{"Id":"429609384","IsPullRequest":false,"CreatedAt":"2019-04-05T07:06:16","Actor":"Jacksiro","Number":"1124","RawContent":null,"Title":"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'","State":"closed","Body":"I am using VS 2017 Community and have targeted .Net v4.5 in my app. My app throws the error of \r\n\r\n```\r\n\r\n> See the end of this message for details on invoking \r\n> just-in-time (JIT) debugging instead of this dialog box.\r\n> \r\n> ************** Exception Text **************\r\n> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\r\n> File name: 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n>    at EasyTabs.TitleBarTabs.SetFrameSize()\r\n>    at EasyTabs.TitleBarTabs.OnSizeChanged(EventArgs e)\r\n>    at System.Windows.Forms.Control.UpdateBounds(Int32 x, Int32 y, Int32 width, Int32 height, Int32 clientWidth, Int32 clientHeight)\r\n>    at System.Windows.Forms.Control.UpdateBounds()\r\n>    at System.Windows.Forms.Control.WndProc(Message& m)\r\n>    at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n>    at System.Windows.Forms.Form.WndProc(Message& m)\r\n>    at EasyTabs.TitleBarTabs.WndProc(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n>    at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n> \r\n> WRN: Assembly binding logging is turned OFF.\r\n> To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\n> Note: There is some performance penalty associated with assembly bind failure logging.\r\n> To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n> \r\n> \r\n> \r\n> ************** Loaded Assemblies **************\r\n> mscorlib\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll\r\n> ----------------------------------------\r\n> vSongBook\r\n>     Assembly Version: 2.3.5.2\r\n>     Win32 Version: 2.3.5.2\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/vSongBook.exe\r\n> ----------------------------------------\r\n> System.Windows.Forms\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll\r\n> ----------------------------------------\r\n> System\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll\r\n> ----------------------------------------\r\n> System.Drawing\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll\r\n> ----------------------------------------\r\n> JacksiroCtrl\r\n>     Assembly Version: 1.2.5.0\r\n>     Win32 Version: 1.2.5.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/JacksiroCtrl.DLL\r\n> ----------------------------------------\r\n> SQLite.NET\r\n>     Assembly Version: 0.21.1869.3794\r\n>     Win32 Version: 0.21.1869.3794\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/SQLite.NET.DLL\r\n> ----------------------------------------\r\n> System.Data\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/System.Data/v4.0_4.0.0.0__b77a5c561934e089/System.Data.dll\r\n> ----------------------------------------\r\n> System.Core\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll\r\n> ----------------------------------------\r\n> System.Xml\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll\r\n> ----------------------------------------\r\n> EasyTabs\r\n>     Assembly Version: 1.3.3.0\r\n>     Win32 Version: 1.3.3.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/EasyTabs.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Uxtheme\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Uxtheme.DLL\r\n> ----------------------------------------\r\n> Win32Interop.User32\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.User32.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Dwmapi\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Dwmapi.DLL\r\n> ----------------------------------------\r\n> \r\n> ************** JIT Debugging **************\r\n> To enable just-in-time (JIT) debugging, the .config file for this\r\n> application or computer (machine.config) must have the\r\n> jitDebugging value set in the system.windows.forms section.\r\n> The application must also be compiled with debugging\r\n> enabled.\r\n> \r\n> For example:\r\n> \r\n> <configuration>\r\n>     <system.windows.forms jitDebugging=\"true\" />\r\n> </configuration>\r\n> \r\n> When JIT debugging is enabled, any unhandled exception\r\n> will be sent to the JIT debugger registered on the computer\r\n> rather than be handled by this dialog box.\r\n\r\n```\r\n\r\nKIndly advice me on the on how to resolve this issue","Url":"https://github.com/dotnet/standard/issues/1124","RelatedDescription":"Closed issue \"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'\" (#1124)"},{"Id":"429582381","IsPullRequest":false,"CreatedAt":"2019-04-05T04:53:06","Actor":"Groostav","Number":"1123","RawContent":null,"Title":"phantom connection when mixing async & blocking calls on TcpClient ","State":"open","Body":"apologies if this is the wrong place to report this!\r\n\r\non .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Open issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123)"},{"Id":"429333028","IsPullRequest":false,"CreatedAt":"2019-04-04T15:07:55","Actor":"Korporal","Number":"1122","RawContent":null,"Title":"The end of .NET Framework support?","State":"open","Body":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this footnote under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on **_all_** .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively, mentioning this kind of thing as small footnote isn't helpful.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Open issue \"The end of .NET Framework support?\" (#1122)"},{"Id":"429240376","IsPullRequest":true,"CreatedAt":"2019-04-04T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1121","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1121)"},{"Id":"429232379","IsPullRequest":false,"CreatedAt":"2019-04-04T11:43:44","Actor":"markrendle","Number":"1120","RawContent":null,"Title":"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0","State":"open","Body":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary.","Url":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Open issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120)"},{"Id":"428727330","IsPullRequest":true,"CreatedAt":"2019-04-03T12:11:00","Actor":"dotnet-maestro[bot]","Number":"1119","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19202.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1119)"},{"Id":"428466923","IsPullRequest":false,"CreatedAt":"2019-04-02T22:06:10","Actor":"wtgodbe","Number":"1118","RawContent":null,"Title":"Consider adding Nullable annotations to .Net Standard","State":"open","Body":"https://github.com/dotnet/coreclr/tree/NullableFeature\r\n\r\nWe should consider adding the annotations from the above Feature branch to the .Net Standard for 2.1.\r\n\r\nCC @wtgodbe @terrajobst @dotnet/nullablefc ","Url":"https://github.com/dotnet/standard/issues/1118","RelatedDescription":"Open issue \"Consider adding Nullable annotations to .Net Standard\" (#1118)"},{"Id":"428187528","IsPullRequest":true,"CreatedAt":"2019-04-02T12:14:00","Actor":"dotnet-maestro[bot]","Number":"1117","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190401.12\r\n- **Date Produced**: 4/2/2019 1:18 AM\r\n- **Commit**: 505e38906e1ee2d032c41bb297de0958307db946\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19201.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1117","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1117)"},{"Id":"427275509","IsPullRequest":true,"CreatedAt":"2019-03-30T12:23:34","Actor":"dotnet-maestro[bot]","Number":"1116","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19179.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1116","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1116)"},{"Id":"426954195","IsPullRequest":true,"CreatedAt":"2019-03-29T12:13:42","Actor":"dotnet-maestro[bot]","Number":"1115","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.1\r\n- **Date Produced**: 3/29/2019 10:57 AM\r\n- **Commit**: ef139c7533e2e33c5e0946b80cb1aa95d84da868\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19179.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1115","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1115)"},{"Id":"426800191","IsPullRequest":false,"CreatedAt":"2019-03-29T03:29:38","Actor":"CalvinFengDatacom","Number":"1114","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"open","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1114","RelatedDescription":"Open issue \"Multiple assemblies with equivalent identity have been imported\" (#1114)"},{"Id":"426583515","IsPullRequest":false,"CreatedAt":"2019-03-28T16:14:20","Actor":"CoenraadS","Number":"1113","RawContent":null,"Title":"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'","State":"open","Body":"I have a .Net Core Project that requires `System.UriTemplate` which doesn't seem implemented.\r\n\r\n`System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'`\r\n\r\n`TypeLoadException: Could not load type 'System.UriTemplate' from assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\r\n\r\n.Net Core 2.1 Console Project\r\n\r\n![image](https://user-images.githubusercontent.com/5593825/55173581-3c3dfa00-517c-11e9-95d0-7380e4ce654a.png)\r\n\r\n\r\n```\r\nusing Microsoft.ServiceBus.Messaging;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string connectionString = \"\";\r\n            var q = QueueClient.CreateFromConnectionString(connectionString, \"myqueue\");\r\n\r\n            var sessions = q.GetMessageSessions();\r\n\r\n            var names = sessions.Select(e => e.SessionId);\r\n\r\n            foreach (var name in names)\r\n            {\r\n                Console.WriteLine(name);\r\n            }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1113","RelatedDescription":"Open issue \"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'\" (#1113)"},{"Id":"426455070","IsPullRequest":true,"CreatedAt":"2019-03-28T12:24:04","Actor":"dotnet-maestro[bot]","Number":"1112","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190327.11\r\n- **Date Produced**: 3/28/2019 1:58 AM\r\n- **Commit**: 69f276904fdd6d8f81404b857f295537894b81d3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19177.11\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1112","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1112)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"432735388","IsPullRequest":true,"CreatedAt":"2019-04-13T04:47:31","Actor":"akoeplinger","Number":"36832","RawContent":null,"Title":"Fix TypeInfoTests.GenericParameterConstraints() test","State":"closed","Body":"It was a Theory instead of a Fact and the method parameter wasn't being used.\r\n\r\nWe noticed this when running the test on Xamarin.Android (I assume because we use a different xunit runner?) which gave the following error:\r\n\r\n```\r\n Failed tests:\r\n 1)    Test name: System.Reflection.Tests.TypeInfoTests.GenericParameterConstraints\r\n    Assembly:  [monodroid_corlib_xunit-test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756]\r\n    Exception messages: System.InvalidOperationException : No data found for System.Reflection.Tests.TypeInfoTests.GenericParameterConstraints \r\n```","Url":"https://github.com/dotnet/corefx/pull/36832","RelatedDescription":"Closed or merged PR \"Fix TypeInfoTests.GenericParameterConstraints() test\" (#36832)"},{"Id":"432719092","IsPullRequest":true,"CreatedAt":"2019-04-13T04:46:43","Actor":"mairaw","Number":"36831","RawContent":null,"Title":"overwrite -> overwriteFiles","State":"closed","Body":"Fixes #36804 \r\n\r\nI kept the name of the internal static method as-is but let me know if you'd like me to update this as well.\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFileExtensions.ZipArchiveEntry.Extract.cs#L90\r\n\r\n/cc @ahsonkhan @safern @carlossanlop ","Url":"https://github.com/dotnet/corefx/pull/36831","RelatedDescription":"Closed or merged PR \"overwrite -> overwriteFiles\" (#36831)"},{"Id":"432807385","IsPullRequest":true,"CreatedAt":"2019-04-13T04:46:32","Actor":"Dotnet-GitSync-Bot","Number":"36837","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @dotnet-maestro[bot]","Url":"https://github.com/dotnet/corefx/pull/36837","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#36837)"},{"Id":"432718990","IsPullRequest":true,"CreatedAt":"2019-04-13T04:45:34","Actor":"Dotnet-GitSync-Bot","Number":"36830","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @grant-d @stephentoub","Url":"https://github.com/dotnet/corefx/pull/36830","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36830)"},{"Id":"432388299","IsPullRequest":true,"CreatedAt":"2019-04-13T04:45:12","Actor":"cston","Number":"36808","RawContent":null,"Title":"Port ErrObject and CreateProjectError","State":"closed","Body":"Port `ErrObject` and `CreateProjectError` from reference source.","Url":"https://github.com/dotnet/corefx/pull/36808","RelatedDescription":"Closed or merged PR \"Port ErrObject and CreateProjectError\" (#36808)"},{"Id":"432801864","IsPullRequest":false,"CreatedAt":"2019-04-13T03:21:23","Actor":"chuanjiao10","Number":"36836","RawContent":null,"Title":".net core should return 24hours datetime by format string \"H\",instead of format string \"h\"","State":"open","Body":".net framework on win return 24 hours datetime by format string \"H\",\r\nBut .net core 2.2 on win,linux return 12 hours datetime by format string \"h\",\r\nThis will affect the time that powershell displays in getchilditem on win, linux.\r\n\r\nam,pm,上午,下午.\r\nIn the Chinese get-childitem return, the columns cannot be aligned.\r\n\r\nI have reported issues to powershell on github, https://github.com/PowerShell/PowerShell/issues/8099\r\nBut this seems to be a problem with the .net core.\r\n\r\nnote:\r\nls retrun 24 hours datetime on linux. \r\n\r\n\r\nSteps to reproduce\r\n------------------\r\n\r\n```c#\r\nusing System;\r\nusing System.Globalization;\r\n\r\nnamespace DotnetCoreTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            DateTime now = DateTime.Now;\r\n\t\t\tCultureInfo enus = new CultureInfo(\"en-us\");\r\n\t\t\tCultureInfo zhhans = new CultureInfo(\"zh-hans\");\r\n\t\t\tConsole.WriteLine(enus.DateTimeFormat.ShortTimePattern);\r\n\t\t\tConsole.WriteLine(enus.DateTimeFormat.LongDatePattern);\r\n\t\t\tConsole.WriteLine(now.ToString(enus.DateTimeFormat));\r\n\r\n\t\t\tConsole.WriteLine(\"--------\");\r\n\r\n\t\t\tConsole.WriteLine(zhhans.DateTimeFormat.ShortTimePattern);\r\n\t\t\tConsole.WriteLine(zhhans.DateTimeFormat.LongDatePattern);\r\n\t\t\tConsole.WriteLine(now.ToString(zhhans.DateTimeFormat));\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nreturn:\r\n![9318](https://user-images.githubusercontent.com/8968667/56074032-3c760080-5dde-11e9-8398-f3213f001710.png)\r\n\r\n\r\n\r\npowershell：\r\n```powershell\r\n\r\n$日期对象 = Get-Date\r\n$日期格式 = New-Object System.Globalization.CultureInfo \"en-us\"\r\n$日期格式.DateTimeFormat.ShortTimePattern\r\n$日期格式.DateTimeFormat.LongDatePattern\r\n$日期对象.ToString($日期格式)\r\n\r\nwrite-host '-------------'\r\n$中文日期格式 = New-Object System.Globalization.CultureInfo \"zh-cn\"\r\n$中文日期格式.DateTimeFormat.ShortTimePattern\r\n$中文日期格式.DateTimeFormat.LongDatePattern\r\n$日期对象.ToString($中文日期格式)\r\n\r\n\r\n```\r\npowershell on linux return:\r\n\r\n```\r\nh:mm tt\r\ndddd, MMMM d, yyyy\r\n4/13/2019 10:36:58 AM\r\n-------------\r\ntth:mm\r\nyyyy年M月d日dddd\r\n19-4-13 上午10:46:27\r\n```\r\n\r\n\r\n\r\n\r\nEnvironment data\r\n----------------\r\n.net core 2.2\r\npowershell 6.2.0 on centos 7.6\r\n\r\n\r\n\r\nreporter\r\n----------------\r\nBy the chinese powershell study & research group. QQ group No. is 183173532\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36836","RelatedDescription":"Open issue \".net core should return 24hours datetime by format string \"H\",instead of format string \"h\"\" (#36836)"},{"Id":"432800777","IsPullRequest":false,"CreatedAt":"2019-04-13T03:05:49","Actor":"VBAndCs","Number":"36835","RawContent":null,"Title":"String.Replace overload to do multiple replacements with an array of tuples","State":"open","Body":"I wrote this code:\r\n```VB.NET\r\nReturn xml.ToString(SaveOptions.DisableFormatting).\r\n            Replace(\"<zml>\", \"\").Replace(\"</zml>\", \"\").\r\n            Replace(\"__ltn__\", \"<\").Replace(\"__gtn__\", \">\").\r\n            Replace(\"__amp__\", \"&\")\r\n```\r\n\r\nUsing successive replacements creates many visions of the string, which is less efficient, so I wrote it using tuples like this:\r\n```VB.NET\r\nReturn xml.ToString(SaveOptions.DisableFormatting).\r\n            Replace(\r\n                     (\"<zml>\", \"\"), (\"</zml>\", \"\"),\r\n                     (\"__ltn__\", \"<\"), (\"__gtn__\", \">\"),\r\n                     (\"__amp__\", \"&\")\r\n                   )\r\n```\r\n\r\nWhich is more compact and more efficient. It can be implemented with this extension method:\r\n```VB.NET\r\n<Extension>\r\nFunction Replace(s As String, ParamArray repPairs() As (repStr As String, repWithStr As String))\r\n        Dim sb As New Text.StringBuilder(s)\r\n        For Each x In repPairs\r\n            sb.Replace(x.repStr, x.repWithStr)\r\n        Next\r\n        Return sb.ToString()\r\nEnd Function\r\n```\r\n\r\nI suggest to add this Replace overload to the string class. \r\n","Url":"https://github.com/dotnet/corefx/issues/36835","RelatedDescription":"Open issue \"String.Replace overload to do multiple replacements with an array of tuples\" (#36835)"},{"Id":"432716928","IsPullRequest":true,"CreatedAt":"2019-04-13T00:27:41","Actor":"davidsh","Number":"36828","RawContent":null,"Title":"Improve WebClient upload tests stability","State":"closed","Body":"This PR is a follow-up to PR #36801 which improved HttpClient tests stability.\r\n\r\nSome of the WebClient tests were failing with WebExceptions being caused by the\r\nAzure remote endpoint returning 500 status code. Similar to the fixes done to\r\nthe HttpClient tests, this PR updates some of the WebClient upload tests to use\r\nthe VerifyUpload endpoint which doesn't have to echo back the request body payload.\r\n\r\nSome of the WebClient tests upload more complex multi-part formats and can't be\r\neasily changed to use the VerifyUpload endpoint. But those tests aren't using large\r\ndata sets so it should be ok.\r\n\r\nCloses #36226","Url":"https://github.com/dotnet/corefx/pull/36828","RelatedDescription":"Closed or merged PR \"Improve WebClient upload tests stability\" (#36828)"},{"Id":"432756959","IsPullRequest":true,"CreatedAt":"2019-04-12T22:38:16","Actor":"dotnet-maestro[bot]","Number":"36834","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190412.72\r\n- **Date Produced**: 4/12/2019 9:42 PM\r\n- **Commit**: d833cacabd67150fe3a2405845429a0ba1b72c12\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview4-27612-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview4-27612-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview4-27612-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36834","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#36834)"},{"Id":"432743181","IsPullRequest":true,"CreatedAt":"2019-04-12T20:58:17","Actor":"ViktorHofer","Number":"36833","RawContent":null,"Title":"Use dotnet CLI 2.2.203","State":"open","Body":"Fixes official build restore errors:\r\n\r\n```\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Net.Sockets 4.3.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'MicroBuild.Core 0.2.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'vswhere 2.5.2' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Runtime.InteropServices.Analyzers 1.1.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'Desktop.Analyzers 1.1.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'Microsoft.CodeAnalysis.FxCopAnalyzers 1.1.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Security.Cryptography.Hashing.Algorithms.Analyzers 1.1.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'Microsoft.CodeAnalysis.Common 2.9.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'Microsoft.AnalyzerPowerPack 1.0.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Collections.Immutable 1.5.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'Microsoft.CodeAnalysis.CSharp 2.9.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Reflection.Metadata 1.6.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'Microsoft.CodeAnalysis.Analyzers 2.6.1' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Security.Cryptography.Algorithms 4.3.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\nF:\\workspace\\_work\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19207.1\\tools\\Tools.proj : error NU3004: Package 'System.Threading.Tasks.Parallel 4.3.0' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\n```\r\n\r\nRelated https://github.com/dotnet/arcade/issues/2008#issuecomment-461986074","Url":"https://github.com/dotnet/corefx/pull/36833","RelatedDescription":"Open PR \"Use dotnet CLI 2.2.203\" (#36833)"},{"Id":"432717500","IsPullRequest":true,"CreatedAt":"2019-04-12T19:49:15","Actor":"Dotnet-GitSync-Bot","Number":"36829","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/36829","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36829)"},{"Id":"432673672","IsPullRequest":true,"CreatedAt":"2019-04-12T19:07:40","Actor":"Anipik","Number":"36825","RawContent":null,"Title":"Embed generated files into pdbs","State":"closed","Body":"Fixes https://github.com/dotnet/arcade/issues/1885\r\nSourceLink currently is not able to track the generated files such as SR.cs and *notSupported.cs\r\nSo we are enbedding these generated files directly into pdbs.\r\n\r\nCurrent output with official Sdk\r\n```\r\nC:\\git\\arcade\\src\\Microsoft.DotNet.GitSync>SourceLink test E:\\sdkmastersymbols\\System.Transactions.Local.pdb\r\n1 Documents with errors:\r\n402e899a094c5807b522d8908de97f46ac67721f1cecf62441fda588e1b782e6 sha256 csharp F:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Transactions.Local\\netcoreapp-Release\\System.SR.cs\r\nhttps://raw.githubusercontent.com/dotnet/corefx/7b7345665ec28a85084b3ad2932e03f7641d6151/artifacts/obj/System.Transactions.Local/netcoreapp-Release/System.SR.cs\r\nerror: url failed NotFound: Not Found\r\nsourcelink test failed\r\n```\r\n\r\nAfter Change\r\n```\r\n\r\nC:\\git\\corefx>SourceLink test artifacts\\bin\\System.Transactions.Local\\netcoreapp-Debug\\System.Transactions.Local.pdb\r\nsourcelink test passed: artifacts\\bin\\System.Transactions.Local\\netcoreapp-Debug\\System.Transactions.Local.pdb\r\n```\r\n","Url":"https://github.com/dotnet/corefx/pull/36825","RelatedDescription":"Closed or merged PR \"Embed generated files into pdbs\" (#36825)"},{"Id":"432677801","IsPullRequest":true,"CreatedAt":"2019-04-12T18:55:20","Actor":"davidfowl","Number":"36826","RawContent":null,"Title":"This should fix the flaky test","State":"closed","Body":"- The pool in the test wasn't being used (This was changed in a previous commit)\r\n- Use the DisposeTrackingBufferPool to make sure we allocated the number of segments we expect","Url":"https://github.com/dotnet/corefx/pull/36826","RelatedDescription":"Closed or merged PR \"This should fix the flaky test\" (#36826)"},{"Id":"432653396","IsPullRequest":true,"CreatedAt":"2019-04-12T18:00:40","Actor":"Dotnet-GitSync-Bot","Number":"36822","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @sdmaclea @GrabYourPitchforks","Url":"https://github.com/dotnet/corefx/pull/36822","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#36822)"},{"Id":"432678039","IsPullRequest":true,"CreatedAt":"2019-04-12T17:54:09","Actor":"Tratcher","Number":"36827","RawContent":null,"Title":"Implement server-side of NegotiateStream on Unix","State":"open","Body":"#8221 @davidsh I'm starting this draft PR to show you the scope of the changes needed for this feature. I'll follow up with you offline.\r\n\r\nThe current code works end-to-end using a Windows client to authenticate via Kerberos to a Linux server that has been linked to the Windows domain. Ignore the tests, they were there there for manual verification and debugging. We'll need to discuss what's possible to automate with the given infrastructure.\r\n\r\nWe also need to work out what variants need to be supported and tested, and which should be blocked with explicit checks and error messages? E.g. NTLM, non-default credentials, Mac, etc.. cc: @blowdart \r\n\r\nI'm not including here an new public APIs for AspNetCore, nor have I tested the HTTP scenario, but that should follow easily from this foundational work.","Url":"https://github.com/dotnet/corefx/pull/36827","RelatedDescription":"Open PR \"Implement server-side of NegotiateStream on Unix\" (#36827)"},{"Id":"432670999","IsPullRequest":false,"CreatedAt":"2019-04-12T17:34:01","Actor":"xforever1313","Number":"36824","RawContent":null,"Title":"[Ping] Consider adding a way to specify a \"Source\" address while sending a ping.","State":"open","Body":"On the Windows command line, while sending a ping, one is able to specify the \"source address\" via the '-S' parameter, as show in the example below:\r\n\r\n```\r\nPS C:\\> ping 192.168.1.2 -S 192.168.3.2 -w 120000\r\n\r\nPinging 192.168.1.2 from 192.168.3.2 with 32 bytes of data:\r\nReply from 192.168.1.2: bytes=32 time=7056ms TTL=126\r\nReply from 192.168.1.2: bytes=32 time=7855ms TTL=126\r\nReply from 192.168.1.2: bytes=32 time=7753ms TTL=126\r\nReply from 192.168.1.2: bytes=32 time=7866ms TTL=126\r\n\r\nPing statistics for 192.168.1.2:\r\n    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),\r\nApproximate round trip times in milli-seconds:\r\n    Minimum = 7056ms, Maximum = 7866ms, Average = 7632ms\r\n ```   \r\nOn Linux, it appears as it behaves similarly, where the command is ```ping -S sourceIp destIp```\r\n    \r\nHowever, C#'s [Ping](https://github.com/dotnet/corefx/blob/16689aa0a933517dc45465fc6edb6223222414a6/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs) class doesn't seem to be able to set a source address.  This means that if we are on Windows, for example, we need to talk to the [IcmpSendEcho2Ex](https://docs.microsoft.com/en-us/windows/desktop/api/icmpapi/nf-icmpapi-icmpsendecho2ex) in iphlpapi.dll and provide it the source address that way.  Its not the end-of-the-world to do that, but it would be nice if we could configure the source address in the C# layer, if possible.\r\n\r\nPerhaps one way to do this is to add another property to PingOptions???\r\n","Url":"https://github.com/dotnet/corefx/issues/36824","RelatedDescription":"Open issue \"[Ping] Consider adding a way to specify a \"Source\" address while sending a ping.\" (#36824)"},{"Id":"432665722","IsPullRequest":true,"CreatedAt":"2019-04-12T17:18:53","Actor":"dotnet-maestro-bot","Number":"36823","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @ahsonkhan\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/36823","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#36823)"},{"Id":"432648088","IsPullRequest":false,"CreatedAt":"2019-04-12T16:28:55","Actor":"szilvaa","Number":"36821","RawContent":null,"Title":"ClientWebSocket should allow configuration of HttpMessageHandler pipeline for CONNECT","State":"open","Body":"HttpClient provides a flexible [HttpMessageHandler pipeline](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-2.2). Unfortunately, ClientWebSocket does allow the configuration of such pipeline. It directly instantiates [SocketsHttpHandler](https://github.com/dotnet/corefx/blob/master/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs#L97). It'd be nice to be able to use the same facilities for all HTTP requests.","Url":"https://github.com/dotnet/corefx/issues/36821","RelatedDescription":"Open issue \"ClientWebSocket should allow configuration of HttpMessageHandler pipeline for CONNECT\" (#36821)"},{"Id":"432615273","IsPullRequest":false,"CreatedAt":"2019-04-12T15:26:03","Actor":"hinteadan","Number":"36820","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/corefx/issues/36820","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#36820)"},{"Id":"432581030","IsPullRequest":false,"CreatedAt":"2019-04-12T13:59:41","Actor":"jdhawley","Number":"36818","RawContent":null,"Title":"FtpWebRequest Making Slow Requests and Throws WebExceptions","State":"open","Body":"Hi all,\r\n\r\nI've been working in .NET Framework to do some data retrieval and aggregation from different sources. However, project requirements have recently changed and I'm migrating a lot of the code from .NET Framework to .NET Core. Some of the data I'm pulling is accessed through an FTP site. It seems to work fine using .NET Framework but .NET Core is too slow for my project requirements and frequently throws WebExceptions while executing.\r\n\r\nBelow you will find the code I'm running, a \"good\" result (using .NET Framework), and a \"bad\" result (using .NET Core). I tried to upload a zip file containing the solution so somebody else could run the code themselves, but I couldn't get it to upload here for some reason. Instead, I just created a [repo with the source code](https://github.com/jdhawley/NetCoreFtpWebRequestIssue) so you can view the solution.\r\n\r\n### Code:\r\n```C#\r\npublic static void TestRtlmpRequests()\r\n{\r\n    DateTime operatingDay = DateTime.Today.AddDays(-1);\r\n    for (DateTime intervalEnd = operatingDay.Date.AddMinutes(5); intervalEnd <= operatingDay.AddDays(1); intervalEnd = intervalEnd.AddMinutes(5))\r\n    {\r\n        string year = intervalEnd.AddMinutes(-5).ToString(\"yyyy\");\r\n        string month = intervalEnd.AddMinutes(-5).ToString(\"MM\");\r\n        string day = intervalEnd.AddMinutes(-5).ToString(\"dd\");\r\n        string filename = \"RTBM-LMP-SL-\" + intervalEnd.ToString(\"yyyyMMddHHmm\") + \".csv\";\r\n        string url = $\"ftp://pubftp.spp.org/Markets/RTBM/LMP_By_SETTLEMENT_LOC/{year}/{month}/By_Interval/{day}/{filename}\";\r\n\r\n        var watch = new System.Diagnostics.Stopwatch();\r\n        try\r\n        {\r\n            watch.Start();\r\n            string response = GetRtlmp(url);\r\n            watch.Stop();\r\n            Console.WriteLine($\"SUCCESS ({watch.ElapsedMilliseconds}ms): {filename}\");\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"FAILED ({watch.ElapsedMilliseconds}ms): {filename}\");\r\n            Console.WriteLine($\"   {ex.ToString()}\");\r\n        }\r\n    }\r\n}\r\n\r\nprivate static string GetRtlmp(string url)\r\n{\r\n    FtpWebRequest downloadRequest = (FtpWebRequest)WebRequest.Create(url);\r\n    downloadRequest.Method = WebRequestMethods.Ftp.DownloadFile;\r\n    var response = downloadRequest.GetResponse();\r\n    var responseStream = response.GetResponseStream();\r\n\r\n    using (StreamReader reader = new StreamReader(responseStream))\r\n    {\r\n        return reader.ReadToEnd();\r\n    }\r\n}\r\n```\r\n\r\n### Acceptable results (truncated for brevity):\r\nSUCCESS (9718ms): RTBM-LMP-SL-201904100005.csv\r\nSUCCESS (412ms): RTBM-LMP-SL-201904100010.csv\r\nSUCCESS (420ms): RTBM-LMP-SL-201904100015.csv\r\nSUCCESS (423ms): RTBM-LMP-SL-201904100020.csv\r\nSUCCESS (405ms): RTBM-LMP-SL-201904100025.csv\r\nSUCCESS (426ms): RTBM-LMP-SL-201904100030.csv\r\nSUCCESS (564ms): RTBM-LMP-SL-201904100035.csv\r\nSUCCESS (421ms): RTBM-LMP-SL-201904100040.csv\r\nSUCCESS (417ms): RTBM-LMP-SL-201904100045.csv\r\nSUCCESS (437ms): RTBM-LMP-SL-201904100050.csv\r\nSUCCESS (410ms): RTBM-LMP-SL-201904100055.csv\r\nSUCCESS (515ms): RTBM-LMP-SL-201904100100.csv\r\nSUCCESS (416ms): RTBM-LMP-SL-201904100105.csv\r\nSUCCESS (427ms): RTBM-LMP-SL-201904100110.csv\r\nSUCCESS (420ms): RTBM-LMP-SL-201904100115.csv\r\nSUCCESS (412ms): RTBM-LMP-SL-201904100120.csv\r\nSUCCESS (413ms): RTBM-LMP-SL-201904100125.csv\r\nSUCCESS (412ms): RTBM-LMP-SL-201904100130.csv\r\nSUCCESS (413ms): RTBM-LMP-SL-201904100135.csv\r\nSUCCESS (419ms): RTBM-LMP-SL-201904100140.csv\r\nSUCCESS (461ms): RTBM-LMP-SL-201904100145.csv\r\nSUCCESS (418ms): RTBM-LMP-SL-201904100150.csv\r\nSUCCESS (403ms): RTBM-LMP-SL-201904100155.csv\r\nSUCCESS (425ms): RTBM-LMP-SL-201904100200.csv\r\nSUCCESS (408ms): RTBM-LMP-SL-201904100205.csv\r\nSUCCESS (422ms): RTBM-LMP-SL-201904100210.csv\r\nSUCCESS (438ms): RTBM-LMP-SL-201904100215.csv\r\nSUCCESS (420ms): RTBM-LMP-SL-201904100220.csv\r\nSUCCESS (413ms): RTBM-LMP-SL-201904100225.csv\r\nSUCCESS (409ms): RTBM-LMP-SL-201904100230.csv\r\nSUCCESS (406ms): RTBM-LMP-SL-201904100235.csv\r\nSUCCESS (420ms): RTBM-LMP-SL-201904100240.csv\r\nSUCCESS (421ms): RTBM-LMP-SL-201904100245.csv\r\nSUCCESS (399ms): RTBM-LMP-SL-201904100250.csv\r\nSUCCESS (420ms): RTBM-LMP-SL-201904100255.csv\r\nSUCCESS (412ms): RTBM-LMP-SL-201904100300.csv\r\nSUCCESS (404ms): RTBM-LMP-SL-201904100305.csv\r\nSUCCESS (430ms): RTBM-LMP-SL-201904100310.csv\r\nSUCCESS (434ms): RTBM-LMP-SL-201904100315.csv\r\nSUCCESS (418ms): RTBM-LMP-SL-201904100320.csv\r\nSUCCESS (416ms): RTBM-LMP-SL-201904100325.csv\r\nSUCCESS (428ms): RTBM-LMP-SL-201904100330.csv\r\nSUCCESS (414ms): RTBM-LMP-SL-201904100335.csv\r\nSUCCESS (411ms): RTBM-LMP-SL-201904100340.csv\r\nSUCCESS (406ms): RTBM-LMP-SL-201904100345.csv\r\nSUCCESS (397ms): RTBM-LMP-SL-201904100350.csv\r\nSUCCESS (405ms): RTBM-LMP-SL-201904100355.csv\r\nSUCCESS (449ms): RTBM-LMP-SL-201904100400.csv\r\nSUCCESS (392ms): RTBM-LMP-SL-201904100405.csv\r\nSUCCESS (404ms): RTBM-LMP-SL-201904100410.csv\r\nSUCCESS (388ms): RTBM-LMP-SL-201904100415.csv\r\nSUCCESS (406ms): RTBM-LMP-SL-201904100420.csv\r\nSUCCESS (407ms): RTBM-LMP-SL-201904100425.csv\r\nSUCCESS (385ms): RTBM-LMP-SL-201904100430.csv\r\nSUCCESS (406ms): RTBM-LMP-SL-201904100435.csv\r\nSUCCESS (396ms): RTBM-LMP-SL-201904100440.csv\r\nSUCCESS (400ms): RTBM-LMP-SL-201904100445.csv\r\nSUCCESS (403ms): RTBM-LMP-SL-201904100450.csv\r\nSUCCESS (400ms): RTBM-LMP-SL-201904100455.csv\r\nSUCCESS (394ms): RTBM-LMP-SL-201904100500.csv\r\nSUCCESS (390ms): RTBM-LMP-SL-201904100505.csv\r\nSUCCESS (388ms): RTBM-LMP-SL-201904100510.csv\r\nSUCCESS (404ms): RTBM-LMP-SL-201904100515.csv\r\nSUCCESS (417ms): RTBM-LMP-SL-201904100520.csv\r\nSUCCESS (410ms): RTBM-LMP-SL-201904100525.csv\r\nSUCCESS (461ms): RTBM-LMP-SL-201904100530.csv\r\nSUCCESS (386ms): RTBM-LMP-SL-201904100535.csv\r\nSUCCESS (411ms): RTBM-LMP-SL-201904100540.csv\r\nSUCCESS (587ms): RTBM-LMP-SL-201904100545.csv\r\nSUCCESS (415ms): RTBM-LMP-SL-201904100550.csv\r\nSUCCESS (401ms): RTBM-LMP-SL-201904100555.csv\r\nSUCCESS (461ms): RTBM-LMP-SL-201904100600.csv\r\n\r\n### Unacceptable Results (also truncated for brevity):\r\nSUCCESS (9310ms): RTBM-LMP-SL-201904100005.csv\r\nSUCCESS (10990ms): RTBM-LMP-SL-201904100010.csv\r\nFAILED (277ms): RTBM-LMP-SL-201904100015.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nFAILED (128ms): RTBM-LMP-SL-201904100020.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nSUCCESS (9296ms): RTBM-LMP-SL-201904100025.csv\r\nSUCCESS (15964ms): RTBM-LMP-SL-201904100030.csv\r\nSUCCESS (9914ms): RTBM-LMP-SL-201904100035.csv\r\nFAILED (124ms): RTBM-LMP-SL-201904100040.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nFAILED (127ms): RTBM-LMP-SL-201904100045.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nFAILED (119ms): RTBM-LMP-SL-201904100050.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nFAILED (116ms): RTBM-LMP-SL-201904100055.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nSUCCESS (9175ms): RTBM-LMP-SL-201904100100.csv\r\nSUCCESS (9541ms): RTBM-LMP-SL-201904100105.csv\r\nFAILED (144ms): RTBM-LMP-SL-201904100110.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nFAILED (125ms): RTBM-LMP-SL-201904100115.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28\r\nFAILED (151ms): RTBM-LMP-SL-201904100120.csv\r\n   System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive\r\n   at System.Net.FtpWebRequest.SyncRequestCallback(Object obj)\r\n   at System.Net.CommandStream.InvokeRequestCallback(Object obj)\r\n   at System.Net.CommandStream.Abort(Exception e)\r\n   at System.Net.FtpWebRequest.FinishRequestStage(RequestStage stage)\r\n   at System.Net.FtpWebRequest.GetResponse()\r\n   at EnelDataRetrievalLibrary.SppRtlmp.GetRtlmp(String url) in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 49\r\n   at EnelDataRetrievalLibrary.SppRtlmp.TestRtlmpRequests() in C:\\Users\\x2jdhawl\\source\\repos\\EnelDataRetrievalFramework\\EnelDataRetrievalLibrary\\SppRtlmp.cs:line 28","Url":"https://github.com/dotnet/corefx/issues/36818","RelatedDescription":"Open issue \"FtpWebRequest Making Slow Requests and Throws WebExceptions\" (#36818)"},{"Id":"432607856","IsPullRequest":false,"CreatedAt":"2019-04-12T13:55:06","Actor":"nataliaheliova","Number":"36819","RawContent":null,"Title":"XSD Validation throws an exception when self-closing tag used","State":"open","Body":"I came across an issue in .NET Core 2.1 when validating an XML containing self-closing tag. \r\n\r\nI have a model with property Value of generic type T:\r\n\r\n```c#\r\n[XmlInclude(typeof(Parameter<string>))]\r\npublic class Parameter\r\n{\r\n    [XmlAttribute]\r\n    public string Name { get; set; }\r\n}\r\npublic class Parameter<T> : Parameter\r\n{\r\n     public T Value { get; set; }\r\n}\r\n```\r\nThe corresponding XSD Schema snippet:\r\n\r\n```xml\r\n<xs:complexType name=\"parameter\">\r\n  <xs:attribute type=\"xs:string\" name=\"Name\" use=\"required\" />\r\n</xs:complexType>\r\n\r\n<xs:complexType name=\"stringParameter\">\r\n  <xs:complexContent>\r\n    <xs:extension base=\"parameter\">\r\n      <xs:sequence>\r\n        <xs:element name=\"Value\" minOccurs=\"0\" maxOccurs=\"1\"/>\r\n      </xs:sequence>\r\n    </xs:extension>\r\n  </xs:complexContent>\r\n</xs:complexType>\r\n```\r\n\r\nBoth the model and schema are part of a project targeting .NET Standard 2.0. \r\n\r\nThen I created test project targeting .NET Core 2.1 and .NET Framework 4.6.1 where I am trying to validate (and deserialize) XML containing following lines:\r\n\r\n```xml\r\n<Parameters>\r\n    <Parameter xsi:type=\"stringParameter\" Name=\"SomeName\">\r\n        <Value />\r\n     </Parameter>\r\n</Parameters>\r\n```\r\n\r\n.NET Framework 4.6.1 does not have any issue (XML is evaluated as valid and is sucessfully deserialized). Validation under .NET Core 2.1 fails (by which I do NOT mean that as a result the XML is invalid, the validation process just crashes) and throws the following exception:\r\n\r\n```\r\nSystem.InvalidOperationException: There is an error in XML document (1, 226). ---> System.ArgumentNullException: Value cannot be null.\r\nParameter name: value\r\n    at System.Xml.Schema.XmlUntypedConverter.ToString(Object value, IXmlNamespaceResolver nsResolver)\r\n   at System.Xml.Schema.XmlBaseConverter.ToString(Object value)\r\n   at System.Xml.XsdValidatingReader.ReadElementContentAsString()\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderRootClass.Read2_ParameterOfString(Boolean isNullable, Boolean checkType)\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderRootClass.Read3_Parameter(Boolean isNullable, Boolean checkType)\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderRootClass.Read4_RootClass(Boolean isNullable, Boolean checkType)\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderRootClass.Read5_RootClass()\r\n--- End of inner exception stack trace ---\r\n    at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events)\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader)\r\n```\r\n\r\nI could find two workarounds to make it work:\r\n1.) In XML, replace `<Value />` with `<Value></Value>`\r\nor 2.) In XSD, add `type=\"xs:string\"`  to element Value\r\n\r\nBut still, it is strange, isn't it?\r\n\r\nSmall example with both schemas:\r\n[Serializer.zip](https://github.com/dotnet/core/files/3073480/Serializer.zip)\r\n\r\nOperating system: Windows 10 1803\r\nIDE: Visual Studio 2017 15.9.6\r\n\r\nThanks,\r\nNatalia","Url":"https://github.com/dotnet/corefx/issues/36819","RelatedDescription":"Open issue \"XSD Validation throws an exception when self-closing tag used\" (#36819)"},{"Id":"432576655","IsPullRequest":false,"CreatedAt":"2019-04-12T13:50:21","Actor":"xljiulang","Number":"36817","RawContent":null,"Title":"Designing an [AttributeCtorUsageAttribute] that constrains the constructor of a custom attribute to declare the specified target","State":"open","Body":"For a custom attribute, we already have the [AttributeUsage] to constrain its targets, but when it has multiple constructors, we can't limit a constructor to declare at one or more sub target. So I hope to design this new [AttributeCtorUsageAttribute].\r\n\r\n>  AttributeCtorUsage\r\n\r\n```\r\n[AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false)]\r\npublic sealed class AttributeCtorUsageAttribute : Attribute\r\n{\r\n    public AttributeTargets Targets { get; }\r\n\r\n    public AttributeCtorUsageAttribute(AttributeTargets targets)\r\n    {\r\n        this.Targets = targets;\r\n    }\r\n}\r\n```\r\n>  Custom attribute\r\n\r\n```\r\n[AttributeUsage(AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\npublic class TimeoutAttribute : ApiActionAttribute, IApiParameterAttribute\r\n{\r\n    [AttributeCtorUsage(AttributeTargets.Parameter)]\r\n    public TimeoutAttribute()\r\n    {\r\n    }\r\n\r\n    [AttributeCtorUsage(AttributeTargets.Interface | AttributeTargets.Method)]\r\n    public TimeoutAttribute(int milliseconds)     \r\n    {\r\n    }\r\n}\r\n```\r\n\r\nI need this feature in my project, and now I can only detect [AttributeCtorUsage] by the extended diagnostic analyzer.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36817","RelatedDescription":"Open issue \"Designing an [AttributeCtorUsageAttribute] that constrains the constructor of a custom attribute to declare the specified target\" (#36817)"},{"Id":"432553754","IsPullRequest":true,"CreatedAt":"2019-04-12T12:58:52","Actor":"dotnet-maestro[bot]","Number":"36816","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190411.72\r\n- **Date Produced**: 4/12/2019 12:42 AM\r\n- **Commit**: 759e3777aad6e711c6c6171ee738df9f38e877a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview5-27611-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview5-27611-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview5-27611-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36816","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#36816)"},{"Id":"432548693","IsPullRequest":true,"CreatedAt":"2019-04-12T12:46:07","Actor":"dotnet-maestro[bot]","Number":"36815","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190411.1\r\n- **Date Produced**: 4/11/2019 12:48 PM\r\n- **Commit**: f576336cefe3ecea599de9c7d0aa995ede4f0c39\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19211.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36815","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#36815)"},{"Id":"432544523","IsPullRequest":true,"CreatedAt":"2019-04-12T12:35:52","Actor":"dotnet-maestro[bot]","Number":"36814","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190411.22\r\n- **Date Produced**: 4/12/2019 4:57 AM\r\n- **Commit**: fe5c12ad8315e043e62285117a56bba1784756d1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19211.22\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36814","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#36814)"},{"Id":"432541918","IsPullRequest":true,"CreatedAt":"2019-04-12T12:29:10","Actor":"dotnet-maestro[bot]","Number":"36813","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190411.18\r\n- **Date Produced**: 4/12/2019 7:20 AM\r\n- **Commit**: b159f4bf9614203a0c60a20f5469d5226f3f12e7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27611-18\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview5-27611-18\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview5-27611-18\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36813","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#36813)"},{"Id":"432532323","IsPullRequest":true,"CreatedAt":"2019-04-12T12:03:22","Actor":"dotnet-maestro[bot]","Number":"36812","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19211.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19211.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.SourceRewriter** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36812","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#36812)"},{"Id":"432395122","IsPullRequest":true,"CreatedAt":"2019-04-12T11:42:35","Actor":"davidfowl","Number":"36810","RawContent":null,"Title":"Get more information about a flaky test","State":"closed","Body":"#36800","Url":"https://github.com/dotnet/corefx/pull/36810","RelatedDescription":"Closed or merged PR \"Get more information about a flaky test\" (#36810)"},{"Id":"432473133","IsPullRequest":true,"CreatedAt":"2019-04-12T09:29:36","Actor":"madmir","Number":"36811","RawContent":null,"Title":"Improve Utf8JsonWriter code coverage","State":"open","Body":"* Added test using FixedSizedBufferWriter when the buffer is too small\r\n* Edited test for WriteCommentValue so that escaped comments are included as well","Url":"https://github.com/dotnet/corefx/pull/36811","RelatedDescription":"Open PR \"Improve Utf8JsonWriter code coverage\" (#36811)"},{"Id":"432390155","IsPullRequest":false,"CreatedAt":"2019-04-12T05:12:13","Actor":"tmds","Number":"36809","RawContent":null,"Title":"DefaultLoadContextTests.LoadInDefaultContext test failure","State":"open","Body":"This test has been failing on my machine (Fedora 28) when running corefx tests for a while. I have not investigated further. This is in the testResults.xml:\r\n```\r\n      <test name=\"System.Runtime.Loader.Tests.DefaultLoadContextTests.LoadInDefaultContext\" type=\"System.Runtime.Loader.Tests.DefaultLoadContextTests\" method=\"LoadInDefaultContext\" time=\"0.0075109\" result=\"Fail\">\r\n        <traits>\r\n          <trait name=\"category\" value=\"nonuapaottests\" />\r\n        </traits>\r\n        <failure exception-type=\"Xunit.Sdk.ThrowsException\">\r\n          <message><![CDATA[Assert.Throws() Failure\\nExpected: typeof(System.IO.FileNotFoundException)\\nActual:   (No exception was thrown)]]></message>\r\n          <stack-trace><![CDATA[   at System.Runtime.Loader.Tests.DefaultLoadContextTests.LoadInDefaultContext() in /home/tmds/repos/corefx/src/System.Runtime.Loader/tests/DefaultContext/DefaultLoadContextTest.cs:line 94]]></stack-trace>\r\n        </failure>\r\n      </test>\r\n```","Url":"https://github.com/dotnet/corefx/issues/36809","RelatedDescription":"Open issue \"DefaultLoadContextTests.LoadInDefaultContext test failure\" (#36809)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"432784286","IsPullRequest":true,"CreatedAt":"2019-04-13T01:30:04","Actor":"dotnet-bot","Number":"34972","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34972","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#34972)"},{"Id":"432788778","IsPullRequest":true,"CreatedAt":"2019-04-13T00:36:50","Actor":"CyrusNajmabadi","Number":"34974","RawContent":null,"Title":"Ignore completion item span","State":"open","Body":"Followup to https://github.com/dotnet/roslyn/pull/34952\r\n\r\nThis is currently mutable, which makes sharing completion items hard.  Now, instead, we just track the completion span we are told on the completion context and pass that along at the end when making changes. That helps ensure completion items can be safely shared across invocations.","Url":"https://github.com/dotnet/roslyn/pull/34974","RelatedDescription":"Open PR \"Ignore completion item span\" (#34974)"},{"Id":"432787091","IsPullRequest":true,"CreatedAt":"2019-04-13T00:21:47","Actor":"gafter","Number":"34973","RawContent":null,"Title":"Correct nullability analysis in conditional access","State":"open","Body":"Fixes #29956","Url":"https://github.com/dotnet/roslyn/pull/34973","RelatedDescription":"Open PR \"Correct nullability analysis in conditional access\" (#34973)"},{"Id":"432770619","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:18","Actor":"dotnet-bot","Number":"34967","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34967","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#34967)"},{"Id":"432770644","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:14","Actor":"dotnet-bot","Number":"34968","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34968","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#34968)"},{"Id":"432770659","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:08","Actor":"dotnet-bot","Number":"34969","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34969","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#34969)"},{"Id":"432777251","IsPullRequest":false,"CreatedAt":"2019-04-12T23:15:05","Actor":"TIHan","Number":"34971","RawContent":null,"Title":"Add unit test for F# Glyph mapping","State":"open","Body":"We need to add a unit test to ensure that **Roslyn to FSharp Glyph** mapping works when this PR is merged: https://github.com/dotnet/roslyn/pull/34945","Url":"https://github.com/dotnet/roslyn/issues/34971","RelatedDescription":"Open issue \"Add unit test for F# Glyph mapping\" (#34971)"},{"Id":"432770677","IsPullRequest":true,"CreatedAt":"2019-04-12T22:42:03","Actor":"dotnet-bot","Number":"34970","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34970","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#34970)"},{"Id":"432755737","IsPullRequest":true,"CreatedAt":"2019-04-12T21:40:44","Actor":"daytonellwanger","Number":"34966","RawContent":null,"Title":"Add IVTs to 16.1 version of RemoteLS","State":"open","Body":"The 16.1 edition of [this PR](https://github.com/dotnet/roslyn/commit/260ed1e4ce1cc6a269aae94b09ed6fedf1a09844).","Url":"https://github.com/dotnet/roslyn/pull/34966","RelatedDescription":"Open PR \"Add IVTs to 16.1 version of RemoteLS\" (#34966)"},{"Id":"432743805","IsPullRequest":true,"CreatedAt":"2019-04-12T21:00:22","Actor":"chborl","Number":"34965","RawContent":null,"Title":"Offer 'convert concatenated to interpolated string' refactoring when inside an interpolated string","State":"open","Body":"Fixes 31865","Url":"https://github.com/dotnet/roslyn/pull/34965","RelatedDescription":"Open PR \"Offer 'convert concatenated to interpolated string' refactoring when inside an interpolated string\" (#34965)"},{"Id":"432737529","IsPullRequest":true,"CreatedAt":"2019-04-12T20:42:32","Actor":"JoeRobich","Number":"34964","RawContent":null,"Title":"Allow the simplification of using directives where the global alias is specified","State":"open","Body":"This PR is being created to simplify https://github.com/dotnet/roslyn/pull/30760\r\n\r\nUsingDirectives that are expanded using `Simplifier.Expand` are given the `global::` alias which is not removed when calling `Simplifier.ReduceAsync`.","Url":"https://github.com/dotnet/roslyn/pull/34964","RelatedDescription":"Open PR \"Allow the simplification of using directives where the global alias is specified\" (#34964)"},{"Id":"432730046","IsPullRequest":true,"CreatedAt":"2019-04-12T20:21:41","Actor":"JoeRobich","Number":"34963","RawContent":null,"Title":"Create mapping from NotificationOption to EditorConfig severity string.","State":"open","Body":"This PR is being created to simplify #30760\r\n\r\n`notificationOption.ToString().ToLowerInvariant();` would return a localized string instead of the correct severity string.","Url":"https://github.com/dotnet/roslyn/pull/34963","RelatedDescription":"Open PR \"Create mapping from NotificationOption to EditorConfig severity string.\" (#34963)"},{"Id":"432725971","IsPullRequest":false,"CreatedAt":"2019-04-12T20:10:31","Actor":"gafter","Number":"34962","RawContent":null,"Title":"IDE005 \"Fix formatting\" does a poor job with a switch expression as the body of an expression-bodied method","State":"open","Body":"Given this method\r\n\r\n``` c#\r\n        public static NullableAnnotation EnsureCompatible(this NullableAnnotation a, NullableAnnotation b) =>\r\n            (a, b) switch\r\n            {\r\n                (NullableAnnotation.Oblivious, _) => b,\r\n                (_, NullableAnnotation.Oblivious) => a,\r\n                _ => a < b ? a : b,\r\n            };\r\n```\r\n\r\nThe IDE005 \"Fix formatting\" diagnostic wants the body of the switch expression (curly braces and what is between them) to be less indented by four spaces.  That seems wrong in this context.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34962","RelatedDescription":"Open issue \"IDE005 \"Fix formatting\" does a poor job with a switch expression as the body of an expression-bodied method\" (#34962)"},{"Id":"432723161","IsPullRequest":false,"CreatedAt":"2019-04-12T20:02:08","Actor":"vsfeedback","Number":"34961","RawContent":null,"Title":"Quick actions and refactorings... Remove region","State":"open","Body":"<p>Would be nice to have the option to remove a region with a refactoring. Right now you have to delete the  #region  and #endregion  lines manually to remove them since regions are mostly considered bad practice</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/522170/quick-actions-and-refactorings-remove-region.html\nVSTS ticketId: 842445_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 4/9/2019, 02:05 AM (3 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/34961","RelatedDescription":"Open issue \"Quick actions and refactorings... Remove region\" (#34961)"},{"Id":"432714288","IsPullRequest":false,"CreatedAt":"2019-04-12T19:34:52","Actor":"RikkiGibson","Number":"34960","RawContent":null,"Title":"Reduce allocations related to SyntaxTokenList in MetadataAsSourceService","State":"open","Body":"There are a lot of usages of `new List<SyntaxToken>()` instead of `ArrayBuilder<SyntaxToken>.GetInstance()`. It would be nice to fix this up in the C# and VB MetadataAsSource implementations.\r\n\r\nIt would also be good to introduce constructor which takes `ArrayBuilder<SyntaxToken>` instead of `IEnumerable<SyntaxToken>` and reduces copying as much as possible.\r\n\r\nSee https://github.com/dotnet/roslyn/pull/34778#discussion_r272446817 and https://github.com/dotnet/roslyn/pull/34778#discussion_r274684831","Url":"https://github.com/dotnet/roslyn/issues/34960","RelatedDescription":"Open issue \"Reduce allocations related to SyntaxTokenList in MetadataAsSourceService\" (#34960)"},{"Id":"432695722","IsPullRequest":true,"CreatedAt":"2019-04-12T18:41:36","Actor":"chborl","Number":"34959","RawContent":null,"Title":"Allow `ignore spaces around declaration` to work when `preserve single line statements` is set to false","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/31868\r\n\r\nAdded tests and put in a possible fix.  There are likely other scenarios to consider, but wanted to get feedback on if this is the right approach.  ","Url":"https://github.com/dotnet/roslyn/pull/34959","RelatedDescription":"Open PR \"Allow `ignore spaces around declaration` to work when `preserve single line statements` is set to false\" (#34959)"},{"Id":"432575177","IsPullRequest":false,"CreatedAt":"2019-04-12T13:47:12","Actor":"jairbubbles","Number":"34958","RawContent":null,"Title":"Nullable reference on simple real-life cases","State":"open","Body":"*I've been trying out the new nullable reference features on a project which uses null references a little bit too much.*\r\n\r\n*Here are 4 cases that I naively though would work. I hope they are useful for you as they are real-life examples. Clearly some of the examples would need a rewrite but for the feature to be widely adopted (which I hope) Roslyn will need to help on the transition path.*\r\n\r\n*I added a comment on each to explain what behavior I expected.*\r\n\r\n*I hope it will be useful!*\r\n\r\n**Version Used**: \r\n\r\nVisual Studio 2019 16.1.0 Preview 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n- New class library .NET Standard\r\n- Edit .csproj to enable the feature:\r\n```xml\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0</TargetFrameworks>\r\n    <LangVersion>preview</LangVersion>\r\n    <NullableContextOptions>safeonly</NullableContextOptions>\r\n  </PropertyGroup>\r\n```\r\n- Paste this code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\n\r\nnamespace TestNullableReferences\r\n{\r\n    public class LazyInitWithMethod\r\n    {\r\n        List<string>? _items;\r\n\r\n        private void InitList()\r\n        {\r\n            _items ??= new List<string>();\r\n        }\r\n\r\n        public List<string> Items()\r\n        {\r\n            InitList();\r\n\r\n            // I would expect no warning but I get a CS8603: Possible null reference return\r\n            return _items;\r\n        }\r\n    }\r\n\r\n    public class BadCast\r\n    {\r\n        public DateTime GetTime(object value)\r\n        {\r\n            if (value is FileInfo)\r\n            {\r\n                var fileInfo = value as FileInfo;\r\n                // I would expect no warning but I get a CS8602: Dereference of a possibly null reference\r\n                return fileInfo.CreationTime;\r\n            }\r\n\r\n            return DateTime.MinValue;\r\n        }\r\n    }\r\n\r\n    public class LinqLambda\r\n    {\r\n        readonly List<FileInfo> _files = new List<FileInfo>();\r\n\r\n        public IEnumerable<FileInfo> GetMatchingItems(FileInfo? item = null)\r\n        {\r\n            // I would expect no warning but I get a CS8602: Dereference of a possibly null reference\r\n            return item == null ? Enumerable.Empty<FileInfo>() : _files.Where(x => x.FullName == item.FullName); \r\n        }\r\n    }\r\n\r\n    public class LinqFunctions\r\n    {\r\n        readonly List<FileInfo> _files = new List<FileInfo>();\r\n\r\n        public FileInfo GetFiles(DateTime date)\r\n        {\r\n            // I would expect a warning CS8603: Possible null reference return\r\n            return _files.FirstOrDefault(x => x.CreationTime > date); \r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34958","RelatedDescription":"Open issue \"Nullable reference on simple real-life cases\" (#34958)"},{"Id":"432330313","IsPullRequest":true,"CreatedAt":"2019-04-12T13:30:17","Actor":"dotnet-bot","Number":"34947","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34947","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#34947)"},{"Id":"432531331","IsPullRequest":true,"CreatedAt":"2019-04-12T13:30:11","Actor":"dotnet-bot","Number":"34956","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34956","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#34956)"},{"Id":"432541768","IsPullRequest":false,"CreatedAt":"2019-04-12T12:28:46","Actor":"jnyrup","Number":"34957","RawContent":null,"Title":"Unexpected value 'UnsetConversionKind'","State":"open","Body":"**Version Used**: \r\nVisual Studio 16.1.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\nI don't have an exact case as the crash happened during rewriting some code and I haven't been able to reproduce it yet.\r\nThe code was somewhat similar to:\r\n```\r\nvar a = new List<int>();\r\nvar b = new List<int>();\r\n\r\nforeach ((int x, int y, int z) in\r\n    a.Zip(\r\n    b.Join(b,\r\n            e => e,\r\n            e => e,\r\n            (s, t) => (s, t)),\r\n    (f, g) => (f, g.s, g.t)))\r\n{\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo exception.\r\n\r\n**Actual Behavior**:\r\n```\r\nSystem.InvalidOperationException : Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)\r\n   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()\r\n   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion,Conversion newConversion)\r\n   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel,CommonForEachStatementSyntax originalForEach,SemanticModel newModel,CommonForEachStatementSyntax newForEach)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode previousOriginalNode,SyntaxNode previousReplacedNode)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax& replacementNode,TextSpan& issueSpan,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax& replacementNode,TextSpan& issueSpan,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax& replacementNode,TextSpan& issueSpan,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachVariableStatement(ForEachVariableStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)\r\n   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.<>c__DisplayClass10_1.<ReduceAsync>b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nIt looks like https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/ConversionKindExtensions.cs is missing a case for `UnsetConversionKind` after that enum was added in #33648.","Url":"https://github.com/dotnet/roslyn/issues/34957","RelatedDescription":"Open issue \"Unexpected value 'UnsetConversionKind'\" (#34957)"},{"Id":"432436924","IsPullRequest":true,"CreatedAt":"2019-04-12T08:00:04","Actor":"v-zbsail","Number":"34955","RawContent":null,"Title":"LOC CHECKIN | dotnet/roslyn master | 20190412","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34955","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/roslyn master | 20190412\" (#34955)"},{"Id":"432436432","IsPullRequest":false,"CreatedAt":"2019-04-12T07:58:40","Actor":"jnyrup","Number":"34954","RawContent":null,"Title":"References of kind Qualify are missing method name","State":"open","Body":"**Version Used**: \r\n16.1.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n```c#\r\npublic class Class1\r\n    {\r\n        public async void Bar() => await Task.Delay(0);\r\n\r\n        public async Task Baz() => await Task.Delay(0);\r\n    }\r\n```\r\n\r\n1. Find all references on `Task` \r\n2. Look at the \"'Task' references\" window.\r\n\r\n**Expected Behavior**:\r\nThe two references of kind Qualify should both show `Task.Delay(0)`\r\n\r\n**Actual Behavior**:\r\nFor `Bar` it only shows `Task.(0)`\r\n![image](https://user-images.githubusercontent.com/919634/56020957-9c9a7300-5d08-11e9-934c-7263182e8445.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/34954","RelatedDescription":"Open issue \"References of kind Qualify are missing method name\" (#34954)"},{"Id":"432408468","IsPullRequest":false,"CreatedAt":"2019-04-12T06:33:59","Actor":"cincuranet","Number":"34953","RawContent":null,"Title":"Using ConfigureAwait in \"await using\" declaration","State":"open","Body":"**Version Used**: \r\n3.0.100-preview3-010431\r\n\r\n**Steps to Reproduce**:\r\n\r\nWhen running the code below, the compiler says `error CS1061: 'ConfiguredAsyncDisposable' does not contain a definition for 'Dummy' and no accessible extension method 'Dummy' accepting a first argument of type 'ConfiguredAsyncDisposable' could be found (are you missing a using directive or an assembly reference?)` which makes absolute sense.\r\n\r\n```csharp\r\nnamespace test\r\n{\r\n\tclass AwaitUsingConfigureAwaitTest: IAsyncDisposable\r\n\t{\r\n\t\tpublic async ValueTask DisposeAsync()\r\n\t\t{\r\n\t\t\tawait Task.CompletedTask;\t\r\n\t\t}\r\n\r\n\t\tpublic async Task FooBar()\r\n\t\t{\r\n\t\t\tawait using (var test = new AwaitUsingConfigureAwaitTest().ConfigureAwait(false))\r\n\t\t\t{\r\n\t\t\t\ttest.Dummy();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void Dummy() { }\r\n\t}\r\n}\r\n```\r\n\r\nThat means the code has to be written like this.\r\n\r\n```csharp\r\npublic async Task FooBar()\r\n{\r\n\tvar test = new AwaitUsingConfigureAwaitTest();\r\n\tawait using (test.ConfigureAwait(false))\r\n\t{\r\n\t\ttest.Dummy();\r\n\t}\r\n}\r\n```\r\n\r\nNot as succinct as before. \r\n\r\nIs this the final state of this feature or is there some work still pending around this area?\r\n","Url":"https://github.com/dotnet/roslyn/issues/34953","RelatedDescription":"Open issue \"Using ConfigureAwait in \"await using\" declaration\" (#34953)"},{"Id":"432399819","IsPullRequest":true,"CreatedAt":"2019-04-12T05:59:00","Actor":"CyrusNajmabadi","Number":"34952","RawContent":null,"Title":"Remove 'Document' from CompletionItem","State":"open","Body":"As part of teh \"show completion for items you don't have usings for\" feature, we'd like to be able to cache CompletionItems so we don't have to keep recreating vast numbers of the same items over and over again.\r\n\r\nThis is slightly problematic because CompletionItems today hold onto `Document`s, and that means an entire snapshot of the world from teh past is held onto.  \r\n\r\nThis PR changes CompletionItem to be pure data, without a hard link to a potentially very expensive piece of data like `Document`.","Url":"https://github.com/dotnet/roslyn/pull/34952","RelatedDescription":"Open PR \"Remove 'Document' from CompletionItem\" (#34952)"},{"Id":"432376924","IsPullRequest":false,"CreatedAt":"2019-04-12T03:58:44","Actor":"pjc0247","Number":"34951","RawContent":null,"Title":"Creates new SyntaxNode from 3rd-party","State":"open","Body":"I have a class something like below\r\n```cs\r\ninternal class EvaluatedArgumentListSyntax : ExpressionSyntax\r\n{ }\r\n```\r\nThis one won't be compiled due to errors.\r\nSome abstract methods have `internal` access modifier, so I can't make a derived class.\r\n\r\nhttps://dotnetfiddle.net/r79Jyw\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34951","RelatedDescription":"Open issue \"Creates new SyntaxNode from 3rd-party\" (#34951)"},{"Id":"432330344","IsPullRequest":true,"CreatedAt":"2019-04-12T01:30:05","Actor":"dotnet-bot","Number":"34948","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34948","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#34948)"},{"Id":"432332713","IsPullRequest":false,"CreatedAt":"2019-04-12T00:10:50","Actor":"ajaybhargavb","Number":"34950","RawContent":null,"Title":"Errors in ErrorList pane on lines with #line pragma doesn't navigate to the source file","State":"open","Body":"**Version Used**: \r\nVS 16.1 Preview 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `dotnet new console`\r\n2. Replace content of `Main` method with\r\n```cs\r\n        static void Main(string[] args)\r\n        {\r\n#line 2 \"Test.txt\"\r\n            Console.WriteLin(\"Hello World!\"); // Intentional typo to show error\r\n#line default\r\n        }\r\n```\r\n3. Create a file called `Test.txt` and put some content in it.\r\n\r\n**Expected Behavior**:\r\nError shows in error list. Double clicking it navigates to `Test.txt`\r\n\r\n**Actual Behavior**:\r\nError shows in error list. Double clicking it navigates to `Program.cs` or does nothing.\r\nThis happens on both live and build errors\r\n\r\nNote: Putting a breakpoint in `Test.txt` and F5ing correctly hits that breakpoint. So it's not a file path issue.\r\n\r\ncc @heejaechang ","Url":"https://github.com/dotnet/roslyn/issues/34950","RelatedDescription":"Open issue \"Errors in ErrorList pane on lines with #line pragma doesn't navigate to the source file\" (#34950)"},{"Id":"432330364","IsPullRequest":true,"CreatedAt":"2019-04-12T00:00:45","Actor":"dotnet-bot","Number":"34949","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34949","RelatedDescription":"Open PR \"Merge master to demos/records\" (#34949)"},{"Id":"432290333","IsPullRequest":false,"CreatedAt":"2019-04-11T22:14:58","Actor":"AlekseyTs","Number":"34946","RawContent":null,"Title":"It looks like TupleTypeSymbol.WithUnderlyingType always creates a new instance even when the new type is the same as the old one","State":"open","Body":"This can cause extra allocations for otherwise insignificant nullable transform.","Url":"https://github.com/dotnet/roslyn/issues/34946","RelatedDescription":"Open issue \"It looks like TupleTypeSymbol.WithUnderlyingType always creates a new instance even when the new type is the same as the old one\" (#34946)"},{"Id":"432269105","IsPullRequest":true,"CreatedAt":"2019-04-11T21:53:56","Actor":"TIHan","Number":"34945","RawContent":null,"Title":"FSharp Shim - First Phase","State":"open","Body":"This needs to be inserted in conjunction with this PR: https://github.com/Microsoft/visualfsharp/pull/6498","Url":"https://github.com/dotnet/roslyn/pull/34945","RelatedDescription":"Open PR \"FSharp Shim - First Phase\" (#34945)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"431682244","IsPullRequest":true,"CreatedAt":"2019-04-12T22:14:12","Actor":"trylek","Number":"7282","RawContent":null,"Title":"Improving PE section management in CPAOT","State":"closed","Body":"The ability to use SuperIlc to ILC the entire Pri#1 test suite\r\nlet me quickly identify several remaining CPAOT compilation\r\nissues. This change should be fixing the biggest bucket of 8\r\nfailing compilations.\r\n\r\nAs in contrast to Crossgen we don't copy the input MSIL\r\nselectively to the output R2R PE image (which may change soon\r\nwith Simon's latest changes), in case of RVA fields we just\r\nstore the section name in which the field content resides\r\nand, when serializing the sections to the output PE, we\r\nresolve the appropriate SectionStartNode's in the symbol map\r\nfor the relocation pass.\r\n\r\nAs the R2R PE emitter is basically the oldest part of the CPAOT\r\ncompiler, I was naturally making various arbitrary choices during\r\nits initial implementation and because of this the section\r\nmanagement logic ended up somewhat randomly scattered among\r\nReadyToRunObjectWriter, SectionBuilder and R2RPEBuilder.\r\n\r\nThe SectionBuilder only knew about the sections emitted by\r\nthe CPAOT compiler itself, not about the incoming sections from\r\nthe input MSIL; those got only combined with the SectionBuilder\r\nsections in R2RPEBuilder constructor.\r\n\r\nDue to this fact the section serialization code in SectionBuilder\r\ndidn't know about the MSIL section holding the RVA field (as it\r\nwasn't one of the sections produced by the CPAOT compiler) and\r\nso it didn't resolve its start node in the symbol map.\r\n\r\nTo fix this, I have centralized the logic for building the list\r\nof output sections in SectionBuilderExtensions.PrepareSections\r\nwhere we compose the complete section list upfront and set it\r\nto SectionBuilder. R2RPEBuilder constructor can be much simpler\r\nas it can reuse the SectionBuilder section map and the section\r\nstart nodes get properly resolved even for the MSIL input\r\nsections.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I tried to explain the logic in maximum detail because\r\naccording to our yesterday meeting Simon is investigating / making\r\nchanges in this area as part of removing the previously produced\r\nR2R code when CPAOT-compiling an already R2R-compiled PE executable\r\nand RVA field management is exactly the area that will break and\r\nwill need fixing if he decides to switch over to selective copying\r\nof the input executable to the R2R output file as opposed to blindly\r\ncopying all the pre-existing sections as we do today.","Url":"https://github.com/dotnet/corert/pull/7282","RelatedDescription":"Closed or merged PR \"Improving PE section management in CPAOT\" (#7282)"},{"Id":"432757001","IsPullRequest":true,"CreatedAt":"2019-04-12T21:45:23","Actor":"nattress","Number":"7290","RawContent":null,"Title":"[WIP] Update CoreCLR test scripting","State":"open","Body":"The scripts to support running downloaded CoreCLR tests are from 2017 and have received some compelling updates since then:\r\n\r\n- No longer depend on desktop Xunit runner (`xunit.runner.msbuild`) and instead uses `xunit.console`. This should unblock https://github.com/dotnet/corert/issues/7032.\r\n- Cross platform Python script to drive test execution which lets us remove a bunch of the scripting we brought over last time.\r\n\r\nThe process here was similar to last time - drop runtest.py into this repo and then bring over enough scripts to make it run the test tree. Alternatively, we could have re-written this scripting to clone CoreCLR, build the product and tests, and run them with a custom launcher that first runs CPAOT / ILC. This takes about 25 minutes for the Pri0 tests and would slow our CI down significantly. The Pri0 test binaries are stored in an Azure blob which downloads and extracts in 1 minute at a periodic cost of updating these scripts (currently a 2 year period).\r\n\r\nThe Windows test binaries are supported with this commit. Unix support will be added once the CI looks good for Windows.\r\n\r\nNB: The wrappers are extremely slow to generate (5 minutes on my machine) and run each time we run CoreCLR tests. If we change test exclusion file they need generating, otherwise we can re-use if it's the same test subset. An optimization here would improve quality of life.\r\n\r\nNB2: @trylek FYI since this necessarily involves updating the binary test zips, we may see CPAOT pass rate regressions. There are also ~300 more tests than before based on a quick `dir /s *.cmd`.","Url":"https://github.com/dotnet/corert/pull/7290","RelatedDescription":"Open PR \"[WIP] Update CoreCLR test scripting\" (#7290)"},{"Id":"432697541","IsPullRequest":true,"CreatedAt":"2019-04-12T18:46:53","Actor":"krwq","Number":"7289","RawContent":null,"Title":"Remove duplicate GetCurrentThreadId","State":"open","Body":"Found as part of https://github.com/dotnet/coreclr/pull/23914\r\ncc: @stephentoub ","Url":"https://github.com/dotnet/corert/pull/7289","RelatedDescription":"Open PR \"Remove duplicate GetCurrentThreadId\" (#7289)"},{"Id":"432668188","IsPullRequest":true,"CreatedAt":"2019-04-12T17:26:12","Actor":"Dotnet-GitSync-Bot","Number":"7288","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @tannergooding @tarekgh @luhenry @filipnavara @EgorBo @sdmaclea @stephentoub @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7288","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7288)"},{"Id":"432654145","IsPullRequest":true,"CreatedAt":"2019-04-12T17:18:40","Actor":"Dotnet-GitSync-Bot","Number":"7287","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub @sdmaclea @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7287","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7287)"},{"Id":"432535975","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:54","Actor":"MichalStrehovsky","Number":"7286","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7286","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7286)"},{"Id":"432440813","IsPullRequest":false,"CreatedAt":"2019-04-12T08:10:11","Actor":"RehanSaeed","Number":"7285","RawContent":null,"Title":"Techniques for Reducing Size of .NET Native Binaries","State":"open","Body":"I'm working on a UWP app being built with .NET native. Reducing the app size is very important. Are there any techniques, guidance or documentation available to help reduce the app size? Are there ways we can help the .NET native tree shaking algorithm be more effective? \r\n\r\nSome of the simple techniques I can think of are pretty basic:\r\n\r\n1. Code reuse.\r\n2. Avoid `await` as this generates a lot of state machine code e.g. Adding six awaits increased the size of my app by 20KB.\r\n3. Compress static assets like images etc.","Url":"https://github.com/dotnet/corert/issues/7285","RelatedDescription":"Open issue \"Techniques for Reducing Size of .NET Native Binaries\" (#7285)"},{"Id":"432169261","IsPullRequest":true,"CreatedAt":"2019-04-12T05:19:03","Actor":"Dotnet-GitSync-Bot","Number":"7284","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7284","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7284)"},{"Id":"431720505","IsPullRequest":true,"CreatedAt":"2019-04-11T20:12:31","Actor":"trylek","Number":"7283","RawContent":null,"Title":"Minor SuperIlc fixes / improvements found while using the tool","State":"closed","Body":"One non-trivial revelation I made is that my previous introduction\r\nof Outcome was inconsistent w.r.t. the summary table as there is\r\ngenerally a different number of compilations and executions.\r\nI have fixed this by splitting the summary table in two for\r\ncompilations and executions.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7283","RelatedDescription":"Closed or merged PR \"Minor SuperIlc fixes / improvements found while using the tool\" (#7283)"},{"Id":"431170974","IsPullRequest":true,"CreatedAt":"2019-04-10T23:04:04","Actor":"Dotnet-GitSync-Bot","Number":"7277","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern @krwq @tannergooding @danmosemsft @stephentoub @buyaa-n @GrabYourPitchforks @grant-d @sdmaclea @jkoritzinsky @hughbe","Url":"https://github.com/dotnet/corert/pull/7277","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7277)"},{"Id":"431666033","IsPullRequest":true,"CreatedAt":"2019-04-10T22:38:21","Actor":"nattress","Number":"7281","RawContent":null,"Title":"Update CoreCLR test script for VS2019","State":"closed","Body":"After installing VS2019 the CoreCLR test scripts can no longer find MSBuild.exe because it was moved within the VS install folder. Fix to try both options before giving up.","Url":"https://github.com/dotnet/corert/pull/7281","RelatedDescription":"Closed or merged PR \"Update CoreCLR test script for VS2019\" (#7281)"},{"Id":"431562959","IsPullRequest":false,"CreatedAt":"2019-04-10T15:17:13","Actor":"filipnavara","Number":"7280","RawContent":null,"Title":"Bogus warnings on System.Collections.Tests CI tests","State":"open","Body":"Watching the outputs on https://dev.azure.com/dnceng/public/_build/results?buildId=150071 (https://github.com/dotnet/corert/pull/7277) shows many of these lines:\r\n\r\n```\r\nWARNING: Long running test .. finished in 933336ms.\r\nWARNING: Long running test .. finished in 933401ms.\r\n```\r\n\r\nObviously the tests didn't run for that long, so it looks like the time is reported incorrectly.","Url":"https://github.com/dotnet/corert/issues/7280","RelatedDescription":"Open issue \"Bogus warnings on System.Collections.Tests CI tests\" (#7280)"},{"Id":"431465556","IsPullRequest":true,"CreatedAt":"2019-04-10T13:30:56","Actor":"MichalStrehovsky","Number":"7279","RawContent":null,"Title":"Improve SharedLibrary test","State":"closed","Body":"Add coverage for stack walking (GC/EH).","Url":"https://github.com/dotnet/corert/pull/7279","RelatedDescription":"Closed or merged PR \"Improve SharedLibrary test\" (#7279)"},{"Id":"431441435","IsPullRequest":false,"CreatedAt":"2019-04-10T11:05:48","Actor":"rainbowlee","Number":"7278","RawContent":null,"Title":"Unable to load shared library 'objwriter' or one of its dependencies","State":"open","Body":"This problems occured again.\r\n\r\nLast time, I restalled the operation system.\r\n\r\nI run unbantu on Oracle VM VirtualBox\r\n\r\n\r\nubuntu-18.10-desktop-amd64.iso\r\n\r\n\r\n\r\n![crt_error1](https://user-images.githubusercontent.com/7885929/55873976-9c448f80-5bc3-11e9-8092-0743a27fa0fd.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7278","RelatedDescription":"Open issue \"Unable to load shared library 'objwriter' or one of its dependencies\" (#7278)"},{"Id":"431113344","IsPullRequest":true,"CreatedAt":"2019-04-09T20:18:04","Actor":"Dotnet-GitSync-Bot","Number":"7276","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern @krwq @tannergooding @danmosemsft @stephentoub @buyaa-n @GrabYourPitchforks @grant-d @sdmaclea @jkoritzinsky @hughbe","Url":"https://github.com/dotnet/corert/pull/7276","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7276)"},{"Id":"430958001","IsPullRequest":true,"CreatedAt":"2019-04-09T14:33:58","Actor":"MichalStrehovsky","Number":"7275","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7275","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7275)"},{"Id":"430957168","IsPullRequest":true,"CreatedAt":"2019-04-09T13:08:19","Actor":"dotnet-bot","Number":"7274","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7274","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7274)"},{"Id":"430942646","IsPullRequest":true,"CreatedAt":"2019-04-09T12:35:44","Actor":"filipnavara","Number":"7273","RawContent":null,"Title":"Move TimerQueue.TickCount Windows implementation to shared CoreLib","State":"open","Body":"Implementation taken from CoreCLR because it accounts for Windows 7 unlike the original CoreRT code.","Url":"https://github.com/dotnet/corert/pull/7273","RelatedDescription":"Open PR \"Move TimerQueue.TickCount Windows implementation to shared CoreLib\" (#7273)"},{"Id":"430542017","IsPullRequest":true,"CreatedAt":"2019-04-08T16:21:43","Actor":"MichalStrehovsky","Number":"7272","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7272","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7272)"},{"Id":"430501135","IsPullRequest":true,"CreatedAt":"2019-04-08T16:20:57","Actor":"MichalStrehovsky","Number":"7270","RawContent":null,"Title":"Fix ProjectN break","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7270","RelatedDescription":"Closed or merged PR \"Fix ProjectN break\" (#7270)"},{"Id":"430501318","IsPullRequest":true,"CreatedAt":"2019-04-08T16:20:41","Actor":"MichalStrehovsky","Number":"7271","RawContent":null,"Title":"Add ProjectN fallback for generic enums","State":"closed","Body":"Turns out it would be unnecessarily complicated to pipe this through to\r\nrhbind (need to do this in NUTC, update the CTL format, and pipe it\r\nthrough the binder).","Url":"https://github.com/dotnet/corert/pull/7271","RelatedDescription":"Closed or merged PR \"Add ProjectN fallback for generic enums\" (#7271)"},{"Id":"430180134","IsPullRequest":true,"CreatedAt":"2019-04-08T11:38:37","Actor":"MichalStrehovsky","Number":"7269","RawContent":null,"Title":"Remove reflection from Enum.ToString","State":"closed","Body":"Contributes to #5013.\r\n\r\nHaving reflection field access and custom attribute parsing support in a code path reachable from `Enum.ToString` means that any \"hello world\"-style app needs to have pretty much the full reflection stack embedded in it. The reflection stack is huge. This also makes access to uncached `EnumInfo` marginally faster.\r\n\r\nThis pretty much restores #3801, where we replaced the specialized code paths with the common reflection path to fix a bug around blocked types. I fix that bug by simply returning an empty `EnumInfo`.\r\n\r\nI had to make generic type definition EETypes carry their CorElementType to make this work property on generic type definitions of enums (for the corner case of enum type nested under a generic type). I'll see how difficult is it to add this to the binder on the Project N side when this ports over. If it's too complex, I'll simply restore the logic that accesses the first instance field type on generic definitions using reflection (under `#if PROJECTN`).","Url":"https://github.com/dotnet/corert/pull/7269","RelatedDescription":"Closed or merged PR \"Remove reflection from Enum.ToString\" (#7269)"},{"Id":"430132193","IsPullRequest":true,"CreatedAt":"2019-04-08T01:08:39","Actor":"MichalStrehovsky","Number":"7268","RawContent":null,"Title":"Change MyGet references to point to the new blob feed","State":"closed","Body":"We don't publish to MyGet anymore.","Url":"https://github.com/dotnet/corert/pull/7268","RelatedDescription":"Closed or merged PR \"Change MyGet references to point to the new blob feed\" (#7268)"},{"Id":"430070372","IsPullRequest":true,"CreatedAt":"2019-04-06T19:56:13","Actor":"nattress","Number":"7267","RawContent":null,"Title":"Always publish symbols for official builds","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7267","RelatedDescription":"Closed or merged PR \"Always publish symbols for official builds\" (#7267)"},{"Id":"430060399","IsPullRequest":true,"CreatedAt":"2019-04-06T18:04:30","Actor":"nattress","Number":"7266","RawContent":null,"Title":"Fix symbol publish property","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7266","RelatedDescription":"Closed or merged PR \"Fix symbol publish property\" (#7266)"},{"Id":"430017850","IsPullRequest":false,"CreatedAt":"2019-04-06T09:53:02","Actor":"akbcode","Number":"7265","RawContent":null,"Title":"Build shared library with F# fails on macOS","State":"open","Body":"I followed the NativeLibrary sample to build a shared library in F#. [Here's my code.](https://gist.github.com/akbcode/fecb98b56cbbfeffd05bdf85ccb83788)\r\n\r\nIt fails with \r\n```\r\nld: illegal text-relocation to '___typemanager_indirection' in obj/Debug/netcoreapp2.2/osx-x64/native/FSNativeLibrary.o from '___RMHSignature_System_Linq_System_Linq_Enumerable__Empty' in obj/Debug/netcoreapp2.2/osx-x64/native/FSNativeLibrary.o for architecture x86_64\r\n```\r\nBuilding as a static library works. I have only tested on macOS 10.13.6","Url":"https://github.com/dotnet/corert/issues/7265","RelatedDescription":"Open issue \"Build shared library with F# fails on macOS\" (#7265)"},{"Id":"429976790","IsPullRequest":true,"CreatedAt":"2019-04-06T00:25:51","Actor":"nattress","Number":"7264","RawContent":null,"Title":"Attempt 3 at passing Azure feed / Key to the publish job","State":"closed","Body":"Inline scripts have their own syntax for properties and require input arguments to be called out like a method signature.","Url":"https://github.com/dotnet/corert/pull/7264","RelatedDescription":"Closed or merged PR \"Attempt 3 at passing Azure feed / Key to the publish job\" (#7264)"},{"Id":"429966491","IsPullRequest":true,"CreatedAt":"2019-04-05T23:15:36","Actor":"nattress","Number":"7263","RawContent":null,"Title":"Set working folder for official build publish task","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7263","RelatedDescription":"Closed or merged PR \"Set working folder for official build publish task\" (#7263)"},{"Id":"429896736","IsPullRequest":true,"CreatedAt":"2019-04-05T21:29:14","Actor":"nattress","Number":"7262","RawContent":null,"Title":"Publish to Azure blob feed","State":"closed","Body":"MyGet keeps running out of storage quota (see https://github.com/dotnet/core-eng/issues/5070). Switch to Azure blob feed so CoreRT nightly builds are publicly available.","Url":"https://github.com/dotnet/corert/pull/7262","RelatedDescription":"Closed or merged PR \"Publish to Azure blob feed\" (#7262)"},{"Id":"429686003","IsPullRequest":true,"CreatedAt":"2019-04-05T12:56:35","Actor":"MichalStrehovsky","Number":"7261","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"Should pick up dotnet/corefx#36552.","Url":"https://github.com/dotnet/corert/pull/7261","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7261)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"431838901","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:41","Actor":"peterhuene","Number":"3112","RawContent":null,"Title":"Escape output item specs for ResolvePackageAssets task.","State":"closed","Body":"This commit fixes the ResolvePackageAssets task to escape the output\r\nitem specs.  This allows assets in packages to contain characters that\r\nmight get unescaped by MSBuild.\r\n\r\nFixes #3069.","Url":"https://github.com/dotnet/sdk/pull/3112","RelatedDescription":"Closed or merged PR \"Escape output item specs for ResolvePackageAssets task.\" (#3112)"},{"Id":"432140915","IsPullRequest":true,"CreatedAt":"2019-04-12T23:48:57","Actor":"johnbeisner","Number":"3114","RawContent":null,"Title":"[WIP] running perf tests and upload to benchview in Azure DevOps","State":"closed","Body":"First draft: running perf tests and upload to benchview in Azure DevOps","Url":"https://github.com/dotnet/sdk/pull/3114","RelatedDescription":"Closed or merged PR \"[WIP] running perf tests and upload to benchview in Azure DevOps\" (#3114)"},{"Id":"432691504","IsPullRequest":true,"CreatedAt":"2019-04-12T23:15:36","Actor":"dsplaisted","Number":"3120","RawContent":null,"Title":"Allow test tools to roll forward across major versions of .NET Core","State":"closed","Body":"Currently the dotnet tools which run our tests target .NET Core 2.1.  This updates them to allow roll-forward across major .NET Core versions, so that they can run on a 3.0 runtime if 2.x isn't installed.","Url":"https://github.com/dotnet/sdk/pull/3120","RelatedDescription":"Closed or merged PR \"Allow test tools to roll forward across major versions of .NET Core\" (#3120)"},{"Id":"432733384","IsPullRequest":true,"CreatedAt":"2019-04-12T20:30:59","Actor":"sbomer","Number":"3125","RawContent":null,"Title":"Add ILLink targets and tests","State":"open","Body":"This adds linker targets, mostly adapted from https://github.com/mono/linker/blob/9766e2b2406a3d44cbf05e49ab2bd19b535e3e5a/src/ILLink.Tasks/ILLink.Tasks.targets, to run the linker after `ComputeFilesToPublish`.\r\n\r\nA few things still need to change (but I wanted to get what I have so far out for review):\r\n- Change property names to agreed-upon strings\r\n- Update deps file generation in response to https://github.com/dotnet/sdk/pull/3086. I think this needs https://github.com/dotnet/sdk/pull/3113 or another update PR to be merged.\r\n- Update the linker:\r\n  - to include `UsingTask` for other tasks in the assembly (namely, `ComputeManagedAssemblies`)\r\n  - for `ReferencePath` support\r\n  - with a net472 build of the task dll\r\n\r\nWhen I run these tests locally with a recent version of the linker, the checks pass up to the deps file asserts.\r\n\r\n@nguerrera, @fadimounir, @swaroop-sridhar PTAL","Url":"https://github.com/dotnet/sdk/pull/3125","RelatedDescription":"Open PR \"Add ILLink targets and tests\" (#3125)"},{"Id":"432733028","IsPullRequest":false,"CreatedAt":"2019-04-12T20:29:52","Actor":"KathleenDollard","Number":"3124","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/sdk/issues/3124","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#3124)"},{"Id":"432729778","IsPullRequest":true,"CreatedAt":"2019-04-12T20:20:56","Actor":"fadimounir","Number":"3123","RawContent":null,"Title":"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios","State":"open","Body":"Unsupported scenarios are:\r\n1) When a RID is not provided\r\n2) When publishing framework dependent apps (TEMP, until #3109 and #3110 are fixed)","Url":"https://github.com/dotnet/sdk/pull/3123","RelatedDescription":"Open PR \"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios\" (#3123)"},{"Id":"432723599","IsPullRequest":false,"CreatedAt":"2019-04-12T20:03:24","Actor":"JunTaoLuo","Number":"3122","RawContent":null,"Title":"Unable to resolve AppHost for the current runtime if it's not included in the SDK","State":"open","Body":"I'm seeing broken behaviour when the app host is not bundled in the targeting pack of the SDK.\r\n\r\nI discovered this as part of our dependency update in https://github.com/aspnet/AspNetCore-Tooling/pull/409. When we first ingested the changes, we saw errors such like:\r\n```\r\n(AspNetCore-Tooling) C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents> dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreApp30PackageVersion=3.0.0-preview5-27608-16 /p:_RazorBuildServerPipeName=\"bc0e5740-2362-4e4c-8244-64c38154f0d7\" /t:Build /p:Configuration=Debug /p:_RazorForceBuildServer=true\r\nMicrosoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Microsoft.Common.CurrentVersion.targets(4552,5): error MSB3030: Could not copy the file \"C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\obj\\Debug\\netcoreapp3.0\\MvcWithComponents.exe\" because it was not found. [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\n```\r\nI have a binlog for the failing scenario:\r\n[msbuild.zip](https://github.com/dotnet/sdk/files/3074987/msbuild.zip)\r\n\r\nIt seems like the issue is that the app host package could not be found in \"\\.dotnet\\x64\\packs\\runtime.win-x64.Microsoft.NETCore.DotNetAppHost\" since the version of the runtime we reference is ahead of the the version that's included in the SDK. In this case, sdk\\3.0.100-preview4-011136 doesn't contain the targeting pack for runtime\\3.0.0-preview5-27608-16. However, using a newer runtime than what's included in the SDK is a core scenario that we depend on so how should this work?\r\n\r\nCan someone on the SDK team please advise on the expectation here and look through the binlog to see why the mechanism breaks in our scenario?\r\n\r\ncc @nguerrera @dsplaisted \r\n\r\ncc @dougbu @natemcmaster\r\n","Url":"https://github.com/dotnet/sdk/issues/3122","RelatedDescription":"Open issue \"Unable to resolve AppHost for the current runtime if it's not included in the SDK\" (#3122)"},{"Id":"432722156","IsPullRequest":true,"CreatedAt":"2019-04-12T19:59:08","Actor":"fadimounir","Number":"3121","RawContent":null,"Title":"Couple of fixes and tweaks to the R2R creation logic","State":"open","Body":"Changing crossgen commands to use response files.\r\nChanging /Platform_Assemblies_Paths to a set of /r arguments\r\nUsing resolved files list as assembly references to crossgen (temp hack until issue 3110 is fixed)","Url":"https://github.com/dotnet/sdk/pull/3121","RelatedDescription":"Open PR \"Couple of fixes and tweaks to the R2R creation logic\" (#3121)"},{"Id":"430586465","IsPullRequest":true,"CreatedAt":"2019-04-12T18:30:05","Actor":"fadimounir","Number":"3099","RawContent":null,"Title":"Check if assembly has any IL code that needs R2R compilation","State":"closed","Body":"Exclude assemblies with no IL from being added to the R2R compilation list. There are some \"reference\" assemblies that do not have the ReferenceAssemblyAttribute. Crossgenning them is like a \"nop\" and will produce an output assembly with no R2R compilation, but if the PDB generation option is enabled, crossgen will now fail if the input \"R2R\" assembly does not contain any R2R compiled code.","Url":"https://github.com/dotnet/sdk/pull/3099","RelatedDescription":"Closed or merged PR \"Check if assembly has any IL code that needs R2R compilation\" (#3099)"},{"Id":"432641949","IsPullRequest":true,"CreatedAt":"2019-04-12T16:12:36","Actor":"chcosta","Number":"3119","RawContent":null,"Title":"/* Work in progress */ Test arcade changes","State":"open","Body":"Do not merge!\r\n\r\nPlaying around with some template changes to enable test run title for publishing test results.","Url":"https://github.com/dotnet/sdk/pull/3119","RelatedDescription":"Open PR \"/* Work in progress */ Test arcade changes\" (#3119)"},{"Id":"432532625","IsPullRequest":true,"CreatedAt":"2019-04-12T12:04:09","Actor":"dotnet-maestro[bot]","Number":"3118","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3118","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3118)"},{"Id":"430411957","IsPullRequest":true,"CreatedAt":"2019-04-12T12:03:51","Actor":"dotnet-maestro[bot]","Number":"3097","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19207.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19209.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19209.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3097","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3097)"},{"Id":"432300971","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:45","Actor":"nugetlurker","Number":"3117","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3117","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3117)"},{"Id":"432300957","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:42","Actor":"nugetlurker","Number":"3116","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3116","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3116)"},{"Id":"432201230","IsPullRequest":false,"CreatedAt":"2019-04-11T19:21:25","Actor":"KathleenDollard","Number":"3115","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/sdk/issues/3115","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#3115)"},{"Id":"431984959","IsPullRequest":true,"CreatedAt":"2019-04-11T12:01:56","Actor":"dotnet-bot","Number":"3113","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3113","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3113)"},{"Id":"431111800","IsPullRequest":true,"CreatedAt":"2019-04-11T02:07:16","Actor":"dsplaisted","Number":"3107","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Replace #3072","Url":"https://github.com/dotnet/sdk/pull/3107","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3107)"},{"Id":"431772059","IsPullRequest":true,"CreatedAt":"2019-04-11T00:01:10","Actor":"dsplaisted","Number":"3111","RawContent":null,"Title":"Use PackageDownload","State":"open","Body":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS).","Url":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Open PR \"Use PackageDownload\" (#3111)"},{"Id":"431061785","IsPullRequest":false,"CreatedAt":"2019-04-10T13:20:40","Actor":"johnbeisner","Number":"3104","RawContent":null,"Title":"Allow for the disablement of ResolveAppHosts","State":"closed","Body":"**Repro steps:**\r\nBuild win-arm [all arm* RIDs have this failure] @ commit 0606a12720f0eace5af77c545d0d91b96ec92e27\r\n\r\n**Error:**\r\nerror NU1605: Detected package downgrade: runtime.win-arm.Microsoft.NETCore.DotNetAppHost from 3.0.0-preview5-27607-08 to 3.0.0-preview4-27501-7. Reference the package directly from the project to select a different version. \r\n DownloadPackage -> Microsoft.NETCore.DotNetAppHost 3.0.0-preview5-27607-08 -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview5-27607-08) \r\n DownloadPackage -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview4-27501-7)\r\n\r\n**From Microsoft.NET.Sdk.TargetingPackResolution.targets:**\r\n```\r\n    <ResolveAppHosts TargetFrameworkIdentifier=\"$(TargetFrameworkIdentifier)\"\r\n                     TargetFrameworkVersion=\"$(_TargetFrameworkVersionWithoutV)\"\r\n                     TargetingPackRoot=\"$(NetCoreTargetingPackRoot)\"\r\n                     AppHostRuntimeIdentifier=\"$(AppHostRuntimeIdentifier)\"\r\n                     RuntimeFrameworkVersion=\"$(RuntimeFrameworkVersion)\"\r\n                     PackAsToolShimRuntimeIdentifiers=\"@(_PackAsToolShimRuntimeIdentifiers)\"\r\n                     DotNetAppHostExecutableNameWithoutExtension=\"$(_DotNetAppHostExecutableNameWithoutExtension)\"\r\n                     RuntimeGraphPath=\"$(BundledRuntimeIdentifierGraphFile)\"\r\n                     KnownAppHostPacks=\"@(KnownAppHostPack)\">\r\n\r\n      <Output TaskParameter=\"PackagesToDownload\" ItemName=\"_PackageReferenceToAdd\" />\r\n      <Output TaskParameter=\"AppHost\" ItemName=\"AppHostPack\" />\r\n      <Output TaskParameter=\"PackAsToolShimAppHostPacks\" ItemName=\"PackAsToolShimAppHostPack\" />\r\n\r\n    </ResolveAppHosts>\r\n```\r\n\r\n_Work-around is to disable the 'ResolveFrameworkReferences' target._\r\n\r\nThe 'ResolveFrameworkReferences' step of the 'ResolveFrameworkReferences' target can be disabled by adding:\r\n`<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>`\r\n\r\nThe 'ResolveAppHosts' step of the 'ResolveFrameworkReferences' target should have a similar mechanism.\r\n","Url":"https://github.com/dotnet/sdk/issues/3104","RelatedDescription":"Closed issue \"Allow for the disablement of ResolveAppHosts\" (#3104)"},{"Id":"431235557","IsPullRequest":false,"CreatedAt":"2019-04-09T23:14:53","Actor":"nguerrera","Number":"3110","RawContent":null,"Title":"Resolve runtime pack assets for crossgen even if app is framework-dependent","State":"open","Body":"Crossgen operates on implementation assemblies only, even when passed as references to the compiler. To crossgen a framework-dependent app, we need all of the framework implementation assemblies to be passed to crossgen as references.\r\n\r\nNote that crossgen requires picking a RID. The app can be framework-dependent, but it must be RID specific. (Crossgen generates native code, which can't be rid-agnostic, obviously.) We are guaranteed to have downloaded the runtime packs, we just need to resolve the framework assemblies from it as though the app was self-contained, but without putting them in deps.json or copying them, etc.\r\n\r\nToday, crossgen tasks can find the base shared framework implementation assemblies next to it (it ships in the base runtime pack), but this doesn't work for the other frameworks like WindowsDesktop or ASP.NET. This also can't just blindly aggregate all the files in all the runtime packs, this list needs to account for conflict resolution (WindowsBase in WindowsDesktop wins over WindowsBase in NETCoreApp), etc.","Url":"https://github.com/dotnet/sdk/issues/3110","RelatedDescription":"Open issue \"Resolve runtime pack assets for crossgen even if app is framework-dependent\" (#3110)"},{"Id":"431234100","IsPullRequest":false,"CreatedAt":"2019-04-09T23:08:44","Actor":"nguerrera","Number":"3109","RawContent":null,"Title":"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker","State":"open","Body":"Today, crossgen (new ReadyToRun feature) operates over all files to publish and filters out what is not IL. We have decided that the compilation set should be restricted by default to the set of files that we deem are runtime managed assets and designate as such in the .deps.json.\r\n\r\nAs of now, there isn't an exact match for this list that is readily available. _ResolvedCopyLocalPublishAssets + IntermediateAssembly is close.\r\n\r\nI suspect that with #3080, this will be easier to do, but I didn't review in detail yet.\r\n\r\nWe will want to use the same set of runtime assemblies as candidates for the linker as crossgen. This is high priority as we are hoping to have both linker and crossgen feature-complete for Preview 5.","Url":"https://github.com/dotnet/sdk/issues/3109","RelatedDescription":"Open issue \"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker\" (#3109)"},{"Id":"431167464","IsPullRequest":true,"CreatedAt":"2019-04-09T20:08:25","Actor":"dsplaisted","Number":"3108","RawContent":null,"Title":"Fix conflicts between multiple uses of _PackageReferenceToAdd","State":"open","Body":"Fixes #3027","Url":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Open PR \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108)"},{"Id":"431068288","IsPullRequest":true,"CreatedAt":"2019-04-09T16:45:13","Actor":"nugetlurker","Number":"3106","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3106","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3106)"},{"Id":"431068261","IsPullRequest":true,"CreatedAt":"2019-04-09T16:45:10","Actor":"nugetlurker","Number":"3105","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3105","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3105)"},{"Id":"430812433","IsPullRequest":false,"CreatedAt":"2019-04-09T07:35:55","Actor":"yyjdelete","Number":"3103","RawContent":null,"Title":"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference","State":"open","Body":"Sdk Version: `3.0.100-preview3-010431`, `2.1.504`\r\nRun `ConsoleApp5` in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an `MissingMethodException` and an `FileNotFoundException` for `System.Data.SqlClient, Version=4.5.0.0`\r\n\r\nThis can also happen with `PackageReference`. I reference Dapper from an ClassLibrary with netstandard2.0, and the main App is net472, and failed to found `System.Data.SqlClient, Version=4.5.0.0`.\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\nExpected:\r\nThe `FileNotFoundException` not happen and the `System.Data.SqlClient, Version=4.5.0.0` is include in the output bins.\r\nThe below behavior may be not expected, but it's the current behavior for project struct(dependencies) in VS2019. (Rider follow the actual behavior for project struct)\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0)\r\n------|--System.Data.SqlClient(netstandard2.0)\r\n```\r\n\r\nActual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(missing from the output of ConsoleApp5)\r\n---|--ClassLibrary2(net472)\r\n```","Url":"https://github.com/dotnet/sdk/issues/3103","RelatedDescription":"Open issue \"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\" (#3103)"},{"Id":"430708424","IsPullRequest":true,"CreatedAt":"2019-04-09T02:30:22","Actor":"dotnet-bot","Number":"3101","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3101","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3101)"},{"Id":"430708743","IsPullRequest":true,"CreatedAt":"2019-04-09T00:03:03","Actor":"dsplaisted","Number":"3102","RawContent":null,"Title":"Don't include base FrameworkReferences when creating NuGet packages","State":"open","Body":"Per [comment](https://github.com/aspnet/AspNetCore/pull/9033#issuecomment-481043113) from @nkolev92:\r\n\r\n> I think regardless of whether it gets reverted or not, the SDK should set \"pack=false\" to Microsoft.NETCore.App.","Url":"https://github.com/dotnet/sdk/pull/3102","RelatedDescription":"Open PR \"Don't include base FrameworkReferences when creating NuGet packages\" (#3102)"},{"Id":"430672111","IsPullRequest":true,"CreatedAt":"2019-04-08T21:42:47","Actor":"dsplaisted","Number":"3100","RawContent":null,"Title":"Look for platform manifest using convention currently used by ASP.NET targeting pack","State":"open","Body":"Fix https://github.com/aspnet/AspNetCore/issues/8836","Url":"https://github.com/dotnet/sdk/pull/3100","RelatedDescription":"Open PR \"Look for platform manifest using convention currently used by ASP.NET targeting pack\" (#3100)"},{"Id":"430205186","IsPullRequest":true,"CreatedAt":"2019-04-08T18:34:12","Actor":"wli3","Number":"3096","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3096","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#3096)"},{"Id":"430585010","IsPullRequest":false,"CreatedAt":"2019-04-08T18:03:53","Actor":"dsplaisted","Number":"3098","RawContent":null,"Title":"Remove old deps file generation logic","State":"open","Body":"In #3086, we are refactoring the deps file generation logic.  For now, we are leaving both the old and the new logic in, and by default comparing the results of the two methods in order to ensure that the new logic produces the same results.\r\n\r\nAfter we've shipped a few previews like this, we should remove the old logic and entirely switch over to the new logic.","Url":"https://github.com/dotnet/sdk/issues/3098","RelatedDescription":"Open issue \"Remove old deps file generation logic\" (#3098)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1116672310809903105","CreatedAt":"2019-04-12T12:00:00+00:00","UserScreenname":"dotnet","Text":"The #OnDotNet show joined forces with @azureadvocates to bring you DevOps for https://t.co/iOiV9r53NV Developers!… https://t.co/eP7EZV54nW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":23,"RawContent":null},{"Id":"1116372533907902465","CreatedAt":"2019-04-11T16:08:47+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/XI2YUBZA88","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":11,"RawContent":null},{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null},{"Id":"1115373724868333570","CreatedAt":"2019-04-08T21:59:53+00:00","UserScreenname":"dotnet","Text":"On this week's @aspnet Community Standup, Glenn Condron (@condrong) takes Workers Everywhere!\n\nJoin us on Tuesday A… https://t.co/wo80u0zkOk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":13,"RawContent":null},{"Id":"1114554336577609729","CreatedAt":"2019-04-06T15:43:55+00:00","UserScreenname":"dotnet","Text":"Using Windows Installer XML (WiX)? Time to say congrats to @robmen,  @barnson and all the other contributors of… https://t.co/P1rw6S2wGf","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":60,"FavoriteCount":14,"RawContent":null},{"Id":"1113832934580948993","CreatedAt":"2019-04-04T15:57:20+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-04-13T05:30:31.8297908Z","RunDurationInMilliseconds":8679}