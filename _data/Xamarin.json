{"Data":{"Blog":{"FeedItems":[{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio 2017","PublishedOn":"2018-04-11T18:30:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 previews are now available, featuring significant improvements to the XAML experience for mobile developers. The Xamarin.Forms XAML editing experience is now powered by...","Href":"https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2017 Version 15.7 Preview 3","PublishedOn":"2018-04-09T21:32:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 Preview 3 was released today (April 9, 2018) and includes many improvements for mobile developers in Visual Studio. This release sports a brand new IntelliSense...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-7-preview-3/","RawContent":null},{"Title":"Right-To-Left Localization in Xamarin.Forms","PublishedOn":"2018-04-06T20:05:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re making apps that support right-to-left languages, we have great news for you: Xamarin.Forms 3.0 makes it easier than ever to flip layouts to match language direction! We&#8217;ll use...","Href":"https://blog.xamarin.com/right-to-left-localization-xamarin-forms/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 3 – Mono","PublishedOn":"2018-04-04T18:38:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the third post of four in the Debugging Xamarin Open Source Frameworks series, debugging Mono. Part 1 covers building Xamarin.Forms from the source and debugging that code, Part 2 covers...","Href":"https://blog.xamarin.com/debugging-xamarin-mono/","RawContent":null},{"Title":"Find Local Xamarin and .NET Developer Events This April","PublishedOn":"2018-04-02T18:42:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Spring into action this April by finding a Xamarin or .NET user group hosting Xamarin (and related technology) events near you! Get the latest news on exciting releases, tooling, and updates all month...","Href":"https://blog.xamarin.com/xamarin-developer-community-events-april/","RawContent":null},{"Title":"Update to Xamarin.Forms 3.0 Pre-Release Available Today!","PublishedOn":"2018-03-30T19:02:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that the latest update to the Xamarin.Forms 3.0 Pre-release is now available! Help us make this our best Xamarin.Forms release ever by updating today and giving it a...","Href":"https://blog.xamarin.com/update-to-xamarin-forms-3-0-pre-release-available-today/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 2 – Xamarin.iOS","PublishedOn":"2018-03-28T19:17:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the second part in a four-part series. In the first post, we covered building Xamarin.Forms from the source and then stepping into and debugging that code. In this post, we&#8217;ll explore...","Href":"https://blog.xamarin.com/debugging-xamarin-ios/","RawContent":null},{"Title":"New Xamarin.Android and Xamarin.iOS Project Templates Now Available","PublishedOn":"2018-03-26T18:31:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Whether you&#8217;re new or a seasoned Xamarin developer, project templates are an important part of the app building journey. They should be easy to find and set you up for success from the start. As...","Href":"https://blog.xamarin.com/new-xamarin-android-ios-templates/","RawContent":null},{"Title":"Performing Geospatial Calculations with Azure CosmosDB","PublishedOn":"2018-03-23T15:56:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Azure CosmosDB is a multi-model, globally distributed database, as well as a geospatial calculation powerhouse. It can calculate the distance between two points, determine whether a road runs through...","Href":"https://blog.xamarin.com/performing-geospatial-calculations-azure-cosmosdb/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 1 – Xamarin.Forms","PublishedOn":"2018-03-21T18:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At some point, while working with Xamarin to build awesome mobile apps, you may have received an exception or error notification from the Xamarin framework code, Mono runtime, or Base Class Library...","Href":"https://blog.xamarin.com/debugging-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7516283694","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:30:39","Actor":"jalbertSyncroTech","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1544","RelatedDescription":"Opened issue \"Android.Runtime.ResourceIdManager.UpdateIdValues() called multiple times, adds 23 seconds to application startup\" (#1544) at xamarin/xamarin-android","RelatedBody":"### Description\r\n\r\nWhen both an Android application and a library project include Android Resources, the Application's Resource.UpdateIdValues() is called to update all of the library project's static resource id's with the constant resource id's from the application.\r\n\r\nThis function is triggered by a call to Android.Runtime.ResourceIdManager.UpdateIdValues() in the static constructor of Resource.Designer.cs, and *also* by all of it's child classes eg. Drawable, Layout, etc.\r\n\r\nThe ResourceIdManager.UpdateIdValues() function has an \"id_initialized\" flag that's supposed to prevent the function getting called twice, however this flag isn't set until *after* UpdateIdValues() is complete.\r\nhttps://github.com/xamarin/xamarin-android/blob/52417bdb6bf156a11a391abfc25f84cd5e18cec2/src/Mono.Android/Android.Runtime/ResourceIdManager.cs#L30\r\n\r\nBecause all of the child classes (Drawable, Layout, etc.) *also* call UpdateIdValues() in their static constructors, this function is triggered again each time the original call accesses one of the static child classes to update its resource id's, recursively triggering this function call again.\r\n\r\nFor example, in my Xamarin.Forms w/GooglePlay project I count this function being called 36 times during startup, for a total duration of 23 seconds, where as one call would have only taken 2 seconds.\r\n\r\nA simple fix would be to set id_initialized to true immediately the first time the function is called, before the rest of the function is processed.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a solution that includes both an Android Application and a Library project.\r\n2. Include Resources in both projects (or reference a NuGet package that includes Android Resources).\r\n3. When debugging, put a break point on the UpdateIdValues() function in the the Application's Resource.Designer.cs file.  Observe that it is called multiple times, once for each of the static children classes.\r\n\r\n### Expected Behavior\r\n\r\nThe UpdateIdValues() function in the the Application's Resource.Designer.cs file should only be called once.\r\n\r\n### Actual Behavior\r\n\r\nThe UpdateIdValues() function is unnecessarily called multiple times, adding ~23 seconds to the application startup time in the case of my project.\r\n\r\n### Basic Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.6.5\r\nVisualStudio.15.Release/15.6.5+27428.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n"},{"Id":"7515577372","Type":"PullRequestEvent","CreatedAt":"2018-04-11T19:10:34","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1507","RelatedDescription":"Merged pull request \"[xabuild.exe] another fix for multi-process file access\" (#1507) at xamarin/xamarin-android","RelatedBody":"Context: d82c97c\r\nContext: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1550431\r\n\r\nFor a while, my previous changes to `xabuild.exe` seemed to be working.\r\n\r\nIt still failed sometimes after reviewing past builds on VSTS:\r\n- `RunXABuildInParallel` test failed randomly with non-zero exit code\r\nwhen running `xabuild /version`\r\n- Any test in `Xamarin.Android.Build.Tests`\r\n\r\nThe exception is something like:\r\n\r\n    Unhandled Exception: System.IO.IOException: The process cannot access the file 'bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\.__sys_links.txt' because it is being used by another process.\r\n\r\nI think one more change might finally fix this. Before this change,\r\n`xabuild.exe` was opening the `.__sys_links.txt` every time. It should\r\nfirst check and see if the symbolic links already exist before opening\r\nthe file.\r\n\r\nI also added a `Console.WriteLine` to list every file link, and I soon\r\nsaw something odd from the logs on VSTS:\r\n```\r\n[xabuild] creating symbolic link 'E:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid'\r\n    -> 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\MonoAndroid'\r\n```\r\n\r\nI remoted into the machine, and there was a symbolic link leftover from\r\n`setup-windows.exe` (I believe) that was pointing from\r\n`C:\\Program Files (x86)\\Reference Assemblies` to `xamarin-android` build\r\noutput somewhere!\r\n\r\nChanges (summary):\r\n- Check if any symbolic links are needed before opening\r\n`.__sys_links.txt`\r\n- Added a special case for a `MonoAndroid` directory on a VSTS build\r\nagent (I will login and remove this directory on the agent later)\r\n- Added a `Console.WriteLine` for when file links are created.\r\n- Additionally, we should be using `File.AppendText` instead of\r\n`File.CreateText` as we don't want to *ever* completely overwrite\r\n`.__sys_links.txt`\r\n- Refactored `SymbolicLink` so it more clearly calls `Directory.Exists`\r\none last time before deciding the symbolic link creation was a failure.\r\nAlso moved the Windows-specific code to its own method."},{"Id":"7513692336","Type":"PullRequestEvent","CreatedAt":"2018-04-11T13:51:57","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1514","RelatedDescription":"Merged pull request \"[Linux] Pass distro version to the prepare script and add libtool-bin…\" (#1514) at xamarin/xamarin-android","RelatedBody":"… for Ubuntu\r\n\r\nThis is useful when a package is available from some version of the distro\r\nonwards - it wouldn't make sense to create a separate script for each new\r\ndistro. Instead, we can quickly check whether the current distro has the package\r\nwithin the same script."},{"Id":"7513603404","Type":"PullRequestEvent","CreatedAt":"2018-04-11T13:38:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1537","RelatedDescription":"Merged pull request \"[Java.Interop] Add JavaTypeManager class based on JavaObject\" (#1537) at xamarin/xamarin-android","RelatedBody":"And use it from Java side in place of the old\r\n`Java.Interop.TypeManager` and its `Activate` method. As it is based\r\non `JavaObject`, it will work nicely with the *jnimarshalmethod-gen*."},{"Id":"7513053809","Type":"PullRequestEvent","CreatedAt":"2018-04-11T12:03:56","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1539","RelatedDescription":"Merged pull request \"[libzip, mono-runtimes, monodroid] Build with msbuild\" (#1539) at xamarin/xamarin-android","RelatedBody":"Like e3abe4b8, but different: we had another `xbuild`-ism that\r\n`msbuild` doesn't like: the \"intermixing\" of \"strings\" and item\r\nmetdata within *top-level* item groups.\r\n\r\nFor example:\r\n\r\n\t<_MonoCrossRuntimeIntermediateOutput Include=\"$(IntermediateOutputPath)\\%(_MonoCrossRuntime.Identity)\\mono\\mini\\mono-sgen%(_MonoCrossRuntime.ExeSuffix)\" />\r\n\r\nThe above uses item metadata, e.g. `%(_MonoCrossRuntime.Identity)`,\r\n*outside* of a `@(_MonoCrossRuntime->'...')` context, at top-level\r\nscope. The result is a [build break][0]\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-msbuild/857/\r\n\r\n\tsrc/mono-runtimes/mono-runtimes.targets(818,5): error MSB3375:\r\n\tThe file \"obj/Debug//%(_MonoCrossRuntime.Identity)/mono/mini/mono-sgen%(_MonoCrossRuntime.ExeSuffix)\" does not exist.\r\n\r\nNote that the item metadata wasn't actually replaced, and instead was\r\nused literally.\r\n\r\nThe fix is to replace the above \"intermixing\" with `@(Foo->...)`:\r\n\r\n\t<_MonoCrossRuntimeIntermediateOutput  Include=\"@(_MonoCrossRuntime->'$(IntermediateOutputPath)\\%(Identity)\\mono\\mini\\mono-sgen%(ExeSuffix)')\" />\r\n\r\nThis appeases MSBuild, allowing things to build.\r\n\r\nReview matches for:\r\n\r\n\t$ git grep '<.*Include=\"\\$.*%'\r\n\r\nand fix any top-level `<ItemGroup/>` matches."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7517536662","Type":"IssuesEvent","CreatedAt":"2018-04-12T04:11:23","Actor":"leeyeong23","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2440","RelatedDescription":"Opened issue \"Crashing in Xamarin.Forms.Platform.iOS.LabelRenderer\" (#2440) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nSimilar to bug #1795 , this time happened on image renderer, only in iOS platform\r\n\r\n### Expected Behavior\r\nApp not crashing\r\n### Actual Behavior\r\nApp crashing\r\n"},{"Id":"7517104639","Type":"IssuesEvent","CreatedAt":"2018-04-12T01:38:09","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2439","RelatedDescription":"Opened issue \"[UWP] Searchbar Command Parameter binding happens after the Enter key triggers the command\" (#2439) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen you type into the SearchBar and then hit Enter the Enter key is triggering the command before the SearchBar Text binding resolves. The effect of this is that if you type really fast and then hit enter whatever was present before you started typing is what gets submitted to the Command\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run the sample\r\n2.  type in the box quickly and then hit Enter right after typing. The text that's typed into that box gets set to a Label so you should see the text there after you hit Enter. But you will either see nothing or just part of the text (if you didn't type fast enough)\r\n3.  Hit Enter again. And now you will see the text show up\r\n\r\nIf you type in the box quickly, wait a moment, and then hit enter. All the text gets captured\r\n\r\n### Expected Behavior\r\nEverything I typed before hitting enter should be captured into the Bound Search Parameter\r\n\r\n### Actual Behavior\r\nOnly some of what I typed gets bound\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5 and 3.0\r\n- Platform Target Frameworks\r\n  - UWP:  16299 \r\n\r\n### Reproduction Link\r\n[UwpSearchBar.zip](https://github.com/xamarin/Xamarin.Forms/files/1901000/UwpSearchBar.zip)"},{"Id":"7516909627","Type":"IssuesEvent","CreatedAt":"2018-04-12T00:27:32","Actor":"Alexia-AT-Digitecnology","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2438","RelatedDescription":"Opened issue \"GTK# 3.0 support for Xamarin.Forms.Platform.GTK\" (#2438) at xamarin/Xamarin.Forms","RelatedBody":"Hi all, is going to be support of GTK# 3.0 for doing multiplatform UI projects using .NET Core?\r\n\r\nThere is the link of the NuGet package: https://www.nuget.org/packages/GtkSharp/\r\n\r\nGTK# 3.0 is using Gtk3 and is a better option than GTK#2 (because with GTK# 3.0 you can build UI applications using .NET Core)."},{"Id":"7516888728","Type":"IssuesEvent","CreatedAt":"2018-04-12T00:20:09","Actor":"juliandesmarais","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2437","RelatedDescription":"Closed issue \"AutomationIDs of StackLayout views & subviews will not be accessible on Android\" (#2437) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn **Android**, Setting an automation ID on a view within a stack view does not set the automation ID as expected, it will not be accessible by the expected 'label' property (on Android)\r\n\r\n### Steps to Reproduce\r\n1. Create a StackLayout view (in Xamarin.Forms XAML) with the following properties:\r\n```\r\n<StackLayout Orientation=\"Horizontal\" \r\n                         AutomationId=\"StackLayoutID\"\r\n                         Spacing=\"0\"\r\n                         Grid.Row=\"0\"\r\n                         BackgroundColor=\"Transparent\">\r\n```\r\n2. Create child views within the StackView, and add automation IDs to them as well. E.g.:\r\n```\r\n                <Button AutomationId=\"ChildViewAutomationID\"\r\n                        HeightRequest=\"50\"\r\n                        WidthRequest=\"50\"\r\n                        IsVisible=\"true\"\r\n                        IsEnabled=\"true\"\r\n                        BackgroundColor=\"White\"\r\n                        HorizontalOptions=\"EndAndExpand\"\r\n                        Command=\"{Binding ActionCommand}\"\r\n                        VerticalOptions=\"Center\"/>\r\n```\r\n3. Start a Xamarin UI test and launch the REPL tool\r\n4. Print out element hierarchy (tree)\r\n\r\n### Expected Behavior\r\nStackLayout views as well as elements within StackLayout views should have Automation IDs accessible on Android (using the element property 'label')\r\n\r\n### Actual Behavior\r\nElements are not surfaced with Automation IDs. Only text and ID (not automation ID) are surfaced.\r\n\r\n### Basic Information\r\nXamarin Forms v.2.5.0.280555\r\nXamarin UI Test v.2.2.3\r\n"},{"Id":"7516799255","Type":"IssuesEvent","CreatedAt":"2018-04-11T23:50:53","Actor":"juliandesmarais","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2437","RelatedDescription":"Opened issue \"AutomationIDs of views within stacklayout views will not be accessible on Android\" (#2437) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn **Android**, Setting an automation ID on a view within a stack view does not set the automation ID as expected, it will not be accessible by the expected 'label' property (on Android)\r\n\r\n### Steps to Reproduce\r\n1. Create a StackLayout view (in Xamarin.Forms XAML) with the following properties:\r\n```\r\n<StackLayout Orientation=\"Horizontal\" \r\n                         AutomationId=\"StackLayoutID\"\r\n                         Spacing=\"0\"\r\n                         Grid.Row=\"0\"\r\n                         BackgroundColor=\"Transparent\">\r\n```\r\n2. Create child views within the StackView, and add automation IDs to them as well. E.g.:\r\n```\r\n                <Button AutomationId=\"ChildViewAutomationID\"\r\n                        HeightRequest=\"50\"\r\n                        WidthRequest=\"50\"\r\n                        IsVisible=\"true\"\r\n                        IsEnabled=\"true\"\r\n                        BackgroundColor=\"White\"\r\n                        HorizontalOptions=\"EndAndExpand\"\r\n                        Command=\"{Binding ActionCommand}\"\r\n                        VerticalOptions=\"Center\"/>\r\n```\r\n3. Start a Xamarin UI test and launch the REPL tool\r\n4. Print out element hierarchy (tree)\r\n\r\n### Expected Behavior\r\nElements within StackView should have Automation IDs accessible on Android (using the element property 'label')\r\n\r\n### Actual Behavior\r\nElements are not surfaced with Automation IDs. Only text and ID (not automation ID) are surfaced.\r\n\r\n### Basic Information\r\nXamarin Forms v.2.5.0.280555\r\nXamarin UI Test v.2.2.3\r\n"},{"Id":"7516544216","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:33:28","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2436","RelatedDescription":"Opened pull request \"[UWP] Prevent crash/unexpected behavior with ListView ScrollTo\" (#2436) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#1235 updates the List's DataContext when the ListView's source is changed. This causes the List to get out of sync temporarily, and a race condition prevented the ScrollTo function from working properly right after the source was changed. This change will force the List to update after the collection changes so it's back in sync before it attempts to scroll.\r\n\r\n### Bugs Fixed ###\r\n\r\n- fixes #2367\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7516288050","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:31:31","Actor":"jalbertSyncroTech","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2435","RelatedDescription":"Closed issue \"Android.Runtime.ResourceIdManager.UpdateIdValues() called multiple times, adds 23 seconds to application startup\" (#2435) at xamarin/Xamarin.Forms","RelatedBody":"Intended to submit to Xamarin.Android, not Xamarin.Forms, new issue is here\r\nhttps://github.com/xamarin/xamarin-android/issues/1544\r\n\r\n### Description\r\n\r\nWhen both an Android application and a library project include Android Resources, the Application's Resource.UpdateIdValues() is called to update all of the library project's static resource id's with the constant resource id's from the application.\r\n\r\nThis function is triggered by a call to Android.Runtime.ResourceIdManager.UpdateIdValues() in the static constructor of Resource.Designer.cs, and *also* by all of it's child classes eg. Drawable, Layout, etc.\r\n\r\nThe ResourceIdManager.UpdateIdValues() function has an \"id_initialized\" flag that's supposed to prevent the function getting called twice, however this flag isn't set until *after* UpdateIdValues() is complete.\r\nhttps://github.com/xamarin/xamarin-android/blob/52417bdb6bf156a11a391abfc25f84cd5e18cec2/src/Mono.Android/Android.Runtime/ResourceIdManager.cs#L30\r\n\r\nBecause all of the child classes (Drawable, Layout, etc.) *also* call UpdateIdValues() in their static constructors, this function is triggered again each time the original call accesses one of the static child classes to update its resource id's, recursively triggering this function call again.\r\n\r\nFor example, in my Xamarin.Forms w/GooglePlay project I count this function being called 36 times during startup, for a total duration of 23 seconds, where as one call would have only taken 2 seconds.\r\n\r\nA simple fix would be to set id_initialized to true immediately the first time the function is called, before the rest of the function is processed.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a solution that includes both an Android Application and a Library project.\r\n2. Include Resources in both projects (or reference a NuGet package that includes Android Resources).\r\n3. When debugging, put a break point on the UpdateIdValues() function in the the Application's Resource.Designer.cs file.  Observe that it is called multiple times, once for each of the static children classes.\r\n\r\n### Expected Behavior\r\n\r\nThe UpdateIdValues() function in the the Application's Resource.Designer.cs file should only be called once.\r\n\r\n### Actual Behavior\r\n\r\nThe UpdateIdValues() function is unnecessarily called multiple times, adding ~23 seconds to the application startup time in the case of my project.\r\n\r\n### Basic Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.6.5\r\nVisualStudio.15.Release/15.6.5+27428.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n"},{"Id":"7516267085","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:27:10","Actor":"jalbertSyncroTech","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2435","RelatedDescription":"Opened issue \"Android.Runtime.ResourceIdManager.UpdateIdValues() called multiple times, adds 23 seconds to application startup\" (#2435) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen both an Android application and a library project include Android Resources, the Application's Resource.UpdateIdValues() is called to update all of the library project's static resource id's with the constant resource id's from the application.\r\n\r\nThis function is triggered by a call to Android.Runtime.ResourceIdManager.UpdateIdValues() in the static constructor of Resource.Designer.cs, and *also* by all of it's child classes eg. Drawable, Layout, etc.\r\n\r\nThe ResourceIdManager.UpdateIdValues() function has an \"id_initialized\" flag that's supposed to prevent the function getting called twice, however this flag isn't set until *after* UpdateIdValues() is complete.\r\nhttps://github.com/xamarin/xamarin-android/blob/52417bdb6bf156a11a391abfc25f84cd5e18cec2/src/Mono.Android/Android.Runtime/ResourceIdManager.cs#L30\r\n\r\nBecause all of the child classes (Drawable, Layout, etc.) *also* call UpdateIdValues() in their static constructors, this function is triggered again each time the original call accesses one of the static child classes to update its resource id's, recursively triggering this function call again.\r\n\r\nFor example, in my Xamarin.Forms w/GooglePlay project I count this function being called 36 times during startup, for a total duration of 23 seconds, where as one call would have only taken 2 seconds.\r\n\r\nA simple fix would be to set id_initialized to true immediately the first time the function is called, before the rest of the function is processed.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a solution that includes both an Android Application and a Library project.\r\n2. Include Resources in both projects (or reference a NuGet package that includes Android Resources).\r\n3. When debugging, put a break point on the UpdateIdValues() function in the the Application's Resource.Designer.cs file.  Observe that it is called multiple times, once for each of the static children classes.\r\n\r\n### Expected Behavior\r\n\r\nThe UpdateIdValues() function in the the Application's Resource.Designer.cs file should only be called once.\r\n\r\n### Actual Behavior\r\n\r\nThe UpdateIdValues() function is unnecessarily called multiple times, adding ~23 seconds to the application startup time in the case of my project.\r\n\r\n### Basic Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.6.5\r\nVisualStudio.15.Release/15.6.5+27428.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n"},{"Id":"7515703654","Type":"PullRequestEvent","CreatedAt":"2018-04-11T19:36:12","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2025","RelatedDescription":"Merged pull request \"[XamlC] cache ImportReference and ImportMethodReference as they're slow\" (#2025) at xamarin/Xamarin.Forms","RelatedBody":"[XamlC] cache ImportReference and ImportMethodReference as they're slow\r\non ns1.4\r\n\r\n# XamlC perf report\r\nProject: SmartHotels.Client (`ea3dd73`)\r\n`msbuild /v:diag /t:rebuild`\r\n\r\n## Mac\r\n| **project type** | **Xamarin.Forms version**                            | **XamlC time**    | **Csc time** |\r\n| ---------------- | ---------------------------------------------------- | ----------------- | ------------ |\r\n| `netstandard1.4` | `2.5.0` (pre-netstandard)                            | 3600ms            | 1600ms       |\r\n|                  | `3.0.0-pre2` (some perf work already in)             | 7900ms            | `\"`          |\r\n|                  | `https://github.com/xamarin/Xamarin.Forms/pull/2025` | 1900ms            | `\"`          |\r\n| `netstandard2.0` | `2.5.0` (pre-netstandard)                            | NS2 not supported |              |\r\n|                  | `3.0.0-pre2` (some perf work already in)             | 1600ms            | 1400ms       |\r\n|                  | `https://github.com/xamarin/Xamarin.Forms/pull/2025` | `\"`               | `\"`          |\r\n\r\n## Win\r\n| **project type** | **Xamarin.Forms version**                            | **XamlC time**        | **Csc time** |\r\n| ---------------- | ---------------------------------------------------- | --------------------- | ------------ |\r\n| `netstandard1.4` | `2.5.0` (pre-netstandard)                            | 18000ms               | 1000ms       |\r\n|                  | `3.0.0-pre2` (some perf work already in)             | 20000ms               | `\"`          |\r\n|                  | `https://github.com/xamarin/Xamarin.Forms/pull/2025` | 2700ms                | `\"`          |\r\n| `netstandard2.0` | `2.5.0` (pre-netstandard)                            | NS2 not supported     |              |\r\n|                  | `3.0.0-pre2` (some perf work already in)             | Multiple nuget errors |              |\r\n|                  | `https://github.com/xamarin/Xamarin.Forms/pull/2025` | Multiple nuget errors |              |\r\n"},{"Id":"7515531762","Type":"IssuesEvent","CreatedAt":"2018-04-11T19:01:28","Actor":"ChaseFlorell","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2434","RelatedDescription":"Opened issue \"Entries bound to number fields don't handle localizations using a comma as a fraction separator\" (#2434) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen setting the culture to a language that uses a comma (,) as a fraction separator, and then binding an Entry to a numeric property, whenever you add a comma and then type an additional number, Xamarin.Forms strips the comma.\r\n\r\n| Entered | Expected | Actual\r\n| --- | --- | --- |\r\n| 12,3 | 12,3 | 123 |\r\n\r\nThe reason for this is because Xamarin.Forms is most likely doing a `.ToString()` (invariant culture) instead of `.ToString(culture)`. Now I can't prove this because I couldn't find where Forms does the translation, but you can see the affects in my [attached repro](https://github.com:ChaseFlorell/Xamarin.Forms.Not.Handling.Decimal).\r\n\r\n### Steps to Reproduce\r\n\r\n1. clone https://github.com:ChaseFlorell/Xamarin.Forms.Not.Handling.Decimal\r\n2. set your device culture to French\r\n3. run the iOS app and enter `12,3` into the first field\r\n\r\n### Expected Behavior\r\n\r\n12,3 should be displayed\r\n\r\n### Actual Behavior\r\n\r\n123 is displayed\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.444934\r\n- Last known good version: n/a\r\n- IDE: VS 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  -  iOS:  11.3\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages: Xamarin.Forms\r\n- Affected Devices: All (core)\r\n\r\n### Screenshots\r\n\r\nN/A\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com:ChaseFlorell/Xamarin.Forms.Not.Handling.Decimal\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7517657367","Type":"PullRequestEvent","CreatedAt":"2018-04-12T04:59:41","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3927","RelatedDescription":"Opened pull request \"[msbuild] Use a response file in 'MmpTaskBase'\" (#3927) at xamarin/xamarin-macios","RelatedBody":"- Fixes #3698: [msbuild] Use response file for mmp's msbuild task\n(https://github.com/xamarin/xamarin-macios/issues/3698)\n- Update Common/Driver to log arguments for all verbosity levels except quiet.\n  This makes it so mmp's /verbose when used in a response file prints the provided arguments.\n- No test yet because of lack of Xamarin.Mac msbuild task test infrastructure.\n  See: https://github.com/xamarin/xamarin-macios/issues/3926"},{"Id":"7516149038","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:02:22","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3925","RelatedDescription":"Opened issue \"[monotouch-test] CoreText tests should run on watchOS\" (#3925) at xamarin/xamarin-macios","RelatedBody":"CoreText is available on watchOS since version 2.2. As you can see here for instance: https://github.com/xamarin/xamarin-macios/blob/master/tests/monotouch-test/CoreText/FontTest.cs#L10 our tests (all of them) are marked as `#if !__WATCHOS__`.\r\n\r\nI don't see why and believe this is incorrect.\r\n\r\n_Note: the test I added in https://github.com/xamarin/xamarin-macios/pull/3871 is available (and working) on watchOS._"},{"Id":"7516093175","Type":"IssuesEvent","CreatedAt":"2018-04-11T20:51:25","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3840","RelatedDescription":"Closed issue \"Getting a nuget restore issue from commandline\" (#3840) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Use solution \"https://github.com/xamarin/xamarin-forms-book-samples/tree/master/Chapter01/PlatformVisuals\"\r\n2. Execute \"nuget restore xamarin-forms-book-samples/Chapter01/PlatformVisuals/PlatformVisuals.sln\" from command line\r\n\r\n### Expected Behavior\r\nnugets are successfully restored and able to build the csproj successfully\r\n\r\n### Actual Behavior\r\nnugets fail to restore with  \" error MSB4226: The imported project \"/Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/xbuild/Microsoft/WindowsXaml/v15.0/Microsoft.Windows.UI.Xaml.CSharp.targets\" was not found\".\r\nLog: https://gist.github.com/GouriKumari/a5bf48a60b3f9d944fb85ffd7c471d74\r\n.csproj fails to build from command line. \r\n\r\n### Environment\r\nhttps://gist.github.com/GouriKumari/1cd31f769f738061b528f55120639da7\r\n\r\n### Logs\r\nhttps://gist.github.com/GouriKumari/a5bf48a60b3f9d944fb85ffd7c471d74\r\n\r\n##Additional Info:\r\nWith current stable, it works.  Test Env: https://gist.github.com/GouriKumari/21f621582a150ed951c5d63677f2a147\n\n> VS bug [#594236](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/594236)"},{"Id":"7515042921","Type":"PullRequestEvent","CreatedAt":"2018-04-11T17:31:21","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3919","RelatedDescription":"Merged pull request \"[tests] Fix MT4134 test by adding new framework to list of unsupported frameworks when using older Xcode.\" (#3919) at xamarin/xamarin-macios","RelatedBody":"Fixes this test failure:\n\n    1) Failed : Xamarin.Registrar.MT4134\n      errors\n      Expected: 9\n      But was:  10\n\nThis was not detected by the PR bot because this test requires having Xcode\n8.3 installed (otherwise the test is ignored), and the PR bot didn't have that\nversion of Xcode."},{"Id":"7514127484","Type":"PullRequestEvent","CreatedAt":"2018-04-11T14:55:57","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3924","RelatedDescription":"Opened pull request \"[msbuild] Fixed TargetDevice typo\" (#3924) at xamarin/xamarin-macios","RelatedBody":"Fixes issue #3922"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"984140279061020672","CreatedAt":"2018-04-11T18:45:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with new #XamarinForms #XAML IntelliSense functionality in #VisualStudio 2017: https://t.co/EPKoitU5bA https://t.co/JnlquxCZN9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":23,"RawContent":null},{"Id":"983738884319334400","CreatedAt":"2018-04-10T16:10:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build Xamarin.iOS from the source code in the second part of our four-part series on debugging… https://t.co/uVkITyoInQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"983374729166934016","CreatedAt":"2018-04-09T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/O4ILyulYAJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":24,"RawContent":null},{"Id":"983104477468266496","CreatedAt":"2018-04-08T22:09:07+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your Xamarin apps with Azure CosmosDB: https://t.co/acrN8gdJdS https://t.co/7dgtdHbqn9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":13,"RawContent":null},{"Id":"982728475831390208","CreatedAt":"2018-04-07T21:15:01+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/FGw0WVLZMU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":21,"RawContent":null},{"Id":"982351517544996870","CreatedAt":"2018-04-06T20:17:07+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/0hyFj6caS2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":27,"RawContent":null},{"Id":"982287570737315842","CreatedAt":"2018-04-06T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/jQc7aGUfzQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"981917376756232193","CreatedAt":"2018-04-05T15:32:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"981605676123344896","CreatedAt":"2018-04-04T18:53:25+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/eB7EyBcngh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":14,"RawContent":null},{"Id":"981383112331493377","CreatedAt":"2018-04-04T04:09:01+00:00","UserScreenname":"xamarinhq","Text":"Add cloud storage to your #Xamarin apps with #Azure Blob Storage: https://t.co/xM3dAE2jRZ https://t.co/pKafHtrM4C","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":26,"RawContent":null},{"Id":"981202163941761024","CreatedAt":"2018-04-03T16:10:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to merge multiple resource dictionaries in the most recent stable release of #XamarinForms for even great… https://t.co/Kg5Dh5x1pO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":22,"RawContent":null},{"Id":"980881805221007371","CreatedAt":"2018-04-02T18:57:00+00:00","UserScreenname":"xamarinhq","Text":"Jump into #Xamarin with an event near you this April: https://t.co/Tg8HHIbUDA https://t.co/OJW7RynVmV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"980838018474020864","CreatedAt":"2018-04-02T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how you can contribute to Xamarin.iOS and Xamarin.Mac—no code necessary! Get started: https://t.co/XU5OJkcXCt https://t.co/gY8s2v6cYg","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":18,"RawContent":null},{"Id":"980547128639541254","CreatedAt":"2018-04-01T20:47:07+00:00","UserScreenname":"xamarinhq","Text":"Check out the new, feature-packed release of #UrhoSharp 1.8: https://t.co/ZxSIstdhNE https://t.co/y4p0bmVENZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":56,"FavoriteCount":19,"RawContent":null},{"Id":"979799673417424907","CreatedAt":"2018-03-30T19:17:00+00:00","UserScreenname":"xamarinhq","Text":"The #XamarinForms 3.0 pre-release is now available! Download and get started today: https://t.co/oMrz45f2XW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":152,"FavoriteCount":109,"RawContent":null},{"Id":"979752111947722753","CreatedAt":"2018-03-30T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:… https://t.co/cS0ZDvkieM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"979078173127331841","CreatedAt":"2018-03-28T19:30:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/2os3iP5NYD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":85,"FavoriteCount":31,"RawContent":null},{"Id":"979020041961328647","CreatedAt":"2018-03-28T15:39:01+00:00","UserScreenname":"xamarinhq","Text":"Add @TizenProject to your #XamarinForms apps: https://t.co/pom9Nki4vo https://t.co/ytWxQJabcG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2018-04-12T05:30:41.3519709Z","RunDurationInMilliseconds":4208}