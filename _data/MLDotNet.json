{"Data":{"GitHub":{"Issues":[{"Id":"402963382","IsPullRequest":true,"CreatedAt":"2019-01-25T01:09:38","Actor":"Ivanidzo4ka","Number":"2241","RawContent":null,"Title":"Make sure seed works for stratification column in TrainTest and CrossValidate","State":"open","Body":"I hope this is final nail into #1635.\r\nFixes #1635 ","Url":"https://github.com/dotnet/machinelearning/pull/2241","RelatedDescription":"Open PR \"Make sure seed works for stratification column in TrainTest and CrossValidate\" (#2241)"},{"Id":"402963317","IsPullRequest":false,"CreatedAt":"2019-01-25T01:09:22","Actor":"fedoranimus","Number":"2240","RawContent":null,"Title":"Help utilizing multi-column vectors","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  2.1.5\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nIn my migration to v0.8, I'm moving away from the legacy API and have data that consists of over 400 columns. Previously, by manually mapping each column, I achieved results from evaluation:\r\n```\r\nRMS = 1.02567798627118\r\nRSquared = 0.993830469856289\r\n```\r\n\r\nNow, I'm reading in the columns as multi-column vectors (note: column names have been obfuscated here):\r\n```\r\nTextLoader textLoader = mlContext.Data.TextReader(new TextLoader.Arguments()\r\n            {\r\n                Column = new TextLoader.Column[] {\r\n                    new TextLoader.Column(\"NumericRelatedData\", DataKind.R4, 0, 359),\r\n                    new TextLoader.Column(\"CategoricalRelatedData\", DataKind.Text, 360, 407),\r\n                    new TextLoader.Column(\"SpecificData1\", DataKind.Text, 408),\r\n                    new TextLoader.Column(\"SpecificData2\", DataKind.Text, 409),\r\n                    new TextLoader.Column(\"SpecificData3\", DataKind.R4, 410),\r\n                    new TextLoader.Column(\"Label\", DataKind.R4, 411)\r\n                },\r\n                HasHeader = true,\r\n                Separator = \",\"\r\n            });\r\n```\r\n\r\n- **What happened?**\r\nI got vastly different results from my model evaluation:\r\n```\r\n*       L1 Loss:        1.543\r\n*       L2 Loss:        182.015\r\n*       RMS:            13.491\r\n*       Loss Function:  182.015\r\n*       R-squared:      -0.067\r\n```\r\n\r\nAdditionally, the model is not explorable, because the class I have to represent a single prediction has each column mapped to a different field, but those fields cannot be identified in the model.\r\n\r\n- **What did you expect?**\r\nI expected identical metrics, since I'm using the same trainer (`FastTree`)\r\n\r\nIt's obvious that I'm not understanding how the multi-column vectors are supposed to work.\r\n\r\n**My question is primarily: Do I have to continue to map each column in the TextLoader (and thus all subsequent uses of it in transformers) to get the results I'd like?**\r\n\r\n### Source code / logs\r\n\r\nI'm asking a very similar question in the [documentation repo](https://github.com/dotnet/docs/issues/9962)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2240","RelatedDescription":"Open issue \"Help utilizing multi-column vectors\" (#2240)"},{"Id":"402962982","IsPullRequest":true,"CreatedAt":"2019-01-25T01:07:35","Actor":"sfilipi","Number":"2239","RawContent":null,"Title":"WIP - Input output swap","State":"open","Body":"Fixes issue #2064 \r\n\r\n1- Change the order of the parameters from inputColumn, outputColumn to outputColumnName, sourceColumnName. \r\n\r\n2 - Changing the \"source\" parameter name and field in the Columninfo classes, to be \"sourceColumnName\", as suggested.\r\n\r\n3- Changing the \"name\" parameter to \"outputColumnName\" in the:\r\n- estimator extension APIs\r\n- estimator ctors\r\n- column pairs expressed through tuples, because in context it reads better than name.\r\n\r\nNote: in the columnInfo classes i left it to \"name\" because \"outputColumnName\" makes no sense.\r\n\r\n4 - Nit on standardizing the XML comments.\r\n5 - Arranging the order of the parameters to be: outputColumnName, required parameters, nullable sourceColumnName.\r\n6 - fixed some bugs i bumped into. \r\n\r\nBest reviews with pop corn near. ","Url":"https://github.com/dotnet/machinelearning/pull/2239","RelatedDescription":"Open PR \"WIP - Input output swap\" (#2239)"},{"Id":"402948523","IsPullRequest":false,"CreatedAt":"2019-01-25T00:00:39","Actor":"luisquintanilla","Number":"2238","RawContent":null,"Title":"Code Snippet Language Options Visible for Languages Not Yet Available","State":"open","Body":"On the top toolbar there is a dropdown to select the language to display the code snippet in with options for F# and VB. However, when either F# or VB are selected, the code in the code snipped remains the default C# implementation. \n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 209d151a-38b8-5ef8-57b9-bbdb0fcdef55\n* Version Independent ID: 0dbd3424-7e4e-8189-5f6b-f46767cc7554\n* Content: [OnnxTransform Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.onnxtransform?view=ml-dotnet#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/OnnxTransform.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/OnnxTransform.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/2238","RelatedDescription":"Open issue \"Code Snippet Language Options Visible for Languages Not Yet Available\" (#2238)"},{"Id":"402947185","IsPullRequest":false,"CreatedAt":"2019-01-24T23:54:43","Actor":"singlis","Number":"2237","RawContent":null,"Title":"Remove learningRate argument from FastForest constructor","State":"open","Body":"Started from issue #1983 where there is a comment about learningRate is accessible from the FastForest constructor but not accessible from the FastForest Arguments (now Options) class. After investigating, learningRate is not an argument for FastForest and that it was added to the constructor by mistake. \r\n\r\nFor this issue, the fix is to remove learningRate from the constructor for FastForest and update the code/tests as needed:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/1baaec31e0477cb17032b8a9a8a8488acb3606af/src/Microsoft.ML.FastTree/RandomForestClassification.cs#L155\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2237","RelatedDescription":"Open issue \"Remove learningRate argument from FastForest constructor\" (#2237)"},{"Id":"402936797","IsPullRequest":true,"CreatedAt":"2019-01-24T23:12:21","Actor":"Ivanidzo4ka","Number":"2236","RawContent":null,"Title":"Add sample for stop words removing.","State":"open","Body":"Addresses #1996","Url":"https://github.com/dotnet/machinelearning/pull/2236","RelatedDescription":"Open PR \"Add sample for stop words removing.\" (#2236)"},{"Id":"402646345","IsPullRequest":true,"CreatedAt":"2019-01-24T23:02:08","Actor":"hvitved","Number":"2228","RawContent":null,"Title":"Fix a bug in `ColumnTypeExtensions.SameSizeAndItemType()`","State":"closed","Body":"Hi,\r\n\r\nI came across this when looking at the alerts for this project on LGTM.com (full disclosure: I work on the C# analysis there). It appears to have been introduced recently on https://github.com/dotnet/machinelearning/pull/2131.\r\n\r\nYou can see the original alert on LGTM.com here: https://lgtm.com/projects/g/dotnet/machinelearning/alerts/?mode=tree&lang=csharp&ruleFocus=1506097706076\r\n\r\nBest regards,\r\nTom\r\n\r\n(I will leave these bits below unfilled until you've determined whether this is actually a bug fix or not...)\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2228","RelatedDescription":"Closed or merged PR \"Fix a bug in `ColumnTypeExtensions.SameSizeAndItemType()`\" (#2228)"},{"Id":"402933005","IsPullRequest":true,"CreatedAt":"2019-01-24T22:58:17","Actor":"codemzs","Number":"2235","RawContent":null,"Title":"Enhance code coverage bot message.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2235","RelatedDescription":"Open PR \"Enhance code coverage bot message.\" (#2235)"},{"Id":"402924395","IsPullRequest":true,"CreatedAt":"2019-01-24T22:30:40","Actor":"najeeb-kazmi","Number":"2234","RawContent":null,"Title":"Adding attribution info for the Iris dataset","State":"open","Body":"Adding attribution info for the Iris dataset\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2234","RelatedDescription":"Open PR \"Adding attribution info for the Iris dataset\" (#2234)"},{"Id":"402915267","IsPullRequest":false,"CreatedAt":"2019-01-24T22:02:50","Actor":"CESARDELATORRE","Number":"2233","RawContent":null,"Title":"Enable to get ranked-list of predicted labels when performing a multi-class classification prediction","State":"open","Body":"This is a needed scenario that can be pretty common from a business needs perspective.\r\n\r\nWhen using ML.NET code implementing multi-class classification, we’re returning/predicting a single label… \r\n\r\n**Multi-class Classification**\r\n- Label: Original Label of the example.\r\n- Score: Its an array whose length is equal to number of classes and contains probability for each class.\r\n**- PredictedLabel: Predicted class.** _<-- (*) There's a single PredictedLabel_\r\n\r\nBut in many business scenarios, a list of possible labels where something can be classified is also very useful.\r\n\r\n•\tFor instance, a real product might be related to multiple product-categories in an eCommerce, not just one category.\r\n•\tAnother example where this scenario is possible (and we actually have it working), is image classification in TensorFlow, you can get a list of the best labels with a score per each, from the TF model.\r\n\r\nIn fact, the class used to get a prediction is like:\r\n\r\n   ```\r\n public class MyPrediction\r\n    {\r\n        public float[] Score;\r\n\r\n        public string PredictedLabelValue;\r\n    }\r\n```\r\n\r\nSo, we actually get an array of Scores, like here:\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/51705169-bc56b080-1fcf-11e9-8bd2-1ba930359a4a.png)\r\n\r\n**We need a way to map the array of float confidence/score levels back to each original class/label names, in addition to the “single best” PredictedLabelValue.**\r\n\r\nAdditional info provided by **Ivan Matantsev**: \r\n\r\n_Technically it should be accessible via metadata in Schema, but I don’t see any way to access it in transformer.\r\nTheoretically if you load model from file, you can call GetOutputSchema, but if you just do prediction, you don’t have dataview to get Schema you just have example/prediction classes.\r\nSo we either need a way to Expose output Schema in prediction function or to have Transformer which would spit out specific metadata for certain columns._\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2233","RelatedDescription":"Open issue \"Enable to get ranked-list of predicted labels when performing a multi-class classification prediction\" (#2233)"},{"Id":"402862049","IsPullRequest":true,"CreatedAt":"2019-01-24T19:31:34","Actor":"zeahmed","Number":"2232","RawContent":null,"Title":"ValueMapperTransformer: Added support for loading map from file through dataview.","State":"open","Body":"This fixes #2162. This is the 2nd part where the support for loading the mapping from file is added.","Url":"https://github.com/dotnet/machinelearning/pull/2232","RelatedDescription":"Open PR \"ValueMapperTransformer: Added support for loading map from file through dataview.\" (#2232)"},{"Id":"402813009","IsPullRequest":true,"CreatedAt":"2019-01-24T19:27:01","Actor":"sharwell","Number":"2230","RawContent":null,"Title":"Enable test coverage","State":"closed","Body":"This change works around tonerdo/coverlet#318 to immediately enable correct coverage for test code.","Url":"https://github.com/dotnet/machinelearning/pull/2230","RelatedDescription":"Closed or merged PR \"Enable test coverage\" (#2230)"},{"Id":"402859597","IsPullRequest":false,"CreatedAt":"2019-01-24T19:24:57","Actor":"TomFinley","Number":"2231","RawContent":null,"Title":"Remove IDataLoader from public API surfaces for specifying data","State":"open","Body":"So in \"command line\" world, we have things that look like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/eed91b988fe6850d13255d599c9191c9a9b80aa0/src/Microsoft.ML.Data/Transforms/ValueToKeyMappingTransformer.cs#L116-L123\r\n\r\nThis makes sense, considering that when invoking a command line, you are not working in the context of an existing process but starting a new one, so the most plausible source for data is some file, which we have to specify how to load and so on and so on.\r\n\r\nHowever, then we enter API land, and (understandably, to be clear) people just decided to do a direct translation, as we see below:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/eed91b988fe6850d13255d599c9191c9a9b80aa0/src/Microsoft.ML.Data/Transforms/ValueToKeyMappingEstimator.cs#L41-L42\r\n\r\nThat the API might resemble command line as a first preference is understandable, but in this specific context of an API, a variance from this trend would make sense. We've invented what amounts to an entirely new API to load data from a source, when we already have mechanisms to do this.\r\n\r\nIf we wanted this to work over input `IDataView`s, which seems to be what the authors are really getting at, then it should just do so directly. This has a few advantages:\r\n\r\n1. No new way of loading files distinct from existing API for that same task,\r\n2. Simpler method signatures,\r\n3. Hides `IDataLoader` transform, which is something relating to #1995 we need to do anyway. (This in particular is why we might consider this to have some greater urgency.)\r\n\r\n/cc @Ivanidzo4ka @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/2231","RelatedDescription":"Open issue \"Remove IDataLoader from public API surfaces for specifying data\" (#2231)"},{"Id":"402791302","IsPullRequest":true,"CreatedAt":"2019-01-24T19:10:55","Actor":"sharwell","Number":"2229","RawContent":null,"Title":"Revert \"exclude test folder from codecov.\"","State":"closed","Body":"Reverts dotnet/machinelearning#2227\r\n\r\nPossibly blocked on tonerdo/coverlet#318 (though I would not personally block on that issue).","Url":"https://github.com/dotnet/machinelearning/pull/2229","RelatedDescription":"Closed or merged PR \"Revert \"exclude test folder from codecov.\"\" (#2229)"},{"Id":"402541247","IsPullRequest":true,"CreatedAt":"2019-01-24T05:32:26","Actor":"codemzs","Number":"2227","RawContent":null,"Title":"exclude test folder from codecov.","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2227","RelatedDescription":"Closed or merged PR \"exclude test folder from codecov.\" (#2227)"},{"Id":"402487541","IsPullRequest":true,"CreatedAt":"2019-01-24T04:07:16","Actor":"codemzs","Number":"2218","RawContent":null,"Title":"change coverage file format to cobertura.","State":"closed","Body":"Just testing if cobertura works better on codecov.","Url":"https://github.com/dotnet/machinelearning/pull/2218","RelatedDescription":"Closed or merged PR \"change coverage file format to cobertura.\" (#2218)"},{"Id":"402455134","IsPullRequest":true,"CreatedAt":"2019-01-24T04:07:04","Actor":"codemzs","Number":"2216","RawContent":null,"Title":"test.","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2216","RelatedDescription":"Closed or merged PR \"test.\" (#2216)"},{"Id":"402448295","IsPullRequest":true,"CreatedAt":"2019-01-24T04:01:12","Actor":"rogancarr","Number":"2214","RawContent":null,"Title":"Adding tests to cover the array checks in the core Utils","State":"closed","Body":"This PR adds tests to cover the array checks in `Microsoft.ML.Internal.Utilities`.\r\n\r\nFixes #2213 ","Url":"https://github.com/dotnet/machinelearning/pull/2214","RelatedDescription":"Closed or merged PR \"Adding tests to cover the array checks in the core Utils\" (#2214)"},{"Id":"402446945","IsPullRequest":false,"CreatedAt":"2019-01-24T04:01:12","Actor":"rogancarr","Number":"2213","RawContent":null,"Title":"Array Checks in Microsoft.ML.Internal.Utilities.Utils are not tested","State":"closed","Body":"The array tests used as sanity checks are not tested, even though they have very particular expectations on behavior (different from their names imply, sometimes). We should add tests to cover them.","Url":"https://github.com/dotnet/machinelearning/issues/2213","RelatedDescription":"Closed issue \"Array Checks in Microsoft.ML.Internal.Utilities.Utils are not tested\" (#2213)"},{"Id":"402515556","IsPullRequest":true,"CreatedAt":"2019-01-24T03:41:51","Actor":"codemzs","Number":"2225","RawContent":null,"Title":"merge opencover reports into one Cobertura report and upload to codecov.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2225","RelatedDescription":"Closed or merged PR \"merge opencover reports into one Cobertura report and upload to codecov.\" (#2225)"},{"Id":"402520887","IsPullRequest":true,"CreatedAt":"2019-01-24T03:02:22","Actor":"codemzs","Number":"2226","RawContent":null,"Title":"hot fix.","State":"closed","Body":"Fix master branch, since it broke with changes from @zeahmed.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2226","RelatedDescription":"Closed or merged PR \"hot fix.\" (#2226)"},{"Id":"402514629","IsPullRequest":true,"CreatedAt":"2019-01-24T02:28:07","Actor":"Ivanidzo4ka","Number":"2224","RawContent":null,"Title":"Make changes necessary to build internal repo","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2224","RelatedDescription":"Open PR \"Make changes necessary to build internal repo\" (#2224)"},{"Id":"402511845","IsPullRequest":false,"CreatedAt":"2019-01-24T02:14:23","Actor":"rogancarr","Number":"2223","RawContent":null,"Title":"Array checks in Utils return true for null arrays","State":"open","Body":"`Microsoft.ML.Internal.Utilities.Utils` has a couple of array checks that return `true` when a `null` array is passed in. Is this the expected behavior?\r\n\r\nHere are the culprits:\r\n\r\n```cs\r\npublic static bool IsSorted(IList<float> values);\r\npublic static bool IsSorted(int[] values);\r\n```\r\n\r\n```cs\r\npublic static bool IsIncreasing(int min, ReadOnlySpan<int> values, int lim);\r\n```\r\n\r\nNote that `IsIncreasing` is typically used for checking `int[]` arrays because `ReadOnlySpan` performs an implicit cast and null arrays are set to a 0-length `ReadOnlySpan`.\r\n\r\nIn a similar vein, `IsSorted` uses a null-safe `Utils.Size()` to check the input length of the array.\r\n\r\nDoes this make sense that we say that `null` arrays are sorted, and that they are decreasing?","Url":"https://github.com/dotnet/machinelearning/issues/2223","RelatedDescription":"Open issue \"Array checks in Utils return true for null arrays\" (#2223)"},{"Id":"402505403","IsPullRequest":true,"CreatedAt":"2019-01-24T01:42:18","Actor":"singlis","Number":"2222","RawContent":null,"Title":"ValueMappingEstimator example","State":"open","Body":"This provides an example that demonstrates different ways to use the\r\nValueMappingEstimator. This is part of the original change to add the\r\nValueMappingEstimator to the code base and references #754.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2222","RelatedDescription":"Open PR \"ValueMappingEstimator example\" (#2222)"},{"Id":"402501265","IsPullRequest":true,"CreatedAt":"2019-01-24T01:29:45","Actor":"codemzs","Number":"2221","RawContent":null,"Title":"fix file layout for codecov","State":"closed","Body":"Maps file layout correctly.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2221","RelatedDescription":"Closed or merged PR \"fix file layout for codecov\" (#2221)"},{"Id":"402499373","IsPullRequest":true,"CreatedAt":"2019-01-24T01:13:30","Actor":"eerhardt","Number":"2220","RawContent":null,"Title":"Extract IDataView into its own assembly and NuGet package","State":"open","Body":"Moving IDataView and related types into a new library: `Microsoft.Data.DataView`\r\n\r\nFix #1860\r\n\r\nI've split the changes into 3 commits for easy reviewing:\r\n\r\n1. Copy the files out into the new folder with minimal/zero changes\r\n2. Get the new assembly building\r\n3 Get ML.NET building on the new assembly","Url":"https://github.com/dotnet/machinelearning/pull/2220","RelatedDescription":"Open PR \"Extract IDataView into its own assembly and NuGet package\" (#2220)"},{"Id":"402495204","IsPullRequest":true,"CreatedAt":"2019-01-24T00:54:00","Actor":"abgoswam","Number":"2219","RawContent":null,"Title":"Modify API for advanced settings (FieldAwareFactorizationMachineTrainer)","State":"open","Body":"Towards #1798 .\r\n\r\nThis PR addresses the following algos \r\n\r\n- FieldAwareFactorizationMachineTrainer\r\n\r\nThe following changes have been made:\r\n\r\n1.  Two `public` extension methods, one for simple arguments and the other for advanced options\r\n2. Make constructors `internal` .  Also a few other fields have been made `internal`\r\n3. Pass Options objects as arguments instead of Action delegate. Also, added  3 fields to `Options`  for API consistency. \r\n4. Rename Arguments to Options\r\n5. Rename Options objects as options (instead of args or advancedSettings used so far)","Url":"https://github.com/dotnet/machinelearning/pull/2219","RelatedDescription":"Open PR \"Modify API for advanced settings (FieldAwareFactorizationMachineTrainer)\" (#2219)"},{"Id":"402468569","IsPullRequest":true,"CreatedAt":"2019-01-23T23:01:49","Actor":"artidoro","Number":"2217","RawContent":null,"Title":"Improve exception message and make consistent with ExceptSchemaMismatch","State":"open","Body":"Fixes #2044.\r\n\r\nI make the exception message consistent using `ExceptSchemaMismatch` when possible. \r\nIn particular, as mentioned in the issue #2044, I did it for the base class for TrainerEstimators.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2217","RelatedDescription":"Open PR \"Improve exception message and make consistent with ExceptSchemaMismatch\" (#2217)"},{"Id":"402449366","IsPullRequest":true,"CreatedAt":"2019-01-23T22:07:25","Actor":"codemzs","Number":"2215","RawContent":null,"Title":"code coverage yml fix.","State":"closed","Body":"fix file path, since yml seems to take full paths and not relative paths.","Url":"https://github.com/dotnet/machinelearning/pull/2215","RelatedDescription":"Closed or merged PR \"code coverage yml fix.\" (#2215)"},{"Id":"402426219","IsPullRequest":true,"CreatedAt":"2019-01-23T21:25:03","Actor":"singlis","Number":"2212","RawContent":null,"Title":"Fixing build break","State":"closed","Body":"Updated the API call for GetRowCursor as this was causing a build break.","Url":"https://github.com/dotnet/machinelearning/pull/2212","RelatedDescription":"Closed or merged PR \"Fixing build break\" (#2212)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-25T05:30:48.2965881Z","RunDurationInMilliseconds":726}