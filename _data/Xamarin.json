{"Data":{"Blog":{"FeedItems":[{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in Visual Studio 15.8, you can...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null},{"Title":"Handling input from Apple Pencil","PublishedOn":"2018-09-19T17:52:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"After months of contemplation before finally buying an Apple Pencil to go along with the iPad Pro, it turns out it is as magical as they say! This blog post describes how to use Xamarin.iOS and Visual...","Href":"https://blog.xamarin.com/apple-pencil-handling-input/","RawContent":null},{"Title":"Xamarin.Forms 3.2.0 Released: Going Big with Little Things","PublishedOn":"2018-09-17T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms 3.2.0 continues the theme of previous releases to give you big wins by making little things much easier to do. The entire version 3 series has been about reducing the friction of doing...","Href":"https://blog.xamarin.com/xamarin-forms-3-2-0-released-going-big-with-little-things/","RawContent":null},{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null},{"Title":"Getting Started with Android Pie","PublishedOn":"2018-08-21T20:19:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Google recently released Android Pie for developers to enhance their apps and build new experiences with. Previously, Microsoft released an Android 9.0 Preview for Xamarin.Android and as of today, you...","Href":"https://blog.xamarin.com/android-pie-preview-getting-started/","RawContent":null},{"Title":"Exploring New iOS 12 ARKit Capabilities With Xamarin","PublishedOn":"2018-08-20T20:04:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s summertime, which for Xamarin developers means new iOS betas to explore and learn. ARKit, which debuted last year in iOS 11, has matured over the past year and in iOS 12 is much more...","Href":"https://blog.xamarin.com/exploring-new-ios-12-arkit-capabilities-with-xamarin/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8334882516","Type":"PullRequestEvent","CreatedAt":"2018-09-27T22:57:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2239","RelatedDescription":"Opened pull request \"[Xamarin.Android.Tools.BootstrapTasks] Improve RenameTestCases errors\" (#2239) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2238\r\nContext: 8905dfa4bb8b3e736e3b1ce256e60b18d1674121\r\nContext: 31a23ca4179785da54520ac127fd5db7645ac049\r\n\r\nFor *months*, I would occasionally see an error message which would\r\ninfuriate me, because it didn't make sense to my feeble mind:\r\n\r\n\txamarin-android/build-tools/scripts/TestApks.targets(223,5): error : Root element is missing\r\n\r\nThe actual line number isn't relevant and changes over time, but what\r\n*killed* me is that, *somehow*, there'd be (presumably) invalid XML\r\n...in the middle of a `.targets` file?\r\n\r\nDoes that make any sense at all?\r\n\r\n(No, that does not make sense, adding to the infuriation.)\r\n\r\nTurns Out™ that I was *misreading* the message: The *task* at e.g.\r\n`TestApks.targets` line 223 was reporting an exception with the\r\nmessage text \"Root element is missing.\"\r\n\r\nHowever, *because* the task name wasn't mentioned in the error\r\nmessage, this very significant fact escaped my attention.\r\n\r\nThis messaging structure is how `Log.LogErrorFromException()` works.\r\nAs such, we should modify how we're using it, to reduce confusion.\r\n\r\nIn the case of `<RenameTestCases/>`:\r\n\r\n 1. Add an additional `LogError(\"Unable to process...\")` message, so\r\n    that `Root element is missing` won't be \"alone\" without context.\r\n\r\n 2. Generate an output NUnit XML file which contains an error message.\r\n\r\nHopefully, by generating such an XML file, the Jenkins Test Results\r\npage will show *an* error.  (Not necessarily a helpful one, but a\r\nless-than-helpful error is better than none at all when *something*\r\nhas gone wrong...)"},{"Id":"8334746542","Type":"IssuesEvent","CreatedAt":"2018-09-27T22:18:25","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2238","RelatedDescription":"Opened issue \"Audit LogErrorFromException\" (#2238) at xamarin/xamarin-android","RelatedBody":"An occasional error that we'll see in the build logs is:\r\n\r\n```\r\nxamarin-android/build-tools/scripts/TestApks.targets(249,5): error : Root element is missing.\r\n```\r\n\r\nThis message is borderline infuriating, because `TestApks.targets(249,5)` is a `<RenameTestCases/>` task execution.  *How is there a missing root element?!*\r\n\r\nTurns Out™ that this is MSBuild being helpful: `<RenameTestCases/>`'s `Execute()` method has a catch block which *only* calls `Log.LogErrorFromException()`:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/30eea71177853a73ab07911d49be1c1707c300f0/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks/RenameTestCases.cs#L43-L45\r\n\r\n`Log.LogErrorFromException()` helpfully provides the filename and line information for where the task was invoked -- hence `TestApks.targets(249,5)` -- but the output isn't clear that there's an intervening task here.  For *months* (years?) I've been laboring under the assumption that this `Root element is missing` message is being generated *from MSBuild*.\r\n\r\nThat is not the case.  The error is reported from our task.\r\n\r\nThe *Real*™ problem is that the \"UI\" reporting of the error is inscrutable.\r\n\r\nIn short, `Log.LogErrorFromException()` should be considered a code smell: if it's the *only* thing present, then *when it logs an error*, the way that the error is reported -- which includes the MSBuild `.targets` callsite location, but no mention that this is being reported from the task that executed -- is *extremely* misleading and unhelpful.\r\n\r\nWe should audit our codebase for all uses of `Log.LogErrorFromException()` and ensure that when we do use it, we provide useful \"error context\" as well, so that when an error occurs, *more* than just `Exception.Message` (\"Root element is missing\") and the  `.targets` call site is provided."},{"Id":"8334221082","Type":"PullRequestEvent","CreatedAt":"2018-09-27T20:26:05","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2237","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] CopyResource should fail with an error code\" (#2237) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/609\r\n\r\nIn a recent change, we removed `StubApplication.java`, but downstream\r\nin `monodroid` we had MSBuild tasks that still expected the file to\r\nexist.\r\n\r\nWe got an error such as:\r\n\r\n    Xamarin.Android.Common.Debugging.targets(319,2): error MSB4018: The \"CopyResource\" task failed unexpectedly.\r\n    Xamarin.Android.Common.Debugging.targets(319,2): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object\r\n    Xamarin.Android.Common.Debugging.targets(319,2): error MSB4018: at Xamarin.Android.Tasks.CopyResource.Run (System.Reflection.Assembly assm, System.String ResourceName, System.String OutputPath, Microsoft.Build.Utilities.TaskLoggingHelper Log) [0x00058] in <5782345e71104ee895a29d54bde93c43>:0\r\n    Xamarin.Android.Common.Debugging.targets(319,2): error MSB4018: at Xamarin.Android.Tasks.CopyResource.Execute () [0x00018] in <5782345e71104ee895a29d54bde93c43>:0\r\n    Xamarin.Android.Common.Debugging.targets(319,2): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in <528faf194f4946628868b84241d6ad15>:0\r\n    Xamarin.Android.Common.Debugging.targets(319,2): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder+<ExecuteInstantiatedTask>d__26.MoveNext () [0x001f6] in <528faf194f4946628868b84241d6ad15>:0\r\n\r\nThe `CopyResource` MSBuild task should fail more gracefully: log a\r\ncoded error, and mention the file name that was missing.\r\n\r\nIn addition to this change:\r\n- Added `CopyResourceTests` to verify resources that should be\r\n  working, and the error code if it fails. We should add to the list\r\n  if there are other files we want to verify are working. This test is\r\n  very fast (<1s for entire class), because it doesn't need to build\r\n  an entire project.\r\n- Documented the `XA0116` error code."},{"Id":"8332256902","Type":"PullRequestEvent","CreatedAt":"2018-09-27T14:48:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2234","RelatedDescription":"Merged pull request \"Bump Mono to fix builds on the Linux PR builders\" (#2234) at xamarin/xamarin-android","RelatedBody":"Linux PR builders run on Debian instead of Ubuntu and because of an omission in\r\nthe Mono SDKs makefiles the bots tried to use MXE instead of the mingw\r\nenvironment provided by the distribution. The Mono bump includes a fix for this."},{"Id":"8332235443","Type":"PullRequestEvent","CreatedAt":"2018-09-27T14:45:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2192","RelatedDescription":"Merged pull request \"Make sure app bundle has soname set\" (#2192) at xamarin/xamarin-android","RelatedBody":"Android API23 and newer requires that any shared library used by an application\r\nwhich targets API23 or newer has its soname set in the ELF header or otherwise\r\nthe OS will refuse to load it:\r\n\r\n   09-18 08:07:27.687 10698 10698 W linker  : Warning: \"/data/app/Mono.Android_Tests-O9bT_-xHyd26brpmOI9RNg==/lib/x86/libmonodroid_bundle_app.so\" has no DT_SONAME (will use libmonodroid_bundle_app.so instead) and will not work when the app moves to API level 23 or later (https://android.googlesource.\r\ncom/platform/bionic/+/master/missing-soname-enforced-for-api-level-23) (allowing for now because this app's target API level is still 22) (TaskId:201)\r\n\r\nThis commit fixes the problem by passing `-soname libmonodroid_bundle_app.so` to\r\nthe linker when building the bundle."},{"Id":"8332226763","Type":"PullRequestEvent","CreatedAt":"2018-09-27T14:43:52","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2227","RelatedDescription":"Merged pull request \"[monodroid] Convert path to utf8 on windows.\" (#2227) at xamarin/xamarin-android","RelatedBody":"The `d_name` property on the directory structture is not\r\na `char*` on windows but a `wchar_t`. As a result it might\r\nnot behave as expected when running on the desktop.\r\n\r\nwe should use `utils.utf16_to_utf8` to convert the values\r\nover to a format which `copy_file_to_internal_location` can\r\ntake."},{"Id":"8330491303","Type":"PullRequestEvent","CreatedAt":"2018-09-27T09:52:10","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2236","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Only update the CustomView if the document changed.\" (#2236) at xamarin/xamarin-android","RelatedBody":"While investigating a Designer Build breakage in monodroid we\r\nhit an issue where the `ConvertCustomView` task was updating\r\na file even if nothing had changed in it.\r\n\r\nAs a result this causes a problem because we end up in a loop\r\nwhere `_GenerateJavaStubs` and `_UpdateAndroidResgen` and the\r\ndesigner target all update the same files over and over.\r\n\r\nSo lets try to avoid that by only updating the custom view\r\nif the file actaually changes."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8335909408","Type":"PullRequestEvent","CreatedAt":"2018-09-28T05:24:13","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3929","RelatedDescription":"Opened pull request \"[Android] Fix MaxLines on Android\" (#3929) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCurrent Android implementation of MaxLines is wrong because it's not accounting for the default value of this property which is -1. On Android, the default for maxLines is int.MaxValue as seen on Android's [source code](https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/TextView.java). I also refactored the iOS implementation because the existing code seemed too verbose.\r\n\r\nNote that Android and iOS seem to be treating defaults differently. Core's -1 gets translated as follows:\r\n\r\n**iOS:**\r\n0 or 1 depending on LineBreakMode (if 0, it means int.MaxValue to Android)\r\n**Android:**\r\nint.MaxValue\r\n\r\nCore's 0 as follows:\r\n\r\n**iOS:**\r\nint.MaxValue according to Android\r\n**Android:**\r\n1 (this needs to be verified. What happens on Android native if we set maxLines to 0?)\r\n\r\nThe differences should be documented properly, and I don't know how it all works on other platforms.\r\n\r\n@kingces95 Sorry if I'm stepping on your toes, but I need this fixed asap as it's a blocker for me. :)\r\n\r\n<!-- Describe your changes here. -->\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #3772\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8335433138","Type":"IssuesEvent","CreatedAt":"2018-09-28T02:16:12","Actor":"hartez","Repository":"xamarin/","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2955","RelatedDescription":"Closed issue \"[UWP] Default Slider has only 10 possible values\" (#2955) at xamarin/","RelatedBody":"Slider intervals are inconsistent accross platforms. The problematic platform is UWP:\r\n\r\nThe current behavior on UWP is approximately: snap to integers (if there are at least 10 integers in the range); otherwise snap to 10 points in the range.\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=38471\r\n> Charles Petzold 2016-02-04 20:45:48 UTC\r\n> A default WinRT/UWP Slider has its StepFrequency property set to 0.1, meaning that the default slider can only yield values of 0, 0.1, 0.2, ... 0.9, 1.0.\r\n> This is in contrast to the default Android Slider, which is given a maximum value of 1000, yielding values of 0, 0.001, 0.002, ... 0.099, 1.000.\r\n> To make these two Sliders consistent, the WinRT Slider should have its [StepFrequency]( https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.slider.stepfrequency#Windows_UI_Xaml_Controls_Slider_StepFrequency) always set to (Maximum - Minimum) / 1000.\r\n\r\nAlso on UWP a tooltip is shown by default, unlike on iOS (not sure about Android). For consistency the tooltip should be [disabled](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.slider.isthumbtooltipenabled#Windows_UI_Xaml_Controls_Slider_IsThumbToolTipEnabled) on UWP.\r\n\r\n(Ideally there would be Xamarin.Forms properties that allow for setting of slider snap intervals and tooltips, but this would require extra work on iOS since the default slider is [limited](https://stackoverflow.com/questions/40670919/uislider-missing-features-snap-tooltip-and-ticks).)"},{"Id":"8335433153","Type":"PullRequestEvent","CreatedAt":"2018-09-28T02:16:12","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3141","RelatedDescription":"Merged pull request \"[UWP] Allow setting StepFrequency of the Slider\" (#3141) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFor the Slider default value of step is set to `1000` to match Android.\r\nAlso removed ToolTip with current value.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #2955\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- UWP\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8335433138","Type":"IssuesEvent","CreatedAt":"2018-09-28T02:16:12","Actor":"hartez","Repository":"xamarin/","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2955","RelatedDescription":"Closed issue \"[UWP] Default Slider has only 10 possible values\" (#2955) at xamarin/","RelatedBody":"Slider intervals are inconsistent accross platforms. The problematic platform is UWP:\r\n\r\nThe current behavior on UWP is approximately: snap to integers (if there are at least 10 integers in the range); otherwise snap to 10 points in the range.\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=38471\r\n> Charles Petzold 2016-02-04 20:45:48 UTC\r\n> A default WinRT/UWP Slider has its StepFrequency property set to 0.1, meaning that the default slider can only yield values of 0, 0.1, 0.2, ... 0.9, 1.0.\r\n> This is in contrast to the default Android Slider, which is given a maximum value of 1000, yielding values of 0, 0.001, 0.002, ... 0.099, 1.000.\r\n> To make these two Sliders consistent, the WinRT Slider should have its [StepFrequency]( https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.slider.stepfrequency#Windows_UI_Xaml_Controls_Slider_StepFrequency) always set to (Maximum - Minimum) / 1000.\r\n\r\nAlso on UWP a tooltip is shown by default, unlike on iOS (not sure about Android). For consistency the tooltip should be [disabled](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.slider.isthumbtooltipenabled#Windows_UI_Xaml_Controls_Slider_IsThumbToolTipEnabled) on UWP.\r\n\r\n(Ideally there would be Xamarin.Forms properties that allow for setting of slider snap intervals and tooltips, but this would require extra work on iOS since the default slider is [limited](https://stackoverflow.com/questions/40670919/uislider-missing-features-snap-tooltip-and-ticks).)"},{"Id":"8335306497","Type":"PullRequestEvent","CreatedAt":"2018-09-28T01:30:20","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3928","RelatedDescription":"Opened pull request \"Fix UI test 39378\" (#3928) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemoved automated test\r\nAdded on-screen instructions\r\nSwitched to using another URL for the image\r\n@hartez wanted to see `ManualReview` category added, but this category is set when `#if UITEST` is true. Why set it if the test is not automated?\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #2305\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8335032909","Type":"PullRequestEvent","CreatedAt":"2018-09-27T23:47:15","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3927","RelatedDescription":"Opened pull request \"Automate UI test 35127\" (#3927) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nNot sure if this test will pass as I had to write it without being able to run it. However, the execution lines should be trivial.\r\n\r\nI'd appreciate some help with resolving the following issue:\r\n\r\n> [9/27/2018 6:36:17 PM Informational] The running adb server is incompatible with the Android SDK version in use by UITest: \r\n>     C:\\Program Files (x86)\\Android\\android-sdk\r\n> \r\n> You probably have multiple installations of the Android SDK and should update them or ensure that your IDE, simulator and shell all use the same instance.  The ANDROID_HOME environment variable can effect this.\r\n\r\nI was able to run UI tests last night, but today VS decided to fail on me. My adb version is as follows:\r\n\r\nAndroid Debug Bridge version 1.0.40\r\nVersion 4797878\r\nInstalled as C:\\Program Files (x86)\\Android\\android-sdk\\platform-tools\\adb.exe\r\n\r\nEnvironment variables should be set. I have SDKs 24 and 27 installed. VS installation comes with 27, but I needed to install 24 to be able to compile some of the projects.\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #2262\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8334752065","Type":"PullRequestEvent","CreatedAt":"2018-09-27T22:19:58","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3926","RelatedDescription":"Opened pull request \"Added instructions for UI test 38105\" (#3926) at xamarin/Xamarin.Forms","RelatedBody":"### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #2298\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8335576860","Type":"PullRequestEvent","CreatedAt":"2018-09-28T03:08:25","Actor":"baulig","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4888","RelatedDescription":"Merged pull request \"[security]: Make `SecCertificate` work with the latest runtime code.\" (#4888) at xamarin/xamarin-macios","RelatedBody":"* Fix the `NATIVE_APPLE_CERTIFICATE` logic; it should only be defined when\r\n  using `XAMARIN_APPLETLS` and not on watch.\r\n\r\n* It is no longer allowed to construct `X509Certificate` from a native pointer,\r\n  the `X509Certificate(IntPtr)` and `X509Certificate2(IntPtr)` constructors now\r\n  throw an exception.  Use `X509CertificateImplAppl` directly instead."},{"Id":"8334729633","Type":"PullRequestEvent","CreatedAt":"2018-09-27T22:14:04","Actor":"baulig","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4888","RelatedDescription":"Opened pull request \"[security]: Make `SecCertificate` work with the latest runtime code.\" (#4888) at xamarin/xamarin-macios","RelatedBody":"* Fix the `NATIVE_APPLE_CERTIFICATE` logic; it should only be defined when\r\n  using `XAMARIN_APPLETLS` and not on watch.\r\n\r\n* It is no longer allowed to construct `X509Certificate` from a native pointer,\r\n  the `X509Certificate(IntPtr)` and `X509Certificate2(IntPtr)` constructors now\r\n  throw an exception.  Use `X509CertificateImplAppl` directly instead."},{"Id":"8334528355","Type":"PullRequestEvent","CreatedAt":"2018-09-27T21:26:56","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4878","RelatedDescription":"Merged pull request \"Bump master versions\" (#4878) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8334287972","Type":"PullRequestEvent","CreatedAt":"2018-09-27T20:39:07","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4886","RelatedDescription":"Merged pull request \"Bump XM to 5.3.1 and audit fixes from `xcode10`\" (#4886) at xamarin/xamarin-macios","RelatedBody":"We plan to release XM 5.0 based on 15.8\nSo 15.9 will ship XM 5.2.x\nand 16.0 with XM 5.3.1.x for P1 (likely to be bumped a few times)\n\nBackport of\nhttps://github.com/xamarin/xamarin-macios/commit/b40230c09d557991b776de918b047442cd41533f"},{"Id":"8334116122","Type":"PullRequestEvent","CreatedAt":"2018-09-27T20:05:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4885","RelatedDescription":"Merged pull request \"Bump XM to 5.2 and audit fixes from `xcode10`\" (#4885) at xamarin/xamarin-macios","RelatedBody":"We plan to release XM 5.0 based on 15.8\nSo 15.9 will ship XM 5.2.x\n\nBackport of\nhttps://github.com/xamarin/xamarin-macios/commit/b40230c09d557991b776de918b047442cd41533f"},{"Id":"8334093353","Type":"PullRequestEvent","CreatedAt":"2018-09-27T20:01:19","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4887","RelatedDescription":"Opened pull request \"Bump XM to 5.1 and audit fixes from `xcode10`\" (#4887) at xamarin/xamarin-macios","RelatedBody":"We plan to release XM 5.0 based on 15.8\nSo xcode10.1 support is bumped to 5.1.x\n\nBackport of\nhttps://github.com/xamarin/xamarin-macios/commit/b40230c09d557991b776de918b047442cd41533f"},{"Id":"8333515186","Type":"PullRequestEvent","CreatedAt":"2018-09-27T18:13:25","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4886","RelatedDescription":"Opened pull request \"Bump XM to 5.3.1 and audit fixes from `xcode10`\" (#4886) at xamarin/xamarin-macios","RelatedBody":"We plan to release XM 5.0 based on 15.8\nSo 15.9 will ship XM 5.2.x\nand 16.0 with XM 5.3.1.x for P1 (likely to be bumped a few times)\n\nBackport of\nhttps://github.com/xamarin/xamarin-macios/commit/b40230c09d557991b776de918b047442cd41533f"},{"Id":"8333280784","Type":"PullRequestEvent","CreatedAt":"2018-09-27T17:31:16","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4885","RelatedDescription":"Opened pull request \"Bump XM to 5.2 and audit fixes from `xcode10`\" (#4885) at xamarin/xamarin-macios","RelatedBody":"We plan to release XM 5.0 based on 15.8\nSo 15.9 will ship XM 5.2.x\n\nBackport of\nhttps://github.com/xamarin/xamarin-macios/commit/b40230c09d557991b776de918b047442cd41533f"},{"Id":"8332723997","Type":"PullRequestEvent","CreatedAt":"2018-09-27T15:54:14","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4884","RelatedDescription":"Opened pull request \"Disable device tests using xharness\" (#4884) at xamarin/xamarin-macios","RelatedBody":"So far these four are disabled:\r\n\r\n- https://github.com/xamarin/maccore/issues/1008\r\n- https://github.com/xamarin/maccore/issues/1009\r\n- https://github.com/xamarin/maccore/issues/1014\r\n- https://github.com/xamarin/maccore/issues/1011\r\n\r\nI tested locally that TestsToSkipOnDevice.Contains hits but I did not do full device test run locally."},{"Id":"8332280657","Type":"PullRequestEvent","CreatedAt":"2018-09-27T14:51:19","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4883","RelatedDescription":"Merged pull request \"[xcode10] XM/AppKit audit\" (#4883) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":199,"FavoriteCount":108,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":44,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":41,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":78,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":178,"FavoriteCount":88,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":58,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":54,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null}]}},"RunOn":"2018-09-28T05:30:59.04907Z","RunDurationInMilliseconds":4190}