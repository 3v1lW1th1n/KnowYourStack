{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10944888412","Type":"PullRequestEvent","CreatedAt":"2019-11-25T21:33:34","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7713","RelatedDescription":"Opened pull request \"Deployment label log enrichment\" (#7713) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nNeed it to differentiate between the deployments for app service conversion since `DeploymentIdTelemetryEnricher` will not work there. Unfortunately, this change will only work with App services, so for transition period we would need to look at both. I didn't find a way to pass this configuration bit to the cloud service configuration."},{"Id":"10941736345","Type":"IssuesEvent","CreatedAt":"2019-11-25T15:05:18","Actor":"MadKoder","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7665","RelatedDescription":"Closed issue \"Nuget.Server replies 406 on push request if .nuspec contains <group targetFramework=\"...\">\" (#7665) at NuGet/NuGetGallery","RelatedBody":"When the server is running on a computer with different profiles in \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\", if the .nuspec has group dependencies with targetFrameworkl, the push fails.\r\n\r\nBuild and run a server with Nuget.Server v3.4.1 package, on a computed that contains different profiles in \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\".\r\nPush a package that contains for exemple \r\n\\<dependencies\\>\r\n      \\<group targetFramework=\"netstandard2.0\" /\\>\r\n\\</dependencies\\>\r\nThe server replies with 406 (Not acceptable)\r\n\r\nAfter a thorough inspection, I could find the source of the problem, in the deprecated package Nuget.Core:\r\nWhen the nuspec contains a group with a targetFramework attribute, the method NuGet.Server.Core.FrameworkNameExtensions.ToShortNameOrNull() is called. and after that, down the call stack, there is a \"new NetPortableProfile\" with parameter \"supportedFrameworks\" given an empty enumerable.\r\nThis triggers the throw of an ArgumentOutOfRangeException, and seems to be the cause of the 406 reply.\r\n\r\nWhy the IEnumerable supportedFrameworks is empty ? Because it is filled by a code that scans \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\". Going down the directories, this code reads xml files found in \"vXXX\\Profile\\ProfileYYY\\SupportedFrameworks\" subdirectories.\r\nFor each \"ProfileYYY\" directory, it construct a NetPortableProfile, and the supportedFrameworks is filled by these xml files.\r\nBUT, I don't know why, profiles that starts with \"Mono\" or \"Xamarin\" are considered optionals, and removed from the list. Problem is that, on my computer, there are only Xamarin and Mono profiles...\r\n\r\nTo find this, I had to use the project Core found in Nuget.Client sources, and replaced in Nuget.Server sources the dependency to the deprecated package by this project. After that, if I add a test to check if the IEnumerable is not empty before trying to construct a NetPortableProfile, everything seems to be working fine.\r\nOf course this is a terrible hack, but for me the fundamental problem is that Nuget.Server use a deprecated package with no official sources, so there was no other way for me to find a solution.\r\n\r\nSo, did anybody already encountered this problem ? Is Something wrong in my computer configuration (the supported frameworks) ?\r\n\r\nThanks for your support!"},{"Id":"10930064473","Type":"PullRequestEvent","CreatedAt":"2019-11-22T23:38:46","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7709","RelatedDescription":"Merged pull request \"Dropped the `DiagnosticMonitorTraceListener` usage.\" (#7709) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nRemoved some dead code. `DiagnosticMonitorTraceListener` needs to be configured, we don't have any configuration code in the project (or in web.config)."},{"Id":"10929792843","Type":"PullRequestEvent","CreatedAt":"2019-11-22T22:38:54","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7712","RelatedDescription":"Merged pull request \"Link to 'evaluate packages' documentation\" (#7712) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/737941/69391216-f55ec080-0c86-11ea-94d4-eeefcbe100a5.png)\r\n\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/2763"},{"Id":"10928200948","Type":"IssuesEvent","CreatedAt":"2019-11-22T18:28:55","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6094","RelatedDescription":"Closed issue \"NuGet.Server returns 406 instead of 409 on conflict\" (#6094) at NuGet/NuGetGallery","RelatedBody":"When using `nuget push` to publish a package with ID and version already existing on my feed, I receive a 406 (Not Acceptable) error instead of a 409 (Conflict). Because a 406 is also generated if you submit a non-nupkg file, this makes error handling difficult in my CI/CD process as I cannot be sure if I submitted a bad file or if the package already exists. I am not sure if this is an issue with the server or the client, hence posting here.\r\n\r\n```\r\nPS C:\\> nuget push C:\\pathto\\AwesomeLibrary.1.0.0.nupkg -verbosity detailed\r\nNuGet Version: 4.6.2.5055\r\nPushing AwesomeLibrary.1.0.0.nupkg to 'https://nuget.mydomain.com/nuget'...\r\n  PUT https://nuget.mydomain.com/nuget/\r\n  NotAcceptable https://nuget.mydomain.com/nuget/ 347ms\r\nnuget : Response status code does not indicate success: 406 (Not Acceptable).\r\nAt line:1 char:1\r\n+ nuget push C:\\pathto\\AwesomeLibrary.1.0.0.nupkg -verbosity detailed\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (Response status...ot Acceptable).:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n\r\nPS C:\\> nuget push C:\\pathto\\AwesomeLibrary.csproj -verbosity detailed\r\nNuGet Version: 4.6.2.5055\r\nPushing AwesomeLibrary.csproj to 'https://nuget.mydomain.com/nuget'...\r\n  PUT https://nuget.mydomain.com/nuget/\r\n  NotAcceptable https://nuget.mydomain.com/nuget/ 347ms\r\nnuget : Response status code does not indicate success: 406 (Not Acceptable).\r\nAt line:1 char:1\r\n+ nuget push C:\\pathto\\AwesomeLibrary.csproj -verbosity detailed\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (Response status...ot Acceptable).:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n```\r\n\r\nDoing some searching online, it looks like other people get 406 for conflicts, too, but [the API documentation](https://docs.microsoft.com/en-us/nuget/api/package-publish-resource#response) specifies a 409 for conflicts. I can live with the difficulty but would prefer the documented behavior.\r\n\r\n`nuget push` functions as expected if the package doesn't already exist.\r\n\r\n## Details about Problem\r\n\r\nUsing NuGet.exe version: 4.6.2.5055\r\nOS version: Win10 v1703 (15063.1112)\r\n\r\nUsing NuGet.Server version 3.1.2 running on Azure\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Stand up a NuGet.Server instance on Azure configured with an API key and to not allow package overrides.\r\n\r\n2. Publish a package to that server using `nuget push`\r\n\r\n3. Attempt to execute the same command again immediately.\r\n\r\n## web.config\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--\r\n  For more information on how to configure your ASP.NET application, please visit\r\n  https://go.microsoft.com/fwlink/?LinkId=169433\r\n  -->\r\n<configuration>\r\n  <!--\r\n    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.\r\n\r\n    The following attributes can be set on the <httpRuntime> tag.\r\n      <system.Web>\r\n        <httpRuntime targetFramework=\"4.6\" />\r\n      </system.Web>\r\n  --><system.web>    \r\n    <!-- maxRequestLength is specified in Kb --><httpRuntime targetFramework=\"4.6.1\" maxRequestLength=\"30720\" />\r\n  <compilation debug=\"true\" targetFramework=\"4.6\" /></system.web>\r\n  <system.codedom>\r\n    <compilers>\r\n      <compiler language=\"c#;cs;csharp\" extension=\".cs\" type=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" warningLevel=\"4\" compilerOptions=\"/langversion:default /nowarn:1659;1699;1701\" />\r\n      <compiler language=\"vb;vbs;visualbasic;vbscript\" extension=\".vb\" type=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" warningLevel=\"4\" compilerOptions=\"/langversion:default /nowarn:41008 /define:_MYTYPE=\\&quot;Web\\&quot; /optionInfer+\" />\r\n    </compilers>\r\n  </system.codedom>\r\n<system.webServer>\r\n    <handlers>\r\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\r\n      <remove name=\"OPTIONSVerbHandler\" />\r\n      <remove name=\"TRACEVerbHandler\" />\r\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\r\n    <remove name=\"WebDAV\" /><!-- Depending on IIS configuration, these may have to be added.\r\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\r\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"GET,HEAD,POST,PUT,DEBUG\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\r\n      <remove name=\"OPTIONSVerbHandler\" /><remove name=\"TRACEVerbHandler\" />\r\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\r\n      --></handlers>\r\n  <staticContent>\r\n      <mimeMap fileExtension=\".nupkg\" mimeType=\"application/zip\" />\r\n    </staticContent><modules runAllManagedModulesForAllRequests=\"true\">\r\n      <remove name=\"WebDAVModule\" />\r\n    </modules><security>\r\n      <requestFiltering>\r\n        <!-- maxAllowedContentLength is specified in Bytes -->\r\n        <requestLimits maxAllowedContentLength=\"31457280\" />\r\n      </requestFiltering>\r\n    </security></system.webServer><appSettings>\r\n    <!--\r\n    Determines if an Api Key is required to push\\delete packages from the server. \r\n    -->\r\n    <add key=\"requireApiKey\" value=\"true\" />\r\n\r\n    <!-- \r\n    Set the value here to allow people to push/delete packages from the server.\r\n    NOTE: This is a shared key (password) for all users.\r\n    -->\r\n    <add key=\"apiKey\" value=\"myapikeyvalue\" />\r\n\r\n    <!--\r\n    Change the path to the packages folder. Default is ~/Packages.\r\n    This can be a virtual or physical path.\r\n    -->\r\n    <add key=\"packagesPath\" value=\"\" />\r\n\r\n    <!--\r\n    Change the name of the internal cache file. Default is machine name (System.Environment.MachineName).\r\n    This is the name of the cache file in the packages folder. No paths allowed.\r\n    -->\r\n    <add key=\"cacheFileName\" value=\"\" />\r\n\r\n    <!--\r\n    Set allowOverrideExistingPackageOnPush to false to mimic NuGet.org's behaviour (do not allow overwriting packages with same id + version).\r\n    -->\r\n    <add key=\"allowOverrideExistingPackageOnPush\" value=\"false\" />\r\n\r\n    <!--\r\n    Set ignoreSymbolsPackages to true to filter out symbols packages. Since NuGet.Server does not come with a symbol server,\r\n    it makes sense to ignore this type of packages. When enabled, files named `.symbols.nupkg` or packages containing a `/src` folder will be ignored.\r\n    \r\n    If you only push .symbols.nupkg packages, set this to false so that packages can be uploaded.\r\n    -->\r\n    <add key=\"ignoreSymbolsPackages\" value=\"true\" />\r\n\r\n    <!--\r\n    Set enableDelisting to true to enable delist instead of delete as a result of a \"nuget delete\" command.\r\n    - delete: package is deleted from the repository's local filesystem.\r\n    - delist: \r\n      - \"nuget delete\": the \"hidden\" file attribute of the corresponding nupkg on the repository local filesystem is turned on instead of deleting the file.\r\n      - \"nuget list\" skips delisted packages, i.e. those that have the hidden attribute set on their nupkg.\r\n      - \"nuget install packageid -version version\" command will succeed for both listed and delisted packages.\r\n        e.g. delisted packages can still be downloaded by clients that explicitly specify their version.\r\n    -->\r\n    <add key=\"enableDelisting\" value=\"false\" />\r\n\r\n    <!--\r\n    Set enableFrameworkFiltering to true to enable filtering packages by their supported frameworks during search.\r\n    -->\r\n    <add key=\"enableFrameworkFiltering\" value=\"false\" />\r\n\r\n    <!--\r\n    When running NuGet.Server in a NAT network, ASP.NET may embed the server's internal IP address in the V2 feed.\r\n    Uncomment the following configuration entry to enable NAT support.\r\n    -->\r\n    <!-- <add key=\"aspnet:UseHostHeaderForRequestUrl\" value=\"true\" /> -->\r\n    <!--\r\n    Set enableFileSystemMonitoring to true (default) to enable file system monitoring (which will update the package cache appropriately on file system changes).\r\n    Set it to false to disable file system monitoring.\r\n    NOTE: Disabling file system monitoring may result in increased storage capacity requirements as package cache may only be purged by a background job running \r\n    on a fixed 1-hour interval.\r\n    -->\r\n    <add key=\"enableFileSystemMonitoring\" value=\"true\" />\r\n  </appSettings><system.serviceModel>\r\n    <serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\" />\r\n  </system.serviceModel><runtime>\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-9.0.0.0\" newVersion=\"9.0.0.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Web.Http\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.2.3.0\" newVersion=\"5.2.3.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Net.Http.Formatting\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.2.3.0\" newVersion=\"5.2.3.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Data.Edm\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.7.0.0\" newVersion=\"5.7.0.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Data.OData\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.7.0.0\" newVersion=\"5.7.0.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Spatial\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.7.0.0\" newVersion=\"5.7.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n  </runtime></configuration>\r\n```"},{"Id":"10921884565","Type":"PullRequestEvent","CreatedAt":"2019-11-22T01:42:20","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7712","RelatedDescription":"Opened pull request \"Link to 'evaluate packages' documentation\" (#7712) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/NuGet/Engineering/issues/2763"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10945493457","Type":"IssuesEvent","CreatedAt":"2019-11-25T23:03:19","Actor":"buddhashrestha","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8856","RelatedDescription":"Opened issue \"Manage Package for Solutions shows error while browsing packages from an internal JFrog NuGet artifactory\" (#8856) at NuGet/Home","RelatedBody":"NuGet product used (NuGet.exe | VS UI | Package Manager Console):\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1.6268\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\nPrerequisite: Downloaded latest nuget.exe \r\n\r\n1. Created and pushed a NuGet package to an internal JFrog artifactory. Everything works fine and I can view my package at the artifactory. i.e. nuget push <packageName> is successful.\r\n\r\n2. When I try to connect the artifactory from Visual studio ( Tools > NuGet Package Manager > Manage Packages for Solution), It just shows me an error message \r\n![image](https://user-images.githubusercontent.com/10449218/69584225-88527000-0f91-11ea-9024-27d6420f735b.png)\r\nI believe, if it doesnot find any apikey, then it should allow me to enter the apikey. But it does nothing.\r\n\r\n3. I set up my api key from package manager console from the Visual Studio 17, with the following command: \r\nnuget setapikey <USERNAME>:<PASSWORD> -Source Artifactory\r\n\r\n4. I try to list all the packages in my artifactory using command : nuget list \r\nBut it hangs for a while and gives me following error\r\n![image](https://user-images.githubusercontent.com/10449218/69584535-3e1dbe80-0f92-11ea-9601-4cdae1716d64.png)\r\nHere, it first says Please provide credentials for ... for there is no space to enter the username and password. It does nothing and it waits for the timeout.\r\n\r\n5. As an alternative, I perform steps 3 and 4 from cmd, it works and shows me all the packages. So, I'm assuming something is wrong while using it with Visual Studio 17. \r\n...\r\n\r\n"},{"Id":"10944506497","Type":"IssuesEvent","CreatedAt":"2019-11-25T20:41:24","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8850","RelatedDescription":"Closed issue \"NuGet PM UI for Solution erroneously states \"Blocked by packages.config\" for a solution that contains a C++ project\" (#8850) at NuGet/Home","RelatedBody":"1. create a new c++ project\r\n2. open PM UI for solution\r\n3. search for \"curl\"\r\n4. Observer the \"version\" combobox\r\n\r\n![image](https://user-images.githubusercontent.com/16904420/69284766-3d58e700-0ba4-11ea-9e99-60701510844b.png)\r\n\r\n\r\n"},{"Id":"10944135100","Type":"IssuesEvent","CreatedAt":"2019-11-25T19:50:23","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8855","RelatedDescription":"Opened issue \"RestoreSettingsUtils needs overload to use new SettingsLoadingContext\" (#8855) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThe new `SettingsLoadingContext` needs to be added as an overload to `RestoreSettingsUtils` so that it can be used when reading the settings initially.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10943711657","Type":"IssuesEvent","CreatedAt":"2019-11-25T18:54:16","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8854","RelatedDescription":"Closed issue \"[Test Failure] The .csproj file of .net core project canâ€™t be edited at the second time after installing a package  \" (#8854) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet Version: Implicit NuGet Client Dev\\5.5.0.6319\r\nVS Version: VS Master\\29522.92\r\nOS Version: Windows-10-Enterprise-19H2\r\n\r\n## Installation step:  \r\n[https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3268236&view=results](url)\r\n\r\n## Repro steps: \r\n1. Create a C# Console App (.Net Core) project.\r\n2. Unload the project.\r\n3. Reload the project.\r\n4. Install a 'PackageReference' package into the project.\r\n5. Unload the project again.\r\n6. Edit the .csproj file or reload project.\r\n\r\n## Expected:\r\nThe .csproj file can be edited and the project can be reloaded successfully.\r\n\r\n## Actual:\r\nThe .csproj file canâ€™t be edited and the project canâ€™t be reloaded whether you select yes or no with below pop up dialog. \r\n![1125](https://user-images.githubusercontent.com/20632775/69526200-a1185100-0fa4-11ea-9d76-22a10e5af0f8.png)\r\n\r\n## Here is the record video for the repro steps:\r\n![reload](https://user-images.githubusercontent.com/20632775/69526250-bee5b600-0fa4-11ea-8779-1322a12db75a.gif)\r\n\r\n## Notes: \r\n1. The issue not repro on .Net Framework project.\r\n2. The issue repro on VS Master\\29522.92 + NuGet Client Dev\\5.5.0.6325.\r\n\r\n\r\n\r\n\r\n"},{"Id":"10943157923","Type":"IssuesEvent","CreatedAt":"2019-11-25T17:39:57","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8845","RelatedDescription":"Closed issue \"Unable to download any Nuget package\" (#8845) at NuGet/Home","RelatedBody":"I am unable to download any Nuget package. I am getting the following error.\r\n[nuget.org] Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n\r\nI am using Visual Studio 2019 V16.3.9 Community edition on ]Windows 10 Profession\r\n\r\nThanks"},{"Id":"10942359955","Type":"IssuesEvent","CreatedAt":"2019-11-25T16:09:12","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8848","RelatedDescription":"Closed issue \"Custom nuget.exe on newer mono might break due to the MSBuild SDK Resolver\" (#8848) at NuGet/Home","RelatedBody":"Specifically errors like this can be hit; \r\n\r\n```\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: The \\\"GetRestoreProjectStyleTask\\\" task failed unexpectedly. [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/a/a.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: System.MissingMethodException: Method not found: System.Nullable`1<System.ValueTuple`2<NuGet.ProjectModel.ProjectStyle, bool>> NuGet.Commands.MSBuildRestoreUtility.GetProjectRestoreStyle(string,bool,string,string,string,NuGet.Common.ILogger) [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/a/a.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00029] in <10b73e4bf233421cae439ef765e97ef0>:0 [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/a/a.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask (Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) [0x002a9] in <10b73e4bf233421cae439ef765e97ef0>:0 [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/a/a.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: The \\\"GetRestoreProjectStyleTask\\\" task failed unexpectedly. [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/d/d.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: System.MissingMethodException: Method not found: System.Nullable`1<System.ValueTuple`2<NuGet.ProjectModel.ProjectStyle, bool>> NuGet.Commands.MSBuildRestoreUtility.GetProjectRestoreStyle(string,bool,string,string,string,NuGet.Common.ILogger) [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/d/d.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00029] in <10b73e4bf233421cae439ef765e97ef0>:0 [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/d/d.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask (Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) [0x002a9] in <10b73e4bf233421cae439ef765e97ef0>:0 [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/d/d.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: The \\\"GetRestoreProjectStyleTask\\\" task failed unexpectedly. [/Users/buildagent/agent/_work/1/s/.test/work/7536c2b5/16d30884/solution/g/g.csproj]\r\n/var/folders/c2/10wzh_315rs5wmnc9m3gsxlw0000gq/T/NuGetScratch/6730wwn7.z40.nugetrestore.targets(437,5): error MSB4018: System.MissingMethodException: Method not found: System.Nullable`1<System.ValueTuple`2<NuGet.ProjectModel.ProjectStyle, bool>> NuGet.Commands.MSBuildRestoreUtility.GetProjectRestoreStyle(string,bool,string,string,string,NuGet.Common.ILogger) [/Users/buildagent/agent/_work/\r\n```"},{"Id":"10938701531","Type":"IssuesEvent","CreatedAt":"2019-11-25T09:04:43","Actor":"v-nancyj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8854","RelatedDescription":"Opened issue \"[Test Failure] The .csproj file of .net core project canâ€™t be edited at the second time after installing a package  \" (#8854) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet Version: Implicit NuGet Client Dev\\5.5.0.6319\r\nVS Version: VS Master\\29522.92\r\nOS Version: Windows-10-Enterprise-19H2\r\n\r\n## Installation step:  \r\n[https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3268236&view=results](url)\r\n\r\n## Repro steps: \r\n1. Create a C# Console App (.Net Core) project.\r\n2. Unload the project.\r\n3. Reload the project.\r\n4. Install a 'PackageReference' package into the project.\r\n5. Unload the project again.\r\n6. Edit the .csproj file or reload project.\r\n\r\n## Expected:\r\nThe .csproj file can be edited and the project can be reloaded successfully.\r\n\r\n## Actual:\r\nThe .csproj file canâ€™t be edited and the project canâ€™t be reloaded whether you select yes or no with below pop up dialog. \r\n![1125](https://user-images.githubusercontent.com/20632775/69526200-a1185100-0fa4-11ea-9d76-22a10e5af0f8.png)\r\n\r\n## Here is the record video for the repro steps:\r\n![reload](https://user-images.githubusercontent.com/20632775/69526250-bee5b600-0fa4-11ea-8779-1322a12db75a.gif)\r\n\r\n## Notes: \r\n1. The issue not repro on .Net Framework project.\r\n2. The issue repro on VS Master\\29522.92 + NuGet Client Dev\\5.5.0.6325.\r\n\r\n\r\n\r\n\r\n"},{"Id":"10937436585","Type":"IssuesEvent","CreatedAt":"2019-11-25T05:27:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8853","RelatedDescription":"Opened issue \"DownloadTimeoutStream should not block by u\" (#8853) at NuGet/Home","RelatedBody":"Discovered while working on https://github.com/NuGet/Home/issues/8528. \r\n```\r\nName\r\nEvent Microsoft-DotNETCore-SampleProfiler/Thread/Sample\r\n+ Type: External\r\n|+ System.Private.CoreLib!ManualResetEventSlim.Wait\r\n||+ System.Private.CoreLib!Task.SpinThenBlockingWait\r\n|| + System.Private.CoreLib!Task.InternalWaitCore\r\n||  + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].GetResultCore(bool)\r\n||   + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].get_Result()\r\n||    + nuget.protocol!DownloadTimeoutStream.Read\r\n||     + nuget.protocol!ProtocolDiagnosticsStream.Read\r\n||      + System.Private.CoreLib!System.IO.Stream+<>c.<BeginReadInternal>b__43_0(class System.Object)\r\n||       + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].InnerInvoke()\r\n||        + System.Private.CoreLib!System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(class System.Object)\r\n||         + System.Private.CoreLib!ExecutionContext.RunFromThreadPoolDispatchLoop\r\n||          + System.Private.CoreLib!Task.ExecuteWithThreadLocal\r\n||           + System.Private.CoreLib!Task.ExecuteEntryUnsafe\r\n||            + System.Private.CoreLib!Task.ExecuteFromThreadPool\r\n||             + System.Private.CoreLib!ThreadPoolWorkQueue.Dispatch\r\n||              + System.Private.CoreLib!_ThreadPoolWaitCallback.PerformWaitCallback\r\n||               + Thread (592) (.NET ThreadPool)\r\n```\r\n\r\n```\r\nName\r\nEvent Microsoft-DotNETCore-SampleProfiler/Thread/Sample\r\n+ Type: External\r\n|+ ?!0x7f4fe536bbfa\r\n||+ System.Private.CoreLib!FileStream.ReadNative\r\n|| + System.Private.CoreLib!FileStream.ReadSpan\r\n||  + System.Private.CoreLib!FileStream.Read\r\n||   + System.Private.CoreLib!System.IO.Stream+<>c.<BeginReadInternal>b__43_0(class System.Object)\r\n||    + System.Private.CoreLib!System.Threading.Tasks.Task`1[System.Int32].InnerInvoke()\r\n||     + System.Private.CoreLib!System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(class System.Object)\r\n||      + System.Private.CoreLib!ExecutionContext.RunFromThreadPoolDispatchLoop\r\n||       + System.Private.CoreLib!Task.ExecuteWithThreadLocal\r\n||        + System.Private.CoreLib!Task.ExecuteEntryUnsafe\r\n||         + System.Private.CoreLib!Task.ExecuteFromThreadPool\r\n||          + System.Private.CoreLib!ThreadPoolWorkQueue.Dispatch\r\n||           + System.Private.CoreLib!_ThreadPoolWaitCallback.PerformWaitCallback\r\n||            + Thread (603) (.NET IO ThreadPool Worker)\r\n```\r\n\r\nDownloadTimeoutStream is a custom implementation for a stream timeout. The reasoning behind that is that the timeout property is not observed for asynchronous operations. \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.networkstream.readtimeout?view=netframework-4.8#remarks\r\n\r\nThis class is only used in one place in the HttpRetry handler. \r\nhttps://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpRetryHandler.cs#L141\r\n\r\nWe only really call the async APIs. \r\n\r\nThe sync api is implemented by calling .Result on the async call. This blocks the current thread. \r\nhttps://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/Utility/DownloadTimeoutStream.cs#L43\r\nOriginally the intention was that this would never be called.\r\nAnd it's not, not explicitly in the NuGet code at least. \r\n\r\nIt is however called indirectly by the framework implementation. \r\n\r\n.NET Core: \r\nSpecifically: https://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpCacheUtility.cs#L78\r\n\r\nCopyToAsync  [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L112) CopyToAsyncInternal [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L122)\r\nReadAsync [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L356-L358)\r\nBeginEndReadAsync => https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L390\r\nStream.BeginReadInternal [=>](https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/Common/src/CoreLib/System/IO/Stream.cs#L291) synchronous read https://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/Utility/DownloadTimeoutStream.cs#L43\r\n\r\nNote that this codepath is only taken because we do not override [BeginRead](https://github.com/NuGet/NuGet.Client/blob/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584/src/NuGet.Core/NuGet.Protocol/Utility/DownloadTimeoutStream.cs#L52) on .NET Core. \r\n\r\nIn .NET Framework\r\n\r\nCopyToAsync => CopyToAsyncInternal => ReadAsync => BeginEndReadAsync => BeginRead => BeginReadInternal => Stream.Read. \r\n\r\n//cc @joelverhagen "},{"Id":"10928988907","Type":"IssuesEvent","CreatedAt":"2019-11-22T20:23:27","Actor":"shaipetel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8852","RelatedDescription":"Opened issue \"Nuget package restore not working vs2019\" (#8852) at NuGet/Home","RelatedBody":"Building a project throws this error:\r\n\r\nThis project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is C:\\Repos\\***\\***\\\\.nuget\\NuGet.targets.\r\n\r\nI checked and nuget package restore is enabled.\r\n\r\nI closed and reopened visual studio, tried to build, opened nuget manager but it is not building and not restoring missing packages.\r\n\r\nI followed this article:\r\nhttps://docs.microsoft.com/en-us/nuget/consume-packages/package-restore-troubleshooting\r\nWhich suggests if the packages are not restored automatically to file an issue here.\r\n\r\nPlease advise.\r\n\r\nusing visual studio enterprise 2019 version 16.3.9\r\nthe project opens and works fine on a different computer with vs2017"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-26T05:30:44.8530998Z","RunDurationInMilliseconds":2222}