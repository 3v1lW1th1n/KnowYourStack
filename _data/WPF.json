{"Data":{"GitHub":{"Issues":[{"Id":"389500205","IsPullRequest":false,"CreatedAt":"2018-12-10T21:46:04","Actor":"bitbonk","Number":"148","RawContent":null,"Title":"make behaviors usable in styles","State":"open","Body":"In the past there has been a lot of confusion and frustration about the fact that behaviors cannot be used in styles. \n\nNow that WPF is open source, Iâ€˜d like to suggest that we get rid of this odd limitation.\n\nBeing able to use behaviors in styles would be very helpful.","Url":"https://github.com/dotnet/wpf/issues/148","RelatedDescription":"Open issue \"make behaviors usable in styles\" (#148)"},{"Id":"389465276","IsPullRequest":true,"CreatedAt":"2018-12-10T20:36:33","Actor":"rladuca","Number":"147","RawContent":null,"Title":"Updating roadmap","State":"closed","Body":"Adding components that have not yet been published in their priority order.","Url":"https://github.com/dotnet/wpf/pull/147","RelatedDescription":"Closed or merged PR \"Updating roadmap\" (#147)"},{"Id":"389407384","IsPullRequest":false,"CreatedAt":"2018-12-10T17:28:26","Actor":"livarcocc","Number":"145","RawContent":null,"Title":"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1","State":"open","Body":"@taori commented on [Sun Dec 09 2018](https://github.com/dotnet/cli/issues/10457)\n\nI was able to create a control lib using dotnet new classlib, however this project lacks some attributes for wpf to bind to it properly. + at this stage it seems the targetframework has to be locked to .net461+ in order to reference PresentationCore and other relevant assemblies.\r\n\r\nIdeally that option should exist before netcore 3 is RTM\n\n","Url":"https://github.com/dotnet/wpf/issues/145","RelatedDescription":"Open issue \"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1\" (#145)"},{"Id":"389401748","IsPullRequest":false,"CreatedAt":"2018-12-10T17:14:57","Actor":"elad8a","Number":"144","RawContent":null,"Title":"Add the ability to render a XAML tree to a direct3d texture (offscreen rendering)","State":"open","Body":"Currently WPF offers the ability to render a xaml tree to a bitmap via RenderTargetBitmap.\r\nYet this API forces the client to do a copy of the render target to system memory (and back). \r\nIt would be much better if it would be possible to gain access the Direct3D9 render target.\r\n\r\nThere could be various applications to this feature. 3D game overlays, Heads up displays etc.\r\n\r\nHere are several discussions on this issue:\r\nhttps://stackoverflow.com/questions/10376016/rendering-from-wpfs-internals-to-a-directx-application\r\n[https://stackoverflow.com/questions/18881683/how-to-display-wpf-overlay-on-top-of-directx?noredirect=1&lq=1](url)\r\n[https://stackoverflow.com/questions/52918039/is-it-technically-possible-to-render-a-wpf-xaml-element-to-a-direct3d-texture](url)\r\n\r\n  ","Url":"https://github.com/dotnet/wpf/issues/144","RelatedDescription":"Open issue \"Add the ability to render a XAML tree to a direct3d texture (offscreen rendering)\" (#144)"},{"Id":"389432193","IsPullRequest":false,"CreatedAt":"2018-12-10T15:58:23","Actor":"ccifra","Number":"146","RawContent":null,"Title":"FileFormatException is in WindowsBase and System.IO.Packaging","State":"open","Body":"# FileFormatException is in WindowsBase and System.IO.Packaging\r\n\r\nI am working on porting a WPF application to .NET Core.  The projects reference the Microsoft.Windows.Compatibility nuget to bring in types that I need.  I am running into issues with FileFormatException.  When I use it I get a build error that FileFormatException is defined in WindowsBase and System.IO.Packaging.\r\n\r\n# General\r\n\r\nI am seeing this issue with .NET Core 3 preview 1 and Microsoft.Windows.Compatibility nuget version 2.1.0-preview.18571.3.  I could probably solve this with an Alias but that seems ugly and I don't even know how to alias an assembly that comes from a nuget.\r\n\r\nYou can see here where it is defined in more than 1 assembly:\r\nhttps://apisof.net/catalog/System.IO.FileFormatException\r\n\r\nYou can also reproduce the issue by creating a default WPF .NET Core app, reference Microsoft.Windows.Compatibility and try to use a FileFormatException.\r\n","Url":"https://github.com/dotnet/wpf/issues/146","RelatedDescription":"Open issue \"FileFormatException is in WindowsBase and System.IO.Packaging\" (#146)"},{"Id":"389222651","IsPullRequest":false,"CreatedAt":"2018-12-10T15:11:23","Actor":"FSharpCSharp","Number":"142","RawContent":null,"Title":"Library \"PresentationFramework\" and its dependencies","State":"closed","Body":"So first of all great praise to the whole team of Microsoft that now WPF is developed further under Open Source. This is a big milestone in the history of the .NET framework. \r\n\r\nI have already read all blogs and ReadMes, but unfortunately my question was not answered.\r\n\r\nIs Microsoft also planning to publish all controls and their dependencies under Open Source, or does WPF only refer to the actual technology? WinForms also provided all the controls, so far there is only System.Xaml, the origin of WPF.\r\n\r\nI know it's a very stupid question, but I'd be happy to get back to you if and when that will happen.\r\n\r\nThanks a lot!","Url":"https://github.com/dotnet/wpf/issues/142","RelatedDescription":"Closed issue \"Library \"PresentationFramework\" and its dependencies\" (#142)"},{"Id":"389227823","IsPullRequest":false,"CreatedAt":"2018-12-10T10:11:44","Actor":"shadowaltar","Number":"143","RawContent":null,"Title":"Source of Ribbon API?","State":"open","Body":"Current Ribbon API's SplitMenuItem is buggy (https://social.msdn.microsoft.com/Forums/vstudio/en-US/da13b5f5-5252-4332-9ec3-0b78c6395693/ribbonapplicationsplitmenuitem-triggers-command-twice?forum=wpf)\r\nWill this API be open-sourced too so that the community could fix it instead of downloading the source file and manually override the generic xaml file?\r\nThanks.","Url":"https://github.com/dotnet/wpf/issues/143","RelatedDescription":"Open issue \"Source of Ribbon API?\" (#143)"},{"Id":"389216940","IsPullRequest":true,"CreatedAt":"2018-12-10T09:45:03","Actor":"hughbe","Number":"141","RawContent":null,"Title":"Remove dead checks from TypeConverterHelper","State":"open","Body":"- `GetCoreConverterFromCoreType` is only called from `GetTypeConverter` which is only called from `ValueSerializer.GetSerializerFor`:\r\n\r\n```cs\r\npublic static ValueSerializer GetSerializerFor(Type type)\r\n{\r\n    if (type == null)\r\n        throw new ArgumentNullException(\"type\");\r\n    object value = _valueSerializers[type];\r\n    if (value != null)\r\n        // This uses _valueSerializersLock's instance as a sentinal for null  (as opposed to not attempted yet).\r\n        return value == _valueSerializersLock ? null : value as ValueSerializer;\r\n\r\n    AttributeCollection attributes = TypeDescriptor.GetAttributes(type);\r\n    ValueSerializerAttribute attribute = attributes[typeof(ValueSerializerAttribute)] as ValueSerializerAttribute;\r\n    ValueSerializer result = null;\r\n\r\n    if (attribute != null)\r\n        result = (ValueSerializer)Activator.CreateInstance(attribute.ValueSerializerType);\r\n\r\n    if (result == null)\r\n    {\r\n        if (type == typeof(string))\r\n        {\r\n            result = new StringValueSerializer();\r\n        }\r\n        else\r\n        {\r\n            // Try to use the type converter\r\n            TypeConverter converter = TypeConverterHelper.GetTypeConverter(type);\r\n\r\n            // DateTime is a special-case.  We can't use the DateTimeConverter, because it doesn't\r\n            // support anything other than user culture and invariant culture, and we need to specify\r\n            // en-us culture.\r\n            if (converter.GetType() == typeof(DateTimeConverter2))\r\n            {\r\n                result = new DateTimeValueSerializer();\r\n            }\r\n            else if (converter.CanConvertTo(typeof(string)) && converter.CanConvertFrom(typeof(string)) &&\r\n                        !(converter is ReferenceConverter))\r\n            {\r\n                result = new TypeConverterValueSerializer(converter);\r\n            }\r\n        }\r\n    }\r\n    lock (_valueSerializersLock)\r\n    {\r\n        // This uses _valueSerializersLock's instance as a sentinal for null (as opposed to not attempted yet).\r\n        _valueSerializers[type] = result == null ? _valueSerializersLock : result;\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n\r\nThis means that the check for if `type` is null and if `type` is string is redundant as these cases are covered already.\r\n\r\n- Secondly, `GetCoreConverterFromCustomType` is called from `GetTypeConverter`:\r\n```cs\r\ninternal static TypeConverter GetTypeConverter(Type type)\r\n{\r\n    Debug.Assert(type != null, \"Null passed for type to GetTypeConverter\");\r\n\r\n    TypeConverter typeConverter = GetCoreConverterFromCoreType(type);\r\n\r\n    if (typeConverter == null)\r\n    {\r\n        Type converterType = GetConverterType(type);\r\n        if (converterType != null)\r\n        {\r\n            typeConverter = Activator.CreateInstance(converterType,\r\n                                                        BindingFlags.Instance | BindingFlags.CreateInstance | BindingFlags.Public,\r\n                                                        null,\r\n                                                        null,\r\n                                                        InvariantEnglishUS) as TypeConverter;\r\n        }\r\n        else\r\n        {\r\n            typeConverter = GetCoreConverterFromCustomType(type);\r\n        }\r\n\r\n        if (typeConverter == null)\r\n        {\r\n            typeConverter = new TypeConverter();\r\n        }\r\n    }\r\n\r\n    return typeConverter;\r\n}\r\n```\r\n\r\n`GetCoreConverterFromCustomType` is called after `GetCoreConverterFromCoreType`, so all these checks for if the type is assignable from a struct are dead (because firstly only the struct type itself is assignable from itself, and secondly because these cases are already covered in `GetCoreConverterFromCoreType` so we bail out early","Url":"https://github.com/dotnet/wpf/pull/141","RelatedDescription":"Open PR \"Remove dead checks from TypeConverterHelper\" (#141)"},{"Id":"389125068","IsPullRequest":false,"CreatedAt":"2018-12-10T03:48:58","Actor":"hughbe","Number":"140","RawContent":null,"Title":"What is PBTCOMPILER? Is it redundant?","State":"open","Body":"There are a lot of ifdefs for `PBTCOMPILER` in the codebase. Are these redundant? What does this check for?","Url":"https://github.com/dotnet/wpf/issues/140","RelatedDescription":"Open issue \"What is PBTCOMPILER? Is it redundant?\" (#140)"},{"Id":"389123944","IsPullRequest":true,"CreatedAt":"2018-12-10T03:43:38","Actor":"hughbe","Number":"139","RawContent":null,"Title":" Remove dead code from ReflectionHelper","State":"open","Body":"Above, we have the code\r\n```\r\nstring[] nameFrags = typeName.Split(new char[] { ',' }, 2);\r\n```\r\n\r\nThis guarantees that `nameFrags.Length` is maximum 2/\r\n\r\nWe know that the string can not be empty and check for length one before, so therefore this check if irrelevant\r\n\r\nAlso put some minor code cleanup in there","Url":"https://github.com/dotnet/wpf/pull/139","RelatedDescription":"Open PR \" Remove dead code from ReflectionHelper\" (#139)"},{"Id":"389123016","IsPullRequest":true,"CreatedAt":"2018-12-10T03:39:15","Actor":"hughbe","Number":"138","RawContent":null,"Title":"Add Windows.Markup tests","State":"open","Body":"Bunch of tests for attributes, ValueSerializer, event args, converters etc in the System.Windows.Markup namespace\r\n\r\nAssistance required: wrote these on my mac, they pass :) but not sure how to integrate into CI\r\n\r\nPlanning on writing more for the remaining stuff soon!\r\n\r\n/cc @karelz ","Url":"https://github.com/dotnet/wpf/pull/138","RelatedDescription":"Open PR \"Add Windows.Markup tests\" (#138)"},{"Id":"389085006","IsPullRequest":false,"CreatedAt":"2018-12-10T00:27:05","Actor":"walterlv","Number":"137","RawContent":null,"Title":"Win32Exception (0x80004005): Not enough quota is available to process this command.","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: Windows 10 / 7 SP1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n \r\nWe sometimes get an `Win32Exception (0x80004005)` report from end-user' device, but we can't determine what happed at that time.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nWe sometimes get a feedback from the end-user that the app freezes at that moment when the exception is thrown.\r\n\r\n```\r\nSystem.ComponentModel.Win32Exception (0x80004005): Not enough quota is available to process this command.\r\n   at MS.Win32.UnsafeNativeMethods.PostMessage(HandleRef hwnd, WindowMessage msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowSettings(Boolean enableRenderTarget, Nullable`1 channelSet)\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowPos(IntPtr lParam)\r\n   at System.Windows.Interop.HwndTarget.HandleMessage(WindowMessage msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at MS.Internal.Threading.ExceptionFilterHelper.TryCatchWhen(Object source, Delegate method, Object args, Int32 numArgs, Delegate catchHandler)\r\n``` \r\n\r\n **Expected behavior:**\r\n \r\nThere is no such an exception.\r\n\r\n **Minimal repro:**\r\n \r\nNote that we still can't figure out all the reproduction, but I find a simple procedure to reproduce it.\r\n\r\n1. Launch a malicious app sending message to the target WPF app continuously;\r\n1. The WPF app will get the Win32Exception (0x80004005).","Url":"https://github.com/dotnet/wpf/issues/137","RelatedDescription":"Open issue \"Win32Exception (0x80004005): Not enough quota is available to process this command.\" (#137)"},{"Id":"389020876","IsPullRequest":true,"CreatedAt":"2018-12-09T13:07:59","Actor":"dotnet-maestro[bot]","Number":"136","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/136","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#136)"},{"Id":"389014123","IsPullRequest":true,"CreatedAt":"2018-12-09T11:45:34","Actor":"hughbe","Number":"135","RawContent":null,"Title":"Add OSX gitignore","State":"open","Body":"A `DS_Store` file popped up when I cloned the repo so I'm adding this gitignore to prevent unwanted files sneaking their way in","Url":"https://github.com/dotnet/wpf/pull/135","RelatedDescription":"Open PR \"Add OSX gitignore\" (#135)"},{"Id":"388970430","IsPullRequest":false,"CreatedAt":"2018-12-08T23:44:00","Actor":"wjk","Number":"134","RawContent":null,"Title":"MarkupCompilePass1 temp project looping","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10 1908, build 17763.134\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n## Problem description\r\n\r\nUnder circumstances I'm not yet able to fully pin down (outside of my proprietary project, I cannot get this bug to reproduce), the `MarkupCompilePass1` temporary projects for some bizarre reason create and invoke themselves recursively until one of the projects' paths hits the 260-character mark and the build fails. This only happens with one project in my solution, does not occur with the other two projects in the solution, and does not occur when I copy the project out of the solution into its own folder.\r\n\r\n## Actual behavior\r\n\r\nThe `*_wpftmp.csproj` files create and invoke themselves recursively, until the path name gets too long (it gets longer each iteration) and an exception is thrown.\r\n\r\n## Expected behavior\r\n\r\nIt should build!\r\n\r\n## Minimal repro\r\n\r\nCan't isolate one yet, but an MSBuild binlog is attached (zipped to get GitHub to accept it).\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/wpf/files/2660130/msbuild.binlog.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/134","RelatedDescription":"Open issue \"MarkupCompilePass1 temp project looping\" (#134)"},{"Id":"388940864","IsPullRequest":false,"CreatedAt":"2018-12-08T17:19:28","Actor":"kevingosse","Number":"133","RawContent":null,"Title":"Add a compositor thread to WPF","State":"open","Body":"Today it's incredibly hard to make smooth animations in WPF. And kind of computation done on the UI thread will make the animation jerky.\r\n\r\nBoth Silverlight and UWP have a compositor thread: a thread dedicated to rendering operations that can work concurrently with the UI thread. It's capable only of simple animations (translation, rotation, transparency...) that do not affect the overall layout (and so do not require a recomputation of the logical tree). I believe this would be a great addition to WPF.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/133","RelatedDescription":"Open issue \"Add a compositor thread to WPF\" (#133)"},{"Id":"388875883","IsPullRequest":false,"CreatedAt":"2018-12-08T17:16:41","Actor":"onovotny","Number":"126","RawContent":null,"Title":"OOM: Pen Input","State":"closed","Body":"From telemetry, unhandled exception:\r\n\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Win32.Penimc.IPimcManager2.GetTablet(uint tablet, out IPimcTablet2 IPimcTablet)\r\n   at System.Windows.Input.PenThreadWorker+WorkerOperationGetTabletsInfo.OnDoWork()\r\n   at System.Windows.Input.PenThreadWorker+WorkerOperation.DoWork()\r\n   at System.Windows.Input.PenThreadWorker.ThreadProc()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/dotnet/wpf/issues/126","RelatedDescription":"Closed issue \"OOM: Pen Input\" (#126)"},{"Id":"388925270","IsPullRequest":true,"CreatedAt":"2018-12-08T14:07:21","Actor":"batzen","Number":"132","RawContent":null,"Title":"[WIP] Adding editorconfig from corefx","State":"open","Body":"This PR adds an nearly exact copy of .editorconfig taken from https://github.com/dotnet/corefx\r\n\r\nThe only things i changed are the usage of var and this.\r\nI made those changes because, after having a look at some code samples from this repo, i noticed that those seem to be the desired configs.\r\n\r\nFixes #115","Url":"https://github.com/dotnet/wpf/pull/132","RelatedDescription":"Open PR \"[WIP] Adding editorconfig from corefx\" (#132)"},{"Id":"388920384","IsPullRequest":true,"CreatedAt":"2018-12-08T13:07:59","Actor":"dotnet-maestro[bot]","Number":"131","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/131","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#131)"},{"Id":"388904743","IsPullRequest":false,"CreatedAt":"2018-12-08T09:29:13","Actor":"juepiezhongren","Number":"130","RawContent":null,"Title":"need xbind implemented for wpf","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/issues/130","RelatedDescription":"Open issue \"need xbind implemented for wpf\" (#130)"},{"Id":"388876230","IsPullRequest":false,"CreatedAt":"2018-12-08T02:36:03","Actor":"onovotny","Number":"129","RawContent":null,"Title":"OOM: TextBlock.GetLineProperties","State":"open","Body":"From telemetry\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Windows.Controls.TextBlock.GetLineProperties()\r\n   at MS.Internal.Text.Line.get_ShowEllipsis()\r\n   at MS.Internal.Text.Line.get_IsWidthAdjusted()\r\n   at MS.Internal.Text.Line.get_Width()\r\n   at System.Windows.Controls.TextBlock.OnRender(DrawingContext ctx)\r\n   at System.Windows.UIElement.Arrange(Rect finalRect)\r\n   at MS.Internal.Helper.ArrangeElementWithSingleChild(UIElement element, Size arrangeSize)\r\n   at System.Windows.Controls.ContentPresenter.ArrangeOverride(Size arrangeSize)\r\n   at System.Windows.FrameworkElement.ArrangeCore(Rect finalRect)\r\n   at System.Windows.UIElement.Arrange(Rect finalRect)\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.ContextLayoutManager.UpdateLayoutCallback(object arg)\r\n   at System.Windows.Media.MediaContext+InvokeOnRenderCallback.DoWork()\r\n   at System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\r\n   at System.Windows.Media.MediaContext.RenderMessageHandlerCore(object resizedCompositionTarget)\r\n   at System.Windows.Media.MediaContext.RenderMessageHandler(object resizedCompositionTarget)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/129","RelatedDescription":"Open issue \"OOM: TextBlock.GetLineProperties\" (#129)"},{"Id":"388876129","IsPullRequest":false,"CreatedAt":"2018-12-08T02:34:56","Actor":"onovotny","Number":"128","RawContent":null,"Title":"OOM: DUCE+Channel.SyncFlush()","State":"open","Body":"From telemetry, app crash:\r\n\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Internal.HRESULT.Check(int hr)\r\n   at System.Windows.Media.Composition.DUCE+Channel.SyncFlush()\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowSettings(bool enableRenderTarget, Nullable<T> channelSet)\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowSettings(bool enableRenderTarget)\r\n   at System.Windows.Interop.HwndTarget.OnShowWindow(bool enableRenderTarget)\r\n   at System.Windows.Interop.HwndTarget.HandleMessage(WindowMessage msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/128","RelatedDescription":"Open issue \"OOM: DUCE+Channel.SyncFlush()\" (#128)"},{"Id":"388876031","IsPullRequest":false,"CreatedAt":"2018-12-08T02:33:58","Actor":"onovotny","Number":"127","RawContent":null,"Title":"OOM: Get Default IMC","State":"open","Body":"From telemetry, crash:\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at MS.Win32.UnsafeNativeMethods.ImmGetDefaultIMEWnd(HandleRef hwnd)\r\n   at System.Windows.Input.InputMethod.get_DefaultImc()\r\n   at System.Windows.Input.InputMethod.EnableOrDisableInputMethod(bool bEnabled)\r\n   at System.Windows.Input.TextServicesManager.Focus(DependencyObject focus)\r\n   at System.Windows.Input.KeyboardDevice.ChangeFocus(DependencyObject focus, int timestamp)\r\n   at System.Windows.Input.KeyboardDevice.TryChangeFocus(DependencyObject newFocus, IKeyboardInputProvider keyboardInputProvider, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(DependencyObject focus, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(IInputElement element)\r\n   at System.Windows.Input.Keyboard.Focus(IInputElement element)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.OnSetFocus(IntPtr hwnd)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.FilterMessage(IntPtr hwnd, WindowMessage message, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/127","RelatedDescription":"Open issue \"OOM: Get Default IMC\" (#127)"},{"Id":"388833053","IsPullRequest":false,"CreatedAt":"2018-12-07T22:14:53","Actor":"onovotny","Number":"124","RawContent":null,"Title":"UIAutomation could not load dll","State":"open","Body":"Saw this twice in my telemetry\r\n\r\n```\r\nSystem.TypeInitializationException: The type initializer for 'System.Windows.Automation.Peers.AutomationPeer' threw an exception. ---> System.TypeInitializationException: The type initializer for 'System.Windows.Automation.TextPatternIdentifiers' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'UIAutomationCore.dll' or one of its dependencies: The paging file is too small for this operation to complete. (Exception from HRESULT: 0x800705AF)\r\n   at MS.Internal.Automation.UiaCoreTypesApi.RawUiaGetReservedMixedAttributeValue(out object mixedAttributeValue)\r\n   at MS.Internal.Automation.UiaCoreTypesApi.UiaGetReservedMixedAttributeValue()\r\n   at System.Windows.Automation.TextPatternIdentifiers..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.Automation.Peers.AutomationPeer.Initialize()\r\n   at System.Windows.Automation.Peers.AutomationPeer..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.Automation.Peers.AutomationPeer.RaiseFocusChangedEventHelper(IInputElement newFocus)\r\n   at System.Windows.Input.KeyboardDevice.ChangeFocus(DependencyObject focus, int timestamp)\r\n   at System.Windows.Input.KeyboardDevice.TryChangeFocus(DependencyObject newFocus, IKeyboardInputProvider keyboardInputProvider, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(DependencyObject focus, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(IInputElement element)\r\n   at System.Windows.Input.Keyboard.Focus(IInputElement element)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.OnSetFocus(IntPtr hwnd)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.FilterMessage(IntPtr hwnd, WindowMessage message, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/124","RelatedDescription":"Open issue \"UIAutomation could not load dll\" (#124)"},{"Id":"388816545","IsPullRequest":false,"CreatedAt":"2018-12-07T21:15:42","Actor":"onovotny","Number":"123","RawContent":null,"Title":"Crash if run from ZIP","State":"open","Body":"Take a zip file containing a self contained app. Open it in WinRAR, then try to run the exe. WinRAR extracts it to a temp directory, but there's a 8.3 mismatch:\r\n\r\n```\r\n1) Failed WPF DLL consistency checks. Expected location: C:\\Users\\Administrator\\AppData\\Local\\Temp\\Rar$EXa0.654.\r\nDLL Name: PresentationNative_cor3.dll DLL Location: C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\Rar$EXa0.654\r\n```\r\n\r\nThe consistency check should take the 8.3 name into account as a match.","Url":"https://github.com/dotnet/wpf/issues/123","RelatedDescription":"Open issue \"Crash if run from ZIP\" (#123)"},{"Id":"388805834","IsPullRequest":false,"CreatedAt":"2018-12-07T20:38:53","Actor":"onovotny","Number":"122","RawContent":null,"Title":"NRE in Automation Peers","State":"open","Body":".NET Core 3 preview 1\r\n\r\nThis is from my telemetry and resulted in an app crash.\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Windows.Automation.Peers.ItemAutomationPeer.GetNameCore()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.ContextLayoutManager.fireAutomationEvents()\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.ContextLayoutManager.UpdateLayoutCallback(object arg)\r\n   at System.Windows.Media.MediaContext+InvokeOnRenderCallback.DoWork()\r\n   at System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\r\n   at System.Windows.Media.MediaContext.RenderMessageHandlerCore(object resizedCompositionTarget)\r\n   at System.Windows.Media.MediaContext.AnimatedRenderMessageHandler(object resizedCompositionTarget)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/122","RelatedDescription":"Open issue \"NRE in Automation Peers\" (#122)"},{"Id":"388804787","IsPullRequest":false,"CreatedAt":"2018-12-07T20:35:10","Actor":"onovotny","Number":"121","RawContent":null,"Title":"OutOfMemoryException in reading bitmaps","State":"open","Body":"I'm seeing OOM's when parsing some small images that are used as NuGet icons. I don't yet have a specific offending image, but I've seen this hit semi-regularly in my telemetry.\r\n\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Internal.HRESULT.Check(int hr)\r\n   at System.Windows.Media.Imaging.TransformedBitmap.FinalizeCreation()\r\n   at System.Windows.Media.Imaging.TransformedBitmap.EndInit()\r\n   at System.Windows.Media.Imaging.BitmapImage.FinalizeCreation()\r\n   at System.Windows.Media.Imaging.BitmapImage.OnDownloadCompleted(object sender, EventArgs e)\r\n   at System.Windows.Media.UniqueEventHelper.InvokeEvents(object sender, EventArgs args)\r\n   at System.Windows.Media.Imaging.LateBoundBitmapDecoder.DownloadCallback(object arg)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Window.ShowHelper(object booleanBox)\r\n   at System.Windows.Window.Show()\r\n   at System.Windows.Window.ShowDialog()\r\n   at PackageExplorer.PackageChooserDialog.ShowDialog(string searchTerm) in PackageExplorer\\PackageChooser\\PackageChooserDialog.xaml.cs:line 169\r\n   at PackageExplorer.PackageChooserService.SelectPackage(string searchTerm) in PackageExplorer\\MefServices\\PackageChooserService.cs:line 54\r\n   at PackageExplorer.MainWindow+<OpenPackageFromRepository>d__48.MoveNext() in PackageExplorer\\MainWindow.xaml.cs:line 342\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at PackageExplorer.MainWindow+<OpenFeedItem_Click>d__46.MoveNext() in PackageExplorer\\MainWindow.xaml.cs:line 310\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__7_0(object state)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/121","RelatedDescription":"Open issue \"OutOfMemoryException in reading bitmaps\" (#121)"},{"Id":"388849782","IsPullRequest":false,"CreatedAt":"2018-12-07T20:27:09","Actor":"onovotny","Number":"125","RawContent":null,"Title":".NET Core 3 / WPF: SEHException's","State":"open","Body":"I'm seeing SEHException's from .NET Core 3 preview 1:\r\n\r\nThey all have the following stack trace. Windows 10 17134, 17763\r\n\r\nNot sure what repo this belongs with as it starts with `Microsoft.Win32.CommonDialog.ShowDialog()`\r\n\r\n```\r\nSystem.Runtime.InteropServices.SEHException: External component has thrown an exception.\r\n   at MS.Internal.AppModel.IFileDialog.Show(IntPtr parent)\r\n   at Microsoft.Win32.FileDialog.RunVistaDialog(IntPtr hwndOwner)\r\n   at Microsoft.Win32.FileDialog.RunDialog(IntPtr hwndOwner)\r\n   at Microsoft.Win32.CommonDialog.ShowDialog()\r\n   at PackageExplorer.UIServices.OpenSaveFileDialog(string title, string defaultFileName, string initialDirectory, string filter, bool overwritePrompt, out string selectedFilePath, out int selectedFilterIndex) in PackageExplorer\\MefServices\\UIServices.cs:line 36\r\n   at PackageExplorerViewModel.SavePackageCommand.SaveAs() in PackageViewModel\\Commands\\SavePackageCommand.cs:line 151\r\n   at PackageExplorerViewModel.SavePackageCommand.Execute(object parameter) in PackageViewModel\\Commands\\SavePackageCommand.cs:line 96\r\n   at MS.Internal.Commands.CommandHelpers.CriticalExecuteCommandSource(ICommandSource commandSource, bool userInitiated)\r\n   at System.Windows.Controls.MenuItem.InvokeClickAfterRender(object arg)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/125","RelatedDescription":"Open issue \".NET Core 3 / WPF: SEHException's\" (#125)"},{"Id":"388750791","IsPullRequest":true,"CreatedAt":"2018-12-07T18:58:32","Actor":"SparroHawc","Number":"120","RawContent":null,"Title":"Readme WPF name consistency fix","State":"closed","Body":"This is the only location that the full name of WPF is written out in the codebase as it currently stands.  The correct name, as it happens, is Windows Presentation Foundation.","Url":"https://github.com/dotnet/wpf/pull/120","RelatedDescription":"Closed or merged PR \"Readme WPF name consistency fix\" (#120)"},{"Id":"388725564","IsPullRequest":false,"CreatedAt":"2018-12-07T16:31:18","Actor":"rladuca","Number":"119","RawContent":null,"Title":"XMLNS sweep to ensure parity with desktop framework","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) All\r\n* Windows version: (`winver`) All\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nWPF is missing various xmlns attributes in its reference assemblies.  We need to sweep all of them to ensure we pick everything up.\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n N/A\r\n **Expected behavior:**\r\n N/A\r\n **Minimal repro:**\r\n See the various related issues.\r\n","Url":"https://github.com/dotnet/wpf/issues/119","RelatedDescription":"Open issue \"XMLNS sweep to ensure parity with desktop framework\" (#119)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-11T05:31:07.7179089Z","RunDurationInMilliseconds":1000}