{"Data":{"Blog":{"FeedItems":[{"Title":"Azure Storage for Serverless .NET Apps in Minutes","PublishedOn":"2018-01-25T19:38:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Azure Storage is a quick and effortless way to store data for applications that has high availability, is secure, scales and is redundant. This blog post walks through a simple application that...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/01/25/azure-storage-for-serverless-net-apps-in-minutes/","RawContent":null},{"Title":"64 bit ASP.NET Core on Azure App Service","PublishedOn":"2018-01-10T00:15:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When creating an Azure App Service .NET Core is already pre-installed. However, only the 32 bit .NET runtime is installed. In this post we will look at a  few ways that you can get a 64 bit runtime on...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/01/09/64-bit-asp-net-core-on-azure-app-service/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4","PublishedOn":"2018-01-05T20:30:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are releasing Preview 1 of ASP.NET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4 on NuGet. This release contains some minor bug fixes and a couple of new features specifically targeted at...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/01/05/announcing-preview-1-of-asp-net-mvc-5-2-4-web-api-5-2-4-and-web-pages-3-2-4/","RawContent":null},{"Title":"Take a Break with Azure Functions","PublishedOn":"2017-12-22T05:41:48+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"So, it&#8217;s the Holidays. The office is empty, the boss is away, and you&#8217;ve got a bit of free time on your hands. How about learning a new skill and having some fun? Azure Functions are a...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/21/take-a-break-with-azure-functions/","RawContent":null},{"Title":"Testing ASP.NET Core MVC web apps in-memory","PublishedOn":"2017-12-07T17:00:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written and submitted by Javier Calvarro Nelson, a developer on the ASP.NET Core MVC team Testing is an important part of the development process of any app. In this blog post...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/07/testing-asp-net-core-mvc-web-apps-in-memory/","RawContent":null},{"Title":"Configuring HTTPS in ASP.NET Core across different platforms","PublishedOn":"2017-11-29T17:00:12+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As the web moves to be more secure by default, it&#8217;s more important than ever to make sure your websites have HTTPS enabled. And if you&#8217;re going to use HTTPS in production its a good idea...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/29/configuring-https-in-asp-net-core-across-different-platforms/","RawContent":null},{"Title":"Improve website performance by optimizing images","PublishedOn":"2017-11-28T18:02:29+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We all want our web applications to load as fast as possible to give the best possible experience to the users. One of the steps to achieve that is to make sure the images we use are as optimized as...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/28/improve-website-performance-by-optimizing-images/","RawContent":null},{"Title":"Orchard Core Beta 1 released","PublishedOn":"2017-11-21T19:32:10+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This is a guest post by Sebastien Ros on behalf of the Orchard community Two years ago, the Orchard community started developing Orchard on .NET Core. After 1,500 commits, 297,000 lines of code, 127...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/21/orchard-core-beta-annoucement/","RawContent":null},{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7160494170","Type":"IssuesEvent","CreatedAt":"2018-01-28T01:19:02","Actor":"livarcocc","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2831","RelatedDescription":"Opened issue \"asp.net mvc template app crashes with exceptions on raspian ARM\" (#2831) at aspnet/Home","RelatedBody":"_From @Buzze11 on January 27, 2018 11:32_\n\n## Steps to reproduce\r\n\r\n    1. create example mvc app with \"dotnet new mvc -n test\"\r\n    2. Disable HttpsRedirect comment out (//app.UseHttpsRedirection();)\r\n    3. Disable Cookie Policies comment out (//app.UseCookiePolicy();)\r\n    4. publish with \"dotnet publish -r linux-arm\" and deploy it to the raspberry pi\r\n    5. run app on raspberry device with ./test\r\n    6. place a webrequest from any browser to the server\r\n\r\n\r\n## Expected  behavior\r\nMVC Example App shows up in browser window\r\n\r\n## Actual behavior\r\n- Exceptions get thrown.\r\n\r\n- Even without modifying the example app (not deactivating https) the app is throwing exceptions on requests.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nProduct Information:\r\nVersion: 2.2.0-preview1-007947\r\nCommit SHA-1 hash: e8f7ddd01b\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.10586\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.2.0-previe\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\nVersion : 2.1.0-preview1-26116-04\r\nBuild : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n\r\n\r\n\r\n[Exception.log](https://github.com/dotnet/cli/files/1670022/Exception.log)\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#8490_"},{"Id":"7160135440","Type":"IssuesEvent","CreatedAt":"2018-01-27T21:01:52","Actor":"dazinator","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2830","RelatedDescription":"Closed issue \"Consider making Router independent of aspnet.\" (#2830) at aspnet/Home","RelatedBody":"# TLDR\r\n\r\nWould you consider opening up `Routing` to be used generically (i.e also in Non web apps), by removing the dependency on `Microsoft.AspNetCore.*` and promoting the actual Routing (i.e the bit that evaluates routes to find a matching handler) into an \"Microsoft.Extensions.Routing\" ?\r\n\r\n### More details behind motivation..\r\nThe reason I ask is just that a generic `Router` implementation could be a useful standardised component, with uses outside of just asp.net core website - for example, in an `Xamarin.Forms` app it could be used to implement a navigation service that can route to an appropriate handler which could be provided by a miriad of MVVM frameworks out there.\r\n\r\n```\r\nvar fooArg = new Foo();\r\n\r\n// uses Routing behind the scenes to route to a handler for this route. \r\nawait NavigationService.NavigateAsync(\"/about/{parameter}\", fooArg ); \r\n\r\n[MvvmCrossRoute(\"about\")]\r\npublic class AboutViewModel\r\n{ \r\n  // mvvm passes nav params to Prepare();\r\n   public AboutViewModel() \r\n   {\r\n\r\n   }\r\n\r\n   public override void Prepare(Foo parameter)\r\n   {\r\n        // receive and store the parameter here\r\n        _myObject = parameter;\r\n    }\r\n\r\n // other mvvmcross related lifecyle methods below..\r\n}\r\n\r\n[PrismRoute(\"newstuff\")]\r\npublic class NewStuffModel\r\n{ \r\n\r\n  // prism passes nav params to `OnNavigatedTo`\r\n   public MyViewModel() \r\n   {\r\n\r\n   }\r\n  public void OnNavigatedTo(NavigationParameters parameters)\r\n  {\r\n    Foo foo  = parameters[\"parameter\"];       \r\n  }\r\n // other prism related lifecyle methods below..\r\n\r\n}\r\n```\r\n\r\nIn terms of usage in an xamarin forms app targeting netstadard, it would be fairly similar to asp.net core:\r\n\r\n```\r\n\r\n// Adds an INavigationService to the container, configured with a \"pipeline\" analagous to\r\n// asp.net core RequestPipeline, except a NavigationRequest flows through it. \r\n// The `middleware` in the pipeline is in `IRouter` implementation,  and there is a Default Handler \r\n// provided by an Mvvm framework  of choice, and a `NavigationRequest` flows through that pipeline. \r\n// Routes can be configured via a RouteBuilder or the Mvvm framework of choice might also discover \r\n// them using Route attributes (like mvc's mega attribute route)\r\n\r\nservices.AddNavigation((routingOptions)=>{\r\n   routingOptions.UseMvvmCross((routes)=>{\r\n     // routes.AddRoute() etc.\r\n   });  \r\n});\r\n\r\n```\r\nObviously this is just an idea of one potential example usage!"},{"Id":"7159870906","Type":"IssuesEvent","CreatedAt":"2018-01-27T18:20:26","Actor":"dazinator","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2830","RelatedDescription":"Opened issue \"Consider making Router independent of aspnet.\" (#2830) at aspnet/Home","RelatedBody":"Would you consider allowing Routing to be used generically, by removing the web dependencies `HttpContext`, `Request/Response Delegate` etc and perhaps moving that piece into an \"Microsoft.Extensions.Routing\" ?\r\n\r\nThe reason I ask is just that a generic Router implementation could have uses outside of just asp.net core website - for example, in an `Xamarin.Forms` app it could be used to implement a navigation service that routes to an appropriate handler (in this case View / ViewModel)\r\n\r\n```\r\nNavigationService.NavigateAsync(\"/about\"); // routes to a view \r\n\r\n[Route(\"about\")]\r\npublic class MyViewModel\r\n{\r\n\r\n    public MyViewModel()\r\n   {\r\n\r\n   }\r\n}\r\n```"},{"Id":"7158481085","Type":"IssuesEvent","CreatedAt":"2018-01-27T01:05:48","Actor":"Mardoxx","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2828","RelatedDescription":"Closed issue \"Constraints on ServiceCollectionServiceExtensions.Add*<TService, TImplementation>() is too restrictive\" (#2828) at aspnet/Home","RelatedBody":"The following will not compile because currently `TService` is required to be a class\r\n\r\n```cs\r\n    public interface ITestService\r\n    {\r\n    }\r\n\r\n    public class TestService : ITestService\r\n    {\r\n    }\r\n\r\n    public static IServiceCollection RegisterScopedTestService<TService, TImplementation>(this IServiceCollection services)\r\n        where TImplementation : class, TService\r\n    {\r\n        return services.AddScoped<TService, TImplementation>();\r\n    }\r\n```\r\n\r\nWas this intentional?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7158477930","Type":"IssuesEvent","CreatedAt":"2018-01-27T01:04:18","Actor":"cristian-eriomenco","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1360","RelatedDescription":"Opened issue \"AuthenticationManager.GetAuthenticationTypes() always empty\" (#1360) at aspnet/SignalR","RelatedBody":"Within a WebApi 2 solution the authentication is set to be using an OpenIdConnect client library. I am able successfully to use the `OwinContext.Authentication` class for kicking off authentication flow within the context of a Web Api Controller.\r\n\r\nIf i'm within a hub method, the Authentication manager doesn't work. \r\n\r\nCurrent setup:\r\n`\r\npublic class MyHub: Hub<IMyHub> \r\n{\r\n   public MyHub(){}\r\n\r\n   public Task DoWork(){\r\n        var principal = this.Context.User; // Currently WindowsIdentity as its not authenticated\r\n\r\n        var auth = this.Context.Request.GetHttpContext().GetOwinContext().Authentication;\r\n        var types = auth.GetAuthenticationTypes(); // Empty list\r\n        // ....\r\n   }\r\n}\r\n`\r\n\r\n`\r\npublic class ValuesController: ApiController \r\n{\r\n   public Task Get(){\r\n      var auth = this.Request.GetOwinContext().Authentication;\r\n      var types = auth.GetAuthenticationTypes(); // List containing one and only \"Bearer\" authentication type setup.\r\n      //.....\r\n   }\r\n}\r\n`\r\n\r\n`\r\npublic class Startup \r\n{\r\n  public void Configuration(IAppBuilder app)\r\n  {\r\n       var httpConfig = new HttpConfiguration();\r\n       // .. Ioc Registering Hubs\r\n       WebApiConfig.Register(httpConfig);\r\n       FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\r\n        app.UseOAuthIntrospection(options =>\r\n        {\r\n                //...\r\n                options.AuthenticationType = OAuthDefaults.AuthenticationType;\r\n                options.ClientId = clientId;\r\n                options.ClientSecret = clientSecret;\r\n                options.RequireHttpsMetadata = false;\r\n                options.AuthenticationMode = AuthenticationMode.Passive;\r\n                options.Events = new OAuthIntrospectionEvents()\r\n                {\r\n                    OnRetrieveToken = context =>\r\n                    {\r\n                        // Getting token from QueryString passed from js app.\r\n                        var token = context.Request.Query[\"Authorization\"];\r\n\r\n                        if (!string.IsNullOrWhiteSpace(token))\r\n                        {\r\n                            context.Token = token;\r\n                        }\r\n\r\n                        return Task.CompletedTask;\r\n                    }\r\n                 }\r\n                //...\r\n        };\r\n        app.UseCors(CorsOptions.AllowAll);\r\n        app.MapSignalR(\"/signalR\", new HubConfiguration() { .... });\r\n        app.UseWebApi(httpConfig); // Have tried swapping these 0 effect\r\n}\r\n`\r\nIs there any reason why the `AuthenticationManager` doesn't work within the context of a signalr request?\r\n\r\nP.S. I do need manually to trigger an authentication challenge and obtain the principal, cannot use [AuthorizeAttribute] on the hub or methods because they are passthrough.\r\n\r\nAppreciate any hints!\r\nThank you!\r\n"},{"Id":"7158284036","Type":"IssuesEvent","CreatedAt":"2018-01-26T23:41:00","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1057","RelatedDescription":"Reopened issue \"Disconnect / Reconnect\" (#1057) at aspnet/SignalR","RelatedBody":"Hi guys,\r\n\r\nAre there javascript events available yet for Disconnect and Reconnect as was available in SignalR 2?\r\n\r\nThanks"},{"Id":"7158092763","Type":"IssuesEvent","CreatedAt":"2018-01-26T22:38:08","Actor":"muratg","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/900","RelatedDescription":"Closed issue \"New client side API design\" (#900) at aspnet/SignalR","RelatedBody":"I'm proposing a new client side API design to solve a bunch of issues:\r\n- https://github.com/aspnet/SignalR/issues/858\r\n- https://github.com/aspnet/SignalR/issues/842\r\n- https://github.com/aspnet/SignalR/issues/836\r\n- https://github.com/aspnet/SignalR/issues/212\r\n- The fact that subscriptions cannot be removed once added\r\n- Passing state to callback to avoid closers\r\n\r\nThe big changes are:\r\n- Events registration method calls instead of .NET events. This allows taking a state parameter to avoid closure allocations.\r\n- Event registration methods also return IDisposable to allow removing the underlying subscription.\r\n- The other big benefit of methods for event registration are the ability to add overloads. We can support non async overloads of event handlers which means callers aren't forced to return Task.CompletedTask.\r\n- The Connected event has been removed since StartAsync represents the same thing. If we need to support a model where outside actors need to subscribe to the event we can consider making Start return the same task instead of throwing.\r\n- The closed event is removed in favor of a cancellation token. It means you can poll for closure as well as use a callback. It also allows passing the connection lifetime to other APIs. It also means you can get notified that the connection has closed after it has closed. One downside of this is that you can't run async logic that we wait on.\r\n\r\n```C#\r\npublic interface IConnection\r\n{\r\n    Task StartAsync(CancellationToken cancellationToken = default);\r\n    Task DisposeAsync(CancellationToken cancellationToken = default);\r\n    Task SendAsync(byte[] data, CancellationToken cancellationToken = default);\r\n\r\n    public CancellationToken ClosedToken { get; }\r\n\r\n    public IDisposable OnReceived(Func<byte[], object, Task> callback, object state);\r\n\r\n    IFeatureCollection Features { get; }\r\n}\r\n\r\npublic class HubConnection\r\n{\r\n    Task StartAsync(CancellationToken cancellationToken = default);\r\n    Task DisposeAsync(CancellationToken cancellationToken = default);\r\n    Task InvokeAsync(string method, CancellationToken cancellationToken = default, params object[] args);\r\n    Task SendAsync(string method, CancellationToken cancellationToken = default, params object[] args);\r\n    Task<ReadableChannel<object>> StreamAsync(string method, CancellationToken cancellationToken = default, params object[] args);\r\n\r\n    public CancellationToken ClosedToken { get; }\r\n\r\n    IDisposable On(string methodName, Type[] parameterTypes, Func<object[], object, Task> callback, object state);\r\n}\r\n```\r\n\r\nPS: This doesn't take into account the possibility that we might want to change `IConnection` to be pipe based in the near future (this means Send and Receive would go away).\r\n\r\n/cc @moozzyk "},{"Id":"7156738583","Type":"PullRequestEvent","CreatedAt":"2018-01-26T17:17:19","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1359","RelatedDescription":"Opened pull request \"fix #1155 by renaming signalRTokenHeader to access_token (#1343)\" (#1359) at aspnet/SignalR","RelatedBody":"Doin the Pranav"},{"Id":"7156736928","Type":"PullRequestEvent","CreatedAt":"2018-01-26T17:16:59","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1343","RelatedDescription":"Merged pull request \"fix #1155 by renaming signalRTokenHeader to access_token\" (#1343) at aspnet/SignalR","RelatedBody":"I actually started this on `release/2.1` because to be honest, it's pretty simple and I feel comfortable taking it in preview 1 if @muratg is OK with that. It's low-hanging fruit, and it's \"public\" API surface (kinda) so front-loading it would be nice. Also, I was reviewing the OAuth spec and noticed that it calls out how to pass access tokens via the query string in the spec (https://tools.ietf.org/html/rfc6750#section-2.3), including the query string name to use, `access_token` (as @PinpointTownes referenced in the issue #1155).\r\n\r\nBrowser functional tests have been updated and run (next up on my plate is to automate those ;)). JwtSample has also been updated and verified. The C# client doesn't ever use the query string, so the only product changes are in the Jwt sample (since we haven't decided what to \"build in\" for this yet) and the TS client.\r\n\r\nAnyway, this PR is on `dev` right now. If @muratg signs off on pulling it up to preview 1, I'll retarget to `release/2.1`"},{"Id":"7156579810","Type":"IssuesEvent","CreatedAt":"2018-01-26T16:44:53","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1358","RelatedDescription":"Closed issue \"@aspnet/signalr-client Microsoft Edge and IE bug\" (#1358) at aspnet/SignalR","RelatedBody":"Hi\r\nI have **@aspnet/signalr-client** in Angular5 application. webpack version is 3.10.0\r\nThe app fails to run in **Edge** and **IE**, problem in both of them is same: \r\n\r\n(console log)\r\nSCRIPT1006: Expected    ')'\r\nsignalr-client-1.0.0-alpha2-final.min.js (1,3798)\r\n\r\nThere is no problem in Chrome and FF "},{"Id":"7156434494","Type":"IssuesEvent","CreatedAt":"2018-01-26T16:16:50","Actor":"SkeletonSkelettron","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1358","RelatedDescription":"Opened issue \"signalr-client MIcrosoft Edge bug\" (#1358) at aspnet/SignalR","RelatedBody":"Hi\r\nI have **@aspnet/signalr-client** in Angular5 application. webpack version is 3.10.0\r\nThe app fails to run in **Edge** and **IE**, problem in both of them is same: \r\n\r\n(console log)\r\nSCRIPT1006: Expected    ')'\r\nsignalr-client-1.0.0-alpha2-final.min.js (1,3798)\r\n\r\nThere is no problem in Chrome and FF "},{"Id":"7155443049","Type":"IssuesEvent","CreatedAt":"2018-01-26T12:49:19","Actor":"rdcm","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1328","RelatedDescription":"Closed issue \"Question: SignalR scaling with redis, monitoring\" (#1328) at aspnet/SignalR","RelatedBody":"After some attempts i could run signalR app with redis.\r\nBut i have some questions about scaling. \r\nSignalR use Pub/Sub redis mechanism, should i use sticky session on nginx side or redis enough?\r\nIf I understood correctly sticky-session is required for all transports except websockets.\r\nCan i monitoring existing connections count, connections fails?"},{"Id":"7154175944","Type":"IssuesEvent","CreatedAt":"2018-01-26T07:03:31","Actor":"gary-holland","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1357","RelatedDescription":"Opened issue \"Suggestion - Change default PollTimeout for LongPolling\" (#1357) at aspnet/SignalR","RelatedBody":"For the LongPolling transport I've noticed the default timeout is set to 110 seconds.  \r\n\r\nThe issue I had is that CloudFlare have a default timeout of ~100 seconds ([details](https://support.cloudflare.com/hc/en-us/articles/200171926-Error-524-A-timeout-occurred)) which was causing my client to error intermittently due to CloudFlares timeout.  \r\n\r\nI am aware that this can be overridden in the configure section using the following (which has resolved issue for me).\r\n\r\n```\r\napp.UseSignalR(routes =>\r\n\t{\r\n\t\troutes.MapHub<RemoteAgentHub>(\"remoteagent\", options =>\r\n\t\t{\r\n\t\t\toptions.LongPolling.PollTimeout = TimeSpan.FromSeconds(60);\r\n\t\t});\r\n\t});\r\n```\r\n\r\nMy suggestion is that you drop the default from 110 seconds to something below 100 seconds, as the current configuration means that everyone hosting a site behind Cloudflare will encounter this issue with the default configuration."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7159757956","Type":"IssuesEvent","CreatedAt":"2018-01-27T17:12:20","Actor":"dasMulli","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7306","RelatedDescription":"Opened issue \"InputFormatters: Adding additional content types is hard\" (#7306) at aspnet/Mvc","RelatedBody":"I recently implemented handling of browser's [CSP reports](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP#Sample_violation_report) in an asp.net core app and it turned out to be quite hard.\r\n\r\nThe problem is that these reports are sent (at least by chrome) using `application/csp-report` as content type header. It took me a while to figure out how to correctly configure MVC to process the request, as I was only receiving 415 responses.\r\n\r\nI ended up with a startup code that feels quite hacky (and I'm still unsure if that's actually a correct approach):\r\n```c#\r\nservices.AddMvc(options =>\r\n{\r\n    // add csp report media type to the json input formatter\r\n    // the json patch formatter derives from the json formatter\r\n    // so use the first one supporting application/json\r\n    options.InputFormatters\r\n        .OfType<JsonInputFormatter>()\r\n        .First(formatter => formatter.SupportedMediaTypes.Contains(\"application/json\"))\r\n        .SupportedMediaTypes.Add(\"application/csp-report\");\r\n})\r\n```\r\n\r\nThe bad experience is that it took me quite some time to figure out how the input formatters worked and without browsing the source code on GitHub, I wouldn't have been able to make it it work (e.g. knowing about the json patch formatter's relationship with the normal json formatter). Google only returned useful results for adding content type mappings for responses.\r\n\r\nI propose doing one or more of the following:\r\n\r\n1. Add an easier to use API about how to handle non-standard content types for requests that map to one of the already implemented input formatters.\r\n2. Add some common content types like `application/csp-report` to the provided input formatters.\r\n3. Add a documentation sample for handling custom content types OR a sample for handling CSP reports that includes this."},{"Id":"7159677124","Type":"IssuesEvent","CreatedAt":"2018-01-27T16:23:14","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7305","RelatedDescription":"Opened issue \"Provide a way to filter out value providers during the model binding process\" (#7305) at aspnet/Mvc","RelatedBody":"This came out during the design discussion of **https://github.com/aspnet/Mvc/issues/5859: Consider allowing binding header values to types other than string and string collections**\r\n\r\nThe proposal is to not include all value providers automatically when no binding source metadata(ex: FromQuery, FromRoute) is available. \r\n\r\nThoughts:\r\n1. Today we include all value providers if binding source is not specified and we make this decision of 'including' [outside the context](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/Internal/DefaultModelBindingContext.cs#L312) of a value provider. Instead of making the decision here, could we instead ask each value provider to see if they can provide data based on if the binding source is null or not? I feel this is analogous to how we ask each formatter if they can read/write.The change could be made [here](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/BindingSourceValueProvider.cs#L72), for example. If I were to add a custom value provider and want to only include it when a user explicitly specifies a binding source, then I can override this Filter method.\r\n2. Do we want to provide more context to a value provider to decide whether it wants to participate in giving the value or not. Point `1.` is about supplying `BindingSource` to a value provider, but should we provide something like ModelBindingContext to each value provider for them to take decision?\r\n\r\ncc @rynowak @dougbu @mkArtakMSFT "},{"Id":"7158342908","Type":"PullRequestEvent","CreatedAt":"2018-01-27T00:03:59","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7304","RelatedDescription":"Merged pull request \"Testing package fixes\" (#7304) at aspnet/Mvc","RelatedBody":"Fixes a bad format image exception caused by some msbuild workaround that were fixed in 2.0 and makes a couple of constructors protected so that WebApplicationTestFixture can be directly instantiated by xUnit"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7160430147","Type":"IssuesEvent","CreatedAt":"2018-01-28T00:26:35","Actor":"Ruslan-Ba","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1575","RelatedDescription":"Closed issue \"ASP.NET Core 2.0 Identity Expiration\" (#1575) at aspnet/Identity","RelatedBody":"Please, see: \r\nhttps://github.com/aspnet/Identity/issues/1478\r\n\r\n```\r\nservices.ConfigureApplicationCookie(options =>\r\n            {            \r\n                options.CookieName = \"Test1\";\r\n                options.AccessDeniedPath = new Microsoft.AspNetCore.Http.PathString(\"/account/login\");\r\n                options.LoginPath = new Microsoft.AspNetCore.Http.PathString(\"/account/login\");\r\n                options.ExpireTimeSpan = TimeSpan.FromMinutes(1);\r\n                options.SlidingExpiration = true;\r\n            });\r\n```\r\n\r\nAccessDeniedPath  is ignored when cookie expires.\r\n401 returns but is it expected to be redirected to AccessDeniedPath ?"},{"Id":"7158515630","Type":"IssuesEvent","CreatedAt":"2018-01-27T01:24:12","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1598","RelatedDescription":"Closed issue \"Identity UI package includes all cshtml files as content\" (#1598) at aspnet/Identity","RelatedBody":"These get added as content to the project via NuGet. Presumably this is undesirable behavior"},{"Id":"7158511947","Type":"IssuesEvent","CreatedAt":"2018-01-27T01:22:05","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1572","RelatedDescription":"Closed issue \"Improve the extensibility of the default identity UI\" (#1572) at aspnet/Identity","RelatedBody":"Support changing the user type from IdentityUser to TUser while using the default UI."},{"Id":"7158246708","Type":"PullRequestEvent","CreatedAt":"2018-01-26T23:27:06","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1600","RelatedDescription":"Merged pull request \"Merge release/2.1 to dev\" (#1600) at aspnet/Identity","RelatedBody":""},{"Id":"7158035337","Type":"PullRequestEvent","CreatedAt":"2018-01-26T22:21:31","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1600","RelatedDescription":"Opened pull request \"Merge release/2.1 to dev\" (#1600) at aspnet/Identity","RelatedBody":""},{"Id":"7158032433","Type":"PullRequestEvent","CreatedAt":"2018-01-26T22:20:39","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1599","RelatedDescription":"Merged pull request \"Exclude content files from package\" (#1599) at aspnet/Identity","RelatedBody":"Fixes https://github.com/aspnet/Identity/issues/1598"},{"Id":"7157552673","Type":"PullRequestEvent","CreatedAt":"2018-01-26T20:17:58","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1599","RelatedDescription":"Opened pull request \"Exclude content files from package\" (#1599) at aspnet/Identity","RelatedBody":"Fixes https://github.com/aspnet/Identity/issues/1598"},{"Id":"7157423977","Type":"IssuesEvent","CreatedAt":"2018-01-26T19:48:55","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1598","RelatedDescription":"Opened issue \"Identity UI package includes all cshtml files as content\" (#1598) at aspnet/Identity","RelatedBody":"These get added as content to the project via NuGet. Presumably this is undesirable behavior"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7159760249","Type":"PullRequestEvent","CreatedAt":"2018-01-27T17:13:43","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2279","RelatedDescription":"Opened pull request \"[WIP]: Assume socket race is fixed\" (#2279) at aspnet/KestrelHttpServer","RelatedBody":"Testing a theory."},{"Id":"7157100316","Type":"IssuesEvent","CreatedAt":"2018-01-26T18:39:50","Actor":"NPSF3000","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2262","RelatedDescription":"Closed issue \"Kestrel Freezes\" (#2262) at aspnet/KestrelHttpServer","RelatedBody":"Kestrel based websocket app becomes unresponsive at random intervals in production.  Reproduction is difficult, and relies upon running with load and monitoring for unresponsiveness.  Once unresponsive the only remedy is to stop the process gracefully and restart.\r\n\r\nEnvironment: AWS, Ubuntu 16.04, Kestrel 2.0.0, AspNetCore 2.0.0\r\n\r\nLLDB shows two threads with `System.ObjectDisposedException` exceptions, both with similar call-stacks:\r\n```\r\n\r\n00007FDC4EFFC4E0 00007fdf29543360 [HelperMethodFrame: 00007fdc4effc4e0] \r\n00007FDC4EFFC600 00007FDEB0424623 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameResponseStream.ValidateState(System.Threading.CancellationToken)\r\n00007FDC4EFFC630 00007FDEB042444F Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameResponseStream.WriteAsync(Byte[], Int32, Int32, System.Threading.CancellationToken)\r\n00007FDC4EFFC690 00007FDEB040D793 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameDuplexStream.WriteAsync(Byte[], Int32, Int32, System.Threading.CancellationToken)\r\n00007FDC4EFFC6B0 00007FDEB06DBCCE System.Net.WebSockets.ManagedWebSocket.SendFrameLockAcquiredNonCancelableAsync(MessageOpcode, Boolean, System.ArraySegment`1<Byte>)\r\n00007FDC4EFFC750 00007FDEB06DC20A System.Net.WebSockets.ManagedWebSocket.SendKeepAliveFrameAsync()\r\n00007FDC4EFFC790 00007FDEB06DE2B9 System.Net.WebSockets.ManagedWebSocket+<>c.<.ctor>b__38_1(System.Object)\r\n00007FDC4EFFC7A0 00007FDEAE701011 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n00007FDC4EFFC7F0 00007FDEAE7B0DF4 System.Threading.TimerQueueTimer.CallCallback()\r\n00007FDC4EFFC830 00007FDEAE7B0C16 System.Threading.TimerQueueTimer.Fire()\r\n00007FDC4EFFC880 00007FDEAE7C6EA5 System.Threading.TimerQueue.FireNextTimers()\r\n```\r\n\r\nWe have identified and removed a .Dispose made on a websocket which may be a cause, but shouldn't lead to this level of repercussions.  Also updating Asp/Kestrel to 2.0.1\r\n\r\n[Websocket Crash Logs.txt](https://github.com/aspnet/KestrelHttpServer/files/1647648/Websocket.Crash.Logs.txt)\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7160631592","Type":"IssuesEvent","CreatedAt":"2018-01-28T03:16:17","Actor":"joetherod","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1984","RelatedDescription":"Opened issue \"ASP.NET CORE MVC Compiler Exception - View Models and HtmlHelpers in separate project \" (#1984) at aspnet/Razor","RelatedBody":"Running latest version of VS 2017, have Docker for Windows installed on Windows 10 with host set to linux\r\nRunning application via VS in debug all works fine, when running in Release mode I get compiler exceptions of the views, cant find namespace or reference. My razors views are retrieved from database and are compiled at runtime. Why is this issue happening in Release mode and not in Debug. Tried adding references in RazorViewOptions and still not working. Looked at this post and tried what was mention with Compiler callback and adding PreserveCompilationContext to true project file.\r\n\r\nI read this post, but the changes indicated didnt work for me.\r\nhttps://github.com/aspnet/Razor/issues/755\r\n"},{"Id":"7158520727","Type":"PullRequestEvent","CreatedAt":"2018-01-27T01:27:08","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1983","RelatedDescription":"Opened pull request \"Change EditorSettingsManager to not be per-workspace.\" (#1983) at aspnet/Razor","RelatedBody":"- Lifted `DefaultEditorSettingsManagerInternal`s state / event handling functionality into its `DefaultEditorSettingsManager`.\r\n- Re-purposed `EditorSettingsManagerInternal` into a less-API heavy middleman for any workspace services concerned with editor settings to consume.\r\n- Moved `DefaultEditorSettingsManagerInternal` into the Editor.Razor assembly since it needed the `EditorSettingsManager` API to function properly. The contract still exists at the `CodeANalysis.Razor.Workspace` level.\r\n- Made the new `DefaultEditorSettingsManager` clean-up dereferenced event handlers since we don't know when workspaces go away and don't want to leak memory and/or trigger bad OnChanged code.\r\n- Added tests to validate new garbage collection functionality and the separation between editorsettingsmanager and the editorsettingmanger internal.\r\n\r\n#1982\r\n\r\n**Note:** Working on testing all these bits in VS with WTEs latest bits but have to do a build and install in their code base which takes a decent amount of time 😉 "},{"Id":"7158498993","Type":"IssuesEvent","CreatedAt":"2018-01-27T01:15:08","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1979","RelatedDescription":"Closed issue \"Add non-workspace specific foreground thread validator for MEF services\" (#1979) at aspnet/Razor","RelatedBody":"This is a part of https://github.com/aspnet/Razor/issues/1973 but felt that it deserved its own issue since it's a key part of the Razor tooling system.\r\n\r\nSo the basic issue is that today we have a `ForegroundDispatcher` which is a workspace service; given that it's a workspace service this means that we need to have a workspace in order to get a foreground dispatcher. In the case of MEF services there are instances when we wont know what's the right workspace in VS for Mac (Such as the `RazorTextViewConnectionListener`), primarily because we'll be at a point when we haven't been given any text buffer or text view.\r\n\r\n~Now you might be thinking ok, well lets break the connection between `ForegroundDispatcher` and workspaces; however, today our foreground dispatcher indirectly uses the `Workspaces` lifetime / instantiation threads to determine foreground/background thread task schedulers so we can dispatch between them. This is highly important. So we can't just make the dispatcher assume foreground/background schedulers (we need to rely on the workspaces lifetime to do that).~\r\n\r\n~This issue tracks creating a `VisualStudioThreadValidator` (internal for now) that only has a `IsForegroundThread` property. Today we don't need to dispatch between foreground/background threads in the IDE's context.~\r\n\r\n~I also want to mention in VS windows context the `VisualStudioThreadValidator` will functionally act exactly like the `ForegroundDispatcher.IsForegroundThread` since there's only a single workspace.~~\r\n\r\nEdit: See below comment"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7156693215","Type":"IssuesEvent","CreatedAt":"2018-01-26T17:07:42","Actor":"jodavis","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1010","RelatedDescription":"Closed issue \"Manage Bower Packages: Update button should disable upon clicking\" (#1010) at aspnet/Tooling","RelatedBody":"Here are the steps to reproduce in VS 2017:\r\n\r\n1. Use the ASP.NET Core Web Application (.NET Core) project template to create a new ASP.NET Core 1.1 Web Application with No Authentication.\r\n1. Right-click the web project in Solution Explorer, and select **Manage Bower Packages...**.\r\n1. From the **Installed** tab, click the **Update** button for the Bootstrap package. Notice that the button doesn't disable after it's been clicked, yet the update is occurring.\r\n\r\nThis **Update** button should be disabled while the package update is in progress. Otherwise, the following command is executed each time the button is clicked: `\"C:\\Users\\Scott Addie\\AppData\\Roaming\\npm\\Bower.cmd\" install bootstrap#v4.0.0-alpha.6 --force-latest --save`.\r\n\r\nIn the screenshot below, you see what happens when I click the button 3 times in a row:\r\n\r\n![bower_update](https://cloud.githubusercontent.com/assets/10702007/23536562/5c5589f6-ff8b-11e6-8c22-7aa322a802d9.png)\r\n\r\n\r\n\r\n"},{"Id":"7151591436","Type":"IssuesEvent","CreatedAt":"2018-01-25T18:01:43","Actor":"jodavis","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/914","RelatedDescription":"Closed issue \"Format on paste setting does not work in .cshtml (Razor - VS 2015)\" (#914) at aspnet/Tooling","RelatedBody":"When disabling format on paste for C# + HTML in the Visual Studio settings, usually code does not get formatted on paste (as expected)\r\n\r\nIn razor files, when you copy and past something like this statement:\r\n```csharp\r\n@Html.AttributeEncode(\"test\")\r\n```\r\nit also works as intended.\r\n\r\nHowever when you mark the \".\" (dot) and do something like cut (Ctlr+X) and paste (Ctlr+V) (or just paste), \r\nthe html helper call gets formatted (in our case like this):\r\n```csharp\r\n@Html.AttributeEncode (\"test\")\r\n```\r\n\r\nThis is ***unexpected and even leads to a compile failure*** (razor @ syntax does not support whitespaces)"},{"Id":"7141550084","Type":"IssuesEvent","CreatedAt":"2018-01-24T01:14:53","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065) at aspnet/Tooling","RelatedBody":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n"},{"Id":"7138385029","Type":"IssuesEvent","CreatedAt":"2018-01-23T14:19:55","Actor":"NeerajaRagesh","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Opened issue \"Issue with Sales discount App - Odoo 9\" (#1065) at aspnet/Tooling","RelatedBody":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n"},{"Id":"7119899220","Type":"IssuesEvent","CreatedAt":"2018-01-18T22:33:02","Actor":"mlorbetske","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/555","RelatedDescription":"Closed issue \"Microsoft.DotNet.Publishing.targets breaks webdeploy zip support\" (#555) at aspnet/Tooling","RelatedBody":"When I create a VS build deployment template in VSTS, it tries building a project or solution with the following arguments:\n\n```\n/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation=\"$(build.artifactstagingdirectory)\\\\\"\n```\n\nAfter the move from DNX targets to DotNet targets, this only builds the project rather than outputting a zip file, breaking the VSTS template.\n\nI'm having a hard time trying to figure out how to call msbuild on my xproj file to get it to build a webdeploy compatible zip package that can be deployed with `Publish-AzureWebsiteProject`.\n"},{"Id":"7107011065","Type":"IssuesEvent","CreatedAt":"2018-01-16T18:28:07","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/522","RelatedDescription":"Closed issue \"Asp.Net project with Build platform x86 \" (#522) at aspnet/Tooling","RelatedBody":"Here are threads in CLI and MVC repo https://github.com/aspnet/Mvc/issues/4663 and  https://github.com/dotnet/cli/issues/3091 with no real answers. Thought it would be VS Tooling bug.\n\nI have a asp.net project that reference a native dll via Nuget package. This native DLL is only build for x86. I've changed my project.json to set buildOptions\n \"platform\": \"x86\"\n\nBut when I build this asp.net project via visual studio, it creates \"bin\\Debug\\net46\\win7-x64\" as oppose to \"win7-x86\". If I run the resulting \".exe\" file it would crash.\n\nI've tried to use \"dotnet build -r win7-x86\" and it would create the right folder \"bin\\Debug\\net46\\win7-x86\" and then I can run the \".exe\" file.\n\nStill cannot test the application in x86 mode.\n\nThen I've uninstalled Microsoft .NET Code 1.0.0 RC2 - SDK Preview 1 (x64) which was installed via \"VS 2015 Tooling Preview\" and installed the \"x86\" one, and everything seems to be working.\n\nI think it is not right. I should be have the option to install x64 and x86 and then via that buildOption I should be able to tell dotnet how to compile. Just like MSBuild and ASP.Net projects where I set the build options from Project Properties.\n"},{"Id":"7106985478","Type":"IssuesEvent","CreatedAt":"2018-01-16T18:22:30","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/557","RelatedDescription":"Closed issue \"Question: Typescript with ASP.NET Core RC2\" (#557) at aspnet/Tooling","RelatedBody":"Is it possible to compile Typescript code directly in Visual Studio 2015 using the ASP.NET Core RC2 project templates?  This used to work in RC1, but since updating to RC2 I can't get Typescript and ASP.NET Core working together simultaneously.  If I create a .NET Core project (e.g., **ASP.NET Core Web Application (.NET Core)** template), then I don't see \"Typescript Build\" properties page in Project Properties (the only property pages available are Application, Build, Debug).  I can create a Typescript project (e.g., **HTML Application with Typescript** template, which uses the csproj format), and Typescript works as expected, but of course I can't use .NET Core in that project.\n\nI have confirmed that my .xproj file does include a reference to Microsoft.DotNet.Web.targets, which I understand is supposed to bring in Typescript support:\n\n```\n<Import Project=\"$(VSToolsPath)\\DotNet.Web\\Microsoft.DotNet.Web.targets\"\n        Condition=\"'$(VSToolsPath)' != ''\" />\n```\n\nIs the built-in Typescript compilation no longer supported with RC2, or am I missing something somewhere?\n"},{"Id":"7065973641","Type":"PullRequestEvent","CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed pull request \"Update migrate-sql-server.md\" (#1062) at aspnet/Tooling","RelatedBody":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7082740966","Type":"IssuesEvent","CreatedAt":"2018-01-10T21:14:16","Actor":"dougbu","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/286","RelatedDescription":"Opened issue \"Remove project file elements added for WebApiCompatShim in 2.0\" (#286) at aspnet/Announcements","RelatedBody":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim package now depends on the latest (5.2.4-preview1) Microsoft.AspNet.WebApi.Client package. That dependency includes a new .NET Standard 2.0 assembly. This assembly supports all platforms the Microsoft.AspNetCore.Mvc.WebApiCompatShim package supports and includes the full Web API Client feature set.\r\n\r\nWhen upgrading projects using the Microsoft.AspNetCore.Mvc.WebApiCompatShim package to our nightly builds or the forthcoming 2.1.0-preview1 release, we recommend removing the following elements from the project file. (Of course, some projects may need the elements for other reasons.)\r\n``` xml\r\n<PackageTargetFallback>$(PackageTargetFallback);portable-net451+win8</PackageTargetFallback>\r\n<DisableImplicitAssetTargetFallback>true</DisableImplicitAssetTargetFallback>\r\n```\r\n\r\nFYI the `<PackageTargetFallback>` element caused the application to build and run against the Portable Class Library (PCL) assembly from the Microsoft.AspNet.WebApi.Client package.\r\n\r\nFor discussion of this change, see aspnet/Mvc#7229."},{"Id":"7076432273","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:08:19","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/285","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\" (#285) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0784\r\n##  ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of an elevation of privilege vulnerability exists when a ASP.NET Core web application, created using vulnerable project templates, fails to properly sanitize web requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\r\n\r\nTo exploit the vulnerability, an attacker could send a specially crafted email, containing a malicious link, to a user. Alternatively, an attacker could use a chat client to social engineer a user into clicking the malicious link. However, in all cases to exploit this vulnerability a user must click a maliciously crafted link from an attacker.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0783](https://github.com/aspnet/Announcements/issues/284), which is in the same templates. Finally installing the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ will update the templates to correct the issue for any new applications created.\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method and search for the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nReplace this line with the following code, removing the call to `Html.Raw()`\r\n\r\n```C#\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` and search for the following line, inside the `OnGetAsync()` method;\r\n\r\n```C#\r\nawait LoadSharedKeyAndQrCodeUriAsync(user);\r\n```\r\n\r\nRemove the code shown below which follows the call to `LoadSharedKeyAndQrCodeUriAsync(user);`\r\n\r\n```C#\r\nif (string.IsNullOrEmpty(SharedKey))\t\t\r\n{\t\t\r\n    await _userManager.ResetAuthenticatorKeyAsync(user);\t\t\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\t\t\r\n}\r\n```\r\n\r\nThe `OnGetAsync()` method should now look like\r\n\r\n```C#\r\npublic async Task<IActionResult> OnGetAsync()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\r\n\r\n    return Page();\r\n}\r\n```\r\n\r\n3. Still in the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` file  and search for the `LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user) function` and replace it with \r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)\r\n{\r\n    // Load the authenticator key & QR code URI to display on the form\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n     }\r\n\r\n    SharedKey = FormatKey(unformattedKey);\r\n    AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n }\r\n```\r\n\r\n4. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find the declaration for `private const string AuthenticatorUriFormat`. Add the following new const declaration below it;\r\n\r\n```C#\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator()` function. Replace its contents with\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> EnableAuthenticator()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    var model = new EnableAuthenticatorViewModel();\r\n    await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n\r\n    return View(model);\r\n}\r\n```\r\n\r\n3. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. Replace its contents with\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> EnableAuthenticator(EnableAuthenticatorViewModel model)\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!ModelState.IsValid)\r\n    {\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n     }\r\n\r\n    // Strip spaces and hypens\r\n    var verificationCode = model.Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\r\n\r\n    var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\r\n        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\r\n\r\n    if (!is2faTokenValid)\r\n    {\r\n        ModelState.AddModelError(\"Code\", \"Verification code is invalid.\");\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n    }\r\n\r\n    await _userManager.SetTwoFactorEnabledAsync(user, true);\r\n    _logger.LogInformation(\"User with ID {UserId} has enabled 2FA with an authenticator app.\", user.Id);\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    TempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\n\r\n    return RedirectToAction(nameof(ShowRecoveryCodes));\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` file create the following method after `EnableAuthenticator(EnableAuthenticatorViewModel model)`;\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file create the following method after the `GenerateQrCodeUri(string email, string unformattedKey)` method\r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user, EnableAuthenticatorViewModel model)\r\n{\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    }\r\n\r\n    model.SharedKey = FormatKey(unformattedKey);\r\n    model.AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n}\r\n```\r\n\r\n6. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n7. Open the `Models\\ManageViewModels\\EnableAuthenticatorViewModel.cs` file and add the following `using` reference;\r\n\r\n```C#\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\n```\r\n\r\nthen replace the class declaration with \r\n\r\n```C# \r\npublic class EnableAuthenticatorViewModel\r\n{\r\n    [Required]\r\n    [StringLength(7, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\r\n    [DataType(DataType.Text)]\r\n    [Display(Name = \"Verification Code\")]\r\n    public string Code { get; set; }\r\n\r\n    [BindNever]\r\n    public string SharedKey { get; set; }\r\n\r\n    [BindNever]\r\n    public string AuthenticatorUri { get; set; }\r\n}\r\n```\r\n\r\n8. Open the `Views\\Manage\\EnableAuthenticator.cshtml` file and replace the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nwith\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\nremove the call to `Html.Raw()`.\r\n\r\n9. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0784](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0784)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  "},{"Id":"7076428623","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:07:27","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/284","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery\" (#284) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0785\r\n## ASP.NET Core Templates enable Cross Site Request Forgery\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Cross Site Request Forgery vulnerability in the individual authentication templates for ASP.NET Core 2.0. An attacker who successfully exploited this vulnerability could change the recovery codes associated with the victim's user account without his/her consent. As a result, a victim of this attack may be permanently locked out of his/her account after loosing access to his/her 2FA device, as the initial recovery codes would be no longer valid.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  CVE-2018-0784, which is in the same templates.  ***** TODO: ADD LINK TO OTHER ISSUE ***** \r\n\r\nYou should also install the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ as will update the templates to correct the issue for any _new_ applications created after its installation. Existing applications must be manually updated using the instructions below.\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method. The last line of this file should be\r\n\r\n```C#\r\nreturn RedirectToPage(\"./GenerateRecoveryCodes\");\r\n```\r\n\r\nReplace this line with the following code\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\nreturn RedirectToPage(\"./ShowRecoveryCodes\");\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml` and replace its contents with \r\n\r\n```C#\r\n@page\r\n@model GenerateRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-action=\"ResetAuthenticatorWarning\">reset your authenticator keys.</a>\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n3. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml.cs` file. Replace its contents with\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\nusing Microsoft.Extensions.Logging;\r\nusing Company.WebApplication1.Data;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class GenerateRecoveryCodesModel : PageModel\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userManager;\r\n        private readonly ILogger<GenerateRecoveryCodesModel> _logger;\r\n\r\n        public GenerateRecoveryCodesModel(\r\n            UserManager<ApplicationUser> userManager,\r\n            ILogger<GenerateRecoveryCodesModel> logger)\r\n        {\r\n            _userManager = userManager;\r\n            _logger = logger;\r\n        }\r\n\r\n        public async Task<IActionResult> OnGetAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n            }\r\n\r\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n            TempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\n\r\n            _logger.LogInformation(\"User with ID '{UserId}' has generated new 2FA recovery codes.\", user.Id);\r\n\r\n            return RedirectToPage(\"./ShowRecoveryCodes\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. Create a new file, `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml` with the following contents \r\n\r\n```C#\r\n@page\r\n@model ShowRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n5. Create a new file `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml.cs` with the following contents\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class ShowRecoveryCodesModel : PageModel\r\n    {\r\n        public string[] RecoveryCodes { get; private set; }\r\n\r\n        public IActionResult OnGet()\r\n        {\r\n            RecoveryCodes = (string[])TempData[\"RecoveryCodes\"];\r\n            if (RecoveryCodes == null)\r\n            {\r\n                return RedirectToPage(\"TwoFactorAuthentication\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n6. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find \r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\n```\r\n  and add a new declaration underneath,\r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. The last line in this method should be\r\n\r\n```C#\r\nreturn RedirectToAction(nameof(GenerateRecoveryCodes));\r\n```\r\n\r\nReplace this final line with\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\nreturn RedirectToAction(nameof(ShowRecoveryCodes));\r\n```\r\n\r\n3. Create a new method in `Controllers\\ManageController.cs` called `ShowRecoveryCodes()` with the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file and find the `GenerateRecoveryCodes()` method. The code should look as follows\r\n\r\n```C# \r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    ...\r\n}\r\n```\r\nReplace the method with the following\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n    }\r\n\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    _logger.LogInformation(\"User with ID {UserId} has generated new 2FA recovery codes.\", user.Id);\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes.ToArray() };\r\n\r\n    return View(nameof(ShowRecoveryCodes), model);\r\n}\r\n```\r\n\r\n6. Create a new View in `Views\\Manage\\ShowRecoveryCodes.cshtml` with the following content\r\n\r\n```\r\n@model ShowRecoveryCodesViewModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n7. Create a new `ShowRecoveryCodesViewModel` class in the `Models\\ManageViewModels` folder and create the class as follows\r\n\r\n```c#\r\npublic class ShowRecoveryCodesViewModel\r\n{\r\n    public string[] RecoveryCodes { get; set; }\r\n}\r\n``` \r\n\r\n8.  Delete the `Models\\ManageViewModels\\generateRecoveryCodesViewModel.cs` file.\r\n\r\n9. Open the `Views\\Manage\\GenerateRecoveryCodes.cshtml` file. Replace the contents with \r\n\r\n```\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h2>@ViewData[\"Title\"]</h2>\r\n\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-action=\"ResetAuthenticatorWarning\">reset your authenticator keys.</a>\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form asp-action=\"GenerateRecoveryCodes\" method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n\r\n10. Edit `Views\\Manage\\TwoFactorAuthentication.cshtml` to change `<a asp-action=\"GenerateRecoveryCodes\" class=\"btn btn-default\">Reset recovery codes</a>` to ` <a asp-action=\"GenerateRecoveryCodesWarning\" class=\"btn btn-default\">Reset recovery codes</a>`.\r\n\r\n11. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0785](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0785)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n\r\n  \r\n  \r\n  "},{"Id":"7048395292","Type":"IssuesEvent","CreatedAt":"2018-01-02T17:35:05","Actor":"Eilon","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/283","RelatedDescription":"Opened issue \"Using the \"Home\" repo for issue management of other repos\" (#283) at aspnet/Announcements","RelatedBody":"Hi all,\r\n\r\nWe are experimenting to try and use the [Home repo's issue tracker](https://github.com/aspnet/Home/issues) to manage issues for multiple repos. To start with, we have moved the bugs from several other repos to the Home repo, and we will retire the issue trackers of those other repos.\r\n\r\nWe are doing this to try to improve the experience of logging issues for ASP.NET Core.\r\n\r\n* Labels in the form of `repo:RepoName` are used to associate the bug with a product/feature area\r\n* For issue trackers that moved to the Home repo, please log new issues in the Home repo. If a bug is logged in a moved issue tracker, it will be closed.\r\n* Over time, we plan to consolidate more issue trackers into the Home repo\r\n\r\nFor discussions on this topic, please go to https://github.com/aspnet/Home/issues/2736.\r\n\r\nThanks,\r\nEilon\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"956668144784846849","CreatedAt":"2018-01-25T23:20:34+00:00","UserScreenname":"aspnet","Text":"Just blogged: @Azure Storage for Serverless .NET apps in Minutes.\nhttps://t.co/5vSYYtzt8p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":79,"FavoriteCount":50,"RawContent":null},{"Id":"956524881121771521","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"aspnet","Text":"Jeff and Maira - improving https://t.co/y1SqotEH5B LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/IXsNIkHfWB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":2,"RawContent":null},{"Id":"955862764530024448","CreatedAt":"2018-01-23T18:00:16+00:00","UserScreenname":"aspnet","Text":"Starting now: #ASPNET Community Standup with Ryan Nowak on HttpClientFactory\n\nhttps://t.co/3dFxSj11IQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":7,"RawContent":null},{"Id":"955790962739040256","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"aspnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BDz2cgCTrt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"955640761793495042","CreatedAt":"2018-01-23T03:18:07+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is Jan 23 10 AM PT / 1800 GMT with special guest Ryan Nowak talking about Htt… https://t.co/5a8Ga9AJNL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":10,"RawContent":null},{"Id":"954763537884372997","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"aspnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/0zBt67tqGg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":3,"RawContent":null},{"Id":"954724179403837440","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"aspnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/Y02invGhm1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"953279227012542464","CreatedAt":"2018-01-16T14:54:13+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz today to learn more about .NET and ask questions about .NET, .NET Core, Visual Studio or ASPNet. https://t.co/PfmelAvxS2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null},{"Id":"952185961147969537","CreatedAt":"2018-01-13T14:29:58+00:00","UserScreenname":"aspnet","Text":"Our Jeff Fritz (@csharpfritz) will be LIVE CODING again today.  Today's topic is unit testing @AspNet Core projects… https://t.co/H2wBoF77Ri","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"950775244016332800","CreatedAt":"2018-01-09T17:04:17+00:00","UserScreenname":"aspnet","Text":"Join us for the @aspnet Community Standup at 10 AM Pacific / 18:00 UTC today. We've got special guest… https://t.co/o5WiTdUXQC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":18,"RawContent":null},{"Id":"949414507759124480","CreatedAt":"2018-01-05T22:57:12+00:00","UserScreenname":"aspnet","Text":"Announcing Preview 1 of #ASPNET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4 https://t.co/xVYhW7ospD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":68,"RawContent":null},{"Id":"948916811034234882","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"aspnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/SPEnBXEEbC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":5,"RawContent":null},{"Id":"948343098278477824","CreatedAt":"2018-01-02T23:59:48+00:00","UserScreenname":"aspnet","Text":"The ASPNET Community Standup is live at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":5,"RawContent":null},{"Id":"944564608404205568","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/RuFa6Hh6S7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"943234846289289217","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/wEDxxFaCxu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":2,"RawContent":null},{"Id":"942039735207448576","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/OakzDOKxUB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"941295101271212032","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/aG5z9e5Rgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":5,"RawContent":null},{"Id":"941015999809249280","CreatedAt":"2017-12-13T18:44:32+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz in about 15 minutes on Mixer or Twitch for a two-hour LIVE .NET CODING session where he will answ… https://t.co/OC1nGXILjO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"938192857902354432","CreatedAt":"2017-12-05T23:46:22+00:00","UserScreenname":"aspnet","Text":"We're live for the #ASPNET Community Standup now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-01-28T05:30:10.4554305Z","RunDurationInMilliseconds":9015}