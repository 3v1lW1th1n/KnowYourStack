{"Data":{"Sdk":{"Events":[{"Id":"11483246331","Type":"PullRequestEvent","CreatedAt":"2020-02-10T23:18:56","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/679","RelatedDescription":"Merged pull request \"Implement OpenXmlElementFunctionalExtensions\" (#679) at OfficeDev/Open-XML-SDK","RelatedBody":"This commit implements the OpenXmlElementFunctionalExtensions class and\r\nrelated unit tests.\r\n\r\nFixes #634."},{"Id":"11483246314","Type":"IssuesEvent","CreatedAt":"2020-02-10T23:18:56","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/634","RelatedDescription":"Closed issue \"Increase flexibility of constructors, e.g., for pure functional transformations\" (#634) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nIn the context of pure functional transformations, it would be beneficial to construct `OpenXmlElement` instances very flexibly. For example, one might want to construct a new element in the following way:\r\n```csharp\r\nreturn new Paragraph(\r\n    new ParagraphProperties(new ParagraphStyleId { Val = \"MyStyleId\" }),\r\n    FunctionReturningIEnumerableOfRun(someParams));\r\n```\r\n\r\n**Information**\r\n\r\n- .NET Target: All\r\n- DocumentFormat.OpenXml Version: Latest\r\n\r\nSee discussion in #627.\r\n\r\n**Observed**\r\n\r\nUsing the `Paragraph` class as an example, the subclasses of `OpenXmlElement` define the following constructors:\r\n```csharp\r\npublic Paragraph()\r\n{\r\n}\r\n\r\npublic Paragraph(IEnumerable<OpenXmlElement> childElements)\r\n    : base(childElements)\r\n{\r\n}\r\n\r\npublic Paragraph(params OpenXmlElement[] childElements)\r\n    : base(childElements)\r\n{\r\n}\r\n\r\npublic Paragraph(string outerXml)\r\n    : base(outerXml)\r\n{\r\n}\r\n```\r\nWith those constructors, the example instance can't be created, because we can't combine an `OpenXmlElement`  and an `IEnumerable<OpenXmlElement>`.\r\n\r\n**Expected**\r\n\r\nWe should be able to create instances in the way shown in the description.\r\n\r\n**Design Idea**\r\n\r\nWe could borrow the design from the `System.Xml.Linq.XElement` class, which, owing to how you can construct instances, is instrumental in pure functional transformations.\r\n\r\nThe two key `XElement` constructors for pure functional transformations are:\r\n```csharp\r\npublic XElement(XName name, object content)\r\n    : this(name)\r\n{\r\n    this.AddContentSkipNotify(content);\r\n}\r\n\r\npublic XElement(XName name, params object[] content)\r\n    : this(name, (object) content)\r\n{\r\n}\r\n```\r\nNote how the second constructor delegates to the first one. Thus, the magic happens in the `AddContentSkipNotify(object)` method, which works with pretty much any meaningful actual parameter you throw at it.\r\n\r\nThus, using the `Paragraph` example, we could replace:\r\n- `Paragraph(IEnumerable<OpenXmlElement>)` with `Paragraph(object)` and\r\n- `Paragraph(params OpenXmlElement[])` with `Paragraph(params object[])`."},{"Id":"11461585725","Type":"PullRequestEvent","CreatedAt":"2020-02-07T12:18:01","Actor":"ThomasBarnekow","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/679","RelatedDescription":"Opened pull request \"Implement OpenXmlElementFunctionalExtensions\" (#679) at OfficeDev/Open-XML-SDK","RelatedBody":"This commit implements the OpenXmlElementFunctionalExtensions class and\r\nrelated unit tests.\r\n\r\nFixes #634."},{"Id":"11438490110","Type":"IssuesEvent","CreatedAt":"2020-02-05T03:44:41","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/678","RelatedDescription":"Opened issue \"Convert semantic validation registration to declarative structure within OpenXmlElement\" (#678) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"11414244997","Type":"PullRequestEvent","CreatedAt":"2020-02-02T01:13:54","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/677","RelatedDescription":"Merged pull request \"Add support for net35 development\" (#677) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"11414190408","Type":"PullRequestEvent","CreatedAt":"2020-02-02T00:46:28","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/677","RelatedDescription":"Opened pull request \"Add support for net35 development\" (#677) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"11406006456","Type":"PullRequestEvent","CreatedAt":"2020-01-31T13:26:46","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/676","RelatedDescription":"Opened pull request \"[WIP] Add support for child insertion based on schema\" (#676) at OfficeDev/Open-XML-SDK","RelatedBody":"Currently, the order in which items are inserted is very much dependent on hard coded values from a code generator. This change instead utilizes the information in the particle constraint that already exists on an item to determine where the child should be inserted.\r\n\r\nPart of #492 "}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-02-11T05:30:47.0477565Z","RunDurationInMilliseconds":1420}