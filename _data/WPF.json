{"Data":{"GitHub":{"Issues":[{"Id":"404114395","IsPullRequest":false,"CreatedAt":"2019-01-29T04:10:38","Actor":"walterlv","Number":"297","RawContent":null,"Title":"Creating multi-thread UI has a low probability to crash","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10.0.18323 19H1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\n Necessary conditions:\r\n\r\n1. Create multiple WPF UI threads\r\n    - In fact, two are enough, one is the main UI thread with the App class we usually write; a background UI thread, for example, to display the UI thread that starts the splash screen.\r\n    - If you use two threads, you need a lot of repetitive trials to reproduce; and by creating more threads you can greatly improve the probability of a single recurrence\r\n2. These UI threads all display WPF windows\r\n3. This issue will occur in both WPF on .NET Core 3 and WPF on .NET Framework 4.8.\r\n\r\nphenomenon:\r\n\r\nÂ - An exception is thrown and the application crashes\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n ```\r\nException thrown: 'System.NullReferenceException' in WindowsBase.dll\r\nObject reference not set to an instance of an object.\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Packaging.PackagePart.CleanUpRequestedStreamsList()\r\n   at System.IO.Packaging.PackagePart.GetStream(FileMode mode, FileAccess access)\r\n   at System.Windows.Application.LoadComponent(Object component, Uri resourceLocator)\r\n   at Walterlv.Bugs.MultiThreadedUI.SplashWindow.InitializeComponent() in C:\\Users\\lvyi\\Desktop\\Walterlv.Bugs.MultiThreadedUI\\Walterlv.Bugs.MultiThreadedUI\\SplashWindow.xaml:line 1\r\n   at Walterlv.Bugs.MultiThreadedUI.SplashWindow..ctor() in C:\\Users\\lvyi\\Desktop\\Walterlv.Bugs.MultiThreadedUI\\Walterlv.Bugs.MultiThreadedUI\\SplashWindow.xaml.cs:line 24\r\n   at Walterlv.Bugs.MultiThreadedUI.Program.<>c__DisplayClass1_0.<RunSplashWindow>b__0() in C:\\Users\\lvyi\\Desktop\\Walterlv.Bugs.MultiThreadedUI\\Walterlv.Bugs.MultiThreadedUI\\Program.cs:line 33\r\n```\r\n\r\n![The exception caught in Visual Studio 2019](https://user-images.githubusercontent.com/9959623/51883630-bd685300-23be-11e9-9c71-a0a8d8d929e3.png)\r\n\r\n **Expected behavior:**\r\nDon't crash.\r\n \r\n **Minimal repro:**\r\n\r\n1. Create a new WPF project (either .NET Core 3 or .NET Framework 4.8)\r\n2. Keep the automatically generated `App` and `MainWindow` unchanged, we create a new window `SplashWindow`.\r\n3. Create a new `Program` class containing the Main function and set `Program` as the startup object (instead of `App`) in the project properties.\r\n\r\n![The project structure](https://user-images.githubusercontent.com/9959623/51883617-acb7dd00-23be-11e9-970d-d3581d5dab41.png)\r\n\r\nAll other files remain the same as the default code generated by Visual Studio, and the code of Program.cs is as follows:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Threading;\r\nusing System.Windows.Threading;\r\n\r\nnamespace Walterlv.Bugs.MultiThreadedUI\r\n{\r\n    public class Program\r\n    {\r\n        [STAThread]\r\n        private static void Main(string[] args)\r\n        {\r\n            for (var i = 0; i < 50; i++)\r\n            {\r\n                RunSplashWindow(i);\r\n            }\r\n\r\n            var app = new App();\r\n            app.InitializeComponent();\r\n            app.Run();\r\n        }\r\n\r\n        private static void RunSplashWindow(int index)\r\n        {\r\n            var thread = new Thread(() =>\r\n            {\r\n                var window = new SplashWindow\r\n                {\r\n                    Title = $\"SplashWindow {index.ToString().PadLeft(2, ' ')}\",\r\n                };\r\n                window.Show();\r\n                Dispatcher.Run();\r\n            })\r\n            {\r\n                IsBackground = true,\r\n            };\r\n            thread.SetApartmentState(ApartmentState.STA);\r\n            thread.Start();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRemarks: Even if you add this code just before the Splash Window creating, this exception still occurs.\r\n\r\n```csharp\r\nSynchronizationContext.SetSynchronizationContext(\r\n    new DispatcherSynchronizationContext(\r\n        Dispatcher.CurrentDispatcher));\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/297","RelatedDescription":"Open issue \"Creating multi-thread UI has a low probability to crash\" (#297)"},{"Id":"404050604","IsPullRequest":false,"CreatedAt":"2019-01-28T23:17:06","Actor":"dsplaisted","Number":"296","RawContent":null,"Title":"Runtime pack for Microsoft.WindowsDesktop.App should not include PDBs","State":"open","Body":"The \"runtime pack\" for Microsoft.WindowsDesktop.App\" currently includes .pdb files.  These should not be included in this package.","Url":"https://github.com/dotnet/wpf/issues/296","RelatedDescription":"Open issue \"Runtime pack for Microsoft.WindowsDesktop.App should not include PDBs\" (#296)"},{"Id":"403636538","IsPullRequest":false,"CreatedAt":"2019-01-28T03:22:04","Actor":"chenyj796","Number":"295","RawContent":null,"Title":"The GenerateAssemblyInformationalVersionAttribute Property in csproj file doestn't work","State":"open","Body":"* .NET Core Version: (3.0 Preview1)\r\n* Windows version: (`windows 10`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.6.1?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nI have an assembly attribute declaration as below:\r\n``` csharp\r\n[assembly: System.Reflection.AssemblyInformationVersion(\"some text\")]\r\n```\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n build failed for report repeated AssemblyInformationVersionAttribute\r\n\r\n **Expected behavior:**\r\n success since I added the property in csproj file\r\n``` csharp\r\n<GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>\r\n```\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/295","RelatedDescription":"Open issue \"The GenerateAssemblyInformationalVersionAttribute Property in csproj file doestn't work\" (#295)"},{"Id":"403580937","IsPullRequest":false,"CreatedAt":"2019-01-27T18:37:45","Actor":"MV10","Number":"294","RawContent":null,"Title":"WPF attributes coming to csproj or remain in AssemblyInfo?","State":"open","Body":"Now that .NET Core (or perhaps more correctly stated, MSBUILD?) is supposed use a hodgepodge of new csproj XML tags to create the assembly attributes we used to declare in AssemblyInfo.cs, what's the plan for WPF when it comes to things like `System.Windows.ThemeInfo` or the XML namespace attributes from `System.Windows.Markup`? Right now I'm having to create a my own Properties folder and AssemblyInfo.cs.\r\n\r\nAssuming WPF will follow the pattern of Even More Tags, will they be documented with the rest of csproj, or stashed away somewhere WPF-specific? (It looks like the current csproj docs are already missing a lot of tags, judging from the open issues list.)\r\n\r\nOr is it all still too early to say for sure?","Url":"https://github.com/dotnet/wpf/issues/294","RelatedDescription":"Open issue \"WPF attributes coming to csproj or remain in AssemblyInfo?\" (#294)"},{"Id":"402977910","IsPullRequest":false,"CreatedAt":"2019-01-25T02:22:55","Actor":"wyshmily","Number":"293","RawContent":null,"Title":"add character spacing support to Text element","State":"open","Body":"Is this hard?\r\nOr how can I achieve this by myself?","Url":"https://github.com/dotnet/wpf/issues/293","RelatedDescription":"Open issue \"add character spacing support to Text element\" (#293)"},{"Id":"402825942","IsPullRequest":false,"CreatedAt":"2019-01-24T17:53:12","Actor":"XianghanWang","Number":"292","RawContent":null,"Title":"image isn't rendered in wpf .net core project","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 19H1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nSteps to reproduce:\r\n1. Create new .net core WPF project\r\n2. Add image element and set source to one image file.\r\n3. F5\r\n\r\nActual: the image isn't rendered in UI. \r\n","Url":"https://github.com/dotnet/wpf/issues/292","RelatedDescription":"Open issue \"image isn't rendered in wpf .net core project\" (#292)"},{"Id":"402700687","IsPullRequest":true,"CreatedAt":"2019-01-24T13:18:00","Actor":"dotnet-maestro[bot]","Number":"291","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19073.11\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19073.11\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19073.11\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19073.11\r\n- System.Security.AccessControl - 4.6.0-preview.19073.11\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19073.11\r\n- System.Security.Permissions - 4.6.0-preview.19073.11\r\n- System.Security.Principal.Windows - 4.6.0-preview.19073.11\r\n- System.Reflection.Emit - 4.6.0-preview.19073.11\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19073.11\r\n- System.Windows.Extensions - 4.6.0-preview.19073.11\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/291","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#291)"},{"Id":"402697976","IsPullRequest":true,"CreatedAt":"2019-01-24T13:10:32","Actor":"dotnet-maestro[bot]","Number":"290","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/290","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#290)"},{"Id":"402553881","IsPullRequest":false,"CreatedAt":"2019-01-24T06:49:48","Actor":"kumamiko","Number":"289","RawContent":null,"Title":"Can wpf be compiled to native code?","State":"closed","Body":"I'm new with wpf and dotnet core.\r\n\r\nJust curious if wpf can be compiled to native code.\r\n\r\nMaybe that is a stupid questionï¼","Url":"https://github.com/dotnet/wpf/issues/289","RelatedDescription":"Closed issue \"Can wpf be compiled to native code?\" (#289)"},{"Id":"402285413","IsPullRequest":false,"CreatedAt":"2019-01-23T15:11:36","Actor":"Jogge","Number":"288","RawContent":null,"Title":"Button.MouseLeftButtonDown is silently disabled","State":"open","Body":"> The `OnMouseLeftButtonDown` method marks the `MouseLeftButtonDown` event as handled.\r\n_Source: https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button?view=netframework-4.8_\r\n\r\nI guess many WPF programmers at one point will end up wasting time trying to figure out why the event `MouseLeftButtonDown` does not work on the `Button` control... I just wasted 30 minutes...\r\n\r\nMy suggestions is:\r\n\r\n- Remove the event completely from `Button` control\r\n- Mark the event as _\"You can't touch this\"_\r\n- Stop making standard events unusable by not setting the event as handled in `OnMouseLeftButtonDown`\r\n\r\nAnother frustrated WPF programmer:\r\nhttps://stackoverflow.com/questions/22813608/wpf-button-mouseleftbuttondown-doesnt-work-at-all\r\n\r\nRandom internet quote:\r\n> Oh My God! They Killed Button.MouseLeftButtonDown!\r\n> You bastards!","Url":"https://github.com/dotnet/wpf/issues/288","RelatedDescription":"Open issue \"Button.MouseLeftButtonDown is silently disabled\" (#288)"},{"Id":"402233703","IsPullRequest":true,"CreatedAt":"2019-01-23T13:19:11","Actor":"dotnet-maestro[bot]","Number":"287","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19072.2\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19072.2\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19072.2\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19072.2\r\n- System.Security.AccessControl - 4.6.0-preview.19072.2\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19072.2\r\n- System.Security.Permissions - 4.6.0-preview.19072.2\r\n- System.Security.Principal.Windows - 4.6.0-preview.19072.2\r\n- System.Reflection.Emit - 4.6.0-preview.19072.2\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19072.2\r\n- System.Windows.Extensions - 4.6.0-preview.19072.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/287","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#287)"},{"Id":"402230106","IsPullRequest":true,"CreatedAt":"2019-01-23T13:09:43","Actor":"dotnet-maestro[bot]","Number":"286","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/286","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#286)"},{"Id":"401920448","IsPullRequest":true,"CreatedAt":"2019-01-23T00:58:25","Actor":"vatsan-madhavan","Number":"284","RawContent":null,"Title":"Setting PrivateAssets=All in PackageReference","State":"closed","Body":"Fixing #283 ","Url":"https://github.com/dotnet/wpf/pull/284","RelatedDescription":"Closed or merged PR \"Setting PrivateAssets=All in PackageReference\" (#284)"},{"Id":"401988850","IsPullRequest":false,"CreatedAt":"2019-01-22T22:48:05","Actor":"ericstj","Number":"285","RawContent":null,"Title":"PresentationBuildTasks should use MetadataLoadContext ","State":"open","Body":" **Problem description:**\r\nPBT is still using System.Reflection.TypeLoader from corefxlab.  I believe it needs to move to use https://github.com/dotnet/corefx/tree/master/src/System.Reflection.MetadataLoadContext.\r\n \r\nAs a result of using the old TypeLoader it is missing fixes / changes as well as bringing in stale dependencies for this component.\r\n\r\n/cc @ryalanms @steveharter \r\n","Url":"https://github.com/dotnet/wpf/issues/285","RelatedDescription":"Open issue \"PresentationBuildTasks should use MetadataLoadContext \" (#285)"},{"Id":"401911811","IsPullRequest":false,"CreatedAt":"2019-01-22T19:12:38","Actor":"ericstj","Number":"283","RawContent":null,"Title":"WPF's transport package has dependency on System.Security.Permissions","State":"open","Body":" **Problem description:**\r\nWPF's transport packages should be binaries only.  The version of the dependencies is meant to be decided in dotnet-trusted when the shared framework is built.\r\n\r\n **Actual behavior:** \r\nRestores WPF binaries and some CoreFx dependencies (the closure of System.Security.Permissions).\r\n \r\n **Expected behavior:**\r\nOnly restores WPF binaries\r\n \r\n **Minimal repro:**\r\ncreate a project and reference:\r\n```xml\r\n<PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.Wpf.Private\" Version=\"4.8.0-prerelease.19064.4\" />\r\n```\r\n\r\nThe fix here is to set PrivateAssets=All on all PackageDependencies in the project which produces your transport package.   Since that happens to be System.Xaml today, it needs to be done there.","Url":"https://github.com/dotnet/wpf/issues/283","RelatedDescription":"Open issue \"WPF's transport package has dependency on System.Security.Permissions\" (#283)"},{"Id":"401878604","IsPullRequest":false,"CreatedAt":"2019-01-22T17:48:40","Actor":"vsfeedback","Number":"282","RawContent":null,"Title":"Some programming ligatures do not work","State":"closed","Body":"<p>Visual Studio does not correctly display correctly some programming ligatures that contain a hyphen such as &lt;- or &lt;!--</p><p>This has been reported before:\n</p><p>https://visualstudio.uservoice.com/forums/121579-visual-studio-2015/suggestions/12983895-fix-ligatures</p>\nhttps://github.com/tonsky/FiraCode/issues/259\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/44061/some-programming-ligatures-do-not-work.html\nVSTS ticketId: 422890_\n_These are the original issue comments:_\n\nVisual Studio Team on 4/18/2017, 01:50 PM (643 days ago): Thank you for your feedback. We have determined that this issue will not be addressed in the upcoming release. We will continue to evaluate it for future releases. Thank you for helping us build a better Visual Studio.\n\nLeonardo Santagada on 6/5/2018, 05:11 AM (231 days ago): <p>would be great if this was fixed.</p>\n\nNathan Phillip Brink (binki) on 10/15/2018, 09:25 AM (99 days ago): <p>Please post your comments on the OPâs post rather than as solutions. Thanks!</p>\n\nBryan Slatner on 10/15/2018, 09:11 AM (99 days ago): Experiencing this in F#. Ligatures for |> and <| and others work, but not <- or ->\nRob LaDuca [MSFT] on 1/18/2019, 02:03 PM (3 days ago): <p>Thank you very much for your feedback. We appreciate you for letting us know about the problem you encountered, but we havenât been able to fully investigate your problem as our focus has been on problem reports with issues impacting a broad number of customers.</p>\n\nSergey Semushin on 1/19/2019, 06:22 AM (3 days ago): <p>So 36 upvotes doesn't cut it to \"issues impacting a broad number of customers.\" I'm a bit surprised.<br></p>\n\nGareth Lees on 1/21/2019, 10:06 AM (23 hours ago): <p>I don't understand the closure without fixing, it's a core issue that impacts more on developers than you would normally imagine and is the reason that I have had to move to Rider and VS Code for a lot of my editing needs. Please reconsider this, especially as fixing it in VS would involve fixing it in WPF and have far-reaching effects.</p>\n\nAmos Anderson on 1/21/2019, 10:44 AM (22 hours ago): <p>I can imaging leaving it as a low priority but not closing it. I agree that it's a situation that doesn't bring about the end of the world but some of us would like to see it fixed. </p>\n\nTobias Burger on 1/21/2019, 11:53 AM (21 hours ago): <p>So WPF will never get proper ligature support? I can remember the time where Microsoft was \"pumped\" that WPF was presented as one of the first technologies with ligature support (on Windows)...</p>\n\nStuart Lang on 1/21/2019, 11:56 AM (21 hours ago): <p>Closing this seems like a mistake to me. I'll take a look at the repo now wpf is open source, even if that means it will be years away from landing in VS. https://github.com/dotnet/wpf</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/282","RelatedDescription":"Closed issue \"Some programming ligatures do not work\" (#282)"},{"Id":"401755380","IsPullRequest":true,"CreatedAt":"2019-01-22T13:10:10","Actor":"dotnet-maestro[bot]","Number":"281","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/281","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#281)"},{"Id":"401276163","IsPullRequest":false,"CreatedAt":"2019-01-21T10:02:57","Actor":"Mabenan","Number":"280","RawContent":null,"Title":"XAML Editor for VSCode","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nI don't know if i'm here right with this request.\r\n\r\nLike the title says it would be nice to have an xaml designer in vscode. As i think many people use dotnet core with vs code.","Url":"https://github.com/dotnet/wpf/issues/280","RelatedDescription":"Open issue \"XAML Editor for VSCode\" (#280)"},{"Id":"401096002","IsPullRequest":true,"CreatedAt":"2019-01-20T13:10:32","Actor":"dotnet-maestro[bot]","Number":"279","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/279","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#279)"},{"Id":"400994017","IsPullRequest":true,"CreatedAt":"2019-01-19T13:10:24","Actor":"dotnet-maestro[bot]","Number":"278","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/278","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#278)"},{"Id":"400933430","IsPullRequest":false,"CreatedAt":"2019-01-19T00:03:41","Actor":"vsfeedback","Number":"277","RawContent":null,"Title":"WPF ShowDialog() never returns when a dialog's owner is closed and that owner is another dialog","State":"open","Body":"I'm attaching a project that succinctly shows the bug, but here's the idea:\n\n1. Create a WPF app with a main window.\n2. Click a button that does two things:\n2a. Immediately shows another window as a dialog (using ShowDialog())\n2b. After a short delay, shows a third window as a dialog whose owner is the second window (the first dialog)\n3. In the first dialog's Loaded handler, the dialog closes itself after a short delay.\n\nWhat should happen:\nBoth dialogs close and both dialogs' ShowDialog() methods return.\n\nWhat actually happens:\nBoth dialogs close but neither dialog's ShowDialog() method returns.\n\nIn the attached sample, a counter is used to keep track of how many dialogs are currently being shown, based on the number of ShowDialog() calls.  Clicking the button multiple times keeps increasing the number of dialogs open (ShowDialog() calls).  Commenting out the indicated line in MainWindow.xaml.cs works around the bug.\n\nMotivating example:\nIn my app the first thing the user does is create a &quot;workspace&quot;.  Creating a workspace involves a number of steps and we show a progress dialog while those steps are being performed.  That progress dialog is dialog #1 from the sample.  Meanwhile, the app also checks for updates in the background during startup.  If an update is found, a separate dialog is shown telling the user about the update.  That is dialog #2.  If the user happens to tell the app to create a workspace and, while creating the workspace, an update is found, this bug is hit.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/51151/wpf-showdialog-never-returns-when-a-dialogs-owner.html\nVSTS ticketId: 428554_\n_These are the original issue comments:_\n\nHenning Dampel on 5/24/2018, 02:15 AM (239 days ago): <p>ShowDialog() also never returns if the dialog's owner is a normal window that closes.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/277","RelatedDescription":"Open issue \"WPF ShowDialog() never returns when a dialog's owner is closed and that owner is another dialog\" (#277)"},{"Id":"400720746","IsPullRequest":true,"CreatedAt":"2019-01-18T13:22:18","Actor":"dotnet-maestro[bot]","Number":"276","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.Windows.Extensions - 4.6.0-preview.19067.6\r\n- System.CodeDom - 4.6.0-preview.19067.6\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19067.6\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19067.6\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19067.6\r\n- System.Security.AccessControl - 4.6.0-preview.19067.6\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19067.6\r\n- System.Security.Permissions - 4.6.0-preview.19067.6\r\n- System.Security.Principal.Windows - 4.6.0-preview.19067.6\r\n- System.Reflection.Emit - 4.6.0-preview.19067.6\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19067.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/276","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#276)"},{"Id":"400716847","IsPullRequest":true,"CreatedAt":"2019-01-18T13:11:00","Actor":"dotnet-maestro[bot]","Number":"275","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19067.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/275","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#275)"},{"Id":"400269294","IsPullRequest":false,"CreatedAt":"2019-01-17T17:16:22","Actor":"pavelovcharov","Number":"273","RawContent":null,"Title":"Reference markup extension is missed","State":"closed","Body":"The System.Windows.Markup.Reference class is missed in NetCore3, although the WPF implementation seems to work as expected\r\n```\r\n[ContentProperty(\"Name\")]\r\npublic class Reference : MarkupExtension {\r\n    public Reference() {\r\n    }\r\n\r\n    public Reference(string name) {\r\n        Name = name;\r\n    }\r\n\r\n    [ConstructorArgument(\"name\")]\r\n    public string Name { get; set; }\r\n\r\n    public override object ProvideValue(IServiceProvider serviceProvider) {\r\n        if(serviceProvider == null)\r\n            throw new ArgumentNullException(nameof(serviceProvider));\r\n        IXamlNameResolver service = serviceProvider.GetService(typeof(IXamlNameResolver)) as IXamlNameResolver;\r\n        if(service == null)\r\n            throw new InvalidOperationException(\"MissingNameResolver\");\r\n        if(string.IsNullOrEmpty(Name))\r\n            throw new InvalidOperationException(\"MustHaveName\");\r\n        object obj = service.Resolve(Name);\r\n        if(obj == null) {\r\n            string[] strArray = new string[1] { Name };\r\n            obj = service.GetFixupToken(strArray, true);\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n```\r\n[ReferenceTest.zip](https://github.com/dotnet/wpf/files/2768688/ReferenceTest.zip)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/273","RelatedDescription":"Closed issue \"Reference markup extension is missed\" (#273)"},{"Id":"400274875","IsPullRequest":true,"CreatedAt":"2019-01-17T13:27:46","Actor":"dotnet-maestro[bot]","Number":"274","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19066.2\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19066.2\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19066.2\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19066.2\r\n- System.Security.AccessControl - 4.6.0-preview.19066.2\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19066.2\r\n- System.Security.Permissions - 4.6.0-preview.19066.2\r\n- System.Security.Principal.Windows - 4.6.0-preview.19066.2\r\n- System.Reflection.Emit - 4.6.0-preview.19066.2\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19066.2\r\n- System.Windows.Extensions - 4.6.0-preview.19066.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/274","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#274)"},{"Id":"400268785","IsPullRequest":true,"CreatedAt":"2019-01-17T13:11:26","Actor":"dotnet-maestro[bot]","Number":"272","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19066.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/272","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#272)"},{"Id":"400147205","IsPullRequest":false,"CreatedAt":"2019-01-17T07:41:32","Actor":"jongleur1983","Number":"271","RawContent":null,"Title":"WPF template used by dotnet cli should include a glob to add auto-dependency between .xaml and .xaml.cs files","State":"open","Body":"I'd be happy to create a PR for this, but couldn't find where the project template is defined:\r\n\r\nIn classic .NET Framework WPF applications the XAML files (.xaml) are dependentUpon their code-behind partials (.xaml.cs).\r\nThis is reflected in the VS solution explorer.\r\n\r\nFor WPF on Core3 this is not yet the case. It would be easy to add a glob that wildcards this dependency by default:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <Compile Update=\"**\\*.xaml.cs\" DependentUpon=\"%(Filename)\" />\r\n</ItemGroup>\r\n```\r\n\r\nIf someone could point me to the repository and/or location where the wpf project template is defined I'd be happy to issue a PR to add that.","Url":"https://github.com/dotnet/wpf/issues/271","RelatedDescription":"Open issue \"WPF template used by dotnet cli should include a glob to add auto-dependency between .xaml and .xaml.cs files\" (#271)"},{"Id":"400001034","IsPullRequest":true,"CreatedAt":"2019-01-16T21:55:18","Actor":"stevenbrix","Number":"270","RawContent":null,"Title":"fixing up some changes that didn't make it in the last pr","State":"closed","Body":"@AdamYoblick made some comments on PR #264 that didn't make it until after the merge","Url":"https://github.com/dotnet/wpf/pull/270","RelatedDescription":"Closed or merged PR \"fixing up some changes that didn't make it in the last pr\" (#270)"},{"Id":"399942868","IsPullRequest":false,"CreatedAt":"2019-01-16T20:47:26","Actor":"danzil","Number":"268","RawContent":null,"Title":"A recent change in XamlObjectReader introduced the use of Linq, which is unnecessary","State":"closed","Body":"* .NET Core Version: 3.0.100-preview-010024\r\n* Windows version: 17763\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n**Problem description:**\r\nA recent change in XamlObjectReader #73 introduced the use of Linq, which is unnecessary and ads extra dll loads.","Url":"https://github.com/dotnet/wpf/issues/268","RelatedDescription":"Closed issue \"A recent change in XamlObjectReader introduced the use of Linq, which is unnecessary\" (#268)"},{"Id":"399944197","IsPullRequest":true,"CreatedAt":"2019-01-16T19:18:34","Actor":"danzil","Number":"269","RawContent":null,"Title":"Revert back to not using Linq, which ads unnecessary dll loads","State":"closed","Body":"This addresses #268 by reverting back to the code that was there before the change.","Url":"https://github.com/dotnet/wpf/pull/269","RelatedDescription":"Closed or merged PR \"Revert back to not using Linq, which ads unnecessary dll loads\" (#269)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-29T05:31:09.4744459Z","RunDurationInMilliseconds":670}