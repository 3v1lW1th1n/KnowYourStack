{"Data":{"GitHub":{"Issues":[{"Id":"471488729","IsPullRequest":true,"CreatedAt":"2019-07-23T05:05:51","Actor":"dotnet-maestro[bot]","Number":"1342","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190722.15\r\n- **Date Produced**: 7/23/2019 4:26 AM\r\n- **Commit**: 59b6719ab1c763c839994e70d58a555dc3554900\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19372.15\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview8.19372.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19372.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19372.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19372.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-10 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1342","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/winforms\" (#1342)"},{"Id":"471483451","IsPullRequest":false,"CreatedAt":"2019-07-23T04:39:46","Actor":"zwcloud","Number":"1341","RawContent":null,"Title":"[Request] Open source C++ projects even if it doen't compile or integrates with C# projects.","State":"open","Body":"I want to **learn**:\r\n* How WPF rendering?\r\n* How WPF layout complex text paragraph?\r\n\r\nAlmost all these underlying implementations are written in native C++ projects, for example, milcore.dll and [Line Services](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationCore/MS/internal/TextFormatting/LineServices.cs).\r\n\r\nTo learn these, one don't need a compile-able vcxproj, only the source code is needed.\r\n\r\nPut these projects in a downloadable zip file is enough, there is no need to add them to this repo.","Url":"https://github.com/dotnet/wpf/issues/1341","RelatedDescription":"Open issue \"[Request] Open source C++ projects even if it doen't compile or integrates with C# projects.\" (#1341)"},{"Id":"471476942","IsPullRequest":false,"CreatedAt":"2019-07-23T04:07:44","Actor":"M1991","Number":"1340","RawContent":null,"Title":"WPF Datagrid column merge and data trim","State":"open","Body":"* .NET Version: v4.7.2 ( Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: windows 10 (1903)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No \r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:** \r\n I am developing a windows form with data grid, which pulls data from a database and binds the data to a data grid (The number of rows changes as per a unique id and 5 fixed columns). The problems are\r\n\r\n1. Bind two columns and display in a single column.\r\n2. Trim the second column contents after a semi-colon (;) and bind both (1st and 2nd data columns) to data grid\r\n3. Get the total of value of all rows for a column and display in a text field (column is a decimal type)\r\n4. Width of the columns get wider in runtime\r\n\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n 1. Unable to bind both the columns, Fields getting overlaped (attached jpg file: DataGrid.jpg)\r\n 2. Trim not supported. Unbale to bind individual rows\r\n\r\n \r\n **Expected behavior:**\r\n1. Merging both columns, trimming the second column after the semicolon (;)\r\n2. Getting the total value of all rows in a column\r\n \r\n **Minimal repro:**\r\n\r\n\r\n![DataGrid](https://user-images.githubusercontent.com/22197822/61681998-82bbf380-ad2d-11e9-81c0-3d67b312eac2.jpg)\r\n\r\n\r\n[DataGrid.txt](https://github.com/dotnet/wpf/files/3420141/DataGrid.txt)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1340","RelatedDescription":"Open issue \"WPF Datagrid column merge and data trim\" (#1340)"},{"Id":"471442030","IsPullRequest":true,"CreatedAt":"2019-07-23T01:39:44","Actor":"vatsan-madhavan","Number":"1339","RawContent":null,"Title":"Suppress warnings generated by native-tools installation.","State":"closed","Body":"See https://github.com/dotnet/arcade/pull/3315","Url":"https://github.com/dotnet/wpf/pull/1339","RelatedDescription":"Closed or merged PR \"Suppress warnings generated by native-tools installation.\" (#1339)"},{"Id":"471441256","IsPullRequest":false,"CreatedAt":"2019-07-23T01:17:03","Actor":"ojhad","Number":"1338","RawContent":null,"Title":"Investigate whether ValueType.Equals() can have issues when Pack=1 is not set","State":"open","Body":"Investigate whether ValueType.Equals() will have problems when `pack=1` is not set for the struct that is mentioned in this comment:\r\nhttps://github.com/dotnet/wpf/pull/1308#discussion_r305087473","Url":"https://github.com/dotnet/wpf/issues/1338","RelatedDescription":"Open issue \"Investigate whether ValueType.Equals() can have issues when Pack=1 is not set\" (#1338)"},{"Id":"471431735","IsPullRequest":true,"CreatedAt":"2019-07-23T01:11:05","Actor":"dotnet-maestro[bot]","Number":"1337","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190722.11\r\n- **Date Produced**: 7/23/2019 12:12 AM\r\n- **Commit**: 258bc68b87a466ff25f370665e3b5075f28e2879\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19372.11\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.DirectoryServices** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Drawing.Common** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.Emit** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.AccessControl** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Permissions** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.Windows.Extensions** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **System.IO.Packaging** -> 4.6.0-preview8.19372.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1337","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1337)"},{"Id":"471426821","IsPullRequest":false,"CreatedAt":"2019-07-23T00:38:58","Actor":"chenyj796","Number":"1336","RawContent":null,"Title":"Window.ShowDialog sometimes blocks several seconds when there is a task frequently update UI ","State":"open","Body":"* .NET Core Version: Preview5\r\n* Windows version: 版本6.1 (内部版本 7601：Service Pack 1)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n I have a Window to display high frequency market data.\r\nI use Dispatcher.InvokeAsync(... , DispatcherPriority.Background) to update the UI.\r\n\r\nSometimes if I click some button to show a dialog window, it will block the whole application with serveral seconds, and after the dialog has shown, everything goes OK.\r\n\r\nOthers such as ContextMenu, ComboBox works fine.\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1336","RelatedDescription":"Open issue \"Window.ShowDialog sometimes blocks several seconds when there is a task frequently update UI \" (#1336)"},{"Id":"471380444","IsPullRequest":false,"CreatedAt":"2019-07-22T23:01:11","Actor":"grubioe","Number":"1335","RawContent":null,"Title":"EditBox doesn't work well standalone","State":"open","Body":"@nick2893 commented on [Tue Jul 16 2019](https://github.com/microsoft/WPF-Samples/issues/95)\n\nI propose to split up EditBox.cs into two halves, first of which works without GridView View requirement as the following.  Second half would inherit the first.\r\n\r\n\r\nSorry, new to GitHub, not sure how this works.\r\n\r\n\r\n \r\n\r\nusing System.Windows.Controls;\r\n\r\nusing System.Windows.Input;\r\n\r\nusing System.Windows;\r\n\r\nusing System.Windows.Documents;\r\n\r\n \r\n\r\nnamespace EditBoxControlLibrary\r\n\r\n{\r\n\r\n    public class EditBoxBase : TextBlock\r\n\r\n    {\r\n\r\n        #region Static Constructor\r\n\r\n \r\n\r\n        static EditBoxBase()\r\n\r\n        {\r\n\r\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(EditBoxBase), new FrameworkPropertyMetadata(typeof(EditBoxBase)));\r\n\r\n        }\r\n\r\n \r\n\r\n        #endregion\r\n\r\n \r\n\r\n \r\n\r\n        #region Public Methods\r\n\r\n \r\n\r\n \r\n\r\n        public EditBoxBase()\r\n\r\n        {\r\n\r\n            this.Loaded += EditBoxBase_Loaded;\r\n\r\n \r\n\r\n            _textBox = new TextBox();\r\n\r\n \r\n\r\n            _textBox.KeyDown += new KeyEventHandler(OnTextBoxKeyDown);\r\n\r\n            _textBox.LostKeyboardFocus += new KeyboardFocusChangedEventHandler(OnTextBoxLostKeyboardFocus);\r\n\r\n        }\r\n\r\n       \r\n\r\n        bool bLoadedFinished = false;//Not sure why EditBoxBase_Loaded fires twice ... 20190711\r\n\r\n        private void EditBoxBase_Loaded(object sender, RoutedEventArgs e)\r\n\r\n        {\r\n\r\n            if (bLoadedFinished) return;\r\n\r\n            bLoadedFinished = true;\r\n\r\n            TextBlock textBlock = this as TextBlock;\r\n\r\n \r\n\r\n            this.MouseEnter += EditBoxBase_MouseEnter;\r\n\r\n            this.MouseLeave += EditBoxBase_MouseLeave;\r\n\r\n            this.MouseUp += EditBoxBase_MouseUp;\r\n\r\n \r\n\r\n            _adorner = new EditBoxBaseAdorner(textBlock, _textBox);\r\n\r\n            AdornerLayer layer = AdornerLayer.GetAdornerLayer(textBlock); // fails on getting adorner if this is in constructor\r\n\r\n            layer.Add(_adorner);\r\n\r\n        }\r\n\r\n \r\n\r\n        #endregion\r\n\r\n \r\n\r\n        #region Protected Methods\r\n\r\n \r\n\r\n        protected void EditBoxBase_MouseEnter(object sender, MouseEventArgs e)\r\n\r\n        {\r\n\r\n            if (!IsEditing)\r\n\r\n            {\r\n\r\n                _canBeEdit = true;\r\n\r\n            }\r\n\r\n        }\r\n\r\n \r\n\r\n        protected void EditBoxBase_MouseLeave(object sender, MouseEventArgs e)\r\n\r\n        {\r\n\r\n            _isMouseWithinScope = false;\r\n\r\n            _canBeEdit = false;\r\n\r\n        }\r\n\r\n \r\n\r\n \r\n\r\n        protected void EditBoxBase_MouseUp(object sender, MouseButtonEventArgs e)\r\n\r\n        {\r\n\r\n            if (e.ChangedButton == MouseButton.Right || e.ChangedButton == MouseButton.Middle)\r\n\r\n                return;\r\n\r\n \r\n\r\n            if (!IsEditing)\r\n\r\n            {\r\n\r\n                if (!e.Handled && (_canBeEdit || _isMouseWithinScope))\r\n\r\n                {\r\n\r\n                    IsEditing = true;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n \r\n\r\n        #endregion\r\n\r\n \r\n\r\n        #region Public Properties\r\n\r\n \r\n\r\n \r\n\r\n        #region IsEditing\r\n\r\n \r\n\r\n \r\n\r\n        public static DependencyProperty IsEditingProperty =\r\n\r\n                DependencyProperty.Register(\r\n\r\n                        \"IsEditing\",\r\n\r\n                        typeof(bool),\r\n\r\n                        typeof(EditBoxBase),\r\n\r\n                        new FrameworkPropertyMetadata(false));\r\n\r\n \r\n\r\n \r\n\r\n        public bool IsEditing\r\n\r\n        {\r\n\r\n            get { return (bool)GetValue(IsEditingProperty); }\r\n\r\n            private set\r\n\r\n            {\r\n\r\n                SetValue(IsEditingProperty, value);\r\n\r\n                _adorner.UpdateVisibilty(value);\r\n\r\n           }\r\n\r\n        }\r\n\r\n \r\n\r\n        #endregion\r\n\r\n \r\n\r\n \r\n\r\n        #endregion\r\n\r\n \r\n\r\n        #region Private Methods\r\n\r\n \r\n\r\n \r\n\r\n        private void OnTextBoxKeyDown(object sender, KeyEventArgs e)\r\n\r\n        {\r\n\r\n            if (IsEditing && (e.Key == Key.Enter || e.Key == Key.F2))\r\n\r\n            {\r\n\r\n                IsEditing = false;\r\n\r\n                _canBeEdit = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n \r\n\r\n        private void OnTextBoxLostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)\r\n\r\n        {\r\n\r\n            IsEditing = false;\r\n\r\n        }\r\n\r\n \r\n\r\n \r\n\r\n        #endregion\r\n\r\n \r\n\r\n        #region private variable\r\n\r\n \r\n\r\n        private EditBoxAdorner _adorner;\r\n\r\n        private FrameworkElement _textBox;\r\n\r\n        private bool _canBeEdit = false;\r\n\r\n        private bool _isMouseWithinScope = false;\r\n\r\n \r\n\r\n        #endregion\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n","Url":"https://github.com/dotnet/wpf/issues/1335","RelatedDescription":"Open issue \"EditBox doesn't work well standalone\" (#1335)"},{"Id":"471374108","IsPullRequest":false,"CreatedAt":"2019-07-22T22:49:01","Actor":"grubioe","Number":"1334","RawContent":null,"Title":"Window issue with two monitors when \"show window contents while dragging\" is disabled","State":"open","Body":"@Kryptos-FR commented on [Thu Nov 10 2016](https://github.com/microsoft/WPF-Samples/issues/37)\n\nHello,\r\n\r\nThe recent DPI support in WPF (starting with .Net 4.6.2) is really nice. It helped us improve a lot our application.\r\n\r\nHowever when moving a window from a monitor to another with a different DPI, the rendering is broken when the system advanced option *show window contents while dragging* is disabled. This issue can be reproduced with the **PerMonitorDPI** samples of this repository.\r\n\r\n![performanceoptions](https://cloud.githubusercontent.com/assets/3006525/20201642/f6d761d4-a7fc-11e6-8ea7-b828de48a9f0.png)\r\n\r\nHere are captures of what is happening:\r\n![100% to 150%](https://cloud.githubusercontent.com/assets/3006525/20202318/b695ced0-a801-11e6-9da9-dbd1bd707575.png)\r\n*moving from a monitor with 100% scale to another monitor with 150% scale*\r\n![150% to 100%](https://cloud.githubusercontent.com/assets/3006525/20202322/c44b54dc-a801-11e6-8fd2-ff74a61828a8.png)\r\n*moving from a monitor with 150% scale to another monitor with 100% scale*\r\n\r\nAlso note that this issue still happen in some cases even if the option *show window contents while dragging* is enabled. When using **Win+Arrows** keyboard shortcut to move the window to another monitor.\r\n\r\nI tried to workaround it by forcing WPF to recalculate the layout or even with p/invoke some native Win32 API but it doesn't fix this.\r\n\r\n\n\n","Url":"https://github.com/dotnet/wpf/issues/1334","RelatedDescription":"Open issue \"Window issue with two monitors when \"show window contents while dragging\" is disabled\" (#1334)"},{"Id":"471347794","IsPullRequest":true,"CreatedAt":"2019-07-22T21:51:02","Actor":"dotnet-maestro[bot]","Number":"1332","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190722.9\r\n- **Date Produced**: 7/22/2019 8:54 PM\r\n- **Commit**: 454f958f20098d82f45192dce8ac9e6a18702758\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19372.9\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1332","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1332)"},{"Id":"471351382","IsPullRequest":false,"CreatedAt":"2019-07-22T21:42:19","Actor":"ojhad","Number":"1333","RawContent":null,"Title":"Remove Test Repo dependency on System.Security.Permissions.dll","State":"open","Body":"After [this effort](https://github.com/dotnet/wpf/issues/241) was completed, we now want to do the same for our internal test repo (test code, infrastructure, etc) in order to be completely rid of System.Security.Permissions.dll.","Url":"https://github.com/dotnet/wpf/issues/1333","RelatedDescription":"Open issue \"Remove Test Repo dependency on System.Security.Permissions.dll\" (#1333)"},{"Id":"471338414","IsPullRequest":true,"CreatedAt":"2019-07-22T21:26:12","Actor":"dotnet-maestro[bot]","Number":"1331","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190722.10\r\n- **Date Produced**: 7/22/2019 8:55 PM\r\n- **Commit**: b274990d8d1f859886b7b1499c784dd13e78a6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19372.10\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1331","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1331)"},{"Id":"471322383","IsPullRequest":true,"CreatedAt":"2019-07-22T21:10:08","Actor":"dotnet-maestro[bot]","Number":"1330","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190722.8\r\n- **Date Produced**: 7/22/2019 8:04 PM\r\n- **Commit**: 384bae4bd9838afd2e382422dec0e9accdffcc3b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19372.8\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.DirectoryServices** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Drawing.Common** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.Emit** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.AccessControl** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Permissions** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.Windows.Extensions** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **System.IO.Packaging** -> 4.6.0-preview8.19371.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview8.19369.4 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19369.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19369.4 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19369.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1330","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1330)"},{"Id":"470835189","IsPullRequest":false,"CreatedAt":"2019-07-21T23:03:58","Actor":"Sammmmm","Number":"1329","RawContent":null,"Title":"ResourceDictionary.ThemeDictionary appears to be missing in WPF core","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nI don't know if this is on the roadmap, but it's a really nice to have feature for styling WPF applications.","Url":"https://github.com/dotnet/wpf/issues/1329","RelatedDescription":"Open issue \"ResourceDictionary.ThemeDictionary appears to be missing in WPF core\" (#1329)"},{"Id":"470816646","IsPullRequest":false,"CreatedAt":"2019-07-21T19:35:29","Actor":"ken30096","Number":"1328","RawContent":null,"Title":"Xaml Islands - 'Windows.UI.Xaml.Markup.XamlParseException'","State":"open","Body":"# Xaml Islands - 'Windows.UI.Xaml.Markup.XamlParseException'\r\nUsing the following Microsoft documentation - \"WindowsXamlHost control for Windows Forms and WPF\", I am attempting to complete the following exercise: [Add a custom UWP control](https://docs.microsoft.com/en-us/windows/communitytoolkit/controls/wpf-winforms/windowsxamlhost#add-a-custom-uwp-control). After carefully following the documentation I get the following error \"Xaml parsing failed\". See below for further details.\r\n\r\n## Error\r\n<code>\r\nException thrown at 0x00007FF9C8BAA839 (KernelBase.dll) in TestWPFApp.exe: WinRT originate error - 0x80004005 : 'Cannot locate resource from 'ms-appx:///UWPClassLibrary/MyPage.xaml'.'.\r\nonecore\\com\\combase\\winrt\\error\\restrictederror.cpp(1014)\\combase.dll!00007FF9C97EB690: (caller: 00007FF9C97E60BC) ReturnHr(1) tid(2f80) 8007007E The specified module could not be found.\r\nException thrown: 'Windows.UI.Xaml.Markup.XamlParseException' in TestWPFApp.exe\r\nThe thread 0x54b4 has exited with code 0 (0x0).\r\n</code>\r\n\r\n## Research\r\nI made certain that I did not accidentally step on the xaml code that I was instructed to insert into MyPage.xaml by removing it and I got the same error. It seems to me WPF is trying to locate a UWP Class Library as a locally defined resource but this is Xaml Island not WPF. If that is indeed the case, how do I do this? Are instructions missing from documentation? This is not just a futile exercise, I need to know how to create a UWP user control for my WPF project. I am using the exercise as a first step. You can repeat the error by following the documentation. I created a video that completes the full exercise up to the point of the error and my attempt to resolve it. Since I know you are pressed for time, as always, the error occurs at minute: 22:14. Click on this link to review the video: [Xaml Islands - Add a custom UWP control](https://www.youtube.com/watch?v=oMH7aPd9xvM)\r\n\r\n>Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes! <br>\r\n\r\n## Sofware used to build the application:\r\n<ul>\r\n  <li>Microsoft Visual Studio Community 2019 Preview (version 16.2.0 Preview 4.0).</li>\r\n  <li>Windows 10 Pro 1903 OS Build 18362.10005</li>\r\n  <li>WPF .Net Framework 4.7.2 using C#</li>\r\n  <li>Windows Application Packaging\r\n    <ul id=\"list2\">\r\n        <li>Target version: Windows 10. version 1903 (10.0; Build 18362)</li>\r\n        <li>Min version:    Windows 10. version 1903 (10.0; Build 18362)</li>\r\n    </ul>\r\n  </li>  \r\n  <li>NuGet Packages\r\n    <ul id=\"list2\">\r\n        <li>Microsoft.Windows.SDK.Contracts (v10.0.18362.2002-preview)</li>\r\n        <li>Microsoft.Toolkit.Wpf.UI.XamlHost (v6.0.0-preview6.4)</li>\r\n    </ul>\r\n  </li>  \r\n</ul>\r\n<br>","Url":"https://github.com/dotnet/wpf/issues/1328","RelatedDescription":"Open issue \"Xaml Islands - 'Windows.UI.Xaml.Markup.XamlParseException'\" (#1328)"},{"Id":"470710716","IsPullRequest":false,"CreatedAt":"2019-07-20T20:16:06","Actor":"vegardlarsen","Number":"1327","RawContent":null,"Title":"MSB4094 when publishing WPF app with PublishReadyToRun and PublishTrimmed","State":"open","Body":"* .NET Core Version: 3.0.100-preview6-012264\r\n* Windows version: Windows 10 version 1903 (OS Build 18362.239)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: N/A\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n \r\nWhen creating a blank WPF app, and setting PublishTrimmed and PublishReadyToRun, you will get a MSB4094 error when publishing the app.\r\n\r\n **Actual behavior:** \r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(281,28): error MSB4094: \"obj\\release\\netcoreapp3.0\\win-x86\\linked\\Microsoft.Win32.Registry.dll;obj\\release\\netcoreapp3.0\\win-x86\\linked\\Microsoft.Win32.Registry.dll\" is an invalid value for the \"CompilationEntry\" parameter of the \"RunReadyToRunCompiler\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [C:\\test\\test.csproj]\r\n```\r\n \r\n **Minimal repro:**\r\n\r\n```\r\ndotnet new wpf --name test\r\n```\r\n\r\nMake the `.csproj` file look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <PublishTrimmed>true</PublishTrimmed>\r\n    <PublishReadyToRun>true</PublishReadyToRun>\r\n    <RuntimeIdentifier>win-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Win32.Registry\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThen try to publish this project using:\r\n\r\n```\r\ndotnet publish -c release\r\n```\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1327","RelatedDescription":"Open issue \"MSB4094 when publishing WPF app with PublishReadyToRun and PublishTrimmed\" (#1327)"},{"Id":"470671593","IsPullRequest":true,"CreatedAt":"2019-07-20T13:13:09","Actor":"dotnet-maestro[bot]","Number":"1326","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190719.3\r\n- **Date Produced**: 7/19/2019 6:33 PM\r\n- **Commit**: 18c660e5b332f68cbe64779797340d9ec60ed17c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview8.19369.3\r\n\r\n[marker]: <> (End:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1326","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1326)"},{"Id":"470667958","IsPullRequest":true,"CreatedAt":"2019-07-20T12:28:36","Actor":"dotnet-maestro[bot]","Number":"1325","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1325","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1325)"},{"Id":"470644227","IsPullRequest":false,"CreatedAt":"2019-07-20T07:04:11","Actor":"ghost1372","Number":"1324","RawContent":null,"Title":"Project Template error in .NetCore 3","State":"open","Body":"* .NET Core Version: 3.0 Preview6\r\n* Windows version: 18362.239\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nHi, I've created a project template for netcore3 that includes a package\r\nI added the package this way:\r\n```\r\n <WizardData>\r\n    <packages repository=\"extension\" repositoryId=\"5949c79d-eb43-4033-8b7b-9349d34512c6\">\r\n      <package id=\"HandyControl\" version=\"2.0.0\" />\r\n    </packages>\r\n  </WizardData>\t\r\n\r\n```\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n Now, when I create a project with this template, I get the error\r\n![Untitled](https://user-images.githubusercontent.com/9213496/61575510-fd90ce80-aae1-11e9-83a7-559a9632d3e5.png)\r\nBut after an error, if I run the project, it will be compiled and run without problems\r\n **Expected behavior:**\r\n Create project without error \r\n","Url":"https://github.com/dotnet/wpf/issues/1324","RelatedDescription":"Open issue \"Project Template error in .NetCore 3\" (#1324)"},{"Id":"470627304","IsPullRequest":false,"CreatedAt":"2019-07-20T02:56:36","Actor":"walterlv","Number":"1323","RawContent":null,"Title":"All WPF applications fail to drag outside of their windows since Windows 10 (1809/1903) such as resizing the window or do drag drop","State":"open","Body":"* .NET Core Version: 3.0 Preview6\r\n* Windows version: 10.0.18362.116 (1903); 10.0.18941.1001 (Insider Preview)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nAll WPF applications fail to drag outside of their windows since Windows 10 (1809/1903) such as resizing the window or do drag drop. I find that most computers don't have such a bug but I also find out several others suffer from this issue.\r\n\r\nI've posted this bug here several months ago:\r\n\r\n- [Why all my WPF applications fail to drag outside of their windows since Windows 10 (1809/1903) such as resizing the window or do drag drop? - Stack Overflow](https://stackoverflow.com/questions/56354510/why-all-my-wpf-applications-fail-to-drag-outside-of-their-windows-since-windows)\r\n\r\nI guessed it was the bug of Windows 10, so I just posted a Windows 10 Feedback via the Feedback app and publish it via StackOverflow. But day after day, I found that more and more people are suffering from this issue. So I think it may be both the bug of WPF and Windows.\r\n\r\nIt first reproduces in the 1903 Insider Preview and after the release of 1903, it still exists.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n![WPF window behavior](https://user-images.githubusercontent.com/9959623/61573084-25c8ff00-aadb-11e9-95c7-e2f4322f2dbc.gif)\r\n \r\n![The same issue of Visual Studio](https://user-images.githubusercontent.com/9959623/61573158-50678780-aadc-11e9-939a-defc7eb60e09.gif)\r\n\r\n **Expected behavior:**\r\n\r\nThe window resizing behaves normal.\r\n \r\n **Minimal repro:**\r\n \r\nI can't find out the reproduction. But If one computer has such a bug, It will not restore back to normal even if the Windows 10 reinstall cleanly.\r\n\r\nI've found that if I remove my nVidia video card hardware, the problem disappears. But I've asked some one others who have the same issue, he even has no external video card.","Url":"https://github.com/dotnet/wpf/issues/1323","RelatedDescription":"Open issue \"All WPF applications fail to drag outside of their windows since Windows 10 (1809/1903) such as resizing the window or do drag drop\" (#1323)"},{"Id":"470599310","IsPullRequest":true,"CreatedAt":"2019-07-19T23:21:10","Actor":"dotnet-maestro[bot]","Number":"1322","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190719.7\r\n- **Date Produced**: 7/19/2019 10:11 PM\r\n- **Commit**: e22814e9e414e22098cf70c6699f2c7dd6c4bba9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19369.7\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1322","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1322)"},{"Id":"470413549","IsPullRequest":true,"CreatedAt":"2019-07-19T16:46:20","Actor":"dotnet-maestro[bot]","Number":"1319","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190719.6\r\n- **Date Produced**: 7/19/2019 3:33 PM\r\n- **Commit**: ac0426561b158522eb8564de2bedd28f28148f8d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19369.6\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1319","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1319)"},{"Id":"470431012","IsPullRequest":false,"CreatedAt":"2019-07-19T16:46:01","Actor":"vsfeedback","Number":"1321","RawContent":null,"Title":"System.Windows.Data.BindingExpressionBase.JoinBindingGroup throws exception","State":"open","Body":"In our code we invoke bg.BindingExpressions.Add(expression)<br><br>('bg' is of type System.Windows.Data.BindingGroup, and 'expression' is of type BindingExpressionBase or a subclass)<br><br>We are finding that this sometimes throws System.InvalidOperationException &quot;The binding expression already belongs to a BindingGroup; ...&quot;<br><br>even though the expression's BindingGroup property is null (we have not added it to this or another BindingGroup already).<br><br>In following BindingGroup's code (.net framework version 4.0.0.0) through .NET Reflector, I observe the following:<br><br>Its Initialize method sets up the BindingExpression's collection to invoke the OnBindingsChanged method when items are added, so this method gets invoked when we call .Add above.<br><br>OnBindingsChanged, when adding an item, invokes JoinBindingGroup.<br><br>JoinBindingGroup has the following code snippet which looks fragile:<br>if (!item.HasValue(Feature.BindingGroup))<br>{<br>   // snipped<br>}<br>else if (item.BindingGroup != bg)<br>{<br>   throw new InvalidOperationException...<br>}<br><br>Here, item.BindingGroup is null, so that doesn't equal bg (which is not null). Why does it &quot;think&quot; that this means it is already added to another BindingGroup? Shouldn't this be:<br>else if (item.BindingGroup != null &amp;&amp; item.BindingGroup != bg) ...?<br><br>Why does item.HasValue(Feature.BindingGroup) evaluate to true, so that it gets to that 'else' statement, when it has not yet been added to a BindingGroup?<br><br>In looking for what sets Feature.BindingGroup, it appears this is done through the internal SetValue method. SetValue(Feature.BindingGroup, ...) is called in these methods within BindingExpressionBase:<br>- JoinBindingGroup - when actually joining it, so that seems fine<br>- RejoinBindingGroup - that seems ok<br>- MarkAsNonGrouped - why?<br><br>MarkAsNonGrouped is called by FindBindingGroup.<br>Why does the attempt to 'find' a binding group apparently mark it is 'having' a binding group?<br>I suspect the internal behavior of this class, or perhaps of something else invoking these methods (not by our code doing this directly) is making JoinBindingGroup fail.<br><br>To work around this I am having to wrap our call to bg.BindingExpressions.Add(expression) in a try/catch block and swallow the exception. This is not a good solution obviously.<br><br>I suspect you will want me to provide source code that leads to this error. However that is not feasible. I believe you need to just do some static code analysis of the BindingExpressionBase class and make it less fragile. In this case we have truly not added the expression to a BindingGroup, yet the JoinBindingGroup method 'thinks' we have and throws an exception because of it.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/430361/systemwindowsdatabindingexpressionbasejoinbindingg.html\nVSTS ticketId: 832961_\n_These are the original issue comments:_\n\nJack Warner on 4/3/2019, 01:22 PM (106 days ago): <p>Is this being looked at?</p><p>And this is odd. I created this thread but it shows that \"$$ANON_USER$$\" created it.</p><p>And, my posting history is gone. It thinks this is only my 3rd post and that I joined very recently.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1321","RelatedDescription":"Open issue \"System.Windows.Data.BindingExpressionBase.JoinBindingGroup throws exception\" (#1321)"},{"Id":"470429514","IsPullRequest":false,"CreatedAt":"2019-07-19T16:43:25","Actor":"vsfeedback","Number":"1320","RawContent":null,"Title":"WPF Window Fails to Redraw Contents in Areas on Win10 with Two Monitors","State":"open","Body":"<p>I am going to post this link here to the original post on stackoverflow:</p><p><a href=\"https://stackoverflow.com/questions/54961745/wpf-window-fails-to-redraw-contents-in-areas-on-win10-with-two-monitors\" target=_blank>https://stackoverflow.com/questions/54961745/wpf-window-fails-to-redraw-contents-in-areas-on-win10-with-two-monitors</a></p><p>Now I will duplicate the above post for those that don't want to link through:</p><p>Okay, first off here is an image representing the 4K screen and 1080p screen with the dead zone. Second, the 4K screen is set to 125% scaling. Third if the 1080p is also set to 125% the bug still occurs. However, if you set the 4K screen back to 100%, then everything works as expected. </p><p></p><p><a href=\"https://i.stack.imgur.com/y11qJ.png%20\" target=_blank>https://i.stack.imgur.com/y11qJ.png </a></p><p></p><p>If the Window is moved via the mouse onto the 1080p it works as expected. However, if you use the Top and Left of the window to move it, then it experiences the issue. </p><p>Basically, the window moves on the second screen via Top and Left but any type of code that tries to manipulate the graphics in the window is simply ignored in the dead zone. This includes but not limited to BackgroundColor, Image, etc. </p><p>I am not sure what is causing this, but it seems when the window is moved via Top and Left, it is not setting the owning display properly when the primary screen is not at 100% scale.</p><p></p><p>\nIf you want code as an example that causes it then:      </p><p></p><pre>public partial class Magnifier : Window\n    {\n        public Magnifier()\n        {\n            InitializeComponent();\n        }\n\n\n        public void Update(D.Bitmap bmp, double x, double y)\n        {\n            Preview.Source = GetSource(bmp);\n            Top = y;\n            Left = x;\n        }\n\n\n        public static BitmapSource GetSource(System.Drawing.Bitmap source)\n        {\n            var rect = new System.Drawing.Rectangle(0, 0, source.Width, source.Height);\n\n\n            var bitmapData = source.LockBits(\n                rect,\n                ImageLockMode.ReadWrite,\n                System.Drawing.Imaging.PixelFormat.Format32bppArgb);\n\n\n            try\n            {\n                var size = (rect.Width * rect.Height) * 4;\n\n\n                return BitmapSource.Create(\n                    source.Width,\n                    source.Height,\n                    source.HorizontalResolution,\n                    source.VerticalResolution,\n                    PixelFormats.Bgra32,\n                    null,\n                    bitmapData.Scan0,\n                    size,\n                    bitmapData.Stride);\n            }\n            finally\n            {\n                source.UnlockBits(bitmapData);\n            }\n        }\n    }\n\n</pre><p></p><p>In the above code, the x and y have already been scaled to the proper DPI before they are passed to the Update method. The window does indeed move to the expected location on both screens. Even though I have a bitmap, I have also tested with just trying to set the BackgroundColor as well. It also fails to update in the dead zone.</p><p></p><p>\nThe window is updated in a DispatchTimer and works as expected everywhere, except the dead zone. </p><p>Video Card: Nvidia 1080 GTX - Latest Drivers </p><p></p><p>I have tested with the following .Net versions: 4.6, 4.7.1, and 4.7.2. </p><p></p><p>Any thoughts or suggestions on this issue? Has anyone else experienced this issue? </p><p></p><p># Edit 1: </p><p>My suspicion is indeed correct, the window is not updating its display owner / capabilities to the secondary screen, if positioned with Top and Left. I placed the window on start up in the dead zone. It did not work. I then grabbed it with the mouse, and the window dpi adjusted and set itself to the secondary display. After that it worked with no issues. However, this really isn't a solution for me, as the window is meant to follow the mouse around.</p><p></p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/475414/wpf-window-fails-to-redraw-contents-in-areas-on-wi.html\nVSTS ticketId: 807159_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/3/2019, 06:52 PM (137 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1320","RelatedDescription":"Open issue \"WPF Window Fails to Redraw Contents in Areas on Win10 with Two Monitors\" (#1320)"},{"Id":"470368642","IsPullRequest":true,"CreatedAt":"2019-07-19T15:16:12","Actor":"dotnet-maestro[bot]","Number":"1318","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190719.5\r\n- **Date Produced**: 7/19/2019 2:16 PM\r\n- **Commit**: b038ebe04f4d0079ed0a5b758a480a8be623fefc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19369.5\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1318","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1318)"},{"Id":"470349216","IsPullRequest":true,"CreatedAt":"2019-07-19T14:46:21","Actor":"dotnet-maestro[bot]","Number":"1317","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190719.4\r\n- **Date Produced**: 7/19/2019 2:03 PM\r\n- **Commit**: 7e91fff7eac60a7ab2cb5d18fb0dc2eb2d249e9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19369.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1317","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1317)"},{"Id":"470304413","IsPullRequest":true,"CreatedAt":"2019-07-19T14:11:41","Actor":"dotnet-maestro[bot]","Number":"1316","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190719.3\r\n- **Date Produced**: 7/19/2019 12:31 PM\r\n- **Commit**: aa97040e3fff07dd8e1e8e3066d920bd5bac0f55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19369.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1316","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1316)"},{"Id":"470230180","IsPullRequest":true,"CreatedAt":"2019-07-19T09:51:01","Actor":"dotnet-maestro[bot]","Number":"1315","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190719.1\r\n- **Date Produced**: 7/19/2019 8:50 AM\r\n- **Commit**: bb120ec186d3688ae65cabc12f6082cbd2baf5a6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19369.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1315","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1315)"},{"Id":"470168238","IsPullRequest":false,"CreatedAt":"2019-07-19T06:53:32","Actor":"vsfeedback","Number":"1314","RawContent":null,"Title":"[WPF] BindingListCollectionView ignores item replace","State":"open","Body":"<p><strong>Disclaimer:</strong> I know that <em>ObservableCollection&lt;T&gt;</em> is the recommended collection type for bindings. Still, if a collection implements both <em>INotifyCollectionChanged</em> and <em>IBindingList</em> interfaces (such as <a href=\"http://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_ComponentModel_ObservableBindingList_1.htm\" target=_blank>ObservableBindingList&lt;T&gt;</a>), then WPF prefers to handle it as a binding list (picks a <em>BindingListCollectionView</em> for it), which has the issues described below.</p><p><strong>Issue Reproduction Steps:</strong></p><ol><li>Bind a <em>DataGrid</em> to a <em>BindingList&lt;T&gt;</em> where <em>T </em>implements <em>INotifyPropertyChanged</em>. You can use <a href=\"https://github.com/koszeggy/KGySoft.ComponentModelDemo\" target=_blank>this demo app</a>. Just select <em>BindingList</em> and <em>ObservableTestObject</em> as list and element types, respectively.</li><li>Replace an element in the bound list. In the linked app press the <em>Item</em> button on the toolbar to do so.</li><li>As a result, the item will be replaced but the controls will not get any notification. By pressing <em>Item</em> again, an error occurs because a non-existing item is tried to be replaced.</li></ol><p><strong>Remark:</strong> If <em>T</em> does <strong>not </strong>implement <em>INotifyPropertyChanged</em> (select <em>PlainTestObject</em> in the app linked above), then replace works; however, since a <em>Reset</em> change type is raised instead of <em>Replace</em> the selection always jumps to the first item.</p><p><strong>Proposed fix:</strong></p><p>After analyzing the <a href=\"https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Data/BindingListCollectionView.cs\" target=_blank>BindingListCollectionView</a> source it seems that the issue can be fixed by a small change in the <a href=\"https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Data/BindingListCollectionView.cs%2c2018\" target=_blank>OnListChanged</a> method:</p><pre>case ListChangedType.ItemChanged:\n    ////// Fix starts here - here ItemChanged refers to a Replace event (indexer set) and not a property change\n    if (args.PropertyDescriptor == null)\n    {\n        item = InternalList[index];\n        var oldItem = _cachedList[index];\n        _cachedList[index] = item;\n        forwardedArgs = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace, item, oldItem, index);\n        break;\n    }\n    ////// Fix ends here - below is the original code where ItemChange refers to a property change\n\n    if (!_itemsRaisePropertyChanged.HasValue)\n    {\n        // check whether individual items raise PropertyChanged events\n        // (DataRowView does)\n        item = InternalList[args.NewIndex];\n        _itemsRaisePropertyChanged = (item is INotifyPropertyChanged);\n    }\n\n    // if items raise PropertyChanged, we can ignore ItemChanged;\n    // otherwise, treat it like a Reset\n    if (!_itemsRaisePropertyChanged.Value)\n    {\n        goto case ListChangedType.Reset;\n    }\n    break;\n</pre><p><strong>Disclaimer:</strong> I could not test it.<br><a href=\"https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Data/BindingListCollectionView.cs%2c2018\" target=_blank></a></p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/651699/wpf-bindinglistcollectionview-ignores-item-replace.html\nVSTS ticketId: 949137_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/19/2019, 02:18 PM (35 min ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1314","RelatedDescription":"Open issue \"[WPF] BindingListCollectionView ignores item replace\" (#1314)"},{"Id":"470139791","IsPullRequest":true,"CreatedAt":"2019-07-19T05:28:26","Actor":"dotnet-maestro[bot]","Number":"1313","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1313","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1313)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-07-23T05:30:54.637455Z","RunDurationInMilliseconds":928}