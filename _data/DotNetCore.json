{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7046068285","Type":"PullRequestEvent","CreatedAt":"2018-01-02T04:17:21","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15680","RelatedDescription":"Opened pull request \"Use Span to drop byte[1] allocations\" (#15680) at dotnet/coreclr","RelatedBody":""},{"Id":"7045902467","Type":"PullRequestEvent","CreatedAt":"2018-01-02T02:24:44","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13794","RelatedDescription":"Merged pull request \"Encoding: Don't alloc for zero length arrays\" (#13794) at dotnet/coreclr","RelatedBody":"Encountered during https://github.com/dotnet/corefx/pull/23727\r\n\r\nIf a zero length input array is passed in (for example just to flush the encoding buffer); then the encode functions will allocate a 1 byte/char array so the fixed statement doesn't throw an out of bounds exception."},{"Id":"7045901535","Type":"PullRequestEvent","CreatedAt":"2018-01-02T02:24:04","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15676","RelatedDescription":"Merged pull request \"Remove some unnecessary boxing \" (#15676) at dotnet/coreclr","RelatedBody":"Remove 2 unnecessary uses of `IntPtr.Equals(object)` and an unnecessary cast to `IDictionaryEnumerator`."},{"Id":"7045894058","Type":"IssuesEvent","CreatedAt":"2018-01-02T02:18:44","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15679","RelatedDescription":"Closed issue \"BadImageFormatException with Empty `params void *[]`\" (#15679) at dotnet/coreclr","RelatedBody":"When calling a method with a `params void *[]` in its signature and leaving that parameter blank (so it should be the same as `new void *[0]`), the runtime throws a `System.BadImageFormatException`.\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace Bug {\r\n    unsafe class Program {\r\n        static void MyMethod(params void *[]args) {\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n            MyMethod();\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\n$ dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\n\r\nHowever, if it is changed to `MyMethod(null);` or `MyMethod(new void *[0]);`, then it works and does not throw the exception.\r\n\r\n```\r\n$ dotnet --version\r\n2.1.3\r\n$ uname -a\r\nLinux zach-ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nAlso, it does not work with the docker container `microsoft/dotnet:latest` (`3a346648c95a` at the time).\r\n```\r\n$ docker run --rm -it microsoft/dotnet\r\nroot@0dc51089b44c:/# mkdir code\r\nroot@0dc51089b44c:/# cd code\r\nroot@0dc51089b44c:/code# cat <<EOF > Program.cs\r\n> using System;\r\n> \r\n> namespace Bug {\r\n>     unsafe class Program {\r\n>         static void MyMethod(params void *[]args) {\r\n>         }\r\n> \r\n>         static void Main(string[] args) {\r\n>             MyMethod();\r\n>         }\r\n>     }\r\n> }\r\n> EOF\r\nroot@0dc51089b44c:/code# cat <<EOF > code.csproj \r\n> <Project Sdk=\"Microsoft.NET.Sdk\">\r\n>     <PropertyGroup>\r\n>         <OutputType>Exe</OutputType>\r\n>         <TargetFramework>netcoreapp1.1.2</TargetFramework>\r\n>         <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n>     </PropertyGroup>\r\n> </Project>\r\n> EOF\r\nroot@0dc51089b44c:/code# dotnet restore\r\n  Restoring packages for /code/code.csproj...\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.props.\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: /code/obj/project.assets.json\r\n  Restore completed in 953.3 ms for /code/code.csproj.\r\n  \r\n  NuGet Config files used:\r\n      /root/.nuget/NuGet/NuGet.Config\r\n  \r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\nroot@0dc51089b44c:/code# dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\nI had to use 1.1.2 because that was the latest version the docker container had installed.  I used 2.0 in my first test."},{"Id":"7045372420","Type":"IssuesEvent","CreatedAt":"2018-01-01T18:48:22","Actor":"zachdeibert","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15679","RelatedDescription":"Opened issue \"BadImageFormatException with Empty `params void *[]`\" (#15679) at dotnet/coreclr","RelatedBody":"When calling a method with a `params void *[]` in its signature and leaving that parameter blank (so it should be the same as `new void *[0]`), the runtime throws a `System.BadImageFormatException`.\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace Bug {\r\n    unsafe class Program {\r\n        static void MyMethod(params void *[]args) {\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n            MyMethod();\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\n$ dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\n\r\nHowever, if it is changed to `MyMethod(null);` or `MyMethod(new void *[0]);`, then it works and does not throw the exception.\r\n\r\n```\r\n$ dotnet --version\r\n2.1.3\r\n$ uname -a\r\nLinux zach-ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nAlso, it does not work with the docker container `microsoft/dotnet:latest` (`3a346648c95a` at the time).\r\n```\r\n$ docker run --rm -it microsoft/dotnet\r\nroot@0dc51089b44c:/# mkdir code\r\nroot@0dc51089b44c:/# cd code\r\nroot@0dc51089b44c:/code# cat <<EOF > Program.cs\r\n> using System;\r\n> \r\n> namespace Bug {\r\n>     unsafe class Program {\r\n>         static void MyMethod(params void *[]args) {\r\n>         }\r\n> \r\n>         static void Main(string[] args) {\r\n>             MyMethod();\r\n>         }\r\n>     }\r\n> }\r\n> EOF\r\nroot@0dc51089b44c:/code# cat <<EOF > code.csproj \r\n> <Project Sdk=\"Microsoft.NET.Sdk\">\r\n>     <PropertyGroup>\r\n>         <OutputType>Exe</OutputType>\r\n>         <TargetFramework>netcoreapp1.1.2</TargetFramework>\r\n>         <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n>     </PropertyGroup>\r\n> </Project>\r\n> EOF\r\nroot@0dc51089b44c:/code# dotnet restore\r\n  Restoring packages for /code/code.csproj...\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.props.\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: /code/obj/project.assets.json\r\n  Restore completed in 953.3 ms for /code/code.csproj.\r\n  \r\n  NuGet Config files used:\r\n      /root/.nuget/NuGet/NuGet.Config\r\n  \r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\nroot@0dc51089b44c:/code# dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\nI had to use 1.1.2 because that was the latest version the docker container had installed.  I used 2.0 in my first test."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7045769894","Type":"IssuesEvent","CreatedAt":"2018-01-02T00:36:28","Actor":"srikanthramamurthy","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8309","RelatedDescription":"Opened issue \"visual studio 2017 .NET SDK does not support targeting .NET Core 2.0\" (#8309) at dotnet/cli","RelatedBody":" have tried installing both professional and community version of visual studio 2017 v 15.5.2\r\n\r\nand installed .net core Runtime 2.0.3 and .net core SDK 2.1.2.\r\n\r\nWhen I open a new web application I get an error saying\r\n\r\n\"the sdk 'microsoft.net.sdk.web' specified could not be found\"\r\n\r\nWhen I try to build an existing project I get an error\r\n\r\n\"the current .NET SDK does not support targeting .NET Core 2.0. Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.0.\"\r\n\r\nI don't see \".net core 2.0\" in my target framework\r\n\r\nI don't have global.json file in my computer\r\n\r\nWhen I try dotnet --info, I get this\r\n\r\n.NET Command Line Tools (2.1.2)\r\nProduct Information:\r\n\r\nVersion: 2.1.2\r\n\r\nCommit SHA-1 hash: 5695315371\r\n\r\nRuntime Environment:\r\n\r\nOS Name: Windows\r\n\r\nOS Version: 10.0.10586\r\n\r\nOS Platform: Windows\r\n\r\nRID: win10-x64\r\n\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\nVersion : 2.0.3\r\n\r\nBuild : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7044722312","Type":"PullRequestEvent","CreatedAt":"2018-01-01T08:00:37","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8308","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8308) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180101-080034\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180101-080034 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7042910541","Type":"IssuesEvent","CreatedAt":"2017-12-30T20:01:34","Actor":"tfsjohan","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8307","RelatedDescription":"Opened issue \"dotnet build resx error\" (#8307) at dotnet/cli","RelatedBody":"When building a project from the command line on OSX using the dotnet build tools I get this error:\r\n\r\n`error MSB3103: Invalid Resx file. Length cannot be less than zero.`\r\n\r\nThe resx files are not empty and they do work when building on Visual Studio 2017 on Windows. I can also build on Mac using Mono version of MSBuild without errors, but then the resources doesn't get build.\r\n\r\n## Expected  behavior\r\nSuccessful build and compiled resources.\r\n\r\n## Actual behavior\r\nError MSB3103: Invalid Resx file.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n\r\n\r\n\r\n\r\n"},{"Id":"7042706061","Type":"IssuesEvent","CreatedAt":"2017-12-30T17:00:26","Actor":"eduherminio","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8304","RelatedDescription":"Closed issue \"Tasks named \"AfterBuild\" & \"AfterPublish\" are apparently ignored\" (#8304) at dotnet/cli","RelatedBody":"Same behaviour observed when compiling with either VS or cli.\r\n\r\n## Steps to reproduce\r\n1. Create directory with these two files:\r\n\r\n- Trial.csproj file\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"AfterBuild\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 1\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterBuilds\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 2\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterPublish\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 3\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n  <Target Name=\"AfterPublishs\" AfterTargets=\"Build\">\r\n    <Message Text=\"Hi World 4\" Importance=\"high\"></Message>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n- Program.cs file (any)\r\n\r\n```\r\nnamespace Bug\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. `dotnet build`\r\n\r\n\r\n## Expected  behavior\r\n\r\nHi World 1\r\nHi World 2\r\nHi World 3\r\nHi World 4\r\n\r\n## Actual behavior\r\n\r\nHi World 2\r\nHi World 4\r\n\r\n## Environment data\r\n```\r\nHerramientas de la línea de comandos .NET (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7042271379","Type":"IssuesEvent","CreatedAt":"2017-12-30T09:54:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/615","RelatedDescription":"Opened issue \"Missing binary/namespace from NuGet package in .NET Standard 2.0 library\" (#615) at dotnet/standard","RelatedBody":"Hello, I'm writing a .NET Standard 2.0 library and I'm having issues with a NuGet package I'd like to use (https://www.nuget.org/packages/Alea/) which I think is only supported for PCL libraries right now, and was wondering if there was a workaround available.\r\n\r\nI can install the package just fine, but its assemblies aren't visible in the drop-down list of the dependencies, and I don't have any of the namespaces in the project:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/34453242-1c63ff6e-ed4f-11e7-9bc0-dd75319bff04.png)\r\n\r\nI tried to manually link the net45 binaries by modifying the .csproj file for the library, like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"Alea\">\r\n        <HintPath>..\\..\\..\\..\\.nugget.packages\\alea\\3.0.4\\lib\\net45\\alea.dll</HintPath>\r\n    </Reference>\r\n    <!-- Same for Alea.Parallel -->\r\n</ItemGroup>```\r\n\r\nAnd this actually **works perfectly fine** - I can use the library both from a .NET Core 2.0 application, and if I use it from a .NET Framework application (where those GPU libraries are originally supposed to work), I can also use the code from that package just fine.\r\n\r\nThe problem is that this workaround is only looking for the net45 binaries, and I'm not even sure they'd get installed in that path automatically regardless of the PC building the solution.\r\n\r\nMy question is:\r\n\r\n> Since the library itself works just fine in a .NET Standard 2.0 library, is there a way to (manually) make it so that these missing binaries are correctly linked/referenced and added to the project, so that their namespaces are available when coding in the project?\r\n\r\nSee the original Stack Overflow question here: https://stackoverflow.com/questions/48030077/alea-gpu-on-net-standard-2-0-will-this-workaround-work\r\n\r\nThank you for your help!\r\n"},{"Id":"7036730892","Type":"IssuesEvent","CreatedAt":"2017-12-28T10:30:41","Actor":"Styxxy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/614","RelatedDescription":"Closed issue \"DocumentationFile outputs both to project root as in output folder (when only specifying filename)\" (#614) at dotnet/standard","RelatedBody":"When specifying only a filename in the DocumentationFile in the csproj, the generated xml documentation file will be outputted to both the root of the project as well as in the output path.\r\n\r\nGiven following csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net47;netstandard2.0</TargetFrameworks>\r\n    <DocumentationFile>my_library.xml</DocumentationFile>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nAnd we have one class in our class libary:\r\n```cs\r\nnamespace my_library\r\n{\r\n    /// <summary>\r\n    /// Test\r\n    /// </summary>\r\n    public class Test\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThe documentation file is generated in following directories:\r\n\r\n- project-root\r\n- project-root/bin/$(Configuration)/net47\r\n- project-root/bin/$(Configuration)/netstandard2.0\r\n\r\nIn the _old_ csproj format, the documentation file would be only outputted to the output folder."},{"Id":"7036717658","Type":"IssuesEvent","CreatedAt":"2017-12-28T10:26:06","Actor":"Styxxy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/614","RelatedDescription":"Opened issue \"DocumentationFile outputs both to project root as in output folder (when only specifying filename)\" (#614) at dotnet/standard","RelatedBody":"When specifying only a filename in the DocumentationFile in the csproj, the generated xml documentation file will be outputted to both the root of the project as well as in the output path.\r\n\r\nGiven following csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net47;netstandard2.0</TargetFrameworks>\r\n    <DocumentationFile>my_library.xml</DocumentationFile>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nAnd we have one class in our class libary:\r\n```cs\r\nnamespace my_library\r\n{\r\n    /// <summary>\r\n    /// Test\r\n    /// </summary>\r\n    public class Test\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThe documentation file is generated in following directories:\r\n\r\n- project-root\r\n- project-root/bin/$(Configuration)/net47\r\n- project-root/bin/$(Configuration)/netstandard2.0\r\n\r\nIn the _old_ csproj format, the documentation file would be only outputted to the output folder."},{"Id":"7036709386","Type":"IssuesEvent","CreatedAt":"2017-12-28T10:23:14","Actor":"0xF6","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/612","RelatedDescription":"Closed issue \"Merge Library?\" (#612) at dotnet/standard","RelatedBody":"Now to merge.NET Standard libraries into one library?"},{"Id":"7035640765","Type":"IssuesEvent","CreatedAt":"2017-12-28T01:54:35","Actor":"rexcfnghk","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/613","RelatedDescription":"Opened issue \"Issue with referencing a .NET Standard 2.0 project with an classic ASP.NET project targeting .NET Framework 4.6.1\" (#613) at dotnet/standard","RelatedBody":"I refer to my original issue submitted to Autofac [here](https://github.com/autofac/Autofac.WebApi/issues/32). I originally thought it was an Autofac issue but turns out it is not as I can reproduce it without Autofac.\r\n\r\n# Summary\r\n`MissingMethodException` is thrown when resolving for a component through a delegate that returns a type defined in a .NET Standard 2.0 library, under the context of an classic ASP.NET Web API project.\r\n\r\n# Steps to reproduce\r\n1. Create two projects as follows\r\n    - A .NET Standard 2.0 library\r\n    - A classic ASP.NET Web API project targeting .NET Framework 4.6.1\r\n2. Define an interface and an implementing class pair in the .NET standard library as follows:\r\n```c#\r\npublic interface IFoo { void DoSomething(); }\r\n\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo(HttpClient httpClient) => _httpClient = httpClient;\r\n\r\n    public void DoSomething() { /* No-op */ }\r\n}\r\n```\r\n3. Reference the .NET Standard library from the ASP.NET Web API project\r\n4. Implement a dummy controller that takes `IFoo` as a constructor parameter, like:\r\n```c#\r\npublic class DummyController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public DummyController() => _foo = new Foo(new HttpClient);\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\nNote that I have a parameterless contructor for `DummyController`.\r\n6. Run the ASP.NET Web API application and visit `/api/dummy/test`.\r\n\r\n# Expected behaviour\r\n`\"a\"` is returned.\r\n\r\n# Actual behaviour\r\n`Autofac.Core.DependencyResolutionException` is thrown.\r\n\r\nStack trace:\r\n<pre>\r\nAn error has occurred.An error occurred when trying to create a controller of type 'DummyController'. Make sure that the controller has a parameterless public constructor.System.InvalidOperationException   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(HttpRequestMessage request)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()An error has occurred.Method not found: 'Void AutofacNetStandara.Library.Foo..ctor(System.Net.Http.HttpClient)'.System.MissingMethodException   at AutofacNetStandard.Web.Controllers.DummyController..ctor()\r\n   at lambda_method(Closure )\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n</pre>\r\n---------\r\n# Additional things I have tried\r\n1. Reference the same .NET Standard project from a .NET Framework 4.6.1 **Console** project, with the `Main` method initailizing `Foo`:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var foo = new Foo(new HttpClient());\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\nNo runtime exceptions are thrown and `foo` variable is initialised correctly.\r\n2. Moving the initialising of `Foo._httpClient` to the default constructor of `Foo` and call the empty constructor from the web project instead, like:\r\n```c#\r\n// In the .NET Standard 2.0 library\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo() => _httpClient = new HttpClient();\r\n\r\n    public void DoSomething() { }\r\n}\r\n\r\n// In the ASP.NET project, targeting .NET 4.6.1\r\npublic class ValuesController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public ValuesController() => _foo = new Foo();\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n`\"a\"` is returned as expected when visiting the route `/api/values/test`.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7045815095","Type":"PullRequestEvent","CreatedAt":"2018-01-02T01:17:55","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26111","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26102-01, preview1-26101-02, respectively (master)\" (#26111) at dotnet/corefx","RelatedBody":""},{"Id":"7045405281","Type":"PullRequestEvent","CreatedAt":"2018-01-01T19:15:25","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26109","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26101-02, preview1-26101-02, preview1-26031-02, respectively (master)\" (#26109) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7045894023","Type":"IssuesEvent","CreatedAt":"2018-01-02T02:18:42","Actor":"jkotas","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23991","RelatedDescription":"Opened issue \"BadImageFormatException with Empty `params void *[]`\" (#23991) at dotnet/roslyn","RelatedBody":"_From @zachdeibert on January 1, 2018 18:48_\n\nWhen calling a method with a `params void *[]` in its signature and leaving that parameter blank (so it should be the same as `new void *[0]`), the runtime throws a `System.BadImageFormatException`.\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace Bug {\r\n    unsafe class Program {\r\n        static void MyMethod(params void *[]args) {\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n            MyMethod();\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\n$ dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\n\r\nHowever, if it is changed to `MyMethod(null);` or `MyMethod(new void *[0]);`, then it works and does not throw the exception.\r\n\r\n```\r\n$ dotnet --version\r\n2.1.3\r\n$ uname -a\r\nLinux zach-ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nAlso, it does not work with the docker container `microsoft/dotnet:latest` (`3a346648c95a` at the time).\r\n```\r\n$ docker run --rm -it microsoft/dotnet\r\nroot@0dc51089b44c:/# mkdir code\r\nroot@0dc51089b44c:/# cd code\r\nroot@0dc51089b44c:/code# cat <<EOF > Program.cs\r\n> using System;\r\n> \r\n> namespace Bug {\r\n>     unsafe class Program {\r\n>         static void MyMethod(params void *[]args) {\r\n>         }\r\n> \r\n>         static void Main(string[] args) {\r\n>             MyMethod();\r\n>         }\r\n>     }\r\n> }\r\n> EOF\r\nroot@0dc51089b44c:/code# cat <<EOF > code.csproj \r\n> <Project Sdk=\"Microsoft.NET.Sdk\">\r\n>     <PropertyGroup>\r\n>         <OutputType>Exe</OutputType>\r\n>         <TargetFramework>netcoreapp1.1.2</TargetFramework>\r\n>         <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n>     </PropertyGroup>\r\n> </Project>\r\n> EOF\r\nroot@0dc51089b44c:/code# dotnet restore\r\n  Restoring packages for /code/code.csproj...\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.props.\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: /code/obj/project.assets.json\r\n  Restore completed in 953.3 ms for /code/code.csproj.\r\n  \r\n  NuGet Config files used:\r\n      /root/.nuget/NuGet/NuGet.Config\r\n  \r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\nroot@0dc51089b44c:/code# dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\nI had to use 1.1.2 because that was the latest version the docker container had installed.  I used 2.0 in my first test.\n\n_Copied from original issue: dotnet/coreclr#15679_"},{"Id":"7045887165","Type":"IssuesEvent","CreatedAt":"2018-01-02T02:14:00","Actor":"Mr-Byte","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23990","RelatedDescription":"Opened issue \"Compiler crashes with error -2146232797 when attempting to call non-static method as static method on ref struct.\" (#23990) at dotnet/roslyn","RelatedBody":"**Version Used**: C# 7.2 (Roslyn 2.4.0)\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following code causes the compiler to crash when compiling:\r\n```\r\nusing System;\r\n\r\nnamespace Explode\r\n{\r\n    ref struct Test\r\n    {\r\n        public Test Create() => default;\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var x = Test.Create();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nShould produce compiler error `Program.cs(14,21): error CS0120: An object reference is required for the non-static field, method, or property 'Test.Create()'`\r\n\r\n**Actual Behavior**:\r\nCompiler crashes with error C:\\Program Files\\dotnet\\sdk\\2.1.2\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"csc.dll\" exited with code -2146232797."},{"Id":"7045425116","Type":"PullRequestEvent","CreatedAt":"2018-01-01T19:32:09","Actor":"shaggygi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23989","RelatedDescription":"Opened pull request \"Updated summaries\" (#23989) at dotnet/roslyn","RelatedBody":"<details><summary>Updated wording in summaries.</summary>\r\n</details>\r\n"},{"Id":"7045157098","Type":"PullRequestEvent","CreatedAt":"2018-01-01T15:33:41","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23562","RelatedDescription":"Closed pull request \"Test dev15.6-preview1-vs-deps CI build\" (#23562) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7046034263","Type":"PullRequestEvent","CreatedAt":"2018-01-02T03:52:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5178","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5178) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7045939191","Type":"PullRequestEvent","CreatedAt":"2018-01-02T02:50:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5179","RelatedDescription":"Opened pull request \"Cleanup and simplify makefiles\" (#5179) at dotnet/corert","RelatedBody":"- Delete redundant or obsolete parts in makefiles\r\n- Update macOS prerequisites"},{"Id":"7045907474","Type":"PullRequestEvent","CreatedAt":"2018-01-02T02:28:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5178","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5178) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7045089616","Type":"IssuesEvent","CreatedAt":"2018-01-01T14:34:23","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5177","RelatedDescription":"Opened issue \"How to modernize ObjectWriter package?\" (#5177) at dotnet/corert","RelatedBody":"In current master, ObjectWriter is the only project utilizing old-style RIDs (`toolchain.{targetOS_name}.{targetOS_version}-{targetOS_arch}`) and relying on [nuspec files](https://github.com/dotnet/corert/tree/641b32d/src/Native/ObjWriter/.nuget).\r\n\r\nIn order to bring it to new platforms such as Alpine Linux (#4552) and CentOS (#602), or new architectures such as aarch_32 (#3776) and x86_32 (#4589), it requires us to add file entries either with:\r\n\r\n* old RID scheme `toolchain*`\r\n* or modernize the ObjectWriter package and wire it up with `build.{cmd,sh}` in such a way that it will automajically light up the build for newly introduced RID in CoreRT repo.\r\n\r\nIMO, modernizing the package is a better solution mostly for coherency.\r\n\r\nIf the code owners agree to upgrade this package to new packaging system, would it make sense to:\r\n\r\n* create a separate entry under `:/pkg` dir?\r\n  * or perhaps include it as a dependency on existing `:/pkg/Microsoft.DotNet.ILCompiler/Microsoft.DotNet.ILCompiler.{builds,pkgproj}`?\r\n* anything else to consider before removing `.nuspec` files?\r\n\r\n/cc @jkotas, @A-And"},{"Id":"7044487248","Type":"IssuesEvent","CreatedAt":"2018-01-01T02:12:01","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5176","RelatedDescription":"Opened issue \"Align shadow stack\" (#5176) at dotnet/corert","RelatedBody":"The WebAssembly shadow stack currently is only 1-byte aligned. However, parts of the runtime may require alignment and memory operations would likely be more efficient if types were aligned (that is: 3+ byte types start at a multiple of 4, 2 byte types start at a multiple of 2).\r\n\r\nThe methods that would need to handle this would likely be ```ILImporter.GetTotalLocalOffset```, ```ILImporter.GetTotalRealLocalOffset``` ```ILImporter.GetTotalParameterOffset```, ```ILImporter.GetArgSizeAndOffsetAtIndex```, ```ILImporter.GetLocalSizeAndOffsetAtIndex```,  ```ILImporter.GetSpillSizeAndOffsetAtIndex```, and ```ILImporter.HandleCall``` (and any other usages of ```GetElementSize()``` with the shadow stack I missed)."},{"Id":"7043999804","Type":"PullRequestEvent","CreatedAt":"2017-12-31T16:12:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5166","RelatedDescription":"Merged pull request \"Set cleanOptions to 3 so that output directory is cleaned up\" (#5166) at dotnet/corert","RelatedBody":""},{"Id":"7043829704","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:36:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5175","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5175) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7043828793","Type":"PullRequestEvent","CreatedAt":"2017-12-31T13:35:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5175","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5175) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7045821367","Type":"IssuesEvent","CreatedAt":"2018-01-02T01:23:00","Actor":"matkoch","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1836","RelatedDescription":"Opened issue \"Value parsing\" (#1836) at dotnet/sdk","RelatedBody":"The invocation:\r\n\r\n```\r\nC:\\xxx\\dotnet.exe publish C:\\code\\xxx.csproj --configuration Debug --framework netstandard2.0 --force --no-dependencies --self-contained /p:AssemblyVersion=0.1.0.0 /p:FileVersion=0.1.436 /p:InformationalVersion=0.1.436+Branch.master.Sha.45bedb36a75756fad\r\n```\r\n\r\nFails with:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(130,23): error MSB4030: \"/p:AssemblyVersion=0.1.0.0\" is an invalid value for the \"IsSelfContained\" parameter of the \"GenerateDepsFile\" task. The \"IsSelfContained\" parameter is of type \"System.Boolean\".\r\n\r\nWhen I change the framework to `net461`, everything works fine. Seems that parsing of additional msbuild properties is not working properly."},{"Id":"7045224746","Type":"IssuesEvent","CreatedAt":"2018-01-01T16:32:37","Actor":"kasper3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1835","RelatedDescription":"Opened issue \"Allow all configProperties in csproj\" (#1835) at dotnet/sdk","RelatedBody":"runtimeOptions->configProperties are allowed in csproj: https://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj#runtimeoptions\r\n\r\nThere is a new option introduced for invariant globalization:\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md#enabling-the-invariant-mode\r\n\r\nAllowing this to be set in proj files as `<InvariantGlobalization>true</InvariantGlobalization>` will make it consistent with rest of the set.\r\n\r\nFor such future properties and if it is safe, can there be an automatic key pattern mapping that will transform any `<namespace>.<type>.<feature>.<property>` in runtimeconfig.json under configProperties to `<feature><property><type>` and `<namespace>.<type>.<feature>` to `<feature><type>` in camel-casing in project files?"},{"Id":"7044197681","Type":"IssuesEvent","CreatedAt":"2017-12-31T19:37:39","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1833","RelatedDescription":"Closed issue \"Invalid TrimEnd function usage in Microsoft.NET.TargetFrameworkInference.targets#L51\" (#1833) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/7fc8f64b89f5a69bb8043bae814b314b6ce6841f/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.TargetFrameworkInference.targets#L51\r\n\r\n`$(TargetFramework.TrimEnd('.0123456789'))`\r\n\r\nMSBuild Expander doesn't like this TrimEnd"},{"Id":"7043001406","Type":"IssuesEvent","CreatedAt":"2017-12-30T21:27:00","Actor":"darrensteadman","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1679","RelatedDescription":"Reopened issue \"Workflow designer fails to load when referencing netstandard 2.0\" (#1679) at dotnet/sdk","RelatedBody":"I previously reported issue #1522 when I was having problems getting workflows to compile when referencing netstandard 2.0. The work around documented solved that problem for me however I've now gone to modify some of the workflows in my project and when I try to load the designer I get the following.\r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)\r\n   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()\r\n   at System.Reflection.RuntimeMethodInfo.GetParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParameters()\r\n   at System.Xaml.Schema.TypeReflector.GetNonIndexerProperty(String name)\r\n   at System.Xaml.Schema.TypeReflector.LookupProperty(String name)\r\n   at System.Xaml.XamlType.LookupMember(String name, Boolean skipReadOnlyCheck)\r\n   at System.Xaml.XamlType.GetMember(String name)\r\n   at MS.Internal.Xaml.XamlContext.GetDottedProperty(XamlType tagType, String tagNamespace, XamlPropertyName propName, Boolean tagIsRoot)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadPropertyElement(XamlPropertyName name, XamlType tagType, String tagNamespace, Boolean isEmptyTag)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadElement()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ProcessCurrentXmlNode()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.DoXmlRead()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<Parse>d__4.MoveNext()\r\n   at MS.Internal.Xaml.NodeStreamSorter.MoveNext()\r\n   at System.Xaml.XamlXmlReader.Read()\r\n   at System.Activities.Debugger.XamlDebuggerXmlReader.Read()\r\n   at System.Activities.XamlIntegration.DynamicActivityXamlReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.StripViewStateElement(XamlReader inputReader, Dictionary`2& viewStateInfo, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.ConvertViewStateToAttachedProperties(XamlReader inputReader, ViewStateIdManager idManager, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, DeserializationMode mode, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at System.Activities.Presentation.WorkflowDesigner.Load()\r\n\r\nWRN: Assembly binding logging is turned OFF.\r\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\nNote: There is some performance penalty associated with assembly bind failure logging.\r\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n\r\nHas this been fixed with the PRs to fix my original bug? Does anyone have a work around I could use for the moment to get myself going again?"},{"Id":"7042650111","Type":"IssuesEvent","CreatedAt":"2017-12-30T16:11:11","Actor":"orloffm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1834","RelatedDescription":"Opened issue \"Cannot publish core console app + core app library tests\" (#1834) at dotnet/sdk","RelatedBody":"The solution is here: https://github.com/orloffm/failingpublish\r\n\r\nThe first project is a `netcoreapp2.0` `exe`, the second is a test `netcoreapp2.0` project for it. The solution `dotnet build`s, but when I do\r\n\r\n    dotnet publish -c Release --self-contained -r win-x64\r\n\r\nI get the following:\r\n\r\n    Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n      Restore completed in 43.37 ms for C:\\dev\\failing_build\\a\\a.csproj.\r\n      Restore completed in 75.49 ms for C:\\dev\\failing_build\\a.tests\\a.tests.csproj.\r\n    C:\\Program Files\\dotnet\\sdk\\2.1.3\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.RuntimeIdentifierInference.targets(116,5): error : It is not supported to build or publish a self-contained application without specifying a RuntimeIdentifier.  Please either specify a RuntimeIdentifier or set SelfContained to false. [C:\\dev\\failing_build\\a\\a.csproj]\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\a.dll\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\publish\\\r\n\r\nIf I remove the test project from the solution, it works fine:\r\n\r\n    Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n      Restore completed in 43.62 ms for C:\\dev\\failing_build\\a\\a.csproj.\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\a.dll\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\publish\\\r\n\r\nI expect it to work, as this is almost a copy of a https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test, but with the main project switched to `netcoreapp2.0`."},{"Id":"7039445938","Type":"IssuesEvent","CreatedAt":"2017-12-29T06:42:10","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1833","RelatedDescription":"Opened issue \"Invalid TrimEnd function usage in Microsoft.NET.TargetFrameworkInference.targets#L51\" (#1833) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/7fc8f64b89f5a69bb8043bae814b314b6ce6841f/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.TargetFrameworkInference.targets#L51\r\n\r\n`$(TargetFramework.TrimEnd('.0123456789'))`\r\n\r\nMSBuild Expander doesn't like this TrimEnd"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2018-01-02T05:30:20.7349221Z","RunDurationInMilliseconds":7406}