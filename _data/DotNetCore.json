{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null},{"Title":".NET Core is the Future of .NET ","PublishedOn":"2019-05-06T22:22:54+00:00","CommentsCount":81,"FacebookCount":0,"Summary":"We introduced .NET Core 1.0 on November 2014. The goal with .NET Core was to take the learning from our experience building, shipping and servicing .NET Framework over the previous 12 years and build...","Href":"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/","RawContent":null},{"Title":"Announcing ML.NET 1.0","PublishedOn":"2019-05-06T18:51:26+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We are excited to announce the release of ML.NET 1.0 today.  ML.NET is a free, cross-platform and open source machine learning framework designed to bring the power of machine learning (ML) into .NET...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 5","PublishedOn":"2019-05-06T16:01:05+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 5. It includes a new Json serializer, support for publishing single file executables, an update to runtime roll-forward, and changes in the BCL. If you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/","RawContent":null},{"Title":"Introducing .NET 5","PublishedOn":"2019-05-06T16:00:50+00:00","CommentsCount":156,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing that the next release after .NET Core 3.0 will be .NET 5. This will be the next big release in the .NET family.\nThere will be just one .NET going forward, and you will be...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-5/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2019 Update","PublishedOn":"2019-04-30T05:19:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"DockerCon 2019 is being held this week, in San Francisco. We posted a DockerCon 2018 update last year, and it is time to share how we&#8217;ve improved the experience of using .NET and Docker together...","Href":"https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/","RawContent":null},{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9605768407","Type":"PullRequestEvent","CreatedAt":"2019-05-11T03:19:27","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24526","RelatedDescription":"Merged pull request \"Fixing S.P.Corelib to not double include files and ensure that S.N.V is marked #nullable enable\" (#24526) at dotnet/coreclr","RelatedBody":"CC. @AaronRobinsonMSFT for the csproj/sln change. Just doing `EnableDefaultCompileItems=false` causes other items to be double-included and breaks various IDE functionality (like T4 template generation). The project type GUID was also wrong and VS now tries to fix it.\r\n\r\nCC. @dotnet/nullablefc for the S.N.V fix. The T4 templates had been updated but it looks like the corresponding cs files hadn't been correctly regenerated.\r\n\r\n"},{"Id":"9605503900","Type":"PullRequestEvent","CreatedAt":"2019-05-11T00:42:23","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24536","RelatedDescription":"Opened pull request \"[WIP] Remove concept of AppDomains from the GC\" (#24536) at dotnet/coreclr","RelatedBody":"- Leave constructs allowing for multiple handle tables, as scenarios for that have been proposed"},{"Id":"9605498978","Type":"IssuesEvent","CreatedAt":"2019-05-11T00:39:54","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/10373","RelatedDescription":"Closed issue \"[x86/Linux] LSRA gtLsraInfo.srcCount value for long type\" (#10373) at dotnet/coreclr","RelatedBody":"While working with `FEATURE_FIXED_OUT_ARGS`, #10034, next problem I encounted is an assert on `src/jit/lsra.cpp Line: 3512`,\r\n`Assert failure(PID 13202 [0x00003392], Thread: 13202 [0x3392]): Assertion failed '((consume == 0) && (produce == 0)) || (ComputeAvailableSrcCount(tree) == consume)' in 'ConsoleApplication.Program:DoTest()' (IL size 24)`\r\n\r\nThis happens when call has a long type argment and it gets `gtLsraInfo.srcCount` to some wrong value 1 but should get 2. I get `ComputeAvailableSrcCount(tree)` value to 2 when I call this.\r\n\r\nI've trace the sequnce for this and first it was set to 2 in `Lowering::TreeNodeInfoInit()` by \r\n```\r\n#ifdef FEATURE_PUT_STRUCT_ARG_STK\r\n        case GT_PUTARG_STK:\r\n            LowerPutArgStk(tree->AsPutArgStk());\r\n            TreeNodeInfoInitPutArgStk(tree->AsPutArgStk()); <---  inside here, srcCount is set to 2\r\n            break;\r\n#endif // FEATURE_PUT_STRUCT_ARG_STK\r\n```\r\nand then to 1 with\r\n```\r\n        case GT_CALL:\r\n            TreeNodeInfoInitCall(tree->AsCall()); <--- and then to 1 afterwards\r\n            break;\r\n```\r\n\r\nIt seems that `Lowering::TreeNodeInfoInitCall()` doesn't consider for x86.\r\n```\r\n        if (curArgTabEntry->regNum == REG_STK)\r\n        {\r\n            // late arg that is not passed in a register\r\n            DISPNODE(argNode);\r\n            assert(argNode->gtOper == GT_PUTARG_STK);\r\n            argNode->gtLsraInfo.srcCount = 1;\r\n            argNode->gtLsraInfo.dstCount = 0;\r\n```\r\n\r\ncategory:correctness\r\ntheme:register-allocator\r\nskill-level:expert\r\ncost:small"},{"Id":"9605452666","Type":"IssuesEvent","CreatedAt":"2019-05-11T00:17:42","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16282","RelatedDescription":"Closed issue \"Improve FEATURE_PARTIAL_SIMD_CALLEE_SAVE\" (#16282) at dotnet/coreclr","RelatedBody":"FEATURE_PARTIAL_SIMD_CALLEE_SAVE is used to enable saving and restoring the high bits of certain registers which the platform ABI does not require the caller to preserve.\r\n\r\nThe current implementation inserts a save and restore of the high bits for every call.\r\n\r\nThis solution is naive.  It restores every register immediately regardless : \r\n+ whether it will ever be used in the function\r\n+ whether it will need to be saved again before use in the function\r\n\r\nAlso I expect the cost of the register save restore is not properly handled in local register promotion/enregistering cost metrics.\r\n\r\n@dotnet/jit-contrib \r\n\r\ncategory:cq\r\ntheme:basic-cq\r\nskill-level:expert\r\ncost:medium"},{"Id":"9605414068","Type":"IssuesEvent","CreatedAt":"2019-05-11T00:02:26","Actor":"fadimounir","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24380","RelatedDescription":"Closed issue \"\"Consistency check failed: AV in clr\" In Windows x64 CoreFX Tests run\" (#24380) at dotnet/coreclr","RelatedBody":"Popped up in #24367 \r\n\r\nAV while running System.Xml.Linq.Misc.Tests.\r\n\r\nStack trace:\r\n```\r\nAssert failure(PID 8924 [0x000022dc], Thread: 7872 [0x1ec0]): Consistency check failed: AV in clr at this callstack:\r\n11:55:36 ------\r\n11:55:36 CORECLR! NgenHashTable<EETypeHashTable,EETypeHashEntry,2>::FindVolatileEntryByHash + 0x292 (0x00007ffc`7c838aae)\r\n11:55:36 CORECLR! NgenHashTable<EETypeHashTable,EETypeHashEntry,2>::BaseFindFirstEntryByHash + 0xE0 (0x00007ffc`7c8363e8)\r\n11:55:36 CORECLR! EETypeHashTable::FindItem + 0x4AA (0x00007ffc`7c838056)\r\n11:55:36 CORECLR! EETypeHashTable::GetValue + 0xD6 (0x00007ffc`7c83927a)\r\n11:55:36 CORECLR! ClassLoader::LookupTypeKey + 0x66E (0x00007ffc`7c39ac7a)\r\n11:55:36 CORECLR! ClassLoader::LookupInLoaderModule + 0x4E9 (0x00007ffc`7c399671)\r\n11:55:36 CORECLR! ClassLoader::LookupTypeHandleForTypeKeyInner + 0x2F2 (0x00007ffc`7c39a5aa)\r\n11:55:36 CORECLR! ClassLoader::LookupTypeHandleForTypeKey + 0x18 (0x00007ffc`7c39a288)\r\n11:55:36 CORECLR! ClassLoader::LoadConstructedTypeThrowing + 0x990 (0x00007ffc`7c38fcb8)\r\n11:55:36 CORECLR! ClassLoader::LoadArrayTypeThrowing + 0x4B4 (0x00007ffc`7c38f148)\r\n11:55:36 CORECLR! AllocateObjectArray + 0x1D6 (0x00007ffc`7c5785b2)\r\n11:55:36 CORECLR! ArrayNative::CreateInstance + 0x7E2 (0x00007ffc`7ca9a4c2)\r\n11:55:36 SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffc`7bb6efc9)\r\n11:55:36 SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffc`7bd11d4a)\r\n11:55:36 SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffc`7bd1012b)\r\n11:55:36 SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffc`7bb9bc8c)\r\n11:55:36 SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffc`7bb7a1cb)\r\n11:55:36 <no module>! <no symbol> + 0x0 (0x00007ffc`1d6cac1d)\r\n11:55:36 <no module>! <no symbol> + 0x0 (0x0000001a`8cd866b8)\r\n```\r\n\r\nJob is at:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_windows_nt_corefx_innerloop_prtest/11200/consoleFull#-120693360f66db340-b3cd-4e23-8190-9b52cb916333\r\n\r\ncc: @fadimounir "},{"Id":"9605406264","Type":"PullRequestEvent","CreatedAt":"2019-05-10T23:59:40","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24519","RelatedDescription":"Merged pull request \"Fix EventCounter disable logic\" (#24519) at dotnet/coreclr","RelatedBody":"This fixes #24517. \r\n\r\n#24517 happens because of this:\r\n\r\nWhen we disable EventCounter, we call `CounterGroup.DisposeTimer()` in the Timer callback by checking whether the `EventSource` is enabled, and in `DisposeTimer`, we remove the timer object. \r\n\r\nWhen we enable it again, `EnableTimer` is called which checks for two conditions:\r\n1. If _`pollingIntervalnSecond` (user-provided argument) that it was called with is negative, don't enable timer.\r\n2. If the current pollingInterval is zero, (which it is at initial state), or `_pollingIntervalInSecond` is less than the current one (which suggests we should poll more often), dispose the current timer and make a new one with the new interval. \r\n\r\nNeither of this scenario is the case if we simply disposed the timer and never reset the current polling interval to zero. \r\n\r\nThe fix is simple - when we disable, set the current polling interval to zero. "},{"Id":"9605406257","Type":"IssuesEvent","CreatedAt":"2019-05-10T23:59:39","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24517","RelatedDescription":"Closed issue \"EventCounter disable/enable logic is broken\" (#24517) at dotnet/coreclr","RelatedBody":"If EventCounter is enabled and disabled, and then enabled again with the same `EventCounterIntervalSec` argument, it will fire the events exactly once and never after that. \r\n\r\nSpecifically, this points to a flaw in the logic for Disable path. I've finished root-causing this and will be sending out a PR shortly that addresses this. "},{"Id":"9605405557","Type":"PullRequestEvent","CreatedAt":"2019-05-10T23:59:21","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24426","RelatedDescription":"Merged pull request \"Disable a tail call test when using minopts\" (#24426) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/24424"},{"Id":"9605405543","Type":"IssuesEvent","CreatedAt":"2019-05-10T23:59:21","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24424","RelatedDescription":"Closed issue \"[arm][Linux][MinOpts] ExplicitTailCallNoSO: Process is terminating due to StackOverflowException.\" (#24424) at dotnet/coreclr","RelatedBody":"The test was added in #24252.\r\n\r\n[ADO failure example](https://dev.azure.com/dnceng/public/_build/results?buildId=177785&view=ms.vss-test-web.build-test-results-tab&runId=4306320&paneView=attachments&resultId=105797):\r\n```\r\nProcess is terminating due to StackOverflowException.\r\n/root/helix/work/workitem/JIT/Directed/IL/Tailcall/ExplicitTailCallNoSO/ExplicitTailCallNoSO.sh: line 256:  1505 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/JIT/Directed/Reports/JIT.Directed/IL/Tailcall/ExplicitTailCallNoSO/ExplicitTailCallNoSO.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun ExplicitTailCallNoSO.exe ''\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Directed/IL/Tailcall/ExplicitTailCallNoSO/ExplicitTailCallNoSO.sh\r\n\r\n```\r\n\r\nThe issue is stable.\r\n\r\n@kouvel should the test be modified to fit arm32 Linux stack when tail call optimization doesn't happen (in this case because it is minopts)?"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9604569625","Type":"PullRequestEvent","CreatedAt":"2019-05-10T20:25:17","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/arcade\" (#1172) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 5:27 PM\r\n- **Commit**: 917ed3ac79350e4072c724deb48404ee7d76ebef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.4\r\n- **Date Produced**: 5/6/2019 9:02 PM\r\n- **Commit**: fe003f91e82195c5657c79ffa8d2831c9f07c9dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19258.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19259.9\r\n\r\n"},{"Id":"9604282555","Type":"PullRequestEvent","CreatedAt":"2019-05-10T19:31:23","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1185","RelatedDescription":"Opened pull request \"Fail CI build if APICompat baseline files would change\" (#1185) at dotnet/standard","RelatedBody":"Currently, if a change in Arcade would cause changes in the APICompat baseline files, the baseline files are rewritten without throwing an error. If somebody makes such a change without checking in the changes to the APICompat baselines, the CI should fail. This change achieves that. Resolves https://github.com/dotnet/standard/issues/1184.\r\n\r\n@ericstj @terrajobst PTAL"},{"Id":"9598012630","Type":"IssuesEvent","CreatedAt":"2019-05-09T23:26:27","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1184","RelatedDescription":"Opened issue \"Fail CI when APICompat Baseline files change\" (#1184) at dotnet/standard","RelatedBody":"Right now, when a change to Standard causes a change to the APICompat baseline(s), the build succeeds, and the baseline files are re-written with the change. In CI, we should fail the build on changes to the APICompat baseline files (rather than silently rewriting them).\r\n\r\nCC @ericstj @terrajobst "},{"Id":"9597988286","Type":"PullRequestEvent","CreatedAt":"2019-05-09T23:19:41","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":null,"RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs "},{"Id":"9597988075","Type":"PullRequestEvent","CreatedAt":"2019-05-09T23:19:37","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Closed pull request \"Add shims to netstandard2.1 for types that used to have OOB packages\" (#1180) at dotnet/standard","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs "},{"Id":"9597778373","Type":"PullRequestEvent","CreatedAt":"2019-05-09T22:26:31","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1183","RelatedDescription":"Opened pull request \"Seal types that cannot be inherited\" (#1183) at dotnet/standard","RelatedBody":"These changes are related to #1176 and address the same problem.\r\n\r\nFixes #1171."},{"Id":"9597585723","Type":"PullRequestEvent","CreatedAt":"2019-05-09T21:46:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Merged pull request \"Add bulk operations to Collection<T>\" (#1175) at dotnet/standard","RelatedBody":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091."},{"Id":"9597585708","Type":"IssuesEvent","CreatedAt":"2019-05-09T21:46:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Closed issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091) at dotnet/standard","RelatedBody":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n"},{"Id":"9597563445","Type":"PullRequestEvent","CreatedAt":"2019-05-09T21:41:45","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1182","RelatedDescription":"Merged pull request \"Fix official build which is failing when trying to publish the packages to BAR\" (#1182) at dotnet/standard","RelatedBody":"cc: @wtgodbe \r\n\r\nOfficial builds are failing when trying to publish packages to BAR because the AssetsManifest file isn't being generated any longer. This was caused because of a breaking change in Arcade. These changes will fix this issue."},{"Id":"9597412890","Type":"IssuesEvent","CreatedAt":"2019-05-09T21:13:46","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/1171","RelatedDescription":"Reopened issue \"BaseNumberConverter should be effectively sealed\" (#1171) at dotnet/standard","RelatedBody":"See https://github.com/dotnet/corefx/pull/37278\r\n\r\nBaseNumberConverter shouldn't be derivable.  On desktop it's a compile error.  Since netstandard.dll doesn't include internal members it permits compile, but fails at runtime for most frameworks since internal abstract members are not overridden.\r\n\r\n/cc @Anipik "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9605738921","Type":"PullRequestEvent","CreatedAt":"2019-05-11T03:00:14","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35656","RelatedDescription":"Merged pull request \"Merge release/dev16.1 to release/dev16.2-preview1\" (#35656) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.2-preview1\ngit reset --hard upstream/release/dev16.2-preview1\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9605738707","Type":"PullRequestEvent","CreatedAt":"2019-05-11T03:00:08","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35657","RelatedDescription":"Merged pull request \"Merge release/dev16.1 to release/dev16.1-vs-deps\" (#35657) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.1-vs-deps\ngit reset --hard upstream/release/dev16.1-vs-deps\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9605594589","Type":"PullRequestEvent","CreatedAt":"2019-05-11T01:32:46","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35659","RelatedDescription":"Opened pull request \"Make compilation outputs available via a workspace service\" (#35659) at dotnet/roslyn","RelatedBody":"Based on discussion on https://github.com/dotnet/roslyn/pull/34698. Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.\r\n\r\nThe abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/34371"},{"Id":"9605589279","Type":"IssuesEvent","CreatedAt":"2019-05-11T01:29:44","Actor":"xtofs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35658","RelatedDescription":"Opened issue \"can stackalloc be allowed in ref struct constructors?\" (#35658) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nc# 7.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n ```\r\n   public ref struct Matrix<T> where T: unmanaged\r\n    {\r\n        private readonly int w;\r\n        private readonly int h;\r\n        private readonly Span<T> span;\r\n\r\n        public Matrix(int w, int h)\r\n        {\r\n            this.w = w;\r\n            this.h = h;\r\n            this.span = stackalloc T[w*h];\r\n        }\r\n```\r\n\r\nresults in error \r\n`CS8353: A result of a stackalloc expression of type 'Span<T>' cannot be used in this context because it may be exposed outside of the containing method` \r\n\r\nI think I understand the error message and why it is necessary to prevent it. \r\nBut in this specific case the this.span is a field on a ref struct itself, so the stack will be maintained and the matrix itself cannot \"be exposed outside the context\".\r\n\r\n"},{"Id":"9605558963","Type":"PullRequestEvent","CreatedAt":"2019-05-11T01:11:33","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35617","RelatedDescription":"Closed pull request \"Add optprof test\" (#35617) at dotnet/roslyn","RelatedBody":"This test is now passing in master, so porting it to 16.2.\r\n\r\nHere's PR that porting the test itself to rel/d16.2\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VS/pullrequest/180800?_a=overview\r\n\r\n**Don't merge until verified RPS results from master.**\r\n\r\nFYI @jinujoseph @vatsalyaagrawal @dotnet/roslyn-infrastructure "},{"Id":"9605500716","Type":"PullRequestEvent","CreatedAt":"2019-05-11T00:40:48","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35657","RelatedDescription":"Opened pull request \"Merge release/dev16.1 to release/dev16.1-vs-deps\" (#35657) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.1-vs-deps\ngit reset --hard upstream/release/dev16.1-vs-deps\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9605125924","Type":"PullRequestEvent","CreatedAt":"2019-05-10T22:24:24","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7414","RelatedDescription":"Opened pull request \"Clean publish test output folders before run\" (#7414) at dotnet/corert","RelatedBody":"Incremental build was hiding failures in our local enlistments that only CI would catch due to it always starting with a fresh enlistment."},{"Id":"9604816858","Type":"PullRequestEvent","CreatedAt":"2019-05-10T21:13:18","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7413","RelatedDescription":"Merged pull request \"Revert \"Initial CPAOT support for large version bubble\"\" (#7413) at dotnet/corert","RelatedBody":"Reverts dotnet/corert#7403"},{"Id":"9604319962","Type":"PullRequestEvent","CreatedAt":"2019-05-10T19:38:30","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7413","RelatedDescription":"Opened pull request \"Revert \"Initial CPAOT support for large version bubble\"\" (#7413) at dotnet/corert","RelatedBody":"Reverts dotnet/corert#7403"},{"Id":"9597416772","Type":"PullRequestEvent","CreatedAt":"2019-05-09T21:14:26","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7403","RelatedDescription":"Merged pull request \"Initial CPAOT support for large version bubble\" (#7403) at dotnet/corert","RelatedBody":"This change modifies the existing --inputbubble CPAOT option\r\nto work the same as Crossgen /largeversionbubble i.e. the main module\r\nand all reference assemblies are considered to belong to the same\r\nversion bubble.\r\n\r\nThe gist of the change deals with encoding module overrides in\r\nsignatures. I have implemented a new R2R header table\r\nManifestMetadataTableNode and added logic for composing and emitting\r\nthe extra AssemblyRef list.\r\n\r\nOne challenging bit was that we need to emit all the signatures before\r\nemitting the ManifestMetadataTableNode because only the emission\r\nof the signatures shakes out all the required AssemblyRef's. I have\r\nadded a simple loop to ImportSectionsTableNode / ImportSectionNode\r\nthat traverses and emits all registered import cell signatures.\r\n\r\nAfter I managed to make the basic signature emission work with module\r\noverride, I continued hitting issues with the two entrypoint tables.\r\nFor the (non-generic) method entrypoint table we need to filter out\r\nmethods outside of the current input module because the larger\r\ncompilation group representing the larger version bubble ends up\r\nexpanding the dependency graph to framework methods.\r\n\r\nWhile these \"external\" methods are not compiled into the output\r\nexecutable (except when they are occasionally inlined into a local\r\nmethod), we were still trying to emit them into the entrypoint\r\ntable and we were crashing compilation because we couldn't find\r\nsome of the necessary tokens.\r\n\r\nFor instance entrypoints, I didn't find any manner of encoding\r\na module override for their signatures in the native hashtable so\r\nfor now I added filtering that we're only storing those instance\r\nentrypoints that have the current input module as the reference\r\nmodule. One can theoretically imagine that a module may contain\r\narbitrary generic instantiations spanning other modules when\r\nlarger bubbles are on.\r\n\r\nWhile working on the change I also realized that the current way\r\nof basing signature contexts on input modules in CorInfoImpl.ReadyToRun\r\nwas incorrect - when a method gets inlined, we still need the original\r\nsignature context because that's what defines the ambient module\r\nused in the CoreCLR signature parser.\r\n\r\nI have deleted the field and instead I added a new method\r\nGetSignatureContext which currently returns\r\nReadyToRunCoregenNodeFactory.InputModuleContext. Once we start\r\nimplementing \"single-file\" (i.e. compiling multiple MSIL modules\r\ninto a single PE), we'll change this to something more fine-grained,\r\nmost likely based on some lookup on MethodBeingCompiled.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9596613603","Type":"PullRequestEvent","CreatedAt":"2019-05-09T19:03:46","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7412) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"442811360","IsPullRequest":true,"CreatedAt":"2019-05-11T03:19:27","Actor":"tannergooding","Number":"24526","RawContent":null,"Title":"Fixing S.P.Corelib to not double include files and ensure that S.N.V is marked #nullable enable","State":"closed","Body":"CC. @AaronRobinsonMSFT for the csproj/sln change. Just doing `EnableDefaultCompileItems=false` causes other items to be double-included and breaks various IDE functionality (like T4 template generation). The project type GUID was also wrong and VS now tries to fix it.\r\n\r\nCC. @dotnet/nullablefc for the S.N.V fix. The T4 templates had been updated but it looks like the corresponding cs files hadn't been correctly regenerated.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24526","RelatedDescription":"Closed or merged PR \"Fixing S.P.Corelib to not double include files and ensure that S.N.V is marked #nullable enable\" (#24526)"},{"Id":"442936289","IsPullRequest":true,"CreatedAt":"2019-05-11T00:42:23","Actor":"davidwrighton","Number":"24536","RawContent":null,"Title":"[WIP] Remove concept of AppDomains from the GC","State":"open","Body":"- Leave constructs allowing for multiple handle tables, as scenarios for that have been proposed","Url":"https://github.com/dotnet/coreclr/pull/24536","RelatedDescription":"Open PR \"[WIP] Remove concept of AppDomains from the GC\" (#24536)"},{"Id":"442522304","IsPullRequest":true,"CreatedAt":"2019-05-10T23:59:39","Actor":"sywhang","Number":"24519","RawContent":null,"Title":"Fix EventCounter disable logic","State":"closed","Body":"This fixes #24517. \r\n\r\n#24517 happens because of this:\r\n\r\nWhen we disable EventCounter, we call `CounterGroup.DisposeTimer()` in the Timer callback by checking whether the `EventSource` is enabled, and in `DisposeTimer`, we remove the timer object. \r\n\r\nWhen we enable it again, `EnableTimer` is called which checks for two conditions:\r\n1. If _`pollingIntervalnSecond` (user-provided argument) that it was called with is negative, don't enable timer.\r\n2. If the current pollingInterval is zero, (which it is at initial state), or `_pollingIntervalInSecond` is less than the current one (which suggests we should poll more often), dispose the current timer and make a new one with the new interval. \r\n\r\nNeither of this scenario is the case if we simply disposed the timer and never reset the current polling interval to zero. \r\n\r\nThe fix is simple - when we disable, set the current polling interval to zero. ","Url":"https://github.com/dotnet/coreclr/pull/24519","RelatedDescription":"Closed or merged PR \"Fix EventCounter disable logic\" (#24519)"},{"Id":"442518734","IsPullRequest":false,"CreatedAt":"2019-05-10T23:59:39","Actor":"sywhang","Number":"24517","RawContent":null,"Title":"EventCounter disable/enable logic is broken","State":"closed","Body":"If EventCounter is enabled and disabled, and then enabled again with the same `EventCounterIntervalSec` argument, it will fire the events exactly once and never after that. \r\n\r\nSpecifically, this points to a flaw in the logic for Disable path. I've finished root-causing this and will be sending out a PR shortly that addresses this. ","Url":"https://github.com/dotnet/coreclr/issues/24517","RelatedDescription":"Closed issue \"EventCounter disable/enable logic is broken\" (#24517)"},{"Id":"442930810","IsPullRequest":true,"CreatedAt":"2019-05-10T23:57:26","Actor":"kouvel","Number":"24535","RawContent":null,"Title":"Fix a contract violation in ThreadPool.get_CompletedWorkItemCount","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/24515\r\n- Looks like the path that acquires the thread store lock has code that is marked witH GC_TRIGGERS\r\n- Changed ThreadPool.get_CompletedWorkItemCount to use a QCall instead of an FCall","Url":"https://github.com/dotnet/coreclr/pull/24535","RelatedDescription":"Open PR \"Fix a contract violation in ThreadPool.get_CompletedWorkItemCount\" (#24535)"},{"Id":"442893017","IsPullRequest":true,"CreatedAt":"2019-05-10T23:22:03","Actor":"jkoritzinsky","Number":"24531","RawContent":null,"Title":"Re-enable accidentally disabled tests.","State":"closed","Body":"Apparently the Explicit struct marshalling tests have been disabled on CI for a while via issues.targets. We should re-enable them on CI.","Url":"https://github.com/dotnet/coreclr/pull/24531","RelatedDescription":"Closed or merged PR \"Re-enable accidentally disabled tests.\" (#24531)"},{"Id":"442892468","IsPullRequest":true,"CreatedAt":"2019-05-10T23:20:15","Actor":"jkoritzinsky","Number":"24530","RawContent":null,"Title":"Reenable IJW tests.","State":"closed","Body":"Helix queues now have the redistributable installed, so the IJW tests should be re-enabled.\r\n\r\nFixes #23358 \r\n","Url":"https://github.com/dotnet/coreclr/pull/24530","RelatedDescription":"Closed or merged PR \"Reenable IJW tests.\" (#24530)"},{"Id":"442921971","IsPullRequest":true,"CreatedAt":"2019-05-10T23:00:27","Actor":"sbomer","Number":"24534","RawContent":null,"Title":"Add native asset lists for IL linker","State":"open","Body":"This is part of the work suggested in https://github.com/dotnet/sdk/pull/3157. The IL linker will be able to remove unused native dependencies, but we need a whitelist mechanism. This change adds text files to the runtime and jit packages that list the files that are required either at runtime or for using the debugger. These packages flow to core-setup, where I'll make a follow-up change to ensure that these lists also flow to runtime packs.\r\n\r\n@nguerrera @fadimounir @swaroop-sridhar","Url":"https://github.com/dotnet/coreclr/pull/24534","RelatedDescription":"Open PR \"Add native asset lists for IL linker\" (#24534)"},{"Id":"442917743","IsPullRequest":true,"CreatedAt":"2019-05-10T22:36:57","Actor":"VSadov","Number":"24533","RawContent":null,"Title":"[WIP][Test] Test2","State":"open","Body":"just to run tests","Url":"https://github.com/dotnet/coreclr/pull/24533","RelatedDescription":"Open PR \"[WIP][Test] Test2\" (#24533)"},{"Id":"442917628","IsPullRequest":true,"CreatedAt":"2019-05-10T22:36:20","Actor":"sdmaclea","Number":"24532","RawContent":null,"Title":"Stack size override","State":"open","Body":"Add code to override process default stack size for VM from the proprty bag\r\n\r\nFixes #21450\r\n\r\n/cc @jkotalik \r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24532","RelatedDescription":"Open PR \"Stack size override\" (#24532)"},{"Id":"442878302","IsPullRequest":true,"CreatedAt":"2019-05-10T20:14:29","Actor":"fadimounir","Number":"24529","RawContent":null,"Title":"Adding echo command makes batch execution correct (OS bug maybe?)","State":"open","Body":"Adding the echo command made the R2R CI legs in PR #24333 work correctly.\r\n\r\nAfter being able to repro the CI failures locally using the environment from the lab, I added a bunch of echo commands in the test's .cmd file to debug this. I saw some inconsistent output, suggesting the script execution wasn't flowing correctly, and seemed to jump from one place to the other. After adding more echo commands, suddenly it started to work correctly again, and the scripts stdout started to make sense.\r\nLiterally, quite impressive.\r\n\r\nI was able to narrow this down to just one extra echo command that for some mysterious reason made the cmd execution correct again","Url":"https://github.com/dotnet/coreclr/pull/24529","RelatedDescription":"Open PR \"Adding echo command makes batch execution correct (OS bug maybe?)\" (#24529)"},{"Id":"442840204","IsPullRequest":true,"CreatedAt":"2019-05-10T18:20:43","Actor":"sandreenko","Number":"24528","RawContent":null,"Title":"[WIP] Check one test duration.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24528","RelatedDescription":"Open PR \"[WIP] Check one test duration.\" (#24528)"},{"Id":"442816205","IsPullRequest":false,"CreatedAt":"2019-05-10T17:15:19","Actor":"echesakovMSFT","Number":"24527","RawContent":null,"Title":"[Linux arm] SuperPMI intermittent failures - GetProcAddress 'getJit' failed","State":"open","Body":"SuperPMI (AltJitName=libsuperpmi-shim-collector.so) often fails with the following error on Linux/arm:\r\n```\r\nERROR: getJit() - GetProcAddress 'getJit' failed (0x00000006)                                                                                                                │ 1425 colord     20   0 36568  1948   816 S  0.0  0.1  0:00.02 /usr/lib/colord/colord\r\nFailed to load alternative JIT compiler                                                                                                                                      │ 1428 colord     20   0 36568  1948   816 S  0.0  0.1  0:00.00 /usr/lib/colord/colord\r\n   at System.AppContext.Setup(Char**, Char**, Int32)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24527","RelatedDescription":"Open issue \"[Linux arm] SuperPMI intermittent failures - GetProcAddress 'getJit' failed\" (#24527)"},{"Id":"442802359","IsPullRequest":true,"CreatedAt":"2019-05-10T17:07:26","Actor":"cshung","Number":"24525","RawContent":null,"Title":"Remove obsolete comments","State":"closed","Body":"After PR #24230, the comment is no longer valid, deleted.","Url":"https://github.com/dotnet/coreclr/pull/24525","RelatedDescription":"Closed or merged PR \"Remove obsolete comments\" (#24525)"},{"Id":"442793604","IsPullRequest":true,"CreatedAt":"2019-05-10T16:12:00","Actor":"janvorli","Number":"24524","RawContent":null,"Title":"Fix field signature generation","State":"open","Body":"The ZapSig::EncodeField was missing similar treatment that was made to\r\nthe encodeMethod in the past for enabling large version bubble. We\r\nshould encode all fields as field defs and the module override at the\r\nbeginning of the fixup signature is computed with that assumption.\r\nThe issue was that we were storing memberrefs in some cases and the\r\nmodule override made them invalid.\r\nIt fixes a corefx test that was failing due to this when crossgen-ed\r\nwith large version bubble enabled.","Url":"https://github.com/dotnet/coreclr/pull/24524","RelatedDescription":"Open PR \"Fix field signature generation\" (#24524)"},{"Id":"442790380","IsPullRequest":true,"CreatedAt":"2019-05-10T16:03:34","Actor":"janvorli","Number":"24523","RawContent":null,"Title":"Add module override for constraint type in method","State":"open","Body":"The constraint type for method signature encoding was missing module\r\nzapsig when it was needed. Some corefx tests were failing due to that \r\nwhen crossgen-ed with large version bubble enabled.","Url":"https://github.com/dotnet/coreclr/pull/24523","RelatedDescription":"Open PR \"Add module override for constraint type in method\" (#24523)"},{"Id":"442705452","IsPullRequest":true,"CreatedAt":"2019-05-10T12:54:23","Actor":"dotnet-maestro[bot]","Number":"24522","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190510.1\r\n- **Date Produced**: 5/10/2019 11:16 AM\r\n- **Commit**: d2be6e027cb7d128e710a8f2efa97fff82ecff20\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190510.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190510.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24522","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24522)"},{"Id":"442698052","IsPullRequest":true,"CreatedAt":"2019-05-10T12:37:28","Actor":"dotnet-maestro[bot]","Number":"24521","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190509.10\r\n- **Date Produced**: 5/10/2019 5:16 AM\r\n- **Commit**: 441238d5a50ee3cb19179e93c2b94ec7b09ca214\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19259.10\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview6.19259.10\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24521","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#24521)"},{"Id":"442565539","IsPullRequest":true,"CreatedAt":"2019-05-10T06:53:22","Actor":"am11","Number":"24520","RawContent":null,"Title":"Fix CPUSET_T definition for FreeBSD","State":"open","Body":"Build command used: `./build.sh -skipmanaged`\r\n(skipped managed artifacts because the required version of cli package is not available for FreeBSD)\r\n","Url":"https://github.com/dotnet/coreclr/pull/24520","RelatedDescription":"Open PR \"Fix CPUSET_T definition for FreeBSD\" (#24520)"},{"Id":"442469521","IsPullRequest":true,"CreatedAt":"2019-05-10T03:44:17","Actor":"Dotnet-GitSync-Bot","Number":"24507","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/24507","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#24507)"},{"Id":"442500760","IsPullRequest":true,"CreatedAt":"2019-05-10T03:43:01","Actor":"danmosemsft","Number":"24516","RawContent":null,"Title":"Dead string","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24516","RelatedDescription":"Closed or merged PR \"Dead string\" (#24516)"},{"Id":"442495386","IsPullRequest":true,"CreatedAt":"2019-05-10T03:30:39","Actor":"sywhang","Number":"24512","RawContent":null,"Title":"Fix an overflow issue with EventPipe buffer size","State":"closed","Body":"This should address #24491. \r\n\r\nIf we set CircularBufferSizeInMB to something massive, then m_circularBufferSizeInBytes becomes 0. \r\n\r\nThe root cause is because `circularBufferSizeInMB` is a 32 bit integer, and so are 1024s that we are multiplying to it. So even though we're trying to save it to a 64 bit integer, we get an overflow on the RHS and end up saving something that already overflowed.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24512","RelatedDescription":"Closed or merged PR \"Fix an overflow issue with EventPipe buffer size\" (#24512)"},{"Id":"442497295","IsPullRequest":true,"CreatedAt":"2019-05-10T03:24:26","Actor":"xiangzhai","Number":"24513","RawContent":null,"Title":"[X86/Linux] Fix error: no member named 'GetId' in 'AppDomain' when enabled Interpreter issue","State":"closed","Body":"Hi,\r\n\r\nPR: https://github.com/dotnet/coreclr/issues/24492\r\n\r\nPlease review it.\r\n\r\nThanks,\r\nLeslie Zhai","Url":"https://github.com/dotnet/coreclr/pull/24513","RelatedDescription":"Closed or merged PR \"[X86/Linux] Fix error: no member named 'GetId' in 'AppDomain' when enabled Interpreter issue\" (#24513)"},{"Id":"442519118","IsPullRequest":false,"CreatedAt":"2019-05-10T03:13:00","Actor":"am11","Number":"24518","RawContent":null,"Title":"Usage of memset with non-trivial types that results in -Wclass-memaccess","State":"open","Body":"Starting with gcc 8, compiler is warning about several usages of `memset` in case of types that are\r\n[non-trivially copyable](https://rules.sonarsource.com/cpp/RSPEC-4999). This includes `struct`s inheriting `struct ZeroInit`, usage of `FillMemory` and `ZeroMemory` macros (defined in `pal.h`) and other places which are directly calling the function (although some of those places can make use of the defined macro as it stands).\r\n\r\nFrom release notes (https://www.gnu.org/software/gcc/gcc-8/changes.html):\r\n\r\n> `-Wclass-memaccess` warns when objects of non-trivial class types are manipulated in potentially unsafe ways by raw memory functions such as `memcpy`, or `realloc`. The warning helps detect calls that bypass user-defined constructors or copy-assignment operators, corrupt virtual table pointers, data members of `const`-qualified types or references, or member pointers. The warning also detects calls that would bypass access controls to data members.\r\n\r\nLLVM has included `-Wnontrivial-memaccess` for C structs and there are also considerations to add `-Wclass-memaccess` in future: https://reviews.llvm.org/D45310\r\n\r\nReading the community discussions about practices pertaining to usage of `memset` with non-POD types and how others have responded to the gcc warning, I think there are three ways to fix this (in descending order of preference):\r\n\r\n1. Call proper ctor, use `std:fill` and friends for non-trivial data structures.\r\n2. Cast pointer to `void*` to circumvent the type check.\r\n3. Suppress warning in cmake `-Wno-class-memaccess`.","Url":"https://github.com/dotnet/coreclr/issues/24518","RelatedDescription":"Open issue \"Usage of memset with non-trivial types that results in -Wclass-memaccess\" (#24518)"},{"Id":"442499568","IsPullRequest":false,"CreatedAt":"2019-05-10T01:31:22","Actor":"VincentBu","Number":"24515","RawContent":null,"Title":"Assert failure: CONTRACT VIOLATION by Thread::GetTotalThreadPoolCompletionCount","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs0x10/868/\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 6780 [0x00001a7c], Thread: 10740 [0x29f4]): CONTRACT VIOLATION by Thread::GetTotalThreadPoolCompletionCount at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\threads.cpp\" @ 8027\r\n  \r\n  GC_TRIGGERS encountered in a GC_NOTRIGGER scope\r\n  \r\n                          CONTRACT in Thread::GetTotalThreadPoolCompletionCount at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\threads.cpp\" @ 8027\r\n                          OVERRIDE_TYPE_LOAD_LEVEL_LIMIT in MethodDescCallSite::CallTargetWorker at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\callhelpers.cpp\" @ 354\r\n                          CONTRACT in MethodDescCallSite::CallTargetWorker at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\callhelpers.cpp\" @ 344\r\n                          CONTRACT in ThreadNative::KickOffThread_Worker at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\comsynchronizable.cpp\" @ 193\r\n                          CONTRACT in ManagedThreadBase_DispatchInner at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\threads.cpp\" @ 7367\r\n                          CONTRACT in ManagedThreadBase_FullTransition at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\threads.cpp\" @ 7623\r\n                          CONTRACT in ThreadNative::KickOffThread at \"d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\comsynchronizable.cpp\" @ 289\r\n  \r\n  We can't find the violated contract. Look for an old-style non-holder-based contract.\r\n  \r\n  CORECLR! CONTRACT_ASSERT + 0x426 (0x00007ff9`bac14646)\r\n  CORECLR! EEContract::DoChecks + 0x33A (0x00007ff9`bad17542)\r\n  CORECLR! Thread::GetTotalThreadPoolCompletionCount + 0xC1 (0x00007ff9`bad6c029)\r\n  CORECLR! ThreadPoolNative::GetCompletedWorkItemCount + 0x86 (0x00007ff9`bb443886)\r\n  <no module>! <no symbol> + 0x0 (0x00007ff9`60714380)\r\n  <no module>! <no symbol> + 0x0 (0x0000008d`d486c858)\r\n  <no module>! <no symbol> + 0x0 (0x0000008d`d486cc18)\r\n  <no module>! <no symbol> + 0x0 (0x0000008d`d486c720)\r\n  CORECLR! FrameBase::`vftable' + 0x0 (0x00007ff9`bb7dc6d8)\r\n      File: d:\\j\\workspace\\x64_checked_w---1d068d3b\\src\\vm\\threads.cpp Line: 8027\r\n      Image: D:\\j\\workspace\\x64_checked_w---1d068d3b\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-x64\\dotnet.exe\r\n\r\nexit code -1073740286\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24515","RelatedDescription":"Open issue \"Assert failure: CONTRACT VIOLATION by Thread::GetTotalThreadPoolCompletionCount\" (#24515)"},{"Id":"442497511","IsPullRequest":false,"CreatedAt":"2019-05-10T01:20:07","Actor":"VincentBu","Number":"24514","RawContent":null,"Title":"error NU1603 in x64_checked_ubuntu_corefx","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstress2/938/\r\n\r\n**Log:**\r\n```\r\n/mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstress2/_/fx/external/netstandard/netstandard.depproj : error NU1603: netstandard depends on NETStandard.Library (>= 2.1.0-prerelease.19259.6) but NETStandard.Library 2.1.0-prerelease.19259.6 was not found. An approximate best match of NETStandard.Library 2.1.0-prerelease.19259.7 was resolved.\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24514","RelatedDescription":"Open issue \"error NU1603 in x64_checked_ubuntu_corefx\" (#24514)"},{"Id":"442488671","IsPullRequest":true,"CreatedAt":"2019-05-10T00:30:36","Actor":"jkotas","Number":"24511","RawContent":null,"Title":"Delete InternalCasingHelper","State":"open","Body":"The unmanaged runtime has number of different paths for case-insensitive operations, each with unique issues. This is replacing InternalCasingHelper with SString to reduce number of different paths for case-insensitive operations that need to be maintained.\r\n\r\nContributes to #20616","Url":"https://github.com/dotnet/coreclr/pull/24511","RelatedDescription":"Open PR \"Delete InternalCasingHelper\" (#24511)"},{"Id":"442486513","IsPullRequest":false,"CreatedAt":"2019-05-10T00:18:53","Actor":"cshung","Number":"24510","RawContent":null,"Title":"Too many blocked FlushTimer threads when the IPC consumer is not consuming the bytes.","State":"open","Body":"If I modify dotnet-trace such that it does not read from the stream, the runtime code will create many threads, ultimately blocked on write, all contended on the `EventPipe::GetLock()`","Url":"https://github.com/dotnet/coreclr/issues/24510","RelatedDescription":"Open issue \"Too many blocked FlushTimer threads when the IPC consumer is not consuming the bytes.\" (#24510)"},{"Id":"442485630","IsPullRequest":false,"CreatedAt":"2019-05-10T00:14:10","Actor":"erozenfeld","Number":"24509","RawContent":null,"Title":"Contract violation failures in x64 checked jitstressregs0x80 corefx job","State":"open","Body":"https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs0x80/861/consoleText\r\n\r\nThe failures started happening today, the job had been successful for several days before.\r\n\r\nSeveral tests have failures similar to this one:\r\n\r\n```\r\nAssert failure(PID 4672 [0x00001240], Thread: 3276 [0x0ccc]): CONTRACT VIOLATION by Thread::GetTotalCount at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threads.cpp\" @ 8004\r\n  \r\n  GC_TRIGGERS encountered in a GC_NOTRIGGER scope\r\n  \r\n                          CONTRACT in Thread::GetTotalCount at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threads.cpp\" @ 8004\r\n                          OVERRIDE_TYPE_LOAD_LEVEL_LIMIT in MethodDescCallSite::CallTargetWorker at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\callhelpers.cpp\" @ 354\r\n                          CONTRACT in MethodDescCallSite::CallTargetWorker at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\callhelpers.cpp\" @ 344\r\n                          CONTRACT in QueueUserWorkItemManagedCallback at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\comthreadpool.cpp\" @ 460\r\n                          CONTRACT in ManagedThreadBase_DispatchInner at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threads.cpp\" @ 7367\r\n                          CONTRACT in ManagedThreadBase_FullTransition at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threads.cpp\" @ 7623\r\n                          GCX_COOP in ManagedPerAppDomainTPCount::DispatchWorkItem at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threadpoolrequest.cpp\" @ 620\r\n                          CONTRACT in ManagedPerAppDomainTPCount::DispatchWorkItem at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threadpoolrequest.cpp\" @ 618\r\n                          CONTRACT in ThreadpoolMgr::ExecuteWorkRequest at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\win32threadpool.cpp\" @ 1532\r\n                          CONTRACT in ThreadpoolMgr::WorkerThreadStart at \"d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\win32threadpool.cpp\" @ 1894\r\n  \r\n  We can't find the violated contract. Look for an old-style non-holder-based contract.\r\n  \r\n  \r\n  CORECLR! CONTRACT_ASSERT + 0x426 (0x00007ffa`887c4646)\r\n  CORECLR! EEContract::DoChecks + 0x33A (0x00007ffa`888c7542)\r\n  CORECLR! Thread::GetTotalCount + 0xCA (0x00007ffa`8891bebe)\r\n  CORECLR! ObjectNative::GetMonitorLockContentionCount + 0x92 (0x00007ffa`8911fe62)\r\n  <no module>! <no symbol> + 0x0 (0x00007ffa`2e2c437c)\r\n      File: d:\\j\\workspace\\x64_checked_w---ac310d4a\\src\\vm\\threads.cpp Line: 8004\r\n      Image: D:\\j\\workspace\\x64_checked_w---ac310d4a\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-x64\\dotnet.exe\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24509","RelatedDescription":"Open issue \"Contract violation failures in x64 checked jitstressregs0x80 corefx job\" (#24509)"},{"Id":"442482505","IsPullRequest":true,"CreatedAt":"2019-05-09T23:59:31","Actor":"echesakovMSFT","Number":"24508","RawContent":null,"Title":"Decorate SuperPMI DllMain jitStartup getJit with DLLEXPORT","State":"open","Body":"SuperPMI collector doesn't work on Linux. DllMain, getJit and jitStartup symbol are hidden so EEJitManager won't be called to initialize AltJITCompiler in EEJitManager::LoadJIT. \r\n\r\nThis PR makes the methods to have the same visibility as the corresponding methods in libclrjit.so have (i.e. the same as in jit/ee_il_dll.cpp)\r\n","Url":"https://github.com/dotnet/coreclr/pull/24508","RelatedDescription":"Open PR \"Decorate SuperPMI DllMain jitStartup getJit with DLLEXPORT\" (#24508)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"442929031","IsPullRequest":false,"CreatedAt":"2019-05-10T23:44:27","Actor":"brettrowberry","Number":"11316","RawContent":null,"Title":"Add `dotnet -v` in addition to `dotnet --version`","State":"open","Body":"## Steps to reproduce\r\n`dotnet -v`\r\n\r\n## Expected  behavior\r\n`3.0.100-preview5-011568`\r\n\r\n## Actual behavior\r\n`Unknown option: -v`\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11316","RelatedDescription":"Open issue \"Add `dotnet -v` in addition to `dotnet --version`\" (#11316)"},{"Id":"442875504","IsPullRequest":false,"CreatedAt":"2019-05-10T21:25:02","Actor":"aschlick","Number":"11315","RawContent":null,"Title":"preview 5: dotnet ef not found","State":"closed","Body":"## Steps to reproduce\r\nRun a project with entity framework core\r\n`dotnet ef -h` should work\r\nupdate from dotnet core 3 preview 3 (3.0.100-preview3-010431) to either preview 4 or 5. \r\n`dotnet ef -h` \r\n\r\n## Expected  behavior\r\nentity framework help text\r\n\r\n## Actual behavior\r\n`Cannot find command 'dotnet ef', please run the following command to install`\r\n\r\n## Environment data\r\n<details><summary>`dotnet --info` output:</summary>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n</details>\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11315","RelatedDescription":"Closed issue \"preview 5: dotnet ef not found\" (#11315)"},{"Id":"442685284","IsPullRequest":true,"CreatedAt":"2019-05-10T18:50:57","Actor":"dotnet-maestro[bot]","Number":"11313","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190509.1\r\n- **Date Produced**: 5/9/2019 7:28 PM\r\n- **Commit**: 003a2dd822d317c493b587432f95353871e72bb1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19259.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11313","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11313)"},{"Id":"442354359","IsPullRequest":false,"CreatedAt":"2019-05-10T17:00:48","Actor":"VidyaKukke","Number":"11307","RawContent":null,"Title":"dotnet pack version","State":"closed","Body":"I have a .csproj\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <RootNamespace>$(RootNamespacePrefix)CLI</RootNamespace>\r\n    <AssemblyName><myassemblyName></AssemblyName>\r\n    <TargetFrameworks>netstandard2.0</TargetFrameworks>\r\n    <RuntimeFrameworkVersion>$(RuntimeFxVer)</RuntimeFrameworkVersion>\r\n    <Version>0.2.0</Version>\r\n  </PropertyGroup>\r\n...\r\n</Project>\r\n```\r\n\r\nI'm trying to use dotnet pack Myproj.csproj. It is producing a random version. How do I specify the right version?\r\n\r\nI have tried adding \r\n<VersionPrefix>0.2.0</VersionPrefix>\r\n<VersionSuffix>$(VersionSuffix></VersionSuffix>\r\n\r\nand doing a \r\ndotnet pack myproj.csproj --version-suffix \"-somethinghere\"\r\n\r\nNothing seems to work. What am I missing here?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.505\r\n Commit:    b220231234\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.505\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11307","RelatedDescription":"Closed issue \"dotnet pack version\" (#11307)"},{"Id":"442688459","IsPullRequest":true,"CreatedAt":"2019-05-10T12:54:36","Actor":"dotnet-maestro[bot]","Number":"11314","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190509.1\r\n- **Date Produced**: 5/9/2019 12:48 PM\r\n- **Commit**: a939a9f8aad540b90dcdedd0df6bfeaf7bea8707\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19259.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11314","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11314)"},{"Id":"442429078","IsPullRequest":true,"CreatedAt":"2019-05-10T06:04:59","Actor":"livarcocc","Number":"11309","RawContent":null,"Title":"Update SDK to 2.1.700-preview-64109-02","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11309","RelatedDescription":"Closed or merged PR \"Update SDK to 2.1.700-preview-64109-02\" (#11309)"},{"Id":"442543097","IsPullRequest":true,"CreatedAt":"2019-05-10T05:21:44","Actor":"vagisha-nidhi","Number":"11312","RawContent":null,"Title":"TestPlatform insertion 16.1.0 ","State":"open","Body":"Release : [https://github.com/microsoft/vstest/releases/tag/v16.1.0](https://github.com/microsoft/vstest/releases/tag/v16.1.0)\r\n","Url":"https://github.com/dotnet/cli/pull/11312","RelatedDescription":"Open PR \"TestPlatform insertion 16.1.0 \" (#11312)"},{"Id":"442488660","IsPullRequest":false,"CreatedAt":"2019-05-10T00:30:34","Actor":"arekbal","Number":"11311","RawContent":null,"Title":"Telemetry message wording is \"inaccurate\"","State":"open","Body":"## Steps to reproduce\r\nJust write `dotnet` in console\r\nThere is a notification about using telemetry and how to disable it by using environment variable. Th message states that telemetry data is shared with community.\r\n## Actual  behavior\r\nThe wording of the message is inaccurate and misleading as only \"some\" of the data \"used to be\" shared with the community.\r\nLooking at https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry\r\ntells us that only 5 out of 13? Data Points \"used to be\" shared. \r\nAlso, data blobs are not raw data, they are already preprocessed and are missing a lot of useful information that is gathered by telemetry but not exposed to the public such as time of invocation.\r\nWhat I mean by \"used to be\" is that last blob that is currently available comes from late 2017. Latest data is not publicly available (5 last quarters right now) even in this tiny aggregated form.\r\n\r\n## Suggested change\r\nI don't expect more than - for the very least - change to be applied to the wording. Get rid of the sentence about sharing data with community. Alternatively change wording to take into account that only some portion of the gathered data was shared with the community.\r\n\r\n## EU GDPR Sidenote\r\nAccording to this page\r\nhttps://ec.europa.eu/info/law/law-topic/data-protection/reform/what-personal-data_en\r\ngathered data, especially MAC addresses(even hashed obviously) makes it personal information which should be managed scrupulously.\r\n\r\n## ML.NET telemetry (Added day later)\r\nmlnet cli tool uses this messaging: \"The data is anonymous and doesn't include personal information or data from your datasets.\" which is also inaccurate and somewhat misleading. Calling this dataset as containing anonymous data and not containing personal information is false. Also I wasn't aware that mlnet cli is going to use telemetry. Therefore I disabled it only after I runned it for the first time with quickstart example. Basic `mlnet` command doesn't tell you about telemetry. That is a bit concerning.\r\n\r\n## Opinion\r\nIMHO some variant of the 99% anonymised(as in nearly impossible to cross-check, correlate) telemetry makes sense for usage metrics... This data used by dotnet, mlnet is not so much anonymous. Sharing publicly only portion of the data leads to different conclusions about the planned usage of the data.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11311","RelatedDescription":"Open issue \"Telemetry message wording is \"inaccurate\"\" (#11311)"},{"Id":"442422879","IsPullRequest":true,"CreatedAt":"2019-05-09T23:49:47","Actor":"livarcocc","Number":"11308","RawContent":null,"Title":"Updating SDK to 2.2.300-preview-64109-01","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11308","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.2.300-preview-64109-01\" (#11308)"},{"Id":"442453651","IsPullRequest":false,"CreatedAt":"2019-05-09T23:23:55","Actor":"VidyaKukke","Number":"11310","RawContent":null,"Title":"dotnet pack version not working","State":"closed","Body":"I have updated this thread - https://github.com/dotnet/cli/issues/11307 \r\n\r\nI'm confused with the Issue workflow. I looked 3 hrs later. A solution is proposed (which does not work) but the original thread is closed. Not sure why. Typically you wait for an ACK or at least for a day before closing.  Can we keep this thread opened for 24hrs at least or until you get a confirmation (whichever happens first) of whether the proposed solution actually worked and unblocked customer!\r\n","Url":"https://github.com/dotnet/cli/issues/11310","RelatedDescription":"Closed issue \"dotnet pack version not working\" (#11310)"},{"Id":"441198515","IsPullRequest":true,"CreatedAt":"2019-05-09T19:31:08","Actor":"vagisha-nidhi","Number":"11295","RawContent":null,"Title":"TestPlatform insertion 16.1.0","State":"closed","Body":"Release : [https://github.com/microsoft/vstest/releases/tag/v16.1.0](https://github.com/microsoft/vstest/releases/tag/v16.1.0)","Url":"https://github.com/dotnet/cli/pull/11295","RelatedDescription":"Closed or merged PR \"TestPlatform insertion 16.1.0\" (#11295)"},{"Id":"442202012","IsPullRequest":true,"CreatedAt":"2019-05-09T18:45:43","Actor":"dotnet-maestro[bot]","Number":"11305","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190508.2\r\n- **Date Produced**: 5/9/2019 12:04 AM\r\n- **Commit**: bf673b43674f9f3a1bf9b02020fcfeb040150e20\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19258.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11305","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11305)"},{"Id":"441924333","IsPullRequest":true,"CreatedAt":"2019-05-09T14:57:09","Actor":"nugetlurker","Number":"11304","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11304","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11304)"},{"Id":"442229376","IsPullRequest":false,"CreatedAt":"2019-05-09T13:12:02","Actor":"PDostalek","Number":"11306","RawContent":null,"Title":"[loc][Query][Cli] Localizability of \"LocalOptionDescription\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nUpdate the tool and update from the local tool manifest.\r\n\r\nFile Name:\r\ndotnet\\commands\\dotnet-tool\\update\\xlf\\LocalizableStrings.xlf\r\n\r\n==========================================\r\nQuery:\r\nDoes this simply mean \"Update the tool from the local tool manifest.\"?","Url":"https://github.com/dotnet/cli/issues/11306","RelatedDescription":"Open issue \"[loc][Query][Cli] Localizability of \"LocalOptionDescription\"\" (#11306)"},{"Id":"441701383","IsPullRequest":true,"CreatedAt":"2019-05-08T22:15:08","Actor":"dotnet-maestro[bot]","Number":"11302","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190507.2\r\n- **Date Produced**: 5/7/2019 11:34 PM\r\n- **Commit**: 90e8a529be026d06fc8965d460927193aca5b005\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19257.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11302","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11302)"},{"Id":"441924299","IsPullRequest":true,"CreatedAt":"2019-05-08T22:14:29","Actor":"nugetlurker","Number":"11303","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11303","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11303)"},{"Id":"441400504","IsPullRequest":true,"CreatedAt":"2019-05-08T18:32:58","Actor":"johnbeisner","Number":"11298","RawContent":null,"Title":"Add support for Microsoft.WindowsDesktop.App","State":"closed","Body":"Addresses: https://github.com/dotnet/cli/issues/11115\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11298","RelatedDescription":"Closed or merged PR \"Add support for Microsoft.WindowsDesktop.App\" (#11298)"},{"Id":"441201235","IsPullRequest":true,"CreatedAt":"2019-05-08T12:53:52","Actor":"dotnet-maestro[bot]","Number":"11296","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 12:51 PM\r\n- **Commit**: cd674b5a80db00833c02a8832ab1e41df45bc97c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19256.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190507.1\r\n- **Date Produced**: 5/7/2019 1:09 PM\r\n- **Commit**: d4ad9da23e6ad6eab3bb71d1080da1120cf7d2cf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19257.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11296","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11296)"},{"Id":"441661078","IsPullRequest":false,"CreatedAt":"2019-05-08T10:22:28","Actor":"HassanHashemi","Number":"11301","RawContent":null,"Title":"dotnet publish prefers files from dependency over local file","State":"open","Body":"I am not sure if this is a bug or by design, though it looks like a bug.\r\n\r\n## Steps to reproduce\r\n1. Create two **exe** projects **A** and **B**\r\n2. Reference A from B\r\n3. Add a file with same name (eg. Dockerfile) to root of both projects and set build action to **Content** and Copy if newer\r\n4. publish project B\r\n\r\n## Expected  behavior\r\noutput folder should contain **B**`s Dockerfile which is the project being published.\r\n\r\n## Actual behavior\r\noutput folder contains **A**`s Dockerfile which is **B**'s dependency\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nVersion: 2.2.203\r\nOS: Ubuntu 18.04\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11301","RelatedDescription":"Open issue \"dotnet publish prefers files from dependency over local file\" (#11301)"},{"Id":"441421129","IsPullRequest":false,"CreatedAt":"2019-05-07T20:02:04","Actor":"wli3","Number":"11300","RawContent":null,"Title":"Global tools shim does not have PE bits","State":"open","Body":"in 2 places\r\n\r\n- [ ] https://github.com/dotnet/cli/blob/master/src/dotnet/ShellShim/AppHostShimMaker.cs#L46\r\n- [ ] https://github.com/dotnet/sdk/blob/ab0f40a205d29725e02db2de2b330059d1fb7272/src/Tasks/Microsoft.NET.Build.Tasks/GenerateShims.cs#L105\r\n\r\n1. https://github.com/dotnet/core-setup/issues/6338 move apphost creating logic to a central place\r\n2. remove the code in SDK and CLI\r\n2. let these 2 places call with intermediateAssembly param","Url":"https://github.com/dotnet/cli/issues/11300","RelatedDescription":"Open issue \"Global tools shim does not have PE bits\" (#11300)"},{"Id":"441400735","IsPullRequest":false,"CreatedAt":"2019-05-07T19:07:33","Actor":"KathleenDollard","Number":"11299","RawContent":null,"Title":"DotNet tools fail to with `dotnet run` or VS F5","State":"open","Body":"@wli3 \r\n\r\n## Steps to reproduce\r\n* Create a console application targeting .NET Core 3.0\r\nF5 in Visual Studio or dotnet run at the command line\r\nIt works\r\n* Add  `<PackAsTool>true</PackAsTool>`\r\nF5 or dotnet run\r\nFailure (\"... debug profile does not exist\" in VS, ...File not found... at command line\r\n* Change to  target 2.1\r\nIt works\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010050 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009768 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10663 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10663 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27117-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27119-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11299","RelatedDescription":"Open issue \"DotNet tools fail to with `dotnet run` or VS F5\" (#11299)"},{"Id":"440823219","IsPullRequest":true,"CreatedAt":"2019-05-07T17:41:05","Actor":"nugetlurker","Number":"11294","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11294","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into cli\" (#11294)"},{"Id":"440823182","IsPullRequest":true,"CreatedAt":"2019-05-07T17:40:49","Actor":"nugetlurker","Number":"11293","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11293","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into cli\" (#11293)"},{"Id":"441224668","IsPullRequest":false,"CreatedAt":"2019-05-07T13:11:29","Actor":"tplourdelincoln","Number":"11297","RawContent":null,"Title":"dotnet publish returns Error MSB4062 \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly ","State":"open","Body":"We have an ASP.NET Core 2.1 application using the full framework (4.7) that references a .NET 4.6 class library that make SOAP calls (WebReference).  Since 2016 we've been able to run `dotnet publish` in our CI process with no issues with VS 2017.  Once we installed VS2019 on the same host this stopped working.  \r\n\r\nWe suspect it's a problem with the `dotnet` CLI deciding which version of MSBuild to run.\r\n\r\nWe understand that there are some work-arounds that seem to get past it such as setting `<GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>` (which we don't want to do) and it seems that running MSBuild directly instead of `dotnet publish` works but we wanted to report this issue here.\r\n\r\n## Steps to reproduce\r\n* Use a windows machine with VS 2017 Pro (v15.9.11) and VS 2019 Pro (16.0.2) installed, both with web workloads\r\n* Create a solution with two projects:\r\n    * ASP.NET Core 2.1 with .NET Framework 4.7 which references a...\r\n    * .NET 4.6 Class Library Project\r\n* Add a Web Reference to the class library project (i.e.http://www.dneonline.com/calculator.asmx)\r\n* Run `dotnet publish --configuration Release -out c:\\temp\\foo`\r\n\r\nHere is a [repo with an example](https://github.com/tplourdelincoln/DotnetPublish2019BugDemo).\r\n\r\n## Expected  behavior\r\nThe publish operation works\r\n\r\n## Actual behavior\r\nThis error is thrown:\r\n```\r\nc:\\code\\sandbox\\PublishBugExample\\PublishBugExample>dotnet publish --configuration Release -o c:\\temp\\bug-demo\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 65.03 ms for c:\\code\\sandbox\\PublishBugExample\\PublishBugExample\\PublishBugExample.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.602\\Microsoft.Common.CurrentVersion.targets(3541,5): error MSB4062: The \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [c:\\code\\sandbox\\PublishBugExample\\ExampleWebServiceLib\\ExampleWebServiceLib.csproj]\r\n```\r\n\r\n## More info\r\n\r\nIt seems that running MSBuild works however and the publish output is almost identical compared to when `dotnet publish` was ran in the past:\r\n\r\n`\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\msbuild\" /t:Publish /p:Configuration=Release;Out-Dir=C:\\temp\\foo`\r\n\r\nAccording to our build logs, the last successful time `dotnet publish` ran (before VS 2019 was installed), it reported using `Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core` you'll notice in the output above it reports using `16.0.450+ga8dc7f1d34 for .NET Core`.\r\n\r\nIf `dotnet publish` is not the recommended way of publishing such configurations please provide guidance.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.602\r\n Commit:    04475eb7cf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.602\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11297","RelatedDescription":"Open issue \"dotnet publish returns Error MSB4062 \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly \" (#11297)"},{"Id":"440667634","IsPullRequest":true,"CreatedAt":"2019-05-07T12:07:59","Actor":"dotnet-maestro[bot]","Number":"11289","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 3:14 PM\r\n- **Commit**: d6485643ff1ffbed005f640ccd142c549422bb01\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19255.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11289)"},{"Id":"440812651","IsPullRequest":true,"CreatedAt":"2019-05-07T04:55:37","Actor":"rainersigwald","Number":"11292","RawContent":null,"Title":"MSBuild 16.1.73","State":"closed","Body":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376.","Url":"https://github.com/dotnet/cli/pull/11292","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.73\" (#11292)"},{"Id":"440812007","IsPullRequest":true,"CreatedAt":"2019-05-07T04:55:18","Actor":"rainersigwald","Number":"11291","RawContent":null,"Title":"MSBuild 16.1.73 (2.1.7xx)","State":"closed","Body":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376.","Url":"https://github.com/dotnet/cli/pull/11291","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.73 (2.1.7xx)\" (#11291)"},{"Id":"440637303","IsPullRequest":false,"CreatedAt":"2019-05-07T03:19:02","Actor":"YunWeiaa","Number":"11288","RawContent":null,"Title":"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.","State":"closed","Body":"## Steps to reproduce\r\n1. Create empty directory\r\n2. Copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n    \"version\": 1,\r\n    \"isRoot\": true,\r\n    \"tools\": {\r\n        \"t-rex\": {\r\n            \"version\": \"1.0.53\",\r\n            \"commands\": [\"t-rex\"]\r\n        },\r\n        \"dotnetsay\": {\r\n            \"version\": \"2.1.4\",\r\n            \"commands\": [\"dotnetsay\"]\r\n        }\r\n    }\r\n}\r\n\r\n3. cd to the directory with manifest file\r\n4. Run  dotnet tool run t-rex -- -h\r\n5. It should show error. Follow the instruction from the error\r\n6. Run dotnet tool run t-rex -- -h again\r\n\r\n## Expected  behavior\r\nIt should show help from t-rex\r\n\r\n\r\n## Actual behavior\r\nRun dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\r\n![image](https://user-images.githubusercontent.com/33921754/57220293-5f867f80-702d-11e9-8ae3-1f3e76372612.png)\r\n\r\n\r\n## Environment data\r\nD16.1/28902.138(16.1.0 preview3.0)+ CLI/SDK: 3.0.100-preview6-011765\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview6-011765\r\n Commit:    fffa58a7df\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011765\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27705-13\r\n  Commit:  ccea80903e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-011765 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19255-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11288","RelatedDescription":"Closed issue \"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\" (#11288)"},{"Id":"440410064","IsPullRequest":true,"CreatedAt":"2019-05-06T20:52:31","Actor":"dsychin","Number":"11287","RawContent":null,"Title":"Update warning message for dotnet tool update and uninstall","State":"closed","Body":"Fixes #9650\r\nChanged warning message when tool is not found to include more information about package Ids and tool names.","Url":"https://github.com/dotnet/cli/pull/11287","RelatedDescription":"Closed or merged PR \"Update warning message for dotnet tool update and uninstall\" (#11287)"},{"Id":"440670842","IsPullRequest":true,"CreatedAt":"2019-05-06T16:16:41","Actor":"dotnet-maestro[bot]","Number":"11290","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 12:46 PM\r\n- **Commit**: 588389e83475cb3d1fac5231103f5d08737cef8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19255.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11290","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11290)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"439143422","IsPullRequest":true,"CreatedAt":"2019-05-10T20:25:17","Actor":"dotnet-maestro[bot]","Number":"1172","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 5:27 PM\r\n- **Commit**: 917ed3ac79350e4072c724deb48404ee7d76ebef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.4\r\n- **Date Produced**: 5/6/2019 9:02 PM\r\n- **Commit**: fe003f91e82195c5657c79ffa8d2831c9f07c9dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19258.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19259.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1172)"},{"Id":"442864446","IsPullRequest":true,"CreatedAt":"2019-05-10T19:31:23","Actor":"wtgodbe","Number":"1185","RawContent":null,"Title":"Fail CI build if APICompat baseline files would change","State":"open","Body":"Currently, if a change in Arcade would cause changes in the APICompat baseline files, the baseline files are rewritten without throwing an error. If somebody makes such a change without checking in the changes to the APICompat baselines, the CI should fail. This change achieves that. Resolves https://github.com/dotnet/standard/issues/1184.\r\n\r\n@ericstj @terrajobst PTAL","Url":"https://github.com/dotnet/standard/pull/1185","RelatedDescription":"Open PR \"Fail CI build if APICompat baseline files would change\" (#1185)"},{"Id":"442475952","IsPullRequest":false,"CreatedAt":"2019-05-09T23:26:27","Actor":"wtgodbe","Number":"1184","RawContent":null,"Title":"Fail CI when APICompat Baseline files change","State":"open","Body":"Right now, when a change to Standard causes a change to the APICompat baseline(s), the build succeeds, and the baseline files are re-written with the change. In CI, we should fail the build on changes to the APICompat baseline files (rather than silently rewriting them).\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1184","RelatedDescription":"Open issue \"Fail CI when APICompat Baseline files change\" (#1184)"},{"Id":"442461759","IsPullRequest":true,"CreatedAt":"2019-05-09T22:26:30","Actor":"terrajobst","Number":"1183","RawContent":null,"Title":"Seal types that cannot be inherited","State":"open","Body":"These changes are related to #1176 and address the same problem.\r\n\r\nFixes #1171.","Url":"https://github.com/dotnet/standard/pull/1183","RelatedDescription":"Open PR \"Seal types that cannot be inherited\" (#1183)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-09T21:46:08","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"closed","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Closed or merged PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"442425601","IsPullRequest":true,"CreatedAt":"2019-05-09T21:41:45","Actor":"joperezr","Number":"1182","RawContent":null,"Title":"Fix official build which is failing when trying to publish the packages to BAR","State":"closed","Body":"cc: @wtgodbe \r\n\r\nOfficial builds are failing when trying to publish packages to BAR because the AssetsManifest file isn't being generated any longer. This was caused because of a breaking change in Arcade. These changes will fix this issue.","Url":"https://github.com/dotnet/standard/pull/1182","RelatedDescription":"Closed or merged PR \"Fix official build which is failing when trying to publish the packages to BAR\" (#1182)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-09T20:13:26","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"closed","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Closed or merged PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"442368786","IsPullRequest":true,"CreatedAt":"2019-05-09T19:01:19","Actor":"joperezr","Number":"1181","RawContent":null,"Title":"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions","State":"closed","Body":"cc: @stephentoub @terrajobst \r\n\r\nResponding to changes made by https://github.com/dotnet/corefx/pull/37367 where the extnsion methods where moved to a new type. This is the first time I make a change like this so please do let me know if I missed anything.","Url":"https://github.com/dotnet/standard/pull/1181","RelatedDescription":"Closed or merged PR \"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions\" (#1181)"},{"Id":"441943870","IsPullRequest":true,"CreatedAt":"2019-05-08T21:39:57","Actor":"wtgodbe","Number":"1180","RawContent":null,"Title":"Add shims to netstandard2.1 for types that used to have OOB packages","State":"open","Body":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs ","Url":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Open PR \"Add shims to netstandard2.1 for types that used to have OOB packages\" (#1180)"},{"Id":"439351218","IsPullRequest":true,"CreatedAt":"2019-05-08T17:55:44","Actor":"wtgodbe","Number":"1173","RawContent":null,"Title":"Update to the 3.0 SDK","State":"closed","Body":"CC @ViktorHofer @ericstj. This also contains a maestro update of Arcade dependencies.","Url":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Closed or merged PR \"Update to the 3.0 SDK\" (#1173)"},{"Id":"441500740","IsPullRequest":false,"CreatedAt":"2019-05-08T00:36:05","Actor":"PHuhn","Number":"1179","RawContent":null,"Title":"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework","State":"open","Body":"Thanks for creating .Net Standard...\r\n\r\nI am attempting to migrate my .Net Framework libraries to .Net Standard, so my libraries will be available in .Net Framework and .Net Core. One of the libraries is using DataAnnotations as follows:\r\n```\r\npublic partial class LogData\r\n{\r\n    [Key, Column(Order = 1)]\r\n    [Required(ErrorMessage = \"Id is required.\")]\r\n    public long Id { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Date is required.\")]\r\n    public DateTime Date { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Application is required.\"), MaxLength(30, ErrorMessage = \"'Application' must be 30 or less characters.\")]\r\n    public string Application { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Method is required.\"), MaxLength(255, ErrorMessage = \"'Method' must be 255 or less characters.\")]\r\n    public string Method { get; set; }\r\n\r\n    [Required(ErrorMessage = \"LogLevel is required.\")]\r\n    [Range(typeof(byte), \"0\", \"4\", ErrorMessage = \"'LogLevel' must be between 0 and 4\")]\r\n    public byte LogLevel { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Level is required.\"), MaxLength(8, ErrorMessage = \"'Level' must be 8 or less characters.\")]\r\n    public string Level { get; set; }\r\n\r\n    [Required(ErrorMessage = \"UserAccount is required.\"), MaxLength(255, ErrorMessage = \"'UserAccount' must be 255 or less characters.\")]\r\n    public string UserAccount { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Message is required.\"), MaxLength(4000, ErrorMessage = \"'Message' must be 4000 or less characters.\")]\r\n    public string Message { get; set; }\r\n\r\n    [MaxLength(4000, ErrorMessage = \"'Exception' must be 4000 or less characters.\")]\r\n    public string Exception { get; set; }\r\n}\r\n```\r\nThe migration **up** method in the .Net Core console applications is as follows:\r\n```\r\nmigrationBuilder.CreateTable(\r\n    name: \"Logs\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<long>(nullable: false)\r\n            .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n        Date = table.Column<DateTime>(nullable: false),\r\n        Application = table.Column<string>(maxLength: 30, nullable: false),\r\n        Method = table.Column<string>(maxLength: 255, nullable: false),\r\n        LogLevel = table.Column<byte>(nullable: false),\r\n        Level = table.Column<string>(maxLength: 8, nullable: false),\r\n        UserAccount = table.Column<string>(maxLength: 255, nullable: false),\r\n        Message = table.Column<string>(maxLength: 4000, nullable: false),\r\n        Exception = table.Column<string>(maxLength: 4000, nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Logs\", x => x.Id);\r\n    });\r\n```\r\nThis as I would expect it to be.\r\n\r\nThe migration **up** method in the .Net Framework console applications is as follows:\r\n```\r\nCreateTable(\r\n    \"dbo.Logs\",\r\n    c => new\r\n        {\r\n            Id = c.Long(nullable: false, identity: true),\r\n            Date = c.DateTime(nullable: false),\r\n            Application = c.String(),\r\n            Method = c.String(),\r\n            LogLevel = c.Byte(nullable: false),\r\n            Level = c.String(),\r\n            UserAccount = c.String(),\r\n            Message = c.String(),\r\n            Exception = c.String(),\r\n        })\r\n    .PrimaryKey(t => t.Id);\r\n```\r\nThis is lacking the various length constraints.  Is this the intended output?\r\n\r\nI have attached a test solution. It has three projects as follows:\r\n*\tNSG.LogData (.NetStandard library containing annotated-data class),\r\n*\tNSG.ConsoleCore (.Net Core console project, that includes NSG.LogData library, and creates a code-first database),\r\n*\tNSG.ConsoleNet (.Net Framework console project, that includes NSG.LogData library, and creates a code-first database).\r\n\r\nPackage installation for NSG.ConsoleCore:\r\n\r\n\tInstall-Package Microsoft.EntityFrameworkCore.SqlServer\r\n\tInstall-Package Microsoft.EntityFrameworkCore.Tools\r\n\r\nMigration command for NSG.ConsoleCore:\r\n\r\n\tEntityFrameworkCore\\Add-Migration -name InitialCreate -Project NSG.ConsoleCore -StartupProject NSG.ConsoleCore\r\n\r\nMigration command for NSG.ConsoleNet:\r\n\r\n\tEntityFramework\\Add-Migration -name InitialCreate -Project NSG.ConsoleNet -StartupProject NSG.ConsoleNet\r\n\r\n\r\n\r\n\r\n[NSG.DataAnnotations.zip](https://github.com/dotnet/standard/files/3154973/NSG.DataAnnotations.zip)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1179","RelatedDescription":"Open issue \"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework\" (#1179)"},{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"open","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Open issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"},{"Id":"438892784","IsPullRequest":false,"CreatedAt":"2019-04-30T17:32:25","Actor":"ericstj","Number":"1171","RawContent":null,"Title":"BaseNumberConverter should be effectively sealed","State":"open","Body":"See https://github.com/dotnet/corefx/pull/37278\r\n\r\nBaseNumberConverter shouldn't be derivable.  On desktop it's a compile error.  Since netstandard.dll doesn't include internal members it permits compile, but fails at runtime for most frameworks since internal abstract members are not overridden.\r\n\r\n/cc @Anipik ","Url":"https://github.com/dotnet/standard/issues/1171","RelatedDescription":"Open issue \"BaseNumberConverter should be effectively sealed\" (#1171)"},{"Id":"438281734","IsPullRequest":true,"CreatedAt":"2019-04-30T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1170","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19229.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1170)"},{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-21T18:54:16","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"442934760","IsPullRequest":true,"CreatedAt":"2019-05-11T00:28:19","Actor":"carlossanlop","Number":"37601","RawContent":null,"Title":"Fix bug in ZipArchiveEntry data descriptor","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/29872\r\n\r\nWhen a zip file is created using an unseekable stream, the data descriptor bit is turned on. If we update that same zip file, we should expect the data descriptor to get turned off. If it doesn't get turned off, the file gets in a bad state: we can open it with File Explorer or 7-Zip without problems, but we cannot drag-drop files into that zip file anymore; those programs say the file is corrupted.\r\n\r\nAdded a unit test to verify the data descriptor value is the expected one in the first local file header, after creating a zip file with an unseekable stream and after updating the zip file.","Url":"https://github.com/dotnet/corefx/pull/37601","RelatedDescription":"Open PR \"Fix bug in ZipArchiveEntry data descriptor\" (#37601)"},{"Id":"442479303","IsPullRequest":true,"CreatedAt":"2019-05-11T00:11:59","Actor":"GrabYourPitchforks","Number":"37576","RawContent":null,"Title":"Remove use of embedded binary file in Encodings.Web, update to Unicode 12.1","State":"closed","Body":"This PR makes the following changes to the __System.Text.Encodings.Web__ project:\r\n\r\n1. Removes the use of the embedded Unicode data resource, opting instead to use the new C# language syntax for including static binary data as a `ReadOnlySpan<byte>`.\r\n2. Renames some files to better reflect the namespace hierarchy within the runtime project.\r\n3. Adds tools which can be used to update the Unicode character and range data used internally by the project.\r\n4. Uses the newly-introduced tools to update the data from Unicode 8.0.0 to Unicode 12.1.0.\r\n\r\nThe final \"update\" step is a separate commit within this PR so that it's easier to see just what changes were made as part of the initial refactoring vs. part of updating the Unicode specification.\r\n\r\nAside from updating the version of Unicode honored by the system (and the corresponding auto-generated APIs that fall out of that), there are no behavioral changes to the project as part of this PR.","Url":"https://github.com/dotnet/corefx/pull/37576","RelatedDescription":"Closed or merged PR \"Remove use of embedded binary file in Encodings.Web, update to Unicode 12.1\" (#37576)"},{"Id":"442928796","IsPullRequest":true,"CreatedAt":"2019-05-10T23:42:50","Actor":"joperezr","Number":"37600","RawContent":null,"Title":"Update packageIndex.json with packages from release branches","State":"open","Body":"Updating packageIndex to include stuff shipped in release/2.1 and release/2.2 branches.\r\n\r\ncc: @ahsonkhan @ericstj \r\n\r\n@ahsonkhan @GrabYourPitchforks As FYI this change will make it such that all new packages built out of master (includding System.Text.Json and Encodings.Web) will get the latest version of System.Memroy which will have the fix for the binding redirect problem.","Url":"https://github.com/dotnet/corefx/pull/37600","RelatedDescription":"Open PR \"Update packageIndex.json with packages from release branches\" (#37600)"},{"Id":"442927081","IsPullRequest":false,"CreatedAt":"2019-05-10T23:30:41","Actor":"alexkeh","Number":"37599","RawContent":null,"Title":"Failure during SSL handshake - .NET Core on macOS","State":"open","Body":"We are testing Oracle's ADO.NET provider for .NET Core on macOS. I'm on the Oracle team myself and am looking for some direction on whether this is a .NET Core bug or something my team needs to change to support Apple SSL.\r\n\r\nThe provider hits a failure during SSL handshake. We have tested on Windows and Linux with TLS/SSL successfully with the same code.\r\n\r\nWe are using .NET Core 2.2.105, macOS 10.13.6, and TLS 1.2. The full stack trace is below.\r\n\r\nUnhandled Exception: Oracle.ManagedDataAccess.Client.OracleException: ORA-00542: Failure during SSL handshake ---> OracleInternal.Network.NetworkException: ORA-00542: Failure during SSL handshake ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception. ---> Interop+AppleCrypto+SslException: handshake failure\r\n\r\n   --- End of inner exception stack trace ---\r\n\r\n   at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n\r\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)\r\n\r\n   at System.Net.Security.SslStream.AuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions)\r\n\r\n   at System.Net.Security.SslStream.AuthenticateAsClient(String targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation)\r\n\r\n   at OracleInternal.Network.TcpsTransportAdapter.Negotiate(ConnectionOption conOption)\r\n\r\n   --- End of inner exception stack trace ---\r\n\r\n   at OracleInternal.Network.OracleCommunication.DoConnect(String tnsDescriptor)\r\n\r\n   at OracleInternal.ServiceObjects.OracleConnectionImpl.Connect(ConnectionString cs, Boolean bOpenEndUserSession, OracleConnection connRefForCriteria, String instanceName)\r\n\r\n   --- End of inner exception stack trace ---\r\n\r\n   at OracleInternal.ConnectionPool.PoolManager`3.Get(ConnectionString csWithDiffOrNewPwd, Boolean bGetForApp, OracleConnection connRefForCriteria, String affinityInstanceName, Boolean bForceMatch)\r\n\r\n   at OracleInternal.ConnectionPool.OraclePoolManager.Get(ConnectionString csWithNewPassword, Boolean bGetForApp, OracleConnection connRefForCriteria, String affinityInstanceName, Boolean bForceMatch)\r\n\r\n   at OracleInternal.ConnectionPool.OracleConnectionDispenser`3.Get(ConnectionString cs, PM conPM, ConnectionString pmCS, SecureString securedPassword, SecureString securedProxyPassword, OracleConnection connRefForCriteria)\r\n\r\n   at Oracle.ManagedDataAccess.Client.OracleConnection.Open()\r\n\r\n   at ODPC.Program.Main(String[] args) in /<directory location>/Program.cs:line 12","Url":"https://github.com/dotnet/corefx/issues/37599","RelatedDescription":"Open issue \"Failure during SSL handshake - .NET Core on macOS\" (#37599)"},{"Id":"442927016","IsPullRequest":false,"CreatedAt":"2019-05-10T23:30:10","Actor":"chrisahill","Number":"37598","RawContent":null,"Title":"UWP -> PKI Certificates -> System.Net.Http.HttpClient vs Windows.Web.Http.HttpClient","State":"open","Body":"**Use Case**\r\nBuilding enterprise UWP application which user will enter url to their on premise enterprise server to connect. User has to enter in the url to their server, UWP has to authenticate against that endpoint without knowing anything about the credentials before hand, just like a web browser would.\r\n\r\n**Issue**\r\nDepending on your which HTTP client use use you get a different user experience. When using `Windows.Web.Http.HttpClient` Windows 10 native UI prompt will appear allowing the User to select from multiple certificates. However, using the equivalent call with  `System.Net.Http.HttpClient` having `ClientHandler.ClientCertificateOptions` set to `Automatic` the behavior becomes Windows will select the first matching certificate even if there are multiple matching certs and send that certificate, which will result in the request failing `Error code 403` if that certificate was not the correct one. \r\n\r\n**Responses to obvious questions**\r\n**Q:** Why not just use `Windows.Web.Http` then?\r\n**A:** We are building on an SDK that supports `Xamarin.Android`, `Xamarin.iOS`, `WPF` and `UWP`. According to Microsoft the `System.Net.Http` implementation now uses `Windows.Web.Http` so, when you build cross platform you should just use `System.Net.Http` \r\n[Demystifying HttpClient APIs in the Universal Windows Platform](https://blogs.windows.com/buildingapps/2015/11/23/demystifying-httpclient-apis-in-the-universal-windows-platform/#jaOQr4K6fwebrvgh.97)\r\n\r\n**Argument**\r\nIf `System.Net.Http` is meant to be just a tunnel to `Windows.Web.Http` then there needs to be an equivalent way to invoke native windows 10 security prompts when building UWP apps against `System.Net.Http` The below code examples are as close to equivalent as you can write but don't invoke the same behavior.\r\n\r\n**Windows.Web.Http**\r\n```C#\r\nvar httpClient = new Windows.Web.Http.HttpClient();\r\nvar json = await httpClient.GetStringAsync(new Uri(\"<pki_secured_rest_endpoint>\"));\r\n````\r\n\r\n**System.Net.Http**\r\n```C#\r\nvar httpClientHandler = new System.Net.Http.HttpClientHandler();\r\nhttpClientHandler.ClientCertificateOptions = System.Net.Http.ClientCertificateOption.Automatic;\r\nvar httpClient = new System.Net.Http.HttpClient(httpClientHandler);\r\nvar json = await httpClient.GetStringAsync(new Uri(\"<pki_secured_rest_endpoint>\"));\r\n```","Url":"https://github.com/dotnet/corefx/issues/37598","RelatedDescription":"Open issue \"UWP -> PKI Certificates -> System.Net.Http.HttpClient vs Windows.Web.Http.HttpClient\" (#37598)"},{"Id":"442926209","IsPullRequest":false,"CreatedAt":"2019-05-10T23:24:56","Actor":"wfurt","Number":"37597","RawContent":null,"Title":"System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException hangin in CI on OSX","State":"open","Body":"https://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190510.1/workItem/System.IO.Pipes.Tests/wilogs\r\n\r\n\r\n\r\n```\r\n===========================================================================================================\r\n~/dotnetbuild/work/8724275f-e899-49b1-80e5-d1466718e96d/Work/2b03d320-e9a3-4ea4-92f2-d3c05ec7efaf/Exec ~/dotnetbuild/work/8724275f-e899-49b1-80e5-d1466718e96d/Work/2b03d320-e9a3-4ea4-92f2-d3c05ec7efaf/Exec\r\n  Discovering: System.IO.Pipes.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.IO.Pipes.Tests (found 396 of 463 test cases)\r\n  Starting:    System.IO.Pipes.Tests (parallel test collections = on, max threads = 4)\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:02:03\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:04:04\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:06:05\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:08:06\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:10:07\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:12:08\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:14:09\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37597","RelatedDescription":"Open issue \"System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException hangin in CI on OSX\" (#37597)"},{"Id":"442898840","IsPullRequest":true,"CreatedAt":"2019-05-10T21:20:12","Actor":"yujayee","Number":"37596","RawContent":null,"Title":"Fix a bug in xsd validation during deserialization","State":"open","Body":"Fixes #36819","Url":"https://github.com/dotnet/corefx/pull/37596","RelatedDescription":"Open PR \"Fix a bug in xsd validation during deserialization\" (#37596)"},{"Id":"442896054","IsPullRequest":false,"CreatedAt":"2019-05-10T21:10:35","Actor":"bartonjs","Number":"37595","RawContent":null,"Title":"RSAOpenSsl seems to allow inconsistent values to ImportParameters","State":"open","Body":"When the Modulus and Exponent are from one key, and the private parameters are from a key of a completely different size, the import shouldn't succeed, but does.\r\n\r\nThe key is in an obviously inconsistent state at that point, maybe it's deferring the check to first use... but we should lift it up to fail the import (and have parity with the other OSes).","Url":"https://github.com/dotnet/corefx/issues/37595","RelatedDescription":"Open issue \"RSAOpenSsl seems to allow inconsistent values to ImportParameters\" (#37595)"},{"Id":"442492859","IsPullRequest":false,"CreatedAt":"2019-05-10T20:23:53","Actor":"moh-hassan","Number":"37579","RawContent":null,"Title":"Console.BufferHeight in netcoreapp2.1 raise Exception PlatformNotSupportedException in Ubuntu","State":"closed","Body":"\r\nI have a Console application build in dotnetcorapp2.1. It's running fine on Windows.\r\n\r\nWhen trying to run on Ubuntu it raise an Exception error:\r\n\r\n>System.PlatformNotSupportedException: Operation is not supported on this platform. at System.ConsolePal.set_BufferHeight(Int32 value)\r\n\r\nThat is because This line:\r\n\r\n     Console.BufferHeight = Int16.MaxValue - 1;\r\n\r\nThis [document ](https://docs.microsoft.com/en-us/dotnet/api/system.console.bufferheight?view=netcore-2.2)didn't mention the limitation that I take into account for Console.BufferHeight\r\n\r\n\r\nWhat is the limitation of Console.BufferHeight (and BufferWidth) on Ubuntu?\r\n","Url":"https://github.com/dotnet/corefx/issues/37579","RelatedDescription":"Closed issue \"Console.BufferHeight in netcoreapp2.1 raise Exception PlatformNotSupportedException in Ubuntu\" (#37579)"},{"Id":"442880355","IsPullRequest":false,"CreatedAt":"2019-05-10T20:20:54","Actor":"kmcclellan","Number":"37594","RawContent":null,"Title":"HttpClient returns OK when Protocol Negotiation fails","State":"open","Body":"Using `HttpClient` to send a request over a TLS connection results in an erroneous success status code when the connection is terminated due to ALPN failing.\r\n\r\nCircumstances:\r\n1) Client machine does not support HTTP/2 (Ubuntu 16.04 out of the box)\r\n2) Server requires HTTP/2 (Apple Push Notification Service)\r\n3) An HTTPS request is initiated with `HttpClient` (.NET Core 2.2)\r\n\r\n**Expected**: an exception explaining that the connection was terminated.\r\n**Actual**: request completes with 200 - OK success code.\r\n\r\nCode to reproduce:\r\n```c#\r\n// Switch to enable HTTP/2 in .NET Core 2.2\r\nAppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\r\n\r\n// Apple Push Notification Service requires HTTP/2\r\nusing (var client = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"https://api.push.apple.com\")\r\n})\r\n\r\n// If HTTP/2 is supported, this should return a 404\r\n// If not supported, an exception should be thrown (connection terminated)\r\nusing (var response = await client.PostAsync(\"bad/path\", null))\r\n{\r\n    Console.WriteLine($\"Response Status Code: {response.StatusCode}\");\r\n}\r\n```\r\nOutput:\r\n`Response Status Code: OK`\r\n\r\n.NET Core 2.2\r\nUbuntu 16.04","Url":"https://github.com/dotnet/corefx/issues/37594","RelatedDescription":"Open issue \"HttpClient returns OK when Protocol Negotiation fails\" (#37594)"},{"Id":"442844399","IsPullRequest":true,"CreatedAt":"2019-05-10T18:32:55","Actor":"bartonjs","Number":"37593","RawContent":null,"Title":"Add ToXmlString and FromXmlString implementations to RSA and DSA.","State":"open","Body":"The ToXmlString implementations produce output identical to .NET Framework.\r\n\r\nThe FromXmlString implementations are based on XDocument in Core, vs a\r\ncustom parser in Framework.  Additionally, the FromXmlString in Core can\r\nread values which (per the xmldsig spec) removed any leading zero-value\r\nbytes, whereas the Framework version can't.\r\n\r\nNo ToXmlString or FromXmlString is being added for ECDsa or\r\nECDiffieHellman, because these types have always thrown in .NET Framework.\r\nThe equivalent functionality was provided by an overload on ECDsaCng (and\r\nECDiffieHellmanCng) that took a format-type enum (with only one member\r\ndefined in it). Since that's not portable, and telemetry has never\r\nseen a caller of that method, they are being left as PNSE.\r\n\r\nFixes #23686.","Url":"https://github.com/dotnet/corefx/pull/37593","RelatedDescription":"Open PR \"Add ToXmlString and FromXmlString implementations to RSA and DSA.\" (#37593)"},{"Id":"442835165","IsPullRequest":false,"CreatedAt":"2019-05-10T18:06:33","Actor":"dbrownems","Number":"37592","RawContent":null,"Title":"SqlClient fails to convert decimal(38,20) to .Net decimal for values within the range of .Net's decimal type","State":"open","Body":"This program\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            using (var con = new SqlConnection(\"server=.;database=tempdb;Integrated Security=true\"))\r\n            {\r\n                con.Open();\r\n                var cmd = new SqlCommand(\"select cast(4210862852.86 as decimal(38,20))  val\", con);\r\n                using (SqlDataReader rdr = cmd.ExecuteReader())\r\n                {\r\n                    rdr.Read();\r\n\r\n                    var val = rdr.GetDecimal(0);\r\n                    Console.WriteLine(val);\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\nfails with \r\n\r\nSystem.OverflowException: 'Conversion overflows.'\r\n\r\nat [SqlBuffer.cs](https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBuffer.cs) line 254:\r\n\r\n```\r\n                if (StorageType.Decimal == _type)\r\n                {\r\n                    if (_value._numericInfo.data4 != 0 || _value._numericInfo.scale > 28)\r\n                    {\r\n                        throw new OverflowException(SQLResource.ConversionOverflowMessage);\r\n                    }\r\n```\r\nThis value is well within the range of a .NET decimal, and it's a value that the SqlClient can _write_ using a SqlParameter.  So it should be converted to .NET decimal. \r\n\r\nThe byte pattern in SQL and TDS for this value is:\r\n\r\n`0x261400010000D877FB4DEE8B51699A5005000000`\r\n\r\nAnd it looks like SqlBuffer refuses to convert any value with a non-zero value in the last 4 bytes.  But a .NET Decimal is stored as a 12-byte integer, along with a sign and a scaling factor.\r\n\r\nSo the apparent intent is to determine if the SqlDecimal uses a larger-than-12 byte integer and trigger the overflow.\r\n\r\nSo this conversion has a bug.  It looks like the SqlClient is confused on the byte ordering SQL Server is using, and the last 4 bytes of this buffer are not the 4 least-significant bytes of the 16-byte integer embedded in the decimal.  \r\n\r\nThis number requires uses 12 (base-10) decimal digits to store, so it requires fewer than 12 (base-256) bytes to store.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.decimal?redirectedfrom=MSDN&view=netframework-4.8","Url":"https://github.com/dotnet/corefx/issues/37592","RelatedDescription":"Open issue \"SqlClient fails to convert decimal(38,20) to .Net decimal for values within the range of .Net's decimal type\" (#37592)"},{"Id":"442829310","IsPullRequest":true,"CreatedAt":"2019-05-10T17:50:38","Actor":"Anipik","Number":"37591","RawContent":null,"Title":"Removing partial facades from netcoreapp\\uap reference assembly build","State":"open","Body":"Working Towards https://github.com/dotnet/arcade/issues/2736\r\n\r\nCurrently the Old GenFacades assembly rewriter task is responsible for removing these types from the dll and adding typeforwards in its place.\r\nAs we are moving away from using Microsoft.cci , we need to add them manually. We can do this using Genfacades sourceCode writer because its not intutive to eliminate the source code. It will also break the sourceLink","Url":"https://github.com/dotnet/corefx/pull/37591","RelatedDescription":"Open PR \"Removing partial facades from netcoreapp\\uap reference assembly build\" (#37591)"},{"Id":"442825231","IsPullRequest":false,"CreatedAt":"2019-05-10T17:40:17","Actor":"GrabYourPitchforks","Number":"37590","RawContent":null,"Title":"Add default interface methods to IEnumerable<T> and friends","State":"open","Body":"The interfaces `IEnumerable<T>` and `IEnumerator<T>` are ideal candidates for some of the existing interface methods to gain default implementations since many of the non-generic `IEnumerable` / `IEnumerator` methods simply wrap the generic versions and box the return value.\r\n\r\nProposal below. I may have gotten the syntax a bit wrong but you get the gist. :)\r\n\r\n```cs\r\npublic interface IEnumerable<T> : IEnumerable\r\n{\r\n    // existing non-default methods not shown\r\n\r\n    IEnumerator IEnumerable.GetEnumerator() => ((IEnumerable<T>)this).GetEnumerator();\r\n}\r\n\r\npublic interface IEnumerator\r\n{\r\n    // existing non-default methods not shown\r\n\r\n    void Dispose() { /* no-op */ }\r\n    void Reset() => throw new NotImplementedException();\r\n}\r\n\r\npublic interface IEnumerator<T> : IEnumerator\r\n{\r\n    // existing non-default methods not shown\r\n\r\n    object IEnumerator.Current => ((IEnumerator<T>)this).Current;\r\n}\r\n```\r\n\r\nThis would make it easier for devs writing custom enumerators since they'd need to write less boilerplate code. They could always choose to override the default implementations if desired, but these defaults would likely work for the 99% use case.\r\n\r\nHat tip to @agocke, who brainstormed this.","Url":"https://github.com/dotnet/corefx/issues/37590","RelatedDescription":"Open issue \"Add default interface methods to IEnumerable<T> and friends\" (#37590)"},{"Id":"442786855","IsPullRequest":false,"CreatedAt":"2019-05-10T16:57:04","Actor":"electricessence","Number":"37589","RawContent":null,"Title":"Regex Capture ReadOnlySpan<char> Why isn't this a thing yet? 3.0+","State":"closed","Body":"https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Capture.cs\r\n\r\nIt's seems like such a trivial add.  The `Capture` class already contains a reference to the original `Text`.  I actually thought this change would be in the 3.0 release. \r\n\r\nIs this a protective measure?  I obviously can create a span from the capture information, but it seems odd that I have the index and length but can't simply get a ReadOnlySpan<char> from it.\r\n\r\nIs this something planned for the future?","Url":"https://github.com/dotnet/corefx/issues/37589","RelatedDescription":"Closed issue \"Regex Capture ReadOnlySpan<char> Why isn't this a thing yet? 3.0+\" (#37589)"},{"Id":"442544104","IsPullRequest":true,"CreatedAt":"2019-05-10T16:08:20","Actor":"dotnet-maestro-bot","Number":"37581","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27710-00, beta-27710-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37581","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27710-00, beta-27710-00, respectively (master)\" (#37581)"},{"Id":"442742899","IsPullRequest":false,"CreatedAt":"2019-05-10T14:18:23","Actor":"javiercn","Number":"37588","RawContent":null,"Title":"Problems reading embedded resources using system.reflection.metadata","State":"open","Body":"As part of building a feature in ASP.NET Core I was using System.Reflection.Metadata to crack an assembly and extract an embedded resource to validate its contents (in a test).\r\n\r\nI was using a snippet from https://github.com/dotnet/corefx/issues/23372 to do so, and I kept seeing a test fail intermittently on debug build on OS X in our CI build.\r\n\r\nIt seemed like sometimes it extracted the resource correctly and some other times it produced garbage. I was able to capture one of the generated assemblies that caused a test failure and I was able to produce a minimal repro (see below).\r\n\r\n[resourceextractor.zip](https://github.com/dotnet/corefx/files/3166808/resourceextractor.zip)\r\n\r\nUpon debugging the repro a bit, I could see that the code used to calculate the offset to the resources was not correct and it was pointing past the resources directory. I can think one of 3 things are happening:\r\n* **There is a bug in peReader.TryGetDirectoryOffset.**\r\n* **The generated assembly on Mac OS is somehow malformed.****\r\n* The code snippet I used is not correct in all cases. (I can't tell for sure because it's the first time I use the API).\r\n\r\n![image](https://user-images.githubusercontent.com/6995051/57533201-0d29b500-72f2-11e9-9959-32c43e4664a9.png)\r\n\r\nAny ideas?","Url":"https://github.com/dotnet/corefx/issues/37588","RelatedDescription":"Open issue \"Problems reading embedded resources using system.reflection.metadata\" (#37588)"},{"Id":"442742336","IsPullRequest":false,"CreatedAt":"2019-05-10T14:17:07","Actor":"Tarig0","Number":"37587","RawContent":null,"Title":"Proposal: Add Iformattable implementation to string to use new C# range format","State":"open","Body":"With the coming C# ranges language feature it would be nice if the same syntax could be applied to a string using string.Format. This would allow for re-arranging of strings.\r\n\r\nexamples\r\n```c#\r\nstring.Format(\"{0:[8..]}IAM{0:[4..7]}{0:[2..3]}\", \"SomeSortofstring\");\r\nstring.Format(\"{0:[..^2]}Random{0:[^2..]}\", \"SomeSortofstring\");\r\nstring.Format(\"prefix{0:[0]}values{0:[1..9]}.{0:[^2..]}\", \"SomeSortofstring\");\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37587","RelatedDescription":"Open issue \"Proposal: Add Iformattable implementation to string to use new C# range format\" (#37587)"},{"Id":"442707925","IsPullRequest":true,"CreatedAt":"2019-05-10T13:00:11","Actor":"MarcoRossignoli","Number":"37586","RawContent":null,"Title":"[System.Text.Json] Fix bug complex properties","State":"open","Body":"fixes https://github.com/dotnet/corefx/issues/37536\r\nfixes https://github.com/dotnet/corefx/issues/37567\r\n\r\nSuggest me more test case if needed.\r\n\r\ncc: @steveharter @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/37586","RelatedDescription":"Open PR \"[System.Text.Json] Fix bug complex properties\" (#37586)"},{"Id":"442706714","IsPullRequest":true,"CreatedAt":"2019-05-10T12:57:22","Actor":"dotnet-maestro[bot]","Number":"37585","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190510.1\r\n- **Date Produced**: 5/10/2019 11:16 AM\r\n- **Commit**: d2be6e027cb7d128e710a8f2efa97fff82ecff20\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190510.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37585","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#37585)"},{"Id":"442695980","IsPullRequest":true,"CreatedAt":"2019-05-10T12:32:32","Actor":"dotnet-maestro[bot]","Number":"37584","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190509.10\r\n- **Date Produced**: 5/10/2019 5:16 AM\r\n- **Commit**: 441238d5a50ee3cb19179e93c2b94ec7b09ca214\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19259.10\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19259.10\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37584","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#37584)"},{"Id":"442650004","IsPullRequest":true,"CreatedAt":"2019-05-10T10:28:29","Actor":"filipnavara","Number":"37583","RawContent":null,"Title":" Use clonefile for CopyFile, if available","State":"open","Body":"Fixes #30865","Url":"https://github.com/dotnet/corefx/pull/37583","RelatedDescription":"Open PR \" Use clonefile for CopyFile, if available\" (#37583)"},{"Id":"442642807","IsPullRequest":false,"CreatedAt":"2019-05-10T10:10:49","Actor":"BeJoNe","Number":"37582","RawContent":null,"Title":"Why does SqlConnection() not directly accept an SqlConnectionStringBuilder ?","State":"open","Body":"Simply: why isn't there a constructor in SqlConnection which directly takes an SqlConnectionStringBuilder instance?\r\nWe have to use these patterns:\r\n\r\n```\r\nvar b = new SqlConnectionStringBuilder();\r\nb.xxx=yyy; // and more\r\nusing (var c = new SqlConnection(b.ToString())\r\n{}\r\n```\r\nor\r\n```\r\nvar b = new SqlConnectionStringBuilder();\r\nb.xxx=yyy; // and more\r\nusing (var c = new SqlConnection(b.ConnectionString))\r\n{}\r\n```\r\n\r\nwhy not directly:\r\n```\r\nvar b = new SqlConnectionStringBuilder();\r\nb.xxx=yyy; // and more\r\nusing (var c = new SqlConnection(b))\r\n{}\r\n```\r\nFor me, this would be **way more** straight forward...","Url":"https://github.com/dotnet/corefx/issues/37582","RelatedDescription":"Open issue \"Why does SqlConnection() not directly accept an SqlConnectionStringBuilder ?\" (#37582)"},{"Id":"442541811","IsPullRequest":false,"CreatedAt":"2019-05-10T05:15:10","Actor":"BennyTordrupVisma","Number":"37580","RawContent":null,"Title":"int? Sum(this IEnumerable<int?>) never returns null","State":"open","Body":"With the implementation of the  overload of IEnumerable.Sum that takes a list of nullable int as parameter and returns a nullable int, a null value is actually never returned.\r\n\r\n        public static int? Sum(this IEnumerable<int?> source)\r\n        {\r\n            if (source == null)\r\n            {\r\n                ThrowHelper.ThrowArgumentNullException(ExceptionArgument.source);\r\n            }\r\n\r\n            int sum = 0;\r\n            checked\r\n            {\r\n                foreach (int? v in source)\r\n                {\r\n                    if (v != null)\r\n                    {\r\n                        sum += v.GetValueOrDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return sum;\r\n        }\r\n\r\n\r\nThe same problem exists in other overloads taking nullable  parameters.","Url":"https://github.com/dotnet/corefx/issues/37580","RelatedDescription":"Open issue \"int? Sum(this IEnumerable<int?>) never returns null\" (#37580)"},{"Id":"442470408","IsPullRequest":true,"CreatedAt":"2019-05-10T03:01:59","Actor":"joperezr","Number":"37575","RawContent":null,"Title":"Adding typeforward to AsyncInterfaces now that the type has been added to netstandard","State":"closed","Body":"cc: @stephentoub \r\n\r\nFixes #37354\r\n\r\nNow that standard 2.1 has this type, we can go ahead and re-add the typeforward back\r\n","Url":"https://github.com/dotnet/corefx/pull/37575","RelatedDescription":"Closed or merged PR \"Adding typeforward to AsyncInterfaces now that the type has been added to netstandard\" (#37575)"},{"Id":"442491610","IsPullRequest":true,"CreatedAt":"2019-05-10T00:46:30","Actor":"steveharter","Number":"37578","RawContent":null,"Title":"Add extension data support to Json serializer","State":"open","Body":"Adds the overflow or data extension support via the new [JsonExtensionDataAttribute](https://github.com/dotnet/corefx/issues/37558)\r\n\r\nOther changes:\r\n- Fixes https://github.com/dotnet/corefx/issues/37227 which allows a Dictionary without a setter.\r\n- Refactors the \"ignore\" code and some tests added.\r\n- Adds some additional validation around Dictionary.\r\n\r\nOpen issues:\r\n- For both here, and for the object->JsonElement support (already in) we will likely need to pass the `JsonSerializerOptions` to the `JsonDocument` and have the `JsonDocument` use the `JsonSerializerOptions` reader options (pretty printing, comment support, etc), plus two possible serializer-only options:\r\n  - IgnoreNullValues.\r\n  - A property naming policy, such as a new `ExtensionDataPropertyNaming` property.\r\n- This does not support Stream scenarios yet where the current buffer may run out of data. This will be addressed along with similar cases where this is encountered including the object->JsonElement converter and the extensibility model where the reader is exposed.","Url":"https://github.com/dotnet/corefx/pull/37578","RelatedDescription":"Open PR \"Add extension data support to Json serializer\" (#37578)"},{"Id":"442486100","IsPullRequest":false,"CreatedAt":"2019-05-10T00:16:43","Actor":"dotChris90","Number":"37577","RawContent":null,"Title":"Question : How to use System.Memory with pinvoke? ","State":"open","Body":"Hello dotnet team,\n\nI have an native DLL which has a function with following signature.\n\nint function(void** ptr)\n\nThe Marshalling of int is easy. But the void** drives me crazy. In C++ you simply init a variable, put it as parameter and the function write the Adresse of an array so Adresse of Adresse of first element into it.\n\nSince the new span and memory classes was released my hope was that there is a way to have a C# \"view\" of this unmanaged array. A view so the memory is not copied a second time. the size of array is known (want to mention it). \n\nI know the usual way to do this is pass managed array and C++ shall write into it but unfortunately the dll was not written by me.\n\nIs there the possibility to create a c# view of this unmanaged array or a walk around?\n\nthanks for your time. ","Url":"https://github.com/dotnet/corefx/issues/37577","RelatedDescription":"Open issue \"Question : How to use System.Memory with pinvoke? \" (#37577)"},{"Id":"442468504","IsPullRequest":true,"CreatedAt":"2019-05-09T22:53:14","Actor":"dotnet-maestro[bot]","Number":"37574","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190509.7\r\n- **Date Produced**: 5/9/2019 10:40 PM\r\n- **Commit**: 013b89db06c1f331804d2c07c79c9b5192b3c5d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19259.7\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37574","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#37574)"},{"Id":"442456892","IsPullRequest":false,"CreatedAt":"2019-05-09T22:09:25","Actor":"wfurt","Number":"37573","RawContent":null,"Title":"System.IO.FileSystem.Tests failing on Windows.Arm64","State":"open","Body":"21 failures, seems pretty consistent. Currently #1 reason for failed test.\r\n\r\nmultiple flavors of FileShareDeleteExisting, FileShareDeleteExistingMultipleClients and FileShareDeleteNew\r\n\r\n\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190509.2/workItem/System.IO.FileSystem.Tests\r\n\r\nThis may be related to #33603 but of so, tests should be updated or disabled. \r\n\r\ncc: @JeremyKuhne \r\n","Url":"https://github.com/dotnet/corefx/issues/37573","RelatedDescription":"Open issue \"System.IO.FileSystem.Tests failing on Windows.Arm64\" (#37573)"},{"Id":"442454764","IsPullRequest":true,"CreatedAt":"2019-05-09T22:02:13","Actor":"wfurt","Number":"37572","RawContent":null,"Title":"update HTTP2 responce header processing","State":"open","Body":"Without this change, we can hit Debug.Assert() when response contains request header for some reason. \r\n(I bump to this with gRPC testing) \r\n\r\nI updated code to do exactly what we do for HTTP1.x\r\n\r\n```\r\n  Assertion Failed\r\n\r\n     at System.Net.Http.Headers.HttpHeaders.CreateAndAddHeaderToStore(HeaderDescriptor descriptor) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs:line 730\r\n     at System.Net.Http.Headers.HttpHeaders.GetOrCreateHeaderInfo(HeaderDescriptor descriptor, Boolean parseRawValues) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs:line 717\r\n     at System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(HeaderDescriptor descriptor, String value) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs:line 138\r\n     at System.Net.Http.Http2Connection.Http2Stream.OnResponseHeader(ReadOnlySpan`1 name, ReadOnlySpan`1 value) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 197\r\n     at System.Net.Http.Http2Connection.<>c.<.cctor>b__87_0(Object state, ReadOnlySpan`1 name, ReadOnlySpan`1 value) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 293\r\n     at System.Net.Http.HPack.HPackDecoder.OnHeaderComplete(HeaderCallback onHeader, Object onHeaderState, ReadOnlySpan`1 headerName, ReadOnlySpan`1 headerValue) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HPack/HPackDecoder.cs:line 401\r\n     at System.Net.Http.HPack.HPackDecoder.Decode(ReadOnlySpan`1 data, HeaderCallback onHeader, Object onHeaderState) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HPack/HPackDecoder.cs:line 294\r\n     at System.Net.Http.Http2Connection.ProcessHeadersFrame(FrameHeader frameHeader) in /home/furt/github/wfurt-corefx-h2/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 312\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /__w/1/s/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1012\r\n\r\n```\r\n","Url":"https://github.com/dotnet/corefx/pull/37572","RelatedDescription":"Open PR \"update HTTP2 responce header processing\" (#37572)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"442936059","IsPullRequest":true,"CreatedAt":"2019-05-11T03:00:13","Actor":"dotnet-bot","Number":"35656","RawContent":null,"Title":"Merge release/dev16.1 to release/dev16.2-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.2-preview1\ngit reset --hard upstream/release/dev16.2-preview1\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35656","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to release/dev16.2-preview1\" (#35656)"},{"Id":"442936097","IsPullRequest":true,"CreatedAt":"2019-05-11T03:00:08","Actor":"dotnet-bot","Number":"35657","RawContent":null,"Title":"Merge release/dev16.1 to release/dev16.1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.1-vs-deps\ngit reset --hard upstream/release/dev16.1-vs-deps\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35657","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to release/dev16.1-vs-deps\" (#35657)"},{"Id":"442940716","IsPullRequest":true,"CreatedAt":"2019-05-11T01:32:44","Actor":"tmat","Number":"35659","RawContent":null,"Title":"Make compilation outputs available via a workspace service","State":"open","Body":"Based on discussion on https://github.com/dotnet/roslyn/pull/34698. Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.\r\n\r\nThe abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/34371","Url":"https://github.com/dotnet/roslyn/pull/35659","RelatedDescription":"Open PR \"Make compilation outputs available via a workspace service\" (#35659)"},{"Id":"442940488","IsPullRequest":false,"CreatedAt":"2019-05-11T01:29:44","Actor":"xtofs","Number":"35658","RawContent":null,"Title":"can stackalloc be allowed in ref struct constructors?","State":"open","Body":"**Version Used**: \r\n\r\nc# 7.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n ```\r\n   public ref struct Matrix<T> where T: unmanaged\r\n    {\r\n        private readonly int w;\r\n        private readonly int h;\r\n        private readonly Span<T> span;\r\n\r\n        public Matrix(int w, int h)\r\n        {\r\n            this.w = w;\r\n            this.h = h;\r\n            this.span = stackalloc T[w*h];\r\n        }\r\n```\r\n\r\nresults in error \r\n`CS8353: A result of a stackalloc expression of type 'Span<T>' cannot be used in this context because it may be exposed outside of the containing method` \r\n\r\nI think I understand the error message and why it is necessary to prevent it. \r\nBut in this specific case the this.span is a field on a ref struct itself, so the stack will be maintained and the matrix itself cannot \"be exposed outside the context\".\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35658","RelatedDescription":"Open issue \"can stackalloc be allowed in ref struct constructors?\" (#35658)"},{"Id":"442933866","IsPullRequest":true,"CreatedAt":"2019-05-11T00:20:40","Actor":"cston","Number":"35655","RawContent":null,"Title":"Use inferred nullability for delegate method in MethodTypeInferrer","State":"open","Body":"Fixes #32697 (Need to re-analyze method groups)\r\nFixes #33635 (We drop method group return nullability in nullability reinference)\r\nFixes #33637 (Method groups not inferred based on receiver type)\r\n","Url":"https://github.com/dotnet/roslyn/pull/35655","RelatedDescription":"Open PR \"Use inferred nullability for delegate method in MethodTypeInferrer\" (#35655)"},{"Id":"442933336","IsPullRequest":false,"CreatedAt":"2019-05-11T00:16:31","Actor":"heejaechang","Number":"35654","RawContent":null,"Title":"make service hub log to include method that throw exception","State":"open","Body":"right now, exception log such as this, make it very hard without dump, what call is exactly failing.\r\n\r\nwe should make this log better.\r\n\r\n...\r\n\r\n05/10/2019 17:03:52 : Error : 1 :exception: System.ArgumentException: Object serialized to Array. JObject instance expected.\r\n\r\n   at Newtonsoft.Json.Linq.JObject.FromObject(Object o, JsonSerializer jsonSerializer)\r\n\r\n   at StreamJsonRpc.JsonMessageFormatter.TokenizeUserData(JsonRpcMessage jsonRpcMessage)\r\n\r\n   at StreamJsonRpc.JsonMessageFormatter.Serialize(JsonRpcMessage message)\r\n\r\n   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer, JsonRpcMessage message)\r\n\r\n   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content, CancellationToken cancellationToken)\r\n\r\n   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken)\r\n\r\n   at StreamJsonRpc.MessageHandlerBase.<WriteAsync>d__15.MoveNext()\r\n\r\n--- End of stack trace from previous location where exception was thrown ---\r\n\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()\r\n\r\n   at StreamJsonRpc.JsonRpc.<InvokeCoreAsync>d__88`1.MoveNext()\r\n\r\n--- End of stack trace from previous location where exception was thrown ---\r\n\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx.<InvokeAsync>d__10.MoveNext()\r\n\r\n--- End of stack trace from previous location where exception was thrown ---\r\n\r\n   at\r\n","Url":"https://github.com/dotnet/roslyn/issues/35654","RelatedDescription":"Open issue \"make service hub log to include method that throw exception\" (#35654)"},{"Id":"442931828","IsPullRequest":true,"CreatedAt":"2019-05-11T00:04:28","Actor":"jcouv","Number":"35653","RawContent":null,"Title":"InlineTemporary: don't inline using declarations","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/35645","Url":"https://github.com/dotnet/roslyn/pull/35653","RelatedDescription":"Open PR \"InlineTemporary: don't inline using declarations\" (#35653)"},{"Id":"442926726","IsPullRequest":true,"CreatedAt":"2019-05-10T23:28:07","Actor":"dotnet-bot","Number":"35652","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35652","RelatedDescription":"Open PR \"Merge master-vs-deps to features/razorSupport2\" (#35652)"},{"Id":"442926713","IsPullRequest":true,"CreatedAt":"2019-05-10T23:28:00","Actor":"dotnet-bot","Number":"35651","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35651","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#35651)"},{"Id":"442926695","IsPullRequest":true,"CreatedAt":"2019-05-10T23:27:56","Actor":"dotnet-bot","Number":"35650","RawContent":null,"Title":"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35650","RelatedDescription":"Open PR \"Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps\" (#35650)"},{"Id":"442926637","IsPullRequest":true,"CreatedAt":"2019-05-10T23:27:40","Actor":"dotnet-bot","Number":"35649","RawContent":null,"Title":"Merge release/dev16.2-preview1-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35649","RelatedDescription":"Open PR \"Merge release/dev16.2-preview1-vs-deps to master-vs-deps\" (#35649)"},{"Id":"442926606","IsPullRequest":true,"CreatedAt":"2019-05-10T23:27:26","Actor":"dotnet-bot","Number":"35648","RawContent":null,"Title":"Merge release/dev16.2-preview1 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35648","RelatedDescription":"Open PR \"Merge release/dev16.2-preview1 to master\" (#35648)"},{"Id":"442882751","IsPullRequest":true,"CreatedAt":"2019-05-10T23:17:57","Actor":"dotnet-bot","Number":"35639","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35639","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35639)"},{"Id":"442889688","IsPullRequest":true,"CreatedAt":"2019-05-10T23:12:35","Actor":"dpoeschl","Number":"35642","RawContent":null,"Title":"Revert \"Make compilation outputs available via a workspace service (#34809)\"","State":"closed","Body":"This reverts commit 3bdbd56045a21888b9cdd70b420f8ff5b711da77.\r\n\r\nThe original PR caused failures in VS tests which are preventing us from making insertions, so we're rolling back for now.","Url":"https://github.com/dotnet/roslyn/pull/35642","RelatedDescription":"Closed or merged PR \"Revert \"Make compilation outputs available via a workspace service (#34809)\"\" (#35642)"},{"Id":"442818412","IsPullRequest":true,"CreatedAt":"2019-05-10T23:00:11","Actor":"dotnet-bot","Number":"35635","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35635","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps\" (#35635)"},{"Id":"442920625","IsPullRequest":false,"CreatedAt":"2019-05-10T22:52:42","Actor":"gafter","Number":"35647","RawContent":null,"Title":"Compilers emit unneeded NOP instruction after each call to a void method","State":"open","Body":"In Debug mode, the Roslyn compilers produce a NOP instruction after each invocation of a void method.  The comment in the compiler says\r\n\r\n``` c#\r\n                // DevDiv #15135.  When a method like System.Diagnostics.Debugger.Break() is called, the\r\n                // debugger sees an event indicating that a user break (vs a breakpoint) has occurred.\r\n                // When this happens, it uses ICorDebugILFrame.GetIP(out uint, out CorDebugMappingResult)\r\n                // to determine the current instruction pointer.  This method returns the instruction\r\n                // *after* the call.  The source location is then given by the last sequence point before\r\n                // or on this instruction.  As a result, if the instruction after the call has its own\r\n                // sequence point, then that sequence point will be used to determine the source location\r\n                // and the debugging experience will be disrupted.  The easiest way to ensure that the next\r\n                // instruction does not have a sequence point is to insert a nop.  Obviously, we only do this\r\n                // if debugging is enabled and optimization is disabled.\r\n\r\n                // From ILGENREC::genCall:\r\n                //   We want to generate a NOP after CALL opcodes that end a statement so the debugger\r\n                //   has better stepping behavior\r\n\r\n                // CONSIDER: In the native compiler, there's an additional restriction on when this nop is\r\n                // inserted.  It is quite complicated, but it basically seems to say that, if we thought\r\n                // we could omit the temp-and-copy for a struct construction and it turned out that we\r\n                // couldn't (perhaps because the assigned local was captured by a lambda), and if we're\r\n                // not using the result of the constructor call (how can this even happen?), then we don't\r\n                // want to insert the nop.  Since the consequence of not implementing this complicated logic\r\n                // is an extra nop in debug code, this is likely not a priority.\r\n\r\n                // CONSIDER: The native compiler also checks !(tree->flags & EXF_NODEBUGINFO).  We don't have\r\n                // this mutable bit on our bound nodes, so we can't exactly match the behavior.  We might be\r\n                // able to approximate the native behavior by inspecting call.WasCompilerGenerated, but it is\r\n                // not in a reliable state after lowering.\r\n\r\n                _builder.EmitOpCode(ILOpCode.Nop);\r\n```\r\n\r\nHowever, I tried removing these NOP instructions as an experiment.  In the latest preview VS, I found no questionable debugging behavior without the NOP instructions, even for a call to `System.Diagnostics.Debugger.Break()`.  Is it possible our compilers can stop emitting the unneeded NOP?\r\n\r\n/cc @tmat \r\n","Url":"https://github.com/dotnet/roslyn/issues/35647","RelatedDescription":"Open issue \"Compilers emit unneeded NOP instruction after each call to a void method\" (#35647)"},{"Id":"442917899","IsPullRequest":false,"CreatedAt":"2019-05-10T22:37:36","Actor":"jcouv","Number":"35646","RawContent":null,"Title":"Extract Method should understand `using` declarations","State":"open","Body":"\r\n![image](https://user-images.githubusercontent.com/12466233/57560034-61a45300-7339-11e9-949d-28d637133cc4.png)\r\n\r\n```C#\r\nusing System;\r\n\r\nclass C2 : IDisposable\r\n{\r\n    void M()\r\n    {\r\n        using var x2 = new C2();\r\n        x2.ToString();\r\n\r\n\r\n\r\n\r\n        x2.ToString();\r\n\r\n    }\r\n\r\n    public void Dispose() => throw new NotImplementedException();\r\n}\r\n```\r\n\r\nFYI @chsienki ","Url":"https://github.com/dotnet/roslyn/issues/35646","RelatedDescription":"Open issue \"Extract Method should understand `using` declarations\" (#35646)"},{"Id":"442917300","IsPullRequest":false,"CreatedAt":"2019-05-10T22:34:43","Actor":"jcouv","Number":"35645","RawContent":null,"Title":"InlineVariable should not trigger for a `using` declaration","State":"open","Body":"![image](https://user-images.githubusercontent.com/12466233/57559966-1722d680-7339-11e9-97b2-50c0594e2fae.png)\r\n\r\n\r\nFYI @chsienki \r\n","Url":"https://github.com/dotnet/roslyn/issues/35645","RelatedDescription":"Open issue \"InlineVariable should not trigger for a `using` declaration\" (#35645)"},{"Id":"442916242","IsPullRequest":false,"CreatedAt":"2019-05-10T22:29:25","Actor":"jcouv","Number":"35644","RawContent":null,"Title":"`this` keyword should not be recommended within a static local function","State":"open","Body":"![image](https://user-images.githubusercontent.com/12466233/57559770-5a307a00-7338-11e9-88a4-91745f45ce1a.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/35644","RelatedDescription":"Open issue \"`this` keyword should not be recommended within a static local function\" (#35644)"},{"Id":"442882778","IsPullRequest":true,"CreatedAt":"2019-05-10T22:00:07","Actor":"dotnet-bot","Number":"35640","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35640","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#35640)"},{"Id":"442909184","IsPullRequest":false,"CreatedAt":"2019-05-10T21:59:02","Actor":"jcouv","Number":"35643","RawContent":null,"Title":"Suggestion: Offer fix for upgrading project to Core 3","State":"open","Body":"In a project that targets Core 2, start using the default interface members feature.\r\n\r\nYou first get an error for the language version. We offer a fix for that.\r\nThen you get an error for the target runtime. We could offer a fix for that too, or at least improve the error message.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/57558728-be9d0a80-7333-11e9-84a6-b7fbc6b15eec.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/35643","RelatedDescription":"Open issue \"Suggestion: Offer fix for upgrading project to Core 3\" (#35643)"},{"Id":"442818322","IsPullRequest":true,"CreatedAt":"2019-05-10T21:47:41","Actor":"dotnet-bot","Number":"35634","RawContent":null,"Title":"Merge release/dev16.1 to release/dev16.2-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.2-preview1\ngit reset --hard upstream/release/dev16.2-preview1\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35634","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to release/dev16.2-preview1\" (#35634)"},{"Id":"442887445","IsPullRequest":true,"CreatedAt":"2019-05-10T20:43:09","Actor":"jasonmalinowski","Number":"35641","RawContent":null,"Title":"Remove some unnecessary <SubType>Code</SubType>","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35641","RelatedDescription":"Open PR \"Remove some unnecessary <SubType>Code</SubType>\" (#35641)"},{"Id":"442877739","IsPullRequest":true,"CreatedAt":"2019-05-10T20:12:48","Actor":"agocke","Number":"35638","RawContent":null,"Title":"Fix crash when using bad indexer type","State":"open","Body":"Inverted condition caused us to crash instead of giving an error message\r\nwhen calling an indexer with a bad input type.\r\n\r\nFixes #35622","Url":"https://github.com/dotnet/roslyn/pull/35638","RelatedDescription":"Open PR \"Fix crash when using bad indexer type\" (#35638)"},{"Id":"442815078","IsPullRequest":true,"CreatedAt":"2019-05-10T19:00:10","Actor":"dotnet-bot","Number":"35633","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35633","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35633)"},{"Id":"442826894","IsPullRequest":false,"CreatedAt":"2019-05-10T17:44:33","Actor":"kenteltest","Number":"35637","RawContent":null,"Title":"Error in \"await foreach\" in C# 8.0 beta","State":"open","Body":"**Version Used**: Visual Studio 2019 version 16.0.3, C# 8 (beta) and 3.0.100-preview4-011223\r\n\r\n**Steps to Reproduce**:\r\nWhen i try to compile this code\r\n```csharp\r\npublic class Program\r\n{\r\n    public static async Task Main(string[] args)\r\n    {\r\n        try\r\n        {\r\n            try\r\n            {\r\n                await foreach (var item in NumGenerateAsync())\r\n                {\r\n                    switch (item)\r\n                    {\r\n                        case 5:\r\n                            return;\r\n                    }\r\n                }\r\n                \r\n            }\r\n            catch\r\n            {\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            await Task.Delay(42);\r\n        }\r\n    }\r\n\r\n    static async IAsyncEnumerable<int> NumGenerateAsync()\r\n    {\r\n        for (int i = 0; i < 30; i++)\r\n        {\r\n            await Task.Delay(42);\r\n            yield return i;\r\n        }\r\n    }\r\n}\r\n```\r\nVS 2019 reports an error: \"MSB6006 \"csc.exe\" exited with code -2146232797\".\r\n\r\n**Expected Behavior:**\r\nBut I think, this code is logically correct and I expect the code to be compiled\r\n\r\n**Actual Behavior:**\r\n\"MSB6006 \"csc.exe\" exited with code -2146232797\"\r\n\r\n**Remarks:**\r\nIf I delete inner try-catch, or await statement in finally block - it works as expected.\r\n\r\nTo avoid this error I replace ``return`` with ``goto`` now:\r\n```csharp\r\npublic static async Task Main(string[] args)\r\n{\r\n    try\r\n    {\r\n        try\r\n        {\r\n            await foreach (var item in NumGenerateAsync())\r\n            {\r\n                switch (item)\r\n                {\r\n                    case 5:\r\n                        goto exit;\r\n                }\r\n            }\r\n        exit:;\r\n        }\r\n        catch\r\n        {\r\n        }\r\n    }\r\n    finally\r\n    {\r\n        await Task.Delay(42);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35637","RelatedDescription":"Open issue \"Error in \"await foreach\" in C# 8.0 beta\" (#35637)"},{"Id":"442820484","IsPullRequest":false,"CreatedAt":"2019-05-10T17:27:37","Actor":"jasonmalinowski","Number":"35636","RawContent":null,"Title":"AddParensForClarity should consider `switch` expressions like `await e switch ...`","State":"open","Body":"(Filed from a note from @jcouv, he can answer questions about it.)","Url":"https://github.com/dotnet/roslyn/issues/35636","RelatedDescription":"Open issue \"AddParensForClarity should consider `switch` expressions like `await e switch ...`\" (#35636)"},{"Id":"442814949","IsPullRequest":true,"CreatedAt":"2019-05-10T17:13:16","Actor":"dotnet-bot","Number":"35632","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35632","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1-vs-deps to master-vs-deps\" (#35632)"},{"Id":"442810328","IsPullRequest":false,"CreatedAt":"2019-05-10T16:58:47","Actor":"tmeschter","Number":"35631","RawContent":null,"Title":"Regex Completion unit tests use hard-coded strings for localizable resources","State":"open","Body":"The following unit tests use hard-coded strings instead of the localized resources:\r\n\r\n- Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Regex.TestCaretPlacement\r\n- Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests_Regex.TestCaretPlacement\r\n\r\nThis guarantees they will fail when run under locales other than en.\r\n\r\nExample failure:\r\n```\r\nAssert.Equal() Failure\\r\\n ↓ (pos 3)\\r\\nExpected: [ character-group ]\\r\\nActual: [ grupo de caracteres ]\\r\\n ↑ (pos 3)\r\n   en Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) en C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:línea 244\r\n   en Xunit.Assert.Equal(String expected, String actual) en C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:línea 174\r\n   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_23_AssertSelectedCompletionItem.MoveNext() en /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:línea 246\r\n--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---\r\n   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   en System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Regex.VB$StateMachine_5_TestCaretPlacement.MoveNext() en /_/src/EditorFeatures/Test2/IntelliSense/CSharpCompletionCommandHandlerTests_Regex.vb:línea 81\r\n--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---\r\n   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   en Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() en C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:línea 264\r\n--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---\r\n   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   en Xunit.Sdk.ExecutionTimer.<AggregateAsync>d__4.MoveNext() en C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:línea 48\r\n--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---\r\n   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   en Xunit.Sdk.ExceptionAggregator.<RunAsync>d__9.MoveNext() en C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:línea 90\r\n```\r\n\r\nThe tests will be disabled. Please update them to use the localized resource rather than hard-coded strings.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35631","RelatedDescription":"Open issue \"Regex Completion unit tests use hard-coded strings for localizable resources\" (#35631)"},{"Id":"442756042","IsPullRequest":false,"CreatedAt":"2019-05-10T15:47:51","Actor":"MarcoRossignoli","Number":"35630","RawContent":null,"Title":"[QUESTION]Roslyn name pattern constants","State":"closed","Body":"Someone could tell me where is the cs with roslyn constants for generation of name for lambda, async/await state machine etc.\r\n\r\nI'm working on coverlet and would like to try some pattern recognition.","Url":"https://github.com/dotnet/roslyn/issues/35630","RelatedDescription":"Closed issue \"[QUESTION]Roslyn name pattern constants\" (#35630)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"442915094","IsPullRequest":true,"CreatedAt":"2019-05-10T22:24:23","Actor":"nattress","Number":"7414","RawContent":null,"Title":"Clean publish test output folders before run","State":"open","Body":"Incremental build was hiding failures in our local enlistments that only CI would catch due to it always starting with a fresh enlistment.","Url":"https://github.com/dotnet/corert/pull/7414","RelatedDescription":"Open PR \"Clean publish test output folders before run\" (#7414)"},{"Id":"442866699","IsPullRequest":true,"CreatedAt":"2019-05-10T21:13:18","Actor":"trylek","Number":"7413","RawContent":null,"Title":"Revert \"Initial CPAOT support for large version bubble\"","State":"closed","Body":"Reverts dotnet/corert#7403","Url":"https://github.com/dotnet/corert/pull/7413","RelatedDescription":"Closed or merged PR \"Revert \"Initial CPAOT support for large version bubble\"\" (#7413)"},{"Id":"440872069","IsPullRequest":true,"CreatedAt":"2019-05-09T21:14:25","Actor":"trylek","Number":"7403","RawContent":null,"Title":"Initial CPAOT support for large version bubble","State":"closed","Body":"This change modifies the existing --inputbubble CPAOT option\r\nto work the same as Crossgen /largeversionbubble i.e. the main module\r\nand all reference assemblies are considered to belong to the same\r\nversion bubble.\r\n\r\nThe gist of the change deals with encoding module overrides in\r\nsignatures. I have implemented a new R2R header table\r\nManifestMetadataTableNode and added logic for composing and emitting\r\nthe extra AssemblyRef list.\r\n\r\nOne challenging bit was that we need to emit all the signatures before\r\nemitting the ManifestMetadataTableNode because only the emission\r\nof the signatures shakes out all the required AssemblyRef's. I have\r\nadded a simple loop to ImportSectionsTableNode / ImportSectionNode\r\nthat traverses and emits all registered import cell signatures.\r\n\r\nAfter I managed to make the basic signature emission work with module\r\noverride, I continued hitting issues with the two entrypoint tables.\r\nFor the (non-generic) method entrypoint table we need to filter out\r\nmethods outside of the current input module because the larger\r\ncompilation group representing the larger version bubble ends up\r\nexpanding the dependency graph to framework methods.\r\n\r\nWhile these \"external\" methods are not compiled into the output\r\nexecutable (except when they are occasionally inlined into a local\r\nmethod), we were still trying to emit them into the entrypoint\r\ntable and we were crashing compilation because we couldn't find\r\nsome of the necessary tokens.\r\n\r\nFor instance entrypoints, I didn't find any manner of encoding\r\na module override for their signatures in the native hashtable so\r\nfor now I added filtering that we're only storing those instance\r\nentrypoints that have the current input module as the reference\r\nmodule. One can theoretically imagine that a module may contain\r\narbitrary generic instantiations spanning other modules when\r\nlarger bubbles are on.\r\n\r\nWhile working on the change I also realized that the current way\r\nof basing signature contexts on input modules in CorInfoImpl.ReadyToRun\r\nwas incorrect - when a method gets inlined, we still need the original\r\nsignature context because that's what defines the ambient module\r\nused in the CoreCLR signature parser.\r\n\r\nI have deleted the field and instead I added a new method\r\nGetSignatureContext which currently returns\r\nReadyToRunCoregenNodeFactory.InputModuleContext. Once we start\r\nimplementing \"single-file\" (i.e. compiling multiple MSIL modules\r\ninto a single PE), we'll change this to something more fine-grained,\r\nmost likely based on some lookup on MethodBeingCompiled.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7403","RelatedDescription":"Closed or merged PR \"Initial CPAOT support for large version bubble\" (#7403)"},{"Id":"442385927","IsPullRequest":true,"CreatedAt":"2019-05-09T19:03:45","Actor":"Dotnet-GitSync-Bot","Number":"7412","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7412)"},{"Id":"441964184","IsPullRequest":true,"CreatedAt":"2019-05-08T22:46:51","Actor":"nattress","Number":"7411","RawContent":null,"Title":"Add SuperIlc compile-nuget command","State":"open","Body":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit.","Url":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Open PR \"Add SuperIlc compile-nuget command\" (#7411)"},{"Id":"441935856","IsPullRequest":true,"CreatedAt":"2019-05-08T21:17:05","Actor":"trylek","Number":"7410","RawContent":null,"Title":"SuperIlc support for the issues.targets file","State":"open","Body":"This change implements a new option --issues-path that can be used\r\nto specify the path to explicit CoreCLR test exclusion XML file.\r\nThis is useful when running CoreCLR test suites so that we filter\r\nout tests known to be failing or hanging and thus reduce noise in\r\nour CPAOT results.\r\n\r\nAs the issues.targets is technically an msbuild project file, I have\r\nleveraged MSBuild interface libraries to evaluate the conditional\r\nexpressions in the file much like we do in .NET Native when evaluating\r\nthe bugdata.ProjectN.xml file. For now I have set many of the project\r\nproperties to arbitrary values, that's up to further cleanup once\r\nwe start expanding our targeting matrix.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7410","RelatedDescription":"Open PR \"SuperIlc support for the issues.targets file\" (#7410)"},{"Id":"441809686","IsPullRequest":false,"CreatedAt":"2019-05-08T20:23:21","Actor":"danwalmsley","Number":"7408","RawContent":null,"Title":"UWP .net Native Internal Compiler Error.","State":"closed","Body":"Sorry if this is the wrong place for .net native and UWP compile errors.\r\n\r\nI have a UWP app, and we have been using debug mode during develop. We are trying to build in release mode with .net native toolchain (this is quite important for us to get the high performance.)\r\n\r\nHowever we get an internal compiler error:\r\n```\r\n8>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VisualStudio\\v16.0\\AppxPackage\\Microsoft.AppXPackage.Targets(3164,5): warning : APPX4001: Build property AppxBundlePlatforms is not explicitly set and is calculated based on currently building architecture. Use 'Create App Package' wizard or edit project file to set it.\r\n8>  Processing application code\r\n8>  Computing application closure and generating interop code\r\n8>    Loading 121 modules...\r\n8>    Generating code...\r\n8>    Interop code generated.\r\n8>  Generating serialization code\r\n8>  Compiling interop code\r\n8>  Generating System.Reflection.DispatchProxy proxy code.\r\n8>  Cleaning up unreferenced code\r\n8>  Generating native code\r\n8>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.3\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x64.microsoft.net.native.compiler\\2.2.3\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\dev\\repos\\ILMD\\ILMD.App\\ILMD.App\\ILMD.App.UWP\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\ILMD.App.UWP.rsp\"' returned exit code 1\r\n========== Build: 7 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n\r\nI ran using msbuild and versbose and nutc_driver.exe gives internal compiler error but no more useful information.\r\n\r\n   I would be willing to send my source code for testing privately.\r\n\r\nThanks in advance\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7408","RelatedDescription":"Closed issue \"UWP .net Native Internal Compiler Error.\" (#7408)"},{"Id":"441867767","IsPullRequest":true,"CreatedAt":"2019-05-08T18:24:16","Actor":"MichalStrehovsky","Number":"7409","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7409","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7409)"},{"Id":"441270623","IsPullRequest":true,"CreatedAt":"2019-05-08T09:12:19","Actor":"MichalStrehovsky","Number":"7405","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7405","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7405)"},{"Id":"441376921","IsPullRequest":true,"CreatedAt":"2019-05-08T01:12:00","Actor":"jkotas","Number":"7406","RawContent":null,"Title":"Port https://github.com/dotnet/coreclr/pull/24387 to CoreRT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7406","RelatedDescription":"Closed or merged PR \"Port https://github.com/dotnet/coreclr/pull/24387 to CoreRT\" (#7406)"},{"Id":"441426037","IsPullRequest":false,"CreatedAt":"2019-05-07T20:14:25","Actor":"Fabi","Number":"7407","RawContent":null,"Title":"Tls callbacks","State":"open","Body":"Hey!\r\n\r\nI know that I can create native exports etc, but my question is if it's possible to use own tls callbacks in the current state?","Url":"https://github.com/dotnet/corert/issues/7407","RelatedDescription":"Open issue \"Tls callbacks\" (#7407)"},{"Id":"440221804","IsPullRequest":true,"CreatedAt":"2019-05-07T16:47:31","Actor":"nattress","Number":"7393","RawContent":null,"Title":"Fix inlined field access outside version bubble","State":"closed","Body":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle.","Url":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Closed or merged PR \"Fix inlined field access outside version bubble\" (#7393)"},{"Id":"441010437","IsPullRequest":true,"CreatedAt":"2019-05-07T04:17:53","Actor":"Dotnet-GitSync-Bot","Number":"7404","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7404","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7404)"},{"Id":"439802257","IsPullRequest":true,"CreatedAt":"2019-05-07T03:38:35","Actor":"Suchiman","Number":"7389","RawContent":null,"Title":"Port GC changes from coreclr - 7","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible.","Url":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 7\" (#7389)"},{"Id":"440801223","IsPullRequest":true,"CreatedAt":"2019-05-06T17:53:33","Actor":"Dotnet-GitSync-Bot","Number":"7402","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7402","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7402)"},{"Id":"440711963","IsPullRequest":true,"CreatedAt":"2019-05-06T15:18:44","Actor":"Dotnet-GitSync-Bot","Number":"7400","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq","Url":"https://github.com/dotnet/corert/pull/7400","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7400)"},{"Id":"439939415","IsPullRequest":true,"CreatedAt":"2019-05-06T15:16:28","Actor":"ifew","Number":"7391","RawContent":null,"Title":"Add link to sample project working with database","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7391","RelatedDescription":"Closed or merged PR \"Add link to sample project working with database\" (#7391)"},{"Id":"440731576","IsPullRequest":false,"CreatedAt":"2019-05-06T15:15:36","Actor":"vadash","Number":"7401","RawContent":null,"Title":"Q: .managed section in PE file. Can someone extract source code from it ?","State":"closed","Body":"and what does it contain ? \r\n![die_SlSWWwH5nM](https://user-images.githubusercontent.com/1397582/57232467-52659280-7025-11e9-948e-ed7f4d55c1fe.png)\r\nThanks for amazing CoreRT\r\n","Url":"https://github.com/dotnet/corert/issues/7401","RelatedDescription":"Closed issue \"Q: .managed section in PE file. Can someone extract source code from it ?\" (#7401)"},{"Id":"440697846","IsPullRequest":true,"CreatedAt":"2019-05-06T13:24:01","Actor":"MichalStrehovsky","Number":"7399","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7399","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7399)"},{"Id":"440666948","IsPullRequest":true,"CreatedAt":"2019-05-06T12:05:21","Actor":"MichalStrehovsky","Number":"7398","RawContent":null,"Title":"Fix nullable analysis errors in ProjectN","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7398","RelatedDescription":"Closed or merged PR \"Fix nullable analysis errors in ProjectN\" (#7398)"},{"Id":"440649625","IsPullRequest":true,"CreatedAt":"2019-05-06T11:16:11","Actor":"dotnet-bot","Number":"7397","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7397","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7397)"},{"Id":"440644215","IsPullRequest":true,"CreatedAt":"2019-05-06T10:58:31","Actor":"MichalStrehovsky","Number":"7396","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7396","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7396)"},{"Id":"440483855","IsPullRequest":true,"CreatedAt":"2019-05-05T22:22:44","Actor":"Dotnet-GitSync-Bot","Number":"7395","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7395)"},{"Id":"440209822","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:33","Actor":"MichalStrehovsky","Number":"7392","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7392)"},{"Id":"440231323","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:21","Actor":"Dotnet-GitSync-Bot","Number":"7394","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @GrabYourPitchforks @filipnavara","Url":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7394)"},{"Id":"439697709","IsPullRequest":true,"CreatedAt":"2019-05-03T15:26:37","Actor":"Dotnet-GitSync-Bot","Number":"7388","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern @stephentoub @jbhensley @danmosemsft @luhenry","Url":"https://github.com/dotnet/corert/pull/7388","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7388)"},{"Id":"439579442","IsPullRequest":false,"CreatedAt":"2019-05-03T07:43:18","Actor":"ifew","Number":"7386","RawContent":null,"Title":"Dynamic code generation is not supported on this platform.","State":"closed","Body":"Hi\r\n\r\nI using Dapper and NPoco for connecting database, and it's work on normal compile\r\nbut when I compile to native, I got the message ```Unhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.``` of both libraries\r\n\r\nBoth, I using \r\n```<TargetFramework>netcoreapp3.0</TargetFramework>```\r\n\r\n```\r\n<PackageReference Include=\"MySqlConnector\" Version=\"0.53.0\" />\r\n<PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview4.19212.13\" />\r\n```\r\n\r\nDapper\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nLog: ServerVersion After Open: 5.5.5-10.2.15-MariaDB-log\r\nLog: State: Open\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x38\r\n   at Dapper.SqlMapper.GetTypeDeserializerImpl(Type, IDataReader, Int32, Int32, Boolean) + 0xb5\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(IDataReader, Int32, Int32, Boolean) + 0x154\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(Type, IDataReader, Int32, Int32, Boolean) + 0x16c\r\n   at Dapper.SqlMapper.GetDeserializer(Type, IDataReader, Int32, Int32, Boolean) + 0x14f\r\n   at Dapper.SqlMapper.<QueryImpl>d__138`1.MoveNext() + 0x263\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x10c\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x43\r\n   at Dapper.SqlMapper.Query[T](IDbConnection, String, Object, IDbTransaction, Boolean, Nullable`1, Nullable`1) + 0x1c6\r\n   at Member.Program.Main() + 0x11c\r\n   at bootstrap!<BaseAddress>+0xa8959b\r\n\r\n```\r\n\r\nNPoco\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x43\r\n   at System.Reflection.Emit.DynamicMethod..ctor(String, Type, Type[], Type, Boolean) + 0x30\r\n   at NPoco.MemberAccessor.GetSetDelegate() + 0x225\r\n   at NPoco.MemberAccessor..ctor(Type, String) + 0x357\r\n   at NPoco.PocoDataBuilder.<>c.<GetMemberAccessors>b__32_0(MemberInfo) + 0x77\r\n   at System.Linq.Enumerable.SelectListIterator`2.MoveNext() + 0x141\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.GetMemberAccessors(IEnumerable`1) + 0xb7\r\n   at NPoco.PocoDataBuilder.<GetPocoMembers>d__28.MoveNext() + 0x708\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.Init() + 0xf5\r\n   at NPoco.PocoDataFactory.BaseClassFalbackPocoDataBuilder(Type) + 0x55\r\n   at NPoco.PocoDataFactory.<>c__DisplayClass3_0.<ForType>b__0() + 0x29\r\n   at NPoco.Cache`2.Get(TKey, Func`1) + 0xd6\r\n   at NPoco.PocoDataFactory.ForType(Type) + 0xc0\r\n   at NPoco.AutoSelectHelper.AddSelectClause(Database, Type, String) + 0x108\r\n   at NPoco.Database.<QueryImp>d__153`1.MoveNext() + 0x108\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.Database.Fetch[T](Sql) + 0x60\r\n   at NPoco.Database.Fetch[T](String, Object[]) + 0x67\r\n   at NPoco.Database.Fetch[T]() + 0x6d\r\n   at Member.Program.Main() + 0x16a\r\n   at corert-db-dapper!<BaseAddress>+0xfe4db9\r\n   at corert-db-dapper!<BaseAddress>+0xfe4e2c\r\n```","Url":"https://github.com/dotnet/corert/issues/7386","RelatedDescription":"Closed issue \"Dynamic code generation is not supported on this platform.\" (#7386)"},{"Id":"439814909","IsPullRequest":true,"CreatedAt":"2019-05-02T22:29:34","Actor":"Suchiman","Number":"7390","RawContent":null,"Title":"Fix AspNetCore Repo Link","State":"closed","Body":"aspnet/home now redirects aspnet/AspNetCore.\r\nPrimarily to check if CI works.","Url":"https://github.com/dotnet/corert/pull/7390","RelatedDescription":"Closed or merged PR \"Fix AspNetCore Repo Link\" (#7390)"},{"Id":"439510199","IsPullRequest":true,"CreatedAt":"2019-05-02T21:26:24","Actor":"MichalStrehovsky","Number":"7385","RawContent":null,"Title":"Assert that typical field is indeed typical","State":"closed","Body":"This assert would have saved Tomas some trouble in #7376.","Url":"https://github.com/dotnet/corert/pull/7385","RelatedDescription":"Closed or merged PR \"Assert that typical field is indeed typical\" (#7385)"},{"Id":"439692824","IsPullRequest":true,"CreatedAt":"2019-05-02T17:08:55","Actor":"Dotnet-GitSync-Bot","Number":"7387","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern","Url":"https://github.com/dotnet/corert/pull/7387","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7387)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"442909757","IsPullRequest":true,"CreatedAt":"2019-05-10T22:01:18","Actor":"wli3","Number":"3224","RawContent":null,"Title":"WIP test ci Add hello world winforms and wpf tests","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3224","RelatedDescription":"Open PR \"WIP test ci Add hello world winforms and wpf tests\" (#3224)"},{"Id":"442888741","IsPullRequest":false,"CreatedAt":"2019-05-10T20:47:19","Actor":"wli3","Number":"3223","RawContent":null,"Title":"Add performance test for WPF and Winform","State":"open","Body":"- [ ] Add hello world test for WPF and Winform for netcore and full framework, make sure infrastructure supports that.\r\n- [ ] Add large realistic project","Url":"https://github.com/dotnet/sdk/issues/3223","RelatedDescription":"Open issue \"Add performance test for WPF and Winform\" (#3223)"},{"Id":"441556194","IsPullRequest":true,"CreatedAt":"2019-05-10T16:50:53","Actor":"wli3","Number":"3212","RawContent":null,"Title":"Fix packasktool cannot run","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3212","RelatedDescription":"Closed or merged PR \"Fix packasktool cannot run\" (#3212)"},{"Id":"442684448","IsPullRequest":true,"CreatedAt":"2019-05-10T13:50:37","Actor":"dotnet-maestro[bot]","Number":"3222","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19259.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3222","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3222)"},{"Id":"442475750","IsPullRequest":true,"CreatedAt":"2019-05-09T23:25:40","Actor":"dsplaisted","Number":"3221","RawContent":null,"Title":"Add support for transitive framework references","State":"open","Body":"Fixes dotnet/cli#10666","Url":"https://github.com/dotnet/sdk/pull/3221","RelatedDescription":"Open PR \"Add support for transitive framework references\" (#3221)"},{"Id":"441924321","IsPullRequest":true,"CreatedAt":"2019-05-09T20:34:43","Actor":"nugetlurker","Number":"3218","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3218","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into sdk\" (#3218)"},{"Id":"441924290","IsPullRequest":true,"CreatedAt":"2019-05-09T19:27:43","Actor":"nugetlurker","Number":"3217","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3217","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into sdk\" (#3217)"},{"Id":"442353906","IsPullRequest":false,"CreatedAt":"2019-05-09T18:09:57","Actor":"jdavidbambrick","Number":"3220","RawContent":null,"Title":"Internal Error: new deps file generation logic did not produce the same result as the old logic.","State":"closed","Body":"Added an new publishing profile - a new folder, under the existing one ... and go this error asking me to post it back to git hub... so here ya go...\r\n\r\n[netcoreapp3.0.zip](https://github.com/dotnet/sdk/files/3163329/netcoreapp3.0.zip)\r\n","Url":"https://github.com/dotnet/sdk/issues/3220","RelatedDescription":"Closed issue \"Internal Error: new deps file generation logic did not produce the same result as the old logic.\" (#3220)"},{"Id":"441195943","IsPullRequest":true,"CreatedAt":"2019-05-09T18:07:17","Actor":"dotnet-maestro[bot]","Number":"3209","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19258.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3209","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3209)"},{"Id":"442001391","IsPullRequest":true,"CreatedAt":"2019-05-09T00:44:36","Actor":"fadimounir","Number":"3219","RawContent":null,"Title":"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines","State":"open","Body":"Also fixing a path issue with native PDB creation on Linux: creating file under the R2R subdir","Url":"https://github.com/dotnet/sdk/pull/3219","RelatedDescription":"Open PR \"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines\" (#3219)"},{"Id":"441753051","IsPullRequest":true,"CreatedAt":"2019-05-08T22:34:12","Actor":"dsplaisted","Number":"3214","RawContent":null,"Title":"Don't require NuGetPackageId metadata for classic projects","State":"closed","Body":"- Don't require NuGetPackageId metadata for classic projects\r\n- Allow SDK-style projects to opt out of requirement for NuGetPackageId metadata by setting `RequirePackageIdMetadata` to false\r\n\r\nRelated: https://github.com/dotnet/core-sdk/issues/1904\r\n\r\nIn this PR, I've opted to keep the error by default for SDK-style projects, with a property to opt-out.  This is because I think it should be rare that SDK-style projects directly reference a DLL from a NuGet package, and the error could help catch issues where we should be setting the metadata but aren't, and hence would not handle conflict resolution correctly.\r\n\r\nOn the other hand, perhaps the error has served its purpose by now, and we should instead just remove it entirely.\r\n\r\nThoughts? @nguerrera @ericstj ","Url":"https://github.com/dotnet/sdk/pull/3214","RelatedDescription":"Closed or merged PR \"Don't require NuGetPackageId metadata for classic projects\" (#3214)"},{"Id":"441891063","IsPullRequest":false,"CreatedAt":"2019-05-08T20:51:54","Actor":"genifycom","Number":"3216","RawContent":null,"Title":"Razor Component onClick with arguments","State":"closed","Body":"In the sample FetchData.razor how does one call the onclick event with an object.\r\n\r\ne.g.\r\n\r\n  <tbody>\r\n        @foreach (var forecast in forecasts)\r\n        {\r\n            <tr>\r\n                <td onclick=\"@EditForecast(forecast)\">@forecast.Date.ToShortDateString()</td>\r\n                <td>@forecast.TemperatureC</td>\r\n                <td>@forecast.TemperatureF</td>\r\n                <td>@forecast.Summary</td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n...\r\n\r\n@functions {\r\n  private void EditForecast(WeatherForecast forecast)\r\n  {\r\n    //Do something with forecast\r\n  }\r\n}","Url":"https://github.com/dotnet/sdk/issues/3216","RelatedDescription":"Closed issue \"Razor Component onClick with arguments\" (#3216)"},{"Id":"441889479","IsPullRequest":false,"CreatedAt":"2019-05-08T20:51:45","Actor":"genifycom","Number":"3215","RawContent":null,"Title":"Razor Component write to console.log","State":"closed","Body":"Is there or will there be a way to write to the Browser console log from a Razor component running on the server?\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/3215","RelatedDescription":"Closed issue \"Razor Component write to console.log\" (#3215)"},{"Id":"441418877","IsPullRequest":false,"CreatedAt":"2019-05-08T20:15:24","Actor":"MSLukeWest","Number":"3210","RawContent":null,"Title":"Self contained Publish of .Net Core 3 app for win-x86 is missing files","State":"closed","Body":"1. Create a .NET Core 3 WPF app\r\n2. Publish to folder, change \"Deployment Mode\" to \"Self-Contained\" and \"Target Runtime\" to \"win-x86\"\r\n3. Copy the created folder to a completely clean win10 machine (no VS or anything else installed)\r\n4. Attempt to run the app\r\n\r\nResult: It immediately crashes.  Here's the exception from the event log (full stack below):\r\n\r\nException Info: System.TypeInitializationException: The type initializer for '<Module>' threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nWhen I debug this app on a machine with VS installed (where it works) I see two loaded assemblies that aren't present on the clean machine:\r\n\r\nWindows\\SysWOW64\\msvcp140.dll\r\nWindows\\SysWOW64\\vcruntime140.dll\r\n\r\nI'm guessing the vc runtime is required, if so these assemblies should be copied to the package folder when doing self-contained publishing.\r\n\r\nFull exception stack:\r\n\r\nApplication: WpfApp23.exe\r\nCoreCLR Version: 4.6.27622.75\r\n.NET Core Version: 3.0.0-preview5-27626-15\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.TypeInitializationException: The type initializer for '<Module>' threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at ___CxxCallUnwindDtor(IntPtr pDtor, Void* pThis)\r\n   at .cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.UIElement.UpdateLayout()\r\n   at System.Windows.Interop.HwndSource.SetLayoutSize()\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Interop.HwndSource.set_RootVisual(Visual value)\r\n   at System.Windows.Window.SetRootVisual()\r\n   at System.Windows.Window.SetRootVisualAndUpdateSTC()\r\n   at System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)\r\n   at System.Windows.Window.CreateSourceWindow(Boolean duringShow)\r\n   at System.Windows.Window.CreateSourceWindowDuringShow()\r\n   at System.Windows.Window.SafeCreateWindowDuringShow()\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at WpfApp23.App.Main()\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3210","RelatedDescription":"Closed issue \"Self contained Publish of .Net Core 3 app for win-x86 is missing files\" (#3210)"},{"Id":"440503432","IsPullRequest":false,"CreatedAt":"2019-05-08T17:27:01","Actor":"imsmart-tech","Number":"3204","RawContent":null,"Title":"Internal error: new deps file generation did not produce the same result as the old logic","State":"closed","Body":"Got this error which said to file issue here. So here it goes.\r\n\r\n[ImSmart.deps.json.txt](https://github.com/dotnet/sdk/files/3146159/ImSmart.deps.json.txt)\r\n\r\n[ImSmart.deps.new.json.txt](https://github.com/dotnet/sdk/files/3146160/ImSmart.deps.new.json.txt)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3204","RelatedDescription":"Closed issue \"Internal error: new deps file generation did not produce the same result as the old logic\" (#3204)"},{"Id":"441429577","IsPullRequest":false,"CreatedAt":"2019-05-08T17:24:48","Actor":"dannyvv","Number":"3211","RawContent":null,"Title":"Internal error: new deps file generation logic did not produce the same result as the old logic.","State":"closed","Body":"The error message told me to file this issue:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tInternal error: new deps file generation logic did not produce the same result as the old logic.\r\n    Please file an issue for this at https://github.com/dotnet/sdk and include the following two files: \r\n    Deps file from old logic: d:\\src\\b6\\public\\src\\Services\\Agent\\bin\\Debug\\netcoreapp3.0\\Agent.deps.json\r\n    Deps file from new logic: d:\\src\\b6\\public\\src\\Services\\Agent\\bin\\Debug\\netcoreapp3.0\\Agent.deps.new.json\r\n    You can work around this by setting the DepsFileGenerationMode MSBuild property to 'old'\tAgent\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t145\t\r\n```\r\n\r\nRequested files:\r\n[depsfiles.zip](https://github.com/dotnet/sdk/files/3154414/depsfiles.zip)\r\n\r\nNote: This started happening after adding a few assembly references by file to the BuildXL netcoreapp2.2 output folder\r\n","Url":"https://github.com/dotnet/sdk/issues/3211","RelatedDescription":"Closed issue \"Internal error: new deps file generation logic did not produce the same result as the old logic.\" (#3211)"},{"Id":"441735831","IsPullRequest":false,"CreatedAt":"2019-05-08T13:29:16","Actor":"NinoFloris","Number":"3213","RawContent":null,"Title":"Restore doesn't warn when restoring older pre 3.0 aspnet dependencies on netcore 3.0 resulting in TypeLoadExceptions","State":"open","Body":"Running on dotnet core 3.0.100-preview5 sdk while firing off a first request to aspnetcore 3.0.\r\n\r\n`dotnet restore` issues zero warnings when you try to restore projects with dependencies that reference older AspNetCore (sdk backed PackageReference) versions. Ran across this while updating one of our solutions where we have a dependency on `FluentValidation.AspNetCore` which depends on `Microsoft.AspNetCore.Mvc 2.2.0`\r\n\r\nThis is what's referenced in the deps.json of a succesfully built preview5 project:\r\n```\r\n      \"FluentValidation.AspNetCore/8.3.0\": {\r\n        \"dependencies\": {\r\n          \"FluentValidation\": \"8.3.0\",\r\n          \"FluentValidation.DependencyInjectionExtensions\": \"8.3.0\",\r\n          \"Microsoft.AspNetCore.Mvc\": \"2.2.0\"\r\n        },\r\n```\r\n\r\nStacktrace snippet \r\n```\r\n      Connection id \"0HLMJBP255QDV\", Request id \"0HLMJBP255QDV:00000001\": An unhandled exception was thrown by the application.\r\nSystem.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.\r\nMethod 'GetValidationVisitor' in type 'FluentValidation.AspNetCore.FluentValidationObjectModelValidator' from assembly 'FluentValidation.AspNetCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0' does not have an implementation.\r\n   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n   at System.Reflection.RuntimeAssembly.get_DefinedTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Types()\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(IEnumerable`1 parts, ControllerFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetControllerTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetDescriptors()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.OnProvidersExecuting(ActionDescriptorProviderContext context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.Initialize()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.GetChangeToken()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.<>c__DisplayClass11_0.<Subscribe>b__0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1..ctor(Func`1 changeTokenProducer, Action`1 changeTokenConsumer, TState state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.Subscribe()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ControllerActionEndpointDataSource..ctor(IActionDescriptorCollectionProvider actions, ActionEndpointFactory endpointFactory)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n```\r\n\r\nI don't think this is what you want to RTM with right?","Url":"https://github.com/dotnet/sdk/issues/3213","RelatedDescription":"Open issue \"Restore doesn't warn when restoring older pre 3.0 aspnet dependencies on netcore 3.0 resulting in TypeLoadExceptions\" (#3213)"},{"Id":"440823220","IsPullRequest":true,"CreatedAt":"2019-05-07T22:57:45","Actor":"nugetlurker","Number":"3207","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3207","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3207)"},{"Id":"440823183","IsPullRequest":true,"CreatedAt":"2019-05-07T22:57:32","Actor":"nugetlurker","Number":"3206","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3206","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3206)"},{"Id":"440938051","IsPullRequest":true,"CreatedAt":"2019-05-07T21:41:47","Actor":"nguerrera","Number":"3208","RawContent":null,"Title":"Extend default AssetTargetFallback up to net48","State":"closed","Body":"Before:\r\n```\r\nAssetTargetFallback=net461\r\n```\r\n\r\nAfter:\r\n```\r\nAssetTargetFallback=net461;net462;net47;net471;net472;net48\r\n```\r\n\r\nThis ensures that existing projects do not get different assets, and that the \"oldest\" available assets beyond net461 (deemed most compatible) are used.\r\n\r\nFix #2425 ","Url":"https://github.com/dotnet/sdk/pull/3208","RelatedDescription":"Closed or merged PR \"Extend default AssetTargetFallback up to net48\" (#3208)"},{"Id":"440666847","IsPullRequest":true,"CreatedAt":"2019-05-07T12:05:50","Actor":"dotnet-maestro[bot]","Number":"3205","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3205","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3205)"},{"Id":"440436970","IsPullRequest":true,"CreatedAt":"2019-05-05T13:39:55","Actor":"dotnet-maestro[bot]","Number":"3203","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3203)"},{"Id":"440316133","IsPullRequest":true,"CreatedAt":"2019-05-04T13:50:03","Actor":"dotnet-maestro[bot]","Number":"3202","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19253.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3202)"},{"Id":"440251525","IsPullRequest":false,"CreatedAt":"2019-05-03T22:57:23","Actor":"tmat","Number":"3201","RawContent":null,"Title":"GenerateBuildDependencyFile reads incorrect AssemblyVersion","State":"open","Body":"[`GenerateBuildDependencyFile`](https://github.com/dotnet/sdk/blob/7209eb0e66bfba58714af68ddef81115552a4a0c/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L151) target has parameter: `AssemblyVersion=\"$(Version)\"`, which is suspicious because `Version` is not necessarily the same as an `$(AssemblyVersion)`. The target should read `AssemblyVersion` property and add `GetAssemblyVersion` target to its DependsOnTargets.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3201","RelatedDescription":"Open issue \"GenerateBuildDependencyFile reads incorrect AssemblyVersion\" (#3201)"},{"Id":"440210201","IsPullRequest":true,"CreatedAt":"2019-05-03T22:17:04","Actor":"johnbeisner","Number":"3200","RawContent":null,"Title":"Use https://github.com/dotnet/sdk as the repository.","State":"closed","Body":"Moving the perf test to helix created a new branch for reporting because the repo is not in GitHub. If we put the GitHub repo on the command line to 'build.py' it should connect to the existing treadline.\r\n\r\n\r\n@jorive \r\n","Url":"https://github.com/dotnet/sdk/pull/3200","RelatedDescription":"Closed or merged PR \"Use https://github.com/dotnet/sdk as the repository.\" (#3200)"},{"Id":"440015542","IsPullRequest":true,"CreatedAt":"2019-05-03T13:51:01","Actor":"dotnet-maestro[bot]","Number":"3199","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19252.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3199)"},{"Id":"439830421","IsPullRequest":true,"CreatedAt":"2019-05-03T02:51:56","Actor":"dsplaisted","Number":"3198","RawContent":null,"Title":"Use FrameworkList from targeting packs","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3198","RelatedDescription":"Closed or merged PR \"Use FrameworkList from targeting packs\" (#3198)"},{"Id":"439397373","IsPullRequest":true,"CreatedAt":"2019-05-02T23:24:30","Actor":"dsplaisted","Number":"3195","RawContent":null,"Title":"Add reference to empty Microsoft.NETCore.App package","State":"closed","Body":"The reference to the Microsoft.NETCore.App package is specified via the PackagesToReference metadata on KnownFrameworkReference.  This metadata was added in https://github.com/dotnet/core-sdk/pull/1766, and the package was produced in https://github.com/dotnet/core-setup/pull/5893.\r\n\r\nOnce https://github.com/dotnet/core-setup/issues/6222 is done, this should fix #3044.  This PR also adds a test case for that issue, which is currently skipped.\r\n\r\nThis PR removes the implicit reference to the Microsoft.NETCore.Platforms package, as that will now come in as a dependency of the Microsoft.NETCore.App package.","Url":"https://github.com/dotnet/sdk/pull/3195","RelatedDescription":"Closed or merged PR \"Add reference to empty Microsoft.NETCore.App package\" (#3195)"},{"Id":"439817185","IsPullRequest":true,"CreatedAt":"2019-05-02T22:35:45","Actor":"mmitche","Number":"3197","RawContent":null,"Title":"[release/2*] Move to Azure DevOps","State":"open","Body":"- Autogenerated off of Jenkins configuration\r\n- Applies to release/2.1* and release/2.2* branches\r\n- Removed ubuntu 14.04 configuration","Url":"https://github.com/dotnet/sdk/pull/3197","RelatedDescription":"Open PR \"[release/2*] Move to Azure DevOps\" (#3197)"},{"Id":"439786676","IsPullRequest":false,"CreatedAt":"2019-05-02T21:01:54","Actor":"NinoFloris","Number":"3196","RawContent":null,"Title":"Better way of hooking into \"Before\" Publish","State":"open","Body":"So I was looking around to see if I could redefine some defaults to always be true iff we run a Publish action.\r\n\r\nI could only seem to get there by chaining msbuild gotchas, essentially having a project like:\r\n```proj\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\"  />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <Target Name=\"OldPublish\" DependsOnTargets=\"_PublishBuildAlternative;_PublishNoBuildAlternative\">\r\n    <!-- Ensure there is minimal verbosity output pointing to the publish directory and not just the\r\n         build step's minimal output. Otherwise there is no indication at minimal verbosity of where\r\n         the published assets were copied. -->\r\n    <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(PublishDir)'))\" />\r\n  </Target>\r\n  \r\n  <Target Name=\"NewDefaults\">\r\n    <PropertyGroup>\r\n       ... Override defaults here\r\n    </PropertyGroup>\r\n  </Target>\r\n  \r\n  <Target Name=\"Publish\"\r\n          DependsOnTargets=\"NewDefaults\"\r\n          Condition=\"$(IsPublishable) == 'true'\">\r\n    \r\n    // We actually need NewDefaults as a separate target to set the props\r\n    // due to a long standing CallTarget bug https://github.com/Microsoft/msbuild/issues/1006\r\n    <CallTarget Targets=\"NewPublish\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe pain here is mainly that you cannot get any custom evalution in before `/t: Publish` —  without doing crazy stuff — there's only the indifferent InitialTargets. \r\n\r\nProblem there obviously is if you really need a Target to only run before Publish, not always.\r\n\r\nIs there anything we can do better here?\r\n\r\nIt looks I'm not the first either https://github.com/dotnet/sdk/issues/1039, although there it seems BeforePublish was still a thing.","Url":"https://github.com/dotnet/sdk/issues/3196","RelatedDescription":"Open issue \"Better way of hooking into \"Before\" Publish\" (#3196)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1126254867708727296","CreatedAt":"2019-05-08T22:37:39+00:00","UserScreenname":"dotnet","Text":"Introducing the new https://t.co/YEWOJxOW2B.SqlClient #DOTNET #dotnetcore #build2019\nhttps://t.co/JhNYQ1GDni https://t.co/44c9wGLwsC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":65,"RawContent":null},{"Id":"1126254256850231296","CreatedAt":"2019-05-08T22:35:14+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework 6.3 Preview with .NET Core Support #dotnetcore #entityframework #DOTNET… https://t.co/9jFIJBJRB4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":90,"FavoriteCount":39,"RawContent":null},{"Id":"1125533180725907458","CreatedAt":"2019-05-06T22:49:56+00:00","UserScreenname":"dotnet","Text":".NET Core is the Future of .NET #dotnetcore #build2019\nhttps://t.co/43Zpcfa4Px https://t.co/496vlRtRSJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":218,"FavoriteCount":107,"RawContent":null},{"Id":"1125481613435949057","CreatedAt":"2019-05-06T19:25:01+00:00","UserScreenname":"dotnet","Text":"Announcing ML .NET 1.0 #machinelearning #dotnet https://t.co/bZa9t3UnNq #build2019 https://t.co/noiQ59ZcnO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":130,"RawContent":null},{"Id":"1125434436114194432","CreatedAt":"2019-05-06T16:17:33+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5, the next step in our journey that unifies the #dotnet platform https://t.co/OT6A0KkL0i… https://t.co/2ldeFp5lHB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":852,"FavoriteCount":571,"RawContent":null},{"Id":"1125433519579119616","CreatedAt":"2019-05-06T16:13:55+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core updates in .NET Core 3.0 Preview 5! https://t.co/9DB6M3rxNn #build2019 https://t.co/zLbcHvIN5P","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":72,"FavoriteCount":52,"RawContent":null},{"Id":"1125433224316899328","CreatedAt":"2019-05-06T16:12:44+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 5 https://t.co/1lswthCaj1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":195,"FavoriteCount":100,"RawContent":null},{"Id":"1125433206289756160","CreatedAt":"2019-05-06T16:12:40+00:00","UserScreenname":"dotnet","Text":".NET Core 3.0 Preview 5 now available! This #dotnetcore preview release includes new features, stability and improv… https://t.co/EbXcvuDPYI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":73,"RawContent":null},{"Id":"1125433039163539456","CreatedAt":"2019-05-06T16:12:00+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5 https://t.co/OT6A0KkL0i","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":1590,"FavoriteCount":1034,"RawContent":null}]}},"RunOn":"2019-05-11T05:30:31.2556682Z","RunDurationInMilliseconds":9579}