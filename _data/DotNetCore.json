{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7417084161","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:13:43","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17105","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr to preview3-02622-01, preview3-26322-01, respectively (master)\" (#17105) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7417010852","Type":"PullRequestEvent","CreatedAt":"2018-03-22T04:43:53","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17119","RelatedDescription":"Opened pull request \"fix order of Serialize for linux build\" (#17119) at dotnet/coreclr","RelatedBody":"Fix for #17116. The build would work fine for dynamic events on Windows, but on Linux clang always takes the overloads with <Head, Tail...> until there are no arguments, then complains about no overload takes 0 arguments.\r\n\r\nMoving the definitions around fixes it."},{"Id":"7416997741","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:38:28","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17118","RelatedDescription":"Opened issue \"[local gc] LogAlways is not handled correctly for local gc\" (#17118) at dotnet/coreclr","RelatedBody":"In GCEventStatus::Set https://github.com/dotnet/coreclr/blob/a4845dca1e1edffe07286d0c8ddff04aadab0181/src/gc/gceventstatus.h#L86-L99\r\n\r\nIf the provider is turned on with LogAlways, the value of level will be 255 and at the very least the assert will fire, I haven't dug through the code path yet and it also may not do what's expected.\r\n\r\n"},{"Id":"7416988044","Type":"PullRequestEvent","CreatedAt":"2018-03-22T04:34:26","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17113","RelatedDescription":"Merged pull request \"Fix Incorrect Array Dereference When Clearing EventData.Reserved\" (#17113) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/28099.\r\n\r\nWith the change to no longer initialize locals in System.Private.CoreLib, EventData.Reserved must be manually initialized to zero for manifest-based ETW.  This was done in https://github.com/dotnet/coreclr/pull/16283.  This change fixes an instance of missing initialization due to an incorrect array index.\r\n\r\ncc: @danmosemsft, @JeremyKuhne"},{"Id":"7416986897","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:33:58","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17117","RelatedDescription":"Opened issue \"[local gc] softwarewritewatch throws an assert when running under local gc\" (#17117) at dotnet/coreclr","RelatedBody":"To repro, build a private debug runtime, then turn on local gc with `set COMPLUS_GCName=<path to clrgc.dll>`\r\n\r\nThen this assert will fire repeatedly: https://github.com/dotnet/coreclr/blob/0597eed6a6674ad0b0f531a851475c212c7478c5/src/gc/softwarewritewatch.cpp#L88 \r\n\r\n"},{"Id":"7416979986","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:31:03","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17116","RelatedDescription":"Opened issue \"[local gc] dynamic event pipeline does not build correctly on linux\" (#17116) at dotnet/coreclr","RelatedBody":"There's a clang/msvc difference that causes defining a gc dynamic event to break the linux build. The fix is simple, just reordering some function definitions, and I'll have a PR out soon"},{"Id":"7416718001","Type":"PullRequestEvent","CreatedAt":"2018-03-22T02:52:45","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17115","RelatedDescription":"Opened pull request \"Fix CompareTo/Equals when dealing with Empty Span or Span wrapping a null string\" (#17115) at dotnet/coreclr","RelatedBody":"- Added missing Debug.Asserts to catch when an empty span is being passed to Interop code (which could result in NullReferenceException\r\n- Fixed Span.CompareTo and Span.Equals by adding checks for `length == 0` and addressing them ahead of time. Resolved based on the discussion in https://github.com/dotnet/corefx/issues/27350.\r\n- Fixed the implementation of Trim, TrimStart, TrimEnd so that it behaves identical to string APIs when trimChars is null/empty.\r\n\r\nFrom https://msdn.microsoft.com/en-us/library/d4tt83f9(v=vs.110).aspx\r\n> The string that remains after all occurrences of the characters in the trimChars parameter are removed from the start and end of the current string. If trimChars is null or an empty array, white-space characters are removed instead.\r\n\r\nAdded tests in corefx:\r\n\r\ncc @KrzysztofCwalina, @jkotas, @tarekgh, @stephentoub, @joshfree, @VSadov "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7416957554","Type":"PullRequestEvent","CreatedAt":"2018-03-22T04:21:30","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8863","RelatedDescription":"Opened pull request \"Update launch settings for ApplicationUrl handling\" (#8863) at dotnet/cli","RelatedBody":"Per @danroth27, if the user sets the environment variable in a launch profile for ASPNETCORE_URLS, it should override the value of ApplicationUrl. Added tests to check that behavior & verify that ApplicationUrl is being applied in general."},{"Id":"7416601524","Type":"PullRequestEvent","CreatedAt":"2018-03-22T02:12:33","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8862","RelatedDescription":"Merged pull request \"Change command order for tools\" (#8862) at dotnet/cli","RelatedBody":"dotnet install tool -> dotnet tool install\r\ndotnet uninstall tool -> dotnet tool uninstall\r\ndotnet list tool -> dotnet tool list\r\ndotnet update tool -> dotnet tool update\r\n \r\ncc @KathleenDollard "},{"Id":"7415985600","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:48:11","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8862","RelatedDescription":"Opened pull request \"Change verb order for tools\" (#8862) at dotnet/cli","RelatedBody":"dotnet install tool -> dotnet tool install\r\ndotnet uninstall tool -> dotnet tool uninstall\r\ndotnet list tool -> dotnet tool list\r\ndotnet update tool -> dotnet tool update\r\n \r\ncc @KathleenDollard "},{"Id":"7415682164","Type":"IssuesEvent","CreatedAt":"2018-03-21T21:34:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/5147","RelatedDescription":"Closed issue \"Is there a plan to support global tools install like Npm ?\" (#5147) at dotnet/cli","RelatedBody":"In NodeJs   we can use  `npm install bower -g`  to install bower or other tools ,\r\nI think dotnet should do it too .\r\nI expect there will be a command like :   `dotnet tools install <toolname> -g`  by default the tools put in global shoud build a  platform specific  binary ( on windows, there will be a  `<app>.exe ` file   )\r\n\r\nand `dotnet tools install  <toolname> `  to manage  the tools section in project.json.\r\n\r\n\r\n\r\n\r\n"},{"Id":"7415673654","Type":"IssuesEvent","CreatedAt":"2018-03-21T21:32:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8564","RelatedDescription":"Closed issue \"update, for dotnet tool\" (#8564) at dotnet/cli","RelatedBody":"Check the packageId is the same, check version number is increasing\r\n\r\ndo an uninstall the old and install the new tool in order to make sure shims are consistent."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7416830969","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:32:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/691","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02622-01 (master)\" (#691) at dotnet/standard","RelatedBody":""},{"Id":"7416827294","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:30:59","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/687","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02620-10 (master)\" (#687) at dotnet/standard","RelatedBody":""},{"Id":"7416814357","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:26:19","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/684","RelatedDescription":"Closed issue \"System.AppContext.GetData is in netstandard1.6 but not net462\" (#684) at dotnet/standard","RelatedBody":"@nothrow commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281)\n\n# Issue Title\r\n\r\nSome .NET Standard calls are not implemented as expected in .NET Framework\r\n\r\n# General\r\n\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.appcontext.getdata?view=netstandard-1.6#System_AppContext_GetData_System_String_\r\n\r\nHere, it says that AppContext.GetData is supported in NetStandard 1.6, 2.0, but .NET Framework 4.7.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n\r\nthis one says, that .NET 461 is fully supporting .NET Standard 2.0.\r\n\r\nI have application, that is compiled as .NET Standard library, and then is expected to be called from some kind of service host, that is either net462, or netcoreapp (based on platform it is running on). However, some of the libraries (Microsoft.Extensions.DependencyModel) for netstandard uses this call.\r\n\n\n---\n\n@svick commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281#issuecomment-368089059)\n\nThis is expected. .Net Framework 4.6.1 behaves as if it supported .Net Standard 2.0 and it does support the vast majority of it, but not everything. Specifically, it does not support APIs that were added in .Net Standard 1.5 and 1.6.\r\n\r\nFor more details, see [.NET Framework 4.6.1 supporting .NET Standard 2.0](https://github.com/dotnet/standard/tree/master/docs/netstandard-20#net-framework-461-supporting-net-standard-20).\r\n\r\nAs for your specific case, Microsoft.Extensions.DependencyModel 2.0.4 has versions for .Net Framework 4.5.1, .Net Standard 1.3 and .Net Standard 1.6. How exactly are you distributing your application/library? Maybe there's a way to use the .Net Framework 4.5.1 version of Microsoft.Extensions.DependencyModel from your .Net Framework 4.6.2 host?\n\n---\n\n@nothrow commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369511734)\n\nThanks for the link, I missed this specific document. \r\n\r\n> Considering the number of APIs that .NET Framework 4.6.1 will not support is low and that these are all brand-new APIs with low adoption we believe this is a much better trade-off.\r\n\r\nThis is kind of unfortunate, since the brand new API is used by ASP.NET Core, so eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here.\r\n\r\nI had troubles with 4.5.1 version, so I ended up with shipping my own forked version of DependencyModel. \r\n\r\nJust a suggestion, there is bunch of #if DOTNETCORE s  in `Microsoft.Extensions.DependencyModel`. Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\n\n\n---\n\n@svick commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369566176)\n\n> eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here\r\n\r\nI don't think so, that's what the .Net Framework 4.5.1 version is for. I think you're in a special situation, where you're distributing a single DLL to multiple frameworks, so that doesn't help. But most people will be fine.\r\n\r\n> Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\nI don't know, I'm not sure that would actually work. You might consider creating a new issue about that in the repo where that code lives: [dotnet/core-setup](https://github.com/dotnet/core-setup).\n\n---\n\n@Petermarcu commented on [Wed Mar 14 2018](https://github.com/dotnet/core/issues/1281#issuecomment-373257629)\n\n@terrajobst , sounds like this one is just unfortunately hitting the small set of API's that fell through the cracks. Anything actionable here? Should we move this to the standard repo or close?\n\n"},{"Id":"7416804653","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:22:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/683","RelatedDescription":"Closed issue \"netstandard2.0 library, dependent on Microsoft.Win32.Registry, doesn't work from net471 when loaded via MEF\" (#683) at dotnet/standard","RelatedBody":"@jherby2k commented on [Wed Feb 28 2018](https://github.com/dotnet/core/issues/1311)\n\n# Issue Title\r\n\r\nI'm building a .net standard 2.0 library that uses MEF to load extensions. The MEF parts are also .net standard 2.0.\r\n\r\nEverything works fine when called from netcore2.0 test project. But if i have the test project also target net471, calls to Microsoft.Win32.Registry from the MEF part fail (Registry.LocalMachine returns null). I assume this is because Microsoft.Win32.Registry has a net461-specific library that isn't present.\r\n\r\nI see this problem doesn't exist if, instead of using MEF, i just directly depend on the part. I imagine MEF prevents the framework-specific dependencies from flowing through correctly. Any suggestions?\r\n\r\n# General\r\n\r\nYou can repro this by cloning https://github.com/jherby2k/AudioWorks.git then changing the AudioWorks.Api.Tests projects to also target net471. Tests using the AudioWorks.Extensions.Apple extension will fail because it can't read the registry.\n\n"},{"Id":"7415822023","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:06:25","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/690","RelatedDescription":"Merged pull request \"Update BuildTools to 2.1.0-preview2-02621-01, fix up build\" (#690) at dotnet/standard","RelatedBody":" * Ported https://github.com/dotnet/corefx/pull/26686 \"Building non-Windows builds using the CLI's MSBuild\"\r\n * Set `<RunMatchingRefApiCompat>false</RunMatchingRefApiCompat>` globally. This came from https://github.com/dotnet/buildtools/pull/1949. I think it should be turned off and baselined (like https://github.com/dotnet/corefx/pull/27881) but I'm not familiar with this infra, or if it makes sense to do that in a `release/2.0.0` branch.\r\n\r\nThis was driven by attempting to build on Fedora 26, but I also successfully built on Windows.\r\n\r\nDoing this for https://github.com/dotnet/source-build/pull/371#issuecomment-375013767"},{"Id":"7414650565","Type":"IssuesEvent","CreatedAt":"2018-03-21T18:12:40","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/676","RelatedDescription":"Closed issue \"System.Data.SqlClient error in Net Standard 2.0 \" (#676) at dotnet/standard","RelatedBody":"I have a project with a class library in Net Standard 2.0. using a System.Data.SqlClient nugget and it send me the next error:\r\n\r\n`System.IO.FileNotFoundException: 'No se puede cargar el archivo o ensamblado 'System.Data.SqlClient, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ni una de sus dependencias. El sistema no puede encontrar el archivo especificado.'`\r\n\r\nThe issue throws in the next portion of code:\r\n\r\npublic class SqlServerDbManager : SqlServerUnitOfWork\r\n    {\r\n-->        public SqlServerDbManager(string connectionStringName) : base(connectionStringName)\r\n        {\r\n        }\r\n    }\r\n\r\npublic class SqlServerUnitOfWork : ISqlServerUnitOfWork, IDisposable\r\n    {\r\n        #region Data Members\r\n\r\n        private bool disposed;\r\n        private DbProviderFactory factory;\r\n        protected IDbConnection connection;\r\n\r\n        #endregion\r\n\r\n        #region Construction\r\n\r\n        public SqlServerUnitOfWork(string connectionString)\r\n        {\r\n            this.factory = SqlClientFactory.Instance;\r\n            this.connection = factory.CreateConnection();\r\n            this.connection.ConnectionString = connectionString;\r\n        }\r\n\r\n        #end region\r\n   }\r\n\r\nDo you have any suggest or what is hiring the error?\r\n\r\nThanks a lot"},{"Id":"7414564898","Type":"PullRequestEvent","CreatedAt":"2018-03-21T17:57:29","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/690","RelatedDescription":"Opened pull request \"Update BuildTools to 2.1.0-preview2-02621-01, fix up build\" (#690) at dotnet/standard","RelatedBody":" * Ported https://github.com/dotnet/corefx/pull/26686 \"Building non-Windows builds using the CLI's MSBuild\"\r\n * Set `<RunMatchingRefApiCompat>false</RunMatchingRefApiCompat>` globally. This came from https://github.com/dotnet/buildtools/pull/1949. I think it should be turned off and baselined (like https://github.com/dotnet/corefx/pull/27881) but I'm not familiar with this infra, or if it makes sense to do that in a `release/2.0.0` branch.\r\n\r\nThis was driven by attempting to build on Fedora 26, but I also successfully built on Windows.\r\n\r\nDoing this for https://github.com/dotnet/source-build/pull/371#issuecomment-375013767"},{"Id":"7413650550","Type":"IssuesEvent","CreatedAt":"2018-03-21T15:33:02","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/689","RelatedDescription":"Opened issue \"Fix DllImport probing\" (#689) at dotnet/standard","RelatedBody":"CoreCLR allows for more variations of DllImport probing:\r\nhttps://github.com/dotnet/coreclr/blob/430331c011a0460670e2743ab08caa36f914f52d/src/vm/dllimport.cpp#L6066-L6084\r\nhttps://github.com/dotnet/coreclr/blob/e7bb40f52d46671f5001012284a2f54eaa658e35/src/pal/inc/pal.h#L5259-L5265\r\nAs a result we should update our list:\r\nhttps://github.com/dotnet/standard/blob/2bb3279f4adc6da02ee8a191904828f7e024226e/Microsoft.Packaging.Tools.Trimming/tasks/FileNode.cs#L272\r\n\r\nToday it's missing the prefixes.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7417092389","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:16:50","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28350","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, ProjectNTfs, ProjectNTfsTestILC to preview3-02622-01, preview3-26322-01, beta-26322-00, beta-26322-00, respectively (master)\" (#28350) at dotnet/corefx","RelatedBody":""},{"Id":"7417092154","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:16:44","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28317","RelatedDescription":null,"RelatedBody":"Fixes #16511.\r\n\r\nAt least, it fixed it for my machine when I unplugged my office from corpnet.  But since it's the same message as the various versions of the issue have reported it seems like the right fix."},{"Id":"7417092035","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:16:42","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28317","RelatedDescription":"Closed pull request \"Make WindowsPrincipalIsInRoleNeg pass when a domain client is offline\" (#28317) at dotnet/corefx","RelatedBody":"Fixes #16511.\r\n\r\nAt least, it fixed it for my machine when I unplugged my office from corpnet.  But since it's the same message as the various versions of the issue have reported it seems like the right fix."},{"Id":"7417081936","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:12:58","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28348","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr to preview3-02622-01, preview3-26322-01, respectively (master)\" (#28348) at dotnet/corefx","RelatedBody":""},{"Id":"7417040480","Type":"PullRequestEvent","CreatedAt":"2018-03-22T04:56:13","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28345","RelatedDescription":"Merged pull request \"Disable Millisec test on Linux\" (#28345) at dotnet/corefx","RelatedBody":"Fix https://github.com/dotnet/corefx/issues/28342\r\n\r\nI should have done this earlier. Commenting out the assert rather than disabling as it's handy for debugging."},{"Id":"7417040466","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:56:13","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28342","RelatedDescription":"Closed issue \"TimesIncludeMillisecondPart_Linux test failing in CI on Ubuntu\" (#28342) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefx/pull/28294\r\nSystem.IO.Tests.FileInfo_GetSetTimes/TimesIncludeMillisecondPart_Linux\r\nhttps://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a319af0f981c27fd4bd680b6a545d44dc42fbbbc/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.FileInfo_GetSetTimes~2FTimesIncludeMillisecondPart_Linux\r\n\r\nUbuntu.1404.Amd64.Open-x64-Release\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.AllException\r\nMessage :\r\nAssert.All() Failure: 1 out of 6 items in the collection did not pass.\r\n[1]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure\r\n     Expected: Not 0\r\n     Actual:   0\r\n        at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass9_0.<TimesIncludeMillisecondPart_Linux>b__0(TimeFunction function) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 108\r\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\r\n```\r\n\r\ncc @JeremyKuhne "},{"Id":"7417037588","Type":"PullRequestEvent","CreatedAt":"2018-03-22T04:54:59","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28349","RelatedDescription":"Opened pull request \"Fixed netfx System.Text.Encoding.Tests fails on non-English Windows\" (#28349) at dotnet/corefx","RelatedBody":"See https://github.com/dotnet/corefx/issues/28136"},{"Id":"7416988035","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:34:26","Actor":"brianrob","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28099","RelatedDescription":"Closed issue \"Flaky tests BasicEventSourceTests.TestsWriteEvent/Test_WriteEvent_SelfDescribing_ETW and Test_WriteEvent_Manifest_ETW\" (#28099) at dotnet/corefx","RelatedBody":"Opened on behalf of @danmosemsft\n\nThe test `BasicEventSourceTests.TestsWriteEvent/Test_WriteEvent_SelfDescribing_ETW` has failed.\n\nAssert.Equal() Failure\\r\n    Expected: \\r\n    Actual:   x\n\n        Stack Trace:\n\n           at BasicEventSourceTests.TestsWriteEvent.<>c__DisplayClass10_1.<Test_WriteEvent>b__31(Event evt) in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\TestsWriteEvent.cs:line 351\n       at BasicEventSourceTests.EventTestHarness.<>c__DisplayClass2_0.<RunTests>b__0(Event data) in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\Harness\\EventTestHarness.cs:line 82\n       at BasicEventSourceTests.EtwListener.OnEventHelper(TraceEvent data) in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\Harness\\Listeners.cs:line 258\n       at Microsoft.Diagnostics.Tracing.Parsers.DynamicTraceEventData.Dispatch()\n       at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent)\n       at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.Dispatch(TraceEvent anEvent)\n       at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.RawDispatch(EVENT_RECORD* rawData)\n       at Microsoft.Diagnostics.Tracing.TraceEventNativeMethods.ProcessTrace(UInt64[] handleArray, UInt32 handleCount, IntPtr StartTime, IntPtr EndTime)\n       at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.ProcessOneFile()\n       at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.Process()\n       at BasicEventSourceTests.EtwListener.Dispose() in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\Harness\\Listeners.cs:line 238\n       at BasicEventSourceTests.EventTestHarness.RunTests(List`1 tests, Listener listener, EventSource source, FilteringOptions options) in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\Harness\\EventTestHarness.cs:line 170\n       at BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent(Listener listener, Boolean useSelfDescribingEvents) in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\TestsWriteEvent.cs:line 430\n       at BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_SelfDescribing_ETW() in E:\\A\\_work\\63\\s\\corefx\\src\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\TestsWriteEvent.cs:line 79\nBuild : Master - 20180314.07 (Core Tests)\nFailing configurations:\n- Windows.10.Amd64.Core-x86\n  - Debug\n- Windows.10.Amd64-x86\n  - Debug\n"},{"Id":"7416835705","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:34:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28348","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr to preview3-02622-01, preview3-26322-01, respectively (master)\" (#28348) at dotnet/corefx","RelatedBody":""},{"Id":"7416832103","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:32:39","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28346","RelatedDescription":"Closed pull request \"Update CoreClr to preview3-26322-01 (master)\" (#28346) at dotnet/corefx","RelatedBody":""},{"Id":"7416808778","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:24:21","Actor":"weshaggard","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24483","RelatedDescription":"Closed issue \"System.PlatformNotSupportedException: 'Registry is not supported on this platform.'\" (#24483) at dotnet/corefx","RelatedBody":"@saharM commented on [Mon Aug 21 2017](https://github.com/dotnet/core/issues/876)\n\n## Steps to reproduce:\r\n\r\nIn Visual Studio 2017 version 15.3.0, in a .NET Core 2.0 Class library I install this Nuget package:\r\n\r\n    <PackageReference Include=\"Microsoft.Win32.Registry\" Version=\"4.4.0\" />\r\n\r\nI write a simple method that uses RegistryKey class like this:\r\n\r\n        internal static bool ReadRegistry()\r\n        {\r\n            bool ret = false;\r\n            RegistryKey sampleDir = Registry.CurrentUser.CreateSubKey(\"Software\\\\Company\\\\Name\");\r\n            if (!string.IsNullOrEmpty(sampleDir.GetValue(\"Foo\", \"\").ToString()))\r\n                ret = true;\r\n            return ret;\r\n        }\r\n\r\nI add a new Windows Form project to the solution and in this new project add a reference to my class library and call ReadRegistry method. Building the solution is successful. \r\n\r\n**Side Problem:** At runtime every time that the code reaches the line that calls ReadRegistry method I get this error: \r\n\r\n`System.IO.FileNotFoundException: 'Could not load file or assembly 'Microsoft.Win32.Registry, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.'`\r\n\r\nI try a workaround for this problem by downloading the package manually and copying \"\\microsoft.win32.registry.4.4.0\\lib\\netstandard2.0\\Microsoft.Win32.Registry.dll\" file into WinForm project \"\\bin\\Debug\" folder. It works and I can debug inside the ReadRegistry method.\r\n\r\n**Main Problem:** Registry.CurrentUser is null and all static properties of Registry class are null and calling RegistryKey.OpenBaseKey method throws this exception:\r\n\r\n`System.PlatformNotSupportedException: 'Registry is not supported on this platform.'`\r\n\n\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7417102258","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:20:35","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25351","RelatedDescription":"Merged pull request \"recursive-patterns(7): improve generated code for switch\" (#25351) at dotnet/roslyn","RelatedBody":"Only the last four deltas in this PR are new code. The remaining deltas are from https://github.com/dotnet/roslyn/pull/24059 which is being reviewed separately.\r\n\r\nIn this PR we improve the code for pattern-matching in a couple of ways\r\n- Improve the heuristic that we use to select the next decision to use in building the decision dag. A null check followed by a type test is replaced by just the type test, which implies non-null.\r\n- added a missing case that was causing us not to eliminate some redundant null checks from one case to the next\r\n- Added a `Dump()` method to `DagState` to permit getting a nice printed form of the decision tree state under construction to make code quality easier to diagnose\r\n\r\nThe result is better code for the cases where we had a regression before.\r\n\r\n@cston Can you please review this code improvement?\r\n@dotnet/roslyn-compiler A second review also, please?\r\n"},{"Id":"7417098900","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:19:17","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24059","RelatedDescription":"Merged pull request \"recursive-patterns(6): Build and use decision tree to lower pattern-matching operations\" (#24059) at dotnet/roslyn","RelatedBody":"This PR replaces the existing \"decision tree\" with the new \"decision dag\", which is constructed using an iterative worklist algorithm.\r\n\r\n- Iteration 1: Minor changes responding to previous code reviews\r\n- Iteration 2: Use double.IsNaN to test for constant pattern that is double.NaN.\r\n- Iteration 3: Use RemoveAt(0) instead of WhereAsArray(d => d != first)\r\n- Iteration 4: Merge from parent branch\r\n- Iteration 5: Add a skeleton for pattern switch local rewriter; use double.IsNan to test for NaN\r\n- Iteration 6: Merge from parent branch\r\n- Iteration 7: Initial (recursive) implementation of lowering and code gen for pattern switch statement using the new dag data structure.\r\n- Iteration 8: More of the same (review together with iteration 7)\r\n- Iteration 9: Merge from parent branch\r\n- Iteration 10: Merge topological sort implementation.\r\n- Iteration 11: Merge from parent branch\r\n- Iteration 12: Merge from parent branch\r\n- Iteration 13: Complete replacement for pattern switch binder, lowering, and code gen; binding but not lowering and code gen for the switch expression.\r\n- Iteration 14: Merge from parent branch\r\n- Iteration 15: Fix up a missing reference\r\n- Iteration 16: Merge from parent branch and merge fixup\r\n- Iteration 17: Replace recursive algorithms by iterative worklist algorithms (the dag is now a dag, not a tree)\r\n- Iteration 18: Use a decision dag to lower the is-pattern expression (to take advantage of the dag optimizations).\r\n- Iteration 19: Adjust reference for test - code now uses `Nullable<T>.GetValueOrDefault()`\r\n- Iteration 20: Minor simplifications suggested in code review.\r\n- Iteration 21: Minor changes suggested in code review.\r\n"},{"Id":"7417006335","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:42:00","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25663","RelatedDescription":"Opened issue \"open issues from recursive-patterns(6)\" (#25663) at dotnet/roslyn","RelatedBody":"These open issues remain from code review of https://github.com/dotnet/roslyn/pull/24059\r\n\r\n- In `CheckConsistentDecision`, use some notation like `v != null --> !(v == null)` for more clarity than the English language comment.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7417059410","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:03:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5598","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5598) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7416994211","Type":"PullRequestEvent","CreatedAt":"2018-03-22T04:37:05","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5598","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5598) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7416706882","Type":"IssuesEvent","CreatedAt":"2018-03-22T02:48:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/5593","RelatedDescription":"Reopened issue \"Issue with Process.Start()\" (#5593) at dotnet/corert","RelatedBody":"When I try to start an external program using Process.Start, I'm greeted with this: \r\n![screenshot 27](https://user-images.githubusercontent.com/20741641/37733061-38e764c4-2d1d-11e8-9bc5-bed73e2bc3ac.png)\r\n\r\nIt's supposed to execute an external program which it downloaded.\r\n"},{"Id":"7416706461","Type":"IssuesEvent","CreatedAt":"2018-03-22T02:48:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5593","RelatedDescription":"Closed issue \"Issue with Process.Start()\" (#5593) at dotnet/corert","RelatedBody":"When I try to start an external program using Process.Start, I'm greeted with this: \r\n![screenshot 27](https://user-images.githubusercontent.com/20741641/37733061-38e764c4-2d1d-11e8-9bc5-bed73e2bc3ac.png)\r\n\r\nIt's supposed to execute an external program which it downloaded.\r\n"},{"Id":"7416706153","Type":"IssuesEvent","CreatedAt":"2018-03-22T02:48:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/5593","RelatedDescription":"Reopened issue \"Issue with Process.Start()\" (#5593) at dotnet/corert","RelatedBody":"When I try to start an external program using Process.Start, I'm greeted with this: \r\n![screenshot 27](https://user-images.githubusercontent.com/20741641/37733061-38e764c4-2d1d-11e8-9bc5-bed73e2bc3ac.png)\r\n\r\nIt's supposed to execute an external program which it downloaded.\r\n"},{"Id":"7416705848","Type":"IssuesEvent","CreatedAt":"2018-03-22T02:48:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5593","RelatedDescription":"Closed issue \"Issue with Process.Start()\" (#5593) at dotnet/corert","RelatedBody":"When I try to start an external program using Process.Start, I'm greeted with this: \r\n![screenshot 27](https://user-images.githubusercontent.com/20741641/37733061-38e764c4-2d1d-11e8-9bc5-bed73e2bc3ac.png)\r\n\r\nIt's supposed to execute an external program which it downloaded.\r\n"},{"Id":"7416696667","Type":"PullRequestEvent","CreatedAt":"2018-03-22T02:45:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5597","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5597) at dotnet/corert","RelatedBody":""},{"Id":"7416696100","Type":"PullRequestEvent","CreatedAt":"2018-03-22T02:45:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5596","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5596) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7416445437","Type":"PullRequestEvent","CreatedAt":"2018-03-22T01:17:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5597","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5597) at dotnet/corert","RelatedBody":""},{"Id":"7416411406","Type":"PullRequestEvent","CreatedAt":"2018-03-22T01:05:15","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5596","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5596) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7416147834","Type":"PullRequestEvent","CreatedAt":"2018-03-21T23:35:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5595","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5595) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7415699895","Type":"PullRequestEvent","CreatedAt":"2018-03-21T21:38:27","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5595","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5595) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7416216446","Type":"PullRequestEvent","CreatedAt":"2018-03-21T23:57:35","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2074","RelatedDescription":"Opened pull request \"Set format version in packtool\" (#2074) at dotnet/sdk","RelatedBody":"the second part of https://github.com/dotnet/cli/issues/8805\r\n\r\nI am not sure about the following line. \r\n\r\n```\r\nprivate static readonly Version _formatVersion = new Version(1,0,0);\r\n```\r\n\r\nIt is hard coded. However, we change the version number when there is a breaking change in the tools package format, say move folder structure around in the future. When that happens, it is very likely to change this GenerateToolsSettingsFile at the same time. The value is close to code, it is easier to know what it is for. And there is only one place to change.\r\n\r\nIf we flow this version from, say a prop file. That string \"1.0.0\" will be passed all the way down. And that prop file is far way from the actual change. We are more likely end up forgetting to update it.\r\n\r\n"},{"Id":"7415852030","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:13:29","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2073","RelatedDescription":"Merged pull request \"Implicitly define compilation constant for target framework without version\" (#2073) at dotnet/sdk","RelatedBody":"Added ImplicitFrameworkDefineHierarchy property with out the versioned value for the given TargetFrameworkIdentifier\r\n\r\nMore information and origin @ #2072\r\n\r\n🚲🏠 Please bike shed this, I just tried pick a name that worked, without changing the meaning of the existing properties.  `Hierarchy`, `Parent`, `Root` are all possibly valid values, along with many more."},{"Id":"7414830310","Type":"PullRequestEvent","CreatedAt":"2018-03-21T18:44:52","Actor":"david-driscoll","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2073","RelatedDescription":"Opened pull request \"Implicitly define compilation constant for target framework without version\" (#2073) at dotnet/sdk","RelatedBody":"Added ImplicitFrameworkDefineHierarchy property with out the versioned value for the given TargetFrameworkIdentifier\r\n\r\nMore information and origin @ #2072\r\n\r\n🚲🏠 Please bike shed this, I just tried pick a name that worked, without changing the meaning of the existing properties.  `Hierarchy`, `Parent`, `Root` are all possibly valid values, along with many more."},{"Id":"7414815429","Type":"IssuesEvent","CreatedAt":"2018-03-21T18:42:13","Actor":"david-driscoll","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2072","RelatedDescription":"Opened issue \"Implicitly define compilation constants for target framework without a specific version\" (#2072) at dotnet/sdk","RelatedBody":"I was talking to @dsplaisted (iirc) and someone else at summit and this was one scenario that I felt was missing from the current SDK.\r\n\r\nIt may make sense to also have a general compilation constant that is just the Target Framework Identifier without the version.  Of course this won't work for all cases of the compilation constants (ie, missing API's between versions) but there are places where .NET Desktop differs greatly from .NET Core, and being able to codify that across versions would be helpful.\r\n\r\nWhen multi-targeting, you times have to make code that targets a specific framework (or standard). If you shift your target forward or backward, and go from say `<TargetFrameworks>netstandard1.3;net45</TargetFrameworks>` to `<TargetFrameworks>netstandard2.0;net471</TargetFrameworks>` any of your pre-existing conditional compilation bits will have to be updated from `NETSTANDARD1_3`/`NET45` to ``NETSTANDARD2_0/`NET471`.\r\n\r\nso...\r\n* `NETSTANDARD1_0`, `NETSTANDARD1_3`, `NETSTANDARD2_0`, `...` -> `NETSTANDARD`\r\n* `NET45`, `NET461`, `NET471`, `...` -> `NETFRAMEWORK`\r\n* `NETCOREAPP1_0`, `NETCOREAPP2_0` -> `NETCOREAPP`\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"976141100074373120","CreatedAt":"2018-03-20T16:59:08+00:00","UserScreenname":"dotnet","Text":"Check out this video from @csharpfritz and @jasonbock talking about @roslyn Analyzers and making your code easier t… https://t.co/Nv8pTxt0zP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":8,"RawContent":null},{"Id":"975544139893825536","CreatedAt":"2018-03-19T01:27:02+00:00","UserScreenname":"dotnet","Text":"We agree with this sentiment very much! We often retweet blog posts that came to our attention. While it doesn't im… https://t.co/GtFpUrShX8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":5,"RawContent":null},{"Id":"974694823067246592","CreatedAt":"2018-03-16T17:12:09+00:00","UserScreenname":"dotnet","Text":"Check out the latest On .NET show with @jeremylikness &amp; @jplane talking .NET Core and containers. #dotnetcore https://t.co/NfFbKIsLTw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":18,"RawContent":null},{"Id":"974414421245095936","CreatedAt":"2018-03-15T22:37:56+00:00","UserScreenname":"dotnet","Text":"Transport Layer Security (TLS) best practices with the .NET Framework article published https://t.co/SbAZXvK8n7 #security","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":191,"FavoriteCount":99,"RawContent":null}]}},"RunOn":"2018-03-22T05:30:20.1216772Z","RunDurationInMilliseconds":8100}