{"Data":{"GitHubIssues":{"Issues":[{"Id":"388841642","IsPullRequest":false,"CreatedAt":"2018-12-07T22:49:53","Actor":"chanan","Number":"1756","RawContent":null,"Title":"Exposing the inner ref of an element via BlazorComponent returns an emtpy(?) ref","State":"open","Body":"I have a component that inherits from BlazorComponent with this code:\r\n\r\n```\r\nprotected override void BuildRenderTree(RenderTreeBuilder builder)\r\n        {\r\n            base.BuildRenderTree(builder);\r\n            builder.OpenElement(0, TagName);\r\n            foreach (var param in _attributesToRender)\r\n            {\r\n                builder.AddAttribute(1, param.Key, param.Value);\r\n            }\r\n            if (_classname != null) builder.AddAttribute(1, \"class\", _classname);\r\n            builder.AddElementReferenceCapture(2, capturedRef => { ElementRef = capturedRef; });\r\n            builder.AddContent(3, _childContent);\r\n            builder.CloseElement();\r\n        }\r\n```\r\n\r\nIt's used like so:\r\n\r\n```\r\n<form onSubmit={this.alertValue}>\r\n    <Dynamic TagName=\"input\" ElementRef=\"@inputRef\" />\r\n        <button type=\"button\" onclick=\"@OnClick\">\r\n            Submit\r\n        </button>\r\n</form>\r\n\r\n@functions {\r\n    ElementRef inputRef;\r\n\r\n    async void OnClick()\r\n    {\r\n        await inputRef.AlertValue();\r\n    }\r\n}\r\n```\r\n\r\nWhich ultimately prints out to the console what the ref is. What gets printed is:\r\n\r\n```\r\n{\r\n  \"_blazorElementRef\": null\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1756","RelatedDescription":"Open issue \"Exposing the inner ref of an element via BlazorComponent returns an emtpy(?) ref\" (#1756)"},{"Id":"388558361","IsPullRequest":false,"CreatedAt":"2018-12-07T08:49:54","Actor":"mynkow","Number":"1755","RawContent":null,"Title":"Version for package `Microsoft.AspNetCore.Blazor.Cli` could not be resolved after installing VS2019 Preview","State":"open","Body":"Today I have installed VS2019 Preview and when I tried to run my Blazor App using VS2017 the log under `ASP.NET Core Web Server` says => `Version for package 'Microsoft.AspNetCore.Blazor.Cli' could not be resolved.`\r\n\r\nCan I do do anything to make the Blazor app working again?\r\n\r\nEDIT:\r\nUnistalling VS2019 did not help.\r\n\r\nRecently I have updated to VS 15.9.3\r\n\r\nFile => New Project => Blazor template produces the same error\r\n\r\nReinstalling the `ASP.NET Core Blazor Language Services` did not help.","Url":"https://github.com/aspnet/Blazor/issues/1755","RelatedDescription":"Open issue \"Version for package `Microsoft.AspNetCore.Blazor.Cli` could not be resolved after installing VS2019 Preview\" (#1755)"},{"Id":"388515022","IsPullRequest":false,"CreatedAt":"2018-12-07T05:50:54","Actor":"BerserkerDotNet","Number":"1754","RawContent":null,"Title":"Support for Visual Studio 2019","State":"open","Body":"Make `ASP.NET Core Blazor Language Services` available for VS 2019.","Url":"https://github.com/aspnet/Blazor/issues/1754","RelatedDescription":"Open issue \"Support for Visual Studio 2019\" (#1754)"},{"Id":"388291015","IsPullRequest":false,"CreatedAt":"2018-12-06T16:24:56","Actor":"michaelvolz","Number":"1753","RawContent":null,"Title":"Enhancement suggestion: Components as attributes in other components or tags","State":"open","Body":"```Html\r\n<MyComponent Memoize=\"true\" ComponentProperty=\"@SomeValue\" />\r\n```\r\n\r\n`Memoize` would be another component which defines the `Attribute` and had full access to the underlying component. \r\n\r\nAs an example it could even prohibit rendering and inject a dynamic rendertree which could be stored in a cache. I believe `Taghelpers` can do something similar.\r\n\r\nMore Examples:\r\n```Html\r\n<MyComponent Repeat=\"5\" ComponentProperty=\"@SomeValue\" />\r\n<MyComponent HideWhenEnvironment=\"Production\" ComponentProperty=\"@SomeValue\" />\r\n<MyComponent DisplayWhenEnvironment=\"Debug\" ComponentProperty=\"@SomeValue\" />\r\n<MyComponent LazyLoad=\"true\" ComponentProperty=\"@SomeValue\" />\r\n<MyComponent DataSourceWithCachingAndErrorHandling=\"/api/category/value/@value;bindto(ComponentProperty)\" ComponentProperty=\"@SomeValue\" />\r\n\r\n[...]\r\n\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1753","RelatedDescription":"Open issue \"Enhancement suggestion: Components as attributes in other components or tags\" (#1753)"},{"Id":"388159801","IsPullRequest":false,"CreatedAt":"2018-12-06T10:55:43","Actor":"JulienM28","Number":"1752","RawContent":null,"Title":"Json Data Annotations","State":"open","Body":"Maybe I didn't find the correct method, but I faced an issue using Dtos.\r\n\r\nI'm doing some application with a backent and a frontend sharing the same dtos in a separate dll.\r\n\r\nI used to do like this\r\n\r\n`[JsonProperty(\"qnaList\")] public List<KBEntry> Entries { get; set; } = new List<KBEntry>();`\r\n\r\nbut it seems Blazor doesn't support NewtonSoft Data Annottions.\r\n\r\nWhat could be the good solution for that problem if there's one right now.\r\n\r\nThanks.","Url":"https://github.com/aspnet/Blazor/issues/1752","RelatedDescription":"Open issue \"Json Data Annotations\" (#1752)"},{"Id":"387739543","IsPullRequest":false,"CreatedAt":"2018-12-06T06:04:17","Actor":"Yvahajatiana","Number":"1751","RawContent":null,"Title":"Page reload after onClick - if button inside <form> tag","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1751","RelatedDescription":"Closed issue \"Page reload after onClick - if button inside <form> tag\" (#1751)"},{"Id":"387631881","IsPullRequest":false,"CreatedAt":"2018-12-05T16:46:22","Actor":"MelbourneDeveloper","Number":"1748","RawContent":null,"Title":"USB Access","State":"closed","Body":"When do we get C# USB access over wasm?","Url":"https://github.com/aspnet/Blazor/issues/1748","RelatedDescription":"Closed issue \"USB Access\" (#1748)"},{"Id":"387667962","IsPullRequest":false,"CreatedAt":"2018-12-05T09:35:07","Actor":"michaelvolz","Number":"1750","RawContent":null,"Title":"Update to SDK 2.2.100 throws \"An item with the same key has already been added. Key: .wasm\"","State":"open","Body":"I updated my Blazor project from `2.2.100-preview3-009430` to `2.2.100` release. I now get the following exception:\r\n\r\n```C#\r\nSystem.ArgumentException : An item with the same key has already been added. Key: .wasm\r\nStack Trace:\r\n   at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\r\n   at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\r\n   at Microsoft.AspNetCore.Builder.BlazorApplicationBuilderExtensions.CreateContentTypeProvider(Boolean enableDebugging)\r\n   at Microsoft.AspNetCore.Builder.BlazorApplicationBuilderExtensions.UseBlazor(IApplicationBuilder app, BlazorOptions options)\r\n   at Microsoft.AspNetCore.Builder.ServerSideBlazorApplicationBuilderExtensions.UseServerSideBlazor[TStartup](IApplicationBuilder builder)\r\n   at OpenGraphTilemaker.Web.Server.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env) in C:\\Users\\flynn\\Projects\\OpenGraphTilemaker\\src\\OpenGraphTilemaker.Web.Server\\Startup.cs:line 36\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.HostFilteringStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.TestHost.TestServer..ctor(IWebHostBuilder builder, IFeatureCollection featureCollection)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.CreateServer(IWebHostBuilder builder)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.EnsureServer()\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.CreateDefaultClient(DelegatingHandler[] handlers)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.CreateClient(WebApplicationFactoryClientOptions options)\r\n   at OpenGraphTilemaker.Web.Client.Tests.FunctionalTests.Get_EndpointsReturnSuccessAndCorrectContentType(String url) in C:\\Users\\flynn\\Projects\\OpenGraphTilemaker\\tests\\OpenGraphTilemaker.Web.Client.Tests\\FunctionalTests.cs:line 25\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nThe line\r\n`app.UseServerSideBlazor<Client.Startup>();`\r\nseems to be the reason. \r\n\r\nAny suggestions?","Url":"https://github.com/aspnet/Blazor/issues/1750","RelatedDescription":"Open issue \"Update to SDK 2.2.100 throws \"An item with the same key has already been added. Key: .wasm\"\" (#1750)"},{"Id":"387646389","IsPullRequest":false,"CreatedAt":"2018-12-05T08:36:53","Actor":"zydjohnHotmail","Number":"1749","RawContent":null,"Title":"Can I do this with client-side only programming with Balzor","State":"open","Body":"Hello:\r\nI want to know if I can do this with client-side only programming with Blazor.\r\nI need to monitor a remote web site\"www.randomNum.com\", (a fake domain name), which has a lot of JavaScript scripts, one of them is like this one:\r\n\r\n<!doctype html>\r\n<title>Simple Random Generator</title> \r\n<script type=\"text/javascript\"> \r\ndocument.getElementById(\"CurrentNumber\").innerHTML = Math.random().toString(); \r\n</script>\r\n</html>\r\n \r\nThe web site will from time to time run the JavaScript to show a random number on its web site, the time, when the script run is totally random. \r\nI want to write a C# project using Blazor client-side to monitor the web site and get the random numbers generated by the JavaScript.\r\nAs most of documents I read about Blazor are talking about using Blazor to build a web site using .cshtml as file name extension.  \r\nBut here, what I want to do, the server side is totally out of my control, I can only do some client-side job.\r\nI want to know if Blazor on client-side can do this or not? Like visit a remote web site, and  render the HTML contents, and listen to the DOM events, i.e. DOMContentLoaded, etc.\r\nIf it is possible, it is better to show me some sample code here for my current question: to get the dynamic contents generated by JavaScript.\r\nI am using VS2017 Version 15.9.3 and latest Blazor version on Windows 10.\r\nIf Blazor can't do this at the moment, please also advice if Blazor could do this in the future.  I don't think many people need to build a Web Server using C#, they could build a Web Server using JavaScript for the dynamic contents, which is standard way nowadays.  But I believe, many people could like to use .NET based browser to visit web sites built by other people.\r\nThanks,\r\n","Url":"https://github.com/aspnet/Blazor/issues/1749","RelatedDescription":"Open issue \"Can I do this with client-side only programming with Balzor\" (#1749)"},{"Id":"386836262","IsPullRequest":false,"CreatedAt":"2018-12-04T22:57:20","Actor":"chanan","Number":"1745","RawContent":null,"Title":"OnParametersSetAsync ?","State":"closed","Body":"Hi,\r\n\r\nIn issue #1252 @danroth27 mentioned that OnParametersSetAsync will be added, but it doesnt seem to be there in the V0.7.0. Is it going to be added soon?\r\n\r\nThanks,\r\nChanan","Url":"https://github.com/aspnet/Blazor/issues/1745","RelatedDescription":"Closed issue \"OnParametersSetAsync ?\" (#1745)"},{"Id":"387469873","IsPullRequest":false,"CreatedAt":"2018-12-04T20:38:43","Actor":"UrielMhezzek","Number":"1747","RawContent":null,"Title":"Subclass-Component not use Parameter","State":"open","Body":"Hello,\r\nI tried trying inheritance in Blazor. I found that the parameter does not seem to be inherited.\r\n\r\n**DialogComponent**\r\n```asp\r\n@inherits DialogComponentModel\r\n<div class=\"modal\" tabindex=\"-1\" style=\"display:block\" role=\"dialog\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h3 class=\"modal-title\">@Title</h3>\r\n                <button type=\"button\" class=\"close\" onclick=\"@CloseModal\">\r\n                    <span aria-hidden=\"true\">X</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                @ChildContent\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button class=\"btn btn-block btn-info\" data-dismiss=\"modal\">Save</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n```\r\n\r\n\r\n**DialogComponentModel**\r\n```asp\r\n  public class DialogComponentModel : BlazorComponent\r\n    {\r\n        [Parameter]\r\n        internal string Title { get; set; }\r\n        [Parameter]\r\n        internal bool IsVisible { get; set; }\r\n\r\n\r\n        [Parameter]\r\n        internal Action<bool> IsVisibleChanged { get; set; }\r\n\r\n        [Parameter]\r\n        internal RenderFragment ChildContent { get; set; }\r\n\r\n        internal void CloseModal()\r\n        {\r\n            IsVisible = false;\r\n            IsVisibleChanged?.Invoke(IsVisible);\r\n        }\r\n    }\r\n```\r\n\r\n**SubClass**\r\n```asp\r\n@inherits SubClassModel\r\n@* These Title is shown*@\r\n<h3 class=\"modal-title\">@Title</h3>\r\n\r\n@* Title between in this component is not shown*@\r\n<DialogComponent>\r\n    <h4>Möchtest du wirklich den Eintrag löschen?</h4>\r\n</DialogComponent>\r\n```\r\n\r\n**SubClassModel**\r\n```asp\r\npublic class SubClassModel : DialogComponentModel\r\n    {\r\n\r\n\r\n\r\n    }\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1747","RelatedDescription":"Open issue \"Subclass-Component not use Parameter\" (#1747)"},{"Id":"387313731","IsPullRequest":false,"CreatedAt":"2018-12-04T14:31:55","Actor":"chanan","Number":"1746","RawContent":null,"Title":"JSRuntime.Current is null in Startup.cs","State":"open","Body":"I have a library project that needs to do some initialization is the host project's Startup.cs that includes using javascript. This used to work prior to the JS syntax change. Now, however, JSRuntime.Current is null. I created a reproduction of the problem here: https://github.com/chanan/JSRuntimeRepro","Url":"https://github.com/aspnet/Blazor/issues/1746","RelatedDescription":"Open issue \"JSRuntime.Current is null in Startup.cs\" (#1746)"},{"Id":"386816918","IsPullRequest":false,"CreatedAt":"2018-12-03T13:26:26","Actor":"stsrki","Number":"1744","RawContent":null,"Title":"Remove comments from html markup","State":"open","Body":"When Blazor is building the html it also builds unnecessary comments along with the html tags.\r\n\r\n![image](https://user-images.githubusercontent.com/900302/49376286-10978f80-f707-11e8-90a2-57b782ad6c8b.png)\r\n\r\nIs there an option to turn this off? Or is it on your road-map to fix this?","Url":"https://github.com/aspnet/Blazor/issues/1744","RelatedDescription":"Open issue \"Remove comments from html markup\" (#1744)"},{"Id":"386625401","IsPullRequest":false,"CreatedAt":"2018-12-03T01:20:33","Actor":"agonzalezm","Number":"1743","RawContent":null,"Title":"Blazor server-side publish docker image failure","State":"open","Body":"I am trying to publish a docker image of my blazor SSR app but i get this error when running build\r\n\r\nError\t\tThe \"Microsoft.AspNetCore.Razor.Tasks.RazorTagHelper\" task could not be loaded from the assembly /root/.nuget/packages/microsoft.aspnetcore.razor.design/2.1.1/build/netstandard2.0/../../tasks/netstandard2.0/Microsoft.AspNetCore.Razor.Tasks.dll. Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [/src/testapp/testapp.Server.csproj]\t\r\n\r\nThe command '/bin/sh -c dotnet build \"testapp.Server.csproj\" -c Release -o /app' returned a non-zero code: 1\r\nC:\\Users\\agonzalez\\.nuget\\packages\\microsoft.visualstudio.azure.containers.tools.targets\\1.0.1916590\\build\\Container.targets(132,5): Error MSB3073: The command \"docker build -t \"testapp\" -f \"Dockerfile\" \"..\"\" exited with code 1.","Url":"https://github.com/aspnet/Blazor/issues/1743","RelatedDescription":"Open issue \"Blazor server-side publish docker image failure\" (#1743)"},{"Id":"386591303","IsPullRequest":false,"CreatedAt":"2018-12-02T19:33:15","Actor":"UrielMhezzek","Number":"1742","RawContent":null,"Title":"Move MainLayout to another folder","State":"open","Body":"I use Blazor as server variant. \r\nIf I put the file MainLayout.cshtml into another folder, the old namespace is still used in the .g.cs files. Creating a different layout file also seems to lead to the fact that it has to be present in the shared folder. ","Url":"https://github.com/aspnet/Blazor/issues/1742","RelatedDescription":"Open issue \"Move MainLayout to another folder\" (#1742)"},{"Id":"386578032","IsPullRequest":false,"CreatedAt":"2018-12-02T16:59:56","Actor":"mrunks","Number":"1741","RawContent":null,"Title":"OrderbyDescending on AsQueryable throws exception","State":"open","Body":"When I try use OrderByDescending on AsQueryable I receive the error message below.\r\n\r\nWhen I use OrderBy the code executes perfectly.  I stumbled onto this because I needed to pass an expression in my orderbyDescending and cannot do that on a list.\r\n\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1f50b28 + 0x001b8> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1f88730 + 0x00084> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1f50b28 + 0x001b8> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1f88730 + 0x00084> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n    at endInvokeDotNetFromJS (blazor.webassembly.js:1)\r\n    at Object.invokeJSFromDotNet (blazor.webassembly.js:1)\r\n    at _mono_wasm_invoke_js_marshalled (mono.js:1)\r\n    at wasm-function[1450]:935\r\n    at wasm-function[762]:25085\r\n    at wasm-function[762]:23853\r\n    at wasm-function[762]:23853\r\n    at wasm-function[762]:23853\r\n    at wasm-function[762]:24468\r\n    at wasm-function[762]:24468\r\n\r\n\r\nMy workaround for now is to perform a reverse on the List after the order by is called.\r\n\r\nFor example: AsQueryable().OrderBy(expression).ToList().Reverse().ToList()","Url":"https://github.com/aspnet/Blazor/issues/1741","RelatedDescription":"Open issue \"OrderbyDescending on AsQueryable throws exception\" (#1741)"},{"Id":"386474682","IsPullRequest":false,"CreatedAt":"2018-12-01T16:47:08","Actor":"nvmkpk","Number":"1740","RawContent":null,"Title":"Multiple blazor apps in single website","State":"open","Body":"I would like to be able to host multiple blazor apps in my website (at different base path).\r\n\r\nThe idea is to provide multiple downloadable PWA apps and the user will be able to download one or more of them. I am currently using angular to do this. I would like to switch to blazor.","Url":"https://github.com/aspnet/Blazor/issues/1740","RelatedDescription":"Open issue \"Multiple blazor apps in single website\" (#1740)"},{"Id":"386321178","IsPullRequest":false,"CreatedAt":"2018-11-30T19:34:10","Actor":"jtillman","Number":"1739","RawContent":null,"Title":"HTML-only templates or plugin-based templating engine","State":"open","Body":"Blazor should remove the use of C# within the HTML templates and move to pure HTML Attribute logic like angular/vuejs/knockout.\r\n\r\n*Note: This is a follow-up action after asking for vuejs/angular-style templates during the community standup a while back [https://youtu.be/CWuIz9khK-o?list=PL1rZQsJPBU2StolNg0aqvQswETPcYnNKL&t=3857] (I know it was a super long time ago 🤦‍♂️ )\r\n\r\nMy intent isn't to copy other popular frameworks but to take the learnings and knowledge that MS already has when developing UI frameworks. Notably the shift to having a declarative language like XAML which uses data binding on attributes like 'ItemSource' or 'Visibility' instead of allowing code to reside inside those templates. It promotes the separation of business logic from residing within the template and makes it more readable for programmers/designers. In the field, I've observed that pure web designers on teams are often discouraged or restricted from committing changes to templates that have languages injected into them which makes them more dependent on developers to make cosmetic changes. Personally, I don't enjoy having two languages in the same file (even in vuejs or angular) and wish it followed the XAML/XAML.cs style. On the other hand, I understand the convenience of having them within the same file, but I do not agree with mixing the languages (one of the main reasons I don't prefer react).\r\n\r\nI understand that Blazor uses the Razor templating engine and we are currently restricted to what it offers. IMO, since Razor templates only work on the server, I would relate them to server-side frameworks like jinja2 or Django templates. These frameworks address a different use case of back-end engineers optionally sending parts of HTML to the client and doesn't tool for SPAs. I understand the convience of using it as the engine but I do not think its practices migrate well to a client UI framework.\r\n\r\nSince there seems to be a strong tension to have a story for migrating Razor users and templates to Blazor, I would suggest investing in a layer of abstraction where other template engines may be exchanged from the one out of the box. I'd personally invest a large quantity of development time to make sure that a pure attribute option become available.","Url":"https://github.com/aspnet/Blazor/issues/1739","RelatedDescription":"Open issue \"HTML-only templates or plugin-based templating engine\" (#1739)"},{"Id":"386145166","IsPullRequest":false,"CreatedAt":"2018-11-30T11:16:02","Actor":"SamVogelskamp","Number":"1738","RawContent":null,"Title":"[Suggestion] Add ability to rename Context in component itself","State":"open","Body":"An attribute along the lines of\r\n\r\n```\r\n[Context=\"Item\"]\r\n@SomeRenderFragment(someVariable)\r\n```\r\n\r\nwould make the page using the component way cleaner in my opinion.","Url":"https://github.com/aspnet/Blazor/issues/1738","RelatedDescription":"Open issue \"[Suggestion] Add ability to rename Context in component itself\" (#1738)"},{"Id":"385953455","IsPullRequest":false,"CreatedAt":"2018-11-29T22:25:11","Actor":"rodolfograve","Number":"1737","RawContent":null,"Title":"Component does not update DOM on a specific scenario","State":"open","Body":"With the following component I'm trying to apply a transformation to the value in the input. The actual use case is more complicated and makes more sense but this is the simplest repro I could come up with.\r\n\r\nReproduction steps:\r\n\r\n1. Enter a lowercase string in the input, e.g. \"asd\"\r\n1. Result: the string in the input is turned into its uppercase equivalent and the Message is updated correctly.\r\n1. Enter the **same** lowercase string in the input. _Notice that entering any other string works as expected._\r\n\r\nExpected:\r\nThe string in the input **is turned into its uppercase equivalent** and the message is updated correctly.\r\n\r\nActual:\r\nThe string in the input **remains unchanged** and the message is updated correctly.\r\n\r\n```\r\n@page \"/repro\"\r\n<input type=\"text\" bind=\"@RawValue\" />\r\n<div>\r\n    Message: @Message\r\n</div>\r\n@functions\r\n{\r\n    protected string Message { get; set; }\r\n    protected int Count { get; set; }\r\n\r\n    private string _rawValue;\r\n    protected string RawValue\r\n    {\r\n        get => _rawValue;\r\n        set\r\n        {\r\n            _rawValue = value?.ToUpperInvariant();\r\n            Message = $\"_rawValue was set to {_rawValue}. {Count++}\";\r\n            StateHasChanged(); // I don't think this is necessary but I've added it trying to solve the problem. It still doesn't work without this line.\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIt seems to me there is something wrong but please let me know if it's by design, in which case, could you also please explain how to achieve the behavior I want.","Url":"https://github.com/aspnet/Blazor/issues/1737","RelatedDescription":"Open issue \"Component does not update DOM on a specific scenario\" (#1737)"},{"Id":"385756477","IsPullRequest":false,"CreatedAt":"2018-11-29T14:16:08","Actor":"stsrki","Number":"1736","RawContent":null,"Title":"[Suggestion] Better components inheritance","State":"open","Body":"First let me explain my problem.\r\n\r\nI have a `Field `component inside of _MyComponents_ library. All it contains is just a basic div. For example:\r\n`Field.cshtml` in _MyComponents_\r\n```\r\n@inherits Base.BaseField\r\n<div class=\"@ClassMapper.Class\">\r\n    @ChildContent\r\n</div>\r\n```\r\nEverything good so far, it renders, and it's all good.\r\n\r\nBUT, here is the problem, if I want to extend the Field component in another components library, let's say that this time I want it to contain a `Label`. I cannot do that. If I wan't custom logic in this new library then I must create a new `Field.cshtml` and write everything, than I have to delete `Field` from by base _MyComponents_ library because it will mess with the new component.\r\n\r\nThis is an implementation of `Field.cshtml` in _MyComponents.Bootstrap_ library:\r\n```\r\n@inherits BootstrapBase.BaseBootstrapField\r\n<div class=\"@ClassMapper.Class\">\r\n    @if ( Label != null )\r\n    {\r\n        <FieldLabel>@Label</FieldLabel>\r\n    }\r\n    @ChildContent\r\n</div>\r\n```\r\nIt would be great If for example I could just inherit Field automatically, maybe if both libraries share the same component names that they would combine.\r\n\r\nI propose two way how to do it. Maybe :)\r\n\r\nFirst, here is the main `Field.cshtml` in _MyComponents_\r\n```\r\n@inherits Base.BaseField\r\n<div class=\"@ClassMapper.Class\">\r\n    @ChildContent\r\n</div>\r\n```\r\n\r\n**Suggestion 1**: do it automatically based on the component name\r\n`Field.cshtml` in _MyComponents.Bootstrap_\r\n```\r\n@if ( Label != null )\r\n{\r\n    <FieldLabel>@Label</FieldLabel>\r\n}\r\n@ChildContent\r\n```\r\n\r\n**Suggestion 2**: explicitly say that it is inherited from `Field.cshtml` in _MyComponents.Bootstrap_\r\n```\r\n@inherits MyComponents.Field\r\n@if ( Label != null )\r\n{\r\n    <FieldLabel>@Label</FieldLabel>\r\n}\r\n@ChildContent\r\n```\r\n\r\n**Expected result:**\r\n```\r\n<div class=\"field\">\r\n    <label class=\"label\">Hello label</label>\r\n    Hello field\r\n</div>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1736","RelatedDescription":"Open issue \"[Suggestion] Better components inheritance\" (#1736)"},{"Id":"385701516","IsPullRequest":false,"CreatedAt":"2018-11-29T11:57:29","Actor":"montyclt","Number":"1735","RawContent":null,"Title":"Don't build if used any of not supported API","State":"open","Body":"The Blazor FAQs says:\r\n\r\n> Yes, the .NET runtime used for Blazor supports .NET Standard 2.0. APIs that aren't supported in the browser throw Not Supported exceptions.\r\n\r\nThere are any list with unsopported APIs of the .NET Standard? Can a MSBuild task used to interrumpt the build and mark as error if any of this APIs are used instead of detect the error in execution time when the exception is thrown?","Url":"https://github.com/aspnet/Blazor/issues/1735","RelatedDescription":"Open issue \"Don't build if used any of not supported API\" (#1735)"},{"Id":"385221261","IsPullRequest":true,"CreatedAt":"2018-11-29T10:25:15","Actor":"SteveSandersonMS","Number":"1734","RawContent":null,"Title":"Clean up after mondorepo migration","State":"closed","Body":"This PR removes all the migrated projects, so the Blazor repo builds only the following:\r\n\r\n * `Microsoft.AspNetCore.Blazor.Mono`, because we want to keep the Mono runtime binaries separate from the mondorepo.\r\n * `Microsoft.AspNetCore.Blazor.BuildTools`, because this is only needed when packaging the Mono runtime binaries above. It contains the `ILWipe` mechanism. This is not a shipping package.\r\n * JSInterop packages (`Microsoft.JSInterop` and `Mono.WebAssembly.Interop`), because they have to get built somewhere, and this repo is already set up to do that. Later on we might want to create a dedicated CI setup for the [JSInterop repo](https://github.com/dotnet/jsinterop).\r\n\r\nThis PR also updates the repo's `README.md` to explain this change.","Url":"https://github.com/aspnet/Blazor/pull/1734","RelatedDescription":"Closed or merged PR \"Clean up after mondorepo migration\" (#1734)"},{"Id":"384691978","IsPullRequest":false,"CreatedAt":"2018-11-28T11:50:16","Actor":"auc31","Number":"1731","RawContent":null,"Title":"Http.SendJsonAsync failed on 0.7","State":"closed","Body":"Hi \r\n\r\nwe try to follow this tutiorial\r\n\r\nhttps://ankitsharmablogs.com/asp-net-core-crud-using-blazor-and-entity-framework-core/\r\n\r\nfor CRUD operation on V0.3 of blazor Work perfect\r\n\r\nbut on our 0.7 version when we try to send data with\r\n\r\nawait Http.SendJsonAsync(HttpMethod.Post, \"/api/Employee/Create\", emp);\r\n\r\nthe data not send to api method create and the nav refresh the blazor app :( (stay on creation page)\r\n\r\nthanks for your help","Url":"https://github.com/aspnet/Blazor/issues/1731","RelatedDescription":"Closed issue \"Http.SendJsonAsync failed on 0.7\" (#1731)"},{"Id":"385112920","IsPullRequest":false,"CreatedAt":"2018-11-28T11:48:57","Actor":"Ceeten","Number":"1733","RawContent":null,"Title":"System.DllNotFoundException thrown when calling System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces","State":"closed","Body":"Good morning.\r\n\r\nI've been trying to experiment with Blazor a bit and try out some things that I would want the browser to be able to do for me.\r\n\r\nOne of those things is execute some stuff on the network by using the `System.Net.NetworkInformation` namespace.\r\nSo I've added the Nuget Package to the Blazor project and simply used it in the default scaffolded blazor project:\r\n```\r\n@using System.Net.NetworkInformation;\r\n@using System;\r\n\r\n\r\n@page \"/counter\"\r\n\r\n<h1>Counter</h1>\r\n\r\n<p>Current count: @currentCount</p>\r\n\r\n<button class=\"btn btn-primary\" onclick=\"@IncrementCount\">Click me</button>\r\n\r\n@functions {\r\n    int currentCount = 0;\r\n\r\n    void IncrementCount()\r\n    {\r\n        var test =  NetworkInterface.GetAllNetworkInterfaces();\r\n        System.Console.WriteLine(test);\r\n    }\r\n}\r\n```\r\nProblem is when I click the button, the next exception is thrown and I see this in the browser console:\r\n```\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: System.TypeInitializationException: The type initializer for 'System.Net.NetworkInformation.SystemNetworkInterface' threw an exception. ---> System.DllNotFoundException: libc\r\n  at (wrapper managed-to-native) System.Platform.uname(intptr)\r\n  at System.Platform.CheckOS () <0x1de1250 + 0x00030> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Platform.get_IsMacOS () <0x1de1008 + 0x0000a> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.UnixNetworkInterfaceFactoryPal.Create () <0x1de08e8 + 0x00014> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.NetworkInterfaceFactoryPal.Create () <0x1de0458 + 0x00000> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.NetworkInterfaceFactory.Create () <0x1de0378 + 0x00000> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.SystemNetworkInterface..cctor () <0x1de0288 + 0x00000> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n   --- End of inner exception stack trace ---\r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1d88a50 + 0x001bc> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1d84710 + 0x00088> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n  at (wrapper managed-to-native) System.Platform.uname(intptr)\r\n  at System.Platform.CheckOS () <0x1de1250 + 0x00030> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Platform.get_IsMacOS () <0x1de1008 + 0x0000a> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.UnixNetworkInterfaceFactoryPal.Create () <0x1de08e8 + 0x00014> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.NetworkInterfaceFactoryPal.Create () <0x1de0458 + 0x00000> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.NetworkInterfaceFactory.Create () <0x1de0378 + 0x00000> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n  at System.Net.NetworkInformation.SystemNetworkInterface..cctor () <0x1de0288 + 0x00000> in <693d0b3e5dd34843b73a58a39499184e>:0 \r\n   --- End of inner exception stack trace ---\r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1d88a50 + 0x001bc> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1d84710 + 0x00088> in <af36ed9192be4a95b907125ccf0c1e59>:0 \r\n    at endInvokeDotNetFromJS (http://localhost:50480/_framework/blazor.webassembly.js:1:26867)\r\n    at Object.invokeJSFromDotNet (http://localhost:50480/_framework/blazor.webassembly.js:1:26288)\r\n    at _mono_wasm_invoke_js_marshalled (http://localhost:50480/_framework/wasm/mono.js:1:175302)\r\n    at wasm-function[1450]:935\r\n    at wasm-function[762]:25085\r\n    at wasm-function[762]:23853\r\n    at wasm-function[762]:23853\r\n    at wasm-function[762]:23853\r\n    at wasm-function[762]:24468\r\n    at wasm-function[762]:24468\r\n```\r\nI am running the latest VS (15.9.2) with the latest SDK on Windows. Anybody that can give me an Idea of what I'm doing wrong here ?","Url":"https://github.com/aspnet/Blazor/issues/1733","RelatedDescription":"Closed issue \"System.DllNotFoundException thrown when calling System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\" (#1733)"},{"Id":"384667199","IsPullRequest":false,"CreatedAt":"2018-11-27T20:33:10","Actor":"StevenTCramer","Number":"1730","RawContent":null,"Title":"How to distinguish components","State":"closed","Body":"If one includes two different components in their application in different namespaces with the same name. \r\nPath/To/Firstone/SomeComponent.cshtml\r\nPath/To/AnotherOne/SomeComponent.cshtml\r\n\r\nAnd in MyLayout.cshtml I would like to use\r\n\r\n```\r\n<SomeComponent />  // From AnotherOne\r\n```\r\n\r\n  Blazor seems to find the first one.  And I don't know how to clarify the namespace.\r\n\r\nNor does it give me an ambiguous compile error. \r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1730","RelatedDescription":"Closed issue \"How to distinguish components\" (#1730)"},{"Id":"384804305","IsPullRequest":false,"CreatedAt":"2018-11-27T13:51:32","Actor":"stsrki","Number":"1732","RawContent":null,"Title":"Tag helpers not working on virtual/override properties","State":"open","Body":"I have a base class for my `ModalContent` component.\r\n\r\n```\r\npublic abstract class BaseModalContent : BaseComponent\r\n{\r\n    [Parameter]\r\n    protected virtual bool IsCentered\r\n    {\r\n        get => isCentered;\r\n        set\r\n        {\r\n            isCentered = value;\r\n\r\n            ClassMapper.Dirty();\r\n        }\r\n    }\r\n\r\n    [Parameter]\r\n    protected virtual ModalSize Size\r\n    {\r\n        get => modalSize;\r\n        set\r\n        {\r\n            modalSize = value;\r\n\r\n            ClassMapper.Dirty();\r\n        }\r\n    }\r\n}\r\n```\r\nThen in my `BaseBootstrapModalContent` I have\r\n\r\n```\r\npublic abstract class BaseBootstrapModalContent : Base.BaseModalContent\r\n{\r\n    protected override bool IsCentered\r\n    {\r\n        get => base.IsCentered;\r\n        set\r\n        {\r\n            DialogClassMapper.Dirty();\r\n\r\n            base.IsCentered = value;\r\n        }\r\n    }\r\n\r\n    protected override ModalSize Size\r\n    {\r\n        get => base.Size;\r\n        set\r\n        {\r\n            DialogClassMapper.Dirty();\r\n\r\n            base.Size = value;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBut when I try to use this fields they are not suggested or recognized by the Razor.\r\n![image](https://user-images.githubusercontent.com/900302/49085684-d9326a00-f252-11e8-8803-798b5b92427f.png)\r\n\r\nI must say that the code is working as expected, it's just that the intellisense is not working.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1732","RelatedDescription":"Open issue \"Tag helpers not working on virtual/override properties\" (#1732)"},{"Id":"384595081","IsPullRequest":false,"CreatedAt":"2018-11-27T02:40:58","Actor":"DeanRoddey","Number":"1729","RawContent":null,"Title":"How does one do nested child content in the compnent derivation chain?","State":"open","Body":"So, how do you go about dealing with multiple levels of child content? Lets say you have this sequence of components deriving from each other:\r\n\r\nModal -> DialogBox -> MyPersonalDialogBox\r\n\r\nSo DialogBox wants to put the child content of MyPersonalDialogBox inside a DIV, with a title bar on top and buttons on the bottom. Modal wants to put DialogBox's content inside himself so that he can present that content modally.\r\n\r\nObviously we can use containment instead of derivation, and have that working fine, so DialogBox USES a modal component, and my dialog box USES a DialogBox component. But ultimately that's not how OO should work. My dialog box 'is a' dialog box which 'is a' modal component, and we want to have virtual methods that can be called from baser classes up to more derived classes, and helper methods that can accept any modal component or any dialog box and so forth.\r\n\r\nBut I can't figure out how to deal with the layered child content when doing it this way. No matter what I do, the content ends up not rendered within the parent class' embrace but outside of it, or I end up with one ChildContent hiding the other and so forth. It's probably something so utterly obvious I can't see it. \r\n","Url":"https://github.com/aspnet/Blazor/issues/1729","RelatedDescription":"Open issue \"How does one do nested child content in the compnent derivation chain?\" (#1729)"},{"Id":"384502989","IsPullRequest":false,"CreatedAt":"2018-11-26T21:48:36","Actor":"Knudel","Number":"1728","RawContent":null,"Title":"Strange behavior with select","State":"closed","Body":"I have the next code in a server side blazor page:\r\n\r\n```\r\n@page \"/\"\r\n\r\n<select id=\"test\" bind=\"@selectedval\">\r\n    <option value='1'>1</option>\r\n    <option value='2'>2</option>\r\n    <option value='3'>3</option>\r\n    <option value='4'>4</option>\r\n</select>\r\n\r\n@functions\r\n{\r\n    [Parameter]\r\n    protected string selectedval { get; set; } = \"2\";\r\n}\r\n```\r\n\r\n\r\nWhy is the second value not selected at startup, the selected value is 1?\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1728","RelatedDescription":"Closed issue \"Strange behavior with select\" (#1728)"},{"Id":"384486539","IsPullRequest":true,"CreatedAt":"2018-11-26T21:47:46","Actor":"SteveSandersonMS","Number":"1727","RawContent":null,"Title":"Attempt to fix build flakiness using \"npm ci\"","State":"closed","Body":"The main complexity is that we need NPM 5.7.0+, hence having to ensure all the CI systems are using a recent-enough version of Node.","Url":"https://github.com/aspnet/Blazor/pull/1727","RelatedDescription":"Closed or merged PR \"Attempt to fix build flakiness using \"npm ci\"\" (#1727)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-08T05:30:15.4868922Z","RunDurationInMilliseconds":1196}