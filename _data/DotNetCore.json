{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7926712075","Type":"PullRequestEvent","CreatedAt":"2018-07-06T03:58:32","Actor":"sunnycase","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18801","RelatedDescription":"Opened pull request \"Fix opinfo: InlineR should only read 8 bytes\" (#18801) at dotnet/coreclr","RelatedBody":"This must be a typo."},{"Id":"7926163695","Type":"PullRequestEvent","CreatedAt":"2018-07-06T00:12:22","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18785","RelatedDescription":null,"RelatedBody":"This is one API for https://github.com/dotnet/coreclr/issues/18712"},{"Id":"7926163581","Type":"PullRequestEvent","CreatedAt":"2018-07-06T00:12:20","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18785","RelatedDescription":"Closed pull request \"Implement Bmi1.TrailingZeroCount\" (#18785) at dotnet/coreclr","RelatedBody":"This is one API for https://github.com/dotnet/coreclr/issues/18712"},{"Id":"7926147571","Type":"PullRequestEvent","CreatedAt":"2018-07-06T00:05:43","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18800","RelatedDescription":"Opened pull request \"Improve DateTime{Offset}.ParseExact performance for \"O\"/\"o\" roundtrip format\" (#18800) at dotnet/coreclr","RelatedBody":"Ports the code used by Utf8Parser, modified to support things Utf8Parser doesn't but DateTime{Offset{.ParseExact do, such as single-digit offset hours.\r\n\r\nLocal times (w/o timezone) improve by ~6x.\r\nTimes with timezones improve by ~2.5-2.75x.\r\nAll cases reduce allocations from 120 bytes across 5 objects down to 0.\r\n\r\nBenchmark:\r\n```C#\r\nusing System;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Attributes.Jobs;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class Benchmark\r\n{\r\n    private static void Main() => BenchmarkRunner.Run<Benchmark>();\r\n\r\n    [Benchmark] public DateTime ParseExactLocal() => DateTime.ParseExact(\"2018-07-05T22:10:55.5595539\", \"o\", null);\r\n    [Benchmark] public DateTime ParseExactUtc() => DateTime.ParseExact(\"2018-07-05T22:10:55.5595539Z\", \"o\", null);\r\n    [Benchmark] public DateTime ParseExactOffset() => DateTime.ParseExact(\"2018-07-05T22:10:55.5595539+12:34\", \"o\", null);\r\n}\r\n```\r\n\r\nBefore:\r\n```\r\n           Method |     Mean |    Error |   StdDev |   Median |  Gen 0 | Allocated |\r\n----------------- |---------:|---------:|---------:|---------:|-------:|----------:|\r\n  ParseExactLocal | 623.9 ns | 12.42 ns | 28.54 ns | 613.6 ns | 0.0277 |     120 B |\r\n    ParseExactUtc | 962.3 ns | 32.57 ns | 96.03 ns | 932.3 ns | 0.0277 |     120 B |\r\n ParseExactOffset | 930.7 ns | 18.31 ns | 22.49 ns | 930.7 ns | 0.0277 |     120 B |\r\n```\r\n\r\nAfter:\r\n```\r\n           Method |     Mean |    Error |   StdDev | Allocated |\r\n----------------- |---------:|---------:|---------:|----------:|\r\n  ParseExactLocal | 101.3 ns | 2.205 ns | 3.091 ns |       0 B |\r\n    ParseExactUtc | 349.8 ns | 5.253 ns | 4.656 ns |       0 B |\r\n ParseExactOffset | 357.7 ns | 3.720 ns | 3.106 ns |       0 B |\r\n```\r\n\r\ncc: @jkotas, @danmosemsft, @tarekgh, @joperezr, @joperezr \r\nContributes to https://github.com/dotnet/corefx/issues/30612"},{"Id":"7925996506","Type":"PullRequestEvent","CreatedAt":"2018-07-05T23:07:09","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18799","RelatedDescription":"Opened pull request \"Moved ManualResetEventSlim to shared\" (#18799) at dotnet/coreclr","RelatedBody":"Related Corert Pr:- https://github.com/dotnet/corert/pull/6061"},{"Id":"7925984836","Type":"PullRequestEvent","CreatedAt":"2018-07-05T23:03:19","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18775","RelatedDescription":"Merged pull request \"Add noway asserts in gtNewZeroConNode and gtNewOneConNode\" (#18775) at dotnet/coreclr","RelatedBody":"Added source code change that was needed for vNext in fgMorphRecursiveFastTailCallIntoLoop\r\n"},{"Id":"7925825012","Type":"PullRequestEvent","CreatedAt":"2018-07-05T22:12:54","Actor":"wtgodbe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18798","RelatedDescription":"Opened pull request \"Bump version to 1.1.10 & mark as non-stable\" (#18798) at dotnet/coreclr","RelatedBody":"CC @weshaggard @safern"},{"Id":"7925824355","Type":"PullRequestEvent","CreatedAt":"2018-07-05T22:12:42","Actor":"wtgodbe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18797","RelatedDescription":"Opened pull request \"Bump version to 1.0.15 & mark as non-stable\" (#18797) at dotnet/coreclr","RelatedBody":"CC @weshaggard @safern"},{"Id":"7925822776","Type":"PullRequestEvent","CreatedAt":"2018-07-05T22:12:15","Actor":"wtgodbe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18796","RelatedDescription":"Opened pull request \"Bump version to 2.0.9 & mark as non-stable\" (#18796) at dotnet/coreclr","RelatedBody":"CC @weshaggard @safern "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7916191014","Type":"IssuesEvent","CreatedAt":"2018-07-04T04:36:15","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/792","RelatedDescription":"Closed issue \"vs2017 csproj don't have <ItemGroup> <Compile/> tag\" (#792) at dotnet/standard","RelatedBody":"This is not an issue.Just for information\r\nWhen i create a netstandard project in VS2017, the csproj file doesn't contain the list of cs files which are part of the solution/project. \r\nOld csproj(which have been created using older VS version) contain the list of files and using that for command-line wasn't a problem\r\n\r\n If i have to use csproj/sln file(created with VS2017) to compile the code from command-line how do i do it?"},{"Id":"7911966456","Type":"IssuesEvent","CreatedAt":"2018-07-03T11:33:03","Actor":"ramsubbaraoc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/792","RelatedDescription":"Opened issue \"vs2017 csproj don't have <ItemGroup> <Compile/> tag\" (#792) at dotnet/standard","RelatedBody":"This is not an issue.Just for information\r\nWhen i create a netstandard project in VS2017, the csproj file doesn't contain the list of cs files which are part of the solution/project. \r\nOld csproj(which have been created using older VS version) contain the list of files and using that for command-line wasn't a problem\r\n\r\n If i have to use csproj/sln file(created with VS2017) to compile the code from command-line how do i do it?"},{"Id":"7910306192","Type":"IssuesEvent","CreatedAt":"2018-07-03T05:19:07","Actor":"EEVblog","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/791","RelatedDescription":"Opened issue \"When Building a UWP app with .netstandard 2.0 and Compile With Native Tool Chain, Build Hangs forever\" (#791) at dotnet/standard","RelatedBody":"I have a project that I have released into the windows app store and have an update which included porting from xamarin forms project to a .net standard project.\r\n\r\nAfter porting the project I have found that any time I build the app with the:\r\n\r\n\"Compile with .NET Native tool chain\" checked the build hangs forever. It will hang on any platform when this item is checked.\r\n\r\nI have tried the following flags in an attempt to fix it in my project build settings:\r\n\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n<SingleThreadNUTC>true</SingleThreadNUTC>\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n\r\nI have tried deleting obj and bin folders, no success.\r\nI have all of the latest VS updates and the latest package updates. "},{"Id":"7909110492","Type":"IssuesEvent","CreatedAt":"2018-07-02T21:47:15","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/787","RelatedDescription":"Closed issue \"nsboard GitHub team is not public\" (#787) at dotnet/standard","RelatedBody":"> There is also a (public) GitHub team [nsboard](https://github.com/orgs/dotnet/teams/nsboard) you can\r\nuse when you want the board to take a look at a particular issue\r\n\r\nActually nsboard team is not public. Following the above link leads to:\r\n\r\n\r\n![nsboard](https://user-images.githubusercontent.com/801959/42095457-f63bf5a6-7bb2-11e8-8e98-dff65911b038.png)\r\n\r\n\r\n\r\n"},{"Id":"7909102076","Type":"IssuesEvent","CreatedAt":"2018-07-02T21:45:00","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/682","RelatedDescription":"Closed issue \".Net Standard 2.1?\" (#682) at dotnet/standard","RelatedBody":"_From @jherby2k on March 7, 2018 19:35_\n\nI can't find any information about a .net standard 2.1.\r\n\r\nI really want to use the new Span-ified methods like Stream.Read in my class libraries, but it looks like that stuff isn't in System.Memory but rather the .net core 2.1 SDK. Any other way to get these APIs, or do I have to wait for .net standard 2.1. And is there any ETA on that?\n\n_Copied from original issue: dotnet/coreclr#16806_"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7926848511","Type":"IssuesEvent","CreatedAt":"2018-07-06T05:00:53","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30865","RelatedDescription":"Opened issue \"Use fast copy on Mac\" (#30865) at dotnet/corefx","RelatedBody":"Port https://github.com/mono/mono/pull/9038 to corefx"},{"Id":"7926845317","Type":"IssuesEvent","CreatedAt":"2018-07-06T04:59:41","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30864","RelatedDescription":"Opened issue \"Add another Darwin file system\" (#30864) at dotnet/corefx","RelatedBody":"Port https://github.com/mono/mono/pull/9440 to CoreFX"},{"Id":"7926840719","Type":"IssuesEvent","CreatedAt":"2018-07-06T04:57:33","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30862","RelatedDescription":"Closed issue \"P/Invoke lost the first parameter when calling an export method of class from a 64-bit dll\" (#30862) at dotnet/corefx","RelatedBody":"I found a problem when using P/Invoke.\r\n\r\nC#:\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n    class NativeMethods\r\n    {\r\n        [DllImport(\"./Project1.dll\", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl, EntryPoint = \"#3\")]\r\n        public static extern int TestX64(\r\n            [MarshalAs(UnmanagedType.LPStr)] string a,\r\n            [MarshalAs(UnmanagedType.LPStr)] string b,\r\n            [MarshalAs(UnmanagedType.LPStr)] string c,\r\n            [MarshalAs(UnmanagedType.LPStr)] string d);\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            NativeMethods.TestX64(\"aaaa\", \"bbbb\", \"cccc\", \"dddd\");\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nC++:\r\nHeader.h\r\n```cpp\r\n#pragma once\r\n#include <cstdio>\r\n\r\nclass __declspec(dllexport) test\r\n{\r\npublic:\r\n\tint aaa(const char*, const char*, const char*, const char*) const;\r\n};\r\n```\r\n\r\nSource.cpp:\r\n```cpp\r\n#include \"Header.h\"\r\n\r\nint test::aaa(const char * a, const char * b, const char * c, const char * d) const\r\n{\r\n\tprintf(\"%s\\n%s\\n%s\\n%s\\n\", a, b, c, d);\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nAnd finally I build both the dll and .NET app for 64-bit and run it, I got an error: 0xC0000005: Access violation reading location 0x0000000064646464.\r\n\r\nFinally, I debug into Source.cpp and I found that the first parameter was not being passed into the function.\r\nNormally, the parameters should be a = \"aaaa\", b = \"bbbb\", c = \"cccc\", d = \"dddd\", but actually I got a = \"bbbb\", b = \"cccc\", c = \"dddd\", d = \\<invalid pointer\\>\r\n\r\nI've tried out both .NET Framework (4.7.1) and .NET Core (2.1), both of them have this issue.\r\n\r\nAnd if you build both the dll and .NET app for 32-bit and run it in 32-bit mode (need to use stdcall), the problem doesn't exist."},{"Id":"7926821101","Type":"PullRequestEvent","CreatedAt":"2018-07-06T04:48:35","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30863","RelatedDescription":"Opened pull request \"Delete obsolete ResourceConsumption/ResourceExposure attributes\" (#30863) at dotnet/corefx","RelatedBody":"These are leftovers from unfinished experiment that a long time ago."},{"Id":"7926605567","Type":"IssuesEvent","CreatedAt":"2018-07-06T03:13:21","Actor":"hez2010","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30862","RelatedDescription":"Opened issue \"P/Invoke lost the first parameter when calling an export method of class from a 64-bit dll\" (#30862) at dotnet/corefx","RelatedBody":"C#:\r\n```c#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n    class NativeMethods\r\n    {\r\n        [DllImport(\"./Project1.dll\", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl, EntryPoint = \"#3\")]\r\n        public static extern int TestX64(\r\n            [MarshalAs(UnmanagedType.LPStr)] string a,\r\n            [MarshalAs(UnmanagedType.LPStr)] string b,\r\n            [MarshalAs(UnmanagedType.LPStr)] string c,\r\n            [MarshalAs(UnmanagedType.LPStr)] string d);\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            NativeMethods.TestX64(\"aaaa\", \"bbbb\", \"cccc\", \"dddd\");\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nC++:\r\nHeader.h\r\n```cpp\r\n#pragma once\r\n#include <cstdio>\r\n\r\nclass __declspec(dllexport) test\r\n{\r\npublic:\r\n\tint aaa(const char*, const char*, const char*, const char*) const;\r\n};\r\n```\r\n\r\nSource.cpp:\r\n```cpp\r\n#include \"Header.h\"\r\n\r\nint test::aaa(const char * a, const char * b, const char * c, const char * d) const\r\n{\r\n\tprintf(\"%s\\n%s\\n%s\\n%s\\n\", a, b, c, d);\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nAnd finally I build the .NET app for 64-bit and run it, I got an error: 0xC0000005: Access violation reading location 0x0000000064646464.\r\n\r\nFinally, I debug into Source.cpp and I found that the first parameter was not being passed into the function.\r\nNormally, the parameters should be a = \"aaaa\", b = \"bbbb\", c = \"cccc\", d = \"dddd\", but actually I got a = \"bbbb\", b = \"cccc\", c = \"dddd\", d = <invalid pointer>\r\n\r\nIs that a bug of .NET P/Invoke? Both .NET Framework and .NET Core (including the latest version) have this issue."},{"Id":"7926548116","Type":"IssuesEvent","CreatedAt":"2018-07-06T02:50:38","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30858","RelatedDescription":"Closed issue \".Net Core SocketsHttpHandler with Client Certificates hangs on windows\" (#30858) at dotnet/corefx","RelatedBody":"We're using certs from azure key vault. I'm not sure what it does to the certs, but it seems to cause the httpclient to hang and not send the request. I created a self signed cert below and uploaded/downloaded from AKV to repro.\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Http.Headers;\r\nusing System.Net.Security;\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace SocketsHttpHandlerTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                DoIt().Wait();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine(e.ToString());\r\n            }\r\n            return;\r\n        }\r\n\r\n        private async static Task DoIt()\r\n        {\r\n            var cert = GetCert();\r\n            var sslOptions = new SslClientAuthenticationOptions();\r\n            var shHandler = new SocketsHttpHandler\r\n            {\r\n                MaxConnectionsPerServer = 100,\r\n                AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate,\r\n                PooledConnectionLifetime = TimeSpan.FromMinutes(1),\r\n                ConnectTimeout = TimeSpan.FromSeconds(10),\r\n                PooledConnectionIdleTimeout = TimeSpan.FromSeconds(10),\r\n                ResponseDrainTimeout = TimeSpan.FromSeconds(10),\r\n            };\r\n\r\n            if (cert != null)\r\n            {\r\n                shHandler.SslOptions = new SslClientAuthenticationOptions()\r\n                {\r\n                    ClientCertificates = new X509CertificateCollection(),\r\n                };\r\n\r\n                shHandler.SslOptions.ClientCertificates.Add(cert);\r\n                shHandler.SslOptions.LocalCertificateSelectionCallback = (object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers) => cert;\r\n            }\r\n\r\n            var client = new HttpClient(shHandler);\r\n            client.Timeout = TimeSpan.FromSeconds(10);\r\n            var request = new HttpRequestMessage(HttpMethod.Post, \"https://login.live.com/pksecure/oauth20_clientcredentials.srf\");\r\n            request.Content = new StringContent(\"blah\", System.Text.Encoding.UTF8, new MediaTypeHeaderValue(\"application/x-www-form-urlencoded\").ToString());\r\n            var response = await client.SendAsync(request);\r\n            throw new Exception(\"code doesn't make it this far\");\r\n        }\r\n\r\n        private static X509Certificate2 GetCert()\r\n        {\r\n            var fabrikam = \"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\";\r\n            var certBytes = Convert.FromBase64String(fabrikam);\r\n            return new X509Certificate2(certBytes, string.Empty, X509KeyStorageFlags.UserKeySet | X509KeyStorageFlags.EphemeralKeySet);\r\n        }\r\n    }\r\n}\r\n\r\n```"},{"Id":"7926316130","Type":"IssuesEvent","CreatedAt":"2018-07-06T01:18:39","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30861","RelatedDescription":"Opened issue \"FileSystemEnumerator.ContinueOnError() needs overload with context\" (#30861) at dotnet/corefx","RelatedBody":"I didn't provide context in the 2.1 release of the APIs as it is somewhat tricky to do without allocating.\r\n\r\nPresumably some API like `ContinueOnError(Span<char> directory, Span<char> filename, bool directoryOpen)` that gets called if `ContinueOnError()` returns false and has a default return value of false.\r\n\r\nI'm marking this up-for-grabs if anyone wants to tackle it before I find time to.\r\n\r\nSee #30848."},{"Id":"7926236153","Type":"PullRequestEvent","CreatedAt":"2018-07-06T00:43:21","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30851","RelatedDescription":"Merged pull request \"Fixed getmntinfo() call on FreeBSD\" (#30851) at dotnet/corefx","RelatedBody":"This change was necessary because the original way the `getmntinfo()` function was being called did not complete successfully on FreeBSD. According to documentation, the second parameter `int mode` only accepts `MNT_WAIT` (1) or `MNT_NOWAIT` (2) as valid inputs and, as 0 was being passed in, the function returned zero mount points and set an `errno` of `EINVAL`.\r\n\r\nReferences: [getmntinfo(3)](https://www.freebsd.org/cgi/man.cgi?query=getmntinfo) and [getfsstat(2)](https://www.freebsd.org/cgi/man.cgi?query=getfsstat&sektion=2&apropos=0&manpath=FreeBSD+11.2-RELEASE+and+Ports)\r\n\r\nRelated [coreclr/#18067](https://github.com/dotnet/coreclr/issues/18067)"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7926913471","Type":"PullRequestEvent","CreatedAt":"2018-07-06T05:28:15","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28313","RelatedDescription":null,"RelatedBody":"Fixes #27049\r\n\r\nPR for personal review for now. Still pending breaking change approval."},{"Id":"7926913357","Type":"PullRequestEvent","CreatedAt":"2018-07-06T05:28:13","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28313","RelatedDescription":"Closed pull request \"Reject base.Method() calls inside restricted types, because that requires boxing\" (#28313) at dotnet/roslyn","RelatedBody":"Fixes #27049\r\n\r\nPR for personal review for now. Still pending breaking change approval."},{"Id":"7926912346","Type":"PullRequestEvent","CreatedAt":"2018-07-06T05:27:47","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28250","RelatedDescription":null,"RelatedBody":"Closes #28238\r\nResponds to additional feedback from #28118\r\n\r\ncc @dotnet/roslyn-compiler for review.\r\ncc @agocke for original feedback."},{"Id":"7926912245","Type":"PullRequestEvent","CreatedAt":"2018-07-06T05:27:45","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28250","RelatedDescription":"Closed pull request \"Added more tests to ref assignment to invalid expressions\" (#28250) at dotnet/roslyn","RelatedBody":"Closes #28238\r\nResponds to additional feedback from #28118\r\n\r\ncc @dotnet/roslyn-compiler for review.\r\ncc @agocke for original feedback."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7926633517","Type":"PullRequestEvent","CreatedAt":"2018-07-06T03:24:52","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6061","RelatedDescription":"Closed pull request \"[JustForView]Moved ManualResetEventSlim to shared\" (#6061) at dotnet/corert","RelatedBody":"The change mostly is a performance change that was made into the coreclr but not ported to corert\r\n\r\nRelated Coreclr :- https://github.com/dotnet/coreclr/pull/18799"},{"Id":"7926387619","Type":"IssuesEvent","CreatedAt":"2018-07-06T01:48:24","Actor":"jjxtra","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6057","RelatedDescription":"Closed issue \"Cannot install nuget package\" (#6057) at dotnet/corert","RelatedBody":"PM> Install-Package Microsoft.DotNet.ILCompiler -Version 1.0.0-alpha-26705-02 -Source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\nThe 'Source' parameter is not respected for the transitive package management based project(s) XXXXX. The enabled sources in your NuGet configuration will be used. \r\nRestoring packages for XXXXX.csproj...\r\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json\r\n  NotFound https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json 337ms\r\nInstall-Package : NU1101: Unable to find package Microsoft.DotNet.ILCompiler. No packages exist with this id in source(s): Microsoft Visual Studio Offline Packages, nuget.org\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.DotNet.ILCompiler -Version 1.0.0-alpha-2670 ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand"},{"Id":"7926167347","Type":"IssuesEvent","CreatedAt":"2018-07-06T00:13:53","Actor":"RUSshy","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6062","RelatedDescription":"Opened issue \"Marshal.PtrToStringAnsi(IntPtr) is missing!\" (#6062) at dotnet/corert","RelatedBody":"Hi,\r\n\r\nI'm getting this unhandled exception: \r\n\r\n``Unhandled Exception: System.MissingMethodException: Method not found: 'System.String System.Runtime.InteropServices.Marshal.PtrToStringAnsi(IntPtr)'.``\r\n\r\n\r\nI tested on Windows 10 with .net core 2.1\r\n"},{"Id":"7925996146","Type":"PullRequestEvent","CreatedAt":"2018-07-05T23:07:01","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6061","RelatedDescription":"Opened pull request \"[JustForView]Moved ManualResetEventSlim to shared\" (#6061) at dotnet/corert","RelatedBody":"The change mostly is a performance change that was made into the coreclr but not ported to corert\r\n\r\nRelated Coreclr :- "},{"Id":"7925611860","Type":"IssuesEvent","CreatedAt":"2018-07-05T21:17:13","Actor":"ShayGuy","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6060","RelatedDescription":"Opened issue \"DateTime.ToString() fails due to missing delegate marshalling data\" (#6060) at dotnet/corert","RelatedBody":"This program:\r\n\r\n    using System;\r\n    \r\n    namespace HelloDates\r\n    {\r\n        class Program\r\n        {\r\n            static void Main(string[] args)\r\n            {\r\n                Console.WriteLine(\"Hello World!\");\r\n                var today = DateTime.Today;\r\n                Console.WriteLine(\"I know what day it is!\");\r\n                string today_fmt = today.ToString(\"MM/dd/yyyy\");\r\n                Console.WriteLine($\"Today is {today_fmt}.\");\r\n            }\r\n        }\r\n    }\r\n\r\nGives this result after publishing with CoreRT:\r\n\r\n    Hello World!\r\n    I know what day it is!\r\n    Unhandled Exception: EETypeRva:0x00283B48: EETypeRva:0x00295C98 is missing delegate marshalling data. To enable delegate marshalling data, add a MarshalDelegate directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n       at HelloDates!<BaseAddress>+0x5fed\r\n       at HelloDates!<BaseAddress>+0xfddcf\r\n       at HelloDates!<BaseAddress>+0x1458fb\r\n       at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey, ConditionalWeakTable`2.CreateValueCallback) + 0x3d\r\n       at System.Runtime.InteropServices.PInvokeMarshal.GetFunctionPointerForDelegate(Delegate) + 0x83\r\n       at HelloDates!<BaseAddress>+0xb6c38\r\n       at HelloDates!<BaseAddress>+0xb9ab8\r\n       at System.Globalization.DateTimeFormatInfo.set_Calendar(Calendar) + 0x94\r\n       at System.Globalization.CultureInfo.get_DateTimeFormat() + 0x57\r\n       at System.Globalization.CultureInfo.GetFormat(Type) + 0x88\r\n       at System.Globalization.DateTimeFormatInfo.get_CurrentInfo() + 0x50\r\n       at System.Globalization.DateTimeFormatInfo.GetInstance(IFormatProvider) + 0x8b\r\n       at HelloDates!<BaseAddress>+0x9b630\r\n       at HelloDates!<BaseAddress>+0x9b4bd\r\n       at HelloDates.Program.Main(String[]) + 0x62\r\n       at HelloDates!<BaseAddress>+0x155416\r\n\r\nI don't know what this exception means, but I'm told I shouldn't need rd.xml with framework types."},{"Id":"7925269267","Type":"PullRequestEvent","CreatedAt":"2018-07-05T20:00:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6059","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6059) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7925260158","Type":"PullRequestEvent","CreatedAt":"2018-07-05T19:58:02","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6059","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6059) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7925197528","Type":"PullRequestEvent","CreatedAt":"2018-07-05T19:43:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6058","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6058) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7924319777","Type":"PullRequestEvent","CreatedAt":"2018-07-05T16:32:26","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6058","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6058) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7923999706","Type":"IssuesEvent","CreatedAt":"2018-07-05T15:34:23","Actor":"jjxtra","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6057","RelatedDescription":"Opened issue \"Cannot install nuget package\" (#6057) at dotnet/corert","RelatedBody":"PM> Install-Package Microsoft.DotNet.ILCompiler -Version 1.0.0-alpha-26705-02 -Source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\nThe 'Source' parameter is not respected for the transitive package management based project(s) IPBanProServiceInstaller. The enabled sources in your NuGet configuration will be used. \r\nRestoring packages for XXXXX.csproj...\r\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json\r\n  NotFound https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json 337ms\r\nInstall-Package : NU1101: Unable to find package Microsoft.DotNet.ILCompiler. No packages exist with this id in source(s): Microsoft Visual Studio Offline Packages, nuget.org\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.DotNet.ILCompiler -Version 1.0.0-alpha-2670 ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1013052742326280192","CreatedAt":"2018-06-30T13:32:50+00:00","UserScreenname":"dotnet","Text":"Tune in for Jeff's Saturday show, learn how to use C# and @ASPNET Core.  Always a good time https://t.co/KJoRPYHnHt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-07-06T05:30:33.4766602Z","RunDurationInMilliseconds":7326}