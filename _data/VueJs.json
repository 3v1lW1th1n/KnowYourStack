{"Data":{"Vue":{"Events":[{"Id":"6746484659","Type":"IssuesEvent","CreatedAt":"2017-10-21T02:51:05","Actor":"tatsuhirosatou","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/6872","RelatedDescription":"Opened issue \" Functional components should support the \"components\" option\" (#6872) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nFunctional components with templates allow users to improve performance without sacrificing readability or ease of use. However, currently these do not support the \"components\" option. This limits this feature a lot, to a very limited set of use cases. \r\n\r\n### What does the proposed API look like?\r\nSimply support the components option just like non-functional components\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6746479522","Type":"IssuesEvent","CreatedAt":"2017-10-21T02:46:16","Actor":"vue-issue-bot","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/6871","RelatedDescription":"Closed issue \"polyfill-eventsource added missing EventSource to window \" (#6871) at vuejs/vue","RelatedBody":"polyfill-eventsource added missing EventSource to window\r\n\r\n在IE浏览器(11)报这个错"},{"Id":"6746479507","Type":"IssuesEvent","CreatedAt":"2017-10-21T02:46:15","Actor":"GitHubLlj","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/6871","RelatedDescription":"Opened issue \"polyfill-eventsource added missing EventSource to window \" (#6871) at vuejs/vue","RelatedBody":"polyfill-eventsource added missing EventSource to window\r\n\r\n在IE浏览器(11)报这个错"},{"Id":"6746189637","Type":"IssuesEvent","CreatedAt":"2017-10-20T23:26:19","Actor":"nimcho","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/6870","RelatedDescription":"Opened issue \"Tree View: Inconsistent behavior\" (#6870) at vuejs/vue","RelatedBody":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/3p0j5sgy/1138/](https://jsfiddle.net/3p0j5sgy/1138/)\r\n\r\n### Steps to reproduce\r\nOnly a slight modification of the offical Tree View Example.\r\n\r\nI moved the treeData (a simple JSON object) directly into the template.  One can no longer add new nodes to the tree.\r\n\r\n### What is expected?\r\nIt is expected to behave the same way as the original script provided at:\r\n\r\n - https://vuejs.org/v2/examples/tree-view.html\r\n\r\n - or at JSFiddle: https://jsfiddle.net/yyx990803/3p0j5sgy/\r\n\r\n### What is actually happening?\r\nWhen you put the JSON data directly to the template -- the tree displays correctly, no exceptions raised, but you can no longer add new nodes to the tree.\r\n\r\n---\r\nAccording to the documentation, \"props\" should not be modified at all.\r\n\r\nHowever, it is being modified in the offical example from VueJS website.  Moreover, it is hard to imagine a meaningful implementation of an interactive tree structure without modifying \"props\" data. :(\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6743551616","Type":"PullRequestEvent","CreatedAt":"2017-10-20T12:36:06","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1837","RelatedDescription":"Closed pull request \"Fix object notation error in navigation docs\" (#1837) at vuejs/vue-router","RelatedBody":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"},{"Id":"6743543225","Type":"IssuesEvent","CreatedAt":"2017-10-20T12:34:09","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1839","RelatedDescription":"Closed issue \"Appear Transition\" (#1839) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/Twinpix/hgs7w26f/2/](https://jsfiddle.net/Twinpix/hgs7w26f/2/)\r\n\r\n### Steps to reproduce\r\nWhen changing to route A or Route B, Router should fire appear hook of Component on the first time and but enter hook is fired instead.\r\n\r\n### What is expected?\r\nI want to get a different transition/animation on the first load of components by vue-router, so I want to use appear hooks for this purpose.\r\n\r\n### What is actually happening?\r\nBut it seems that appear hook can only fired on the first component that is loaded in <router-view>, even if appear hooks are defined at component level and not around  <router-view>.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6743220328","Type":"IssuesEvent","CreatedAt":"2017-10-20T11:04:05","Actor":"viktor-hunko","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1838","RelatedDescription":"Closed issue \"Navigating between child routes causes parent route to re-render\" (#1838) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/yyx990803/L7hscd8h/](http://jsfiddle.net/yyx990803/L7hscd8h/)\r\n\r\n### Steps to reproduce\r\nHi there!\r\n\r\nIn my app i have multiple nested routes:\r\n```\r\n- root\r\n-- groups\r\n--- all\r\n--- group-details\r\n---- group-posts\r\n---- group-events\r\n---- group-members\r\n```\r\netc.\r\nBased on this example: http://jsfiddle.net/yyx990803/L7hscd8h/ in my case `User` component re-rendered when i'm navigating between child routes\r\n\r\n### What is expected?\r\nwhen i'm navigating between child routes parent should't be re-rendered\r\n\r\n### What is actually happening?\r\nWhen i'm navigating between, let's say, `group-posts` and `group-events` parent route `group-details` also re-render.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6742879919","Type":"IssuesEvent","CreatedAt":"2017-10-20T09:37:00","Actor":"Twinpix","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1839","RelatedDescription":"Opened issue \"Appear Transition\" (#1839) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/Twinpix/hgs7w26f/2/](https://jsfiddle.net/Twinpix/hgs7w26f/2/)\r\n\r\n### Steps to reproduce\r\nWhen changing to route A or Route B, Router should fire appear hook of Component on the first time and but enter hook is fired instead.\r\n\r\n### What is expected?\r\nI want to get a different transition/animation on the first load of components by vue-router, so I want to use appear hooks for this purpose.\r\n\r\n### What is actually happening?\r\nBut it seems that appear hook can only fired on the first component that is loaded in <router-view>, even if appear hooks are defined at component level and not around  <router-view>.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6742774653","Type":"IssuesEvent","CreatedAt":"2017-10-20T09:12:01","Actor":"viktor-hunko","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1838","RelatedDescription":"Opened issue \"Navigating between child routes causes parent route to re-render\" (#1838) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/yyx990803/L7hscd8h/](http://jsfiddle.net/yyx990803/L7hscd8h/)\r\n\r\n### Steps to reproduce\r\nHi there!\r\n\r\nIn my app i have multiple nested routes:\r\n```\r\n- root\r\n-- groups\r\n--- all\r\n--- group-details\r\n---- group-posts\r\n---- group-events\r\n---- group-members\r\n```\r\netc.\r\nBased on this example: http://jsfiddle.net/yyx990803/L7hscd8h/ in my case `User` component re-rendered when i'm navigating between child routes\r\n\r\n### What is expected?\r\nwhen i'm navigating between child routes parent should't be re-rendered\r\n\r\n### What is actually happening?\r\nWhen i'm navigating between, let's say, `group-posts` and `group-events` parent route `group-details` also re-render.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6742678076","Type":"PullRequestEvent","CreatedAt":"2017-10-20T08:49:21","Actor":"wgpsutherland","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1837","RelatedDescription":"Opened pull request \"Fix object notation error in navigation docs\" (#1837) at vuejs/vue-router","RelatedBody":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6743313270","Type":"IssuesEvent","CreatedAt":"2017-10-20T11:31:00","Actor":"ktsn","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1009","RelatedDescription":"Closed issue \"Vue 2.5 with vuex 3.0 - TS error: All declarations of 'ComponentOptions' must have identical type parameters\" (#1009) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.0\r\n\r\n### Reproduction link\r\n[https://github.com/DorianGrey/vue-ts-playground/tree/vue-2-5-update](https://github.com/DorianGrey/vue-ts-playground/tree/vue-2-5-update)\r\n(It's not a fiddle or something similar simple, but it should be sufficient - setting up one of these for TS usage is always a bit ... unlikely.)\r\n\r\n### Steps to reproduce\r\n- Checkout the branch referenced above.\r\n- Run `yarn` and `yarn build`\r\n- The output will list a couple of errors, approx. 13. Some of them refer to augmentation errors from `vuex` and `vue-router`. Some of these errors refer to my own augmentations, just ignore them for now.\r\nExemplary output part:\r\n```\r\n ERROR  /home/linne/Projects/vue-ts-playground/node_modules/vue-router/types/vue.d.ts\r\n(16,13): All declarations of 'ComponentOptions' must have identical type parameters.\r\n\r\n ERROR  /home/linne/Projects/vue-ts-playground/node_modules/vue/types/options.d.ts\r\n(54,18): All declarations of 'ComponentOptions' must have identical type parameters.\r\n\r\n ERROR  /home/linne/Projects/vue-ts-playground/node_modules/vuex/types/vue.d.ts\r\n(9,13): All declarations of 'ComponentOptions' must have identical type parameters.\r\n```\r\n\r\n### What is expected?\r\nThe type augmentation that adds the `store` to the component options should not cause any build errors.\r\n\r\n### What is actually happening?\r\nThe type augmentation actually causes build errors due to mismatching type parameters.\r\n\r\n---\r\nThe problem is caused by these lines:\r\nhttps://github.com/vuejs/vuex/blob/1234464dcded0305dba863a6486785c73f0090f7/types/vue.d.ts#L9-L11\r\n\r\nThey conflict with the declaration here:\r\nhttps://github.com/vuejs/vue/blob/a433b16588412980b4ab51924de1ef91b5226f56/types/options.d.ts#L54-L59\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6742830635","Type":"IssuesEvent","CreatedAt":"2017-10-20T09:25:17","Actor":"DorianGrey","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1009","RelatedDescription":"Opened issue \"Vue 2.5 with vuex 3.0 - TS error: All declarations of 'ComponentOptions' must have identical type parameters\" (#1009) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.0\r\n\r\n### Reproduction link\r\n[https://github.com/DorianGrey/vue-ts-playground/tree/vue-2-5-update](https://github.com/DorianGrey/vue-ts-playground/tree/vue-2-5-update)\r\n(It's not a fiddle or something similar simple, but it should be sufficient - setting up one of these for TS usage is always a bit ... unlikely.)\r\n\r\n### Steps to reproduce\r\n- Checkout the branch referenced above.\r\n- Run `yarn` and `yarn build`\r\n- The output will list a couple of errors, approx. 13. Some of them refer to augmentation errors from `vuex` and `vue-router`. Some of these errors refer to my own augmentations, just ignore them for now.\r\nExemplary output part:\r\n```\r\n ERROR  /home/linne/Projects/vue-ts-playground/node_modules/vue-router/types/vue.d.ts\r\n(16,13): All declarations of 'ComponentOptions' must have identical type parameters.\r\n\r\n ERROR  /home/linne/Projects/vue-ts-playground/node_modules/vue/types/options.d.ts\r\n(54,18): All declarations of 'ComponentOptions' must have identical type parameters.\r\n\r\n ERROR  /home/linne/Projects/vue-ts-playground/node_modules/vuex/types/vue.d.ts\r\n(9,13): All declarations of 'ComponentOptions' must have identical type parameters.\r\n```\r\n\r\n### What is expected?\r\nThe type augmentation that adds the `store` to the component options should not cause any build errors.\r\n\r\n### What is actually happening?\r\nThe type augmentation actually causes build errors due to mismatching type parameters.\r\n\r\n---\r\nThe problem is caused by these lines:\r\nhttps://github.com/vuejs/vuex/blob/1234464dcded0305dba863a6486785c73f0090f7/types/vue.d.ts#L9-L11\r\n\r\nThey conflict with the declaration here:\r\nhttps://github.com/vuejs/vue/blob/a433b16588412980b4ab51924de1ef91b5226f56/types/options.d.ts#L54-L59\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-10-21T05:30:31.8070839Z","RunDurationInMilliseconds":1980}