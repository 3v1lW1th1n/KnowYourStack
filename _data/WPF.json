{"Data":{"GitHub":{"Issues":[{"Id":"447971039","IsPullRequest":false,"CreatedAt":"2019-05-24T04:12:05","Actor":"dotMorten","Number":"752","RawContent":null,"Title":"Add implicit conversion between System.Drawing.Color and System.Windows.Media.Color","State":"open","Body":"Currently System.Windows.Media.Color is the color type used throughout WPF. This type however is not part of .NET Standard, which uses System.Drawing.Color instead.\r\n\r\nIt would be very useful that there's an implicit conversion between these two types, so that we can use either to bind in XAML or parse into for instance a color brush etc, so we can reuse these properties for various object models across multiple platforms.\r\n\r\nExample:\r\n```cs\r\npublic class MyViewModel\r\n{\r\n    public System.Drawing.Color Color { get; set; }\r\n}\r\n```\r\n```xml\r\n <Grid>\r\n   <Grid.DataContext>\r\n        <local:MyViewModel />\r\n   </Grid.DataContext>\r\n   <Ellipse Width=\"40\" Height=\"40\" Fill=\"{Binding Color}\" />\r\n</Grid>\r\n```\r\n\r\nThis currently produces a binding error like this:\r\n```\r\nSystem.Windows.Data Error: 1 : Cannot create default converter to perform 'one-way' conversions between types 'System.Drawing.Color' and 'System.Windows.Media.Brush'. Consider using Converter property of Binding. BindingExpression:Path=Color; DataItem='MyViewModel' (HashCode=64844482); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')\r\nSystem.Windows.Data Error: 5 : Value produced by BindingExpression is not valid for target property.; Value='Color [Red]' BindingExpression:Path=Color; DataItem='MyViewModel' (HashCode=64844482); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')\r\n```\r\n\r\nI added something similar to Xamarin.Forms as well https://github.com/xamarin/Xamarin.Forms/pull/1359\r\n(Also hoping we can add this to UWP too, so everyone plays nice with .NET Standard).\r\n\r\nImplementation suggestion:\r\n```cs\r\nnamespace System.Windows.Media\r\n{\r\n   public struct Color\r\n   {\r\n        public static implicit operator System.Drawing.Color(Color color) => \r\n            System.Drawing.Color.FromArgb(color.A, color.R, color.G, color.B);\r\n\r\n        public static implicit operator Color(System.Drawing.Color color) => \r\n            FromArgb(color.A, color.R, color.G, color.B);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/752","RelatedDescription":"Open issue \"Add implicit conversion between System.Drawing.Color and System.Windows.Media.Color\" (#752)"},{"Id":"447967656","IsPullRequest":false,"CreatedAt":"2019-05-24T03:54:48","Actor":"dotMorten","Number":"751","RawContent":null,"Title":"Cannot use local build of WPF in an application","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nWhen trying to use the locally built binaries using the approach [described here](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md#testing-api-changes), the application compiles and launches, but before any breakpoint is hit (even in App.Xaml.cs' constructor) the app terminates.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe app terminates with code -532462766 (0xe0434352) before even hitting the first line of code. EventViewer shows the following:\r\n```\r\nApplication: WpfTest.exe\r\nCoreCLR Version: 4.6.27622.75\r\n.NET Core Version: 3.0.0-preview5-27626-15\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.IO.FileNotFoundException: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n```\r\n PresentationFramework.dll is present in the output folder, and identical to the one built from the repo, so it appears it's looking for a different assembly (version doesn't match either).\r\n\r\n **Expected behavior:**\r\nApp launches\r\n \r\n **Minimal repro:**\r\nInstall latest .NET Core 3.0 SDK (Preview 5)\r\nThen from commandline:\r\n```\r\n  git clone https://github.com/dotnet/wpf \r\n  wpf\\restore.cmd\r\n  wpf\\build.cmd -pack\r\n  md WpfTest\r\n  cd WpfTest\r\n  dotnet new wpf\r\n```\r\nOpen the generated project and add the following (based on the dev doc, but note the doc left out the `\\Debug\\` part of the paths):\r\n```xml\r\n <PropertyGroup>\r\n     <!-- Change this value based on where your local repo is located -->\r\n     <WpfRepoRoot>..\\wpf</WpfRepoRoot>\r\n     <!-- Publishing a self-contained app ensures our binaries are used. -->\r\n     <SelfContained>true</SelfContained>\r\n    <!-- The runtime identifier needs to match the architecture you built WPF assemblies for. -->\r\n    <RuntimeIdentifier>win-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\ref\\netcoreapp3.0\\*.dll\" Private=\"false\" />\r\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\lib\\netcoreapp3.0\\*.dll\" />\r\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\lib\\$(RuntimeIdentifier)\\*.dll\" />\r\n  </ItemGroup>\r\n```\r\n\r\nRun the app (it'll exit almost immediately). \r\n\r\nI also tried with the nightly build of the SDK, but `ReferenceCopyLocalPaths` because the version is newer than what you build locally (that's fixable, but then you also need to override you nuget package sources, and at that point you're back to the above problem)\r\n\r\n@stevenbrix [reported](https://twitter.com/steven_brix/status/1131695332511760384) he's also seeing the same behavior.","Url":"https://github.com/dotnet/wpf/issues/751","RelatedDescription":"Open issue \"Cannot use local build of WPF in an application\" (#751)"},{"Id":"447928060","IsPullRequest":true,"CreatedAt":"2019-05-24T00:27:41","Actor":"MattGal","Number":"750","RawContent":null,"Title":"Update to pool-provider sourced machines","State":"open","Body":"@vatsan-madhavan FYI","Url":"https://github.com/dotnet/wpf/pull/750","RelatedDescription":"Open PR \"Update to pool-provider sourced machines\" (#750)"},{"Id":"447914205","IsPullRequest":false,"CreatedAt":"2019-05-23T23:23:22","Actor":"vatsan-madhavan","Number":"749","RawContent":null,"Title":"GenerateTemplates target in PresentationFramework.csproj is flaky","State":"open","Body":"On local builds, `GenerateTemplates` target in `PresentationFramework.csproj` sometimes generates empty `$(IntermediateOutputPath)ColumnDefinition.cs` and `$(IntermediateOutputPath)RowDefinition.cs` files. \r\n\r\nThis leads to failures like the one reported in #748 \r\n\r\n```\r\n------ Build started: Project: PresentationFramework, Configuration: Debug Any CPU ------\r\nSystem\\Windows\\Controls\\Grid.cs(309,16,309,42): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(324,16,324,39): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3347,22,3347,48): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3348,22,3348,45): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4151,21,4151,47): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4152,21,4152,44): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nDone building project \"PresentationFramework.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/wpf/issues/749","RelatedDescription":"Open issue \"GenerateTemplates target in PresentationFramework.csproj is flaky\" (#749)"},{"Id":"447899125","IsPullRequest":false,"CreatedAt":"2019-05-23T23:12:07","Actor":"LinkDoyle","Number":"748","RawContent":null,"Title":"Failed to build PresentationFramework: Missing type `ColumnDefinitionCollection` and `RowDefinitionCollection` in `Grid.cs`","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n3.0.100-preview5-011568\r\n\r\n* Windows version: (`winver`)\r\nWindows 10 Version 1903\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nNo\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nFailed to build PresentationFramework: the type `ColumnDefinitionCollection` and `RowDefinitionCollection` could not be found in `Grid.cs`.\r\nSee: [Grid.cs](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/Grid.cs#L309)\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n```\r\n------ Build started: Project: PresentationFramework, Configuration: Debug Any CPU ------\r\nSystem\\Windows\\Controls\\Grid.cs(309,16,309,42): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(324,16,324,39): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3347,22,3347,48): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3348,22,3348,45): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4151,21,4151,47): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4152,21,4152,44): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nDone building project \"PresentationFramework.csproj\" -- FAILED.\r\n```\r\n\r\n **Expected behavior:**\r\n The type `ColumnDefinitionCollection` and `RowDefinitionCollection` could be found in the project PresentationFramework.\r\n\r\n **Minimal repro:**\r\n Build the project PresentationFramework.\r\n","Url":"https://github.com/dotnet/wpf/issues/748","RelatedDescription":"Closed issue \"Failed to build PresentationFramework: Missing type `ColumnDefinitionCollection` and `RowDefinitionCollection` in `Grid.cs`\" (#748)"},{"Id":"447884075","IsPullRequest":false,"CreatedAt":"2019-05-23T21:35:30","Actor":"vatsan-madhavan","Number":"747","RawContent":null,"Title":"Add intellisense xml's to ref-pack ","State":"open","Body":"This issue tracks the inclusion of intellisense xmls' in our ref-assembly nuget package. \r\n\r\nWe still need to define the following: \r\n\r\n- [ ] Who produces the intellisense xml's\r\n- [ ] How do we consume them (checked into our repo vs. consumed as a nuget package)\r\n- [ ] Where do we put them (presumptively, into the reference assembly packages, `Microsoft.DotNet.Wpf.GitHub`, and `Microsoft.DotNet.Wpf.DncEng`. => These will get consumed by core-sdk, unpacked and repacked into the core-sdk re-packs. ","Url":"https://github.com/dotnet/wpf/issues/747","RelatedDescription":"Open issue \"Add intellisense xml's to ref-pack \" (#747)"},{"Id":"447865027","IsPullRequest":false,"CreatedAt":"2019-05-23T20:44:49","Actor":"vatsan-madhavan","Number":"746","RawContent":null,"Title":"Incorporate WPF and WinForms Specific FrameworkReferences in Microsoft.NET.Sdk.WindowsDesktop","State":"open","Body":"See https://github.com/dotnet/sdk/pull/3259 \r\n\r\nMight require additional work to incorporate theme-assembly specific FrameworkReferences as well. ","Url":"https://github.com/dotnet/wpf/issues/746","RelatedDescription":"Open issue \"Incorporate WPF and WinForms Specific FrameworkReferences in Microsoft.NET.Sdk.WindowsDesktop\" (#746)"},{"Id":"447855215","IsPullRequest":true,"CreatedAt":"2019-05-23T20:20:35","Actor":"thomasclaudiushuber","Number":"745","RawContent":null,"Title":"Define Value property of Setter as XAML content property","State":"open","Body":"Fixes issue https://github.com/dotnet/wpf/issues/84","Url":"https://github.com/dotnet/wpf/pull/745","RelatedDescription":"Open PR \"Define Value property of Setter as XAML content property\" (#745)"},{"Id":"447436783","IsPullRequest":true,"CreatedAt":"2019-05-23T19:15:18","Actor":"meziantou","Number":"734","RawContent":null,"Title":"Update OSVersionHelper.cs","State":"closed","Body":"Change `OperatingSystemVersion.Windows10RS3` to `OperatingSystemVersion.Windows10RS5`","Url":"https://github.com/dotnet/wpf/pull/734","RelatedDescription":"Closed or merged PR \"Update OSVersionHelper.cs\" (#734)"},{"Id":"447794878","IsPullRequest":false,"CreatedAt":"2019-05-23T17:51:04","Actor":"grubioe","Number":"744","RawContent":null,"Title":"\\PenImc SxS COM registration failure message should be localized","State":"open","Body":"Copied from VSO ID: 670084\r\n\r\nSteps to reproduce:\r\n\r\n/src/WPF/src/PresentationCore/CSharp/MS/Win32/UnsafeNativeMethodsPenimc.cs:106\r\n\r\n            if (activationContextCookie == IntPtr.Zero)\r\n            {\r\n                throw new InvalidOperationException(\"SxS COM registration of PenIMC3_v0400.dll failed.\");\r\n            }\r\n        }","Url":"https://github.com/dotnet/wpf/issues/744","RelatedDescription":"Open issue \"\\PenImc SxS COM registration failure message should be localized\" (#744)"},{"Id":"447789313","IsPullRequest":false,"CreatedAt":"2019-05-23T17:37:11","Actor":"grubioe","Number":"743","RawContent":null,"Title":"Remove null conditionals from SystemXmlLinqExtension.cs","State":"open","Body":"Copied from VSO ID: 713546\r\n\r\nDue to https://github.com/dotnet/corefx/issues/32641, we added a spot fix null conditional to SYstemXmlLinqExtension.cs in the constructor.\r\n\r\nWhen the above is fixed, we should remove this null conditional we will then fail immediately if something is wrong in the type descriptors.\r\n\r\nSee VSO ID 713546 for PR with change to be reverted","Url":"https://github.com/dotnet/wpf/issues/743","RelatedDescription":"Open issue \"Remove null conditionals from SystemXmlLinqExtension.cs\" (#743)"},{"Id":"447785021","IsPullRequest":false,"CreatedAt":"2019-05-23T17:27:00","Actor":"grubioe","Number":"742","RawContent":null,"Title":"During multi-touch, lifting primary touch point before non-primary points crashes.","State":"open","Body":"Copied from VSO ID: 672856\r\n\r\n\r\n **Problem description: & Repro Steps**\r\n===================================\r\nRun the attached touch move test application against .NET Core 3 WPF builds.\r\n\r\nTouch down with multiple touch points.  Ensure that you lift the primary (first down) finger prior to any non-primary point.\r\n\r\nObserve the following crash:\r\n\r\nat System.Windows.Input.StylusWisp.WispLogic.PromoteMainToMouse(StagingAreaInputItem stagingItem)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PromoteMainUpToTouch(WispStylusDevice stylusDevice, StagingAreaInputItem stagingItem)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PromoteMainToTouch(ProcessInputEventArgs e, StylusEventArgs stylusEventArgs)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PromoteMainToOther(ProcessInputEventArgs e)\r\n   at System.Windows.Input.StylusWisp.WispLogic.PostProcessInput(Object sender, ProcessInputEventArgs e)\r\n   at System.Windows.Input.InputManager.RaiseProcessInputEventHandlers(ProcessInputEventHandler postProcessInput, ProcessInputEventArgs processInputEventArgs)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.StylusWisp.WispLogic.InputManagerProcessInputEventArgs(InputEventArgs input)\r\n   at System.Windows.Input.StylusWisp.WispLogic.InputManagerProcessInput(Object oInput)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, Object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at MovePerfTester.App.Main()\r\n \r\n \r\n[TouchMoveSample.zip](https://github.com/dotnet/wpf/files/3213428/TouchMoveSample.zip)\r\n\r\nInitial Investigation:\r\n===============\r\nThere is a debug assert that fails in this code path.  Something about either NetCore3 or SxS COM is causing this prior assumption to be invalid.\r\n\r\nWhen tested in the netfxdev1 SxS COM prototype, this failure did not occur, leading me to believe this is something to do with NetCore3.\r\n\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/742","RelatedDescription":"Open issue \"During multi-touch, lifting primary touch point before non-primary points crashes.\" (#742)"},{"Id":"447764003","IsPullRequest":true,"CreatedAt":"2019-05-23T16:36:41","Actor":"rladuca","Number":"741","RawContent":null,"Title":"WIP Inject Module Constructor into PCore","State":"open","Body":"Fixes #334 \r\n\r\nWill dupe related issues to #334 as I scrape issues for them.\r\n\r\nVerified DLL loads with latest bits.  PCore loads DWriteFwder through the module constructor.  This gives us the same DPI initialization semantics as .NET Framework.\r\n\r\nTODO:\r\n- Fixup PackageReferences to .NET Core IL Tools to use DARC flow","Url":"https://github.com/dotnet/wpf/pull/741","RelatedDescription":"Open PR \"WIP Inject Module Constructor into PCore\" (#741)"},{"Id":"447760057","IsPullRequest":false,"CreatedAt":"2019-05-23T16:29:44","Actor":"dbulic","Number":"740","RawContent":null,"Title":".NET Core 3.0 WPF application not aware of display scaling","State":"closed","Body":"# Issue Title\r\n\r\n.NET Core 3.0 WPF application not aware of display scaling\r\n\r\n# General\r\n\r\nMy desktop is scaled 150% as I have a 5k screen.\r\nUsing .NET Core 3.0 Preview 5 in Visual Studio Preview 2019 (16.2 Preview 1.0) - the latest of both. Created straight WPF applications via New Project, one for .NET Core, another one for .NET Framework 4.7.2. Added a single TextBlock to each.\r\nAttached both sample solutions, as well as what I see when I run them.\r\n[WpfCore3.zip](https://github.com/dotnet/core/files/3213112/WpfCore3.zip)\r\n[WpfNetFramework.zip](https://github.com/dotnet/core/files/3213113/WpfNetFramework.zip)\r\n<img width=\"634\" alt=\"ScalingCore\" src=\"https://user-images.githubusercontent.com/22821/58267968-dab59880-7d84-11e9-8572-208208862758.png\">\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/740","RelatedDescription":"Closed issue \".NET Core 3.0 WPF application not aware of display scaling\" (#740)"},{"Id":"447743220","IsPullRequest":false,"CreatedAt":"2019-05-23T15:52:04","Actor":"grubioe","Number":"739","RawContent":null,"Title":"WPF DataGrid column visibility change breaks databinding","State":"open","Body":"Copied from VSO ID: 892081\r\n* Windows version: (`winver`):\r\n  * Windows Version: Windows 10 i.e version 1803  \r\n  * Visual Studio Version: 2019 16.0.3\r\n  * .Net Version: 4.7.1, 4.7.2, 4.8\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: **Yes**, .Net Framework 4.7.1, 4.7.2, 4.8\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n**Problem Description:**\r\n=============\r\n Customer has created a WPF application based on WPF's DataGrid control. \r\nHe creates the DataGrid control with columns with Visibility=\"Collapsed\" \r\nMaking such a collapsed column visible may destroy data binding of the first visible column's \r\ncell occurring after the last collapsed column in the grid.\r\n \r\n**Longer version:**\r\n```xml\r\n<DataGrid x:Name=\"theGrid\" AutoGenerateColumns=\"False\">\r\n <DataGrid.Columns>\r\n  <DataGridTemplateColumn Header=\"Visible 1\" CellTemplate=\"{StaticResource ComboTemplate}\"/>\r\n  <DataGridTemplateColumn Header=\"Collapsed 1\" Visibility=\"Collapsed\" x:Name=\"col1\" />\r\n  <DataGridTemplateColumn Header=\"Collapsed 2\" Visibility=\"Collapsed\" x:Name=\"col2\" />\r\n  <DataGridTemplateColumn Header=\"Collapsed 3\" Visibility=\"Collapsed\" x:Name=\"col3\" />\r\n  <DataGridTemplateColumn Header=\"Visible 2\" CellTemplate=\"{StaticResource ComboTemplate}\"/>\r\n  <DataGridTemplateColumn Header=\"Visible 3\" CellTemplate=\"{StaticResource ComboTemplate}\"/>\r\n```\r\n \r\nWhen setting a not shown column (Visibility=Collapsed) to visible and said column is between two collapsed columns, \r\nthe cell of the first visible column after the last collapsed column in the grid will be recreated \r\nand this will furthermore cause, that the ComboBox in that cell will lose its bound value. \r\n \r\nSince this might sound a little bit confusing, there is a sample app to demonstrate the behavior. \r\n \r\n**Steps to reproduce:**\r\n=============\r\n\r\n1.) Use a machine with Visual Studio 2019 and the .Net Framework 4.8 installed\r\n2.) Unzip the attached sample DataGridColumnVisibilityAndBindingIssue.rar\r\n3.) Run the sample\r\n4.) Press the ToggleBotton \"Collapsed 2\" to make the DataGrid's 3rd column visible\r\n \r\n**Actual Result**\r\n=============\r\nThe ComboBox will lose its text \"One\" in the first cell of the 4th column \"Visible 2\" \r\n \r\n \r\n**Expected Result**\r\n===============\r\nThe ComboBox will keep its text \"One\" in the first cell of the 4th column \"Visible 2\" \r\n \r\n \r\nWhen starting the app, you have 3 ToggleButtons, each one for hiding and showing a column. \r\nThere is also an event handler attached to the DataGridCell.Loaded event, so we can see, \r\nwhich cells have been created & loaded. \r\nIf you toggle buttons 1 & 3, everything works as expected: Columns 1 & 3 will be shown or collapsed. \r\nThere is no tampering around with any bindings. \r\nIn the debug output you'll see, that the cell of the column being set visible has been loaded. \r\nBut if you press Button 2 to show Column 2 (columns \"Collapsed 1\" & \"Collapsed 3\" must not be visible, \r\notherwise this bug will not occur), \r\nthe column will show properly, but the value in the combo box of column \"Visible 2\" will be lost. \r\n \r\nIf you look into the debug output, you'll find the following: \r\nLoaded: Hash=[ 62990845] Index=[2] Header=[Collapsed 2] \r\nLoaded: Hash=[ 26550365] Index=[4] Header=[Visible 2] \r\nWhich means, that the DataGridCellsPresenter did create a new cell container for the column \"Visible 2\", \r\nalthough it already had one and was visible all the time. \r\nThat new cell has then for some reason a broken binding or at least the selected item isn't set correctly.\r\n\r\n**Preliminary Investigation:**\r\n===============\r\n\r\n1. Changing visibility of column A sometimes causes cell templates for column B to be re-created.  Repro shows one example; there are surely others.\r\n2. Some bindings in B's template react poorly to being replaced.  Instead of simply going away, they install a bad value into the binding group's proposed-value table.  In the repro, the binding \r\n```xml \r\n<ComboBox SelectedItem=\"{Binding Item}\" ItemsSource=\"{Binding Items}\"/>\r\n```\r\ninstalls null as the proposed value for the SimpleViewModel.Item property.\r\n\r\n3. The new instance of B's template uses the proposed value (null) instead of the data item's value (\"One\").  This is correct, it's what makes template replacement work, as when you open a cell for editing and replaces its display template with its edit template (or vice versa).\r\n4. The binding from (2) can be affected by other bindings in the template.   (In the repro, SelectedItem can be changed indirectly by changing ItemsSource.)  This situation has led to problems in the past, arising from event-leapfrogging or aliasing where it's challenging to recognize whether a change comes from user input or from a side-effect of some other action that shouldn't cause changes in the data-item.\r\n\r\nFurther investigation is needed to determine\r\n\r\n1. when does DataGrid re-create column templates\r\n2. how can bindings distinguish real changes from side-effect ones - can/should DataGrid do anything to help\r\n3. can this pollution of the proposed-value table occur with \"normal\" bindings (that lack the interdependence of bindings involving the selection properties)\r\n4. does this pollution affect other situations when column templates are replaced, e.g. column virtualization\r\n\r\n \r\n[DataGridColumnVisibilityAndBindingIssue.zip](https://github.com/dotnet/wpf/files/3213068/DataGridColumnVisibilityAndBindingIssue.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/739","RelatedDescription":"Open issue \"WPF DataGrid column visibility change breaks databinding\" (#739)"},{"Id":"447719230","IsPullRequest":false,"CreatedAt":"2019-05-23T15:08:09","Actor":"grubioe","Number":"738","RawContent":null,"Title":"May Update for WPF on .NET Core 3.0","State":"open","Body":"# May Update for WPF on .NET Core 3.0\r\n\r\nIn last month’s [update](https://github.com/dotnet/wpf/issues/607), we shared details related to onboarding to the Arcade SDK build system and what had kept the team so busy since December.  This month, we have exciting news to share... **the team just open sourced 15 additional assemblies!** With this, most of the managed binaries have been open sourced including WindowsBase, PresentationFramework & PresentationCore.\r\n\r\nFollowing are the assemblies recently open sourced, note that we have updated the [WPF roadmap](https://github.com/dotnet/wpf/blob/master/roadmap.md) to reflect these changes:\r\n\r\n* WindowsBase\r\n* PresentationCore\r\n* PresentationFramework\r\n* DirectWriteForwarder\r\n* ReachFramework\r\n* System.Windows.Input.Manipulations\r\n* UI Automation assemblies\r\n  * UIsAutomationClient\r\n  * UIAutomationClientSideProviders\r\n  * UIAutomationProvider\r\n  * UIAutomationType\r\n* WPF Extensions\r\n  * PresentationFramework-SystemCore\r\n  * PresentationFramework-SystemData\r\n  * PresentationFramework-SystemDrawing\r\n  * PresentationFramework-SystemXml\r\n  * PresentationFramework-SystemXmlLinq\r\n\r\nTo open source each binary it requires that the team takes a methodical approach given that the code base has been around for 10+ years.  The following steps must be taken for open sourcing each binary:\r\n*  **Cleanup for open sourcing:** We run tools to remove all references to employee aliases, employee names, remove of internal bug databases and ID’s.  \r\n* **Licensing Updates:** For each assembly we run checks to validate that all source code has the proper .NET foundation license. \r\n\r\n\r\nAs we approach .NET Core 3 General Availability (GA) we will be working on open sourcing the remaining assemblies on the roadmap and on squashing issues (like [#37](https://github.com/dotnet/wpf/issues/37)) that have been identified as candidates for .NET Core 3.   \r\n\r\nGiven that .NET Core 3 GA is planned for September we want to be super focused... we have updated our [contribution guidelines](https://github.com/dotnet/wpf/blob/master/Documentation/contributing.md) and added [additional guidance](https://github.com/dotnet/wpf/blob/master/Documentation/acceptance_criteria.md) related to acceptance criteria for Pull Requests prior to the .NET Core 3 GA.  Don't get us wrong, we love community contributions but for now we want to ensure that the 3.0 release rocks!  \r\n\r\n\r\nThank you for your contributions and engagement to date.  If you have questions, suggestions, or concerns, please let us know.","Url":"https://github.com/dotnet/wpf/issues/738","RelatedDescription":"Open issue \"May Update for WPF on .NET Core 3.0\" (#738)"},{"Id":"447641883","IsPullRequest":true,"CreatedAt":"2019-05-23T12:56:23","Actor":"dotnet-maestro[bot]","Number":"737","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190522.02\r\n- **Date Produced**: 5/22/2019 9:17 PM\r\n- **Commit**: 4573cea18beb40dc9a41014798060e48ff044c63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27722-02\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19270.15 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/737","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#737)"},{"Id":"447622512","IsPullRequest":true,"CreatedAt":"2019-05-23T12:19:11","Actor":"dotnet-maestro[bot]","Number":"736","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190522.13\r\n- **Date Produced**: 5/23/2019 1:51 AM\r\n- **Commit**: 86e674361bdcefecbd8199ab62d0b1a6cb25703d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19272.13\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/736","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#736)"},{"Id":"447517586","IsPullRequest":false,"CreatedAt":"2019-05-23T08:33:05","Actor":"pavelovcharov","Number":"735","RawContent":null,"Title":"The Clipboard.GetDataObject() method doesn't work as expected","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1809 (177663.79)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nThe following test fails when running under .NET Core 3 preview5:\r\n```\r\n        [Test]\r\n        public void Test() {\r\n            DataObject data = new DataObject();\r\n            data.SetData(typeof(string), \"SampleText\");\r\n            Clipboard.SetDataObject(data);\r\n            string text = ((DataObject)Clipboard.GetDataObject()).GetText();\r\n            Assert.AreEqual(\"SampleText\", text);\r\n        }\r\n```\r\nAs far as I remember, the test didn't failed in previous .Net Core 3 previews. \r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe test fails with the following message:\r\n```\r\n Message: System.InvalidCastException : Unable to cast COM object of type 'System.__ComObject' to class type 'System.Windows.DataObject'. Instances of types that represent COM components cannot be cast to types that do not represent COM components; however they can be cast to interfaces as long as the underlying COM component supports QueryInterface calls for the IID of the interface.\r\n```\r\n  \r\n **Expected behavior:**\r\n The test should pass.\r\n\r\n **Minimal repro:**\r\ngit clone https://github.com/pavelovcharov/netcore3_clipboardsetdata\r\ncd .\\netcore3_clipboardsetdata\\\r\ndotnet test\r\n","Url":"https://github.com/dotnet/wpf/issues/735","RelatedDescription":"Open issue \"The Clipboard.GetDataObject() method doesn't work as expected\" (#735)"},{"Id":"447394487","IsPullRequest":true,"CreatedAt":"2019-05-23T02:43:47","Actor":"grubioe","Number":"730","RawContent":null,"Title":"Update getting-started.md","State":"closed","Body":"Removed known issue #37  related to VC runtime dependency as this was recently fixed","Url":"https://github.com/dotnet/wpf/pull/730","RelatedDescription":"Closed or merged PR \"Update getting-started.md\" (#730)"},{"Id":"447411238","IsPullRequest":true,"CreatedAt":"2019-05-23T02:07:49","Actor":"grubioe","Number":"733","RawContent":null,"Title":"Update roadmap.md","State":"closed","Body":"Updated to account for PR #727.","Url":"https://github.com/dotnet/wpf/pull/733","RelatedDescription":"Closed or merged PR \"Update roadmap.md\" (#733)"},{"Id":"447406263","IsPullRequest":true,"CreatedAt":"2019-05-23T01:52:38","Actor":"ryalanms","Number":"732","RawContent":null,"Title":"Add pull request acceptance criteria ","State":"closed","Body":"(Pushing reviewed PR acceptance criteria from internal mirror...)","Url":"https://github.com/dotnet/wpf/pull/732","RelatedDescription":"Closed or merged PR \"Add pull request acceptance criteria \" (#732)"},{"Id":"447370126","IsPullRequest":true,"CreatedAt":"2019-05-23T01:02:47","Actor":"ryalanms","Number":"727","RawContent":null,"Title":"Open source PresentationFramework extension assemblies","State":"closed","Body":"Open source PresentationFramework extension assemblies: \r\n\r\nPresentationFramework-SystemCore.dll\r\nPresentationFramework-SystemData.dll\r\nPresentationFramework-SystemDrawing.dll\r\nPresentationFramework-SystemXml.dll\r\nPresentationFramework-SystemXmlLinq.dll\r\n","Url":"https://github.com/dotnet/wpf/pull/727","RelatedDescription":"Closed or merged PR \"Open source PresentationFramework extension assemblies\" (#727)"},{"Id":"447402042","IsPullRequest":true,"CreatedAt":"2019-05-23T01:02:17","Actor":"dotnet-maestro[bot]","Number":"731","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190522.11\r\n- **Date Produced**: 5/23/2019 12:42 AM\r\n- **Commit**: e65722fd933343e1132c131c49f66792bc69b3bc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview6.19272.11\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19270.12 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/731","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#731)"},{"Id":"447385430","IsPullRequest":true,"CreatedAt":"2019-05-23T00:39:56","Actor":"grubioe","Number":"729","RawContent":null,"Title":"Update roadmap.md","State":"closed","Body":"Updating Roadmap.md based on progress on open sourcing additional 9 binaries","Url":"https://github.com/dotnet/wpf/pull/729","RelatedDescription":"Closed or merged PR \"Update roadmap.md\" (#729)"},{"Id":"447377135","IsPullRequest":true,"CreatedAt":"2019-05-22T23:12:11","Actor":"vatsan-madhavan","Number":"728","RawContent":null,"Title":"Do not publish PDB's for packaging or redist projects","State":"closed","Body":"Do not publish PDB's for packaging or redist projects","Url":"https://github.com/dotnet/wpf/pull/728","RelatedDescription":"Closed or merged PR \"Do not publish PDB's for packaging or redist projects\" (#728)"},{"Id":"447350737","IsPullRequest":true,"CreatedAt":"2019-05-22T22:22:40","Actor":"rladuca","Number":"726","RawContent":null,"Title":"Change DWriteForwarder to use __uuidof","State":"closed","Body":"Removing use of GUID struct in initialization of the DWrite factory.  This is a workaround for a JIT bug that marshals incorrect GUID data, causing the cast to fail with E_NOINTERFACE.\r\n\r\nfixes #725 ","Url":"https://github.com/dotnet/wpf/pull/726","RelatedDescription":"Closed or merged PR \"Change DWriteForwarder to use __uuidof\" (#726)"},{"Id":"447350276","IsPullRequest":false,"CreatedAt":"2019-05-22T22:22:40","Actor":"rladuca","Number":"725","RawContent":null,"Title":"Change DWriteForwarder to use __uuidof (to prevent WPF apps crashing when loading DWrite)","State":"closed","Body":"See: https://github.com/dotnet/coreclr/issues/24705\r\n\r\nA workaround to this JIT issue is to sidestep our use of the GUID struct and just call __uuidof.","Url":"https://github.com/dotnet/wpf/issues/725","RelatedDescription":"Closed issue \"Change DWriteForwarder to use __uuidof (to prevent WPF apps crashing when loading DWrite)\" (#725)"},{"Id":"447349942","IsPullRequest":false,"CreatedAt":"2019-05-22T21:24:16","Actor":"vatsan-madhavan","Number":"724","RawContent":null,"Title":"Enable APICompat in WPF Builds","State":"open","Body":"Enable API Compat against net48 ref assemblies on WPF Builds. \r\n\r\nThis will prevent future breaks like #515 ","Url":"https://github.com/dotnet/wpf/issues/724","RelatedDescription":"Open issue \"Enable APICompat in WPF Builds\" (#724)"},{"Id":"447327863","IsPullRequest":false,"CreatedAt":"2019-05-22T20:27:33","Actor":"IAmTheCShark","Number":"723","RawContent":null,"Title":"Improve equalitycheck for Object-DependencyProperties","State":"open","Body":"When changing DepdendencyProperties there is an equalitycheck to prevent unecessary events when the value is actually the same.\r\n\r\nHowever, this is based on the Type of the DependencyProperty and uses `Object.Equals` for string and valuetypes and `Object.ReferenceEquals` for eveything else.\r\nSo if the DependencyProperty is of Type Object, it will allways use `Object.ReferenceEquals.`\r\n\r\nSee here\r\nhttps://referencesource.microsoft.com/#WindowsBase/Base/System/Windows/DependencyObject.cs,3453\r\n\r\n```\r\n/// <summary>\r\n///     Helper method to compare two DP values\r\n/// </summary>\r\nprivate bool Equals(DependencyProperty dp, object value1, object value2)\r\n{\r\n    if (dp.IsValueType || dp.IsStringType)\r\n    {\r\n        // Use Object.Equals for Strings and ValueTypes\r\n        return Object.Equals(value1, value2);\r\n    }\r\n    else\r\n    {\r\n        // Use Object.ReferenceEquals for all other ReferenceTypes\r\n        return Object.ReferenceEquals(value1, value2);\r\n    }\r\n}\r\n```\r\n\r\nThe problem is, that valuetypes get boxed and hence will allways fail the ReferenceEquality check.\r\n\r\nSo my proposal is to change that if to something like this:\r\n\r\n\r\n```\r\n/// <summary>\r\n///     Helper method to compare two DP values\r\n/// </summary>\r\nprivate bool Equals(DependencyProperty dp, object value1, object value2)\r\n{\r\n    if (dp.IsValueType || dp.IsStringType)\r\n    {\r\n        // Use Object.Equals for Strings and ValueTypes\r\n        return Object.Equals(value1, value2);\r\n    }\r\n    else\r\n    {\r\n        // For ObjectTypes check if both values are the same value or string type\r\n        // and if so, use Object.Equals aswell since ReferenceEquals will allways fail due to boxing.\r\n        if(dp.IsObjectType)\r\n        {\r\n            Type t = value1?.GetType();\r\n             \r\n             // If values have different types, they cant be equal.\r\n             if(t != value2?.GetType())\r\n                return false;\r\n            \r\n            // They can both be null\r\n            if(t == null) \r\n                return true;\r\n\r\n            if(t.IsValueType || t == typeof(string))\r\n                 return Object.Equals(value1, value2);\r\n        }\r\n\r\n        // Use Object.ReferenceEquals for all other ReferenceTypes\r\n        return Object.ReferenceEquals(value1, value2);\r\n    }\r\n}\r\n\r\n```\r\nThat code probably isnt the most efficient way of doing this, but you get the idea.\r\n\r\nWhile this adds more complexity to the EqualityCheck it will reduce the ammount of events that will result from those \"false positives\". \r\n\r\n\r\n**edit** Im sorry if this is not WPF specific and i picked the wrong repository.\r\n","Url":"https://github.com/dotnet/wpf/issues/723","RelatedDescription":"Open issue \"Improve equalitycheck for Object-DependencyProperties\" (#723)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-24T05:30:47.2469447Z","RunDurationInMilliseconds":716}