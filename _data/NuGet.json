{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11599455192","Type":"IssuesEvent","CreatedAt":"2020-02-25T02:18:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4973","RelatedDescription":"Closed issue \"Gallery accepts packages containing floating version ranges in dependencies\" (#4973) at NuGet/NuGetGallery","RelatedBody":"The following packages have floating versions in their dependency version ranges:\r\n\r\nID | Version\r\n-- | --\r\nScissorhands.Helpers | 1.0.0-alpha-17\r\nScissorhands.Helpers | 1.0.0-alpha-16\r\nPInvokeCompiler | 1.0.0-rc1\r\nJWT | 2.3.1\r\n\r\nThese should be rejected on upload and V3 registrations should strip the floating-ness, as client does:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/bdd8626c0e5c6ee0b505ea8a1274c5fe941fb6d1/src/NuGet.Core/NuGet.Protocol/DependencyInfo/RegistrationUtility.cs#L26\r\n\r\n/cc @emgarten "},{"Id":"11599448801","Type":"IssuesEvent","CreatedAt":"2020-02-25T02:17:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7836","RelatedDescription":"Closed issue \"Remove the SemVer 2.0.0 warning from nuget.org\" (#7836) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\n\r\nWhen the SemVer 2.0.0 changes were introduced to the V2 and V3 protocol, they are intended to mitigate the impact of SemVer 2.0.0 packages breaking old clients, e.g. suppose a very popular package released a SemVer 2.0.0 version. In such a case a 2.x customer would fail to restore a package because the version parsing would explode. So we make SemVer 2.0.0 packages \"opt-in\". \r\n\r\nThis protocol change meant that SemVer 2.0.0 packages were hidden in most of our APIs for clients that predate NuGet version 4.3. 4.3 is when the SemVer 2.0.0 protocol was implemented. At that same time we put a warning banner on nuget.org.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73881689-a223f500-4815-11ea-8717-653f6302cc65.png)\r\nhttps://www.nuget.org/packages/NuGet.Versioning/5.5.0-preview.2.6382\r\n\r\nA similar warning is also visible during UI upload and during package push. And during pack (NU5105).\r\n\r\nSince 4.3 was shipped so long ago, most clients now support the SemVer 2.0.0 protocol and this warning is more noisy than helpful.\r\n\r\nRange | Percent | Note\r\n-- | -- | --\r\n≥ 4.3 | ~96.4% | Supports SemVer 2.0.0 protocol\r\n≥ 3.0 && < 4.3 | ~3.6% | Partial SemVer 2.0.0 but not SemVer 2.0.0 protocol `*`\r\n< 3.0 | ~0.0% | Does not support SemVer 2.0.0\r\n\r\n`*` =\r\n- Anything before 4.3 will not see SemVer 2.0.0 in search or in the PM UI.\r\n- 3.5.0 and on supported SemVer 2.0.0 restore in packages.config so people can hand edit to work-around.\r\n- PackageReference always supported SemVer 2.0.0 from what I can tell so people could hard-code a SemVer 2.0.0 package in their .csproj and still restore.\r\n- V3 feeds always return SemVer 2.0.0 packages from flat container so packages can be found prior to SemVer 2.0.0. protocol support\r\n\r\n### Describe the solution you'd like\r\n\r\nRemove these warnings entirely.\r\n\r\n### Additional details\r\n\r\nPrompted by https://twitter.com/SimonCropp/status/1169447145939685376, https://github.com/NuGet/NuGetGallery/pull/7772, and https://github.com/NuGet/Home/issues/5201.\r\n\r\n/cc @nkolev92 @SimonCropp @agr @karann-msft \r\n"},{"Id":"11581895546","Type":"PullRequestEvent","CreatedAt":"2020-02-22T00:15:25","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7852","RelatedDescription":"Merged pull request \"[NuGetGallery] FI master to Dev\" (#7852) at NuGet/NuGetGallery","RelatedBody":"pulling my hotfix changes to dev for consistency and convenience for next RI whenever."},{"Id":"11581837337","Type":"PullRequestEvent","CreatedAt":"2020-02-22T00:01:39","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7852","RelatedDescription":"Opened pull request \"[NuGetGallery] FI master to Dev\" (#7852) at NuGet/NuGetGallery","RelatedBody":"pulling my hotfix changes to dev for consistency and convenience for next RI whenever."},{"Id":"11581543994","Type":"IssuesEvent","CreatedAt":"2020-02-21T22:58:12","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7741","RelatedDescription":"Closed issue \"[C2R] Implement registration comparer to detect differences between new and old\" (#7741) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11581433661","Type":"PullRequestEvent","CreatedAt":"2020-02-21T22:37:42","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7851","RelatedDescription":"Merged pull request \"[HOTFIX] Fix GalleryAccount deleter job DI issue\" (#7851) at NuGet/NuGetGallery","RelatedBody":"This job threw exception when deleting a user due to DI issues. \r\n\r\n@ryuyu provided the fix, I am going to deploy it.\r\n\r\nThis was tested on DEV with the private branch."},{"Id":"11581408401","Type":"PullRequestEvent","CreatedAt":"2020-02-21T22:33:14","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7851","RelatedDescription":"Opened pull request \"[HOTFIX] Fix GalleryAccount deleter job DI issue\" (#7851) at NuGet/NuGetGallery","RelatedBody":"This job threw exception when deleting a user due to DI issues. \r\n\r\n@ryuyu provided the fix, I am going to deploy it.\r\n\r\nThis was tested on DEV with the private branch."},{"Id":"11569695851","Type":"IssuesEvent","CreatedAt":"2020-02-20T18:03:22","Actor":"anangaur","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7850","RelatedDescription":"Opened issue \"Add fuget.org link to package details page\" (#7850) at NuGet/NuGetGallery","RelatedBody":"This is the issue tracking the community PR: https://github.com/NuGet/NuGetGallery/pull/7832 as it needs some UX and messaging work before going live.\r\n\r\nRationale for the feature: \r\nfuget.org shows API level data for the packages and lets you compare the APIs across versions. This has been super useful for developers and they have already been using this. It would make sense for developers to directly explore their package on fuget.org from nuget.org's package details page."},{"Id":"11561559355","Type":"PullRequestEvent","CreatedAt":"2020-02-19T23:39:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7000","RelatedDescription":"Closed pull request \"[PROPOSAL] Tool to determine if a .nupkg has valid Microsoft metadata\" (#7000) at NuGet/NuGetGallery","RelatedBody":"This is minimal effort to make a tool that will allow teams to check the metadata of their package before pushing it to nuget.org. This is optional but will help teams catch metadata problems before shipping.\r\n\r\nWe can formalize the tool later, perhaps with `nuget.exe verify` and some kind of rules abstraction. But this is the cheap first step.\r\n\r\nIt's a old style tools package and requires .NET Framework 4.6.2. The .exe is here inside the package:\r\n\r\n```\r\ntools\\NuGet.VerifyMicrosoftPackage.exe\r\n```\r\n\r\nIn other words, it can be used like `NuGet.CommandLine` or `xunit.runner.console` where the user just hard codes the path inside the package of where the .exe is.\r\n\r\nTeams with non-standard rules can specify a path to their custom rule set using `--rule-set`. We can communicate in a doc what owners have non-standard rule sets and what they are. There are 4 non-standard 4 rule sets in the PROD DB today.\r\n\r\nWe should also document that this does not cover author signature verification. This can easily be done with `nuget.exe verify -Signatures -CertificateFingerprint`.\r\n\r\n## Open Questions\r\n\r\n- How to know if the rules compiled into the tool are out of date?\r\n   - We would release a new package to nuget.org after every master merge. Customers would just take latest package version\r\n- Wouldn't a verify endpoint be easier? 🐱 \r\n\r\n## Example output - invalid\r\n\r\nExit code is 1 (the number of bad packages).\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\n\r\nINVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\nThe package TestPackage-65ed825e-dd81-4964-9599-f6a28d67171d 1.0.0 is not compliant.\r\nThere is 1 problem.\r\n  - The package metadata defines 'Not Microsoft' as one of the authors which is not allowed by policy.\r\n\r\nValid package count: 0\r\nInvalid package count: 1\r\n\r\nThe metadata validation used the following property names and JSON ruleset.\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"© Microsoft Corporation. All rights reserved.\",\r\n    \"© Microsoft Corporation. Tüm hakları saklıdır.\",\r\n    \"© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"© Microsoft Corporation. Všechna práva vyhrazena.\",\r\n    \"© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"© Microsoft Corporation. Wszelkie prawa zastrzeżone.\",\r\n    \"© Microsoft Corporation. Tous droits réservés.\",\r\n    \"© Microsoft Corporation。 保留所有权利。\",\r\n    \"© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"© корпорация Майкрософт. Все права защищены.\",\r\n    \"© Microsoft Corporation。 著作權所有，並保留一切權利。\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n\r\n## Example output - all valid\r\n\r\nExit code is 0.\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\n\r\nVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\nThe package TestPackage-9be3d65e-7aa0-40e5-9cdb-6f5dc2fd8318 1.0.0 is compliant.\r\n\r\nValid package count: 1\r\nInvalid package count: 0\r\n```\r\n\r\n## Help text\r\n\r\nExit code is -1.\r\n\r\n```\r\nNuGet.VerifyMicrosoftPackage 0.0.1-jver-verify\r\n\r\nUsage: NuGet.VerifyMicrosoftPackage [arguments] [options]\r\n\r\nArguments:\r\n  PATHS  One or more file paths to a package (.nupkg).\r\n\r\nOptions:\r\n  -v | --version            Show version information.\r\n  -? | -h | --help          Show help information.\r\n  --recursive               Evaluate wildcards recursively into child directories.\r\n  --rule-set                A path to a JSON rule set file. See the default below.\r\n  --write-default-rule-set  Write the default rule set to the provided --rule-set file path.\r\n\r\nThis tool determines if a .nupkg meets the metadata requirements for Microsoft packages\r\non nuget.org. Relative paths and wildcards in the file name are supported. Globbing and\r\nwildcards in the directory are not supported.\r\n\r\nThe default rule set used for validation is the following:\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"© Microsoft Corporation. All rights reserved.\",\r\n    \"© Microsoft Corporation. Tüm hakları saklıdır.\",\r\n    \"© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"© Microsoft Corporation. Všechna práva vyhrazena.\",\r\n    \"© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"© Microsoft Corporation. Wszelkie prawa zastrzeżone.\",\r\n    \"© Microsoft Corporation. Tous droits réservés.\",\r\n    \"© Microsoft Corporation。 保留所有权利。\",\r\n    \"© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"© корпорация Майкрософт. Все права защищены.\",\r\n    \"© Microsoft Corporation。 著作權所有，並保留一切權利。\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n"},{"Id":"11561516348","Type":"IssuesEvent","CreatedAt":"2020-02-19T23:32:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7844","RelatedDescription":"Closed issue \"Incorrect error message when PDB does not match DLL\" (#7844) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nA user wants to update their .snupkg associated with an already pushed package:\r\nhttps://www.nuget.org/packages/tusdotnet/2.2.2\r\n\r\nThere is an existing .snupkg that was accepted but subsequent attempts fail with this error:\r\n\r\n> The uploaded symbols package contains one or more pdbs that are not portable.\r\n\r\nHowever upon closer investigation, the failure is not because the PDBs are portable but because the PEReader saw that the PDB and DLL do not match.\r\n\r\nI think the error is here:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/dbd927c309005b63b82c1017ff6bfcfec96434cf/src/Validation.Symbols/SymbolsValidatorService.cs#L251\r\n\r\nThis should use the error message `ValidationIssue.SymbolErrorCode_MatchingAssemblyNotFound`.\r\n\r\n### To Reproduce\r\n\r\nUpload a snupkg with a portable PDB that matches in name but does not match according to `PEReader.TryOpenAssociatedPortablePdb`.\r\n\r\n### Expected behavior\r\n\r\nThe validation should fail with a more helpful error message.\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/94054/74369714-b2465200-4d8a-11ea-8bed-bffec4118b73.png)\r\n\r\n\r\n### Additional context\r\nAdd any other context about the problem here."},{"Id":"11548731683","Type":"IssuesEvent","CreatedAt":"2020-02-18T19:00:23","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7848","RelatedDescription":"Closed issue \"Can't publish symbols because name collision on nuget.org\" (#7848) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI can no longer publish symbols on nuget.smbsrc.net because someone published (and later delisted) a package with the same name.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Download MSI nupkg from https://dev.azure.com/heaths/public/_build/results?buildId=210&view=artifacts&type=publishedArtifacts\r\n2. Regenerate my key (it had expired), copy it, and try to publish to wither www.nuget.org (either package or symbol package) or nuget.smbsrc.net (symbol package).\r\n\r\n### Expected behavior\r\nI can publish the symbol package.\r\n\r\n### Actual behavior\r\nI get an HTTP 403 error. Seems someone published https://www.nuget.org/packages/msi, which is the name of my package for powershellgallery.com. I've been publishing symbols this way for a while, but no longer can because of a name collision on nuget.org. There was never a need to publish the package to nuget.org (it's a PowerShell module). Seems authentication and authorization shouldn't necessarily be tied together. Is there some other way?\r\n\r\nI can't seem to log into www.symbolsource.org anymore either. I can't remember account information (it's been a long time since I logged in), but http://www.symbolsource.org/Public/Account/SendPasswordMail says it requires a secure connection, but www.symbolsource.org doesn't respond via HTTPS.\r\n\r\n### Additional context\r\nAdd any other context about the problem here.\r\n\r\nLink to MSI package on PowerShell Gallery: https://www.powershellgallery.com/packages/MSI"},{"Id":"11548268252","Type":"IssuesEvent","CreatedAt":"2020-02-18T18:04:50","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7849","RelatedDescription":"Opened issue \"[2020-02-18] Deployment\" (#7849) at NuGet/NuGetGallery","RelatedBody":"### Azure Search Service\r\n\r\nChanges:\r\n- Use managed identity for KeyVault access: https://github.com/NuGet/Engineering/issues/2972\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=579684\r\n\r\n- [ ] DEV\r\n- [ ] INT\r\n- [ ] PROD\r\n\r\n### CDNRedirect service\r\n\r\nChanges:\r\n- Use KeyVault integrated certificate: https://github.com/NuGet/Engineering/issues/2995\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=580913\r\n\r\n- [x] DEV\r\n- [ ] PROD\r\n\r\n### Licenses service\r\n\r\nChanges:\r\n- Use KeyVault integrated certificate: https://github.com/NuGet/Engineering/issues/2995\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=580910\r\n\r\n- [x] DEV\r\n- [ ] PROD"},{"Id":"11532462620","Type":"IssuesEvent","CreatedAt":"2020-02-17T05:19:19","Actor":"heaths","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7848","RelatedDescription":"Opened issue \"Can't publish symbols because name collision on nuget.org\" (#7848) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI can no longer publish symbols on nuget.smbsrc.net because someone published (and later delisted) a package with the same name.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Download MSI nupkg from https://dev.azure.com/heaths/public/_build/results?buildId=210&view=artifacts&type=publishedArtifacts\r\n2. Regenerate my key (it had expired), copy it, and try to publish to wither www.nuget.org (either package or symbol package) or nuget.smbsrc.net (symbol package).\r\n\r\n### Expected behavior\r\nI can publish the symbol package.\r\n\r\n### Actual behavior\r\nI get an HTTP 403 error. Seems someone published https://www.nuget.org/packages/msi, which is the name of my package for powershellgallery.com. I've been publishing symbols this way for a while, but no longer can because of a name collision on nuget.org. There was never a need to publish the package to nuget.org (it's a PowerShell module). Seems authentication and authorization shouldn't necessarily be tied together. Is there some other way?\r\n\r\n### Additional context\r\nAdd any other context about the problem here."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11599388511","Type":"IssuesEvent","CreatedAt":"2020-02-25T02:05:15","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9218","RelatedDescription":"Opened issue \"Failing feed stops search in PM UI\" (#9218) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: VS UI\r\n\r\nNuGet version: 5.6.0\r\n\r\nVS version: Version 16.6.0 Preview 1.0 [29823.26.master]\r\n\r\nOS version: Microsoft Windows [Version 10.0.19564.1000]\r\n\r\nWorked before?\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open VS\r\n2. Navigate to Tools > Options > NuGet Package Manager > Package Sources\r\n3. Add a non existent remote folder as a NuGet Source, i.e., `\\\\imaginary-server\\imaginary-folder`\r\n4. Create any project or open an existing one.\r\n6. Right click on the project and go to \"Manage NuGet Packages...\"\r\n7. Select \"All\" in the Package Source drop-down list\r\n8. Scroll down on the package list in the \"Search\" Tab\r\n\r\n### Expected\r\n\r\nScrolling should show more package from all but the failing feed.\r\n\r\n### Actual\r\n\r\nSearch stops looking for more packages from other feeds.\r\n"},{"Id":"11599340320","Type":"IssuesEvent","CreatedAt":"2020-02-25T01:55:34","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9217","RelatedDescription":"Opened issue \"Search operations in Local folders in PM UI don't report a LoadingStatus different than Loading.\" (#9217) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: VS UI\r\n\r\nNuGet version:\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 16.4\r\n\r\nOS version: Microsoft Windows [Version 10.0.19564.1000]\r\n\r\nWorked before?\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nSearch operations in Local folders in PM UI don't report a LoadingStatus different than `Loading`.\r\n"},{"Id":"11598803900","Type":"IssuesEvent","CreatedAt":"2020-02-25T00:11:05","Actor":"loic-sharma","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9216","RelatedDescription":"Opened issue \"The \"update\" button on Package Manager UI is broken if PackageReference in \"Directory.Build.targets\"\" (#9216) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nVS UI: Version 16.6.0 Preview 1.0 [29812.224.master]\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a classlib project with the following csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n2. Add the following `Directory.Build.targets` file:\r\n\r\n```\r\n<Project>\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.1\" />\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\n3. On the Package Manager UI, update the \"Newtonsoft.Json\" package\r\n\r\n![NuGetBug](https://user-images.githubusercontent.com/737941/75202439-19b3b880-5720-11ea-99a4-0a3140eacac4.gif)\r\n\r\n4. Check the .csproj and `Directory.Build.targets` files; neither have been modified\r\n5. The PM UI claims the package was updated though! 😢"},{"Id":"11598705554","Type":"IssuesEvent","CreatedAt":"2020-02-24T23:53:16","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9169","RelatedDescription":"Closed issue \"Mono version should not be specified in yaml file \" (#9169) at NuGet/Home","RelatedBody":"We specify user capability of mono version when running test on Mac.\r\nWhen mono is upgraded, the microbuild team change the user capability to reflect the correct version, we need to change our code. \r\nIt's bad to bind our code with a specific configuration which will change frequently. "},{"Id":"11597607520","Type":"IssuesEvent","CreatedAt":"2020-02-24T21:14:45","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9080","RelatedDescription":"Closed issue \"Publish/Build/Debug resolves to an old DLL resulting in MissingMethodException\" (#9080) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/748792/publishbuilddebug-resolves-to-an-old-dll-resulting.html)._\n\n---\n[regression] [worked-in:16.2.5]\r\nWe have a web application running on .NET Framework 4.6.1 (let's call this project `A`) that has a dependent NuGet package (let's call this `B`). B targets multiple frameworks and includes `C` as a private dependency. `C.dll` is not versioned at the nuget nor assembly level.\n\nHere is what `B.csproj` looks like:\n\n```xml\n  <PropertyGroup>\n    <TargetFrameworks>netstandard2.0;net461;netcoreapp2.2</TargetFrameworks>\n    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);IncludeP2PAssets</TargetsForTfmSpecificBuildOutput>\n  </PropertyGroup>\n\n<ProjectReference Include=\"..\\C\\C.csproj\" PrivateAssets=\"All\" />\n\n<Target Name=\"IncludeP2PAssets\">\n    <ItemGroup>\n      <BuildOutputInPackage Include=\"$(OutputPath)C.dll\" />\n    </ItemGroup>\n  </Target>\n```\n\nIn the web application project (`A`) we installed `B` using the newer `PackageReference` format even though it's in an older csproj format:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"12.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n   <!-- other old csproj format stuff skipped -->\n  <PropertyGroup>\n    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>\n    <SkipValidatePackageReferences>true</SkipValidatePackageReferences>\n    <RuntimeIdentifiers>win</RuntimeIdentifiers>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"B\" Version=\"1.0.0.0\" />\n   </ItemGroup>\n</Project>\n```\nOn Visual Studio 16.2.5, all references seem to be resolved correctly (proven by decompiler). The .NET Standard version of `C.dll` is published at runtime.\n\nOn Visual Studio 16.3.0, however, the .NET Framework 4.6.1 version of `C.dll` is published at runtime and it is of a very old version, leading to `MissingMethodException`. The strange thing is this doesn't have any compile-time errors, only runtime errors.\n\nCan you please fix this behavior change from 16.2.5 to 16.3.0?\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/26/2019, 00:30 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 9/26/2019, 10:49 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"11597591034","Type":"IssuesEvent","CreatedAt":"2020-02-24T21:12:38","Actor":"terrajobst","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9215","RelatedDescription":"Opened issue \"NuGet pack should catch incorrect omitting of the dot in version numbers\" (#9215) at NuGet/Home","RelatedBody":"For .NET 5, [we're going](https://github.com/dotnet/designs/pull/92) to reuse the existing `net` moniker. Due to our new versioning scheme (fixed schedule, major bump every year) we're only five years away from .NET 10. Developers might accidentally say `net10` when they really meant `net10.0`. We're planning to follow in the footsteps of .NET Core where project files will generally use a dot, even when it's not necessary (e.g. `net5.0`) but of course this won't prevent humans from dropping the `.0` either inadvertently or for aesthetics.\r\n\r\nIt was [suggested](https://github.com/dotnet/designs/pull/92#discussion_r383463597) to handle this as part of NuGet pack.\r\n\r\nThere are several ways to deal with that:\r\n\r\n1. Generally warn when a dot is missing\r\n2. Only warn on when the TFM is >= `net5.0` (regardless of whether there is an OS flavor or not)\r\n\r\nThe (1) is more correct but will cause a lot of noise, especially in .NET Framework projects where the ambiguity is irrelevant as the platform will remain at 4.x forever. So my preference would be something more targeted. Not sure (2) is the best way to address that but it seems to hit the sweet spot."},{"Id":"11597250858","Type":"IssuesEvent","CreatedAt":"2020-02-24T20:28:42","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9070","RelatedDescription":"Closed issue \"Visual Studio 2017 Enterprise crashes at least twice per hour\" (#9070) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/437369/visual-studio-2017-enterprise-crashes-at-least-twi.html)._\n\n---\nI've had this problem on different computers and projects going back to my first use of Visual Studio in 2010.<br>This is not a computer or project specific issue, but is clearly specific to Visual Studio from the 2010 version to the latest I'm using which is 2017 Enterprise.<br>I have no extensions or addons installed.<br>The symptoms start with Visual Studio occasionally hanging or the intellisense ceasing to work for several seconds.<br>Also project references such as &quot;C++ 2015 runtime for UWP&quot; or the &quot;Microsoft Advertising SDK for XAML&quot; occasionally show yellow triangles against them as though they are no longer recognised.  I then have to right click on either item in references for Visual Studio to start recognising them again.<br>These symptoms preceed a general deterioration of Visual Studio performance which either results in it crashing completely and restarting automatically or hanging indefinately where I then have to use Task Manager to end the Visual Studio task.  Noticably recovery of files currently being editing rarely works to the point of previous editing.<br>This catastrophic failure of Visual Studio occurs at least twice per hour when I'm on a sprint, which usually means I lose 30 minutes or so work at most, however it is one of the reasons why I'm actively considering moving to another IDE such as Eclipse, Rider or MonoDevelop for my future development projects.\n\n---\n### Original Comments\n\n#### Alisa Ma [MSFT] on 1/29/2019, 00:56 AM: \n\n<p>Dear Customer,</p><p>Thanks for your feedback! In order to help us investigate this issue more accurately, could you please provide a repro projects,and a dump.</p><p>You are able to get the files with the following steps:</p><p>- Download ProcDump from <a target=\"_blank\"> https://docs.microsoft.com/en-us/sysinternals/downloads/procdump  </a>and extract to a local folder.</p><p>- Open an Administrator Command Prompt and navigate to ProcDump folder.</p><p>- Run Procdump.exe -w devenv.exe -e 1 -n 1000 -f *ArgumentException* -ma &gt; out.txt</p><p>- Launch Visual Studio and reproduce the error.</p><p>- Close Visual Studio</p><p>- ProcDump should generate some DMP files in the local directory if the exception is thrown</p><p>- Please zip the DMP file, reply to this thread and attach them using the attach / insert button</p><p>We look forward to hearing from you!</p><p>Thanks.</p>\n\n#### pythonesquespam on 2/18/2019, 05:12 PM: \n\n<p>Tried to upload last three dmp files but the upload window does nothing when I click the upload button.  The dump files are 1 Gig when zipped so perhaps such large files aren't allowed??  I uploaded a zipped out.txt file if that's any use to you.  <a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/attachments/59933-out.zip\">out.zip</a></p>\n\n#### Alisa Ma [MSFT] on 2/18/2019, 11:08 PM: \n\n<p>Dear Customer,</p><p>Thanks for your reply! We need to this dump file and compress it then attached to us. </p><p>And Dick add a solution for this issue as below, if your issue is the as him, maybe you can reference it.</p><p>Thanks.</p>\n\n#### pythonesquespam on 2/23/2019, 07:50 AM: \n\n(private comment, text removed)\n#### pythonesquespam on 2/23/2019, 08:49 AM: \n\n(private comment, text removed)\n#### Visual Studio Feedback System on 7/9/2019, 11:58 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n\n#### Dick solved on 1/28/2019, 03:00 AM, 0 votes: \n\n<p>Hello Andrew,<br><br>This looks like the problem I had in July 2018 when I installed VS 2017 because VS 2015 did no longer support UWP apps in combination with my W10 version. It took me 1,5 day to get it working. If you read the comments to my original post on<br><br><a target='_blank' href=\"https://developercommunity.visualstudio.com/content/problem/288722/visual-studio-2017-does-not-install-due-to-access.html\" target=\"_blank\">https://developercommunity.visualstudio.com/content/problem/288722/visual-studio-2017-does-not-install-due-to-access.html</a> it may help you as well.<br><br>VS installers are an absolute disaster. I won't install VS 2019 except forced and I don't even install updates for VS 2017. For almost any other software on my Pc I regularly update and it hardly ever takes more than a few minutes.</p><p>Dick</p>\n\n#### pythonesquespam solved on 3/4/2019, 05:55 PM, 0 votes: \n\n<p>I've been battling with Visual Studio since I first started using it at college in 2010.  This issue is just one of many aspects of Microsoft technologies that simply get in the way of development. I find that most of my development effort is about trying to get the technologies to even work, rather than producing the software and that's just not the best use of my time. XAML is full of inconsistencies especially with Binding and the Advert and Store SDK's don't work with anything but the simplest examples. Even testing the Store SDK is no longer possible with the latest version as it uses the live store as it's basis... ridiculous.  So I've decided my next project will use other technologies and I can get away from this awful mess that is Microsoft!</p>\n"},{"Id":"11595314230","Type":"IssuesEvent","CreatedAt":"2020-02-24T16:46:54","Actor":"StarWars999123","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9214","RelatedDescription":"Opened issue \"GeneratePackagePath Property is not kept during package update\" (#9214) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: VS UI\r\n\r\nNuGet version (x.x.x.xxx): - \r\n\r\nVS version: 16.4.5\r\n\r\nOS version: 1903 (Build 18362.628)\r\n\r\nWorked before? If so, with which NuGet version: no\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Install a nuget package to a new .net core format project.\r\n2. Add the GeneratePathProperty for the package\r\n3. Update the installed package\r\n--> The GeneratePathProperty (#4837) gets removed. It should be kept during an update, as it can only be configured manually in the .csproj files. Its very timeconsuming, when the package gets updated regularly.\r\n\r\n### Sample Project\r\nHere an example of the used package format with .NET 4.7.2:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <IsPackable>false</IsPackable>\r\n    <LangVersion>latest</LangVersion>\r\n    <RootNamespace>BingoApp</RootNamespace>\r\n    <AssemblyName>BingoApp</AssemblyName>\r\n  </PropertyGroup>\r\n<ItemGroup>\r\n    <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.15.1\" GeneratePackagePath=\"True\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n"},{"Id":"11595183589","Type":"IssuesEvent","CreatedAt":"2020-02-24T16:33:23","Actor":"rrodriguez1975","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9213","RelatedDescription":"Opened issue \"Nuget says Could not find a part of the path when compiling VB.NET solution\" (#9213) at NuGet/Home","RelatedBody":"I have the following problem explained [here](https://stackoverflow.com/questions/60335041/ncrontab-signed-3-3-2-nuget-says-could-not-find-a-part-of-the-path-when-compilin) in stackoverflow.\r\n\r\nIn short, I have Visual Studio 2013 and a project built with .NET Framework 4.5. I know the problem is the version of Nuget I have. My Nuget version is 2.12.0.817 (last version available for Visual Studio 2013) and I know this is causing the problem. This problem was resolved in Nuget version 2.12.1 but I am not able to install version 2.12.1 in Visual Studio 2013.... I install Nuget 2.12.1 from console and it says it has been installed correctly but Visual Studio continue saying I have version 2.12.0.817.....\r\n\r\nAlso I have tried the workaround explained in most sites, I mean, changing blank space in the following line by a backslash and it is not working:\r\n\r\n<PaddedSolutionDir Condition=\" '$(OS)' == 'Windows_NT'\">\"$(SolutionDir) \"</PaddedSolutionDir>\r\n\r\nby \r\n\r\n<PaddedSolutionDir Condition=\" '$(OS)' == 'Windows_NT'\">\"$(SolutionDir)\\\"</PaddedSolutionDir>\r\n\r\nPlease, could you help me?"},{"Id":"11594664640","Type":"IssuesEvent","CreatedAt":"2020-02-24T15:42:12","Actor":"dehghani-mehdi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9212","RelatedDescription":"Opened issue \"[Offline] Nuget can not resolve packages if dependency lives inside parent directory\" (#9212) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): `NuGet.exe`\r\n\r\nNuGet version (x.x.x.xxx): `5.4.0.6315`\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10\r\n\r\nWorked before? If so, with which NuGet version: No.\r\n\r\n## Detailed repro steps so we can see the same problem _I try my best_\r\n\r\n1. Put dependency package inside folder `A`\r\n2. Create folder `B` inside folder `A`\r\n3. Try to install depended package inside folder `B` using `nuget install DependedPackage -source path/to/DependedPackage.nupkg`\r\n\r\nNuGet shows this error message:\r\n\r\n> Unable to resolve dependency 'dependency package'. Source(s) used: 'A'\r\n...\r\n\r\n## Other suggested things\r\n\r\nIf I try to add `DependedPackage` inside folder `A` everything works as expected.\r\n\r\n"},{"Id":"11593934934","Type":"IssuesEvent","CreatedAt":"2020-02-24T14:30:26","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9211","RelatedDescription":"Opened issue \"Restore:  PackageSpec.Clone() creates unequal clone\" (#9211) at NuGet/Home","RelatedBody":"`PackageSpec.Clone()` can create a clone which fails an equality test with the original.\r\n\r\nTrivial example:\r\n```C#\r\nvar packageSpec = new PackageSpec();\r\nvar clone = packageSpec.Clone();\r\n\r\nAssert.True(packageSpec.Equals(clone));\r\n```\r\nThe issue is that while `PackageSpec.Clone()` creates a new `PackageSpec` and copies all properties from the original in the cloning process creates a clone which results in the clone being unequal with the original.  In particular, `Clone()` [first copies the `IsDefaultVersion` value](https://github.com/NuGet/NuGet.Client/blob/f67a6083f8a49502f52f0c50492db03452785359/src/NuGet.Core/NuGet.ProjectModel/PackageSpec.cs#L198) and [then copies the `Version` value](https://github.com/NuGet/NuGet.Client/blob/f67a6083f8a49502f52f0c50492db03452785359/src/NuGet.Core/NuGet.ProjectModel/PackageSpec.cs#L211).  However, [the `Version` setter forces `IsDefaultVersion` to `false`](https://github.com/NuGet/NuGet.Client/blob/f67a6083f8a49502f52f0c50492db03452785359/src/NuGet.Core/NuGet.ProjectModel/PackageSpec.cs#L49), so the original value of `IsDefaultVersion` is overwritten.  The order of `IsDefaultVersion` and `Version` copies is significant.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/pull/1796/files#diff-843a4408facaa3334000363c6e10e45dR197-R210 introduced this."},{"Id":"11591857735","Type":"IssuesEvent","CreatedAt":"2020-02-24T10:17:17","Actor":"v-nancyj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3204","RelatedDescription":"Closed issue \"[Test Failure] Solution Package Manager UI version combo-box gets clipped in default layout of VS\" (#3204) at NuGet/Home","RelatedBody":"**Repro Steps:**\n1. Create a new C# ConsoleApplication.\n2. Right-click the solution and select “Manage NuGet Packages for Solution…”.\n3. Click “Browse” tab and click anyone package.\n4. Look at the version combo-box on the right pane.\n\n**Expected Result:**\nThe drop-down button (on the right of the version combo-box) show correctly.\n\n**Actual Result:**\nThe drop-down button get clipped as below screenshot.\n![dropdownbuttonlostindefaultlayout](https://cloud.githubusercontent.com/assets/20632775/17096548/72d232e4-528c-11e6-9a98-7758a3fd2eb9.png)\n\n**Note:**\n1. The issue also repro on VS2015Update3 w/ NuGet 3.4.4.\n2. It doesn’t repro in the project level Package Manager UI for the same scenario.\n3. It will never repro after you resize the NuGet-Solution window to the right and repro again when you reset the window layout. Please see attached record\n[DropDownButtonLostInDefaultLayout.zip](https://github.com/NuGet/Home/files/381126/DropDownButtonLostInDefaultLayout.zip).\n"},{"Id":"11588942172","Type":"IssuesEvent","CreatedAt":"2020-02-23T23:18:37","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9198","RelatedDescription":"Closed issue \"Question: NetStandard Resolution when consuming multi-target package\" (#9198) at NuGet/Home","RelatedBody":"Given a consuming application:\r\n`<TargetFramework>netcoreapp2.1</TargetFramework>`\r\n\r\nthat has a reference to a NuGet Package that is targeting multiple netstandard frameworks:\r\n`<TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>`\r\n\r\nwould the consuming application resolve the netstandard1.3 implementation or the netstandard2.0?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-02-25T05:30:43.7120628Z","RunDurationInMilliseconds":1848}