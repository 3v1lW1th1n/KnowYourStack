{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6840049093","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:55","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Reopened issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."},{"Id":"6840048672","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:48","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/24","RelatedDescription":"Reopened issue \" .NET Standard 2.0 is final\" (#24) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n[.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md) is final. \r\n\r\nYou can now start producing .NET Standard 2.0 libraries and NuGet packages. Please use the latest [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview) as it contains many improvements that were necessary to provide a good experience.\r\n      \r\n## Details\r\n\r\n* **Bigger API Surface**: We have more than doubled the set of available APIs from **13k** in [.NET Standard 1.6](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md) to **32k** in [.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md). Most of the added APIs are .NET Framework APIs. These additions make it much easier to port existing code to .NET Standard, and, by extension, to any .NET implementation of .NET Standard, such as .NET Core 2.0 and the upcoming version of UWP.\r\n\r\n* **.NET Framework compatibility mode**: The vast majority of NuGet packages are currently still targeting .NET Framework. Many projects are currently blocked from moving to .NET Standard because not all their dependencies are targeting .NET Standard yet. That's why we added a compatibility mode that allows .NET Standard projects to depend on .NET Framework libraries as if they were compiled for .NET Standard. Of course, this may not work in all cases (for instance, if the .NET Framework binaries uses WPF), but we found that [70% of all NuGet packages on nuget.org are API compatible][video] with .NET Standard 2.0, so in practice it unblocks many projects.\r\n\r\n[video]: https://www.youtube.com/watch?v=iIlQer4LEac\r\n\r\n* **Broad platform support**. .NET Standard 2.0 is [supported on the following platforms](https://github.com/dotnet/standard/blob/master/docs/versions.md):\r\n    - .NET Framework 4.6.1\r\n    - .NET Core 2.0\r\n    - Mono 5.4\r\n    - Xamarin.iOS 10.14\r\n    - Xamarin.Mac 3.8\r\n    - Xamarin.Android 7.5\r\n    - UWP is work in progress and will ship later this year.\r\n\r\n## Tooling Prerequisites\r\n\r\nIn general, make sure you run the latest version of the tooling:\r\n\r\n* **.NET Core SDK**. You always need to install [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview). This also includes the CLI (`dotnet`) for building packages, so if you only want to use the CLI, you can stop here.\r\n* **Visual Studio**. If you want to use Visual Studio for authoring .NET Standard 2.0 libraries, you also need to install [Visual Studio 2017 15.3](https://www.visualstudio.com/vs/preview/). Make sure to use 15.3 and not an earlier version, as this release addressed a couple of key issues to provide a good experience. If you only need to consume .NET Standard 2.0 libraries, you can do that even in Visual Studio 2015 but you'll need NuGet client 3.6 or higher ([download from Nuget.org/downloads](https://www.nuget.org/downloads))\r\n* **Visual Studio for Mac**. The latest version of [Visual Studio for Mac](https://www.visualstudio.com/vs/visual-studio-mac/) supports building .NET Standard 2.0 libraries. \r\n* **Rider**. The [latest version](https://www.jetbrains.com/rider/download) also has support for .NET Standard 2.0.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nFor discussion, see https://github.com/dotnet/standard/issues/439."},{"Id":"6840048225","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:40","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/22","RelatedDescription":"Reopened issue \".NET Core Support for macOS High Sierra\" (#22) at dotnet/announcements","RelatedBody":"# .NET Core Support for macOS High Sierra\r\n\r\n## Summary\r\n\r\n.NET Core 1.x and 2.0 do not currently support macOS High Sierra (version 10.13, currently in beta) due to changes in macOS. The .NET Core team has been testing macOS High Sierra builds and has filed bugs with Apple so that the two products can work better together.\r\n\r\nWe intend to have both .NET Core 1.x and 2.0 supporting macOS High Sierra by the time Apple ships the final production release. We are hoping to ship .NET Core 2.0 RTW with High Sierra support.\r\n\r\nAs .NET Core support for macOS High Sierra is improved, this announcement will be updated with the new status.\r\n\r\n## Impact\r\n\r\n.NET Core does not work on macOS High Sierra.\r\n\r\n## Details\r\n\r\n* [dotnet/core #677](https://github.com/dotnet/core/issues/677) -- tracking bug\r\n* [dotnet/corefx #22243](https://github.com/dotnet/corefx/pull/22243) -- workaround for issue 33294006, listed below.\r\n\r\nWe have reported the following issues to Apple as part of supporting .NET Core on macOS High Sierra.\r\n\r\n> Note: The issue links can only be accessed by Apple employees.\r\n\r\n* [33275095](https://bugreport.apple.com/web/?problemID=33275095) SSL Failure: macOS 10.13 (17A291j) SecureTransport in server mode can select ciphersuites not applicable to the TLS version.\r\n\r\n    **.NET Core Note:** When hosting an [SslStream](https://docs.microsoft.com/dotnet/api/system.net.security.sslstream?view=netcore-2.0) limited to TLS 1.0 or TLS 1.1 clients other than Apple SecureTransport may fail to connect.\r\n\r\n* [33143630](https://bugreport.apple.com/web/?problemID=33143630) macOS 10.13 (17A291j) SecTrustExecute fails with no error building revocation-enabled chain against a self-issued certificate.\r\n    \r\n    **.NET Core Note:** In this situation an Apple-specific derived type of CryptographicException will be thrown with a message of “No error”.\r\n\r\n* [33294006](https://bugreport.apple.com/web/?problemID=33294006) macOS 10.13 (17A291j) libcurl changing to LibreSSL changes thread-safety model from safe to unsafe \r\n    \r\n    **.NET Core Note:** A functioning workaround is in place, but it may regress performance for parallel HTTP requests (to avoid crashes caused by the loss of thread safety).\r\n\r\n* [32948209](https://bugreport.apple.com/web/?problemID=32948209) CCCryptorReset returns kCCUnimplemented for ECB on 10.13.\r\n\r\n    **.NET Core Note:** .NET Core has worked around this regression, so it should not be user-impacting."},{"Id":"6840047669","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/17","RelatedDescription":"Reopened issue \".NET Core Preview 2\" (#17) at dotnet/announcements","RelatedBody":"Today we announce the availability of .NET Core 2.0.0 Preview .\r\n\r\n* [Download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview2-download.md)\r\n* [Getting Started](https://www.microsoft.com/net/core/preview)\r\n* [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview2.md)\r\n* [Blog](https://blogs.msdn.microsoft.com/dotnet/2017/06/28/announcing-net-core-2-0-preview-2/)\r\n\r\nPlease use [dotnet/core #711](https://github.com/dotnet/core/issues/711) for discussion and questions."},{"Id":"6840047172","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/15","RelatedDescription":"Reopened issue \".NET Framework 4.7 Docker Image Now Available\" (#15) at dotnet/announcements","RelatedBody":"## 4.7 image is now available on [Docker Hub](https://hub.docker.com/r/microsoft/dotnet-framework/).\r\n\r\n### Summary\r\n- The latest tag of the .NET Framework image now points to the 4.7 image.\r\n- The way our images layer is now different (although this shouldn’t affect anyone). Read more on the [design and discussion](https://github.com/dotnet/designs/issues/7).\r\n- Check it out with the [4.7 Docker Image Sample](https://github.com/Microsoft/dotnet-framework-docker-samples/tree/master/dotnetapp-4.7)\r\n\r\n### Feedback\r\nPlease try it out! General feedback can be logged in the [.NET Framework Docker issues](https://github.com/Microsoft/dotnet-framework-docker/issues).\r\n[Microsoft/dotnet-framework-docker #22 ](https://github.com/Microsoft/dotnet-framework-docker/issues/22) is open for discussion.\r\n"},{"Id":"6840046541","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:15","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/13","RelatedDescription":"Reopened issue \".NET Core 2.0.0 Preview 1 \" (#13) at dotnet/announcements","RelatedBody":"Today at [Build 2017](https://channel9.msdn.com/?wt.mc_id=build_hp#programGuide) we announced the availability of .NET Core 2.0.0 Preview 1.\r\n\r\n* [Download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview1-download.md)\r\n* [Getting Started](https://www.microsoft.com/net/core/preview)\r\n* [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview1.md)\r\n* [Blog](https://blogs.msdn.microsoft.com/dotnet/2017/05/10/announcing-net-core-2-0-preview-1/)\r\n\r\nPlease use [dotnet/core #640](https://github.com/dotnet/core/issues/640) for discussion and questions."},{"Id":"6840045806","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:03","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/11","RelatedDescription":"Reopened issue \".NET Designs Repository Created\" (#11) at dotnet/announcements","RelatedBody":"# .NET Designs Repository Created\r\n\r\n## Summary\r\n\r\n.NET designs now have a home on GitHub at [dotnet/designs](https://github.com/dotnet/designs). This repository and the process it uses is intended to be very similar to [dotnet/csharplang](https://github.com/dotnet/csharplang). We want to share .NET design documents and get much earlier feedback on plans.\r\n\r\n## Details\r\n\r\nThe repository was just created. You can see two designs that you can participate on. More designs will show up over time. These two designs were selected as the initial set since the current behavior for both has received significant feedback.\r\n\r\n- [.NET Core 2+ Naming and Versioning](https://github.com/dotnet/designs/issues/2)\r\n- [.NET Core 2+ Version Binding](https://github.com/dotnet/designs/issues/3)\r\n\r\nA separate repository was created for a few reasons:\r\n\r\n- .NET designs may need to be implemented in multiple repos, including runtime, framework and language repos.\r\n- .NET designs may or may not be specific to .NET Core.\r\n\r\nThanks in advance for your participation in this repository."},{"Id":"6840045368","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:57","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/10","RelatedDescription":"Reopened issue \"RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\" (#10) at dotnet/announcements","RelatedBody":"# RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\r\n\r\n## Summary\r\n\r\nThe RyuJIT JIT compiler will be used for all platform combinations for .NET Core 2.0 and beyond. JIT32 will be removed from the product. For .NET Core 1.x, RyuJIT is used for x64 and JIT32 is used for x86 chip support.\r\n\r\nWe intend for RyuJIT to be a 100% functionally compatible replacement for JIT32. RyuJIT has gone through extensive stress testing. This brings the .NET Core 32-bit product behavior much closer to the 64-bit product behavior.\r\n\r\nWe will publish more information on this change later. For now, this is just the announcement.\r\n\r\nNote: Windows is the only supported 32-bit platform for .NET Core 1.x and 2.x.\r\n\r\n### Details:\r\n\r\n- [Make RyuJIT/x86 the default x86 JIT (dotnet/coreclr #8260)](https://github.com/dotnet/coreclr/pull/8260)\r\n\r\n## Impact\r\n\r\n**Open Source** - RyuJIT is open source. JIT32 is not open source.\r\n\r\n**Single JIT Codebase** - There is now a single codebase for the CoreCLR JIT. This helps everyone who is working on platform expansion and who is investing in JIT improvements. An example is Samsung, who is investing in Linux x86 with RyuJIT x86.\r\n\r\n**Performance** - RyuJIT generally takes longer to compile than JIT32, but its optimizer can generate faster code. The performance difference may not be significant, depending on the application. In initial testing with ASP.NET, we found that the difference didn't matter. Please help us make RyuJIT faster! We will continue investing in RyuJIT performance (which often helps all architectures). If you notice performance regressions, we’re very interested to hear your results. Please contact us.\r\n\r\n**Features!** - RyuJIT has more features than JIT32. The feature gap with JIT32 will grow over time. The following features are now available to x86 workloads (due to this change): \r\n- SIMD\r\n- Fast Span&lt;T&gt; support\r\n- Inlining improvements\r\n- Devirtualization\r\n- Significantly better floating point performance\r\n- Better performance with value types (structs)\r\n\r\n**Possible compatibility concerns:** \r\n- floating-point precision\r\n- undefined behaviors (programs that happened to work that had bugs in them) especially around interop, inlining differences (GetCallerAssembly intrinsic).\r\n\r\nPlease test! If an x86 program was working in 1.x, and failing in 2.x, please report it on GitHub or at ryujit@microsoft.com. \r\n\r\nPlease see some of our past [blog posts on RyuJIT](https://blogs.msdn.microsoft.com/dotnet/tag/ryujit/) to learn more about it.\r\n\r\n## Rationale\r\n\r\nRyuJIT is the current and future platform of JIT compilation for .NET. We will use it for all platform combinations going forward. We're  more efficient as a developer community if we have a single codebase to learn, work on and improve."},{"Id":"6840041975","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/6","RelatedDescription":"Reopened issue \"Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\" (#6) at dotnet/announcements","RelatedBody":"# Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'\r\n\r\n## Summary\r\n\r\nUsing System.Net.Http 4.1.0-4.3.0 results in an exception when starting a web app that's .NET 4.6.1:\r\n* Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\r\n\r\nDetails in https://github.com/dotnet/corefx/issues/11100\r\nUpdated [System.Net.Http 4.3.1 package](https://www.nuget.org/packages/System.Net.Http/4.3.1) contains a fix and is available on nuget.\r\n\r\n## Impact\r\n\r\nHere's list of technical breaking changes caused by the solution withworkarounds for each.\r\nNote that these new behaviors are specific when running on net46 / Desktop. When you run on .NET Core, the behavior is intact.\r\n\r\n1. `HttpClientHandler.CheckCertificateRevocationList` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.CheckCertificateRevocationList` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n2. `HttpClientHandler.SslProtocols` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.SecurityProtocol` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n3. `HttpClientHandler.ServerCertificateCustomValidationCallback` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Works fine, except that the first parameter of type `HttpRequestMessage` is always `null`\r\n    * Workaround: Use `ServicePointManager.ServerCertificateValidationCallback`\r\n4. HTTP/2.0 support (introduced in System.Net.Http 4.1)\r\n    * New behavior: System.Net.Http (for net46 = Desktop) no longer supports HTTP/2.0 protocol on Windows 10.\r\n    * Workaround: Target System.Net.Http.WinHttpHandler NuGet package instead.\r\n    * Details:\r\n      * HTTP/2.0 support is part of the new CoreFx HTTP stack which on Windows is based on WinHTTP.  The original HTTP stack in .NET Framework 4.6 did not support HTTP/2.0 protocol.  If HTTP/2.0 protocol is needed, there is a separate NuGet package, System.Net.Http.WinHttpHandler which provides a new HttpClient handler. This handler is similar in features to `HttpClientHandler` (the normal default handler for HttpClient) but will support HTTP/2.0 protocol.  When using HttpClient on .NET Core runtime, the WinHttpHandler is actually built-in to HttpClientHandler.  But on .NET Framework, you need to explicitly use WinHttpHandler.\r\n      * Regardless of whether you are running using .NET Framework runtime (with WinHttpHandler) or .NET Core runtime using HttpClientHandler (or WinHttpHandler), there are additional requirements in order to get HTTP/2.0 protocol working on Windows:\r\n        * The client must be running on Windows 10 Anniversary Build (build 14393 or later).\r\n        * The `HttpRequestMessage.Version` must be explicitly set to 2.0 (the default is normally 1.1). Sample code:\r\n\r\n```c#\r\n            var handler = new WinHttpHandler();\r\n            var client = new HttpClient(handler);\r\n            var request = new HttpRequestMessage(HttpMethod.Get, \"http://www.example.com\");\r\n            request.Version = new Version(2, 0);\r\n\r\n            HttpResponseMessage response = await client.SendAsync(request);\r\n```\r\n\r\n## Rationale\r\n\r\nAfter much discussion it was decided the best way forward would be to revert the HttpClientHandler implementation in net46 build of CoreFX back to using original .NET Framework HTTP stack instead of WinHTTP (WinHttpHandler) based stack.\r\n\r\nAdditionally, we will revise the implementation of the new APIs on HttpClientHandler we introduced in 4.1.0.0 OOB package so that it works accordingly for the net46 build. [Details and tracking progress](https://github.com/dotnet/corefx/issues/11100#issuecomment-276293185).\r\n\r\n---\r\n\r\n*As a reminder, announcement threads are locked. Please use the [original issue](https://github.com/dotnet/corefx/issues/11100) for feedback and questions. Thanks!*"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6850717952","Type":"PullRequestEvent","CreatedAt":"2017-11-14T05:11:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15010","RelatedDescription":"Merged pull request \"Adding Memory CopyTo APIs\" (#15010) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/23862\r\n\r\nRelated to https://github.com/dotnet/corefx/pull/25192\r\n\r\ncc @stephentoub, @KrzysztofCwalina \r\n"},{"Id":"6850230660","Type":"PullRequestEvent","CreatedAt":"2017-11-14T02:01:31","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15018","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#15018) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6850658567","Type":"IssuesEvent","CreatedAt":"2017-11-14T04:46:12","Actor":"borrrden","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8008","RelatedDescription":"Opened issue \"dotnet crashing during xunit testing\" (#8008) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n`dotnet xunit -Verbose`\r\n\r\nUnfortunately, this appears to be environmental, but I have no idea what is causing it thanks to a stack trace full of question marks.  If I run unit tests on [https://github.com/couchbase/couchbase-lite-net/tree/feature/api-v2/src/Couchbase.Lite.Tests.NetCore](my testing project) the dotnet process almost immediately crashes (after one test, no matter which test is run) on a macOS machine (10.12.6).  \r\n\r\n## Expected  behavior\r\n\r\nAs on other mac machines, the tests should run normally\r\n\r\n## Actual behavior\r\n\r\nOutput\r\n\r\n> Detecting target frameworks in Couchbase.Lite.Tests.NetCore.Source.csproj...\r\nBuilding for framework netcoreapp1.0...\r\n  Couchbase.Lite -> /Users/borrrden/Development/couchbase-lite-net/src/Couchbase.Lite/bin/Debug/netstandard1.4/Couchbase.Lite.dll\r\n  Couchbase.Lite.Support.NetDesktop -> /Users/borrrden/Development/couchbase-lite-net/src/Couchbase.Lite.Support.NetDesktop/bin/Debug/netstandard1.4/Couchbase.Lite.Support.NetDesktop.dll\r\n  Couchbase.Lite.Tests.NetCore.Source -> /Users/borrrden/Development/couchbase-lite-net/src/Couchbase.Lite.Tests.NetCore/bin/Debug/netcoreapp1.0/Couchbase.Lite.Tests.NetCore.dll\r\nRunning .NET Core tests for framework netcoreapp1.0...\r\nxUnit.net Console Runner (64-bit .NET Core 4.6.25714.02)\r\n  Discovering: Couchbase.Lite.Tests.NetCore\r\n  Discovered:  Couchbase.Lite.Tests.NetCore\r\n  Starting:    Couchbase.Lite.Tests.NetCore\r\n    Test.FragmentTest.TestNonDictionaryFragmentSetObject\r\n\r\nThe last line varies by whatever gets chosen first, and then [this crash](https://gist.github.com/borrrden/f906622ba8a97840f5de4da736a76f3a) happens.\r\n\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6850467050","Type":"IssuesEvent","CreatedAt":"2017-11-14T03:26:01","Actor":"jmarolf","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7704","RelatedDescription":"Closed issue \"CLI: namespace error on fresh VB project\" (#7704) at dotnet/cli","RelatedBody":"@jcouv commented on [Fri Sep 22 2017](https://github.com/dotnet/roslyn/issues/22292)\n\nRepro:\r\n\r\n1. `mkdir 22227-cli-vb`\r\n2. `cd 22227-cli-vb`\r\n3. `dotnet new console --language=vb`\r\n4. `dotnet build` produces the namespace error below\r\n\r\n```\r\n> dotnet --version\r\n2.0.2-vspre-006949\r\n```\r\n\r\n```\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nvbc : error BC30113: '22227-cli-vb' is not a valid name and cannot be used as the root namespace name. [D:\\issues\\22227-cli-vb\\22227-cli-vb.vbproj]\r\n\r\nBuild FAILED.\r\n\r\nvbc : error BC30113: '22227-cli-vb' is not a valid name and cannot be used as the root namespace name. [D:\\issues\\22227-cli-vb\\22227-cli-vb.vbproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/22227\n\n---\n\n@am11 commented on [Fri Sep 22 2017](https://github.com/dotnet/roslyn/issues/22292#issuecomment-331551793)\n\nDoes vb.exe by design considers the directory name to be the root namespace unless we explicitly add normalized name in `<RootNamespace>_22227_cli_vb</RootNamespace>` in vbproj?\r\n\r\ncsc doesn't seem to rely on dirname, even when there is no namespace in the program.cs code, actual dirname has invalid (hyphen) character and `<RootNamespace>` is set to `22227-cli-vb` (with same invalid chars) in csproj.\r\n\r\nIf it's not a breaking change, would be cool if vb.exe and csc.exe behave the same way.\r\n\n\n---\n\n@jcouv commented on [Fri Sep 22 2017](https://github.com/dotnet/roslyn/issues/22292#issuecomment-331556102)\n\nIt looks like the problem is not with `vbc.exe`, but with the arguments it receives. If the `vbproj` file is named A, then there is a `/rootnamespace:A` command-line option.\r\n\r\nI'll move the issue to the CLI repo.\n\n"},{"Id":"6850454915","Type":"IssuesEvent","CreatedAt":"2017-11-14T03:21:26","Actor":"JingLMalan","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8007","RelatedDescription":"Opened issue \"Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly '/Users/liangjingtang/Documents/workspace/program/net./myApp/bin/Debug/netcoreapp2.0/myApp.dll'. The system cannot find the file specified.\" (#8007) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI install dotnet platform, and it succeed.\r\n`JingMalans-MacBook-Pro:myApp liangjingtang$ dotnet --version\r\n2.0.2`\r\nFirst step: I create a new project: \r\n`dotnet new console -o myApp\r\ncd myApp`\r\nIt also restores succeeded.\r\nThen: I build this test project.\r\n`dotnet build`\r\nIt also tells me that Build succeeded.\r\nAt last: I run it.\r\n`dotnet run`\r\nmessage:\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly '/Users/liangjingtang/Documents/workspace/program/net./myApp/bin/Debug/netcoreapp2.0/myApp.dll'. The system cannot find the file specified.\r\n\r\nWhat's the matter with it?\r\n## Expected  behavior\r\nRun\r\n## Actual behavior\r\nUnhandled Exception\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6850368435","Type":"PullRequestEvent","CreatedAt":"2017-11-14T02:50:01","Actor":"javiercn","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8006","RelatedDescription":"Opened pull request \"[WIP] ASP.NET Core HTTPS development certificate support\" (#8006) at dotnet/cli","RelatedBody":"Hey @livarcocc. I've put together a PR based on our conversation on Friday. There are a few small issues to figure out but I think the general approach is ok.\r\n\r\nAdded support for generating the HTTPS development certificate on the CLI first run experience.\r\nThere are a bunch of open issues:\r\n* How/where to put the certificate generation component. (For this proof of concept I just inlined it, but we need to figure out the engineering to determine where to house the component and how to share it with the CLI).\r\n* Add tests related to the functionality. (I'm just putting it all together to validate the experience).\r\n* The implementation needs to live in dotnet, as it is netcoreapp2.0 (I didn't want to change the target framework of Microsoft.DotNet.Configurer nor cross-compile unless you tell me otherwise).\r\n* Review messages shown to the user."},{"Id":"6849561790","Type":"IssuesEvent","CreatedAt":"2017-11-13T22:34:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8003","RelatedDescription":"Closed issue \"cibuild fails on dotnet restore\" (#8003) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n./cibuild.sh --target Mono\r\n\r\n## Expected  behavior\r\nBuild succeeds\r\n\r\n## Actual behavior\r\n```\r\nInstalling dotnet cli...\r\nRestoring BuildTools version 1.0.27-prerelease-00927-05...\r\nFailed to create prime the NuGet cache. restore failed with: 1\r\nERROR: Could not restore build tools correctly. See '/home/bmishkania/msbuild-tar/msbuild-15.4.8.50001/init-tools.log' for more details.1\r\n```\r\nSnippet from init-tools.log:\r\n```\r\nlog  : Installing Microsoft.NETCore.App 1.0.1.\r\nerror: Access to the path '/home/bmishkania/.nuget/packages/microsoft.netcore.jit/1.0.4/rhs2yspr.3a2' is denied.\r\nerror:   Bad file descriptor\r\n```\r\nThat is a 0-byte file. The permissions on that file are `-rwxr--r--` and I am the owner. When I run cibuild again, it fails on the same issue, but with a different filename (e.g. `232zklpc.su5`).\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.0-preview3-003686)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview3-003686\r\n Commit SHA-1 hash:  038fb6fbae\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6849389339","Type":"IssuesEvent","CreatedAt":"2017-11-13T21:54:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7907","RelatedDescription":"Closed issue \"ItRestoresLibToSpecificDirectory failed in CI\" (#7907) at dotnet/cli","RelatedBody":"https://ci.dot.net/job/dotnet_cli/job/master/job/debug_centos7.1_x64_prtest/1626/testReport/junit/(root)/(empty)/Microsoft_DotNet_Restore_Tests_GivenThatIWantToRestoreApp_ItRestoresLibToSpecificDirectory/\r\n\r\n```\r\n  MESSAGE:\r\n                                        Expected command to pass but it did not.\r\nFile Name: /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/bin/2/linux-x64/dotnet/dotnet\r\nArguments: restore  --configfile /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/NuGet.Config --packages \"pkgs\" --disable-parallel\r\nWorkingDir:: /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-restore.Tests/ItRestoresLibToSpecificDirectory/temp\r\nExit Code: 134\r\nStdOut:\r\n  Restoring packages for /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-restore.Tests/ItRestoresLibToSpecificDirectory/temp/temp.csproj...\r\n  Installing NETStandard.Library 2.0.1.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Generating MSBuild file /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-restore.Tests/ItRestoresLibToSpecificDirectory/temp/obj/temp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-restore.Tests/ItRestoresLibToSpecificDirectory/temp/obj/temp.csproj.nuget.g.targets.\r\n  Restore completed in 1.3 sec for /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/bin/3/linux-x64/test/dotnet-restore.Tests/ItRestoresLibToSpecificDirectory/temp/temp.csproj.\r\nStdErr:\r\n\r\n\r\n                                        +++++++++++++++++++\r\n                                        STACK TRACE:\r\n                                           at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)\r\n   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)\r\n   at Microsoft.DotNet.Tools.Test.Utilities.CommandResultAssertions.Pass() in /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/test/Microsoft.DotNet.Tools.Tests.Utilities/Assertions/CommandResultAssertions.cs:line 30\r\n   at Microsoft.DotNet.Restore.Tests.GivenThatIWantToRestoreApp.ItRestoresLibToSpecificDirectory() in /mnt/resource/j/workspace/dotnet_cli/master/debug_centos7.1_x64_prtest/test/dotnet-restore.Tests/GivenThatIWantToRestoreApp.cs:line 62\r\n```"},{"Id":"6848965825","Type":"IssuesEvent","CreatedAt":"2017-11-13T20:21:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8004","RelatedDescription":"Closed issue \"dotnet publish solution with ARM template project fails\" (#8004) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a VS 2017 solution with an Azure Resource Group project and add an empty ARM template.\r\n\r\nRun the following command:\r\n`dotnet publish [location of solution] -c release -o [output directory] --verbosity normal`\r\n(my example: `dotnet publish C:\\Temp\\buildtest\\buildtest\\buildtest.sln -c release -o c:\\temp\\build --verbosity normal`)\r\n\r\nEven though there is no .NET Core project included, these steps will reproduce the problem of a larger scale solution. \r\n\r\n## Expected  behavior\r\nThe publish step succeeds, no application is published. (As an ARM template is Azure specific and there is no .NET Core application code.)\r\n\r\n## Actual behavior\r\nThe publish step fails with the following error:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.0.2\\Microsoft.Common.CurrentVersion.targets(3845,5): error MSB3030: Could not copy the file \"obj\\Release\\TestArm.exe\" because it was not found. [C:\\Temp\\buildtest\\buildtest\\TestArm\\TestArm.deployproj]\r\n\r\nThe targets file contains a ClickOnce section at the mentioned location:\r\n```\r\n<!-- Copy the application executable from Obj folder to app.publish folder.\r\n    This is being done to avoid Windows Forms designer memory issues that can arise while operating directly on files located in Obj directory. -->\r\n    <Copy\r\n      SourceFiles=\"@(_DeploymentManifestEntryPoint)\"\r\n      DestinationFolder=\"$(PublishDir)\">\r\n\r\n      <Output TaskParameter=\"DestinationFiles\" ItemName=\"_DeploymentClickOnceApplicationExecutable\" />\r\n    </Copy>\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6848933087","Type":"PullRequestEvent","CreatedAt":"2017-11-13T20:14:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8002","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25912-02 (master)\" (#8002) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6848931462","Type":"PullRequestEvent","CreatedAt":"2017-11-13T20:14:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7974","RelatedDescription":"Merged pull request \"Updating the version for TestPlatform\" (#7974) at dotnet/cli","RelatedBody":"Includes branding changes\r\n\r\nDONOT complete the pull request unless signed off by @Faizan2304 \r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6848751190","Type":"IssuesEvent","CreatedAt":"2017-11-13T19:36:27","Actor":"JanEggers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/580","RelatedDescription":"Closed issue \"Visual Studio uses netstandard1.3  instead of net452 when consumed by a net461 project\" (#580) at dotnet/standard","RelatedBody":"i am contributing to a library https://github.com/chkr1011/MQTTnet this library targets netstandard1.3 and net452.\r\n\r\nrecently we get complaints by consumers of the library that we have added so many dependencies.\r\n\r\nif a project targeting net461 all dependencies that are required for netstandard 1.3 are forced on that project. \r\n\r\nwhy is that the case?\r\n\r\nMy understanding is that visual studio should use net452 dlls when targeting net462 not netstandard1.3 + added polyfill dependencies\r\n\r\nif this issue is in the wrong place feel free to move it where it belongs i didnt know a better place to start with.\r\n\r\n"},{"Id":"6843530945","Type":"IssuesEvent","CreatedAt":"2017-11-12T16:15:18","Actor":"stephentoub","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/582","RelatedDescription":"Closed issue \"Generic Enum.Parse in netstandard 2.0\" (#582) at dotnet/standard","RelatedBody":"Yesterday I moved some code written under NetCoreApp2.0 into a NetStandard2.0 classlib and experienced that my calls to `Enum.Parse<MyType>(myValue)` failed to build. \r\n\r\nIs there a specific reason for the generic version of Enum.Parse not being present in netstd?"},{"Id":"6843309735","Type":"IssuesEvent","CreatedAt":"2017-11-12T13:58:58","Actor":"HenrikTP","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/582","RelatedDescription":"Opened issue \"Generic Enum.Parse in netstandard 2.0\" (#582) at dotnet/standard","RelatedBody":"Yesterday I moved some code written under NetCoreApp2.0 into a NetStandard2.0 classlib and experienced that my calls to Enum.Parse<MyType>(myValue) failed to build. \r\n\r\nIs there a specific reason for the generic version of Enum.Parse not being present in netstd?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6850717966","Type":"IssuesEvent","CreatedAt":"2017-11-14T05:11:56","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23862","RelatedDescription":"Closed issue \"Productizing APIs for {ReadOnly}Memory<T> and friends\" (#23862) at dotnet/corefx","RelatedBody":"**Open issues to resolve as part of productizing:**\r\n1. We changed the AsSpan() method into an abstract property named Span.\r\n   - When do we intend to use properties versus methods for span/memory related conversions?\r\n2. Should we add the \"bulk\" operations that are available on Span\\<T\\> to Memory\\<T\\> as well such as the ones listed below:\r\n   - Where would the extension methods for Memory go? Its own MemoryExtensions class like SpanExtensions or should we merge them both into one? Given these are extension methods (and the classes won't appear in user code), I would say they should go in separate MemoryExtensions class.\r\n```C# \r\n// instance methods\r\npublic struct Memory<T> {\r\n  public void CopyTo(Memory<T> destination);\r\n  public bool TryCopyTo(Memory<T> destination);\r\n  public void Fill(T value);\r\n  public void Clear();\r\n}\r\npublic struct ReadOnlyMemory<T> {\r\n  public void CopyTo(Memory<T> destination);\r\n  public bool TryCopyTo(Memory<T> destination);\r\n}\r\n// extension methods\r\npublic static class MemoryExtensions {\r\n  public static int IndexOf<T>(this Memory<T> memory, T value);\r\n  public static int IndexOf<T>(this Memory<T> memory, ReadOnlyMemory<T> value);\r\n  public static int IndexOf<T>(this ReadOnlyMemory<T> memory, T value);\r\n  public static int IndexOf<T>(this ReadOnlyMemory<T> memory, ReadOnlyMemory<T> value);\r\n  public static bool SequenceEqual<T>(this Memory<T> first, ReadOnlyMemory<T> second);\r\n  public static bool SequenceEqual<T>(this ReadOnlyMemory<T> first, ReadOnlyMemory<T> second);\r\n  public static void CopyTo<T>(this T[] array, Memory<T> destination);\r\n  public static Memory<T> AsMemory<T>(this T[] array);\r\n  public static Memory<T> AsMemory<T>(this ArraySegment<T> arraySegment);\r\n  public static ReadOnlyMemory<T> AsReadOnlyMemory<T>(this T[] array);\r\n  public static ReadOnlyMemory<T> AsReadOnlyMemory<T>(this ArraySegment<T> arraySegment);\r\n}\r\n```\r\n\r\n\r\n<details> \r\n  <summary>Here are the Memory APIs that have already gone through API review</summary>\r\n\r\nThey were added here:\r\n- https://github.com/dotnet/coreclr/pull/13583 (mscorlib)\r\n- https://github.com/dotnet/corefx/pull/23701 (System.Memory)\r\n- https://github.com/dotnet/corefx/pull/23841 (System.Runtime)\r\n\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public struct Memory<T>\r\n    {\r\n        public static Memory<T> Empty { get; }\r\n        public Memory(T[] array);\r\n        public Memory(T[] array, int start, int length);\r\n        public bool IsEmpty { get; }\r\n        public int Length { get; }\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public override bool Equals(object obj);\r\n        public bool Equals(Memory<T> other);\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public override int GetHashCode();\r\n        public static implicit operator Memory<T>(T[] array);\r\n        public static implicit operator Memory<T>(ArraySegment<T> arraySegment);\r\n        public static implicit operator ReadOnlyMemory<T>(Memory<T> memory);\r\n        public Memory<T> Slice(int start);\r\n        public Memory<T> Slice(int start, int length);\r\n        public Span<T> Span { get;}\r\n        public unsafe Buffers.MemoryHandle Retain(bool pin = false);\r\n        public T[] ToArray();\r\n        public bool TryGetArray(out ArraySegment<T> arraySegment);\r\n    }\r\n    public struct ReadOnlyMemory<T>\r\n    {\r\n        public static ReadOnlyMemory<T> Empty { get;}\r\n        public ReadOnlyMemory(T[] array);\r\n        public ReadOnlyMemory(T[] array, int start, int length);\r\n        internal ReadOnlyMemory(Buffers.OwnedMemory<T> owner, int index, int length);\r\n        public bool IsEmpty { get;}\r\n        public int Length { get;}\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public override bool Equals(object obj);\r\n        public bool Equals(ReadOnlyMemory<T> other);\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public override int GetHashCode();\r\n        public static implicit operator ReadOnlyMemory<T>(T[] array);\r\n        public static implicit operator ReadOnlyMemory<T>(ArraySegment<T> arraySegment);\r\n        public ReadOnlyMemory<T> Slice(int start);\r\n        public ReadOnlyMemory<T> Slice(int start, int length);\r\n        public ReadOnlySpan<T> Span { get;}\r\n        public unsafe Buffers.MemoryHandle Retain(bool pin = false);\r\n        public T[] ToArray();\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public bool DangerousTryGetArray(out ArraySegment<T> arraySegment);\r\n    }\r\n}\r\n```\r\n\r\n\r\n```C#\r\nnamespace System.Buffers\r\n{\r\n    public unsafe struct MemoryHandle : IDisposable \r\n    {\r\n        public MemoryHandle(IRetainable owner, void* pointer = null, GCHandle handle = default(GCHandle));\r\n        public void* Pointer { get; }\r\n        public bool HasPointer { get; }\r\n        public void Dispose();\r\n    }\r\n\r\n    public interface IRetainable \r\n    {\r\n        bool Release();\r\n        void Retain();\r\n    }\r\n\r\n    public abstract class OwnedMemory<T> : IDisposable, IRetainable \r\n    {\r\n        public Memory<T> Memory { get; }\r\n        public abstract bool IsDisposed { get; }\r\n        protected abstract bool IsRetained { get; }\r\n        public abstract int Length { get; }\r\n        public abstract Span<T> Span { get; }\r\n        public void Dispose();\r\n        protected abstract void Dispose(bool disposing);\r\n        public abstract MemoryHandle Pin();\r\n        public abstract bool Release();\r\n        public abstract void Retain();\r\n        protected internal abstract bool TryGetArray(out ArraySegment<T> arraySegment);\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n(https://github.com/dotnet/corefx/blob/master/src/System.Memory/ref/System.Memory.cs#L149)\r\n\r\ncc @weshaggard, @KrzysztofCwalina, @shiftylogic, @stephentoub, @terrajobst, @karelz, @jkotas, @davidfowl "},{"Id":"6850366591","Type":"PullRequestEvent","CreatedAt":"2017-11-14T02:49:20","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25124","RelatedDescription":"Merged pull request \"Add foreach support to Span and ReadOnlySpan\" (#25124) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/14922\r\n\r\ncc: @jkotas, @ahsonkhan, @KrzysztofCwalina, @VSadov "},{"Id":"6850141405","Type":"PullRequestEvent","CreatedAt":"2017-11-14T01:30:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25233","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx to prerelease-02213-01, preview1-25914-01, preview1-25913-03, respectively (master)\" (#25233) at dotnet/corefx","RelatedBody":""},{"Id":"6850132443","Type":"IssuesEvent","CreatedAt":"2017-11-14T01:27:42","Actor":"nshibano","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25213","RelatedDescription":"Closed issue \"Interlocked.Read x100 slowdown in some condition\" (#25213) at dotnet/corefx","RelatedBody":"Interlocked.Read usually takes ~10 nanoseconds, but in some unconfirmed condition it takes ~1000 nanoseconds.\r\n\r\nThis is F# code I used to measure Interlocked.Read speed. (Executing this code on your machine will not reproduce the issue. Please read below section.)\r\n\r\n```\r\nopen System\r\nopen System.Diagnostics\r\nopen System.Threading\r\n// Opening other proprietary module\r\n\r\n[<EntryPoint>]\r\nlet main argv =\r\n\r\n    // Other proprietary definitions here\r\n\r\n    let counter = ref 0L\r\n    while true do\r\n        let sw = Stopwatch.StartNew()\r\n        let n = 1000000\r\n        for i = 1 to n do\r\n            Interlocked.Read(counter) |> ignore\r\n        sw.Stop()\r\n        let t = int (1e9 * float sw.ElapsedTicks / float Stopwatch.Frequency / float n)\r\n        Console.WriteLine(sprintf \"%d (ns)\" t)\r\n        Console.ReadKey() |> ignore\r\n\r\n    // Other proprietary definitions here\r\n\r\n    0\r\n```\r\nThis is output from process in normal state.\r\n```\r\n9 (ns)\r\n9 (ns)\r\n9 (ns)\r\n9 (ns)\r\n```\r\n\r\nThis is output from process in erroneous state.\r\n```\r\n762 (ns)\r\n734 (ns)\r\n728 (ns)\r\n```\r\n\r\n# Difficulty in reproducing\r\n\r\nI couldn't reproduce this issue in small code.  Currently this issue only reproduced in following condition.\r\n\r\n- One individual machine (Ryzen 5 1600X CPU, Windows 10)\r\n- Linked with other proprietary codes (I can not share it here. Sorry.)\r\n- Release build\r\n- Without debugger attached\r\n- With some random factor (reproduces with ~70% possibility for process launch)\r\n- Once process enters erroneous state, it continues until process terminates\r\n\r\nEven trivial change in code (removing unused code, changing length of unused string constant) makes not able to reproduce this issue. So I suspect this issue is related to low-level things such as memory layout in the process.\r\n"},{"Id":"6850089160","Type":"IssuesEvent","CreatedAt":"2017-11-14T01:12:57","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25232","RelatedDescription":"Opened issue \"Move RandomNumberGenerator to coreclr\" (#25232) at dotnet/corefx","RelatedBody":"There are many cases where RandomNumberGenerator needs to be used. Currently it requires pulling in whole System.Security.Cryptography.Algorithms. It would be useful to have it defined in coreclr to avoid this dependency.\r\n\r\ncc: @bartonjs @morganbr "},{"Id":"6850011938","Type":"PullRequestEvent","CreatedAt":"2017-11-14T00:46:55","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25231","RelatedDescription":"Opened pull request \"Remove some unreachable errors from Microsoft.CSharp\" (#25231) at dotnet/corefx","RelatedBody":"* Remove `Error.BindBinaryOperatorRequireTwoArguments()`\r\n\r\n`BindBinaryOperation` is only called by `DispatchPayload`, which is only called by `RuntimeBinder.BindCore`, which is only called by `RuntimeBinder.Bind`, which is only called with a `CSharpBinaryOperationBinder` as the first argument from `CSharpBinaryOperationBinder.FallbackBinaryOperation` which passes a fixed 2-element array. Anything but 2-elements is hence impossible.\r\n\r\nInclude tests that try to pass an different number, which throw in the `DynamicMetaObjectBinder` base.\r\n\r\n* Remove `Error.BindUnaryOperatorRequireOneArgument()`\r\n\r\n`BindUnaryOperation` is only called by `DispatchPayload`, which is only called by `RuntimeBinder.BindCore`, which is only called by `RuntimeBinder.Bind`, which is only called with a `CSharpUnaryOperationBinder` as the first argument from `CSharpUnaryOperationBinder.FallbackBinaryOperation` which passes a fixed 1-element array. Anything but 1 element is hence impossible.\r\n\r\n* Remove `Error.BindBinaryAssignmentRequireTwoArguments()`\r\n\r\n`BindUnaryOperation` is only called by `CSharpSetIndexBinder.DispatchPayload` or `CSharpSetMemberBinder.DispatchPayload`.\r\n\r\n`CSharpSetMemberBinder.DispatchPayload` will only be calling with a fixed 2-element array. `CSharpSetIndexBinder.DispatchPayload` will only be called with an array with at least 3 elements.\r\n\r\nAnything but with fewer than 2 elements is hence impossible.\r\n\r\n* Remove `Error.BindRequireArguments()`\r\n\r\nAll calls include the target in the arguments, some include more, so there's never fewer than one `arg`.\r\n\r\n* Remove check that payload to `RuntimeBinder.Bind` is `ICSharpBinder`\r\n\r\nCall always traces back to an `ICSharpBinder` implementation passing this so can never not be so."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6850692238","Type":"IssuesEvent","CreatedAt":"2017-11-14T05:00:54","Actor":"MkazemAkhgary","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23157","RelatedDescription":"Opened issue \"add struct as file template.\" (#23157) at dotnet/roslyn","RelatedBody":"you can create new class or interface when creating new file. why not list struct for sake of completeness?"},{"Id":"6850561921","Type":"PullRequestEvent","CreatedAt":"2017-11-14T04:03:16","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23156","RelatedDescription":null,"RelatedBody":"Cci.ICustomModifier is an unnecessary internal interface that provides\r\nno advantages over using the CustomModifer base class that Roslyn\r\nalready supports. Perf profiles showed that there was a non-trivial\r\namount of time during compilation spent working with this type.\r\n\r\nResults of benchmarking:\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 1 (10.0.14393)\r\nProcessor=Intel Xeon CPU E5645 2.40GHz, ProcessorCount=24\r\nFrequency=2337892 Hz, Resolution=427.7358 ns, Timer=TSC\r\n.NET Core SDK=2.1.1-preview-007094\r\n  [Host]     : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n\r\n```\r\n |   Method | Commit |    Mean |    Error |   StdDev |\r\n |--------- |------- |--------:|---------:|---------:|\r\n | **TestEmit** |   **HEAD** | **1.054 s** | **0.0172 s** | **0.0161 s** |\r\n | **TestEmit** |  **HEAD^** | **1.073 s** | **0.0192 s** | **0.0180 s** |"},{"Id":"6850561838","Type":"PullRequestEvent","CreatedAt":"2017-11-14T04:03:15","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23156","RelatedDescription":"Closed pull request \"Remove use of Cci.ICustomModifier\" (#23156) at dotnet/roslyn","RelatedBody":"Cci.ICustomModifier is an unnecessary internal interface that provides\r\nno advantages over using the CustomModifer base class that Roslyn\r\nalready supports. Perf profiles showed that there was a non-trivial\r\namount of time during compilation spent working with this type.\r\n\r\nResults of benchmarking:\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 1 (10.0.14393)\r\nProcessor=Intel Xeon CPU E5645 2.40GHz, ProcessorCount=24\r\nFrequency=2337892 Hz, Resolution=427.7358 ns, Timer=TSC\r\n.NET Core SDK=2.1.1-preview-007094\r\n  [Host]     : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n\r\n```\r\n |   Method | Commit |    Mean |    Error |   StdDev |\r\n |--------- |------- |--------:|---------:|---------:|\r\n | **TestEmit** |   **HEAD** | **1.054 s** | **0.0172 s** | **0.0161 s** |\r\n | **TestEmit** |  **HEAD^** | **1.073 s** | **0.0192 s** | **0.0180 s** |"},{"Id":"6850072162","Type":"PullRequestEvent","CreatedAt":"2017-11-14T01:07:08","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23156","RelatedDescription":"Opened pull request \"Remove use of Cci.ICustomModifier\" (#23156) at dotnet/roslyn","RelatedBody":"Cci.ICustomModifier is an unnecessary internal interface that provides\r\nno advantages over using the CustomModifer base class that Roslyn\r\nalready supports. Perf profiles showed that there was a non-trivial\r\namount of time during compilation spent working with this type.\r\n\r\nResults of benchmarking:\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 1 (10.0.14393)\r\nProcessor=Intel Xeon CPU E5645 2.40GHz, ProcessorCount=24\r\nFrequency=2337892 Hz, Resolution=427.7358 ns, Timer=TSC\r\n.NET Core SDK=2.1.1-preview-007094\r\n  [Host]     : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n\r\n```\r\n |   Method | Commit |    Mean |    Error |   StdDev |\r\n |--------- |------- |--------:|---------:|---------:|\r\n | **TestEmit** |   **HEAD** | **1.054 s** | **0.0172 s** | **0.0161 s** |\r\n | **TestEmit** |  **HEAD^** | **1.073 s** | **0.0192 s** | **0.0180 s** |"},{"Id":"6850015861","Type":"IssuesEvent","CreatedAt":"2017-11-14T00:48:11","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23155","RelatedDescription":"Opened issue \"inline temporary variable creates invalid output\" (#23155) at dotnet/roslyn","RelatedBody":"Relevant code: https://github.com/mrexodia/AStyleHelper/blob/e44405801ed92e945672a10b9e1b49f1ad472f26/AStyleHelper/AStyleHelper.cs#L29\n\nIf you use the &quot;inline temporary variable&quot; feature it will propose invalid output:\n\nhttps://i.imgur.com/D2w3XV1.png\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/144318/inline-temporary-variable-creates-invalid-output.html\nVSTS ticketId: 519940_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"6849997340","Type":"IssuesEvent","CreatedAt":"2017-11-14T00:42:01","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23154","RelatedDescription":"Opened issue \"System.NullReferenceException is thrown for dynamic object member initializer\" (#23154) at dotnet/roslyn","RelatedBody":"```\r\n        [CompilerTrait(CompilerFeature.IOperation)]\r\n        [Fact]\r\n        public void ObjectCreationWithDynamicMemberInitializer_01()\r\n        {\r\n            string source = @\"\r\nclass A\r\n{\r\n    dynamic this[int x, int y]\r\n    {\r\n        get\r\n        {\r\n            return new A();\r\n        }\r\n    }\r\n\r\n    dynamic this[string x, string y]\r\n    {\r\n        get\r\n        {\r\n            throw null;\r\n        }\r\n    }\r\n\r\n    int X, Y, Z;\r\n\r\n    static void Main()\r\n    {\r\n        dynamic x = 1;\r\n        new A {/*<bind>*/[y: x, x: x] = { X = 1, Y = 1, Z = 1 }/*</bind>*/ };\r\n    }\r\n}\r\n\";\r\n            string expectedOperationTree = @\"\r\n\";\r\n            var expectedDiagnostics = DiagnosticDescription.None;\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest<AssignmentExpressionSyntax>(source, expectedOperationTree, expectedDiagnostics);\r\n        }\r\n\r\n```\r\n\r\nObserved:\r\n```\r\nTest 'Microsoft.CodeAnalysis.CSharp.UnitTests.IOperationTests.ObjectCreationWithDynamicMemberInitializer_01' failed: Microsoft.CodeAnalysis.ThrowingTraceListener+DebugAssertFailureException : System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateBoundObjectInitializerMemberOperation(BoundObjectInitializerMember boundObjectInitializerMember)\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateInternal(BoundNode boundNode)\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.<Create>b__3_0(BoundNode n)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.Create(BoundNode boundNode)\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.<>c__DisplayClass49_0.<CreateBoundMemberInitializerOperation>b__0()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.CodeAnalysis.Operations.LazyMemberInitializerExpression.get_InitializedMemberImpl()\r\n   at Microsoft.CodeAnalysis.Operations.BaseMemberInitializerExpression.get_InitializedMember()\r\n   at Microsoft.CodeAnalysis.Operations.BaseMemberInitializerExpression.<get_Children>d__6.MoveNext()\r\n   at Microsoft.CodeAnalysis.Operations.OperationExtensions.<Descendants>d__3.MoveNext()\r\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetOperationCore(SyntaxNode node, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.SemanticModel.GetOperation(SyntaxNode node, CancellationToken cancellationToken)\r\n\r\n\tat Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)\r\n\tat System.Diagnostics.TraceListener.Fail(String message)\r\n\tat System.Diagnostics.TraceInternal.Fail(String message)\r\n\tat System.Diagnostics.Debug.Assert(Boolean condition, String message)\r\n\tat Microsoft.CodeAnalysis.SemanticModel.GetOperation(SyntaxNode node, CancellationToken cancellationToken)\r\n\tat Microsoft.CodeAnalysis.Operation.SearchParentOperation()\r\n\tat Microsoft.CodeAnalysis.Operation.get_Parent()\r\n\tat Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.ValidateIOperations(Func`1 createCompilation)\r\n\tat Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateCompilation(IEnumerable`1 trees, IEnumerable`1 references, CSharpCompilationOptions options, String assemblyName)\r\n\tat Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateStandardCompilation(IEnumerable`1 trees, IEnumerable`1 references, CSharpCompilationOptions options, String assemblyName)\r\n\tat Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateStandardCompilation(String text, IEnumerable`1 references, CSharpCompilationOptions options, CSharpParseOptions parseOptions, String assemblyName, String sourceFileName)\r\n\tat Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.VerifyOperationTreeAndDiagnosticsForTest[TSyntaxNode](String testSrc, String expectedOperationTree, DiagnosticDescription[] expectedDiagnostics, CSharpCompilationOptions compilationOptions, CSharpParseOptions parseOptions, MetadataReference[] additionalReferences, Action`3 additionalOperationTreeVerifier, Boolean useLatestFrameworkReferences)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Test\\Semantic\\IOperation\\IOperationTests_IObjectCreationExpression.cs(644,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.IOperationTests.ObjectCreationWithDynamicMemberInitializer_01()\r\n```"},{"Id":"6849994847","Type":"PullRequestEvent","CreatedAt":"2017-11-14T00:41:11","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23153","RelatedDescription":"Opened pull request \"Tighten PE verification in compiler tests\" (#23153) at dotnet/roslyn","RelatedBody":"We used to skip verification. In order to facilitate evaluation of ILVerify, I'm switching to a model where such cases will instead run verification and expect that it fails.\r\nA few cases are left as \"skip\"."},{"Id":"6849960312","Type":"IssuesEvent","CreatedAt":"2017-11-14T00:29:23","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23116","RelatedDescription":"Closed issue \"Use var incorrectly changes out variable declarations to var\" (#23116) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2017 15.5 P3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static int Main(string[] args)\r\n    {\r\n        TryGetValue(\"key\", out int value);\r\n        return value;\r\n    }\r\n\r\n    public static bool TryGetValue(string key, out object value)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public static bool TryGetValue<T>(string key, out T value)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo suggestion to convert `int` to `var`, since it changes overload resolution to the `object` overload.\r\n\r\n**Actual Behavior**:\r\nSuggestion which breaks code."},{"Id":"6849959085","Type":"PullRequestEvent","CreatedAt":"2017-11-14T00:28:57","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23135","RelatedDescription":"Merged pull request \"Do not offer 'var' if it would cause overload resolution issues.\" (#23135) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/23116"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6850723129","Type":"PullRequestEvent","CreatedAt":"2017-11-14T05:14:12","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4927","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4927) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6850451867","Type":"PullRequestEvent","CreatedAt":"2017-11-14T03:20:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4926","RelatedDescription":"Opened pull request \"Fix CppCodeGen break with latest XCode\" (#4926) at dotnet/corert","RelatedBody":"Latest XCode errors on ordered comparison of pointer with integer\r\n\r\nAlso, fixed some unnecessary always-true comparisons that the C++ compiler emitted warnings for."},{"Id":"6849807781","Type":"PullRequestEvent","CreatedAt":"2017-11-13T23:40:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4924","RelatedDescription":"Merged pull request \"Compile \"Module\" code manager for ProjectN only\" (#4924) at dotnet/corert","RelatedBody":"This will simplify ifdefs in WASM build among other things."},{"Id":"6849633343","Type":"PullRequestEvent","CreatedAt":"2017-11-13T22:51:37","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4925","RelatedDescription":"Merged pull request \"Enable LibraryInitializer for CoreCLR\" (#4925) at dotnet/corert","RelatedBody":"Jan's previous change(Define CORERT for ProjectN builds ) replaced !CoreRT with ProjectN for the following files, which accidently break CoreCLR behavior."},{"Id":"6849431281","Type":"PullRequestEvent","CreatedAt":"2017-11-13T22:03:52","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4925","RelatedDescription":"Opened pull request \"Enable LibraryInitializer for CoreCLR\" (#4925) at dotnet/corert","RelatedBody":"Jan's previous change(Define CORERT for ProjectN builds ) replaced !CoreRT with ProjectN for the following files, which accidently break CoreCLR behavior."},{"Id":"6847377492","Type":"PullRequestEvent","CreatedAt":"2017-11-13T15:16:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4924","RelatedDescription":"Opened pull request \"Compile \"Module\" code manager for ProjectN only\" (#4924) at dotnet/corert","RelatedBody":"This will simplify ifdefs in WASM build among other things."},{"Id":"6847345304","Type":"PullRequestEvent","CreatedAt":"2017-11-13T15:10:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4923","RelatedDescription":"Merged pull request \"[armel][cross] Fix command line arguments for cross compilation\" (#4923) at dotnet/corert","RelatedBody":"Fix for #4900\r\ncc @dotnet/arm32-corert-contrib "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6850014779","Type":"PullRequestEvent","CreatedAt":"2017-11-14T00:47:50","Actor":"joperezr","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1731","RelatedDescription":"Opened pull request \"Adding one more condition so that we can override adding shims for net471 in case they are required\" (#1731) at dotnet/sdk","RelatedBody":"cc: @livarcocc @AlexGhiondea @weshaggard @dsplaisted \r\n\r\nDuring my testing I found one more thing that we can improve with the current targets. The problem to solve, is that in the case your app is in a state where we don't automatically detect that you need the shims (for example if you don't directly reference a netstandard based library but one of your dependencies does) and you are targeting .NET 4.7.1, there is no quick property that you can set in order to force the shims to be deployed with the app. The only current workaround for that, would be to add a direct reference to a netstandard based component directly, so that our logic kicks in. I don't think that this is a good behavior, which is why I would like to try to squish this change in, so that if users need to deploy the shims for 4.7.1, they can simpy set property `<DependsOnNETStandard>true</DependsOnNETStandard>` in order to accomplish that."},{"Id":"6849942347","Type":"IssuesEvent","CreatedAt":"2017-11-14T00:23:15","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1730","RelatedDescription":"Opened issue \"SDK cannot pack itself\" (#1730) at dotnet/sdk","RelatedBody":"The Microsoft.NET.Build.Tasks.csproj has some code to resolve publish assemblies during the build phase in order to pack itself.  \r\n\r\nTriggering this code now causes the order of GetReferenceAssemblyPaths and GetFrameworkPaths to be reversed during pack. GetReferenceAssemblyPaths must always run after GetFrameworkPaths because GetReferenceAssemblyPaths overrides the TargetFrameworkDirectory set by GetFrameworkPaths.\r\n\r\nEverywhere https://github.com/dotnet/sdk/pull/1618 added DependsOnTargets=\"GetReferenceAssemblyPaths\" needs to be DependsOnTargets=\"GetFrameworkPaths;GetReferenceAssemblyPaths\"\r\n\r\nMinimal repro (or just use Microsoft.NET.Build.Tasks.csproj):\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n <Target Name=\"Repro\" DependsOnTargets=\"RunResolvePublishAssemblies\" BeforeTargets=\"ResolveLockFileCopyLocalProjectDeps\" />\r\n</Project>\r\n```\r\n\r\n```\r\n> dotnet pack\r\nMicrosoft (R) Build Engine version 15.5.178.35674 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 11.77 ms for D:\\Temp\\repro_pack\\repro_pack.csproj.\r\n  repro_pack -> D:\\Temp\\repro_pack\\bin\\Debug\\net46\\repro_pack.dll\r\nC:\\Program Files\\dotnet\\sdk\\2.1.1-preview-007128\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(58,5): error : Framework list file path 'v4.0.30319\\RedistList\\FrameworkList.xml' is not rooted. Only full paths are supported. [D:\\Temp\\repro_pack\\repro_pack.csproj]\r\n```\r\n\r\n@livarcocc @dsplaisted \r\n\r\n"},{"Id":"6849133998","Type":"IssuesEvent","CreatedAt":"2017-11-13T20:59:02","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1729","RelatedDescription":"Opened issue \"Compiling Mvc's functional tests with 2.2 SDK targeting netcoreapp2.1 is compiled with PlatformTarget x64\" (#1729) at dotnet/sdk","RelatedBody":"The title is super specific because I wasn't able to reproduce this with a smaller sample. \r\n\r\nI’ve been working on updating AspNetCore’s repositories to use the 2.2 SDK and the 2.1 runtime. For the latter, I’ve been attempting to add the netcoreapp2.1 as a cross-compile target to our test projects. Xunit’s test discovery for one of these updated project’s test started failing with a BadImageFormatException. Digging in to the logs \\ outputs revealed the following differences between the netcoreapp2.0 and 2.1 binaries:\r\n\r\na)\tThe 2.1 binary has Architecture x86 as opposed to 2.0 binary which has AnyCPU (64-bit preferred)\r\nb)\tThe SDK compiles the 2.1 binary with a PlatformTarget of x86 versus an empty PlatformTarget on netcoreapp2.0\r\n\r\n\r\n| netcoreapp2.1 | netcoreapp2.0 |\r\n|---------------|---------------|\r\n|  ![2 1](https://user-images.githubusercontent.com/174281/32748742-03d52e98-c872-11e7-8f3c-548a54d81f51.jpg)  | ![netcoreapp20](https://user-images.githubusercontent.com/174281/32748817-36683e72-c872-11e7-8f28-7f9e7f693f0a.jpg)| \r\n\r\nHere’s the csproj in question: https://raw.githubusercontent.com/aspnet/Mvc/a70b00106c2a386cebbcab9d171124ae3a76a036/test/Microsoft.AspNetCore.Mvc.FunctionalTests/Microsoft.AspNetCore.Mvc.FunctionalTests.csproj \r\n\r\nSpecifying a PlatformTarget fixes the test discovery issue, but I’m just trying to figure out what might cause this difference. "},{"Id":"6848788467","Type":"IssuesEvent","CreatedAt":"2017-11-13T19:44:08","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1727","RelatedDescription":"Closed issue \"ComboBox throws a StackOverflowException when an item is selected\" (#1727) at dotnet/sdk","RelatedBody":"I got the same error as this person on StackOverflow:\r\n\r\n\r\nhttps://stackoverflow.com/questions/47228336/uwp-xaml-combobox-throws-a-stackoverflowexception-when-an-item-is-selected\r\n\r\nIf you select an item from the ComboBox when it is databound to the value field, it creates a deadlock and running off the stack.  This doesn't appear to be an issue with any of the other controls, including ones that use the same binding code like toggle button.\r\n\r\n"},{"Id":"6845110460","Type":"IssuesEvent","CreatedAt":"2017-11-13T06:27:13","Actor":"srayuws","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1728","RelatedDescription":"Closed issue \"netcoreapp2.0 is not compatible with netstandard2.0 ?\" (#1728) at dotnet/sdk","RelatedBody":"Hi , \r\nI have 3 trivial projects here:\r\n\r\n* `CommonLib.csproj` with target `netstandard2.0`\r\n* `OldImplement.csproj` with target `v4.7`\r\n* `NewImplement.csproj` with target `newcoreapp2.0`\r\n\r\nHere is the problem:\r\n\r\nIt works fine if I reference the `OldImplement` in the `CommonLib`, everything works find.\r\n\r\nBut when i try to change the referenced project from the `OldImplement` to the `NewImplement`, I cannot build the `CommonLib`. And here is the error I got when I run `dotnet build` for `CommonLib`:\r\n\r\n```\r\nerror NU1201: Project NewImplement is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project NewImplement supports: netcoreapp2.0 (.NETCoreApp,Version=v2.0)\r\n```\r\n\r\nI have .Net CLI 2.0.2 installed.\r\n\r\nMy questions is: is this error by design, or it is possible to reference a netcoreapp project in a netstandard library?\r\n\r\n"},{"Id":"6845050361","Type":"IssuesEvent","CreatedAt":"2017-11-13T06:03:37","Actor":"srayuws","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1728","RelatedDescription":"Opened issue \"netcoreapp2.0 is not compatible with netstandard2.0 ?\" (#1728) at dotnet/sdk","RelatedBody":"Hi , \r\nI have 3 trivial projects here:\r\n\r\n* `CommonLib.csproj` with target `netstandard2.0`\r\n* `OldImplement.csproj` with target `v4.7`\r\n* `NewImplement.csproj` with target `newcoreapp2.0`\r\n\r\nHere is the problem:\r\n\r\nIt works fine if I reference the `OldImplement` in the `CommonLib`, everything works find.\r\n\r\nBut when i try to change the referenced project from the `OldImplement` to the `NewImplement`, I cannot build the `CommonLib`. And here is the error I got when I run `dotnet build` for `CommonLib`:\r\n\r\n```\r\nerror NU1201: Project NewImplement is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project NewImplement supports: netcoreapp2.0 (.NETCoreApp,Version=v2.0)\r\n```\r\n\r\nI have .Net CLI 2.02 installed.\r\n\r\nMy questions is: is this error by design, or it is possible to reference a netcoreapp project in a netstandard library?\r\n\r\n"},{"Id":"6844213928","Type":"IssuesEvent","CreatedAt":"2017-11-12T23:05:34","Actor":"Joebeazelman","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1727","RelatedDescription":"Opened issue \"ComboBox throws a StackOverflowException when an item is selected\" (#1727) at dotnet/sdk","RelatedBody":"I got the same error as this person on StackOverflow:\r\n\r\n\r\nhttps://stackoverflow.com/questions/47228336/uwp-xaml-combobox-throws-a-stackoverflowexception-when-an-item-is-selected\r\n\r\nIf you select an item from the ComboBox when it is databound to the value field, it creates a deadlock and running off the stack.  This doesn't appear to be an issue with any of the other controls, including ones that use the same binding code like toggle button.\r\n\r\n"},{"Id":"6843667382","Type":"PullRequestEvent","CreatedAt":"2017-11-12T17:37:03","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1726","RelatedDescription":"Opened pull request \"Replacement method - NuPkg publish to blob feed:  SDK\" (#1726) at dotnet/sdk","RelatedBody":""},{"Id":"6843542982","Type":"IssuesEvent","CreatedAt":"2017-11-12T16:22:34","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1522","RelatedDescription":"Closed issue \"Workflow XAML compiler is broken with netstandard assemblies\" (#1522) at dotnet/sdk","RelatedBody":"Repro:\r\n1. Create a workflow console application targeting net461.\r\n2. Add a reference to a netstandard1.5 or later library.\r\n\r\nExpected:\r\nCompiles w/o warnings and runs successfully.\r\n\r\nActual:\r\nWarnings\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\t\tCould not compile workflow expressions because file 'file:///C:\\Program Files (x86)\\Microsoft Visual Studio\\IntPreview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\net461\\ref\\netfx.force.conflicts.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\tWorkflowConsoleApplication1\tC:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.Xaml.targets\t347\t\r\nWarning\t\tCould not run workflow validation because file 'netfx.force.conflicts, PublicKeyToken=cc7b13ffcd2ddd51' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\tWorkflowConsoleApplication1\tC:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.Xaml.targets\t347\t\r\n```\r\n\r\nApplying the netfx.force.conflicts workaround merely causes the warning to occur on the next reference dll (system.data.common).\r\n\r\nWhen in this state workflows will not execute, see https://github.com/dotnet/corefx/issues/23439.\r\n\r\nWe may need to give up on passing reference assemblies to desktop projects.  If that's the case we'd switch to just passing in the libs to the compiler and we'd need to build a version of `netfx.force.conflicts.dll` that doesn't have the reference assembly attribute.\r\n\r\n/cc @dsplaisted @weshaggard \r\n"},{"Id":"6840922050","Type":"IssuesEvent","CreatedAt":"2017-11-11T06:12:53","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1588","RelatedDescription":"Closed issue \"Change the default for all SDK-based projects (including Web SDK) to include DebugSymbols in the project file for Release builds\" (#1588) at dotnet/sdk","RelatedBody":"DebugSymbols translates to \"debug+ optimize+\", which disables variable removal but leave other kinds of IL optimizations enabled.\r\n"},{"Id":"6840860448","Type":"PullRequestEvent","CreatedAt":"2017-11-11T05:13:22","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1725","RelatedDescription":"Opened pull request \"WIP Add reference metadata to indicate that RAR can skip dependency searching\" (#1725) at dotnet/sdk","RelatedBody":""},{"Id":"6840212822","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:51:15","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1724","RelatedDescription":"Opened issue \"dotnet run with a TFM prints restore output to the command line\" (#1724) at dotnet/sdk","RelatedBody":"1. Create a new console application `dotnet new console`\r\n2. Do `dotnet run`. The first and only line in the output is from the app's execution (`Hello world!`)\r\n3. Do `dotnet run -f netcoreapp2.1`. \r\n\r\n**Expected:**\r\n`Hello world!`\r\n\r\n**Actual**\r\n```\r\nMicrosoft (R) Build Engine version 15.5.172.19382 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 12.52 ms for D:\\temp\\run-test\\run-test.csproj.\r\nHello World!\r\n```\r\n\r\n```dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007522)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007522\r\n Commit SHA-1 hash:  d58fc6120d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   \\.dotnet\\x64\\sdk\\2.2.0-preview1-007522\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25907-02\r\n  Build    : 5e5b627d019c82b11a718a90008ce4f737c7e401\r\n```\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"927634989499301888","CreatedAt":"2017-11-06T20:33:10+00:00","UserScreenname":"dotnet","Text":"Windows Docker Tag Scheme Changed https://t.co/ULufUyjXq6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":35,"RawContent":null},{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":46,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null}]}},"RunOn":"2017-11-14T05:30:22.569817Z","RunDurationInMilliseconds":8061}