{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6986660827","Type":"PullRequestEvent","CreatedAt":"2017-12-14T05:03:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15516","RelatedDescription":"Merged pull request \"Revert \"Add optional integer offset to OwnedMemory Pin (#15410)\"\" (#15516) at dotnet/coreclr","RelatedBody":"This reverts commit 8931cfa4ebe94f57698b4c1b3ab5689cd467cb8e."},{"Id":"6986583314","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:27:51","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15518","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert\" (#15518) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6986488435","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:46:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15517","RelatedDescription":"Opened pull request \"Revert \" Revert \"[Local GC] Move knowledge of overlapped I/O objects to the EE through four callbacks (#14982)\"\"\" (#15517) at dotnet/coreclr","RelatedBody":"Reverts dotnet/coreclr#15498"},{"Id":"6986481092","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:43:47","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15513","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26014-01, preview1-26013-12, respectively (master)\" (#15513) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6986478277","Type":"IssuesEvent","CreatedAt":"2017-12-14T03:42:34","Actor":"RussellHaley","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15507","RelatedDescription":"Closed issue \"Build coreclr tests for FreeBSD on Windows 10\" (#15507) at dotnet/coreclr","RelatedBody":"Hi, \r\n\r\nI'd like to cross build the coreclr tests on my Windows 10 system. According to my reading of build-test.cmd, that should mean adding the correct runtimeid parameter? The usage listing currently does not list freebsd. \r\n\r\nMy questions are: Is there a reason it can't be added? If not, where would I find the correct ID?\r\n\r\nSome follow on questions to satisfy my curiosity (not criticism): Why are you still using batch? Can your build scripts be written in PowerShell? I recognize the VS cmd line support is required, but that just leads to why is VS still supporting batch and not PS? If it's just a matter of setting up the right environment variables, then...? I can't see PS being that slow for just initializing the build process. I would like to try testing PS builds after I get fbsd cross building working. \r\n\r\nThanks in advance,\r\nRuss"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6986579006","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:25:54","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8239","RelatedDescription":"Closed pull request \"Suppress previous NuGet messages for clean command.\" (#8239) at dotnet/cli","RelatedBody":"This commit suppresses messages that were previously generated during a restore\r\noperation.  NuGet serializes the messages into `project.assets.json` during a\r\nrestore and the `ReportAssetsLogMessages` task reads and logs the messages.\r\nThis causes the clean command to print NuGet diagnostic messages even though a\r\nrestore operation does not occur.\r\n\r\nThe fix is to set the `EmitAssetsLogMessages` property to false for the clean\r\ncommand, which prevents the `ReportAssetsLogMessages` target from executing.\r\n\r\nFixes #8027.\r\n"},{"Id":"6986569899","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:21:46","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8231","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8231) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20171213-080043\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20171213-080043 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6986553912","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:14:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8238","RelatedDescription":"Closed issue \"dotnet publish doesn't seem to like multiple frameworks\" (#8238) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nCreate a netcoreapp2.0 project. In the csproj file the target framework will be:\r\n\r\n`<TargetFramework>netcoreapp2.0</TargetFramework>`\r\n\r\nCreate a netstandard2.0 class library, and add support for .net 4.6.1. In the csproj file the target frameworks (plural) will be:\r\n\r\n`<TargetFrameworks>net461;netstandard2.0</TargetFramework>`\r\n\r\nRun \r\n\r\n`dotnet publish --framework netcoreapp2.0`\r\n\r\n## Expected  behavior\r\n\r\nThe solution compiles and it's published.\r\n\r\n## Actual behavior\r\n\r\nThere is an error:\r\n\r\nAssets file 'c:\\[path]\\ConsoleApp2\\ClassLibrary1\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. [c:\\[path]\\ConsoleApp2\\ClassLibrary1\\ClassLibrary1.csproj]\r\n\r\nNote when there's no multiple frameworks in any of the .csproj files you can mix and match netcoreapp2.0 and netstandard2.0, so this combination:\r\n\r\n.csproj file 1:\r\n\r\n`<TargetFramework>netcoreapp2.0</TargetFramework>`\r\n\r\n.csproj file 2:\r\n\r\n`<TargetFramework>netstandard2.0</TargetFramework>`\r\n\r\nBuilds ok with just:\r\n\r\n`dotnet publish`\r\n\r\nWhich is expected since the netcoreapp2.0 is an implementation of the netstandard2.0. Based on that, should it still work if I just specify \"--framework netcoreapp2.0\" in the multiple frameworks scenario?\r\n\r\nFYI, The workaround is to add netcoreapp2.0 to the target frameworks, but that feels dirty, and makes your .csproj file messy:\r\n\r\n`<TargetFrameworks>net461;netstandard2.0;netcoreapp2.0</TargetFramework>`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6986529654","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:03:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8241","RelatedDescription":"Merged pull request \"Updating the Microsoft.NET.SDK version to 2.1.0-preview1-62414-02\" (#8241) at dotnet/cli","RelatedBody":"Brings over @eerhardt's perf improvement to HandlePackageConflicts."},{"Id":"6986438803","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:26:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8241","RelatedDescription":"Opened pull request \"Updating the Microsoft.NET.SDK version to 2.1.0-preview1-62414-02\" (#8241) at dotnet/cli","RelatedBody":"Brings over @eerhardt's perf improvement to HandlePackageConflicts."},{"Id":"6986287836","Type":"PullRequestEvent","CreatedAt":"2017-12-14T02:29:25","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8240","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26014-01 (master)\" (#8240) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6986138794","Type":"IssuesEvent","CreatedAt":"2017-12-14T01:33:44","Actor":"TedRussell23","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8202","RelatedDescription":"Closed issue \"Project is failing to build through the dotnet cli, however compiles fine through VS2017 Community\" (#8202) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nAny command that implements a build of the project within the appropriate project directory  (ex: dotnet build). Occurs with all projects.\r\n\r\n## Expected  behavior\r\nThe project to be built successfully and the web application displayed.\r\n\r\n## Actual behavior\r\nError Codes: \r\nerror MSB3883: Unexpected exception.\r\nSystem.ComponentModel.Win32Exception (0x80004005): The system cannot find the file specified \r\n(The file does exist!)\r\n\r\n__Failed with 6 build errors. Listed below.__\r\n\r\nC:\\***\\source\\repos\\learningNetCore\\learningNetCore>dotnet build\r\nMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): er\r\nror MSB3883: Unexpected exception:  [C:\\***\\source\\repos\\learningNetCore\\l\r\nearningNetCore\\learningNetCore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): er\r\nror : System.ComponentModel.Win32Exception (0x80004005): The system cannot find\r\nthe file specified [C:\\***\\source\\repos\\learningNetCore\\learningNetCore\\le\r\narningNetCore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): er\r\nror : at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo star\r\ntInfo) [C:\\***\\source\\repos\\learningNetCore\\learningNetCore\\learningNetCor\r\ne.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): er\r\nror : at System.Diagnostics.Process.Start() [C:\\***\\source\\repos\\learningN\r\netCore\\learningNetCore\\learningNetCore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): er\r\nror : at Microsoft.Build.Utilities.ToolTask.ExecuteTool(String pathToTool, Strin\r\ng responseFileCommands, String commandLineCommands) [C:\\***\\source\\repos\\l\r\nearningNetCore\\learningNetCore\\learningNetCore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): er\r\nror : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pa\r\nthToTool, String responseFileCommands, String commandLineCommands) [C:\\***\r\n\\source\\repos\\learningNetCore\\learningNetCore\\learningNetCore.csproj]\r\n\r\nBuild FAILED.\r\n\r\n## Environment data\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n\r\nIf there is an obvious solution I'll happily slap myself but can't locate specifically where the problem rests. \r\nI'm trying to expand on my knowledge of C# by developing an ASP.NET CORE x2 Web Application but have realized that all my projects are failing to compile through the CMD.\r\n\r\nAny help would be greatly appreciated, Thank you!!\r\n\r\n\r\n\r\n"},{"Id":"6986070207","Type":"PullRequestEvent","CreatedAt":"2017-12-14T01:09:15","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8239","RelatedDescription":"Opened pull request \"Suppress previous NuGet messages for clean command.\" (#8239) at dotnet/cli","RelatedBody":"This commit suppresses messages that were previously generated during a restore\r\noperation.  NuGet serializes the messages into `project.assets.json` during a\r\nrestore and the `ReportAssetsLogMessages` task reads and logs the messages.\r\nThis causes the clean command to print NuGet diagnostic messages even though a\r\nrestore operation does not occur.\r\n\r\nThe fix is to set the `EmitAssetsLogMessages` property to false for the clean\r\ncommand, which prevents the `ReportAssetsLogMessages` target from executing.\r\n\r\nFixes #8027.\r\n"},{"Id":"6986064414","Type":"IssuesEvent","CreatedAt":"2017-12-14T01:07:09","Actor":"omora-RA","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8238","RelatedDescription":"Opened issue \"dotnet publish doesn't seem to like multiple frameworks\" (#8238) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nCreate a netcoreapp2.0 project. In the csproj file the target framework will be:\r\n\r\n`<TargetFramework>netcoreapp2.0</TargetFramework>`\r\n\r\nCreate a netstandard2.0 class library, and add support for .net 4.6.1. In the csproj file the target frameworks (plural) will be:\r\n\r\n`<TargetFrameworks>net461;netstandard2.0</TargetFramework>`\r\n\r\nRun \r\n\r\n`dotnet publish --framework netcoreapp2.0\r\n\r\n## Expected  behavior\r\n\r\nThe solution compiles and it's published.\r\n\r\n## Actual behavior\r\n\r\nThere is an error:\r\n\r\nAssets file 'c:\\[path]\\ConsoleApp2\\ClassLibrary1\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. [c:\\[path]\\ConsoleApp2\\ClassLibrary1\\ClassLibrary1.csproj]\r\n\r\nNote when there's no multiple frameworks in any of the .csproj files you can mix and match netcoreapp2.0 and netstandard2.0, so this combination:\r\n\r\n.csproj file 1:\r\n\r\n`<TargetFramework>netcoreapp2.0</TargetFramework>`\r\n\r\n.csproj file 2:\r\n\r\n`<TargetFramework>netstandard2.0</TargetFramework>`\r\n\r\nBuilds ok with just:\r\n\r\ndotnet publish\r\n\r\nWhich is expected since the netcoreapp2.0 is an implementation of the netstandard2.0. Based on that, should it still work if I just specify \"--framework netcoreapp2.0\" in the multiple frameworks scenario?\r\n\r\nFYI, The workaround is to add netcoreapp2.0 to the target frameworks, but that feels dirty, and makes your .csproj file messy:\r\n\r\n`<TargetFrameworks>net461;netstandard2.0;netcoreapp2.0</TargetFramework>`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6986013943","Type":"IssuesEvent","CreatedAt":"2017-12-14T00:49:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8237","RelatedDescription":"Closed issue \"Server GC is not activated with latest runtime/sdk\" (#8237) at dotnet/cli","RelatedBody":"We migrated an app to use a very recent runtime. Since then the server GC is not active anymore.\r\n\r\nI forced it in the csproj:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <ServerGarbageCollection>true</ServerGarbageCollection>\r\n  </PropertyGroup>\r\n```\r\n\r\nAnd I can see this runtimeconfig file generated when the app is published:\r\n\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.1\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"2.1.0-preview1-26008-01\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  }\r\n```\r\n\r\nThe SDK is ` 2.2.0-preview1-007796`\r\n\r\nThen at runtime we display whether the server GC is enabled or not:\r\n\r\n```csharp\r\nConsole.WriteLine($\"Server GC is currently {(GCSettings.IsServerGC ? \"ENABLED\" : \"DISABLED\")}\");\r\n```\r\n\r\nWhich displays\r\n\r\n```\r\nServer GC is currently DISABLED\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6985979070","Type":"IssuesEvent","CreatedAt":"2017-12-14T00:37:17","Actor":"sebastienros","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8237","RelatedDescription":"Opened issue \"Server GC is not activated with latest runtime/sdk\" (#8237) at dotnet/cli","RelatedBody":"We migrated an app to use a very recent runtime. Since then the server GC is not active anymore.\r\n\r\nI forced it in the csproj:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <ServerGarbageCollection>true</ServerGarbageCollection>\r\n  </PropertyGroup>\r\n```\r\n\r\nAnd I can see this runtimeconfig file generated when the app is published:\r\n\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.1\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"2.1.0-preview1-26008-01\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  }\r\n```\r\n\r\nThe SDK is ` 2.2.0-preview1-007796`\r\n\r\nThen at runtime we display whether the server GC is enabled or not:\r\n\r\n```csharp\r\nConsole.WriteLine($\"Server GC is currently {(GCSettings.IsServerGC ? \"ENABLED\" : \"DISABLED\")}\");\r\n```\r\n\r\nWhich displays\r\n\r\n```\r\nServer GC is currently DISABLED\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6985970954","Type":"IssuesEvent","CreatedAt":"2017-12-14T00:34:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7366","RelatedDescription":"Closed issue \"Visual studio publishes project but dotnet publish does not\" (#7366) at dotnet/cli","RelatedBody":"I am using Visual Studio community edition 2017 and dotnet 1.0.4 on a machine running Windows Server 2016 Data Center.\r\n\r\n## Steps to reproduce\r\n\r\nWhen I publish my project in Visual Studio to C:\\TMP\\foo, all of the files needed for running the application on another machine are included. \r\n\r\nWhen, from the command line, I dotnet publish myproject.sln -o C:\\TMP\\foo, the logo appears on the screen but nothing is written to C:\\TMP\\foo. Checking the exit status with echo $? returns True.\r\n\r\n## Expected  behavior\r\n\r\nI am expecting the publication files to be placed in C:\\TMP\\foo\r\n\r\n## Actual behavior\r\n\r\nC:\\TMP\\foo is empty\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\nPS C:\\Users\\Administrator\\Documents\\Sandbox\\clout-v1.5-admin>\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6985962270","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:31:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8236","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26013-05 (master)\" (#8236) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6985407162","Type":"IssuesEvent","CreatedAt":"2017-12-13T21:57:36","Actor":"desmondgc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/604","RelatedDescription":"Opened issue \"How to avoid incompatibilities between .NET Standard 2.0 and .NET Framework 4.6.1\" (#604) at dotnet/standard","RelatedBody":"I have a .NET Standard 2.0 class library that uses System.Net.Http.HttpClientHandler. The class library is referenced in multiple projects, including a WPF application targeting .NET Framework 4.6.1. I am trying to set the HttpClientHandler.MaxConnectionsPerServer property which causes a MissingMethodException on systems without .NET Framework 4.7.1 installed.\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n    MaxConnectionsPerServer = 32\r\n};\r\n```\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(Int32)'.\r\n```\r\n\r\nThis is expected - MaxConnectionsPerServer is one of the [APIs with known compatibility issues](https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt).\r\n\r\nFirst workaround attempt - catch MissingMethodException:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\ntry\r\n{\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\ncatch (MissingMethodException)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n}\r\n```\r\n\r\nDoesn't work - the exception is still raised. Some SO posts suggest that it's generally not possible to catch MissingMethodException.\r\n\r\nSecond workaround attempt - reflection:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\nif (typeof(HttpClientHandler).GetProperty(\"MaxConnectionsPerServer\") != null)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\n```\r\n\r\nDoesn't work - GetProperty doesn't return null.\r\n\r\nHow am I expected to avoid this scenario?"},{"Id":"6984278457","Type":"PullRequestEvent","CreatedAt":"2017-12-13T17:48:29","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/603","RelatedDescription":"Merged pull request \"Remove obsolete attribute from XslTransform\" (#603) at dotnet/standard","RelatedBody":"This is part of https://github.com/dotnet/corefx/issues/25874. \r\n\r\nAfter the updated standard reaches CoreFX we can remove the attribute there too.\r\n\r\nThe same attribute is present in various platforms, should I remove it there too?\r\n```\r\nplatforms\\net461\\System.Xml.cs\r\nplatforms\\xamarin.android\\System.Xml.cs\r\nplatforms\\xamarin.ios\\System.Xml.cs\r\nplatforms\\xamarin.mac\\System.Xml.cs\r\nplatforms\\xamarin.tvos\\System.Xml.cs\r\nplatforms\\xamarin.watchos\\System.Xml.cs\r\n```"},{"Id":"6984124239","Type":"PullRequestEvent","CreatedAt":"2017-12-13T17:16:31","Actor":"pjanotti","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/603","RelatedDescription":"Opened pull request \"Remove obsolete attribute from XslTransform\" (#603) at dotnet/standard","RelatedBody":"This is part of https://github.com/dotnet/corefx/issues/25874. \r\n\r\nAfter the updated standard reaches CoreFX we can remove the attribute there too.\r\n\r\nThe same attribute is present in various platforms, should I remove it there too?\r\n```\r\nplatforms\\net461\\System.Xml.cs\r\nplatforms\\xamarin.android\\System.Xml.cs\r\nplatforms\\xamarin.ios\\System.Xml.cs\r\nplatforms\\xamarin.mac\\System.Xml.cs\r\nplatforms\\xamarin.tvos\\System.Xml.cs\r\nplatforms\\xamarin.watchos\\System.Xml.cs\r\n```"},{"Id":"6982884702","Type":"IssuesEvent","CreatedAt":"2017-12-13T13:31:47","Actor":"BjarkeMeier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/602","RelatedDescription":"Opened issue \"Azure Web app: Could not load file or assembly 'netstandard, Version=2.0.0.0\" (#602) at dotnet/standard","RelatedBody":"I'm running an Azure web app. After referencing a .NET Standard 2 class library the app no longer can start. Azure web app restart reports no problems but a manual start in Azure console gives the following output:\r\n\r\n```Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n   at Foo.Program.Main(String[] args)```\r\n\r\nThe class library has references to NuGet packages like Microsoft.AspNetCore.Http.Abstractions version 2.0.1 and thus cannot be downgraded to a previous .NET Standard. I've tried to add the package NETStandard.Library and I've tried to add a VSTS \".NET Core Tool Installer\" task to install dotnet 2 SDK in the build. All projects except for the .NET Standard 2 class library targets .NET Framework 4.7.1.\r\n\r\nHow do I solve the problem?"},{"Id":"6979850506","Type":"PullRequestEvent","CreatedAt":"2017-12-12T22:37:00","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/600","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02312-02 (master)\" (#600) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6986686835","Type":"PullRequestEvent","CreatedAt":"2017-12-14T05:14:49","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25915","RelatedDescription":"Merged pull request \"RemoteExecutorTestBase.Process.cs always requires RemoteExecutorConsoleApp.exe \" (#25915) at dotnet/corefx","RelatedBody":"RemoteExecutorTestBase.Process\r\nbefore executing an executable `HostRunner` it checks if `TestConsoleApp` exists ([a const](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs#L23) equals to \"RemoteExecutorConsoleApp.exe\") - it's OK for netcore, netfx and uapaot since `HostRunner` actually equals to TestConsoleApp, see:\r\n[RemoteExecutorTestBase.netfx.cs](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.netfx.cs#L13)\r\n[RemoteExecutorTestBase.uapaot.cs](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.uapaot.cs#L13)\r\n[RemoteExecutorTestBase.netcore.cs](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.netcore.cs#L14) (it eqauls to TestConsoleApp, isn't it?)\r\n\r\nwe want to use these files in mono but we have a different name for the executable (e.g. a name that contains current mono profile) but currently it's hardcoded to RemoteExecutorConsoleApp.exe"},{"Id":"6986670215","Type":"IssuesEvent","CreatedAt":"2017-12-14T05:07:21","Actor":"rahl0b10","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25916","RelatedDescription":"Opened issue \"Console.ReadLine echo's first input on OS X 10.13.1.\" (#25916) at dotnet/corefx","RelatedBody":"## Background\r\nI am not a console programmer, but was helping someone learn some foundations of programming and fundamental syntax of C# in a console application. When demonstrating loops I found that following simple code has an unexpected behavior. On the first pass through the while loop, the input is echoed to *stdout*. \r\n\r\n### Example Program\r\n            \r\n            var retries = 10;\r\n            var input = string.Empty;\r\n            var answer = \"Cod3\";\r\n            while(retries-- > 0 && input != answer){ \r\n                input = Console.ReadLine();\r\n            }\r\n            Console.WriteLine(retries > 0 ? \"CONGRATS!\" : \"GAME OVER!\");\r\n\r\n### Example Output\r\nIf I entered the numbers 1 through 10 and hit return after each value, the following will result:\r\n\r\n        1\r\n        1  <-- Echoed to stdout, delayed several hundred milliseconds from the input.\r\n        2\r\n        3\r\n        4\r\n        5\r\n        6\r\n        7\r\n        8\r\n        9\r\n        10\r\n        GAME OVER!\r\n\r\n#### Environment\r\n**OS**: OS X v10.13.1\r\n**Shell**: _zsh v5.3_, _GNU bash v3.2.57_\r\n**.Net Core**: v2.0.3"},{"Id":"6986633262","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:50:46","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25838","RelatedDescription":"Merged pull request \" Create a serializer and deserializer for ASN.1 data \" (#25838) at dotnet/corefx","RelatedBody":"This enables serialization and deserialization of `[StructLayout(LayoutKind.Sequential)]` types to/from ASN.1 BER/CER/DER data streams.\r\n\r\nASN.1:\r\n```asn.1\r\nDEFINITIONS EXPLICIT TAGS ::=\r\n\r\nBEGIN\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n     algorithm               OBJECT IDENTIFIER,\r\n     parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\r\nTBSCertificate  ::=  SEQUENCE  {\r\n     version         [0]  Version DEFAULT v1,\r\n     serialNumber         CertificateSerialNumber,\r\n     signature            AlgorithmIdentifier,\r\n     issuer               Name,\r\n     validity             Validity,\r\n     subject              Name,\r\n     subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n                          -- If present, version MUST be v2 or v3\r\n     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n                          -- If present, version MUST be v2 or v3\r\n     extensions      [3]  Extensions OPTIONAL\r\n                          -- If present, version MUST be v3 --  }\r\n\r\n...\r\n```\r\n\r\nC#:\r\n```C#\r\n[StructLayout(LayoutKind.Sequential)]\r\ninternal struct AlgorithmIdentifier\r\n{\r\n    public Oid Algorithm;\r\n    [AnyValue, OptionalValue]\r\n    public ReadOnlyMemory<byte>? Parameters;\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\ninternal struct TbsCertificate\r\n{\r\n    [ExpectedTag(0, ExplicitTag = true)]\r\n    [DefaultValue(0x02, 0x01, 0x01)]\r\n    public int Version;\r\n\r\n    [Integer]\r\n    public ReadOnlyMemory<byte> SerialNumber;\r\n\r\n    public AlgorithmIdentifier Signature;\r\n\r\n    // Name is complicated, load it as Any and use the reader.\r\n    [AnyValue]\r\n    public ReadOnlyMemory<byte> Issuer;\r\n\r\n    public Validity Validity;\r\n\r\n    [AnyValue]\r\n    public ReadOnlyMemory<byte> Subject;\r\n\r\n    public SubjectPublicKeyInfo SubjectPublicKeyInfo;\r\n\r\n    [ExpectedTag(1), BitString, OptionalValue]\r\n    public ReadOnlyMemory<byte>? IssuerUniqueId;\r\n\r\n    [ExpectedTag(2), BitString, OptionalValue]\r\n    public ReadOnlyMemory<byte>? SubjectUniqueId;\r\n\r\n    [ExpectedTag(3, ExplicitTag = true), OptionalValue]\r\n    public Extension[] Extensions;\r\n}\r\n\r\n...\r\nTbsCertificate tbsCertificate =\r\n    AsnSerializer.Deserialize<TbsCertificate>(data, AsnEncodingRules.DER);\r\n```\r\n\r\nAmbiguous types (like `string`) require attributes to identify their ASN.1 representation, and other attributes exist to optionally control the serialization mechanism (such as `[OptionalValue]`, `[ExpectedTag]`, `[AnyValue]`).\r\n\r\nFor background, see [ITU-T-REC-X.680-201508](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.680-201508-I!!PDF-E&type=items) (ASN.1 language).\r\n\r\nContributes to #21833."},{"Id":"6986573191","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:23:13","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/15818","RelatedDescription":"Closed issue \"Span: Add BinarySearch(...) extension methods for ReadOnlySpan<T> (and Span<T>)\" (#15818) at dotnet/corefx","RelatedBody":"Currently, there is no way to binary search in sorted native or fixed memory (e.g. coming from a pointer) in .NET, this proposal intends to fix that by adding binary search extension methods to `ReadOnlySpan<T>` (and currently also `Span<T>` due to type inference issues), but also proposes some different overloads than seen on `Array` to allow for inlined comparisons via the possibility to use value type comparables and comparers.\r\n\r\n### Proposed API\r\nAdd a set of `BinarySearch` extension methods for `ReadOnlySpan<T>` and `Span<T>` in `SpanExtensions`:\r\n```csharp\r\n    public static class SpanExtensions\r\n    {\r\n        // Convenience overload\r\n        public static int BinarySearch<T>(\r\n            this ReadOnlySpan<T> span, IComparable<T> comparable) \r\n        { return BinarySearch<T, IComparable<T>>(span, comparable); }\r\n\r\n        public static int BinarySearch<T, TComparable>(\r\n            this ReadOnlySpan<T> span, TComparable comparable) \r\n            where TComparable : IComparable<T> \r\n        { throw null; }\r\n\r\n        public static int BinarySearch<T, TComparer>(\r\n            this ReadOnlySpan<T> span, T value, TComparer comparer) \r\n            where TComparer : IComparer<T>\r\n        { throw null; }\r\n\r\n        // NOTE: Due to the less-than-ideal generic type inference \r\n        //       in the face of implicit conversions,\r\n        //       we need the overloads taking Span<T>. \r\n        //       These simply forward to ReadOnlySpanExtensions.\r\n\r\n        // Convenience overload\r\n        public static int BinarySearch<T>(\r\n            this Span<T> span, IComparable<T> comparable) \r\n        { return BinarySearch<T, IComparable<T>>(span, comparable); }\r\n\r\n        public static int BinarySearch<T, TComparable>(\r\n            this Span<T> span, TComparable comparable) \r\n            where TComparable : IComparable<T> \r\n        { return BinarySearch<T, TComparable>((ReadOnlySpan<T>)span, comparable); }\r\n\r\n        public static int BinarySearch<T, TComparer>(\r\n            this Span<T> span, T value, TComparer comparer) \r\n            where TComparer : IComparer<T>\r\n        { return BinarySearch((ReadOnlySpan<T>)span, value, comparer); }\r\n    }\r\n```\r\n\r\n### Rationale and Usage\r\nProvide a safe yet fast way of binary searching of any type of contiguous memory; managed or unmanaged.\r\n\r\n```csharp\r\npublic static class UsageForInt\r\n{\r\n    struct InlineableComparer : IComparer<int>\r\n    {\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public int Compare(int a, int b)\r\n        {\r\n            if (a == b) { return 0; }\r\n            if (a < b) { return -1; }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    struct InlineableComparable : IComparable<int>\r\n    {\r\n        int m_value;\r\n        \r\n        public InlineableComparable(int value)\r\n        {\r\n            m_value = value;\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public int CompareTo(int other)\r\n        {\r\n            if (m_value == other) { return 0; }\r\n            if (m_value < other) { return -1; }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    public static void SpanBinarySearch()\r\n    {\r\n        var span = new Span<int>();\r\n\r\n        //span.Sort();\r\n\r\n        int valueToFind = 42;\r\n\r\n        // Direct value\r\n        var index = span.BinarySearch(valueToFind);\r\n\r\n        // Inlineable struct comparer\r\n        var comparer = new InlineableComparer();\r\n        index = span.BinarySearch(valueToFind, comparer);\r\n\r\n        // Inlineable struct comparable\r\n        var comparable = new InlineableComparable(valueToFind);\r\n        index = span.BinarySearch(comparable);\r\n    }\r\n\r\n    public static void ReadOnlySpanBinarySearch()\r\n    {\r\n        ReadOnlySpan<int> span = new Span<int>();\r\n\r\n        //span.Sort();\r\n\r\n        int valueToFind = 42;\r\n\r\n        // Direct value\r\n        var index = span.BinarySearch(valueToFind);\r\n\r\n        // Inlineable struct comparer\r\n        var comparer = new InlineableComparer();\r\n        index = span.BinarySearch(valueToFind, comparer);\r\n\r\n        // Inlineable struct comparable\r\n        var comparable = new InlineableComparable(valueToFind);\r\n        index = span.BinarySearch(comparable);\r\n    }\r\n}\r\n\r\npublic static class UsageForCompound\r\n{\r\n    struct Compound\r\n    {\r\n        public float FeatureValue;\r\n        public int FeatureIndex;\r\n        public object Payload;\r\n    }\r\n\r\n    struct InlineableFeatureValueComparer : IComparer<Compound>\r\n    {\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public int Compare(Compound a, Compound b)\r\n        {\r\n            if (a.FeatureValue == b.FeatureValue) { return 0; }\r\n            if (a.FeatureValue < b.FeatureValue) { return -1; }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    struct InlineableFeatureComparable : IComparable<Compound>\r\n    {\r\n        readonly float m_featureValue;\r\n        \r\n        public InlineableFeatureComparable(float featureValue)\r\n        {\r\n            m_featureValue = featureValue;\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        public int CompareTo(Compound other)\r\n        {\r\n            if (m_featureValue == other.FeatureIndex) { return 0; }\r\n            if (m_featureValue < other.FeatureIndex) { return -1; }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    public static void SpanBinarySearch()\r\n    {\r\n        var span = new Span<Compound>();\r\n\r\n        //span.Sort(new InlineableFeatureValueComparer());\r\n\r\n        float featureValueToFind = 1.234f;\r\n\r\n        // Inlineable struct comparer\r\n        var comparer = new InlineableFeatureValueComparer();\r\n        // Less than ideal for compound, which is reason for comparable overload\r\n        var compound = new Compound(){ FeatureValue = featureValueToFind };\r\n        var index = span.BinarySearch(compound, comparer);\r\n\r\n        // Inlineable struct comparable (easier to use for compounded type)\r\n        var comparable = new InlineableFeatureComparable(featureValueToFind);\r\n        index = span.BinarySearch(comparable);\r\n    }\r\n\r\n    public static void ReadOnlySpanBinarySearch()\r\n    {\r\n        ReadOnlySpan<Compound> span = new Span<Compound>();\r\n\r\n        //span.Sort(new InlineableFeatureValueComparer());\r\n\r\n        float featureValueToFind = 1.234f;\r\n\r\n        // Inlineable struct comparer\r\n        var comparer = new InlineableFeatureValueComparer();\r\n        // Less than ideal for compound, which is reason for comparable overload\r\n        var compound = new Compound(){ FeatureValue = featureValueToFind };\r\n        var index = span.BinarySearch(compound, comparer);\r\n\r\n        // Inlineable struct comparable (easier to use for compounded type)\r\n        var comparable = new InlineableFeatureComparable(featureValueToFind);\r\n        index = span.BinarySearch(comparable);\r\n    }\r\n}\r\n```\r\n\r\nThe argumentation for adding this is:\r\n * To increase the efficiency of code doing binary searching and prevent people from reinventing the wheel.\r\n * Allow binary searching on contiguous memory of any kind.\r\n\r\n### Open Questions\r\nAn important question regarding this proposal is whether the pattern with generic parameter `TComparer` (e.g. constrained to `where TComparer : IComparer<T>`) or `TComparable` (constrained to `where TComparable : IComparable<T>`) is a pattern that can be approved. This pattern allows for inlineable comparables/comparers at the cost of increased code size, if no value type comparables/comparers are used, there should be no difference. This pattern is also used in the proposal for `Sort` in https://github.com/dotnet/corefx/issues/15329, that has been approved.\r\n\r\nAnother open question is whether the overload taking `IComparable<T>` is necessary.\r\n\r\nThe API relies on being able to depend upon `System.Collections.Generic`, could this be an issue?\r\n\r\n@karelz @jkotas @KrzysztofCwalina @jamesqo\r\n\r\n### Updates\r\nUPDATE 1: Add link to Sort and point on the pattern used.\r\nUPDATE 2: Add IComparable<T> overloads for convenience as suggested by @jkotas\r\nUPDATE 3: Combine all extensions into `SpanExtensions`.\r\n\r\n### Existing Sort APIs\r\nA non-exhaustive list of existing binary search APIs is given below for comparison.\r\n\r\n#### `Array.BinarySearch` Static Methods\r\nFound in [ref/System.Runtime.cs](https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs)\r\n\r\n```csharp\r\npublic static int BinarySearch(System.Array array, int index, int length, object value) { throw null; }\r\npublic static int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer) { throw null; }\r\npublic static int BinarySearch(System.Array array, object value) { throw null; }\r\npublic static int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer) { throw null; }\r\npublic static int BinarySearch<T>(T[] array, T value) { throw null; }\r\npublic static int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer) { throw null; }\r\npublic static int BinarySearch<T>(T[] array, int index, int length, T value) { throw null; }\r\npublic static int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer) { throw null; }\r\n```\r\n\r\n#### `List<T>.BinarySearch` Member Methods\r\nFound in [ref/System.Collections.cs](https://github.com/dotnet/corefx/blob/master/src/System.Collections/ref/System.Collections.cs)\r\n\r\n```csharp\r\npublic partial class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList\r\n{\r\n    public int BinarySearch(T item) { throw null; }\r\n    public int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer) { throw null; }\r\n    public int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T> comparer) { throw null; }\r\n}\r\n```\r\n"},{"Id":"6986461524","Type":"IssuesEvent","CreatedAt":"2017-12-14T03:35:48","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25229","RelatedDescription":"Reopened issue \"Change OwnedMemory Pin to take an optional integer offset\" (#25229) at dotnet/corefx","RelatedBody":"Related to https://github.com/dotnet/corefx/issues/24317 and https://github.com/dotnet/corefx/pull/24323#discussion_r141769638\r\n\r\n> the scenario is I use OwnedMemory and MemoryHandle directly, without using Memory, e.g. I implement my own Memory-like factory for spans. If we don't like AddOffset, we should add OwnedMemory.Pin overload that takes offset to the added to the pointer inside the handle.\r\n\r\n## API Proposal\r\nChange:\r\n```C#\r\nnamespace System.Buffers\r\n{\r\n    public abstract class OwnedMemory<T> : IDisposable, IRetainable \r\n    {\r\n        public abstract MemoryHandle Pin();\r\n    }\r\n}\r\n```\r\n\r\nTo:\r\n```C#\r\nnamespace System.Buffers\r\n{\r\n    public abstract class OwnedMemory<T> : IDisposable, IRetainable \r\n    {\r\n        public abstract MemoryHandle Pin(int offset = 0);\r\n    }\r\n}\r\n```\r\n\r\n## Usage\r\n**Example** from [NativeOwnedMemory](https://github.com/dotnet/corefx/blob/master/src/Common/tests/System/Buffers/NativeOwnedMemory.cs#L56):\r\n```C#\r\npublic override unsafe MemoryHandle Pin() => new MemoryHandle(this, (void*)_ptr);\r\n```\r\nWould become:\r\n```C#\r\npublic override unsafe MemoryHandle Pin(int offset = 0) \r\n{\r\n   void* pointer = (void*)((byte*)_ptr + offset);\r\n   return new MemoryHandle(this, pointer);\r\n}\r\n```\r\n\r\nThe following can then be re-written from [Memory.Retain](https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Memory.cs#L193-L197):\r\n```C#\r\nif (_index < 0)\r\n{\r\n    memoryHandle = ((OwnedMemory<T>)_arrayOrOwnedMemory).Pin();\r\n    memoryHandle.AddOffset((_index & RemoveOwnedFlagBitMask) * Unsafe.SizeOf<T>());\r\n}\r\n```\r\nTo:\r\n```C#\r\nif (_index < 0)\r\n{\r\n    memoryHandle = ((OwnedMemory<T>)_arrayOrOwnedMemory).Pin((_index & RemoveOwnedFlagBitMask) * Unsafe.SizeOf<T>());\r\n}\r\n```\r\n\r\nWe can then remove the internal AddOffset method [here](https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/MemoryHandle.cs#L48-L58) which was added in https://github.com/dotnet/corefx/pull/24323.\r\n\r\ncc @KrzysztofCwalina, @stephentoub, @karelz, @terrajobst, @pakrym "},{"Id":"6986448721","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:30:44","Actor":"EgorBo","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25915","RelatedDescription":"Opened pull request \"RemoteExecutorTestBase.Process.cs always requires RemoteExecutorConsoleApp.exe \" (#25915) at dotnet/corefx","RelatedBody":"RemoteExecutorTestBase.Process\r\nbefore executing an executable `HostRunner` it checks if `TestConsoleApp` exists (a const equals to \"RemoteExecutorConsoleApp.exe\") - it's OK for netcore, netfx and uapaot since `HostRunner` actually equals to TestConsoleApp, see:\r\n[RemoteExecutorTestBase.netfx.cs](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.netfx.cs#L13)\r\n[RemoteExecutorTestBase.uapaot.cs](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.uapaot.cs#L13)\r\n[RemoteExecutorTestBase.netcore.cs](https://github.com/dotnet/corefx/blob/master/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.netcore.cs#L14) (it eqauls to TestConsoleApp, isn't it?)\r\n\r\nwe want to use these files in mono but we have a different name for the executable (e.g. a name that contains current mono profile) but currently it's hardcoded to RemoteExecutorConsoleApp.exe"},{"Id":"6986273018","Type":"IssuesEvent","CreatedAt":"2017-12-14T02:24:01","Actor":"halter73","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25914","RelatedDescription":"Opened issue \"Managed sockets binding regression on linux \" (#25914) at dotnet/corefx","RelatedBody":"@tmds @stephentoub \r\n\r\nStarting with runtime build 2.1.0-preview1-25915-01, it is now possible to bind multiple times simultaneously to the exact same TCP address on linux without setting any special options.\r\n\r\n### SampleApp:\r\n\r\n```c#\r\nusing System;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\n\r\nnamespace DoubleBind\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var socket1 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))\r\n            {\r\n                socket1.Bind(new IPEndPoint(IPAddress.Loopback, 5000));\r\n\r\n                using (var socket2 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))\r\n                {\r\n                    socket2.Bind(new IPEndPoint(IPAddress.Loopback, 5000));\r\n                }\r\n            }\r\n\r\n            Console.WriteLine(\"Success!?\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected output:\r\n\r\n```\r\nDoubleBind$ dotnet run\r\n\r\nUnhandled Exception: System.Net.Sockets.SocketException: Address already in use\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n   at DoubleBind.Program.Main(String[] args) in /Users/shalter/source/halter73/DoubleBind/Program.cs:line 17\r\n```\r\n\r\nThis is what is seen today on Windows and macOS.\r\n\r\n### Actual output:\r\n\r\n```\r\nDoubleBind$ dotnet run\r\nSuccess!?\r\n```\r\n\r\nThis is the behavior on Linux (tested on Ubuntu 16.04.3 LTS) starting with the 2.1.0-preview1-25915-01 build.\r\n\r\n### My theory\r\n\r\n[Here](https://github.com/dotnet/corefx/compare/25f80ade543903293ae08ac091cffd457a7a9ad4...7eba4bf88983ac276348ea1626c81595e1b237c6) are the changes introduced in the 2.1.0-preview1-25915-01 build. But even without looking at that, it stands to reason that #24809 is the likely cause of this change in behavior.\r\n\r\nSetting the SO_REUSEADDR option by itself should not cause this behavior (this is what we've been doing manually in Kestrel for a couple months now), so maybe SO_REUSEPORT is getting set when it shouldn't be."},{"Id":"6986175834","Type":"PullRequestEvent","CreatedAt":"2017-12-14T01:47:38","Actor":"ianhays","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25907","RelatedDescription":"Merged pull request \"Fix GZip perf test location\" (#25907) at dotnet/corefx","RelatedBody":"resolves https://github.com/dotnet/corefx/issues/25901"},{"Id":"6986175829","Type":"IssuesEvent","CreatedAt":"2017-12-14T01:47:37","Actor":"ianhays","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25901","RelatedDescription":"Closed issue \"Compression tests broken\" (#25901) at dotnet/corefx","RelatedBody":"@ianhays, all or most of the compression tests have started failing:\n\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.10/workItem/System.IO.Compression.Performance.Tests\n\nexample -- \n\nThe test `System.IO.Compression.GzipStreamPerfTests/Decompress_Canterbury(innerIterations: 1, uncompressedFilePath: \\\"UncompressedTestFiles/TestDocument.doc\\\", compressLevel: Fastest)` has failed.\n\nSystem.IO.DirectoryNotFoundException : Could not find a part of the path '/Users/dotnet-bot/dotnetbuild/work/22a01f14-296f-4811-9db4-685fa4c585f9/Work/78a1bc7b-a47f-48b7-8b89-c9a38f2774fb/Unzip/GZTestData/TestDocument.doc.gz'.\n\n        Stack Trace:\n\n           at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/304/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 23\n       at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) in /Users/buildagent/agent/_work/304/s/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs:line 78\n       at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) in /Users/buildagent/agent/_work/304/s/src/mscorlib/shared/System/IO/FileStream.cs:line 229\n       at System.IO.File.InternalReadAllBytes(String path)\n       at System.IO.Compression.CompressionStreamPerfTestBase.Decompress_Canterbury(Int32 innerIterations, String uncompressedFilePath, CompressionLevel compressLevel) in /Users/buildagent/agent/_work/320/s/corefx/src/Common/tests/System/IO/Compression/CompressionStreamPerfTestBase.cs:line 71\nBuild : Master - 20171213.10 (Core Tests)\nFailing configurations:\n- OSX.1013.Amd64-x64\n  - Release\n- OSX.1012.Amd64-x64\n  - Release\n- fedora.25.amd64-x64\n  - Release\n- SLES.12.Amd64-x64\n  - Release\n- suse.422.amd64-x64\n  - Release\n- Ubuntu.1710.Amd64-x64\n  - Release\n- Ubuntu.1704.Amd64-x64\n  - Release\n- Ubuntu.1604.Amd64-x64\n  - Release\n- Ubuntu.1404.Amd64-x64\n  - Release\n- Debian.90.Amd64-x64\n  - Release\n- Debian.87.Amd64-x64\n  - Release"},{"Id":"6986136767","Type":"PullRequestEvent","CreatedAt":"2017-12-14T01:32:58","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25913","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02312-02, preview1-26014-01, preview1-26013-12, preview1-26013-05, beta-26013-00, beta-26013-00, respectively (master)\" (#25913) at dotnet/corefx","RelatedBody":""},{"Id":"6986128312","Type":"PullRequestEvent","CreatedAt":"2017-12-14T01:29:52","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25872","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02312-02, preview1-26013-03, preview1-26013-06, preview1-26012-06, beta-26013-00, beta-26013-00, respectively (master)\" (#25872) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6986550741","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:13:13","Actor":"cartermp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23770","RelatedDescription":"Closed issue \"Opening up the pattern matcher?\" (#23770) at dotnet/roslyn","RelatedBody":"We currently have a copy of the pattern matching source and all of its supporting code in the Visual F# tools codebase: https://github.com/Microsoft/visualfsharp/tree/master/vsintegration/src/FSharp.LanguageService.Base/PatternMatcher\r\n\r\nThere are a two problems with this:\r\n\r\n1. The source uses Roslyn-isms which necessarily tie it to only one part of our codebase; we cannot port this over to our own language service, because our language service is used in other editors which don't use Roslyn.\r\n2. We likely won't be getting any future bug fixes in this.\r\n\r\nCan we open this up for consumption? cc @DustinCampbell "},{"Id":"6986543634","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:09:55","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23780","RelatedDescription":"Opened issue \"For some branch operations IOperation tree provides insufficient information to reason about them \" (#23780) at dotnet/roslyn","RelatedBody":"```\r\n        <CompilerTrait(CompilerFeature.IOperation)>\r\n        <Fact()>\r\n        Public Sub ExitStatement()\r\n            Dim source = <![CDATA[\r\nClass Program\r\n    Private Shared Sub Main() 'BIND:\"Private Shared Sub Main()\"\r\n        Dim x As Boolean = false\r\n        While True\r\n            Do While True\r\n                If x Then\r\n                    Exit Do\r\n                Else\r\n                    Exit While\r\n                End If\r\n            Loop\r\n        End While\r\n\r\n        Exit Sub\r\n    End Sub\r\nEnd Class\r\n    ]]>.Value\r\n\r\n            Dim expectedOperationTree = <![CDATA[\r\nIBlockOperation (5 statements, 1 locals) (OperationKind.Block, Type: null) (Syntax: 'Private Sha ... End Sub')\r\n  Locals: Local_1: x As System.Boolean\r\n  IVariableDeclarationGroupOperation (1 declarations) (OperationKind.VariableDeclarationGroup, Type: null) (Syntax: 'Dim x As Boolean = false')\r\n    IVariableDeclarationOperation (1 declarators) (OperationKind.VariableDeclaration, Type: null) (Syntax: 'x As Boolean = false')\r\n      Declarators:\r\n          IVariableDeclaratorOperation (Symbol: x As System.Boolean) (OperationKind.VariableDeclarator, Type: null) (Syntax: 'x')\r\n            Initializer: \r\n              null\r\n      Initializer: \r\n        IVariableInitializerOperation (OperationKind.VariableInitializer, Type: null) (Syntax: '= false')\r\n          ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False) (Syntax: 'false')\r\n  IWhileLoopOperation (ConditionIsTop: True, ConditionIsUntil: False) (LoopKind.While) (OperationKind.Loop, Type: null) (Syntax: 'While True ... End While')\r\n    Condition: \r\n      ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: True) (Syntax: 'True')\r\n    Body: \r\n      IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'While True ... End While')\r\n        IWhileLoopOperation (ConditionIsTop: True, ConditionIsUntil: False) (LoopKind.While) (OperationKind.Loop, Type: null) (Syntax: 'Do While Tr ... Loop')\r\n          Condition: \r\n            ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: True) (Syntax: 'True')\r\n          Body: \r\n            IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'Do While Tr ... Loop')\r\n              IConditionalOperation (OperationKind.Conditional, Type: null) (Syntax: 'If x Then ... End If')\r\n                Condition: \r\n                  ILocalReferenceOperation: x (OperationKind.LocalReference, Type: System.Boolean) (Syntax: 'x')\r\n                WhenTrue: \r\n                  IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'If x Then ... End If')\r\n                    IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Do')\r\n                WhenFalse: \r\n                  IBlockOperation (1 statements) (OperationKind.Block, Type: null) (Syntax: 'Else ... Exit While')\r\n                    IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit While')\r\n          IgnoredCondition: \r\n            null\r\n    IgnoredCondition: \r\n      null\r\n  IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Sub')\r\n  ILabeledOperation (Label: exit) (OperationKind.Labeled, Type: null, IsImplicit) (Syntax: 'End Sub')\r\n    Statement: \r\n      null\r\n  IReturnOperation (OperationKind.Return, Type: null, IsImplicit) (Syntax: 'End Sub')\r\n    ReturnedValue: \r\n      null\r\n]]>.Value\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest(Of MethodBlockSyntax)(source, expectedOperationTree, \"\")\r\n        End Sub\r\n```\r\n\r\nThe tree above includes three IBranchOperation nodes:\r\n```\r\nIBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Do')\r\nIBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit While')\r\nIBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Sub')\r\n```\r\n\r\nAnd only one ILabeledOperation:\r\n```\r\nILabeledOperation (Label: exit) (OperationKind.Labeled, Type: null, IsImplicit) (Syntax: 'End Sub')\r\n``` \r\n\r\nAll branch operations represent jumps to different locations in code and only the last one (for 'Exit Sub') has a node representing its destination.\r\n\r\nThe same issue probably exists with Continue statements and other kinds of Exit statement.\r\n\r\nPossible solution is to expose Exit/Continue labels for constructs that can be exited/continued "},{"Id":"6986385801","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:06:11","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23779","RelatedDescription":"Opened pull request \"fixed OOP from crashing when renaming solution.\" (#23779) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"6986096787","Type":"PullRequestEvent","CreatedAt":"2017-12-14T01:19:03","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23773","RelatedDescription":"Merged pull request \"Use binary log in microbuild\" (#23773) at dotnet/roslyn","RelatedBody":"[this is a cherry-pick of @jaredpar's change from master]\r\n\r\nThis enables the generation of binary logs for our build when running in Microbuild.\r\nHaving the logs available helps in post-build debugging of errors. We tend to get a\r\nnumber of microbuild only failures that are impossible to track down without logging\r\nlike this.\r\n\r\nOnce this is merged i will be adding a task to our VSTS build definition to publish\r\nthese post build."},{"Id":"6986024981","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:53:19","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23778","RelatedDescription":"Opened pull request \"Update Microsoft.DiaSymReader.Native to 1.7.0 stable\" (#23778) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nUpdate Microsoft.DiaSymReader.Native to the release version that shipped with 15.5. \r\nThis change only affects nuget packages that we publish from the servicing branch. It does not affect VS.\r\n\r\n### Bugs this fixes\r\n\r\nn/a\r\n\r\n### Workarounds, if any\r\n\r\nn/a\r\n\r\n### Risk\r\n\r\nSmall.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\n### How was the bug found?\r\n\r\n### Test documentation updated?"},{"Id":"6986021545","Type":"IssuesEvent","CreatedAt":"2017-12-14T00:52:06","Actor":"jamesqo","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23777","RelatedDescription":"Opened issue \"Overload resolution bug when calling params method from derived class\" (#23777) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 15.5.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    class B\r\n    {\r\n    }\r\n\r\n    class C\r\n    {\r\n        void M(B b, params object[] args)\r\n        {\r\n        }\r\n\r\n        /*\r\n        void M(params object[] args)\r\n        {\r\n            // Correctly picks up on M(B, object[])\r\n            M(new B(), args);\r\n        }\r\n        */\r\n    }\r\n\r\n    class D : C\r\n    {\r\n        void M(params object[] args)\r\n        {\r\n            // Wrongly picks up on M(object[]), leading to StackOverflowException\r\n            M(new B(), args);\r\n        }\r\n    }\r\n```\r\n\r\nI picked up this bug while working on an analyzer, funnily enough. Here's the code where I actually ran into the bug: https://github.com/jamesqo/roslyn-analyzers/blob/7b686d8ac75b9f555a2e87417be45c37a3ad79f3/src/Microsoft.CodeQuality.Analyzers/UnitTests/ApiDesignGuidelines/DoNotMixBlockingAndAsyncTests.Fixer.cs#L34-L42"},{"Id":"6985975985","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:36:10","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23776","RelatedDescription":"Opened pull request \"Only the compiler analyzer can use CS or BC prefix for diagnostics\" (#23776) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nSome analyzer (such as the UnboundIdentifier analyzer in the linked issue) produce similar diagnostics (ID and message) to the compiler's.\r\nThat is extremely confusing and leads to wasting time in investigation.\r\n\r\nIn the screenshot below, the red squiggles on `nameof` are actually produced by an analyzer, which makes a \"CS0107\" diagnostic...\r\n![image](https://user-images.githubusercontent.com/12466233/33857919-a7eaaa5a-de82-11e7-9025-efc8295904c4.png)\r\n\r\n### Bugs this fixes\r\nFixes part of https://github.com/dotnet/roslyn/issues/23667\r\nFixes part of https://github.com/dotnet/roslyn/issues/22615\r\n\r\n### Workarounds, if any\r\nNot applicable.\r\n\r\n### Risk\r\nLow. This PR modifies the analyzer infrastructure to catch when non-compiler analyzers produce a diagnostic starting with \"CS\" or \"BC\". A couple of such faulty analyzers are updated to produce distinct diagnostics instead (with correct \"IDE\" prefix).\r\n\r\n### Performance impact\r\nLow. Just an additional validation on diagnostics.\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### How was the bug found?\r\nSome customer reported issues caused me to hit this problem during investigation.\r\n"},{"Id":"6985973140","Type":"IssuesEvent","CreatedAt":"2017-12-14T00:35:11","Actor":"Pilchie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23768","RelatedDescription":"Closed issue \"VS 15.5 option strict error\" (#23768) at dotnet/roslyn","RelatedBody":"There is some bug, that VS do not recognize that Option Strict is OFF\r\nSteps to reproduce\r\n- in VS create VB console app,, make sure that Option Strict is Off in project page -> Compile, and write code\r\n` Dim x As Integer = \"0\"`\r\n- aave project and solution, exit VS\r\n- run VS again, load console project, and error will appear"},{"Id":"6985955651","Type":"IssuesEvent","CreatedAt":"2017-12-14T00:29:04","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23774","RelatedDescription":"Closed issue \"Allow \"locked members\" in C# to make sure that no other thread executes or uses it at the same time\" (#23774) at dotnet/roslyn","RelatedBody":"I am working on a project that, due to speed requirements, needs to be multithreaded; however, the majority of the members in some of the classes I am writing need to be locked with the C# \"lock(object x)\" statement so that the value of something isn't changed in the middle of a method execution on another thread. This means that I need to create a static lock object for every class that needs it, and add lock(lock) { /* code */ } to every member that needs to be locked. This just clutters everything, and doesn't need to. Multithreading is used a lot, and most of the times requires that members be thread-safe; there should be an easier and/or less wasteful way to make this possible. My proposal is that the following syntax should be allowed to achieve the same functionality:\r\n\r\n```\r\n// No other thread can get or set this while it's being gotten or set.\r\npublic locked int DisplayCode { get => /* calculate or find display code */; set => /* cache display code */; }  \r\n\r\n// No other thread can get this while it's being gotten.\r\npublic locked double CurrentFolder => /* code to get current folder */;\r\n\r\n// No other thread can set this while it's being gotten or set;\r\npublic locked bool DeepTraverse { get; set; } = false;\r\n\r\n// No other thread can get or set this while it's being set.\r\npublic locked bool _IgnoreSystemFiles = true;\r\n\r\n// No other thread can use this method while it's being executed.\r\npublic locked string RenameDirectory() => throw new NotImplementedException { };\r\n\r\n// All the members in this class are locked\r\ninternal locked class RegistryUtilities\r\n{\r\n    // This member is unlocked.\r\n    internal unlocked int RandomNumberSeed { get; set; }\r\n\r\n    // The active location cannot be set while being modified or accessed by another thread.\r\n    internal string ActiveLocation { get; set; }\r\n\r\n    // get is unlocked while set isn't.\r\n    internal unlocked string CurrentDirectoryFullName { get; locked set; } // Get and set have implementations\r\n\r\n    // Same deal as the locked method outside of this class.\r\n    internal bool RenameKey(string keyName)\r\n    {\r\n        /* code */\r\n        /* more code */\r\n    } \r\n}\r\n```\r\n\r\n---------\r\nI realize that there may be consistency or logic issues with the proposal, but I as well as probably many others would really appreciate some kind of system to do this. It would save a lot of time and clutter. Also, note that the provided code sample isn't real code, I just came up with it to show what I mean."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6986659571","Type":"PullRequestEvent","CreatedAt":"2017-12-14T05:02:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5110","RelatedDescription":"Merged pull request \"Provide intrinsic IL implementation for more Unsafe methods\" (#5110) at dotnet/corert","RelatedBody":""},{"Id":"6986580941","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:26:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5109","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5109) at dotnet/corert","RelatedBody":""},{"Id":"6986542630","Type":"PullRequestEvent","CreatedAt":"2017-12-14T04:09:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5110","RelatedDescription":"Opened pull request \"Provide intrinsic IL implementation for more Unsafe methods\" (#5110) at dotnet/corert","RelatedBody":""},{"Id":"6986478599","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:42:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5107","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5107) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6986477755","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:42:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5109","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5109) at dotnet/corert","RelatedBody":""},{"Id":"6986476993","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:42:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5108","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5108) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6986444791","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:29:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5108","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5108) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6986403053","Type":"PullRequestEvent","CreatedAt":"2017-12-14T03:12:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5105","RelatedDescription":"Closed pull request \"Refactor Unsafe.cs to get it more in sync with CoreCLR.\" (#5105) at dotnet/corert","RelatedBody":"Related to: https://github.com/dotnet/coreclr/pull/15510\r\n\r\ncc @jkotas, @sergiy-k, @KrzysztofCwalina "},{"Id":"6986293412","Type":"PullRequestEvent","CreatedAt":"2017-12-14T02:31:28","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5107","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5107) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6985712169","Type":"PullRequestEvent","CreatedAt":"2017-12-13T23:13:20","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5106","RelatedDescription":"Opened pull request \"[WIP] ILCompiler Package Multi-Runtime Package Support\" (#5106) at dotnet/corert","RelatedBody":"As it stands we only produce a Windows ILCompiler package. This work implements building and publishing of OS-specific runtime packages and spins off ILCompiler as a meta-package, which can be referenced when adding to a project.\r\n\r\nWorking on this, a quirk in MSBuild behavior under .NET Core popped up - build artifacts (i.e. .targets and .props files) are imported for direct project package references, but not for runtime-specific packages, defined as dependencies in the meta-package. This doesn't seem to be the case in vanilla MSBuild.\r\n\r\nThe below is a serious hack to work around this - during runtime, we find the resolved runtime package reference and define the path to it on disk, from which all OS-specific components are loaded and run. The motivation behind the workaround was to keep the package as small as possible, particularly because of the large intersection of components between OS implementations. \r\n\r\nI don't think this is a particularly viable long-term solution, so feedback is welcomed.\r\n\r\n@jkotas @MichalStrehovsky @nattress "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6985966222","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:32:43","Actor":"eerhardt","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1805","RelatedDescription":"Merged pull request \"ResolvePackageFileConflicts performance enhancements\" (#1805) at dotnet/sdk","RelatedBody":"Speed up ResolvePackageFileConflicts by avoiding reading files for their AssemblyVersion.\r\nAllow for packages to override other packages by default.\r\n\r\nHere are my timings before and after my changes on my win-x64 machine. Each scenario was fully built, and then a single \"warm up\" command, followed by 3 captured executions of \r\n```\r\nC:\\temp\\dotnet\\dotnet\\dotnet.exe C:\\temp\\dotnet\\dotnet\\sdk\\2.2.0-preview1-007739\\MSBuild.dll /v:m /m /clp:PerformanceSummary\r\n```\r\n\r\n### Scenario 1 https://github.com/OrchardCMS/OrchardCore\r\n\r\n| Without changes | With changes |\r\n|--------------------|--------------------|\r\n| 2667 ms  ResolvePackageFileConflicts 129 calls | 609 ms  ResolvePackageFileConflicts 129 calls |\r\n| 2630 ms  ResolvePackageFileConflicts 129 calls | 585 ms  ResolvePackageFileConflicts 129 calls |\r\n| 2418 ms  ResolvePackageFileConflicts 129 calls | 598 ms  ResolvePackageFileConflicts 129 calls |\r\n\r\n### Scenario 2 https://github.com/mikeharder/dotnet-cli-perf/tree/8d7493b26fd3a1b3d1ba3fb85fc7e60b0c19618e/scenarios/classlib/core\r\n\r\n| Without changes | With changes |\r\n|--------------------|--------------------|\r\n| 45 ms  ResolvePackageFileConflicts 2 calls | 29 ms  ResolvePackageFileConflicts 2 calls |\r\n| 46 ms  ResolvePackageFileConflicts 2 calls | 29 ms  ResolvePackageFileConflicts 2 calls |\r\n| 45 ms  ResolvePackageFileConflicts 2 calls | 31 ms  ResolvePackageFileConflicts 2 calls |\r\n\r\n### Scenario 3 https://github.com/mikeharder/dotnet-cli-perf/tree/8d7493b26fd3a1b3d1ba3fb85fc7e60b0c19618e/scenarios/web/core\r\n\r\n| Without changes | With changes |\r\n|--------------------|--------------------|\r\n| 78 ms  ResolvePackageFileConflicts 1 calls | 21 ms  ResolvePackageFileConflicts 1 calls |\r\n| 74 ms  ResolvePackageFileConflicts 1 calls | 21 ms  ResolvePackageFileConflicts 1 calls |\r\n| 56 ms  ResolvePackageFileConflicts 1 calls | 21 ms  ResolvePackageFileConflicts 1 calls |"},{"Id":"6985945997","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:26:01","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1817","RelatedDescription":"Merged pull request \"Update RepoToolset to 1.0.0-beta-2413-01\" (#1817) at dotnet/sdk","RelatedBody":"FYI. @tmat, @livarcocc \r\n\r\nThis fixes an issue with symbol publishing."},{"Id":"6985766665","Type":"IssuesEvent","CreatedAt":"2017-12-13T23:29:19","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1607","RelatedDescription":"Closed issue \"CPS out of sync with Restore with larger solutions that haven't turned on LSL (lightweight solution restore)\" (#1607) at dotnet/sdk","RelatedBody":"_From @rrelyea on January 17, 2017 20:12_\n\nFrom @Srivatsn\r\nplease investigate to understand if this should be rc3 or rtm issue?\r\nOpening Projectsystem.sln from https://github.com/srivatsn/roslyn-project-system/tree/dogfood/src\r\n\r\nShow these errors in the package manager window:\r\n\r\nError occurred while restoring NuGet packages: The operation failed as details for project ProjectSystemDogfoodSetup could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.Managed.TestServices.UnitTests could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project MSBuild could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Composition could not be loaded.\r\nError occurred while restoring NuGet packages: The operation failed as details for project Microsoft.VisualStudio.ProjectSystem.VisualBasic.VS could not be loaded.\r\nRestoring NuGet packages...\r\nTime Elapsed: 00:00:05.8245080\r\n========== Finished ==========\r\n\r\n\r\n                \r\n\n\n_Copied from original issue: NuGet/Home#4307_"},{"Id":"6985174955","Type":"PullRequestEvent","CreatedAt":"2017-12-13T21:05:37","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1817","RelatedDescription":"Opened pull request \"Update RepoToolset to 1.0.0-beta-2413-01\" (#1817) at dotnet/sdk","RelatedBody":"FYI. @tmat, @livarcocc \r\n\r\nThis fixes an issue with symbol publishing."},{"Id":"6984291709","Type":"PullRequestEvent","CreatedAt":"2017-12-13T17:51:20","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1816","RelatedDescription":"Merged pull request \"Updating the DotNetCliVersion to 2.2.0-preview1-007807\" (#1816) at dotnet/sdk","RelatedBody":""},{"Id":"6980543477","Type":"PullRequestEvent","CreatedAt":"2017-12-13T02:20:17","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1815","RelatedDescription":"Merged pull request \"Update RepoToolset to 1.0.0-beta-62412-04\" (#1815) at dotnet/sdk","RelatedBody":""},{"Id":"6980058297","Type":"PullRequestEvent","CreatedAt":"2017-12-12T23:33:41","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1816","RelatedDescription":"Opened pull request \"Updating the DotNetCliVersion to 2.2.0-preview1-007799\" (#1816) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":30,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":155,"RawContent":null}]}},"RunOn":"2017-12-14T05:30:24.3603752Z","RunDurationInMilliseconds":8837}