{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12154436308","Type":"IssuesEvent","CreatedAt":"2020-04-25T08:17:58","Actor":"wallymathieu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7968","RelatedDescription":"Opened issue \"Unable to access account with unverified email\" (#7968) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nThe account https://www.nuget.org/profiles/wallymathieu is linked to my email, but I'm unable to access it due to the email not being verified, the password being lost.\r\n\r\n### To Reproduce\r\n\r\nCreate an account. Have the delivery of the email fail (for instance due to some system filtering emails in between or a failure to send out the email)...\r\n\r\nTry to restore the password using your email you get \"Unverified email\"\r\n\r\n### Expected behavior\r\n\r\nEither:\r\n\r\n1) An account with no activity and unverified email (and no nuget packages) should perhaps be deleted?\r\n2) An account with an unverified email should be able to use password reset.\r\n\r\n### Additional context\r\n\r\nThe above mentioned nuget account is quite old. I got reminded of it https://github.com/fsprojects/FSharp.Formatting/pull/510#issuecomment-613568562 recently."},{"Id":"12153126172","Type":"PullRequestEvent","CreatedAt":"2020-04-25T00:46:54","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7963","RelatedDescription":"Merged pull request \"Fix minification failures and delete unused assets\" (#7963) at NuGet/NuGetGallery","RelatedBody":"- Add tests to detect minification failures in the future. Basically WebGrease uses an older view the JS and CSS syntax. I had to update to the latest WebGrase to address CSS minification failures.\r\n- Revert newer JavaScript syntax that breaks minification\r\n- Minify some unminified files\r\n- Delete an unused copy of jQuery UI\r\n- Delete unused syntax highlighter CSS\r\n\r\nAddress https://github.com/NuGet/Engineering/issues/3107"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12160317419","Type":"IssuesEvent","CreatedAt":"2020-04-26T12:53:45","Actor":"mrward","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9481","RelatedDescription":"Opened issue \"NuGet.Indexing 5.6.0 preview 3 and later use a different public key token\" (#9481) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):  5.6.0 preview 3\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:  5.6.0 preview 2\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nNuGet.Indexing 5.6.0 preview 3 and rtm published on https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json no longer have the NuGet public key token 31bf3856ad364e35 but have another Microsoft public key token b03f5f7f11d50a3a.\r\n\r\nBad:\r\n\r\nhttps://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/nuget.indexing/5.6.0-preview.3.6558/nuget.indexing.5.6.0-preview.3.6558.nupkg\r\n\r\nhttps://dotnetmyget.blob.core.windows.net/artifacts/nuget-build/nuget/v3/flatcontainer/nuget.indexing/5.6.0-rtm.6565/nuget.indexing.5.6.0-rtm.6565.nupkg\r\n\r\nOK: \r\n\r\nhttps://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/nuget.indexing/5.6.0-preview.2.6532/nuget.indexing.5.6.0-preview.2.6532.nupkg\r\n\r\nVS Mac builds are currently failing when verifying the binding redirect in place:\r\n\r\n```\r\nIn VisualStudio.exe.config: publicKeyToken 31bf3856ad364e35 from bindingRedirect for NuGet.Indexing doesn't match actual assembly b03f5f7f11d50a3a\r\n```\r\n\r\nNuGet.Indexing 5.6.0 preview 2 on nuget.org and the dotnet-core NuGet package source have the expected NuGet public key token - 31bf3856ad364e35\r\n\r\nNuGet.Indexing seems to be the only assembly affected.\r\n\r\nNot sure if this is expected or not - seems unexpected since preview 2 and older versions used the NuGet public key token.\r\n"},{"Id":"12156594946","Type":"IssuesEvent","CreatedAt":"2020-04-25T18:00:56","Actor":"anangaur","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9480","RelatedDescription":"Opened issue \"Message to use lock files upon detection of floating versions \" (#9480) at NuGet/Home","RelatedBody":"Details to follow. \r\nhttps://twitter.com/isaac_abraham/status/1254097848863465477?s=21"},{"Id":"12153250688","Type":"IssuesEvent","CreatedAt":"2020-04-25T01:23:48","Actor":"tdykstra","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9479","RelatedDescription":"Opened issue \"Print which feed a package was resolved from\" (#9479) at NuGet/Home","RelatedBody":"Transferred from https://github.com/dotnet/docs/issues/12713\r\n\r\nThe request is to show which feed a package was resolved from when .NET Core CLI command `dotnet restore` is run either explicitly or implicitly."},{"Id":"12152838746","Type":"IssuesEvent","CreatedAt":"2020-04-24T23:34:06","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9458","RelatedDescription":"Closed issue \"nuget.exe 5.5+ fails to restore with MSBuild 14 or below\" (#9458) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.5.1\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version: 5.4.X\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. `nuget.exe restore -MSBuildVersion 14.0`\r\n\r\nFails with the error:\r\n```\r\nC:\\Users\\jeffkl\\AppData\\Local\\Temp\\NuGetScratch\\npvhljmi.kme.nugetrestore.targets(435,34):\r\nerror MSB4092: An unexpected token \")\" was found at character position 28 in condition\r\n\"@(PackageReference->Count()) > 0\". [D:\\AspNetWithNet35\\AspNetWithNet35\\AspNetWithNet35.csproj]\r\n```\r\n\r\nThis was introduced by my change: https://github.com/NuGet/NuGet.Client/commit/1ce56a3cd779ec4ebae39a1b0ce3f7ccc3310584#diff-3b0018f61173d0adf1ba163a23821381R434\r\nhttps://github.com/NuGet/NuGet.Client/pull/3135\r\n\r\nIt turns out that the item function `Count()` was only added in MSBuild 14.0 Update 3.  So when using an older version of MSBuild, we can't use this logic.\r\n\r\n"},{"Id":"12152719757","Type":"IssuesEvent","CreatedAt":"2020-04-24T23:09:14","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9428","RelatedDescription":"Closed issue \"Add a context menu for PM UI in VS OE\" (#9428) at NuGet/Home","RelatedBody":""},{"Id":"12151726168","Type":"IssuesEvent","CreatedAt":"2020-04-24T20:34:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1783","RelatedDescription":"Closed issue \"nuget.exe update -self -Source https://feed\" (#1783) at NuGet/Home","RelatedBody":"nuget.exe update -Self is hardcoded to use nuget.org v2\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.CommandLine/Common/SelfUpdater.cs#L44\n\nThis command should be improved so that v3 sources can be used. It should also be possible to update from a local v3 server or pre-release feed such as the nuget-build feed.\n"},{"Id":"12151398625","Type":"IssuesEvent","CreatedAt":"2020-04-24T19:52:57","Actor":"jamespwright","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9478","RelatedDescription":"Opened issue \"NuGet command line times out on bad internet connection while other services operate correctly.\" (#9478) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI live out in the boonies and have an internet connection that has a very unique problem.  If my internet reaches peak bandwidth usage on multiple connections it will effectively drop to basically no bandwidth available.  This is 100% reproducible by uploading a large file.  I will go from 12Mbps down, 3Mbps up, to less than 1Mbps down and up.  \r\nNow that I am working from home, this has caused me a unique problem when running my team's Docker compose files, which builds 10+ services using `dotnet test` and `dotnet restore` on OSX.  \r\nWhat runs in 30 seconds for my teammates, ran for over an hour on my machine without reaching the end.\r\n\r\nIt's very worth noting that this problem with my internet only occurs *when uploading a large file or using `dotnet restore`* and not at any other time.  It *does not occur from reaching my peak download speeds*.\r\n\r\n## Example errors: \r\n\r\n> Failed to download package 'Microsoft.NetCore.Analyzers.2.9.8' from 'https://api.nuget.org/v3-flatcontainer/microsoft.netcore.analyzers/2.9.8/microsoft.netcore.analyzers.2.9.8.nupkg'.\r\n>    Received an unexpected EOF or 0 bytes from the transport stream.\r\n>   Failed to download package 'runtime.native.System.4.0.0' from 'https://api.nuget.org/v3-flatcontainer/runtime.native.system/4.0.0/runtime.native.system.4.0.0.nupkg'.\r\n>   The download of 'https://api.nuget.org/v3-flatcontainer/runtime.native.system/4.0.0/runtime.native.system.4.0.0.nupkg' timed out because no data was received for 60000ms.\r\n>     Exception of type 'System.TimeoutException' was thrown.\r\n>   Failed to download package 'System.Xml.ReaderWriter.4.3.0' from 'https://api.nuget.org/v3-flatcontainer/system.xml.readerwriter/4.3.0/system.xml.readerwriter.4.3.0.nupkg'.\r\n>    Received an unexpected EOF or 0 bytes from the transport stream.\r\n>   Failed to download package 'System.Runtime.4.3.0' from 'https://api.nuget.org/v3-flatcontainer/system.runtime/4.3.0/system.runtime.4.3.0.nupkg'.\r\n>   The download of 'https://api.nuget.org/v3-flatcontainer/system.runtime/4.3.0/system.runtime.4.3.0.nupkg' timed out because no data was received for 60000ms.\r\n>     Exception of type 'System.TimeoutException' was thrown.\r\n>   Failed to download package 'System.Reflection.Primitives.4.3.0' from 'https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.3.0/system.reflection.primitives.4.3.0.nupkg'.\r\n>   The download of 'https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.3.0/system.reflection.primitives.4.3.0.nupkg' timed out because no data was received for 60000ms.\r\n>     Exception of type 'System.TimeoutException' was thrown.\r\n\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet restore\r\n\r\nNuGet version (x.x.x.xxx): 5.5.0.4\r\n\r\ndotnet.exe --version (if appropriate): 3.1.201\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS Mojave 10.14.6\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Have my internet connection.\r\n\r\n2. run `dotnet restore` on a project in an environment that does not have any nuget packages cached.\r\n"},{"Id":"12151221519","Type":"IssuesEvent","CreatedAt":"2020-04-24T19:31:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9477","RelatedDescription":"Closed issue \"PackTask should report build error after logging errors\" (#9477) at NuGet/Home","RelatedBody":"SDK version: 3.1.201\r\nOS: Windows 10\r\n\r\nThe `dotnet pack` command incorrectly returns an exit code of 0 even after experiencing and printing errors (where `TreatWarningsAsErrors=true` has been set). This allows Azure Pipelines (for example) to proceed to build and report success and ship software even when errors occurred during the pack.\r\n\r\nFor example, this Azure Pipeline should have failed, but proceeded after an error during pack:\r\nhttps://dev.azure.com/andrewarnott/OSS/_build/results?buildId=2632&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=f33089cd-d3fe-578c-2c5e-4ee560e10a0d\r\n\r\n**Repro**\r\n\r\nIn any repo that uses .NET SDK 3.1.201, introduce a pack warning. For example, set the `<PackageLicenseExpression>MS-Pl</PackageLicenseExpression>` property (which has a non-canonical capitalization for the property value).\r\n\r\n```cmd\r\nSET TreatWarningsAsErrors=true\r\ndotnet pack\r\necho %ERRORLEVEL%\r\n```\r\n\r\n**Expected**\r\n\r\nA non-zero exit code\r\n\r\n**Actual**\r\n\r\nA zero exit code"},{"Id":"12150463101","Type":"IssuesEvent","CreatedAt":"2020-04-24T18:01:17","Actor":"AArnott","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9477","RelatedDescription":"Opened issue \"PackTask should report build error after logging errors\" (#9477) at NuGet/Home","RelatedBody":"SDK version: 3.1.201\r\nOS: Windows 10\r\n\r\nThe `dotnet pack` command incorrectly returns an exit code of 0 even after experiencing and printing errors (where `TreatWarningsAsErrors=true` has been set). This allows Azure Pipelines (for example) to proceed to build and report success and ship software even when errors occurred during the pack.\r\n\r\nFor example, this Azure Pipeline should have failed, but proceeded after an error during pack:\r\nhttps://dev.azure.com/andrewarnott/OSS/_build/results?buildId=2632&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=f33089cd-d3fe-578c-2c5e-4ee560e10a0d\r\n\r\n**Repro**\r\n\r\nIn any repo that uses .NET SDK 3.1.201, introduce a pack warning. For example, set the `<PackageLicenseExpression>MS-Pl</PackageLicenseExpression>` property (which has a non-canonical capitalization for the property value).\r\n\r\n```cmd\r\nSET TreatWarningsAsErrors=true\r\ndotnet pack\r\necho %ERRORLEVEL%\r\n```\r\n\r\n**Expected**\r\n\r\nA non-zero exit code\r\n\r\n**Actual**\r\n\r\nA zero exit code"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org â€“ Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2020-04-27T05:30:39.4735075Z","RunDurationInMilliseconds":3179}