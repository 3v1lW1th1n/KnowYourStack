{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":170,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6840049093","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:55","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Reopened issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6882625260","Type":"PullRequestEvent","CreatedAt":"2017-11-21T05:19:18","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15137","RelatedDescription":"Opened pull request \"Move UnmanagedMemoryAccessor to shared CoreLib partition\" (#15137) at dotnet/coreclr","RelatedBody":""},{"Id":"6882587935","Type":"IssuesEvent","CreatedAt":"2017-11-21T05:02:51","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/445","RelatedDescription":"Closed issue \"Profiling API\" (#445) at dotnet/coreclr","RelatedBody":"Is there any timeframe on a profiling API? Are there any public design docs available at this point?\n\nGreg\n"},{"Id":"6882563381","Type":"IssuesEvent","CreatedAt":"2017-11-21T04:52:18","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15136","RelatedDescription":"Opened issue \"Profiler Interest Group - Announcements\" (#15136) at dotnet/coreclr","RelatedBody":"I'm making this issue as an informal way to flag other issues and discussions that might be relevant to Building .NET profiling tools. This is similar to the .NET announcements repo, but given that profiling is a small crowd I didn't want to create noise for everyone or be very formal about it. Follow the issue if this is something you care about. Hopefully it works well but if not we can try something else.\r\n\r\nPlease don't do discussion directly in this issue, just links. Thanks!\r\n\r\n"},{"Id":"6882415580","Type":"PullRequestEvent","CreatedAt":"2017-11-21T03:49:25","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15132","RelatedDescription":"Merged pull request \"Version: Use int.TryFormat & StringBuilder.Append(int)\" (#15132) at dotnet/coreclr","RelatedBody":"Now that `int.TryFormat` is available, along with the more efficient `StringBuilder.Append(int)`, use them in `Version`."},{"Id":"6882178225","Type":"PullRequestEvent","CreatedAt":"2017-11-21T02:20:33","Actor":"Rattenkrieg","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15135","RelatedDescription":"Opened pull request \"[WIP] String dedup PoC\" (#15135) at dotnet/coreclr","RelatedBody":"PoC for #14208 \r\n\r\nCurrently able to deduplicate strings in non-concurrent workstation mode.\r\n\r\nAlgorithm in brief:\r\n* GC cycle N: Mark phase (only STW at the moment):\r\n  * During mark phase of rootset and heap check whether we are interested in current object pointer:\r\n  pointer is string && is evacuating from gen1 && at least has sizeof ptr characters;\r\n  * Enqueue interesting pointer in `StringDedupQueue`;\r\n  * If stats suggest to compact we need to adjust freshly enqueued pointers to their relocation addresses - look at `is_string_and_about_to_be_promoted_to_gen2` call sites. That is double work, but I see no way to know in advance whether we are going to compact (with exception of rare cases when user ask for compaction by `GCCollectionMode.Forced`).\r\n* After GC in parallel with mutators `StringDedupThread` populating `StringDedupTable` with strings from `StringDedupQueue`:\r\n  * Currently `StringDedupThread` is running synchronously after STW gc to ease my debugging.\r\n* GC cycle N + x, where x is number of GC cycles before next gen2 compaction: Relocate phase (only STW at the moment):\r\n  * `adjust_string_dups_reloc_pointers` is called right before relocating pointers - for each group of duplicates from `StringDedupTable` we seek for first live string in the heap and destructively adjusting other strings by marking their object headers with `0xFF...` and writing pointer to original into its first sizeof ptr characters;\r\n  * During reloc phase of rootset and heap call to `try_relocate_duplicate_string` is made to relocate pointers to duplicates to their original string.\r\n  * Everything is opaque for compact phase - it just memmoving plugs, so duplicates become floating garbage until next gen2 cycle sweep or compact their memory.\r\n\r\nThings to do:\r\n - [ ] Fix code according to style, fix types like `WCHAR` vs `wchar_t`, `BOOL` vs `bool` etc - I need help here;\r\n - [ ] Insert contracts into methods - I know about the document, but I have issues with managing headers and stuff;\r\n - [ ] Make checked runs passing on non-concurrent workstation;\r\n - [ ] Run `StringDedupThread` concurrently, handle related routines like cooperative join;\r\n - [ ] Hack concurrent and server gc.\r\n\r\n"},{"Id":"6882157850","Type":"PullRequestEvent","CreatedAt":"2017-11-21T02:13:15","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15034","RelatedDescription":"Merged pull request \"Set reg conflicts on contained IND\" (#15034) at dotnet/coreclr","RelatedBody":"For shift, rotate, mod and div, we were only excluding conflicting registers on the non-fixed operand if it is not contained. However, we still want to do that for the base and index (if any) on a contained IND.\r\nAlso, fix the LocationInfoListNodePool to attribute its memory usage to CMK_LSRA."},{"Id":"6882154377","Type":"PullRequestEvent","CreatedAt":"2017-11-21T02:12:00","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15110","RelatedDescription":"Merged pull request \"Reduce allocations in StringBuilder.AppendFormat for primitive types\" (#15110) at dotnet/coreclr","RelatedBody":"Use the new `TryFormat` APIs to avoid string allocations for primitive types inside `StringBuilder.AppendFormat`, used by `string.Format`/interpolated strings.\r\n\r\nBenchmark:\r\n\r\n```c#\r\nusing System;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Attributes.Jobs;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class Program\r\n{\r\n    public static void Main() => BenchmarkRunner.Run<Program>();\r\n\r\n    public static readonly Guid s_guid = new Guid(\"8759798E-3430-47AA-9A53-C6813F1A7456\");\r\n\r\n    [Benchmark]\r\n    public void StringFormat()\r\n    {\r\n        Guid guid = s_guid;\r\n        int value = 42;\r\n        for (int i = 0; i < 100_000; i++) string.Format(\"{0} blah {1}\", guid, value);\r\n    }\r\n}\r\n```\r\n\r\nBefore:\r\n\r\n```\r\n       Method |     Mean |     Error |    StdDev |     Gen 0 | Allocated |\r\n------------- |---------:|----------:|----------:|----------:|----------:|\r\n StringFormat | 20.78 ms | 0.1334 ms | 0.1183 ms | 7437.5000 |  29.75 MB |\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n       Method |     Mean |     Error |    StdDev |     Gen 0 | Allocated |\r\n------------- |---------:|----------:|----------:|----------:|----------:|\r\n StringFormat | 19.80 ms | 0.0735 ms | 0.0688 ms | 4187.5000 |  16.78 MB |\r\n```\r\n\r\nAdditional improvements can be looked into subsequently, such as avoiding any `itemFormat` string allocations."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6882515968","Type":"PullRequestEvent","CreatedAt":"2017-11-21T04:32:14","Actor":"PMExtra","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8071","RelatedDescription":"Opened pull request \"Update developer-guide.md\" (#8071) at dotnet/cli","RelatedBody":"- Rename OS X to macOS (since 10.12 sierra, Apple has renamed their \"OS X\" operating system to \"macOS\").\r\n- Add Hombrew official website.\r\n"},{"Id":"6880883032","Type":"PullRequestEvent","CreatedAt":"2017-11-20T20:14:14","Actor":"4creators","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8070","RelatedDescription":"Opened pull request \"Fix version displayed after install, provide information on more installed packeges\" (#8070) at dotnet/cli","RelatedBody":"Partially fixes #8042 \r\n\r\nPR adds information about versions of runtime, packages and tools installed with bundle installer\r\ndisplaying them at the last successful install view. Version data are read from src/DependencyVersions.deps\r\nfile what allows for automatic updates to installer UI keeping it in sync with changing source.\r\n"},{"Id":"6880844672","Type":"PullRequestEvent","CreatedAt":"2017-11-20T20:05:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8046","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#8046) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171117-080031\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171117-080031 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6880841353","Type":"IssuesEvent","CreatedAt":"2017-11-20T20:04:58","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8047","RelatedDescription":"Closed issue \"dotnet new console doesn't work with Thai locale.\" (#8047) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nRun this command on shell on Ubuntu 16.04.03:\r\n\r\n````\r\n LC_ALL=th_TH.UTF-8 LANG=th_TH.UTF-8 dotnet new console \r\n````\r\n\r\n## Expected  behavior\r\n\r\n\r\nIt should create project files and these messages below:\r\n\r\n````\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /home/vee/Develop/exper/dotnet/ex1/ex1.csproj...\r\n  Restoring packages for /home/vee/Develop/exper/dotnet/ex1/ex1.csproj...\r\n  Generating MSBuild file /home/vee/Develop/exper/dotnet/ex1/obj/ex1.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/vee/Develop/exper/dotnet/ex1/obj/ex1.csproj.nuget.g.targets.\r\n  Restore completed in 141.04 ms for /home/vee/Develop/exper/dotnet/ex1/ex1.csproj.\r\n\r\n\r\nRestore succeeded.\r\n````\r\n\r\n\r\n## Actual behavior\r\n\r\nnew, console options will be uknown\r\n\r\n````\r\nUnknown option: new\r\nUnknown option: console\r\n.NET Command Line Tools (2.0.3)\r\nUsage: dotnet [runtime-options] [path-to-application]\r\nUsage: dotnet [sdk-options] [command] [arguments] [command-options]\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nSDK commands:\r\n  new              Initialize .NET projects.\r\n  restore          Restore dependencies specified in the .NET project.\r\n  run              Compiles and immediately executes a .NET project.\r\n  build            Builds a .NET project.\r\n  publish          Publishes a .NET project for deployment (including the runtime).\r\n  test             Runs unit tests using the test runner specified in the project.\r\n  pack             Creates a NuGet package.\r\n  migrate          Migrates a project.json based project to a msbuild based project.\r\n  clean            Clean build output(s).\r\n  sln              Modify solution (SLN) files.\r\n  add              Add reference to the project.\r\n  remove           Remove reference from the project.\r\n  list             List reference in the project.\r\n  nuget            Provides additional NuGet commands.\r\n  msbuild          Runs Microsoft Build Engine (MSBuild).\r\n  vstest           Runs Microsoft Test Execution Command Line Tool.\r\n\r\nCommon options:\r\n  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\r\n  -h|--help             Show help.\r\n\r\nRun 'dotnet COMMAND --help' for more information on a command.\r\n\r\nsdk-options:\r\n  --version        Display .NET Core SDK version.\r\n  --info           Display .NET Core information.\r\n  -d|--diagnostics Enable diagnostic output.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>    Path containing probing policy and assemblies to probe for.\r\n  --fx-version <version>            Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx Roll forward on no candidate shared framework is enabled.\r\n  --additional-deps <path>          Path to additonal deps.json file.\r\n\r\n````\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n````\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  eb1d5ee318\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n````\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6881694379","Type":"IssuesEvent","CreatedAt":"2017-11-20T23:29:13","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/573","RelatedDescription":"Closed issue \"There's no way to get the managed object size in memory\" (#573) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nThere is no way to get the actual (or even an approximate) size of the cached object in the memory.\r\n\r\nThe case is, we have +100 customized cache for different purposes to accelerate our platform, for each cache we have\r\n- Cache MaxSize\r\n- Cache ConsumedSize\r\n- Cache RemainingSize\r\n\r\nWhenever we insert some object to be cached, we should detect its size to re-calculate aforementioned cache properties.\r\n\r\nI know that's a complex issue and depends on many factors, so far we have some workarounds but non of them is official and we afraid to be changed in any minor or major release.\r\n\r\nShould you add any API to get the object size in the memory ? or at least Type size and then we can add the object-specific data length.\r\n\r\nRelated Topics\r\n\r\n[Workaround 1](https://stackoverflow.com/questions/1128315/find-size-of-object-instance-in-bytes-in-c-sharp)\r\n[What Microsoft says about this issue](https://blogs.msdn.microsoft.com/cbrumme/2003/04/15/size-of-a-managed-object/)"},{"Id":"6881690742","Type":"IssuesEvent","CreatedAt":"2017-11-20T23:28:04","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/557","RelatedDescription":"Closed issue \"Net standard 2.0 on Win 10 Mobile ?\" (#557) at dotnet/standard","RelatedBody":"I have phone with installed Fall Creators Update (10.0.15254.1) and VS can't deploy app on phone, while on desktop works fine. Do Win 10 Mobile with Fall Creators Update support apps that use net standard 2.0 ?"},{"Id":"6881685465","Type":"IssuesEvent","CreatedAt":"2017-11-20T23:26:17","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/572","RelatedDescription":"Closed issue \"Cannot open class diagram .cd file\" (#572) at dotnet/standard","RelatedBody":"Dear,\r\n\r\nIn a .net standard library project, on vs2017 15.4, we cannot open a class diagram file."},{"Id":"6880680323","Type":"IssuesEvent","CreatedAt":"2017-11-20T19:29:54","Actor":"fleed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/588","RelatedDescription":"Closed issue \"Issue restoring referenced packages\" (#588) at dotnet/standard","RelatedBody":"I'm porting some old **.NET 2.0** projects to the new `.csproj` format and replacing project references with packages.\r\nI have the following projects:\r\n- Project A (ProjectA.dll): **.NET 2.0** -> **netstandard2.0** - packed in `PackageA`\r\n- Project B (ProjectB.dll): **.NET 2.0** -> **net461** (references `System.Windows.Forms`) - packed in `PackageB`\r\n- Project C (ProjectC.dll): **.NET 2.0** -> **net461** (references `PackageA` and `PackageB`) - packed in `PackageC`\r\n- ConsoleApp: new, **netcoreapp2.0**, references `PackageC`\r\n\r\nInspecting the packages, I can see that `PackageC` correctly references the other two packages, both under **.NET framework,Version=4.6.1** and *exclude=Build,Analyzers*.\r\n\r\nAnyway, when restoring the project `ConsoleApp`, I can see in `Visual Studio 2015.4.4` that the other two packages don't appear in the dependency tree.\r\nI can still build the `ConsoleApp`, but when running, I'm getting `System.IO.FileNotFoundException: Could not load file or assembly 'ProjectA.dll, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. The system cannot find the specified file`\r\n\r\nMy `dotnet --info`:\r\n\r\n```\r\n.NET Command Line Tools (2.1.1-preview-007165)\r\n\r\nProduct Information:\r\n Version:            2.1.1-preview-007165\r\n Commit SHA-1 hash:  a4d1a8e0bb\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.1-preview-007165\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n**Additional remarks**:\r\n\r\n- all packages contain their assemblies within the expected path **lib\\netstandard2.0** for `PackageA`, **lib\\net461** for the others\r\n- I've removed the old *packages.config* files from old projects\r\n- I'm using a local folder added to `NuGet.config` for the packages"},{"Id":"6880474430","Type":"PullRequestEvent","CreatedAt":"2017-11-20T18:45:04","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/590","RelatedDescription":"Merged pull request \"Update BuildTools to 2.0.0-servicing-02217-01 (release/2.0.0)\" (#590) at dotnet/standard","RelatedBody":"This includes the updated compiler version, which must be disabled when it's not compatible with the available MSBuild."},{"Id":"6880183597","Type":"PullRequestEvent","CreatedAt":"2017-11-20T17:40:26","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/590","RelatedDescription":"Opened pull request \"Update BuildTools to 2.0.0-servicing-02217-01 (release/2.0.0)\" (#590) at dotnet/standard","RelatedBody":"This includes the updated compiler version, which must be disabled when it's not compatible with the available MSBuild."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6882637777","Type":"PullRequestEvent","CreatedAt":"2017-11-21T05:24:48","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25265","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to stable, servicing-25921-02, respectively (release/2.0.0)\" (#25265) at dotnet/corefx","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`579b871`](https://github.com/dotnet-maestro-bot/corefx/commits/579b87109e1218e7365c97a1c82e79c0a6c7371c) Update CoreClr, CoreFx to servicing-25917-03, servicing-25921-02, respectively\r\n   * :hourglass: **CROSS Check** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/CROSS_check_prtest/733/)\r\n   * :hourglass: **CROSS Check** Triggered. (1/4 on win2012-20171003) [Details]()\r\n   * :hourglass: **CROSS Check** Triggered. [Details]()\r\n   * :hourglass: **Linux arm Release Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux_arm_cross_release_prtest/41/)\r\n   * :hourglass: **Linux arm Release Build** Triggered. (8/13 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Linux arm Release Build** Triggered. (12/13 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Linux x64 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/39/)\r\n   * :hourglass: **NETFX x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/37/)\r\n   * :hourglass: **NETFX x86 Release Build** Triggered [Details]()\r\n   * :hourglass: **OSX x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/37/)\r\n   * :hourglass: **Packaging All Configurations x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/37/)\r\n   * :hourglass: **Packaging All Configurations x64 Debug Build** Triggered [Details]()\r\n   * :hourglass: **Tizen armel Debug Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/tizen_armel_cross_debug_prtest/742/)\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (9/13 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (11/13 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. [Details]()\r\n   * :hourglass: **UWP CoreCLR x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/44/)\r\n   * :hourglass: **UWP CoreCLR x64 Debug Build** Triggered [Details]()\r\n   * :hourglass: **UWP NETNative x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/37/)\r\n   * :hourglass: **UWP NETNative x86 Release Build** Triggered [Details]()\r\n   * :hourglass: **Windows x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/37/)\r\n   * :hourglass: **Windows x64 Debug Build** Triggered [Details]()\r\n   * :hourglass: **Windows x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/37/)\r\n   * :hourglass: **Windows x86 Release Build** Triggered [Details]()\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/CROSS_check_prtest/733/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details]()\r\n   * :heavy_check_mark: **Packaging All Configurations x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/37/)\r\n   * :heavy_check_mark: **UWP CoreCLR x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/44/)\r\n   * :heavy_check_mark: **UWP NETNative x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/37/)\r\n   * :heavy_check_mark: **Windows x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/37/)\r\n * [`5d497e8`](https://github.com/dotnet-maestro-bot/corefx/commits/5d497e8d3c5021d1da4d5fafe1cbd41c5eb6162e) Update CoreClr, CoreFx to servicing-25917-03, servicing-25917-01, respectively\r\n   * :x: **UWP CoreCLR x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/38/)\r\n   * :hourglass: **CROSS Check** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/CROSS_check_prtest/729/)\r\n   * :hourglass: **CROSS Check** Triggered. (4/16 on win2012-20171003) [Details]()\r\n   * :hourglass: **CROSS Check** Triggered. (33/34 on win2012-20171003) [Details]()\r\n   * :hourglass: **Linux arm Release Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux_arm_cross_release_prtest/36/)\r\n   * :hourglass: **Linux x64 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/34/)\r\n   * :hourglass: **NETFX x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/32/)\r\n   * :hourglass: **NETFX x86 Release Build** Triggered [Details]()\r\n   * :hourglass: **OSX x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :hourglass: **Tizen armel Debug Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/tizen_armel_cross_debug_prtest/738/)\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (5/5 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (15/15 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (17/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (23/23 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **UWP CoreCLR x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/38/)\r\n   * :hourglass: **Windows x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :hourglass: **Windows x64 Debug Build** Triggered [Details]()\r\n   * :hourglass: **Windows x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/32/)\r\n   * :hourglass: **Windows x86 Release Build** Triggered [Details]()\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/CROSS_check_prtest/729/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details]()\r\n   * :heavy_check_mark: **Linux arm Release Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux_arm_cross_release_prtest/36/)\r\n   * :heavy_check_mark: **Linux x64 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/34/)\r\n   * :heavy_check_mark: **NETFX x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/32/)\r\n   * :heavy_check_mark: **OSX x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :heavy_check_mark: **Packaging All Configurations x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :heavy_check_mark: **Tizen armel Debug Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/tizen_armel_cross_debug_prtest/738/)\r\n   * :heavy_check_mark: **UWP NETNative x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/32/)\r\n   * :heavy_check_mark: **Windows x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :heavy_check_mark: **Windows x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/32/)\r\n * [`a0bae9d`](https://github.com/dotnet-maestro-bot/corefx/commits/a0bae9d3686676e4a35042fc04e2dd240caeeea9) Update CoreClr, CoreFx to servicing-25917-03, servicing-25915-01, respectively\r\n   * :x: **UWP CoreCLR x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :x: **Windows x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/26/)\r\n   * :hourglass: **CROSS Check** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/CROSS_check_prtest/723/)\r\n   * :hourglass: **CROSS Check** Triggered. [Details]()\r\n   * :hourglass: **Linux arm Release Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux_arm_cross_release_prtest/30/)\r\n   * :hourglass: **Linux arm Release Build** Triggered. (10/10 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Linux arm Release Build** Triggered. [Details]()\r\n   * :hourglass: **Linux x64 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/28/)\r\n   * :hourglass: **Linux x64 Release Build** Triggered [Details]()\r\n   * :hourglass: **NETFX x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/26/)\r\n   * :hourglass: **OSX x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/26/)\r\n   * :hourglass: **Packaging All Configurations x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/26/)\r\n   * :hourglass: **Tizen armel Debug Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/tizen_armel_cross_debug_prtest/732/)\r\n   * :hourglass: **Tizen armel Debug Build** Triggered. (8/10 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **UWP CoreCLR x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/32/)\r\n   * :hourglass: **UWP CoreCLR x64 Debug Build** Triggered [Details]()\r\n   * :hourglass: **UWP NETNative x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/26/)\r\n   * :hourglass: **Windows x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/26/)\r\n   * :hourglass: **Windows x64 Debug Build** Triggered [Details]()\r\n   * :hourglass: **Windows x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/26/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/CROSS_check_prtest/723/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details]()\r\n   * :heavy_check_mark: **Linux arm Release Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux_arm_cross_release_prtest/30/)\r\n   * :heavy_check_mark: **Linux x64 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/28/)\r\n   * :heavy_check_mark: **NETFX x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/26/)\r\n   * :heavy_check_mark: **OSX x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/26/)\r\n   * :heavy_check_mark: **Packaging All Configurations x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/26/)\r\n   * :heavy_check_mark: **Tizen armel Debug Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/release_2.0.0/job/tizen_armel_cross_debug_prtest/732/)\r\n   * :heavy_check_mark: **UWP NETNative x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/26/)\r\n   * :heavy_check_mark: **Windows x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/release_2.0.0/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/26/)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6882602830","Type":"PullRequestEvent","CreatedAt":"2017-11-21T05:09:27","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25401","RelatedDescription":"Opened pull request \"Disable parallelism in PerfCounter tests\" (#25401) at dotnet/corefx","RelatedBody":"Fixes #25400 (?)\r\n\r\nThere is at least some attempt at thread safety in the performance counters API but it seems quite that the data structures are not fully protected against eg modifying categories while concurrently enumerating them or reading counters. For example, `_customCategoryTable`, a HashTable, is modified [here](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.PerformanceCounter/src/System/Diagnostics/PerformanceCounterLib.cs#L706) without protection against concurrent write at this same location (or in other places).\r\n\r\nIt is also possible that the results of multiple registry reads (eg for categories, instances, and data) are becoming mutually inconsistent because of intervening concurrent modifications to categories, etc.\r\n\r\nRather than attempt to analyze the possibilities (which we might not want to attempt to \"fix\" anyway) let's try running the tests serially."},{"Id":"6882343347","Type":"PullRequestEvent","CreatedAt":"2017-11-21T03:21:11","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25297","RelatedDescription":"Merged pull request \"make sure crypto_Init is done before calling ssl_init\" (#25297) at dotnet/corefx","RelatedBody":"fixes #25230 \r\n\r\nThe problem is that openssl initialization is not re-entrant/thread safe.\r\nThe trace shows SSL_library_init calls OBJ_NAME_add() This is exactly what crypto init would do. Further more, locking needs to be set in openssl. \r\n\r\nThis change ensures crypto init is called before ssl_init. That should be no-op if CryptoNative_EnsureOpenSslInitialized() was already called. \r\n\r\nWith this change  did 5000 iterations of HTTP test suite without any crash.\r\n"},{"Id":"6882343311","Type":"IssuesEvent","CreatedAt":"2017-11-21T03:21:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25230","RelatedDescription":"Closed issue \"HTTP unit tests crashes sometimes\" (#25230) at dotnet/corefx","RelatedBody":"This is on Ubuntu 17.04. I'm not sure yet if other platforms are affected. \r\nI build HTTP uni tests and than I use RunTest.sh to it in loop with outer-loop tests enabled. \r\n\r\n*** Error in `/home/build/github/corefx/bin/testhost/netcoreapp-Linux-Debug-x64//dotnet': double free or corruption (fasttop): 0x00007f07f800e680 ***\r\n\r\nif enabled, core file is created \r\n```\r\n(lldb) bt\r\n* thread #1: tid = 32784, 0x00007f08a74ed77f libc.so.6`__GI_raise(sig=2) + 159 at raise.c:58, name = 'dotnet', stop reason = signal SIGABRT\r\n  * frame #0: 0x00007f08a74ed77f libc.so.6`__GI_raise(sig=2) + 159 at raise.c:58\r\n    frame #1: 0x00007f08a74ef37a libc.so.6`__GI_abort + 362 at abort.c:89\r\n    frame #2: 0x00007f08a7531090 libc.so.6`__libc_message(do_abort=2, fmt=<unavailable>) + 704 at libc_fatal.c:175\r\n    frame #3: 0x00007f08a753ac3a libc.so.6`_int_free + 1578 at malloc.c:5048\r\n    frame #4: 0x00007f08a753abad libc.so.6`_int_free(av=<unavailable>, p=<unavailable>, have_lock=<unavailable>) + 1437 at malloc.c:3904\r\n    frame #5: 0x00007f08a753ed2c libc.so.6`__GI___libc_free(mem=<unavailable>) + 76 at malloc.c:2984\r\n    frame #6: 0x00007f0805b650dd libcrypto.so.1.0.0`CRYPTO_free + 29\r\n    frame #7: 0x00007f0805b67c3c libcrypto.so.1.0.0`OBJ_NAME_add + 140\r\n    frame #8: 0x00007f0805c26a68 libcrypto.so.1.0.0`EVP_add_digest + 40\r\n    frame #9: 0x00007f0805f91d3f libssl.so.1.0.0`SSL_library_init + 399\r\n    frame #10: 0x00007f07dd138651 System.Security.Cryptography.Native.OpenSsl.so`::CryptoNative_EnsureLibSslInitialized() + 17 at pal_ssl.cpp:19\r\n    frame #11: 0x00007f082db42bc6\r\n    frame #12: 0x00007f082db41bc4\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6882338468","Type":"PullRequestEvent","CreatedAt":"2017-11-21T03:19:22","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25360","RelatedDescription":"Merged pull request \"Negotiate Async tests - remove blocking\" (#25360) at dotnet/corefx","RelatedBody":"ref #25346 \r\n\r\nFound a bunch more in the Negotiate tests, this should be it doing a search for \".Wait\" on all files here.\r\n\r\nI cleaned up the unneeded ConfigureAwait and added a range to the SslTest as well."},{"Id":"6882337795","Type":"PullRequestEvent","CreatedAt":"2017-11-21T03:19:06","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25399","RelatedDescription":"Merged pull request \"System.Net.Http Removing unneeded blocking from tests\" (#25399) at dotnet/corefx","RelatedBody":"Removed anywhere that had an WaitAll\r\n\r\nref #25346\r\n\r\n"},{"Id":"6882247789","Type":"PullRequestEvent","CreatedAt":"2017-11-21T02:46:11","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25312","RelatedDescription":"Merged pull request \"Fix Process StartTime offset on Linux due to device sleeping\" (#25312) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/25291"},{"Id":"6882247775","Type":"IssuesEvent","CreatedAt":"2017-11-21T02:46:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25291","RelatedDescription":"Closed issue \"Linux Process.StartTime is in the future\" (#25291) at dotnet/corefx","RelatedBody":"TestStartTimeProperty failed on my laptop:\r\n```\r\n   System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty [FAIL]\r\n      Assert.InRange() Failure\r\n      Range:  (11/17/17 3:21:16 AM - 11/16/17 12:10:45 PM)\r\n      Actual: 11/17/17 3:21:17 AM\r\n      Stack Trace:\r\n         /home/tmds/repos/corefx/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs(115,0): at System.Diagnostics.Tests.ProcessThreadTests.<TestStartTimeProperty>d__3.MoveNext()\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n         --- End of stack trace from previous location where exception was thrown ---\r\nFinished:    System.Diagnostics.Process.Tests\r\n```\r\nThe actual and lower range values are in the future.\r\n\r\nTo calculate the StartTime, the boot time of the system is used. It is calculated as follows:\r\n\r\nhttps://github.com/dotnet/corefx/blob/c280881a048ee9d9fbfc629ca55d755d3e2b045d/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L483\r\n\r\nProbably Stopwatch.GetTimestamp doesn't increment while my laptop is sleeping."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6882504757","Type":"IssuesEvent","CreatedAt":"2017-11-21T04:27:10","Actor":"Droni","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23218","RelatedDescription":"Reopened issue \"Two CodeProviders have same names\" (#23218) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.4.4\r\n\r\n```cs\r\nnamespace Microsoft.CodeAnalysis.VisualBasic.ConvertToInterpolatedString\r\n{\r\n\t[ExportCodeRefactoringProvider(\"Visual Basic\", new string[]\r\n\t{\r\n\r\n\t}, Name = \"Extract Method Code Action Provider\"), Shared]\r\n\tinternal class VisualBasicConvertConcatenationToInterpolatedStringRefactoringProvider : AbstractConvertConcatenationToInterpolatedStringRefactoringProvider\r\n\t{\r\n        }\r\n}\r\n```\r\n\r\n```cs\r\nnamespace Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod\r\n{\r\n\t[ExportCodeRefactoringProvider(\"C#\", new string[]\r\n\t{\r\n\t\t\"Visual Basic\"\r\n\t}, Name = \"Extract Method Code Action Provider\"), Shared]\r\n\tinternal class ExtractMethodCodeRefactoringProvider : CodeRefactoringProvider\r\n\t{\r\n        }\r\n}\r\n```"},{"Id":"6882099952","Type":"PullRequestEvent","CreatedAt":"2017-11-21T01:52:04","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22647","RelatedDescription":"Merged pull request \"VB EE: Properly handle syntax errors in synthesized assignments\" (#22647) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nThe EE displays \"Internal error in expression evaluator\" when the value of local variable is set to an expression that's not syntactically correct in a Watch window.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://github.com/dotnet/roslyn/issues/18531\r\n\r\n**Workarounds, if any**\r\n\r\nNone. \r\n\r\n**Risk**\r\n\r\nSmall. Trivial change.\r\n\r\n**Performance impact**\r\n\r\nNone.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nThe binder is able to work properly in presence of some syntax errors, but throws for others. Our EE syntax error tests only covered syntax error that was not causing the binder to throw.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n"},{"Id":"6882077670","Type":"IssuesEvent","CreatedAt":"2017-11-21T01:43:40","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23322","RelatedDescription":"Opened issue \"Compiler does not warn on unused locals on joined assignments\" (#23322) at dotnet/roslyn","RelatedBody":"**Code example**\r\n```\r\nclass C\r\n{\r\n    int M()\r\n    {\r\n        int a = 0;\r\n        int b = 0;\r\n        a = b = 0;\r\n        return b;\r\n    }\r\n}\r\n```\r\n**Expected**\r\nProvides a diagnostic that 'a' is unused\r\n\r\n**Actual**\r\nNo diagnostics\r\n\r\nroslyn-analyzers uses compiler warnings as a source of unused locals diagnostics"},{"Id":"6882007892","Type":"PullRequestEvent","CreatedAt":"2017-11-21T01:18:45","Actor":"shyamnamboodiripad","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23321","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#23321) at dotnet/roslyn","RelatedBody":""},{"Id":"6882002927","Type":"IssuesEvent","CreatedAt":"2017-11-21T01:16:59","Actor":"smitpatel","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23320","RelatedDescription":"Opened issue \"Null check can be simplified produces code with compilation error\" (#23320) at dotnet/roslyn","RelatedBody":"```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace NullCheck\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var blog = GetBlog();\r\n\r\n            var queryable = new List<int>().AsQueryable();\r\n            var query = from i in queryable\r\n                        where (blog == null ? null : blog.Id) == \"1\"\r\n                        select i;\r\n\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n\r\n        static Blog GetBlog()\r\n        {\r\n            return new Blog();\r\n        }\r\n    }\r\n\r\n    public class Blog\r\n    {\r\n        public string Id { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nIn above code, VS suggests that null check can be simplified.\r\n![image](https://user-images.githubusercontent.com/1528107/33049724-3d68d098-ce16-11e7-9225-0ce67f7a4252.png)\r\n\r\nBut after applying the code fix using VS\r\n![image](https://user-images.githubusercontent.com/1528107/33049752-56c0c302-ce16-11e7-924d-778ca015b8f3.png)\r\n\r\n**Actual Behavior**:\r\nError message:\r\n1>Program.cs(15,32,15,40): error CS8072: An expression tree lambda may not contain a null propagating operator.\r\n\r\n**Expected Behavior**:\r\nVS should not suggest code fix to simplify null check when inside expression tree lambda code.\r\n\r\n**Version Used**: \r\nVisual Studio 15.5.0 Preview 5.0 [27119.0.d15rel]\r\n\r\n\r\n\r\n"},{"Id":"6881988794","Type":"PullRequestEvent","CreatedAt":"2017-11-21T01:12:05","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23246","RelatedDescription":"Merged pull request \"Removed missing references and p2p transitiveness from project succes…\" (#23246) at dotnet/roslyn","RelatedBody":"…sfully loaded check.\r\n\r\nalso, now we log skeleton assembly failure reasons to improve those common cases\r\n\r\n**Customer scenario**\r\n\r\nUser opens a solution and don't see any semantic errors from opened files\r\n\r\n**Bugs this fixes:**\r\n\r\nrelated to https://github.com/dotnet/roslyn/issues/21629\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nfix either design time errors or errors from cross language p2p reference project.\r\n\r\n**Risk**\r\n\r\nthere is a risk where we might show more cascading semantic errors than before.\r\n\r\n**Performance impact**\r\n\r\nit shouldn't affect performance much.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nthis is not a functional bug but rather we are tweaking user experience to find better error situation experience. users only get into this situation when solution has errors. we are experimenting with how much errors we should show users in such situation.\r\n\r\n**How was the bug found?**\r\n\r\ndogfooding, feedbacks\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6882329484","Type":"PullRequestEvent","CreatedAt":"2017-11-21T03:15:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4973","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4973) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6882317173","Type":"PullRequestEvent","CreatedAt":"2017-11-21T03:11:28","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4973","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4973) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6882159602","Type":"PullRequestEvent","CreatedAt":"2017-11-21T02:13:56","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4972","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4972) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6881801129","Type":"PullRequestEvent","CreatedAt":"2017-11-21T00:04:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4971","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4971) at dotnet/corert","RelatedBody":""},{"Id":"6881687687","Type":"PullRequestEvent","CreatedAt":"2017-11-20T23:27:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4901","RelatedDescription":"Merged pull request \"Enable generation of stack trace data\" (#4901) at dotnet/corert","RelatedBody":"The stack trace metadata supplements reflection metadata to provide information about method names in stack traces (ex. obtained from `Exception.StackTrace` at runtime). I made the emission optional in the compiler. Enabling emission of this data increases the size of a HelloWord-style app by about 300 kB.\r\n\r\nIn this change:\r\n* Actual emission of the data in the compiler. This is done by checking what compiled method bodies don't have reflection information and generating metadata for those.\r\n* Making the mapping table cross platform. The Project X/N version of this emits `ADDR32NB` relocs (RVA) that are Windows-only. I'm switching to `RELPTR32` outside of N/X.\r\n* Enabling S.P.StackTraceMetadata library initializer to run at startup to register a callback from CoreLib.\r\n* Weakening an assert in MetadataTransfor to prevent generation of definition metadata for blocked types. We would have probably done this anyway with the work to enable poking random holes into metadata blocking."},{"Id":"6881469679","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:26:54","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4941","RelatedDescription":"Closed pull request \"[WIP] ILCompiler package publish\" (#4941) at dotnet/corert","RelatedBody":"Adding additional packages to the publish pipeline. Would like some feedback - outputting all built packages to a single folder feels a bit messy, but is how CoreCLR seems to deal with package publish. \r\n\r\ncc @MichalStrehovsky @nattress @jkotas \r\n"},{"Id":"6881388633","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:07:12","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4970","RelatedDescription":"Opened pull request \"Add CA2111 SuppressMessage for these MSDN documented public Pointers\" (#4970) at dotnet/corert","RelatedBody":""},{"Id":"6881285354","Type":"PullRequestEvent","CreatedAt":"2017-11-20T21:46:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4969","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4969) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6880909251","Type":"PullRequestEvent","CreatedAt":"2017-11-20T20:20:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4969","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4969) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6880714287","Type":"PullRequestEvent","CreatedAt":"2017-11-20T19:37:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4968","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4968) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6882053481","Type":"PullRequestEvent","CreatedAt":"2017-11-21T01:34:46","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1762","RelatedDescription":"Merged pull request \"Use shared compiler in CoreGenerateSatelliteAssemblies\" (#1762) at dotnet/sdk","RelatedBody":"The `CoreGenerateSatelliteAssemblies` target uses the `Csc` task to\r\ncreate satellite assemblies. We can greatly speed up the creation of\r\nthese assemblies by telling `Csc` to use the shared compiler server if\r\nit is available, rather than spinning up a new copy of csc.exe for every\r\nsatellite."},{"Id":"6881766531","Type":"PullRequestEvent","CreatedAt":"2017-11-20T23:52:51","Actor":"tmeschter","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1762","RelatedDescription":"Opened pull request \"Use shared compiler in CoreGenerateSatelliteAssemblies\" (#1762) at dotnet/sdk","RelatedBody":"The `CoreGenerateSatelliteAssemblies` target uses the `Csc` task to\r\ncreate satellite assemblies. We can greatly speed up the creation of\r\nthese assemblies by telling `Csc` to use the shared compiler server if\r\nit is available, rather than spinning up a new copy of csc.exe for every\r\nsatellite."},{"Id":"6881432799","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:18:02","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1757","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1757) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171117-080032\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171117-080032 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6881431942","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:17:50","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1742","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1742) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171116-080043\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171116-080043 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6881426600","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:16:32","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1745","RelatedDescription":"Merged pull request \"Making the 'RestoreSources' configurable: sdk\" (#1745) at dotnet/sdk","RelatedBody":"Remove NuGet source references - NuGet.config\r\nSet 'RestoreSources' in RestoreSources.props - import to: Common.props\r\nFixed one test: Microsoft.NET.Publish.Tests.GivenThatWeWantToStoreAProjectWithDependencies.store_nativeonlyassets\r\n\r\nUnrelated:\r\nREADME.md -formatting\r\ntools/PushToBlobFeed.targets - helpful comment\r\n\r\n@dotnet/dotnet-cli\r\n@jcagme\r\n@karajas\r\n@chcosta\r\n"},{"Id":"6881425551","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:16:15","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1756","RelatedDescription":"Merged pull request \"Update the implicit Runtime Framework version to 2.0\" (#1756) at dotnet/sdk","RelatedBody":"This one is targeting master."},{"Id":"6880743061","Type":"PullRequestEvent","CreatedAt":"2017-11-20T19:43:18","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1751","RelatedDescription":"Merged pull request \"Add DisableImplicitTransitiveReferences\" (#1751) at dotnet/sdk","RelatedBody":"This implements the feature described in #1750. It provides projects with a way to\r\nexplicitly opt-out of implicit transitive refernces by setting the\r\nDisableImplicitTransitiveReferences property to `'true'`.\r\n\r\ncloses #1750"},{"Id":"6880743047","Type":"IssuesEvent","CreatedAt":"2017-11-20T19:43:18","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1750","RelatedDescription":"Closed issue \"Feature request: DisableImplicitTransitiveReferences\" (#1750) at dotnet/sdk","RelatedBody":"Implicit transitive references is a neat feature and definitely a benefit for the vast majority of projects out there. The feature is not free though and trying to enable it on [dotnet/roslyn](https://github.com/dotnet/roslyn) has caused me no end of headaches. In particular:\r\n\r\n- [VSIX #433](https://github.com/dotnet/sdk/issues/433): The VSSDK build tasks do not multi-targeting nor do they understand the new metadata the SDK is attaching to products. Before implicit transitive references this was fine because I didn't reveal my multi-targeted projects to the VSSDK. Now I can't avoid doing so. This issue can be worked around but is tedious. \r\n- [CreatePkgDef command line length](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/525889): The CreatePkgDef command takes as an input on the command line all references a project contains. Implicit transitive references, via the NuGet graph explosion of references, puts so many references on the command line that it blows past the 32,000 character limit Windows supports\r\n- RAR time: More references means more time spent in RAR. This causes a roughly 31% increase in build time for the Roslyn repo. \r\n\r\nTo work around this I think the SDK should support the ability to opt out of implicit transitive references. \r\n\r\n``` xml\r\n<DisableImplicitTransitiveReferences>true</DisableImplicitTransitiveReferences>\r\n```\r\n\r\nThis will make it significantly easier to adopt the SDK into existing projects.\r\n\r\nNote: I'm aware you can unofficially disable this today by overriding the `\"IncludeTransitiveProjectReferences\"` target. That work around is unsupported and simply can't be done when using the new MSBuild file format + directory build props / targets. \r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":25,"RawContent":null},{"Id":"931255246872915968","CreatedAt":"2017-11-16T20:18:47+00:00","UserScreenname":"dotnet","Text":"Migrate your .NET apps to the cloud and benefit from easier deployments and scalability, without rearchitecting you… https://t.co/gNfBFe3Sbh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":59,"RawContent":null},{"Id":"931205222579318784","CreatedAt":"2017-11-16T17:00:00+00:00","UserScreenname":"dotnet","Text":"Having trouble moving to .NET Core because of missing Windows APIs? Introducing the Windows Compatibility Pack for… https://t.co/s3KKSJ467u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":150,"FavoriteCount":85,"RawContent":null}]}},"RunOn":"2017-11-21T05:30:21.9207453Z","RunDurationInMilliseconds":8410}