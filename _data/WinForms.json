{"Data":{"GitHub":{"Issues":[{"Id":"603773825","IsPullRequest":true,"CreatedAt":"2020-04-23T04:38:31","Actor":"dotnet-maestro[bot]","Number":"3104","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200421.15\r\n- **Date Produced**: 4/22/2020 7:13 AM\r\n- **Commit**: ec9d33daf4f1922b2f36f548752ac4539f370c91\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.5.20221.15\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3104)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3104","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3104)"},{"Id":"605139588","IsPullRequest":true,"CreatedAt":"2020-04-23T02:51:11","Actor":"Anipik","Number":"3123","RawContent":null,"Title":"Manually add publishing for p4 and p5 channels in preview4","State":"closed","Body":"The change got merged in master, it needed to be in preview4 \r\nso just cherry-picking the change\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3123)","Url":"https://github.com/dotnet/winforms/pull/3123","RelatedDescription":"Closed or merged PR \"Manually add publishing for p4 and p5 channels in preview4\" (#3123)"},{"Id":"604963368","IsPullRequest":true,"CreatedAt":"2020-04-22T23:18:41","Actor":"kpreisser","Number":"3119","RawContent":null,"Title":"Remove dead code in TaskDialogPage.Bind()","State":"closed","Body":"## Proposed changes\r\n\r\n- Remove code which would set `TaskDialogRadioButton.Checked` to `false` after binding it, in case another radio button was already checked.\r\nThis code (`radioButton.Checked = false;`) will never execute since `TaskDialogPage.Validate()` will already have ensured that only a single button is checked. Additionally, that code would actually throw if executed here as the button has already been bound.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None; the condition (more than one radio button is checked) cannot be met in the current code.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing and code review\r\n\r\nThanks!\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3119)","Url":"https://github.com/dotnet/winforms/pull/3119","RelatedDescription":"Closed or merged PR \"Remove dead code in TaskDialogPage.Bind()\" (#3119)"},{"Id":"603782796","IsPullRequest":true,"CreatedAt":"2020-04-22T22:45:12","Actor":"RussKie","Number":"3105","RawContent":null,"Title":"Move to NetCorePublic-Pool","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3105)","Url":"https://github.com/dotnet/winforms/pull/3105","RelatedDescription":"Closed or merged PR \"Move to NetCorePublic-Pool\" (#3105)"},{"Id":"605120765","IsPullRequest":false,"CreatedAt":"2020-04-22T22:45:11","Actor":"weltkante","Number":"3122","RawContent":null,"Title":"Bugfixes from Xunit.StaFact nuget package not consumed","State":"open","Body":"**.NET Core Version:**\r\n5.0 master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot applicable\r\n\r\n**Problem description:**\r\n\r\nThe nuget package `Xunit.StaFact` used by WinForms had a bug which prevents execution of tests inside VS: <details><summary>VS test error message</summary>\r\n\r\n```\r\n[xUnit.net 00:00:00.47] System.Windows.Forms.Tests: Catastrophic error during deserialization: System.InvalidOperationException: Could not de-serialize type 'Xunit.Sdk.WinFormsTheoryTestCase' because it lacks a parameterless constructor.\r\n   at Xunit.Serialization.XunitSerializationInfo.DeserializeSerializable(Type type, String serializedValue) in C:\\Dev\\xunit\\xunit\\src\\common\\XunitSerializationInfo.cs:line 213\r\n   at Xunit.Serialization.XunitSerializationInfo.Deserialize(Type type, String serializedValue) in C:\\Dev\\xunit\\xunit\\src\\common\\XunitSerializationInfo.cs:line 110\r\n   at Xunit.Sdk.SerializationHelper.Deserialize[T](String serializedValue) in C:\\Dev\\xunit\\xunit\\src\\common\\SerializationHelper.cs:line 40\r\n   at Xunit.Sdk.XunitTestFrameworkExecutor.Deserialize(String value) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\XunitTestFrameworkExecutor.cs:line 84\r\n   at Xunit.DefaultTestCaseBulkDeserializer.<BulkDeserialize>b__2_0(String serialization) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\Descriptor\\DefaultTestCaseBulkDeserializer.cs:line 22\r\n   at System.Linq.Utilities.<>c__DisplayClass2_0`3.<CombineSelectors>b__0(TSource x)\r\n   at System.Linq.Enumerable.SelectListIterator`2.ToList()\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at Xunit.DefaultTestCaseBulkDeserializer.BulkDeserialize(List`1 serializations) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\Descriptor\\DefaultTestCaseBulkDeserializer.cs:line 22\r\n   at Xunit.Xunit2.BulkDeserialize(List`1 serializations) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\Frameworks\\v2\\Xunit2.cs:line 74\r\n   at Xunit.Runner.VisualStudio.VsTestRunner.RunTestsInAssembly(IRunContext runContext, IFrameworkHandle frameworkHandle, LoggerHelper logger, TestPlatformContext testPlatformContext, RunSettings runSettings, IMessageSinkWithTypes reporterMessageHandler, AssemblyRunInfo runInfo) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.visualstudio\\VsTestRunner.cs:line 562\r\n```\r\n\r\n</details>\r\n\r\n The package is referenced in version `0.3.18` and the issue has been [brought up](https://github.com/AArnott/Xunit.StaFact/issues/30) and [fixed](https://github.com/AArnott/Xunit.StaFact/pull/37) in the origin repository, it is available in nuget package `1.0.19-beta`\r\n\r\nUnfortunately just updating the nuget package doesn't work, because to properly support `WinFormsStaFact` they also added a dependency on `FrameworkReference` on `Microsoft.WindowsDesktop.App` to the nuget package.\r\n\r\nWhen updating the nuget package this leads to referencing the SDK WinForms in addition to the locally built WinForms, causing conflicts in all test projects.\r\n\r\nI have no idea how to properly fix this, but I can [work around](https://github.com/dotnet/winforms/compare/master...weltkante:stafact) by dropping all `TransitiveFrameworkReference` obtained from nuget packages to prevent upgrading the SDK to a DesktopApp. No idea what the proper resolution is to consume the `XUnit.StaFact` bugfixes, I don't understand the arcade build system.\r\n\r\n**Expected behavior:**\r\nBugfixes for Xunit.StaFact should be consumed\r\n\r\n**Minimal repro:**\r\nTry to run StaTheory or WinFormsTheory with complex MemberData inside Visual Studio\r\n\r\n/cc @hughbe @RussKie FYI","Url":"https://github.com/dotnet/winforms/issues/3122","RelatedDescription":"Open issue \"Bugfixes from Xunit.StaFact nuget package not consumed\" (#3122)"},{"Id":"605110370","IsPullRequest":false,"CreatedAt":"2020-04-22T22:18:39","Actor":"weltkante","Number":"3121","RawContent":null,"Title":"Some tests depend on machine specifics","State":"open","Body":"**.NET Core Version:**\r\n5.0 master branch\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot applicable\r\n\r\n**Problem description:**\r\nAfter removing culture-specific test failures (tracked by #2734) there are a few more tests failing for me which I believe happen due to relying on machine specific conditions.\r\n\r\n<details><summary>list of failed tests</summary>\r\n\r\n```\r\n* System.Windows.Forms.Tests.CursorTests.Cursor_Clip_Set_GetReturnsExpected\r\nAssert.Equal() Failure\r\nExpected: {X=0,Y=0,Width=3456,Height=1080}\r\nActual:   {X=0,Y=0,Width=3840,Height=1080}\r\n   at System.Windows.Forms.Tests.CursorTests.Cursor_Clip_Set_GetReturnsExpected() in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\CursorTests.cs:line 176\r\n\r\n* System.Windows.Forms.Tests.ListViewTests.ListView_GetItemRect_InvokeWithHandle_ReturnsExpected\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at System.Windows.Forms.Tests.ListViewTests.ListView_GetItemRect_InvokeWithHandle_ReturnsExpected() in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ListViewTests.cs:line 3680\r\n\r\n* System.Windows.Forms.Tests.ListViewTests.ListView_GetItemRect_InvokeWithoutHandle_ReturnsExpectedAndCreatedHandle\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at System.Windows.Forms.Tests.ListViewTests.ListView_GetItemRect_InvokeWithoutHandle_ReturnsExpectedAndCreatedHandle() in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ListViewTests.cs:line 3645\r\n\r\n* System.Windows.Forms.Tests.MonthCalendarTests.MonthCalendar_CalendarDimensions_SetAreaOfTwelve_GetReturnsExpected(width: 12, height: 1)\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at System.Windows.Forms.Tests.MonthCalendarTests.MonthCalendar_CalendarDimensions_SetAreaOfTwelve_GetReturnsExpected(Int32 width, Int32 height) in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\MonthCalendarTests.cs:line 586\r\n\r\n* System.Windows.Forms.Tests.MonthCalendarTests.MonthCalendar_CalendarDimensions_SetWithHandleAreaOfTwelve_GetReturnsExpected(width: 12, height: 1)\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at System.Windows.Forms.Tests.MonthCalendarTests.MonthCalendar_CalendarDimensions_SetWithHandleAreaOfTwelve_GetReturnsExpected(Int32 width, Int32 height) in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\MonthCalendarTests.cs:line 644\r\n\r\n* System.Windows.Forms.Tests.MonthCalendarTests.MonthCalendar_SingleMonthSize_GetWithHandle_ReturnsExpected\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at System.Windows.Forms.Tests.MonthCalendarTests.MonthCalendar_SingleMonthSize_GetWithHandle_ReturnsExpected() in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\MonthCalendarTests.cs:line 2338\r\n\r\n* System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Ctor_Default\r\nAssert.Equal() Failure\r\nExpected: 2\r\nActual:   79\r\n   at System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Ctor_Default() in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ToolStripDropDownTests.cs:line 142\r\n\r\n* System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(value: {X=-1,Y=-2}, expected: {X=0,Y=0}, expectedLocationChangedCallCount: 0)\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   77\r\n   at System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(Point value, Point expected, Int32 expectedLocationChangedCallCount) in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ToolStripDropDownTests.cs:line 1966\r\n\r\n* System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(value: {X=0,Y=2}, expected: {X=0,Y=2}, expectedLocationChangedCallCount: 1)\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   77\r\n   at System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(Point value, Point expected, Int32 expectedLocationChangedCallCount) in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ToolStripDropDownTests.cs:line 1966\r\n\r\n* System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(value: {X=1,Y=0}, expected: {X=1,Y=0}, expectedLocationChangedCallCount: 1)\r\nAssert.Equal() Failure\r\nExpected: 1\r\nActual:   77\r\n   at System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(Point value, Point expected, Int32 expectedLocationChangedCallCount) in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ToolStripDropDownTests.cs:line 1966\r\n\r\n* System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(value: {X=1,Y=2}, expected: {X=1,Y=2}, expectedLocationChangedCallCount: 1)\r\nAssert.Equal() Failure\r\nExpected: 1\r\nActual:   77\r\n   at System.Windows.Forms.Tests.ToolStripDropDownTests.ToolStripDropDown_Location_Set_GetReturnsExpected(Point value, Point expected, Int32 expectedLocationChangedCallCount) in D:\\projects\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ToolStripDropDownTests.cs:line 1966\r\n```\r\n\r\n</details>\r\n\r\nThere is a compromise to make between developer convenience and how exactly you require tests matching their OS environment, if they are too strict developers can run tests only in a VM.\r\n\r\nSo far I could identify:\r\n- Some MonthCalendar tests generate a _huge_ control and rely on the OS cutting them off. If you actually have a big work area (e.g. two screens) this leads to test failures since the controls are no longer cut off and are larger than the test expects.\r\n- Some tests mix up coordinate spaces and do not consider the fact that the taskbar is not necessarily at the bottom. When the OS ensures the taskbar is not covered some tests fail because the forms/controls are not at the location they expect them to be. This is easily worked around by considering the work area inside the test, not the virtual screen space.\r\n\r\nI'll put together a PR, so you can then decide which of the changes are reasonable enough to take.\r\n\r\n**Expected behavior:**\r\nTests are (within reason) coded to be independent of machine characteristics.\r\n\r\n**Minimal repro:**\r\nHaving either of these characteristics will fail some tests:\r\n* Set the taskbar to the left side of the monitor (instead of default bottom) and run the tests\r\n* Use a multi-screen machine and run the tests (very wide or very high work area)","Url":"https://github.com/dotnet/winforms/issues/3121","RelatedDescription":"Open issue \"Some tests depend on machine specifics\" (#3121)"},{"Id":"605029634","IsPullRequest":true,"CreatedAt":"2020-04-22T19:57:16","Actor":"lonitra","Number":"3120","RawContent":null,"Title":"Fix: Incorrect Editor for StringCollection","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3049 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add a mapping for `StringCollection` in `UITypeEditor`so correct editor opens \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will see the correct editor for an editor on type `StringCollection`\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n**Incorrect Editor:**\r\n![image](https://user-images.githubusercontent.com/30007367/79895874-70560f80-83bc-11ea-9887-3f15537e421d.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n**Correct Editor shown:**\r\n![image](https://user-images.githubusercontent.com/30007367/79896267-012ceb00-83bd-11ea-854c-05d6fb0dc41e.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual testing\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3120)","Url":"https://github.com/dotnet/winforms/pull/3120","RelatedDescription":"Open PR \"Fix: Incorrect Editor for StringCollection\" (#3120)"},{"Id":"604596298","IsPullRequest":false,"CreatedAt":"2020-04-22T09:18:30","Actor":"Vino-Wang","Number":"3118","RawContent":null,"Title":"The Editing Rectangle of TreeNode is truncated by the border of TreeView control","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.5.20221.6\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**More info:**\r\n1. This issue is a not regression issue, also can reproduce with VS2015, VS2017 and VS2019 from .NET framework 3.5 to 4.8.\r\n2. This issue also reproduce with .NET Core 3.1.\r\n\r\n**Problem description:**\r\nThe Editing rectangle of the first Node is truncated.\r\n![Actual](https://user-images.githubusercontent.com/18568603/79964200-f22d6200-84bc-11ea-9776-369e989cecf3.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nThere should no truncation.\r\n![Expected](https://user-images.githubusercontent.com/18568603/79964223-fa859d00-84bc-11ea-9887-ec06467ee48b.png)\r\n\r\n**Minimal repro:**\r\n1.\tCreate a .NET Core winforms project.\r\n2.\tDrag a TreeView control, set the LabelEdit property to True.\r\n3.\tClick the smart tag in the top-right corner to show the TreeView Tasks window.\r\n4.\tClick the ‘Edit Nodes…’, add 2 Root Nodes with default name: Node0 & Node1.\r\n5.\tBuild and run it, double click on the Nodes to edit.\r\n\r\nOr \r\n1.\tRun the attached project.\r\n[TreeViewEditingRectangleTruncated.zip](https://github.com/dotnet/winforms/files/4515070/TreeViewEditingRectangleTruncated.zip)\r\n2.\tClick the Node0, then click button1.","Url":"https://github.com/dotnet/winforms/issues/3118","RelatedDescription":"Open issue \"The Editing Rectangle of TreeNode is truncated by the border of TreeView control\" (#3118)"},{"Id":"604528882","IsPullRequest":false,"CreatedAt":"2020-04-22T07:39:04","Actor":"weltkante","Number":"3117","RawContent":null,"Title":"Fix VB InputBox issues","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**.NET Core Version:**\r\n.NET Core 5.0 preview / current master branch\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nYes\r\n\r\n**Problem description:**\r\nSince it was decided against providing a generalized InputDialog in #2891 and people who need it should be using the [InputBox](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.interaction.inputbox?view=net-5.0) method from VB assemblies also in C# (it's available out of the box without adding references). I'm opening this follow-up issue for things that were brought up in discussion that need to be fixed.\r\n\r\nIssues with the existing input form:\r\n- As you can see for example on a german OS the cancel button doesn't fit its label and is cut off (should spell 'Abbrechen') - see screenshot below\r\n- Accessibility should be checked to match the quality requirements of WinForms if guidance for C# users is to use the VB input form\r\n- The current button layout is probably from a previous era (Windows 3.11 used this layout), you usually have ok/cancel buttons at the bottom of the dialog these days. I don't know if Microsoft still has general guidelines how the layout of simple dialogs should look like, but if in doubt I'd say keep it as similar to a message box as possible.\r\n\r\nIf you think updating the button layout is out of scope feel free to drop it from the issue and just ensure localization/accessibility (which I do think are important).\r\n\r\n![image](https://user-images.githubusercontent.com/5845814/75037525-a8bc9880-54b4-11ea-8e1b-555a42d71fcd.png)\r\n\r\nThe underlying form for inspection can be found [here](https://github.com/dotnet/winforms/blob/master/src/Microsoft.VisualBasic.Forms/src/Microsoft/VisualBasic/Helpers/VBInputBox.vb). Note that the designer part (InitializeComponent) is inline and not in a .designer.vb file, it still is intended to be edited with the VS designer. If this is currently not possible and it needs to be edited manually then you may want to remove InitializeComponent in order to not have future designers break the form.\r\n\r\n**Expected behavior:**\r\n\r\n* no cutoff in any localization provided out of the box\r\n* accessibility should match quality requirements\r\n* dialog button layout should match modern win32 dialogs like MessageBox and SaveFileDialog\r\n\r\n**Minimal repro:**\r\nCall [`Interaction.InputBox`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.interaction.inputbox?view=net-5.0)","Url":"https://github.com/dotnet/winforms/issues/3117","RelatedDescription":"Open issue \"Fix VB InputBox issues\" (#3117)"},{"Id":"604429265","IsPullRequest":true,"CreatedAt":"2020-04-22T03:55:13","Actor":"RussKie","Number":"3116","RawContent":null,"Title":"Disable tests that rely on RemoteExecutor","State":"closed","Body":"See: https://github.com/dotnet/arcade/issues/5325\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3116)","Url":"https://github.com/dotnet/winforms/pull/3116","RelatedDescription":"Closed or merged PR \"Disable tests that rely on RemoteExecutor\" (#3116)"},{"Id":"604420856","IsPullRequest":true,"CreatedAt":"2020-04-22T03:15:03","Actor":"RussKie","Number":"3115","RawContent":null,"Title":"Validate requested clipboard formats","State":"open","Body":"\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nContributes to tests stability work.\r\n\r\n## Proposed changes\r\n\r\nCertain clipboard tests failed because they fed in `null` and empty string as formats. These would ultimately lead to failure when we attempted to register these formats with `RegisterClipboardFormatW` call.\r\n\r\n```\r\n[xUnit.net 00:00:09.54]     System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: \"\") [FAIL]\r\n[xUnit.net 00:00:09.54]     System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: null) [FAIL]\r\n  X System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: \"\") [3ms]\r\n  Error Message:\r\n   System.ComponentModel.Win32Exception : Clipboard format registration did not succeed.\r\n  Stack Trace:\r\n     at System.Windows.Forms.DataFormats.GetFormat(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataFormats.cs:line 188\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresentInner(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1764\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1782      \r\n   at System.Windows.Forms.DataObject.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 229\r\n   at System.Windows.Forms.Clipboard.ContainsData(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Clipboard.cs:line 255\r\n   at System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ClipboardTests.cs:line 56\r\n\r\n  X System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: null) [2ms]\r\n  Error Message:\r\n   System.ComponentModel.Win32Exception : Clipboard format registration did not succeed.\r\n  Stack Trace:\r\n     at System.Windows.Forms.DataFormats.GetFormat(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataFormats.cs:line 188\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresentInner(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1764\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1782      \r\n   at System.Windows.Forms.DataObject.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 229\r\n   at System.Windows.Forms.Clipboard.ContainsData(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Clipboard.cs:line 255\r\n   at System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ClipboardTests.cs:line 56\r\n                                                                                                                                                                                                                [xUnit.net 00:00:09.67]     System.Windows.Forms.Tests.ClipboardTests.Clipboard_GetDataObject_InvokeMultipleTimes_Success [FAIL]\r\n```\r\n\r\nClamp down on this and ensure these formats are rejected up front.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Some customers may see it as a breaking changes, since instead of `Win32Exception` we'll now be throwing `ArgumentException` if `null`, empty string or whitespaces are passed in.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal, handling of an edge-case scenario\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- existing `ClipboardTests` now succeed\r\n- new tests to `DataFormatsTests`\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3115)","Url":"https://github.com/dotnet/winforms/pull/3115","RelatedDescription":"Open PR \"Validate requested clipboard formats\" (#3115)"},{"Id":"604280305","IsPullRequest":true,"CreatedAt":"2020-04-22T01:00:07","Actor":"mmitche","Number":"3113","RawContent":null,"Title":"Remove unnecessary coherency attributes and prepare for strict coherency","State":"closed","Body":"Remove the unnecessary coherency attributes. These coherency attributes\r\nare not needed because the packages are produced in the same build as\r\nthe CPD parent.\r\n\r\nThis also prepares this repo for 'strict' coherency\r\nhttps://github.com/dotnet/arcade/issues/5195. Strict coherency is\r\nsignificantly simpler and resolves a few cases where legacy CPD can\r\ndowngrade dependencies in incremental servicing. It looks in the CPD\r\nparent's version.details.xml file to find the the CPD dependency, then\r\nupdates to that version. In winforms case, the CPD's dependencies are not\r\ndependended on within runtime's own build, and the CPD attribute should be removed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3113)","Url":"https://github.com/dotnet/winforms/pull/3113","RelatedDescription":"Closed or merged PR \"Remove unnecessary coherency attributes and prepare for strict coherency\" (#3113)"},{"Id":"604341975","IsPullRequest":true,"CreatedAt":"2020-04-22T00:44:36","Actor":"dotnet-maestro[bot]","Number":"3114","RawContent":null,"Title":"[release/5.0-preview4] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:440f0db1-50fd-4e00-9b1a-08d7e1735b84)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 440f0db1-50fd-4e00-9b1a-08d7e1735b84\r\n- **Build**: 20200421.7\r\n- **Date Produced**: 4/21/2020 9:58 PM\r\n- **Commit**: b7cdadcc6de83f2138dc86dac14870af3b27d373\r\n- **Branch**: refs/heads/release/5.0-preview4\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n\r\n[marker]: <> (End:440f0db1-50fd-4e00-9b1a-08d7e1735b84)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3114)","Url":"https://github.com/dotnet/winforms/pull/3114","RelatedDescription":"Closed or merged PR \"[release/5.0-preview4] Update dependencies from dotnet/runtime\" (#3114)"},{"Id":"603761994","IsPullRequest":true,"CreatedAt":"2020-04-22T00:35:27","Actor":"RussKie","Number":"3103","RawContent":null,"Title":"Manually add publishing for p4 and p5 channels while arcade is not flowing","State":"closed","Body":"As per instructions\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3103)","Url":"https://github.com/dotnet/winforms/pull/3103","RelatedDescription":"Closed or merged PR \"Manually add publishing for p4 and p5 channels while arcade is not flowing\" (#3103)"},{"Id":"604201416","IsPullRequest":true,"CreatedAt":"2020-04-21T18:42:31","Actor":"hughbe","Number":"3112","RawContent":null,"Title":"Add some initial DataGridViewColumnCollection tests","State":"open","Body":"## Proposed Changes\r\n- Add some initial DataGridViewColumnCollection tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3112)","Url":"https://github.com/dotnet/winforms/pull/3112","RelatedDescription":"Open PR \"Add some initial DataGridViewColumnCollection tests\" (#3112)"},{"Id":"604183995","IsPullRequest":true,"CreatedAt":"2020-04-21T18:13:11","Actor":"lonitra","Number":"3111","RawContent":null,"Title":"Fix: StringCollectionEditor Unable to Create Instance of Type System.String","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelates to issue mentioned in comments of #3049\r\n\r\n\r\n## Proposed changes\r\n\r\n- Explicit checks if `itemType` is of type `string` so user will still be able to create instances of a `string` if we don't have a mapping for the editor on the collection of `string` that the user is trying to invoke\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will no longer see an error message when trying to create instances of `string` with an editor on a collection of `string` we don't have a mapping to\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n**Error Message:**\r\n![image](https://user-images.githubusercontent.com/30007367/79897115-16564980-83be-11ea-9464-fc23430b0bda.png)\r\n\r\n### After\r\n\r\n**Fixed error for the case we don't have mapping for an editor on the collection of string user is trying to invoke:**\r\n![image](https://user-images.githubusercontent.com/30007367/79896737-96c87a80-83bd-11ea-9f7d-d5c60691eb2d.png)\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Did some manual testing, but will need to be tested further\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3111)","Url":"https://github.com/dotnet/winforms/pull/3111","RelatedDescription":"Open PR \"Fix: StringCollectionEditor Unable to Create Instance of Type System.String\" (#3111)"},{"Id":"604012465","IsPullRequest":true,"CreatedAt":"2020-04-21T13:47:12","Actor":"hughbe","Number":"3110","RawContent":null,"Title":"Add some more TabPage related tests for Visual Styles coverage","State":"open","Body":"## Proposed Changes\r\n- Add some more TabPage related tests for Visual Styles coverage\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3110)","Url":"https://github.com/dotnet/winforms/pull/3110","RelatedDescription":"Open PR \"Add some more TabPage related tests for Visual Styles coverage\" (#3110)"},{"Id":"603971671","IsPullRequest":true,"CreatedAt":"2020-04-21T12:49:14","Actor":"M-Lipin","Number":"3109","RawContent":null,"Title":"Fixng issue 3099 property descriptor grid entry accesible collapsed is incorrect","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3099\r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding the test to reveal the issue with providing incorrect Collapsed/expanded accessible status for PropertyDescriptorGridEntries (like for expandable Font property).\r\n- Fixing the issue with providing incorrect Collapsed/expanded accessible status for PropertyDescriptorGridEntries - with the fix if property row is expanded then Expanded accessible state is provided.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Screen reader users will be able to distinguish the state of expandable PropertyGrid entries (like Font).\r\n- There will be no inaccuracy when providing accessible collapsed/expanded state for PropertyGrid entries.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![Before](https://user-images.githubusercontent.com/23213980/79867699-6dbcdf80-83e7-11ea-96de-b5f2a91d5a4d.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![After](https://user-images.githubusercontent.com/23213980/79867706-71506680-83e7-11ea-9cc5-77df54dc0e6f.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- Automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\nC:\\Users\\v-milipi>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.20072.3\r\n  Commit:  c3dc1fdfdc\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3109)","Url":"https://github.com/dotnet/winforms/pull/3109","RelatedDescription":"Open PR \"Fixng issue 3099 property descriptor grid entry accesible collapsed is incorrect\" (#3109)"},{"Id":"603900352","IsPullRequest":false,"CreatedAt":"2020-04-21T10:48:39","Actor":"weltkante","Number":"3108","RawContent":null,"Title":"Revisit facade versioning for 5.0","State":"open","Body":"**.NET Core Version:**\r\nmaster branch / 5.0 preview releases\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nNo\r\n\r\n**Problem description:**\r\nWinForms versions its facade assemblies as 5.0 while the dotnet runtime repository versions its facade assemblies as 4.0. This means depending on the selected SDK you'll either compile against a 4.0 or a 5.0 version of `System.Drawing`, even though the WinForms facade is supposed to replace the dotnet runtime version.\r\n\r\nIn #2413 the guidance was [to not version facades](https://github.com/dotnet/winforms/issues/2413#issuecomment-615273450):\r\n> For desktop compat shims don’t change the assembly version. Don’t remove types, maintain APICompat with previous release. APICompat should catch problems where you remove type forwards.\r\n>\r\n> .NETCore does allow newer assembly versions to automatically satisfy older references, but there is no good reason to version the compat shims since they have no types.\r\n\r\nSince #2413 was fixed without resolving the versioning discussion I'm opening this follow-up issue.\r\n\r\n**Expected behavior:**\r\nWinForms and dotnet runtime should agree about versioning facades.\r\n\r\n**Minimal repro:**\r\n* Build a project against `Microsoft.NET.Sdk` and you get `System.Drawing` in version 4.0 from `Microsoft.NetCore.App`\r\n* Build a project against `Microsoft.NET.Sdk.WindowsDesktop` and you get `System.Drawing` in version 5.0","Url":"https://github.com/dotnet/winforms/issues/3108","RelatedDescription":"Open issue \"Revisit facade versioning for 5.0\" (#3108)"},{"Id":"603900107","IsPullRequest":true,"CreatedAt":"2020-04-21T10:48:15","Actor":"hughbe","Number":"3107","RawContent":null,"Title":"Add ListBox.ObjectCollection tests and fix bugs","State":"open","Body":"## Proposed Changes\r\n- Validate owner in ListBox.ObjectCollection constructor\r\n- Validate destination in ListBox.ObjectCollection.CopyTo\r\n- Validate owner.CheckDataSource in ListBox.ObjectCollection.Remove\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3107)","Url":"https://github.com/dotnet/winforms/pull/3107","RelatedDescription":"Open PR \"Add ListBox.ObjectCollection tests and fix bugs\" (#3107)"},{"Id":"603816524","IsPullRequest":false,"CreatedAt":"2020-04-21T08:38:21","Actor":"weltkante","Number":"3106","RawContent":null,"Title":"Remove workaround for facade reference","State":"open","Body":"**.NET Core Version:**\r\n.NET Core 5.0 (master branch)\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nNo (not applicable)\r\n\r\n**Problem description:**\r\nFor resolution of issue #2413 (PR #3098) a workaround for dotnet/sdk#3254 is required, this issue serves for tracking removal of the workaround once the SDK bug is resolved.\r\n\r\nThe bug affects all ProjectReference in that the generated deps.json doesn't contain the referenced version number, but currently only for System.Drawing it is causing problems for assembly resolution, so the workaround is only present there. Might be added to other references as required.\r\n\r\n**Expected behavior:**\r\nNo workaround required for `ProjectReference` to a facade assembly\r\n\r\n**Minimal repro:**\r\nReference a facade assembly and observe that the deps.json produced as build output does not include the version of the assembly you referenced:\r\n\r\n```json\r\n        \"runtime\": {\r\n          \"System.Drawing.dll\": {}\r\n        }\r\n```","Url":"https://github.com/dotnet/winforms/issues/3106","RelatedDescription":"Open issue \"Remove workaround for facade reference\" (#3106)"},{"Id":"603431851","IsPullRequest":true,"CreatedAt":"2020-04-21T08:00:55","Actor":"weltkante","Number":"3098","RawContent":null,"Title":"Fix facade reference and unskip unit test","State":"closed","Body":"Fixes #2413\r\n\r\n## Proposed changes\r\n\r\nAdd reference to System.Drawing facade in order to be able to unit-test it. If you don't do this you inherit the System.Drawing from shared framework `Microsoft.NetCore.App` which does not contain the same redirects as the WinForms version, in particular the `UITypeEditor` redirect is missing.\r\n\r\n## Open questions\r\n\r\n* In the issue discussion it was noted that WinForms should not update the facade versions to 5.0 but instead keep them at 4.0 like the shared framework does.\r\n  * The facades don't contain any code, they'll always be a redirect of the Desktop Version for compatibility and not get any new stuff\r\n  * WinForms and the shared framework should agree about versioning, if the base framework doesn't level its facades for 5.0 neither should do WinForms for facades its replacing.\r\n\r\n  The versioning problem does not prevent fixing the unit tests so it could be split off into a separate issue\r\n\r\n* The PR contains a workaround for dotnet/sdk#3254 - will create a follow-up issue to track removal of the workaround unless something better can be figured out\r\n\r\n## Customer Impact\r\n\r\nas is the PR has no customer impact\r\n\r\nonce we roll back the 5.0 versioning of System.Drawing and other facades this change is visible to users who already compiled against a 5.0 preview\r\n\r\n## Regression? \r\n\r\nunclear, probably not (the regression part of not redirecting UITypeEditor should already have been fixed, we just couldn't test it)\r\n\r\n## Risk\r\n\r\nlow, as-is the PR only affects unit tests\r\n\r\nonce we roll back the 5.0 versioning of System.Drawing and other facades there may be some risk of breaking people who already have been compiling against earlier 5.0 previews and built nuget packages and stuff, but thats probably acceptable since its a preview?\r\n\r\n## Test methodology\r\n\r\nskipped unit test now passes, test is now able to confirm what already was present in the product\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3098)","Url":"https://github.com/dotnet/winforms/pull/3098","RelatedDescription":"Closed or merged PR \"Fix facade reference and unskip unit test\" (#3098)"},{"Id":"603756189","IsPullRequest":true,"CreatedAt":"2020-04-21T07:19:26","Actor":"RussKie","Number":"3102","RawContent":null,"Title":"Disable tests suspected to cause deadlocks","State":"closed","Body":"See: #3095\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3102)","Url":"https://github.com/dotnet/winforms/pull/3102","RelatedDescription":"Closed or merged PR \"Disable tests suspected to cause deadlocks\" (#3102)"},{"Id":"603608188","IsPullRequest":false,"CreatedAt":"2020-04-20T23:53:34","Actor":"JeremyKuhne","Number":"3101","RawContent":null,"Title":"Should always use Unicode in RichTextBox","State":"open","Body":"`RichTextBox` uses the latest RichEdit and as such should be able to remove the code paths where we're grabbing `Encoding` and converting back and forth from Unicode to ASCII. If we're using Unicode everywhere we can be more efficient and avoid conversion headaches.\r\n\r\nSee #3032 for an example of where this happens.","Url":"https://github.com/dotnet/winforms/issues/3101","RelatedDescription":"Open issue \"Should always use Unicode in RichTextBox\" (#3101)"},{"Id":"603606594","IsPullRequest":true,"CreatedAt":"2020-04-20T23:48:35","Actor":"JeremyKuhne","Number":"3100","RawContent":null,"Title":"Fix RichTextBox Rtf encoding","State":"open","Body":".NET Core Encoding.Default gets UTF-8, not the default code page. Change our code to get the code page as we're sending\r\ndata to the control as ASCII.\r\n\r\nUltimately we should remove all non-Unicode codePaths in RichTextBox. This should be possible as we're force loading the latest RichEdit.\r\n\r\nFixes #3032\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3100)","Url":"https://github.com/dotnet/winforms/pull/3100","RelatedDescription":"Open PR \"Fix RichTextBox Rtf encoding\" (#3100)"},{"Id":"603484569","IsPullRequest":false,"CreatedAt":"2020-04-20T19:38:29","Actor":"M-Lipin","Number":"3099","RawContent":null,"Title":"Accessibility: PropertyGrid sub-level item expanded/collapsed state is not correct","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nProperty Grid sub-level item accessibility: Narrator announces collapsed when Font Property node is expanded, `ExpandCollapse.ExpandCollapseState` value is `Collapsed(0)`.\r\n\r\n\r\n**Expected behavior:**\r\nCollapsed Property Grid sub-level items should be announced as collapsed and Inspect should show collapsed state for these items.\r\nExpanded Property Grid sub-level items should be announced as expanded and Inspect should show expanded state for these items.\r\n\r\n**Minimal repro:**\r\n1. Create WinForms app and add PropertyGrid control and Button to the form.\r\n2. Set PropertyGrid's SelectedObject to Button.\r\n3. Run the app and review the Font property of the button in PropertyGrid using Inspect: expand and collapse the Font property and review its collapsed/expanded state.\r\n\r\n![Inspect](https://user-images.githubusercontent.com/23213980/79792675-fab85800-8357-11ea-8be6-5626ef339929.png)\r\n![Announcement](https://user-images.githubusercontent.com/23213980/79792699-01df6600-8358-11ea-8fe4-a851da9d790e.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3099","RelatedDescription":"Open issue \"Accessibility: PropertyGrid sub-level item expanded/collapsed state is not correct\" (#3099)"},{"Id":"603275470","IsPullRequest":true,"CreatedAt":"2020-04-20T14:19:11","Actor":"weltkante","Number":"3097","RawContent":null,"Title":"Avoid Application.Exit in unit tests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3095\r\n\r\n## Proposed changes\r\n\r\nDon't use `Application.Exit` because that will exit all threads and thus risks deadlock (and also makes other tests unstable if they exit unexpectedly). Using `Application.ExitThread` will exit just the current thread.\r\n\r\nIf the test was intended to cover `Application.Exit` usage it must be changed to execute in an isolated process since that method being global will interfere with other tests.\r\n\r\n## Customer Impact\r\n\r\nNone, issue is caused by unit test.\r\n\r\n## Regression? \r\n\r\nUnknown, caused by wrong usage of global API, no idea how that classifies.\r\n\r\n## Risk\r\n\r\nnone, this change is isolated to unit tests\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nRun `build.cmd -test` repeatedly locally to see if there are deadlocks.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3097)","Url":"https://github.com/dotnet/winforms/pull/3097","RelatedDescription":"Open PR \"Avoid Application.Exit in unit tests\" (#3097)"},{"Id":"603258538","IsPullRequest":true,"CreatedAt":"2020-04-20T13:55:50","Actor":"hughbe","Number":"3096","RawContent":null,"Title":"Avoid allocating array for ListBox SelectionMode.One","State":"open","Body":"## Proposed Changes\r\n- Avoid allocating array for ListBox SelectionMode.One\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3096)","Url":"https://github.com/dotnet/winforms/pull/3096","RelatedDescription":"Open PR \"Avoid allocating array for ListBox SelectionMode.One\" (#3096)"},{"Id":"603209619","IsPullRequest":false,"CreatedAt":"2020-04-20T12:44:04","Actor":"weltkante","Number":"3095","RawContent":null,"Title":"Deadlock caused by PropertyGridViewRowsAccessibleObjectTests","State":"open","Body":"**.NET Core Version:**\r\nmaster branch, compiled locally, probably present in all versions having this test but didn't check\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot relevant, you can probably cause it there too though\r\n\r\n**Problem description:**\r\nExecuting `Application.Exit` inside a `Form.Load` event handler can lead to a deadlock when using more than one UI thread. This is because Form.Load is invoked with locks already held and `Application.Exit` needs more global locks. These locks may already be held by a different UI thread currently waiting to create a new control.\r\n\r\nUpon further investigation it turns out the real problem is that `Application.Exit` wants to exit all threads not just the current UI threads application (thats why it needs a lock)\r\n* never use `Application.Exit` in multithreaded unit tests\r\n  * use isolated processes if you need to test something related with `Application.Exit`\r\n  * use `Application.ExitThread` to exit just the current thread (probably the intended behavior here)\r\n  * use `ApplicationContext` if you want controlled shutdown of a single application frame\r\n* generally you'll want to keep logic in `Form.Load` or `UserControl.Load` events very simple in the multithreaded unit tests because this logic is executed under locks. Testing complex load events should preferrably be done in separate processes.\r\n\r\n**Expected behavior:**\r\nNo deadlock\r\n\r\n**Minimal repro:**\r\nNot available. You could try repeatedly running the tests from console (`build.cmd -test`) but since this is a threading issue the deadlock is random and probably hard to reproduce. You might be able to build a more reliable repro scenario by repeatedly starting UI threads in a tight loop and having someone randomly call `Application.Exit` from a Load event handler.","Url":"https://github.com/dotnet/winforms/issues/3095","RelatedDescription":"Open issue \"Deadlock caused by PropertyGridViewRowsAccessibleObjectTests\" (#3095)"},{"Id":"603197985","IsPullRequest":true,"CreatedAt":"2020-04-20T12:24:27","Actor":"hughbe","Number":"3094","RawContent":null,"Title":"Add ListBox.IntegerCollection tests and fix bugs","State":"open","Body":"Proposed Changes\r\n- Validate owner in ListBox.IntegerCollection constructor: fixes #3092\r\n- Validate index in ListBox.IntegerCollection item accessor\r\n- Validate destination in LisBox.IntegerCollection.CopyTo\r\n- Make ListBox.IntegerCollection.IsSynchronized return false: contributes to #3088 \r\n\r\nShould I create issues for each of the other fixes?\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3094)","Url":"https://github.com/dotnet/winforms/pull/3094","RelatedDescription":"Open PR \"Add ListBox.IntegerCollection tests and fix bugs\" (#3094)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-23T05:30:50.3909391Z","RunDurationInMilliseconds":700}