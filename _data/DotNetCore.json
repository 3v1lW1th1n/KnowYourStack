{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6716273145","Type":"PullRequestEvent","CreatedAt":"2017-10-14T05:29:28","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14505","RelatedDescription":"Opened pull request \"Fix hill climbing float overflow\" (#14505) at dotnet/coreclr","RelatedBody":"- When hill climbing finds that it wants to decrease the thread count but can't because the thread count is already the minimum, it instead tries to increase the sampling interval by a factor of up to 10 depending on how much it wanted to decrease the thread count\r\n- The ratio was being used incorrectly (used max instead of min), and sometimes the ratio can be so large that the conversion to int after the float math overflows\r\n- If something in the process enabled floating point exceptions, it may also crash\r\n  - There doesn't appear to be a clean way to disable hill climbing, added a config variable that disables it in case a workaround is necessary for some other reason in the future\r\n- Fixed to avoid overflow in the math to what was probably intended\r\n- There may be another bug in GetWaveComponent() that causes values of such high magnitude to be generated, I'll leave that investigation for when that in particular becomes a real issue"},{"Id":"6716142285","Type":"PullRequestEvent","CreatedAt":"2017-10-14T03:17:46","Actor":"swaroop-sridhar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14395","RelatedDescription":"Merged pull request \"ILLink Perf: Fix Roslyn benchmark\" (#14395) at dotnet/coreclr","RelatedBody":"Use ILLink.Tasks package to build the Roslyn linked benchmark,\r\nnow that Roslyn can target netcoreapp2.0."},{"Id":"6716126269","Type":"PullRequestEvent","CreatedAt":"2017-10-14T03:02:44","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14465","RelatedDescription":"Merged pull request \"[ARM64] Fix INS_dup DV_2D encoding\" (#14465) at dotnet/coreclr","RelatedBody":"Found during SIMD testing\r\n\r\n@briansull PTAL\r\n\r\ncc @dotnet/arm64-contrib "},{"Id":"6716072760","Type":"PullRequestEvent","CreatedAt":"2017-10-14T02:16:17","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14504","RelatedDescription":"Opened pull request \"Delete unnecessary Debug.Assert\" (#14504) at dotnet/coreclr","RelatedBody":""},{"Id":"6716044291","Type":"PullRequestEvent","CreatedAt":"2017-10-14T01:52:28","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14497","RelatedDescription":"Merged pull request \"Add EventSource event for dropped async state machines\" (#14497) at dotnet/coreclr","RelatedBody":"One of the main bugs we've seen with async methods in production are cases where an async method awaits something that's never completed and is then just dropped.  This in turn allows the async state machine to be collected, such that subsequent dumps have no usable information to determine what hung and where.\r\n\r\nTo help diagnose such issues, this commit adds an EventSource event that fires when an async state machine is collected without having been completed.  When that happens, it dumps a textual representation of itself into a string and sends that to an event.\r\n\r\nDoing this depends on the recent changes that were made to how we box async state machines to the heap.  Now that we do so with an explicit strongly-typed \"box\" instead of a normal runtime box, when the event source event is enabled, we can instead instantiate a derived and finalizable box, where the finalizer is responsible for firing the event, and we then suppress finalization when the async method completes.  The only async method state machines that are then finalized are those that are allowed to be collected before they're completed.\r\n\r\ncc: @vancem, @brianrob, @kouvel, @leculver, @benaadams "},{"Id":"6715960961","Type":"PullRequestEvent","CreatedAt":"2017-10-14T00:48:15","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14503","RelatedDescription":"Opened pull request \"Remove temporary unsafe stackalloc workarounds for Span\" (#14503) at dotnet/coreclr","RelatedBody":"Make use of the new language support."},{"Id":"6715953153","Type":"PullRequestEvent","CreatedAt":"2017-10-14T00:42:57","Actor":"jorive","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14468","RelatedDescription":"Merged pull request \"Disabling legacy banckend perf CQ and scenario runs\" (#14468) at dotnet/coreclr","RelatedBody":"- Recent changes to enforce data validation uncovered bug on the legacy backend runs.\r\n  CQ run bug tracked by: https://github.com/dotnet/coreclr/issues/14463\r\n  JitBench run bug tracked by: https://github.com/dotnet/coreclr/issues/14477"},{"Id":"6715934502","Type":"PullRequestEvent","CreatedAt":"2017-10-14T00:30:38","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14502","RelatedDescription":"Opened pull request \"GetEnvironmentVariable: Avoid StringBuilder marshaling overhead\" (#14502) at dotnet/coreclr","RelatedBody":"Try a stack allocated buffer first, then fallback to using the shared array pool.\r\n\r\nResults on my machine:\r\n\r\n\r\n|             Method |      Mean |     Error |    StdDev |  Gen 0 | Allocated |\r\n|------------------- |----------:|----------:|----------:|-------:|----------:|\r\n|  `\"TMP\"` Before | 156.51 ns | 2.0132 ns | 1.8831 ns | 0.0875 |     368 B |\r\n|  `\"TMP\"` After |  92.88 ns | 0.5002 ns | 0.4434 ns | 0.0209 |      88 B |\r\n| `\"PATH\"` Before | 621.59 ns | 2.2668 ns | 2.1204 ns | 0.9565 |    4016 B |\r\n| `\"PATH\"` After | 287.02 ns | 1.0377 ns | 0.8666 ns | 0.2704 |    1136 B |\r\n\r\n\r\n`\"TMP\"` is under the stack limit and `\"PATH\"` is over the limit (uses the pool)."},{"Id":"6715907343","Type":"PullRequestEvent","CreatedAt":"2017-10-14T00:14:38","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14499","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#14499) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6715870215","Type":"PullRequestEvent","CreatedAt":"2017-10-13T23:54:36","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14501","RelatedDescription":"Opened pull request \"Use IsIntCnsFitsIn8 when setting GT_INT_CNS costs\" (#14501) at dotnet/coreclr","RelatedBody":"When classifying the size of integer constants use new method IsIntCnsFitsIn8 and existing method IsIntCnsFitsInI32"},{"Id":"6715770941","Type":"PullRequestEvent","CreatedAt":"2017-10-13T23:05:46","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14467","RelatedDescription":"Merged pull request \"Updates to the jit bench harness\" (#14467) at dotnet/coreclr","RelatedBody":"Introduce a number of new options:\r\n* use-existing-setup to reuse a previously set up environment\r\n* iterations to control number of iterations\r\n* tiering to enable tiered jit\r\n* disable-r2r to disable loading of R2R images\r\n* disable-ngen to disable loading of NGEN images\r\n* minopts to force jit to generate minopts code\r\n\r\nAlso start tracking average response time. This is not yet \"uploaded\"\r\nsince the underlying data reported by the app needs some updates."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6715723776","Type":"IssuesEvent","CreatedAt":"2017-10-13T22:45:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7838","RelatedDescription":"Closed issue \"nuget: setting a source in nuget.config and using it with dotnet overrides creadentials for that source in global nuget.config\" (#7838) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nGiven a global nuget.config (in user's profile) with several nuget sources and packageSourceCredentials for them. That is sources require authentication.\r\nGiven a project with local nuget.config (besides csproj) which contains only a source url:\r\n```\r\n\t<packageSources>\r\n\t\t<add key=\"my\" value=\"https://company/api/nuget/nuget-virtual\" />\r\n\t</packageSources>\r\n```\r\nrun any dotnet command requires contacting nuget, for example `dotnet add package ..`.\r\nIt'll fail as nuget will use the source specified in local nuget.config but won't use credentials in global nuget.config. \r\n\r\n## Expected  behavior\r\nnuget should use credentials from global nuget.config.\r\n\r\n## Actual behavior\r\nany dotnet commands fail with 401 (Unauthorized) as my source requires authentication.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```                                                    \r\nD:\\Work>dotnet --info       \r\n.NET Command Line Tools (2.0.2)                                 \r\n                                                                \r\nProduct Information:                                            \r\n Version:            2.0.2                                      \r\n Commit SHA-1 hash:  a04b4bf512                                 \r\n                                                                \r\nRuntime Environment:                                            \r\n OS Name:     Windows                                           \r\n OS Version:  10.0.15063                                        \r\n OS Platform: Windows                                           \r\n RID:         win10-x64                                         \r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\                \r\n                                                                \r\nMicrosoft .NET Core Shared Framework Host                       \r\n                                                                \r\n  Version  : 2.0.0                                              \r\n```"},{"Id":"6715722397","Type":"PullRequestEvent","CreatedAt":"2017-10-13T22:44:57","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7837","RelatedDescription":"Closed pull request \"Update the 1.x templates for aspnetcore 1.0.7/1.1.4\" (#7837) at dotnet/cli","RelatedBody":"Update the aspnetcore templates for 1.x. Includes this change: https://github.com/aspnet/templating/pull/65\r\n\r\n\r\n"},{"Id":"6715148493","Type":"IssuesEvent","CreatedAt":"2017-10-13T19:52:01","Actor":"evil-shrike","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7838","RelatedDescription":"Opened issue \"nuget: setting a source in nuget.config and using it with dotnet overrides creadentials for that source in global nuget.config\" (#7838) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nGiven a global nuget.config (in user's profile) with several nuget sources and packageSourceCredentials for them. That is sources require authentication.\r\nGiven a project with local nuget.config (besides csproj) which contains only a source url:\r\n```\r\n\t<packageSources>\r\n\t\t<add key=\"my\" value=\"https://company/api/nuget/nuget-virtual\" />\r\n\t</packageSources>\r\n```\r\nrun any dotnet command requires contacting nuget, for example `dotnet add package ..`.\r\nIt'll fail as nuget will use the source specified in local nuget.config but won't use credentials in global nuget.config. \r\n\r\n## Expected  behavior\r\nnuget should use credentials from global nuget.config.\r\n\r\n## Actual behavior\r\nany dotnet commands fail with 401 (Unauthorized) as my source requires authentication.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```                                                    \r\nD:\\Work>dotnet --info       \r\n.NET Command Line Tools (2.0.2)                                 \r\n                                                                \r\nProduct Information:                                            \r\n Version:            2.0.2                                      \r\n Commit SHA-1 hash:  a04b4bf512                                 \r\n                                                                \r\nRuntime Environment:                                            \r\n OS Name:     Windows                                           \r\n OS Version:  10.0.15063                                        \r\n OS Platform: Windows                                           \r\n RID:         win10-x64                                         \r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\                \r\n                                                                \r\nMicrosoft .NET Core Shared Framework Host                       \r\n                                                                \r\n  Version  : 2.0.0                                              \r\n```"},{"Id":"6714968280","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:04:33","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7832","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to dev/release/2.0\" (#7832) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20171013-070030\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20171013-070030 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6714954143","Type":"PullRequestEvent","CreatedAt":"2017-10-13T19:01:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7831","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#7831) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171013-070028\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171013-070028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6714827047","Type":"IssuesEvent","CreatedAt":"2017-10-13T18:30:12","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7752","RelatedDescription":"Closed issue \"Amazon linux cannot be detected by install script\" (#7752) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Spawn an elastic beanstalk instance with Amazon Linux. Current version is \"64bit Amazon Linux 2017.03\".\r\n2. `wget https://dot.net/v1/dotnet-install.sh`\r\n3. `bash dotnet-install.sh --verbose`\r\n\r\n## Expected  behavior\r\nInstall is successful\r\n\r\n## Actual behavior\r\nInstall fails. Verbose output:\r\n```\r\ndotnet-install: Calling: machine_has curl\r\ndotnet-install: Calling: calculate_vars \r\ndotnet-install: Calling: get_normalized_architecture_from_architecture <auto>\r\ndotnet-install: Calling: get_machine_architecture \r\ndotnet-install: Calling: get_normalized_architecture_from_architecture x64\r\ndotnet-install: normalized_architecture=x64\r\ndotnet-install: Calling: get_specific_version_from_version https://dotnetcli.azureedge.net/dotnet LTS x64 Latest\r\ndotnet-install: Calling: get_latest_version_info https://dotnetcli.azureedge.net/dotnet LTS x64 false\r\ndotnet-install: get_latest_version_info: latest url: https://dotnetcli.blob.core.windows.net/dotnet/Sdk/LTS/latest.version\r\ndotnet-install: Calling: download https://dotnetcli.blob.core.windows.net/dotnet/Sdk/LTS/latest.version\r\ndotnet-install: Calling: machine_has curl\r\ndotnet-install: Calling: downloadcurl https://dotnetcli.blob.core.windows.net/dotnet/Sdk/LTS/latest.version\r\ndotnet-install: get_specific_version_from_version: version_info=af1e6684fd694616ec5070e1d05a7b501a98783f\r\n1.0.4\r\ndotnet-install: Calling: get_version_from_version_info \r\ndotnet-install: specific_version=1.0.4\r\ndotnet-install: Calling: construct_download_link https://dotnetcli.azureedge.net/dotnet LTS x64 1.0.4\r\ndotnet-install: Calling: get_current_os_name \r\ndotnet-install: Calling: get_distro_specific_os_name \r\ndotnet-install: Calling: get_os_download_name_from_platform amzn.2017.03\r\ndotnet-install: Distribution specific OS name and version could not be detected: amzn.2017.03\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nIrrevelant as the issue is with the install script\r\n\r\nSame issue happens when specifying `--version 2.0.0` or  `--shared-runtime`. Can be worked around by specifying runtime as `--runtime-id rhel.7`.\r\n\r\n\r\n"},{"Id":"6714719003","Type":"PullRequestEvent","CreatedAt":"2017-10-13T18:04:08","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7837","RelatedDescription":"Opened pull request \"Update the 1.x templates for aspnetcore 1.0.7/1.1.4\" (#7837) at dotnet/cli","RelatedBody":"Update the aspnetcore templates for 1.x. Includes this change: https://github.com/aspnet/templating/pull/65\r\n\r\n\r\n"},{"Id":"6714642664","Type":"IssuesEvent","CreatedAt":"2017-10-13T17:45:45","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7836","RelatedDescription":"Opened issue \"Misleading information shown when the dotnet command is passed duplicated arguments\" (#7836) at dotnet/cli","RelatedBody":"@nigurr commented on [Thu Oct 12 2017](https://github.com/dotnet/core/issues/1029)\n\n`C:\\Tests> dotnet test --logger trx --logger trx`\r\n`MSBUILD : error MSB1009: Project file does not exist.\r\nSwitch: trx`\r\n\r\nThe same one works \r\n`C:\\Tests> dotnet test --logger trx`\r\n`Build started, please wait...`\r\n\r\nThe error message is misleading or the duplicated arguments should be skipped\n\n"},{"Id":"6714552455","Type":"PullRequestEvent","CreatedAt":"2017-10-13T17:23:38","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7835","RelatedDescription":"Merged pull request \"Separating the URL construction methods for dotnet-install.sh\" (#7835) at dotnet/cli","RelatedBody":"Separating the 'legacy' URL construction from the 'current' URL construction methods and logic. Renaming some methods for clarity.\r\n\r\nWhy?\r\nRedHat6 was not supported in the legacy time space, therefore the script should not attempt resolve to a RedHat6 distro specific URL when constructing the legacy download link. In that way, we will not infer that 1.0 supported RedHat6; et al. The 2 logical methods for URL construction should not share execution paths.\r\n\r\nAddresses: https://github.com/dotnet/cli/issues/7752"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6714225269","Type":"IssuesEvent","CreatedAt":"2017-10-13T16:04:12","Actor":"ajcvickers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/460","RelatedDescription":"Closed issue \"EntityFrameworkCore2.0 a bug about mysql\" (#460) at dotnet/standard","RelatedBody":"I have a project join some nuget packages , mysql.data,microsoft.entityframeworkcore 2.0 then it have some issues.\r\nimportment:efcore1.3 have no issue ,but efcore2.0 have a not implement method .\r\nSystem.TypeLoadException:“Method 'Clone' in type 'MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension' from assembly 'MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d' does not have an implementation.”\r\n\r\n"},{"Id":"6709887129","Type":"IssuesEvent","CreatedAt":"2017-10-12T19:28:11","Actor":"virzak","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/536","RelatedDescription":"Opened issue \"public interface IValueConverter\" (#536) at dotnet/standard","RelatedBody":"Should IValueConverter be part of the .NET Standard?\r\n\r\nIt seems so since it is identical in [WPF](https://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110).aspx), [UWP](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.data.ivalueconverter) and [Xamarin Forms](https://developer.xamarin.com/api/type/Xamarin.Forms.IValueConverter/)\r\n\r\n\r\n"},{"Id":"6709248377","Type":"PullRequestEvent","CreatedAt":"2017-10-12T17:06:27","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/535","RelatedDescription":"Merged pull request \"Add links to API browser\" (#535) at dotnet/standard","RelatedBody":"Seems like we should link to the docs as well :-)\r\n\r\n/cc @mairaw @dend "},{"Id":"6708924779","Type":"PullRequestEvent","CreatedAt":"2017-10-12T15:58:43","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/535","RelatedDescription":"Opened pull request \"Add links to API browser\" (#535) at dotnet/standard","RelatedBody":"Seems like we should link to the docs as well :-)\r\n\r\n/cc @mairaw @dend "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6716153038","Type":"IssuesEvent","CreatedAt":"2017-10-14T03:27:37","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24637","RelatedDescription":"Closed issue \"System.Collections.NonGeneric.Performance.Tests failed\" (#24637) at dotnet/corefx","RelatedBody":"https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_debug/196/ \r\n\r\nNo test result generated, but shows the following issue:\r\n\r\n/mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/Tools/tests.targets(481,5): error : One or more tests failed while running tests from 'System.Collections.NonGeneric.Performance.Tests' please check /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/bin/tests/System.Collections.NonGeneric.Performance.Tests/netcoreapp-Linux-Debug-x64/testResults.xml for details! [/mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Collections.NonGeneric/tests/Performance/System.Collections.NonGeneric.Performance.Tests.csproj]\r\n"},{"Id":"6716137945","Type":"IssuesEvent","CreatedAt":"2017-10-14T03:13:44","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/18604","RelatedDescription":"Closed issue \"System.Data.SqlClient.Tests.DiagnosticTest.ExecuteReaderAsyncTest failed with \"Timed out after 60000ms waiting for remote process 54039\"\" (#18604) at dotnet/corefx","RelatedBody":"Failed test: System.Data.SqlClient.Tests.DiagnosticTest.ExecuteReaderAsyncTest\r\n\r\nConfiguration: outerloop_netcoreapp_Ubuntu 14.04_release\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_ubuntu14.04_release/20/testReport/System.Data.SqlClient.Tests/DiagnosticTest/ExecuteReaderAsyncTest/\r\n\r\nMESSAGE:\r\n~~~\r\nTimed out after 60000ms waiting for remote process 54039\r\nExpected: True\r\nActual: False\r\n~~~\r\nSTACK TRACE:\r\nat System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose()"},{"Id":"6716082623","Type":"PullRequestEvent","CreatedAt":"2017-10-14T02:24:40","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24622","RelatedDescription":"Merged pull request \"Mark as stable for 1.1.5\" (#24622) at dotnet/corefx","RelatedBody":"All the crypto bumps are for: https://github.com/dotnet/corefx/pull/24459\r\n\r\ncc: @weshaggard @bartonjs @ianhays "},{"Id":"6716064704","Type":"PullRequestEvent","CreatedAt":"2017-10-14T02:09:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24649","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-25814-01 (master)\" (#24649) at dotnet/corefx","RelatedBody":""},{"Id":"6716057684","Type":"IssuesEvent","CreatedAt":"2017-10-14T02:03:17","Actor":"morganbr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24648","RelatedDescription":"Opened issue \"Incorrect SSLStream cipher suites on Linux\" (#24648) at dotnet/corefx","RelatedBody":"Currently SSLStream just passes \"All\" to OpenSSL for cipher suites. This is causing two unwanted choices:\r\n1. It doesn't enable ECDHE or DHE cipher suites as that requires a separate call to set up. \r\n2. It enables cipher suites using the SEED and CAMELLIA block ciphers, which can cause compliance issues. \r\n\r\nWe should consider this as a servicing candidate since a better set of suites improves defense-in-depth. "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6716123268","Type":"IssuesEvent","CreatedAt":"2017-10-14T03:00:17","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22650","RelatedDescription":"Closed issue \"Unbounded SQLite instances/connections contributing to OOM failures\" (#22650) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.3\r\n\r\nCurrently we fail to bound the number of instances of the following types which are created at runtime:\r\n\r\n* `SQLitePCL.sqlite3`\r\n* `Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection`\r\n\r\nAssociated with these types is a pair of allocations in the native heap. One is 64,000 bytes, and the other is 425,600 bytes. Ordinarily, this would not be a problem. However, it appears that it is possible for the number of connections to grow over time, resulting in overwhelming memory pressure stemming from the (mis-)use of SQLite. The following image shows one such case:\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/31414939-00470432-ade6-11e7-9edc-d1788a80c01a.png)\r\n\r\n\r\nAfter fixing this for 15.5, we should port the fix to 15.4 servicing."},{"Id":"6716118119","Type":"IssuesEvent","CreatedAt":"2017-10-14T02:55:40","Actor":"onyxmaster","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22339","RelatedDescription":"Closed issue \"Frequent SQLite operations when loading analysis data lead to unnecessary amount of syscalls\" (#22339) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nReleased with VS2017 15.3.5, also custom-built from dev15.5.x\r\n\r\n**Description**:\r\n\r\nConsider a moderately large solution (our solution has ~160 projects, Roslyn one will do as an example).\r\nI'm no expert in Roslyn internals, so this is more of a cargo cult performance research, but please bear with me.\r\nSome time after solution is loaded, the `DiagnosticIncrementalAnalyzer` attempts to load initial data using `ProjectState.LoadInitialAnalysisDataAsync()`, which in its turn attempts to load multiple `DiagnosticAnalysisResult`s from the analysis database. This (in VS) invokes `SQLitePersistentStorage.ReadStreamAsync`, that invokes SQLite. By default, SQLite uses [journal mode](https://sqlite.org/pragma.html#pragma_journal_mode) *DELETE*, which means that journal is deleted when not used. When [preparing a transaction](https://github.com/mackyle/sqlite/blob/5e9d7dc9750e4bf98e7709fa09628cd156d72b80/src/btree.c#L3259), SQLite [acquires a shared lock for a btree](https://github.com/mackyle/sqlite/blob/5e9d7dc9750e4bf98e7709fa09628cd156d72b80/src/btree.c#L2951), and, consequentially, [a pager](https://github.com/mackyle/sqlite/blob/f4d982b49fb4ac64e708f2552ce1c32ad82c5472/src/pager.c#L5140), where a [series](https://github.com/mackyle/sqlite/blob/f4d982b49fb4ac64e708f2552ce1c32ad82c5472/src/pager.c#L5036) of [checks](https://github.com/mackyle/sqlite/blob/f4d982b49fb4ac64e708f2552ce1c32ad82c5472/src/pager.c#L3334) is done, testing if database needs recovery (either has rollback journal or uses WAL). Unfortunately, since the journal is deleted after each successful transaction, even read-only transactions perform an extra 2 system calls (there are actually more than 2 extra calls in non-readonly case, but these ones would suffice for now) -- the `FileIoCreate` for files named \"storage.ide-journal\" and \"storage.ide-wal\".\r\n\r\nSince there is a lot of transactions, over the course of a 10-second ETW trace captured after solution finished loading and Roslyn kicked in to load diagnostics, about 200000 of each `FileIoCreate` syscalls were recorded, making it about 200000 * 2 / 10 = 40K syscalls/s.\r\nOn all machines I have access to, this syscall is not fast enough, and disk speed (RAMDrive made no difference vs PCI-E SSD), installed driver-level filters (Defender realtime protection was turned off) or filesystem (FAT32 made no difference vs NTFS) do not matter much. Over the same trace, out of ~9600ms CPU time spent by `DiagnosticsDataSerializer.DeserializeAsync` and its descendants, the combination of `kernel32!GetFileAttributesExW` and `kernel32!GetFileSize` account for ~4200ms of CPU time, which is roughly half of the time spent deserializing data.\r\n\r\n**Proposal**:\r\nWhile I believe that some kind of read combining for inital analysis data loading would be a better solution, I consider this a larger effort that should be addressed later, so my proposal is a bit simpler: enable [write-ahead logging](https://sqlite.org/wal.html). I did a quick search over issues/PRs and didn't find any explicit mentions of WAL, except #21800, which mentions WAL by itself, but doesn't introduce it. I did a simple test, and enabling WAL reduced the initial analysis load time by about 40%.\r\n\r\n**Final notes**:\r\nAs I'm no expert on neither Roslyn and its inner workings, nor SQLite, it may be so that my analysis is incorrect. Also, there might be reasons (unknown to me) that make WAL not an option. If this is the case, please excuse me for spending your time on reading this.\r\n\r\n**Technical details**:\r\nPerformance traces were recorded with PerfView with in-memory circular buffer to prevent event loss due to lots of async transfer events. I did not record thread time, because I wasn't researching stalls/locks.\r\n***CPU analysis***:\r\nPerfView `CPU Stacks` settings:\r\n```\r\nGroupPats: [group CLR/OS entries]\r\nFoldPats: mscorlib!;mscorlib.ni!;sqlitepclraw.core!;sqlitepclraw.provider.e_sqlite3!\r\n```\r\n\r\nBefore:\r\n```\r\nName                                                                                                                                   \tInc %\t     Inc\r\n module microsoft.codeanalysis.workspaces.desktop <<microsoft.codeanalysis.workspaces.desktop!SQLitePersistentStorage.ReadStreamAsync>>\t 86,7\t   9 168\r\n+ module e_sqlite3 <<e_sqlite3!?>>                                                                                                     \t 72,4\t   7 661\r\n|+ OS <<kernelbase!GetFileAttributesExW>>                                                                                              \t 42,2\t   4 463\r\n|+ OS <<kernelbase!GetFileSize>>                                                                                                       \t  6,2\t     658\r\n|+ OS <<kernelbase!LockFileEx>>                                                                                                        \t  4,2\t     448\r\n|+ OS <<kernelbase!ReadFile>>                                                                                                          \t  3,6\t     383\r\n|+ OS <<kernelbase!UnlockFileEx>>                                                                                                      \t  2,7\t     281\r\n```\r\n\r\nAfter:\r\n```\r\nName                                                                                                                                   \tInc %\t     Inc\r\n module microsoft.codeanalysis.workspaces.desktop <<microsoft.codeanalysis.workspaces.desktop!SQLitePersistentStorage.ReadStreamAsync>>\t 75,8\t   8 151\r\n+ module e_sqlite3 <<e_sqlite3!?>>                                                                                                     \t 40,9\t   4 398\r\n|+ OS <<kernelbase!LockFileEx>>                                                                                                        \t  8,7\t     940\r\n|+ OS <<kernelbase!UnlockFileEx>>                                                                                                      \t  5,4\t     585\r\n```\r\n\r\n***Syscall analysis***:\r\nPerfView `Files Stacks` settings:\r\n```\r\nGroupPats: [group module entries]\r\nFoldPats: wow64!;wow64cpu!;ntdll!;ntoskrnl!;kernelbase!;fltmgr!;fileinfo!;sqlitepclraw.provider.e_sqlite3!;sqlitepclraw.core!;mscorlib!\r\n```\r\n\r\n```\r\nName                                                                                                                                   \tInc %\t       Inc\r\n module microsoft.codeanalysis.workspaces.desktop <<microsoft.codeanalysis.workspaces.desktop!SQLitePersistentStorage.ReadStreamAsync>>\t 97,0\t   404 878\r\n+ module e_sqlite3 <<e_sqlite3!?>>                                                                                                     \t 97,0\t   404 878\r\n + FileOpenOrCreate ...\\v15\\sqlite3\\storage.ide-journal                              \t 48,5\t   202 439\r\n + FileOpenOrCreate ...\\v15\\sqlite3\\storage.ide-wal                                  \t 48,5\t   202 439\r\n```"},{"Id":"6716095777","Type":"PullRequestEvent","CreatedAt":"2017-10-14T02:36:36","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22340","RelatedDescription":"Merged pull request \"Configure SQLite locking and journaling\" (#22340) at dotnet/roslyn","RelatedBody":"Configures SQLite locking and journaling to improve #22339."},{"Id":"6716036421","Type":"IssuesEvent","CreatedAt":"2017-10-14T01:46:06","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22696","RelatedDescription":"Opened issue \"EnC Changing active statement in property from block to expression body is not supported \" (#22696) at dotnet/roslyn","RelatedBody":"See Property_BlockBodyToExpressionBody_NonLeaf test\r\n\r\nChange from \r\n`class C \r\n{ \r\n    int P { get { <AS:1>return M();</AS:1> } } \r\n    int M() { <AS:0>return 1;</AS:0> } \r\n}`\r\nto\r\n`class C \r\n{ \r\n    int P => <AS:1>M()</AS:1>; \r\n    int M() { <AS:0>return 1;</AS:0> } \r\n}`\r\ncan be supported but now returns a rude edit.\r\n\r\nThe fix should be arranged in TryMatchActiveStatement. There is an old TODO saying \r\n\r\n> // TODO: Consider mapping an expression body to an equivalent statement expression or return statement and vice versa.\r\n                    // It would benefit transformations of expression bodies to block bodies of lambdas, methods, operators and properties."},{"Id":"6715864865","Type":"PullRequestEvent","CreatedAt":"2017-10-13T23:51:48","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22571","RelatedDescription":"Merged pull request \"remove unnecessary block from bound node for single line lambda\" (#22571) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nit affects diagnostic analyzer author not VS users. for the author, when they get called for IAnonymousFunctionExpression, they might see 2 nested IBlock operations instead of 1.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://github.com/dotnet/roslyn/issues/22196\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=507638\r\n\r\n**Workarounds, if any**\r\n\r\nthere is no workaround.\r\n\r\n**Risk**\r\n\r\nthis is new API, no risk.\r\n\r\n**Performance impact**\r\n\r\nthere is no perf risk\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nWe wrapped statements on block twice unnecessarily. \r\n\r\n**How was the bug found?**\r\n\r\ndogfooding and testing.\r\n"},{"Id":"6715839911","Type":"PullRequestEvent","CreatedAt":"2017-10-13T23:38:29","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22695","RelatedDescription":"Opened pull request \"Public API cleanup for certain IOperation APIs\" (#22695) at dotnet/roslyn","RelatedBody":"1. Remove the unimplemented IOperation public API GetRootOperation: \r\nhttps://github.com/mavasani/roslyn/commit/e3c2994fb4b67018a56561c0db79fd3de9e379b1\r\n2. Remove unused None fields in few public IOperation enums\r\n: https://github.com/mavasani/roslyn/commit/a821d6512f9dce8ce698a038b54ac397df8497db, https://github.com/mavasani/roslyn/commit/303969ebe7d861073691143ec3a13e90d372e5f5 and https://github.com/mavasani/roslyn/commit/3d900354cdf7cd289070a43869c0e112b71af754\r\n3. Add missing xml documentation comments for few public IOperation APIs: https://github.com/mavasani/roslyn/commit/e44145c7141f792d65e283b7d1c9e896dcbc4003"},{"Id":"6715793335","Type":"IssuesEvent","CreatedAt":"2017-10-13T23:15:50","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22694","RelatedDescription":"Opened issue \"Remove unused None fields in few public IOperation enums\" (#22694) at dotnet/roslyn","RelatedBody":"1. ArgumentKind.None\r\n2. BinaryOperatorKind.None\r\n3, BranchKind.None\r\n4. CaseKind.None\r\n5. DoLoopKind.None\r\n6. LoopKind.None\r\n7. UnaryOperatorKind.None"},{"Id":"6715784178","Type":"IssuesEvent","CreatedAt":"2017-10-13T23:11:38","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22279","RelatedDescription":"Closed issue \"API review for IUsingStatement\" (#22279) at dotnet/roslyn","RelatedBody":"We should merge the `Declaration` and `Value` into a single field. The OperationKind of this field will tell the user whether it is a variable declaration or an expression.\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/IUsingStatement.cs,afcaf33ff8626c1b"},{"Id":"6715784176","Type":"PullRequestEvent","CreatedAt":"2017-10-13T23:11:38","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22630","RelatedDescription":"Merged pull request \"Using statement\" (#22630) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/22279. @heejaechang, https://github.com/dotnet/roslyn/pull/22570 and this will conflict, whichever is merged first. This should be one of the last major IOperation API changes we need to take for V1.\r\n\r\nAssociated VSO bug : https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=507699"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6716128505","Type":"PullRequestEvent","CreatedAt":"2017-10-14T03:04:52","Actor":"EgorBo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4723","RelatedDescription":"Opened pull request \"Fix RegistryKey access modifier when REGISTRY_ASSEMBLY is defined\" (#4723) at dotnet/corert","RelatedBody":"RegistryKey is partial but has only 'internal' access modifier while [RegistryKey.Windows.cs](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/Microsoft/Win32/RegistryKey.Windows.cs#L58-L62) has both. "},{"Id":"6715958343","Type":"PullRequestEvent","CreatedAt":"2017-10-14T00:46:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4722","RelatedDescription":"Opened pull request \"Delete contract annotations\" (#4722) at dotnet/corert","RelatedBody":"Port of https://github.com/dotnet/coreclr/pull/14136 to CoreRT"},{"Id":"6715908735","Type":"PullRequestEvent","CreatedAt":"2017-10-14T00:15:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4720","RelatedDescription":"Merged pull request \"Update dependencies to latest\" (#4720) at dotnet/corert","RelatedBody":""},{"Id":"6715568089","Type":"PullRequestEvent","CreatedAt":"2017-10-13T21:49:18","Actor":"jkoritzinsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4721","RelatedDescription":"Opened pull request \"Implement Shift Opcodes for WebAssembly\" (#4721) at dotnet/corert","RelatedBody":"Fixes #4523 \r\n@morganbr."},{"Id":"6715282586","Type":"PullRequestEvent","CreatedAt":"2017-10-13T20:27:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4720","RelatedDescription":"Opened pull request \"Update dependencies to latest\" (#4720) at dotnet/corert","RelatedBody":""},{"Id":"6715275180","Type":"PullRequestEvent","CreatedAt":"2017-10-13T20:25:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4719","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4719) at dotnet/corert","RelatedBody":""},{"Id":"6714433554","Type":"PullRequestEvent","CreatedAt":"2017-10-13T16:54:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4719","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4719) at dotnet/corert","RelatedBody":""},{"Id":"6714432106","Type":"PullRequestEvent","CreatedAt":"2017-10-13T16:53:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4714","RelatedDescription":"Merged pull request \"[ILVerify] Implement tracking of 'this' pointer state\" (#4714) at dotnet/corert","RelatedBody":"The ECMA standard defines that:\r\n\r\n> the verification algorithm shall treat the `this` pointer as uninitialized unless the base class constructor has been called. No operations can be performed on an uninitialized `this` except for storing into and loading from the object's fields.\r\n\r\nI implemented the tracking of the `this` pointer state in order to be able to verify these rules.\r\n\r\nIn order to test this new implementation, I had to adapt our current test-framework to be able to also test methods with a special name, e.g. `.ctor`. Since the framework relies on the test method's name, it was not previously possible to test a type's constructor.\r\nI have implemented special test case handling in the test data loader and added documentation on how to add test cases for specialname methods in the Readme.md.\r\nBasically the specialname method is defined as usual and a separate method (which may stay empty) has to be added, which defines the test case in the accustomed manner and also defines the name of the special method that should actually be tested. The method tester then takes the test parameters of the dummy method, but tests the specialname method.\r\n\r\nI have added several test cases for tracking the `this` state this way."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":97,"FavoriteCount":61,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-10-14T05:30:18.3632608Z","RunDurationInMilliseconds":6589}