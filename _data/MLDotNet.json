{"Data":{"GitHub":{"Issues":[{"Id":"578260111","IsPullRequest":true,"CreatedAt":"2020-03-19T00:55:50","Actor":"frank-dong-ms","Number":"4924","RawContent":null,"Title":"Tensorflow crash issue","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4924","RelatedDescription":"Closed or merged PR \"Tensorflow crash issue\" (#4924)"},{"Id":"583494501","IsPullRequest":true,"CreatedAt":"2020-03-18T22:14:27","Actor":"frank-dong-ms","Number":"4950","RawContent":null,"Title":"fix race condition for test MulticlassTreeFeaturizedLRTest","State":"closed","Body":"method in TreeEnsembleFeaturizerTransform will be called from multi-threading, make variable \"temp\" as local variable to avoid race condition.","Url":"https://github.com/dotnet/machinelearning/pull/4950","RelatedDescription":"Closed or merged PR \"fix race condition for test MulticlassTreeFeaturizedLRTest\" (#4950)"},{"Id":"584001656","IsPullRequest":true,"CreatedAt":"2020-03-18T21:04:38","Actor":"frank-dong-ms","Number":"4953","RawContent":null,"Title":"test for benchmark test hanging","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4953","RelatedDescription":"Open PR \"test for benchmark test hanging\" (#4953)"},{"Id":"583898371","IsPullRequest":false,"CreatedAt":"2020-03-18T17:42:12","Actor":"francescomazzurco","Number":"4952","RawContent":null,"Title":"Request: expose Experiment._modelDirectory","State":"open","Body":"Hi all,\r\n\r\nIn AutoML, when configuring the `ExperimentSettings`, one can set a `CacheDirectory` where the intermediate models will be stored. However, the models are actually stored in a subfolder, called \"ExperimentXX\", where XX in an auto-increment integer in v.0.14.0, and some random characters in the recent preview releases. Navigating the source code, I found that this path is stored inside the private readonly field `_modelDirectory` belonging to the internal class `Experiment<TRunDetail, TMetrics>`. When running many experiments, there is no way to associate each experiment to each subfolder. \r\nIn my scenario, caching is necessary due to dataset size, and I would like to delete the temporary models at the end of the experiment without bothering other experiments that may be running simultaneously.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4952","RelatedDescription":"Open issue \"Request: expose Experiment._modelDirectory\" (#4952)"},{"Id":"577382791","IsPullRequest":false,"CreatedAt":"2020-03-18T16:52:06","Actor":"artemiusgreat","Number":"4923","RawContent":null,"Title":"How Transformer converts structured or custom data view type into a feature value?","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro x64\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.0\r\n- **ML.NET Version**: 1.5.0-preview\r\n\r\n### Question\r\n\r\nWhen implementing a custom data view type, how does transformer know what to use as a \"value\" of this type? Does it use `GetHashCode()` method for this?\r\n\r\n### Source code \r\n\r\nConsidering, we have this custom image type with properties Width and Height. \r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.ImageAnalytics/ImageType.cs \r\n\r\nThen, we have this transformer code that merges several columns into one called `Features`. \r\nOne of these columns has type `ImageType`. \r\n\r\n```C#\r\n  var pipeline = Context\r\n    .Transforms\r\n    .Conversion\r\n    .Append(Context.Transforms.Concatenate(\"Features\", new[] { \"ImageColumn\", \"Points\" }));\r\n```\r\n\r\nAs far as I understand, for ML engine to learn something from the provided data, `Features` should be an array of float values. So, the question is, how `ImageColumn` and `Points` will be converted to floats? \r\n\r\nAnother example that I found is this test for custom type registration. \r\nIt's also using GetHashCode method. \r\nhttps://github.com/dotnet/machinelearning/blob/release/1.5-preview/test/Microsoft.ML.Core.Tests/UnitTests/TestCustomTypeRegister.cs\r\n\r\n**I'd like somebody to confirm that whatever is returned from GetHashCode method will be used in training the model.**\r\n\r\n```C#\r\npublic override int GetHashCode() // unique value for ImageType\r\n{\r\n    return Hashing.CombineHash(Height.GetHashCode(), Width.GetHashCode());\r\n}\r\n```\r\n\r\nI'm asking because, e.g. OnnxMapType or OnnxSequenceType are completely different animals, whose GetHashCode method returns value based on a data type, not its value.\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.OnnxTransformer/OnnxMapType.cs\r\n\r\n```C#\r\npublic override int GetHashCode() // uniquer value for OnnxMapType\r\n{\r\n    return RawType.GetHashCode();\r\n}\r\n```\r\n\r\n**Does it mean that ONNX types cannot be used for training because their hash code is based on a System.Type instead of actual observation?**","Url":"https://github.com/dotnet/machinelearning/issues/4923","RelatedDescription":"Closed issue \"How Transformer converts structured or custom data view type into a feature value?\" (#4923)"},{"Id":"579694210","IsPullRequest":false,"CreatedAt":"2020-03-18T16:51:35","Actor":"philiplai","Number":"4937","RawContent":null,"Title":"model.LastTransformer doesn't exist","State":"closed","Body":"I was trying to implement Permutation Feature Importance (PFI) for Binary Classification.  But I was stuck on the following line of code.  This method simply doesn't exist.\r\n// Extract the predictor.\r\nvar linearPredictor = model.LastTransformer;\r\n\r\nI was following the example on https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet\r\n\r\nAny idea?\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 5ec45442-8e5f-a544-cc9a-58483a383513\r\n* Version Independent ID: 040169f9-d169-cbbd-099e-f04a7a5a6b3f\r\n* Content: [PermutationFeatureImportanceExtensions.PermutationFeatureImportance Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4937","RelatedDescription":"Closed issue \"model.LastTransformer doesn't exist\" (#4937)"},{"Id":"583555577","IsPullRequest":true,"CreatedAt":"2020-03-18T08:29:49","Actor":"justinormont","Number":"4951","RawContent":null,"Title":"Pin hash in DownloadTensorFlowSentimentModel()","State":"open","Body":"Changes `DownloadTensorFlowSentimentModel()` to download from a specific commit ID instead of master. \r\n\r\nOtherwise older versions of the code will break when the repo is reorganized, or the files renamed.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4951","RelatedDescription":"Open PR \"Pin hash in DownloadTensorFlowSentimentModel()\" (#4951)"},{"Id":"583379348","IsPullRequest":true,"CreatedAt":"2020-03-18T00:22:16","Actor":"LittleLittleCloud","Number":"4949","RawContent":null,"Title":"Add allowBinary Flag to internal columnInference ","State":"open","Body":"Add allowBinary flag to internal columnInference API. to stop parsing label as `Boolean` type when it's not binary experiment.","Url":"https://github.com/dotnet/machinelearning/pull/4949","RelatedDescription":"Open PR \"Add allowBinary Flag to internal columnInference \" (#4949)"},{"Id":"583259931","IsPullRequest":false,"CreatedAt":"2020-03-17T19:53:12","Actor":"luisquintanilla","Number":"4948","RawContent":null,"Title":"Wrong Transform Sample","State":"open","Body":"Sample shows `LoadImages` not `LoadRawImageBytes`\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 935b3cba-8385-d7b1-0d1c-92ce1e5b6bef\r\n* Version Independent ID: f4c01ba9-1f3e-03fa-48ea-1a62a13e11b4\r\n* Content: [ImageEstimatorsCatalog.LoadRawImageBytes(TransformsCatalog, String, String, String) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.imageestimatorscatalog.loadrawimagebytes?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/ImageEstimatorsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/ImageEstimatorsCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4948","RelatedDescription":"Open issue \"Wrong Transform Sample\" (#4948)"},{"Id":"583239359","IsPullRequest":false,"CreatedAt":"2020-03-17T19:14:56","Actor":"natke","Number":"4947","RawContent":null,"Title":"ordinal regression in ML.NET ","State":"open","Body":"The page [ordinal-regression.md](https://github.com/MicrosoftDocs/azure-reference-other/blob/master/studio-module-reference/ordinal-regression.md) describes the ordinal regression module. Is there a way to use this module/class in ML.NET in C#?\r\nAny hints are welcome.\r\nGreetings, Wido\r\n\r\nSee https://github.com/MicrosoftDocs/azure-reference-other/issues/90 for the original issue.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4947","RelatedDescription":"Open issue \"ordinal regression in ML.NET \" (#4947)"},{"Id":"583013577","IsPullRequest":true,"CreatedAt":"2020-03-17T13:29:18","Actor":"mengaims","Number":"4946","RawContent":null,"Title":"Add optional expected value and margin output for srcnn anomaly detector","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4946","RelatedDescription":"Open PR \"Add optional expected value and margin output for srcnn anomaly detector\" (#4946)"},{"Id":"581622528","IsPullRequest":false,"CreatedAt":"2020-03-16T17:40:30","Actor":"huy-lv","Number":"4944","RawContent":null,"Title":"How to train model from image bitmap","State":"closed","Body":"### System information\r\nWindow 10\r\n\r\n### Issue\r\n- **What did you do?**\r\nHi everyone, I want to build a model from training data like this\r\n```\r\nclass ModelInput {\r\n    Bitmap image { get; set; }\r\n}\r\n```\r\nI cant find any example with input data as bitmap. How do i do that?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4944","RelatedDescription":"Closed issue \"How to train model from image bitmap\" (#4944)"},{"Id":"580904660","IsPullRequest":true,"CreatedAt":"2020-03-14T00:46:43","Actor":"Lynx1820","Number":"4942","RawContent":null,"Title":"Fixes KMeans scoring differences between ORT and OnnxRunner","State":"closed","Body":"The KMeans ORT score predictions were off because batches were not being handled correctly. \r\nThere is still an issue because Nimbus produces int32 predictions, when they should be uint32, since ML.NET returns key values, but I plan on working on that separately, since it's probably a Nimbus bug. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4942","RelatedDescription":"Closed or merged PR \"Fixes KMeans scoring differences between ORT and OnnxRunner\" (#4942)"},{"Id":"580931672","IsPullRequest":true,"CreatedAt":"2020-03-13T23:33:31","Actor":"mstfbl","Number":"4943","RawContent":null,"Title":"Fixed and Added unit tests for DownloadFromUrlWithRetryAsync hanging issue  ","State":"open","Body":"Fixed DownloadFromUrlWithRetryAsync by removing the helper function ResourceManagerUtils.CheckValidDownload and by using WebClientResponseUri (an extension of WebClient)\r\n\r\nResourceManagerUtils.EnsureResourceAsync(...) appends the relative URL of a resource to the $MlNetResourcesUrl environment variable (equal to \"https://aka.ms/mlnet-resources/\" by default).\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cdb1e4b38308d9256cbde9e740a14b3bc7d64c2f/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L34\r\n\r\nFor example, this occurs in the unit test WordEmbeddingsTest.TestWordEmbeddings(), where `sentimend.emd` is downloaded from https://aka.ms/mlnet-resources/Text/Sswe/sentiment.emd .\r\n\r\nThere is a possibility of this combined URL not correctly pointing to a resource, which is why this CheckValidDownload function exists:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cdb1e4b38308d9256cbde9e740a14b3bc7d64c2f/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L168-L184\r\n\r\nThis function was not correctly warning that the HTML of www.microsoft.com was downloaded (instead of an intended data file), as the size of microsoft.com is bigger than 4 kilobytes, and the site should have the sub-strings <head and <body (not <head> and <body>).","Url":"https://github.com/dotnet/machinelearning/pull/4943","RelatedDescription":"Open PR \"Fixed and Added unit tests for DownloadFromUrlWithRetryAsync hanging issue  \" (#4943)"},{"Id":"580804713","IsPullRequest":true,"CreatedAt":"2020-03-13T20:26:22","Actor":"najeeb-kazmi","Number":"4941","RawContent":null,"Title":"Add see also section to TensorFlowEstimator docs","State":"closed","Body":"Fixes #4932 ","Url":"https://github.com/dotnet/machinelearning/pull/4941","RelatedDescription":"Closed or merged PR \"Add see also section to TensorFlowEstimator docs\" (#4941)"},{"Id":"579215175","IsPullRequest":false,"CreatedAt":"2020-03-13T20:26:22","Actor":"vslynko","Number":"4932","RawContent":null,"Title":"TensorFlowEstimator initialization info is missing","State":"closed","Body":"`TensorFlowEstimator` is not static and has no public constructors. Therefore the link to the documentation on how to initialize `TensorFlowEstimator` is essential.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 7366dd71-3899-63fb-690e-5e0d11a5bf13\r\n* Version Independent ID: 4e44da94-51eb-2617-135a-eb71186b4da9\r\n* Content: [TensorFlowEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.tensorflowestimator?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/TensorFlowEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/TensorFlowEstimator.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4932","RelatedDescription":"Closed issue \"TensorFlowEstimator initialization info is missing\" (#4932)"},{"Id":"579104390","IsPullRequest":true,"CreatedAt":"2020-03-13T19:01:59","Actor":"mstfbl","Number":"4931","RawContent":null,"Title":"Added hanging test mem dump feature","State":"closed","Body":"Added the option to automatically collect memory dumps on hanging and crashing tests through VSTest Tasks and ProcDump.\r\n\r\nAlso added a section in the developer guide explaining the process to collecting memory dumps from CI builds.","Url":"https://github.com/dotnet/machinelearning/pull/4931","RelatedDescription":"Closed or merged PR \"Added hanging test mem dump feature\" (#4931)"},{"Id":"580714924","IsPullRequest":true,"CreatedAt":"2020-03-13T18:19:08","Actor":"natke","Number":"4940","RawContent":null,"Title":"Fix xrefs in the LDSVM trainer docs","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4940","RelatedDescription":"Closed or merged PR \"Fix xrefs in the LDSVM trainer docs\" (#4940)"},{"Id":"578330610","IsPullRequest":false,"CreatedAt":"2020-03-13T05:45:55","Actor":"artemiusgreat","Number":"4926","RawContent":null,"Title":"SdcaMaximumEntropy trainer goes into an infinite loop if it takes already transformed data view as an input","State":"closed","Body":"### System information\r\n\r\n- **OS version**: Windows 10 Pro x64\r\n- **.NET Version**: .NET Core 3.0\r\n- **ML.NET**: 1.5.0-preview\r\n\r\n### Issue\r\n\r\n**What I did**\r\n- create data-preparation pipeline \r\n- create trainer SdcaMaximumEntropy \r\n- execute pipeline, e.g. to debug transformed data view \r\n- add trainer to the pipeline and execute pipeline again, with the trainer included \r\n \r\n**What happened**\r\n\r\nIf I execute pipeline once, e.g. load from enumerables into data view and then execute entire transformation chain that includes transformations and trainer, everything works fine. \r\n\r\nIf I execute pipeline twice, first time - separately, then - as a part of entire transformation chain, it consumes 3GB of RAM memory out of 16GB available, then **training hangs indefinitely** and never ends. \r\nFixed this temporarily by changing this `MaximumNumberOfIterations` option, but not sure if it's a good idea...  \r\n\r\n**What I expect**\r\n\r\nI expect training to stop eventually, no matter how many times I execute pipeline. \r\n**Check the comment on the last line in the core below.**\r\n\r\n### Source code \r\n\r\nSource code is taken from this issue https://github.com/dotnet/machinelearning/issues/4903\r\n\r\n```C#\r\n\r\npublic IEstimator<ITransformer> GetPipeline(IEnumerable<string> columns)\r\n{\r\n  var pipeline = Context\r\n    .Transforms\r\n    .Conversion\r\n    .MapValueToKey(new[] { new InputOutputColumnPair(\"Label\", \"Strategy\") })\r\n    .Append(Context.Transforms.Concatenate(\"Combination\", columns.ToArray())) // merge \"dynamic\" colums into single property\r\n    .Append(Context.Transforms.NormalizeMinMax(new[] { new InputOutputColumnPair(\"Features\", \"Combination\") })) // normalize merged columns into Features\r\n    .Append(Context.Transforms.SelectColumns(new string[] { \"Label\", \"Features\" })); // remove everything from data view, except transformed columns\r\n\r\n  return pipeline;\r\n}\r\n\r\npublic IEstimator<ITransformer> GetEstimator()\r\n{\r\n  var options = new SdcaMaximumEntropyMulticlassTrainer.Options\r\n  {\r\n    // MaximumNumberOfIterations = 100  // uncomment this to fix the issue\r\n  };\r\n\r\n  var estimator = Context\r\n    .MulticlassClassification\r\n    .Trainers\r\n    .SdcaMaximumEntropy(options)\r\n    .Append(Context.Transforms.Conversion.MapKeyToValue(new[]\r\n    {\r\n      new InputOutputColumnPair(\"Prediction\", \"PredictedLabel\") // set trainer to use Prediction property as output\r\n    }));\r\n\r\n  return estimator;\r\n}\r\n\r\npublic void TrainModel(IEnumerable<string> columns, IEnumerable<InputModel> items)\r\n{\r\n  var estimator = GetEstimator();\r\n  var pipeline = GetPipeline(columns);\r\n  var inputs = Context.Data.LoadFromEnumerable(items);  // create view \r\n\r\n  // If I stop execution here, everything is ok\r\n\r\n  var model = pipeline.Append(estimator).Fit(inputs);  // works fine for the data view loaded from enumerables\r\n\r\n  // Data preparation pipeline is a part of a transformation chain, so I don't need next 2 lines, but I don't understand why it's causing the issue\r\n  \r\n  var pipelineModel = pipeline.Fit(inputs);  \r\n  var pipelineView = pipelineModel.Transform(inputs); // execute pipeline before the training\r\n  var model = pipeline.Append(estimator).Fit(pipelineView); // use transformed pipelineView instead of initial inputs and ... go into infinite loop ... why?\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4926","RelatedDescription":"Closed issue \"SdcaMaximumEntropy trainer goes into an infinite loop if it takes already transformed data view as an input\" (#4926)"},{"Id":"580137617","IsPullRequest":true,"CreatedAt":"2020-03-12T18:26:49","Actor":"harishsk","Number":"4939","RawContent":null,"Title":"Draft PR to debug tensorflow issues","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4939","RelatedDescription":"Open PR \"Draft PR to debug tensorflow issues\" (#4939)"},{"Id":"579681677","IsPullRequest":true,"CreatedAt":"2020-03-12T17:03:07","Actor":"harishsk","Number":"4936","RawContent":null,"Title":"Updated version to 1.5.0-preview3","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4936","RelatedDescription":"Closed or merged PR \"Updated version to 1.5.0-preview3\" (#4936)"},{"Id":"579736111","IsPullRequest":true,"CreatedAt":"2020-03-12T07:06:37","Actor":"mstfbl","Number":"4938","RawContent":null,"Title":"Added working version of checking whether file is available for access","State":"open","Body":"Recently AutoFitRegressionTest() and AutoFitBinaryTest() have been failing occasionally on our MachineLearning-Full CI builds with the error:\r\n\r\n> System.IO.IOException : The process cannot access the file 'D:\\a\\1\\s\\bin\\AnyCPU.Debug\\Microsoft.ML.AutoML.Tests\\netcoreapp2.1\\...dataset' because it is being used by another process.\r\n> \r\n> Stack trace\r\n>    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n>    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n>    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n>    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n>    at Microsoft.ML.AutoML.TextFileSample.CreateFromFullFile(String path) in D:\\a\\1\\s\\src\\Microsoft.ML.AutoML\\ColumnInference\\TextFileSample.cs:line 76\r\n>  ...\r\n\r\n(Specific errors for [AutoFitRegressionTest ](https://dev.azure.com/dnceng/public/_build/results?buildId=555337&view=logs&j=dd8eddb6-ecc6-5f65-73e6-df90e5693b94&t=5b4b90b5-382b-59ee-45ec-a64c47991239&l=202)and [AutoFitBinaryTest](https://dev.azure.com/dnceng/public/_build/results?buildId=545476&view=logs&j=41509eb4-74ce-5e57-61b4-bdf74b39e7c1&t=dbdc2969-5b98-5c39-1328-31d4a2fdc45e&l=286) from CI builds)\r\n\r\nThis indicates that the .dataset file that is trying to be reached still has a lock on it, and is not yet ready for accessing. The current method of checking whether this file is ready to be accessed (checking `new FileInfo(dataFile).Length > 0` is not sufficient. \r\n\r\nThe fix below remedies this by obtaining these dataset files from the local `test/data` path, and thereby eliminating the possibility of download locks.","Url":"https://github.com/dotnet/machinelearning/pull/4938","RelatedDescription":"Open PR \"Added working version of checking whether file is available for access\" (#4938)"},{"Id":"579653089","IsPullRequest":true,"CreatedAt":"2020-03-12T06:00:22","Actor":"frank-dong-ms","Number":"4935","RawContent":null,"Title":"Nightlybuild fix","State":"closed","Body":"several issue here:\r\n1. delete useless folder to avoid no disk space\r\n2. add missing dependency for nightly build\r\n3. fix LD_LIBRARY_PATH for CentOS to set proper native reference path\r\n4. increase build time, seems it takes more time now for net core 3.0 to build","Url":"https://github.com/dotnet/machinelearning/pull/4935","RelatedDescription":"Closed or merged PR \"Nightlybuild fix\" (#4935)"},{"Id":"578821017","IsPullRequest":true,"CreatedAt":"2020-03-11T21:34:21","Actor":"Lynx1820","Number":"4928","RawContent":null,"Title":"Fix for MulticlassNaiveBayesTrainer export to Onnx","State":"closed","Body":"- Adding support for a batch input dimension\r\n- While ML.NET doesn't use this batch dimension, ORT does.  \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4928","RelatedDescription":"Closed or merged PR \"Fix for MulticlassNaiveBayesTrainer export to Onnx\" (#4928)"},{"Id":"579469782","IsPullRequest":true,"CreatedAt":"2020-03-11T20:05:28","Actor":"najeeb-kazmi","Number":"4934","RawContent":null,"Title":"Improved documentation for LdSvmTrainer","State":"closed","Body":"Adds explanation of the algorithm, moves details to remarks, adds references to samples.","Url":"https://github.com/dotnet/machinelearning/pull/4934","RelatedDescription":"Closed or merged PR \"Improved documentation for LdSvmTrainer\" (#4934)"},{"Id":"579237248","IsPullRequest":false,"CreatedAt":"2020-03-11T12:44:08","Actor":"vslynko","Number":"4933","RawContent":null,"Title":"AccessViolationException PredictionEngine when 100-200 concurrent predictions running async","State":"open","Body":"### System information\r\n\r\n- Windows 10 64bit latest. 4 core CPU with hyperthreading.\r\n- Main app net48, that loads dependency in net472 that loads Microsoft.ML.Tensorflow 1.4: \r\n\r\n### Issue\r\n\r\n- Multiple concurrent tasks scheduled with `Task.WhenAll`. All tasks perform the same lambda, that involves calling PredictionEngineBase.Predict call. Number of tasks in parallel stacks window is about 100-200. \r\n- `AccessViolationException` thrown with message \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\r\n- As in case when number of tasks is not that big, ~30-50 I would expect no exception.\r\n\r\n### Source code / logs\r\nTwo different stack traces point to about same location in the code. The difference is that I rearrange a little async workflow by switch couple of async tasts around.\r\n```stacktrace\r\n   at System.SpanHelpers.CopyTo[T](T& dst, Int32 dstLength, T& src, Int32 srcLength)\r\n   at System.Span`1.TryCopyTo(Span`1 destination)\r\n   at Microsoft.ML.TensorFlow.TensorTypeExtensions.CopyTo[T](Tensor tensor, Span`1 values)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.Predict(TSrc example)\r\n   at InstaFlow.TensorFlow.Gp2.TfGpBaseV2`1.Predict(TfGpSeriesV2 series)\r\n   at InstaFlow.TensorFlow.Gp2.TfGpBaseV2`1.CorrectInternal(T model, TfInput input)\r\n   at InstaFlow.TensorFlow.TfEstimatorV2.TimerAction[T](Func`1 func)\r\n   at InstaFlow.TensorFlow.TfEstimatorV2.EstimateAndEvaluate(TfInput input)\r\n```\r\n\r\n```stacktrace\r\n   at Tensorflow.c_api.TF_TensorByteSize(IntPtr tensor)\r\n   at Tensorflow.Tensor.get_bytesize()\r\n   at Tensorflow.Tensor.get_size()\r\n   at Microsoft.ML.TensorFlow.TensorTypeExtensions.CopyTo[T](Tensor tensor, Span`1 values)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.Predict(TSrc example)\r\n   at InstaFlow.TensorFlow.Estimator.TfEstimatorBase.Predict(TfSeries series) in C:\\src\\instaflow\\dotnet\\InstaFlow.TensorFlow\\Estimator\\TfEstimatorBase.cs:line 101\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4933","RelatedDescription":"Open issue \"AccessViolationException PredictionEngine when 100-200 concurrent predictions running async\" (#4933)"},{"Id":"578885494","IsPullRequest":true,"CreatedAt":"2020-03-10T23:31:46","Actor":"frank-dong-ms","Number":"4929","RawContent":null,"Title":"add back lightgbm crash mitigation","State":"closed","Body":"we are seeing several crash so there might be more issue there, will remove this mitigation if we root cause and fix other remaining issue within lightgbm test\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4929","RelatedDescription":"Closed or merged PR \"add back lightgbm crash mitigation\" (#4929)"},{"Id":"578891508","IsPullRequest":true,"CreatedAt":"2020-03-10T22:11:18","Actor":"mstfbl","Number":"4930","RawContent":null,"Title":"Debugging hanging tests [Draft, WIP]","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4930","RelatedDescription":"Open PR \"Debugging hanging tests [Draft, WIP]\" (#4930)"},{"Id":"578394306","IsPullRequest":true,"CreatedAt":"2020-03-10T20:07:02","Actor":"frank-dong-ms","Number":"4927","RawContent":null,"Title":"fix LdaWorkoutEstimatorCore","State":"closed","Body":"fix LdaWorkoutEstimatorCore test.\r\n\r\nresetRandomGenerator needs to be true here as multiple compare will be performed later. \r\nIn lda_engine, a queue of samples with size of (num_of_threads - 2) will be created at first, each time a compare is performed the internal status of one sample (random number: rng_) is changed, so if size of queue is smaller the number of compare performed (in local workstation we have 12 cores thus the issue is not reproduced), dirty data will be used again for calculation and cause issue. set resetRandomGenerator to true will reset the random number rng_ every time before lda calculation thus fix the issue.","Url":"https://github.com/dotnet/machinelearning/pull/4927","RelatedDescription":"Closed or merged PR \"fix LdaWorkoutEstimatorCore\" (#4927)"},{"Id":"578280343","IsPullRequest":true,"CreatedAt":"2020-03-10T01:30:25","Actor":"suxi-ms","Number":"4925","RawContent":null,"Title":"add root cause localization transformer","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4925","RelatedDescription":"Open PR \"add root cause localization transformer\" (#4925)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-03-19T05:30:45.0206264Z","RunDurationInMilliseconds":774}