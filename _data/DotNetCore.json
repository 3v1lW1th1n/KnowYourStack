{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7329383694","Type":"PullRequestEvent","CreatedAt":"2018-03-05T04:36:48","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16740","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview2-26305-01, preview2-26305-01, respectively (master)\" (#16740) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7329317347","Type":"PullRequestEvent","CreatedAt":"2018-03-05T04:05:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16748","RelatedDescription":"Merged pull request \"Fix encoding methods for Span.Empty\" (#16748) at dotnet/coreclr","RelatedBody":"Encoding had a historic confusion about handling null pointers. Make sure that this confusion is not leaking into the new Span methods."},{"Id":"7329180773","Type":"PullRequestEvent","CreatedAt":"2018-03-05T03:08:39","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16750","RelatedDescription":"Opened pull request \"Simplify SSE/SSE4.1 intrinsics\" (#16750) at dotnet/coreclr","RelatedBody":"We have updated `numArgsOfHWIntrinsics`, so that variable number of parameter intrinsic can be table-driven."},{"Id":"7329118517","Type":"PullRequestEvent","CreatedAt":"2018-03-05T02:44:08","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16749","RelatedDescription":"Opened pull request \"WIP: Move String to shared corelib partition\" (#16749) at dotnet/coreclr","RelatedBody":""},{"Id":"7328823607","Type":"PullRequestEvent","CreatedAt":"2018-03-05T00:26:29","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16748","RelatedDescription":"Opened pull request \"Fix encoding methods for Span.Empty\" (#16748) at dotnet/coreclr","RelatedBody":"Encoding had a historic confusion about handling null pointers. Make sure that this confusion is not leaking into the new Span methods."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7328041042","Type":"IssuesEvent","CreatedAt":"2018-03-04T16:50:40","Actor":"svick","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8722","RelatedDescription":"Closed issue \"Warnings are not reported for repeated builds\" (#8722) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. `dotnet new classlib`\r\n2. Change Class1.cs to:\r\n\r\n    ```c#\r\n    class C\r\n    {\r\n        async void M() {}\r\n    }\r\n    ```\r\n\r\n3. `dotnet build`\r\n4. `dotnet build`\r\n\r\n## Expected  behavior\r\n\r\nThe second `dotnet build` prints the CS1998 warning, just like the first one.\r\n\r\n## Actual behavior\r\n\r\nThe second `dotnet build` does not print any warnings:\r\n\r\n```\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 87,92 ms for C:\\code\\tmp\\hwapp\\hwapp.csproj.\r\nClass1.cs(3,16): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\\code\\tmp\\hwapp\\hwapp.csproj]\r\n  hwapp -> C:\\code\\tmp\\hwapp\\bin\\Debug\\netstandard2.0\\hwapp.dll\r\n\r\nBuild succeeded.\r\n\r\nClass1.cs(3,16): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\\code\\tmp\\hwapp\\hwapp.csproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.37\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 81,94 ms for C:\\code\\tmp\\hwapp\\hwapp.csproj.\r\n  hwapp -> C:\\code\\tmp\\hwapp\\bin\\Debug\\netstandard2.0\\hwapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.96\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.300-preview2-008251)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008251\r\n Commit SHA-1 hash:  94fd3fd392\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008251\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c"},{"Id":"7327547631","Type":"IssuesEvent","CreatedAt":"2018-03-04T11:35:42","Actor":"svick","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8722","RelatedDescription":"Opened issue \"Warnings are not reported for repeated builds\" (#8722) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. `dotnet new classlib`\r\n2. Change Class1.cs to:\r\n\r\n    ```c#\r\n    class C\r\n    {\r\n        async void M() {}\r\n    }\r\n    ```\r\n\r\n3. `dotnet build`\r\n4. `dotnet build`\r\n\r\n## Expected  behavior\r\n\r\nThe second `dotnet build` prints the CS1998 warning, just like the first one.\r\n\r\n## Actual behavior\r\n\r\nThe second `dotnet build` does not print any warnings:\r\n\r\n```\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 87,92 ms for C:\\code\\tmp\\hwapp\\hwapp.csproj.\r\nClass1.cs(3,16): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\\code\\tmp\\hwapp\\hwapp.csproj]\r\n  hwapp -> C:\\code\\tmp\\hwapp\\bin\\Debug\\netstandard2.0\\hwapp.dll\r\n\r\nBuild succeeded.\r\n\r\nClass1.cs(3,16): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\\code\\tmp\\hwapp\\hwapp.csproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.37\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 81,94 ms for C:\\code\\tmp\\hwapp\\hwapp.csproj.\r\n  hwapp -> C:\\code\\tmp\\hwapp\\bin\\Debug\\netstandard2.0\\hwapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.96\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.300-preview2-008251)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008251\r\n Commit SHA-1 hash:  94fd3fd392\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008251\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c"},{"Id":"7325729112","Type":"IssuesEvent","CreatedAt":"2018-03-03T12:48:29","Actor":"kj415j45","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8721","RelatedDescription":"Opened issue \"Unable to build .NET 4.6 project with .NET Core 2.1.4 SDK\" (#8721) at dotnet/cli","RelatedBody":"A simular issue with #7494\r\n\r\n## Steps to reproduce\r\n1. Clone osupink/osu-download\r\n2. Open in VS Code\r\n3. In `Internal Terminal`, I run `dotnet build`\r\n## Expected  behavior\r\n~~Build Success~~\r\n## Actual behavior\r\nThe no locale version maybe: \r\n```\r\nMicrosoft.Common.CurrentVersion.targets(1124,5):\r\nerror MSB3644: The reference assemblies for framework \".NETFramework,Version=v4.6\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\r\n```\r\n\r\nlocale(zh-cn) version:\r\n```\r\nPS C:\\Users\\91981\\Desktop\\osu-download> dotnet build\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 15.5.180.51428\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  Nothing to do. None of the projects specified contain packages to restore.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\Microsoft.Common.CurrentVersion.targets(1124,5): error MSB3644: 未找到框架“.NETFramework,Version=v4.6”的引用程序集\r\n。若要解决此问题，请安装此框架版本的 SDK 或 Targeting Pack，或将应用程序的目标重新指向已装有 SDK 或 Targeting Pack 的框架版本。请注意，将从全局程序集缓存(GAC)解析程序集，并将使用这些程序集替换引用程序集。因此，程序集的目标可能未正确指向您所预期的框架。 [C:\\Users\\91981\\Desktop\\osu-download\\osu-download\\osu-download.csproj]\r\n\r\n生成失败。\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\Microsoft.Common.CurrentVersion.targets(1124,5): error MSB3644: 未找到框架“.NETFramework,Version=v4.6”的引用程序集\r\n。若要解决此问题，请安装此框架版本的 SDK 或 Targeting Pack，或将应用程序的目标重新指向已装有 SDK 或 Targeting Pack 的框架版本。请注意，将从全局程序集缓存(GAC)解析程序集，并将使用这些程序集替换引用程序集。因此，程序集的目标可能未正确指向您所预期的框架。 [C:\\Users\\91981\\Desktop\\osu-download\\osu-download\\osu-download.csproj]\r\n    0 个警告\r\n    1 个错误\r\n\r\n已用时间 00:00:00.36\r\n```\r\n## Environment data\r\n```\r\n.NET 命令行工具 (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n```\r\n\r\n\r\n"},{"Id":"7325247667","Type":"IssuesEvent","CreatedAt":"2018-03-03T06:16:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8718","RelatedDescription":"Closed issue \"dotnet fail to publish\" (#8718) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1.I want to publish my company's asp.net core 2.0 project on linux centos 7.2.\r\n2.so the 2.0.3 sdk is installed by following the offical guidline.\r\n2.I execute \"dotnet publish '/data/companyproject.csproj' -c release -f netcoreapp2.0 -o '/out/dir' \" \r\n\r\n## Expected  behavior\r\npublish success, and I can see the files published in the '/out/dir' \r\n\r\n## Actual behavior\r\nan error shows at the end of the shell:\r\n**It was not possible to find any compatible framework version\r\n  The specified framework 'Microsoft.NETCore.App', version '1.0.0' was not found.\r\n    - Check application dependencies and target a framework version installed at:\r\n        /\r\n    - Alternatively, install the framework version '1.0.0'.**\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.3)\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  eb1d5ee318\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.3/\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n\r\n\r\ninvestigation:\r\nafter the .net core sdk installed, I use \"dotnet new mvc\" ->\"dotnet restore\"->\"dotnet build\"->\"dotnet publish\", all of them work fine.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7325652191","Type":"IssuesEvent","CreatedAt":"2018-03-03T11:48:55","Actor":"isaac2004","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/544","RelatedDescription":"Closed issue \"DotNet Standard 2.0 Project downgraded to 1.6 and cannot update\" (#544) at dotnet/standard","RelatedBody":"I have a CL that was Standard 2.0 and after installing the 2.1 SDK it got downgraded somehow to 1.6 (.csproj still says 2.0). The application fails on build because of namespaces not available. When I try to upgrade through VS, I get this\r\n\r\n![capture](https://user-images.githubusercontent.com/8878502/31841261-baa2e134-b5b6-11e7-856d-2f8eeac5d88b.PNG)\r\n \r\nI am blocked to upgrade the package. If I try to upgrade via CLI, I get\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet add package NETStandard.Library --version 2.0.0\r\n  Writing C:\\Users\\Isaac\\AppData\\Local\\Temp\\tmp5E87.tmp\r\ninfo : Adding PackageReference for package 'NETStandard.Library' into project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nlog  : Restoring packages for C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj...\r\ninfo : Package 'NETStandard.Library' is compatible with all the specified frameworks in project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nerror: Error while performing Update for package 'NETStandard.Library'. Cannot edit items in imported files -\r\nerror:   Item 'PackageReference' for 'NETStandard.Library' in Imported file 'C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props'.\r\n````\r\nI imagine this has to do with me upgrading to 2.1, but I am unable to rollback in anyway. Do I need to uninstall 2.1 to have 2.0.0 work?\r\n\r\nHere is version and info output\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet --version\r\n2.1.0-preview1-007228\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet --info\r\n.NET Command Line Tools (2.1.0-preview1-007228)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007228\r\n Commit SHA-1 hash:  28a1f7e9d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25719-04\r\n  Build    : b5c917c0b24171ae27c7cfcfd2617b1088d41c11\r\n````"},{"Id":"7325056263","Type":"IssuesEvent","CreatedAt":"2018-03-03T03:40:33","Actor":"mperdeck","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/663","RelatedDescription":"Opened issue \"When running ASP.NET Core web site targeting net47 in IIS, dotnet.exe does not appear in process list\" (#663) at dotnet/standard","RelatedBody":"I just converted a large legacy site to Net Core. Because of some old code, I have to target net47 instead of netcoreapp2.0 / netstandard2.0.\r\n\r\nProblem is that when I run the site in IIS, it starts up correctly, but then I cannot attach the debugger. The process list (Debug | Attach to process) does not show the dotnet.exe process at all.\r\n\r\nTo investigate this:\r\n* I created a new ASP.NET Core web application in Visual Studio 2017 targeting netcoreapp2.0, \r\n* published it (dotnet publish) and \r\n* pointed my IIS web site to the published directory. \r\n\r\nAfter hitting the site, I was able to attach to the dotnet.exe process ok.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe shows up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\nI then retargeted it to net47 because that is what my site uses. \r\n* Because Microsoft.AspNetCore.All does not support net47, I replaced it with enough individual packages to make the site compile. \r\n* Published it (dotnet publish -f net47). \r\n* Pointed the IIS site to the new net47 published directory. \r\n\r\nI could load the site ok and navigate around. However, dotnet.exe no longer appeared in the process list.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe does NOT show up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\n\r\nIs there any way I can debug a site running in IIS that targets the Net Framework?\r\n\r\n"},{"Id":"7314708657","Type":"IssuesEvent","CreatedAt":"2018-03-01T08:29:09","Actor":"abdullahsalem","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/662","RelatedDescription":"Opened issue \"Standardizing XLIFF\" (#662) at dotnet/standard","RelatedBody":"I share @valdisiljuconoks this interest: https://github.com/Microsoft/XLIFF2-Object-Model/issues/28, and I think it's a good direction to support this standardized file format for a localization process.\r\n"},{"Id":"7312130000","Type":"PullRequestEvent","CreatedAt":"2018-02-28T19:57:32","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/661","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02528-05 (master)\" (#661) at dotnet/standard","RelatedBody":""},{"Id":"7312017249","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:36:13","Actor":"mwilton","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/660","RelatedDescription":"Opened issue \"TimeZoneInfo for Samoa Standard Time doesn't match online documentation\" (#660) at dotnet/standard","RelatedBody":"Here are the properties of the Samoa Standard Time TimeZoneInfo object (+13):\r\n![image](https://user-images.githubusercontent.com/7872394/36808900-502351dc-1c7b-11e8-89ea-b0d9addaa71a.png)\r\n\r\nAnd here is Microsoft's online documentation (-11):\r\n![image](https://user-images.githubusercontent.com/7872394/36808960-75af3d62-1c7b-11e8-9e79-60ee13c891c5.png)\r\n\r\nWhich comes from:\r\nhttps://msdn.microsoft.com/en-us/library/ms912053(v=winembedded.10).aspx\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7329493667","Type":"PullRequestEvent","CreatedAt":"2018-03-05T05:26:36","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27715","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#27715) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7329427687","Type":"IssuesEvent","CreatedAt":"2018-03-05T04:57:48","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27716","RelatedDescription":"Opened issue \"System.Security.Cryptography.Algorithms.Tests fails 2 tests locally\" (#27716) at dotnet/corefx","RelatedBody":"System.Security.Cryptography.Algorithms.Tests fails 2 tests locally with next log:\r\n```\r\n     System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptOaepWrongDataLength [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Security.Cryptography.CryptographicException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n           C:\\Code\\corefx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\EncryptDecrypt.cs(453,0): at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptOaepWrongDataLength()\r\n     System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Array.RsaDecryptOaepWrongDataLength [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Security.Cryptography.CryptographicException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n           C:\\Code\\corefx\\src\\Common\\tests\\System\\Security\\Cryptography\\AlgorithmImplementations\\RSA\\EncryptDecrypt.cs(453,0): at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptOaepWrongDataLength()\r\n```"},{"Id":"7329349965","Type":"IssuesEvent","CreatedAt":"2018-03-05T04:21:05","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26603","RelatedDescription":"Reopened issue \"Memory<T> and large memory mapped files\" (#26603) at dotnet/corefx","RelatedBody":"I'm currently experimenting with ````OwnedMemory<T>```` and ````Memory<T>```` in an existing project that I'm trying to improve, and I ran into an issue with ````OwnedMemory<T>```` and ````Memory<T>```` being limited to ````int.MaxValue````.\r\n\r\n# Scenario\r\n\r\nI have a relatively big (> 2GB) data file that I want to fully map in memory (i.e. a database). My API exposes methods that returns subsets of this big memory mapped file, e.g.\r\n````csharp\r\npublic ReadOnlyMemory<byte> GetBytes(int something)\r\n{\r\n    // …\r\n    return mainMemory.Slice(start, length).AsReadOnly();\r\n}\r\n````\r\n\r\nWrapping the ````MemoryMappedFile```` and associated ````MemoryMappedViewAccessor```` into an ````OwnedMemory<byte>```` seemed to be a good idea, since most of the tricky logic would then be handled by the framework.\r\n\r\n# Problem\r\n\r\nThe memory block that I want to wrap is bigger than 2GB and cannot currently be represented by a single Memory<T> instance.\r\nSince Memory<T> can only work with ````T[]````, ````string````, or ````OwnedMemory<T>````, it seems that having to give up on the straightfoward ````OwnedMemory<T>```` implementation also means that I have to give up on using ````Memory<T>```` at all.\r\n\r\n(In this specific case, ````Span<T>```` being limited to 2GB, would not be a problem, because the sliced memory blocks that my API would return would always be much smaller than that.)\r\n\r\n# Possible solutions with the currently proposed API\r\n\r\n- Not using ````Memory<T>```` at all and implementing a much simplified version of ````OwnedMemory<T>````/````Memory<T>```` that would fit my use case\r\n- Keeping many overlapping instances of ````OwnedMemory<T>```` around and use the one that best fits the current case\r\n\r\n# Question\r\n\r\nWould it be possible to improve the framework in order to be able of easily working with such large memory blocks? (Maybe implementing something like a ````BigMemory<T>```` ?)\r\n"},{"Id":"7329328562","Type":"PullRequestEvent","CreatedAt":"2018-03-05T04:11:01","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27715","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#27715) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7329210210","Type":"IssuesEvent","CreatedAt":"2018-03-05T03:20:50","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27714","RelatedDescription":"Opened issue \"IValueTaskSource doesn't work on netcoreapp2.0\" (#27714) at dotnet/corefx","RelatedBody":"Strangely, if you reference System.Threading.Tasks.Extensions on a .NET Core 2.0 project IValueTaskSource doesn't exist. The netcoreapp2.0 assets has a `_._` and ValueTask gets resolved from the shared framework.\r\n\r\nThis leads to the following error when trying to use ValueTask with IValueTaskSource on .NET Core 2.0 projects:\r\n\r\n```\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (Could not load type 'System.Threading.Tasks.Sources.IValueTaskSource`1' from assembly 'System.Threading.Tasks.Extensions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.) ---> System.TypeLoadException: Could not load type 'System.Threading.Tasks.Sources.IValueTaskSource`1' from assembly 'System.Threading.Tasks.Extensions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n   at System.IO.Pipelines.Pipe..ctor(PipeOptions options)\r\n   at ConsoleApp41.Program.<DefaultPipe>d__1.MoveNext() in C:\\Users\\dfowler\\documents\\visual studio 2017\\Projects\\ConsoleApp41\\ConsoleApp41\\Program.cs:line 20\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at ConsoleApp41.Program.Main(String[] args) in C:\\Users\\dfowler\\documents\\visual studio 2017\\Projects\\ConsoleApp41\\ConsoleApp41\\Program.cs:line 16\r\n```\r\n\r\n/cc @stephentoub @weshaggard @ericstj "},{"Id":"7329166164","Type":"PullRequestEvent","CreatedAt":"2018-03-05T03:02:40","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27699","RelatedDescription":"Merged pull request \"Added argument name to the exception\" (#27699) at dotnet/corefx","RelatedBody":"Fixes #27357 \r\n"},{"Id":"7329166159","Type":"IssuesEvent","CreatedAt":"2018-03-05T03:02:40","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27357","RelatedDescription":"Closed issue \"Path changes resulting in failing DriveInfo test\" (#27357) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/pull/27339#issuecomment-367578790\r\nhttps://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/e91038db253e351822d63ed2cf875f94cb0cabc7/workItem/System.IO.FileSystem.DriveInfo.Tests/analysis/xunit/System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests~2FCtor_InvalidPath_ThrowsArgumentException(driveName:%20%5C%22%5C%22,%20paramName:%20%5C%22path%5C%22)\r\n```\r\nUnhandled Exception of Type Xunit.Sdk.EqualException\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: path\r\nActual:   (null)\r\nStack Trace :\r\n   at System.AssertExtensions.Throws[T](String netCoreParamName, String netFxParamName, Action action) in D:\\j\\workspace\\windows-TGrou---f8ac6754\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs:line 39\r\n   at System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests.Ctor_InvalidPath_ThrowsArgumentException(String driveName, String paramName) in D:\\j\\workspace\\windows-TGrou---f8ac6754\\src\\System.IO.FileSystem.DriveInfo\\tests\\DriveInfo.Windows.Tests.cs:line 35\r\n```"},{"Id":"7328975242","Type":"PullRequestEvent","CreatedAt":"2018-03-05T01:45:01","Actor":"saurabh500","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27424","RelatedDescription":"Merged pull request \"Improve SqlDataRecord test coverage\" (#27424) at dotnet/corefx","RelatedBody":"Improved code coverage (+83 lines), added some tests for edge case, see #27416 \r\n\r\nFixes #27416\r\ncc @saurabh500 "},{"Id":"7328975235","Type":"IssuesEvent","CreatedAt":"2018-03-05T01:45:01","Actor":"saurabh500","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27416","RelatedDescription":"Closed issue \"Improve SqlDataRecord test coverage\" (#27416) at dotnet/corefx","RelatedBody":"Improve SqlDataRecord test coverage. \r\ncc @remibou"},{"Id":"7328962235","Type":"PullRequestEvent","CreatedAt":"2018-03-05T01:38:57","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27713","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26305-01 (master)\" (#27713) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7329310515","Type":"IssuesEvent","CreatedAt":"2018-03-05T04:02:41","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25214","RelatedDescription":"Opened issue \"T in Lazy<T> should be factored in when suggestion names\" (#25214) at dotnet/roslyn","RelatedBody":"When suggesting names for Task<T>, Task is ignored, and the type passed to \"T\" is used as input into the suggestions:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/36957056-e2410d9e-2085-11e8-8932-3d2bfc1cc8be.png)\r\n\r\nThe same should happen to Lazy<T> to avoid these situations:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/36957067-f6d469cc-2085-11e8-8ed1-bd307013c518.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/36957094-233dcbac-2086-11e8-86a6-1d6f7607ed19.png)\r\n"},{"Id":"7329306509","Type":"PullRequestEvent","CreatedAt":"2018-03-05T04:00:52","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25194","RelatedDescription":"Merged pull request \"Localization test failures VB Fix creation of diagnostic in VisualBasicParseOptions.ValidateOptions\" (#25194) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nRunning unit test `Microsoft.CodeAnalysis.VisualBasic.UnitTests.GetDiagnosticsTests.CompilingCodeWithInvalidPreProcessorSymbolsShouldProvideDiagnostics` and about 6 others on non English machines failed due to localization issues. The root cause was that the diagnostic for error `ERR_ConditionalCompilationConstantNotValid` wasn't created properly.\r\n\r\nThe solution was proposed by @AlekseyTs in #24604 \r\n> Alternatively, for consistency with other places where the same diagnostics is created (that is the approach I would prefer), we should be able to call Diagnostic.Create overload that takes DiagnosticInfo. Like this:\r\n\r\n```CS\r\nDiagnostic.Create(ErrorFactory.ErrorInfo(ERRID.ERR_ConditionalCompilationConstantNotValid,\r\n                                            ErrorFactory.ErrorInfo(ERRID.ERR_ExpectedIdentifier),\r\n                                            symbol.Key))\r\n```\r\n\r\nWith this change in place the unit tests do not fail on a German machine.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #24604 \r\n\r\n### Workarounds, if any\r\n\r\nIgnore test failures.\r\n\r\n### Risk\r\n\r\nLow. \r\n\r\n### Performance impact\r\n\r\nLow.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nDiagnostics are meant to be localization neutral. This diagnostic was created with eager localized arguments.\r\n\r\n### How was the bug found?\r\n\r\nContributor reported.\r\n\r\n### Test documentation updated?\r\n\r\nNo."},{"Id":"7329234097","Type":"IssuesEvent","CreatedAt":"2018-03-05T03:30:34","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25212","RelatedDescription":"Opened issue \"VisualBasicSnippetInfoService is failing MEF cache for 15.7\" (#25212) at dotnet/roslyn","RelatedBody":"15.7.0 Preview 1.0 [27501.3002.d15.7stg]\r\n\r\n```\r\nMicrosoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type \"Microsoft.VisualStudio.LanguageServices.VisualBasic.Snippets.VisualBasicSnippetInfoService\". ---> System.InvalidOperationException: Sequence contains no elements\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n   at Microsoft.VisualStudio.Composition.PartDiscovery.GetElementTypeFromMany(Type type)\r\n   at Microsoft.VisualStudio.Composition.PartDiscovery.GetTypeIdentityFromImportingType(Type type, Boolean importMany)\r\n   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.TryCreateImportDefinition(Type importingType, ICustomAttributeProvider member, ImmutableHashSet`1 importConstraints, ImportDefinition& importDefinition)\r\n   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreateImport(ParameterInfo parameter, ImmutableHashSet`1 importConstraints)\r\n   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)\r\n   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)\r\n   at Microsoft.VisualStudio.Composition.PartDiscovery.<>c__DisplayClass27_0.<CreateDiscoveryBlockChain>b__0(Type type)\r\n   --- End of inner exception stack trace \r\n```"},{"Id":"7329229748","Type":"IssuesEvent","CreatedAt":"2018-03-05T03:28:48","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25211","RelatedDescription":"Opened issue \"AbstractGenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider failure in the MEF cache for 15.7\" (#25211) at dotnet/roslyn","RelatedBody":"15.7.0 Preview 1.0 [27501.3002.d15.7stg]\r\n\r\n```\r\nError #1\r\nMicrosoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type \"Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.AbstractGenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider\". ---> System.InvalidOperationException: No importing constructor found.\r\n   at Microsoft.Verify.Operation(Boolean condition, String message)\r\n   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)\r\n   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)\r\n   at Microsoft.VisualStudio.Composition.PartDiscovery.<>c__DisplayClass27_0.<CreateDiscoveryBlockChain>b__0(Type type)\r\n   --- End of inner exception stack trace ---\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7329486141","Type":"PullRequestEvent","CreatedAt":"2018-03-05T05:23:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5497","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5497) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7329324553","Type":"PullRequestEvent","CreatedAt":"2018-03-05T04:09:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5497","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5497) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7328881931","Type":"IssuesEvent","CreatedAt":"2018-03-05T00:59:39","Actor":"brunomlopes","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5496","RelatedDescription":"Opened issue \"How to use the System.IO.Compression namespace ?\" (#5496) at dotnet/corert","RelatedBody":"Say I've got the following core on a .net core console app:\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            using(var stream = File.OpenRead(args[0]))\r\n            using (var compressed = new ZipArchive(stream, ZipArchiveMode.Read))\r\n            {\r\n                foreach (var zipArchiveEntry in compressed.Entries)\r\n                {\r\n                    using (var fileStream = zipArchiveEntry.Open())\r\n                    using (var outputStream = new MemoryStream())\r\n                    {\r\n                        fileStream.CopyTo(outputStream);\r\n                    }\r\n\r\n                    Console.WriteLine($\"Wrote {zipArchiveEntry.FullName}\");\r\n                }\r\n            }\r\n        }\r\n```` \r\n\r\nIf I compile it with ` dotnet publish -c Release -r win-x64`, and try to run it with `CoreRt.TestCompression.exe ..\\sample-zip.zip`, it fails with\r\n```\r\nUnhandled Exception: System.IO.Compression.ZLibException: The underlying compression routine could not be loaded correctly. ---> System.DllNotFoundException: Unable to load DLL 'clrcompression.dll': The specified module could not be found.\r\n   at CoreRt.TestCompresssion!<BaseAddress>+0x11d293\r\n   at CoreRt.TestCompresssion!<BaseAddress>+0x11d1b0\r\n   at Interop.zlib.inflateInit2_(Byte*, Int32, Byte*, Int32) + 0x42\r\n   at Interop.zlib.InflateInit2_(ZLibNative.ZStream&, Int32) + 0x49\r\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32) + 0x29\r\n   at System.IO.Compression.Inflater.InflateInit(Int32) + 0x40\r\n```\r\n\r\nFrom a quick search, this looks like clrcompression.dll is native code that doesn't get pulled in?\r\nIs there anything I can do to work past this?"},{"Id":"7328705750","Type":"PullRequestEvent","CreatedAt":"2018-03-04T23:13:28","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5495","RelatedDescription":"Opened pull request \"Progress towards sealed vtable support in CppCodegen\" (#5495) at dotnet/corert","RelatedBody":"I wanted to get rid of the CppCodegen special casing around sealed vtables that was added last week; this became kind of tricky and I ran out of time I allocated myself for it. It seems like interface dispatch is kind of broken in general for CppCodeGen.\r\n\r\nThis has a couple changes towards the goal:\r\n\r\n* Add TargetArchitecture.Cpp64 for CppCodegen so that we can distinguish it from x64\r\n* This forced me to fix the misuse of x64 assembly unboxing helpers because there's no CPU emitter for Cpp64.\r\n* Remove duplication of vtable slot calculation. The logic is different when sealed virtuals are in play. We should just use the common helper.\r\n* Devirtualize calls to final methods. These could be in the sealed vtable which makes the dispatch tricky; just don't use the vtable."},{"Id":"7328556512","Type":"PullRequestEvent","CreatedAt":"2018-03-04T21:48:06","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5494","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5494) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7328468316","Type":"PullRequestEvent","CreatedAt":"2018-03-04T21:00:16","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5494","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5494) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7328075385","Type":"PullRequestEvent","CreatedAt":"2018-03-04T17:11:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5493","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5493) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7327923504","Type":"PullRequestEvent","CreatedAt":"2018-03-04T15:42:21","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5493","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5493) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7327917905","Type":"PullRequestEvent","CreatedAt":"2018-03-04T15:39:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5491","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5491) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7327034968","Type":"PullRequestEvent","CreatedAt":"2018-03-04T04:16:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5491","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5491) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7329226337","Type":"PullRequestEvent","CreatedAt":"2018-03-05T03:27:25","Actor":"KevinRansom","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2021","RelatedDescription":"Opened pull request \"Add netsdk overrides\" (#2021) at dotnet/sdk","RelatedBody":"Due to the way F# is integrated into the Net Sdk it is not possible for an F# target file to override SDK targets.\r\n\r\nWe need to be able to do that to enable the Net Sdkmechanism to add AssemblyInfo properties to F# apps and libraries.\r\n\r\nThis PR renames the existing Microsoft.Net.Sdk.FSharp.targets to Microsoft.FSharp.NetSdk.targets, so that we can use the name Microsoft.Net.Sdk.FSharp.targets consistently with C# and VB.\r\n\r\nMicrosoft.Net.Sdk.FSharp.targets selects a target file deployed with F# compiler.\r\n\r\n@nguerrera, @livarcocc , @brettfo \r\n"},{"Id":"7328998672","Type":"PullRequestEvent","CreatedAt":"2018-03-05T01:55:53","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2020","RelatedDescription":"Opened pull request \"Speed up incremental package asset resolution\" (#2020) at dotnet/sdk","RelatedBody":"Whenever project.assets.json changes (or more rarely, a setting influencing ResolvePackageAssets changes), write out a binary cache file for the next incremental build. The file has only the items that used by the build and they are written in a format that can be deserialized to MSBuild ITaskItem[] with minimal time and allocation. \r\n\r\nOn top of that, we merge ReportAssetsLogMessages into ResolvePackageAssets, which allows for project.assets.json to not be read at all if it has not changed.\r\n\r\nSome early measurement below using https://github.com/mikeharder/dotnet-cli-perf/tree/master/scenarios/web/large/core\r\n\r\nFirst observation, the total size of all assets.cache files is 5 MB vs. 37 MB for assets.json.\r\n\r\nI will send a private drop to our internal perf alias as wll.\r\n\r\n## Incremental build --no-restore /m:1\r\n```\r\nBefore \r\n      161 ms  JoinItems                                129 calls\r\n      176 ms  AssignProjectConfiguration               129 calls\r\n      264 ms  Copy                                     370 calls\r\n      318 ms  ResolvePackageFileConflicts              129 calls\r\n     1180 ms  ReportAssetsLogMessages                  129 calls\r\n     2873 ms  ResolvePackageAssets                     129 calls\r\n    23138 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:40.08\r\n    \r\nAfter\r\n      117 ms  JoinItems                                129 calls\r\n      127 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      136 ms  AssignProjectConfiguration               129 calls\r\n      150 ms  Message                                  388 calls\r\n      252 ms  ResolvePackageAssets                     129 calls\r\n      257 ms  ResolvePackageFileConflicts              129 calls\r\n      307 ms  Copy                                     370 calls\r\n    23261 ms  ResolveAssemblyReference                 129 calls\r\n\r\n    Time Elapsed 00:00:36.04\r\n```\r\n\r\nSaving 10% overall here and reducing ResolvePackageAssets+ReportAssetsLogMessage (now combined into ResolvePackageAssets) from ~4 seconds to ~250 milliseconds.\r\n\r\n## Incremental parallel build --no-restore\r\n```\r\nBefore\r\n      184 ms  Hash                                     258 calls\r\n      232 ms  JoinItems                                129 calls\r\n      240 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      299 ms  AssignProjectConfiguration               129 calls\r\n      487 ms  ResolvePackageFileConflicts              129 calls\r\n      492 ms  Copy                                     370 calls\r\n     2654 ms  ReportAssetsLogMessages                  129 calls\r\n     5071 ms  ResolvePackageAssets                     129 calls\r\n    37575 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:19.72\r\n\r\nAfter\r\n      100 ms  ConvertToAbsolutePath                    129 calls\r\n      116 ms  ProduceContentAssets                     129 calls\r\n      157 ms  FindUnderPath                            645 calls\r\n      185 ms  Hash                                     258 calls\r\n      246 ms  JoinItems                                129 calls\r\n      329 ms  AssignProjectConfiguration               129 calls\r\n      447 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      487 ms  ResolvePackageFileConflicts              129 calls\r\n      502 ms  Copy                                     370 calls\r\n      612 ms  ResolvePackageAssets                     129 calls\r\n    38504 ms  ResolveAssemblyReference                 129 calls\r\n\r\n    Time Elapsed 00:00:18.54\r\n```\r\nOverall saving is less in parallel case, but time in   (ResolvePackageAssets + ReportAssetsLogMessage)  goes down from ~7.5 seconds to ~ 600 milliseconds.\r\n\r\nIt is interesting that just about every task is taking significantly more cumulative time when building in parallel. But, of course, some (most???) of the 7 seconds difference is being recuperated by parallelism.\r\n\r\n\r\n## Clean parallel build --no-restore (cleaned and restored beforehand)\r\n```\r\nBefore\r\n      168 ms  Hash                                     258 calls\r\n      270 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      301 ms  JoinItems                                129 calls\r\n      306 ms  MakeDir                                  129 calls\r\n      333 ms  AssignProjectConfiguration               129 calls\r\n      524 ms  ResolvePackageFileConflicts              129 calls\r\n      559 ms  WriteCodeFragment                        129 calls\r\n     1866 ms  WriteLinesToFile                         387 calls\r\n     3268 ms  ReportAssetsLogMessages                  129 calls\r\n     4616 ms  GenerateDepsFile                         129 calls\r\n     5577 ms  ResolvePackageAssets                     129 calls\r\n     6945 ms  Copy                                     370 calls\r\n    24787 ms  Csc                                      129 calls\r\n    41201 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:29.46\r\n    \r\nAfter\r\n    \r\n      167 ms  Hash                                     258 calls\r\n      181 ms  FindUnderPath                            645 calls\r\n      234 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      270 ms  AssignProjectConfiguration               129 calls\r\n      294 ms  JoinItems                                129 calls\r\n      299 ms  MakeDir                                  129 calls\r\n      487 ms  ResolvePackageFileConflicts              129 calls\r\n      540 ms  WriteCodeFragment                        129 calls\r\n     1501 ms  WriteLinesToFile                         387 calls\r\n     4317 ms  GenerateDepsFile                         129 calls\r\n     6802 ms  Copy                                     370 calls\r\n     9715 ms  ResolvePackageAssets                     129 calls\r\n    26625 ms  Csc                                      129 calls\r\n    39653 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:30.44\r\n```\r\nThis case shows the *slowdown* of  (ResolvePackageAssets + ReportAssetsLogMessage)  from ~8.8 seconds to ~9.7 seconds in the first run of ResolvePackageAssets where the cache needs to be generated. I have some ideas on how to narrow this down significantly, but note that it does not impact the inner loop case where project.assets.json would not be changing between every build.\r\n\r\ncc @mikeharder @davkean @livarcocc @dsplaisted "},{"Id":"7328861925","Type":"IssuesEvent","CreatedAt":"2018-03-05T00:48:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2019","RelatedDescription":"Opened issue \"Preview warning should use aka.ms and redirect to language neutral URL\" (#2019) at dotnet/sdk","RelatedBody":"We should use an aka.ms (like in other messages we have) so that we can point to a different page without servicing the product.\r\n\r\nAlso, we should remove the /en-US/ from the redirect to docs.microsoft.com to let docs.microsoft.com choose the appropriate language based on the user's web client."},{"Id":"7328857166","Type":"IssuesEvent","CreatedAt":"2018-03-05T00:45:53","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2018","RelatedDescription":"Opened issue \"New warning about preview SDK is logged a lot in large solution\" (#2018) at dotnet/sdk","RelatedBody":"UX: When I build https://github.com/mikeharder/dotnet-cli-perf/tree/master/scenarios/web/large/core, I get spammed with the message.\r\n\r\nNETSdkMessage even manages to take up 74 ms.\r\n\r\ncc @livarcocc "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"969672659385700354","CreatedAt":"2018-03-02T20:35:52+00:00","UserScreenname":"dotnet","Text":"It's not too late... Happening now: Miguel de Icaza's Developer Tools Reddit AMA. Ask him anything ab out what we'v… https://t.co/Ct6QA3l0FL","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":20,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-03-05T05:30:19.3253123Z","RunDurationInMilliseconds":7763}