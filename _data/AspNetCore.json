{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7443576004","Type":"IssuesEvent","CreatedAt":"2018-03-27T19:32:33","Actor":"ajaybhargavb","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2363","RelatedDescription":"Closed issue \"Review and Update BaseView\" (#2363) at aspnet/Home","RelatedBody":"_From @rynowak on Tuesday, June 6, 2017 11:34:06 PM_\r\n\r\nWe made some changes to Razor codegen that could impact this class. We need to review this and determine what should be adjusted.\r\n\r\n/cc @ajaybhargavb \r\n\r\n_Copied from original issue: aspnet/Common#236_"},{"Id":"7443371341","Type":"IssuesEvent","CreatedAt":"2018-03-27T18:51:53","Actor":"brownbl1","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3006","RelatedDescription":"Closed issue \"Missing assembly reference after adding net471 target\" (#3006) at aspnet/Home","RelatedBody":"I started a .net core web application using `dotnet new` and then ran into a need to include a library that targets `net471`. \r\n\r\nI changed `<Framework>` to `<Frameworks>` and added `net471`. \r\n\r\n`dotnet restore` works well, but `dotnet run` results in build errors like:\r\n`error CS0234: The type or namespace name 'AspNetCore' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)`\r\n\r\nI've examined the docs related to targeting multiple versions but this was as far as I was able to get. What might I be missing?\r\n\r\nThanks.\r\n\r\nMy csproj file looks like: \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.0;net471</TargetFrameworks>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net471' \">\r\n    <PackageReference Include=\"MyPackage\" Version=\"2017.11.1.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.0' \">\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.WsFederation\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Https\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Seq\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Serilog.Exceptions\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"Destructurama.JsonNet\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"Serilog.Enrichers.Environment\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"3.1.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Remove=\"ClientApp\\**\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\dist\\\" />\r\n  </ItemGroup>\r\n  <Target Name=\"DebugRunWebpack\" BeforeTargets=\"Build\" Condition=\" '$(Configuration)' == 'Debug' And !Exists('wwwroot\\dist') \">\r\n    <Exec Command=\"node --version\" ContinueOnError=\"true\">\r\n      <Output TaskParameter=\"ExitCode\" PropertyName=\"ErrorCode\" />\r\n    </Exec>\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js\" />\r\n    <Error Condition=\"'$(ErrorCode)' != '0'\" Text=\"Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE.\" />\r\n    <Message Importance=\"high\" Text=\"Performing first-run Webpack build...\" />\r\n  </Target>\r\n  <Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\">\r\n    <Exec Command=\"npm install\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js --env.prod\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --env.prod\" />\r\n    <ItemGroup>\r\n      <DistFiles Include=\"wwwroot\\dist\\**; ClientApp\\dist\\**\" />\r\n      <ResolvedFileToPublish Include=\"@(DistFiles->'%(FullPath)')\" Exclude=\"@(ResolvedFileToPublish)\">\r\n        <RelativePath>%(DistFiles.Identity)</RelativePath>\r\n        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n      </ResolvedFileToPublish>\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```"},{"Id":"7442778737","Type":"IssuesEvent","CreatedAt":"2018-03-27T17:00:28","Actor":"brownbl1","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3006","RelatedDescription":"Opened issue \"Missing assembly reference after adding net471 target\" (#3006) at aspnet/Home","RelatedBody":"I started a .net core web application using `dotnet new` and then ran into a need to include a library that targets `net471`. \r\n\r\nI changed `<Framework>` to `<Frameworks>` and added `net471`. \r\n\r\n`dotnet restore` works well, but `dotnet run` results in build errors like:\r\n`error CS0234: The type or namespace name 'AspNetCore' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)`\r\n\r\nI've examined the docs related to targeting multiple versions but this was as far as I was able to get. What might I be missing?\r\n\r\nThanks.\r\n\r\nMy csproj file looks like: \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.0;net471</TargetFrameworks>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net471' \">\r\n    <PackageReference Include=\"MyPackage\" Version=\"2017.11.1.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.0' \">\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.WsFederation\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Https\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Seq\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Serilog.Exceptions\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"Destructurama.JsonNet\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"Serilog.Enrichers.Environment\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"3.1.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Remove=\"ClientApp\\**\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\dist\\\" />\r\n  </ItemGroup>\r\n  <Target Name=\"DebugRunWebpack\" BeforeTargets=\"Build\" Condition=\" '$(Configuration)' == 'Debug' And !Exists('wwwroot\\dist') \">\r\n    <Exec Command=\"node --version\" ContinueOnError=\"true\">\r\n      <Output TaskParameter=\"ExitCode\" PropertyName=\"ErrorCode\" />\r\n    </Exec>\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js\" />\r\n    <Error Condition=\"'$(ErrorCode)' != '0'\" Text=\"Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE.\" />\r\n    <Message Importance=\"high\" Text=\"Performing first-run Webpack build...\" />\r\n  </Target>\r\n  <Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\">\r\n    <Exec Command=\"npm install\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js --env.prod\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --env.prod\" />\r\n    <ItemGroup>\r\n      <DistFiles Include=\"wwwroot\\dist\\**; ClientApp\\dist\\**\" />\r\n      <ResolvedFileToPublish Include=\"@(DistFiles->'%(FullPath)')\" Exclude=\"@(ResolvedFileToPublish)\">\r\n        <RelativePath>%(DistFiles.Identity)</RelativePath>\r\n        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n      </ResolvedFileToPublish>\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```"},{"Id":"7442704745","Type":"IssuesEvent","CreatedAt":"2018-03-27T16:46:47","Actor":"mkArtakMSFT","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2319","RelatedDescription":"Closed issue \"Remove duplicate header names and method constants\" (#2319) at aspnet/Home","RelatedBody":"_From @Tratcher on Monday, October 9, 2017 12:13:16 PM_\r\n\r\nhttps://github.com/aspnet/CORS/blob/df571655acafb39703935a71a977feec023977d0/src/Microsoft.AspNetCore.Cors/Infrastructure/CorsConstants.cs contains header and method string constants that are duplicated with constants in HttpAbstractions.\r\n\r\nSee\r\nhttps://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.Net.Http.Headers/HeaderNames.cs\r\nhttps://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNetCore.Http.Abstractions/HttpMethods.cs\r\n\r\nThe public constants can redirect for now. E.g. `public static readonly string AccessControlMaxAge = HeaderNames.AccessControlMaxAge;`\r\n\r\nThe internal lists can also be updated to use the HttpAbstractions constants.\r\nhttps://github.com/aspnet/CORS/blob/df571655acafb39703935a71a977feec023977d0/src/Microsoft.AspNetCore.Cors/Infrastructure/CorsConstants.cs#L66-L89\r\n\r\n_Copied from original issue: aspnet/CORS#130_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7445510066","Type":"PullRequestEvent","CreatedAt":"2018-03-28T05:05:19","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1742","RelatedDescription":"Merged pull request \"Adding File Header (#1741)\" (#1742) at aspnet/SignalR","RelatedBody":""},{"Id":"7445508431","Type":"PullRequestEvent","CreatedAt":"2018-03-28T05:04:40","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1742","RelatedDescription":"Opened pull request \"Adding File Header (#1741)\" (#1742) at aspnet/SignalR","RelatedBody":""},{"Id":"7445483699","Type":"PullRequestEvent","CreatedAt":"2018-03-28T04:54:12","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1741","RelatedDescription":"Merged pull request \"Adding File Header\" (#1741) at aspnet/SignalR","RelatedBody":""},{"Id":"7445472977","Type":"PullRequestEvent","CreatedAt":"2018-03-28T04:49:38","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1741","RelatedDescription":"Opened pull request \"Adding File Header\" (#1741) at aspnet/SignalR","RelatedBody":""},{"Id":"7445430776","Type":"PullRequestEvent","CreatedAt":"2018-03-28T04:31:38","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1713","RelatedDescription":"Closed pull request \" Take advantage of JSON.NET PropertyNameTable\" (#1713) at aspnet/SignalR","RelatedBody":"- This is a dirty hack to reduce string allocations by taking advantage of the PropertyNameTable on JsonTextReader.\r\n- This is an internal optimization used today by JsonSerializer\r\nso we're borrowing that here.\r\n\r\nPS: The performance results aren't great. It looks like it slows things down a bit and the micro benchmarks aren't showing less allocations. dotMemory shows a big difference though.\r\n\r\n\r\n## https://github.com/aspnet/SignalR/tree/733a3b3c2d911dc0b9585de55fc0fa23af6ca3d0\r\n\r\n![image](https://user-images.githubusercontent.com/95136/37873297-b0eba850-2fce-11e8-98ae-332aef8852a1.png)\r\n\r\n```\r\n            Method |          Input | HubProtocol |       Mean |     Error |     StdDev |      Op/s |  Gen 0 | Allocated |\r\n------------------ |--------------- |------------ |-----------:|----------:|-----------:|----------:|-------:|----------:|\r\n ReadSingleMessage |   FewArguments |        Json |   2.564 us | 0.0640 us |  0.1805 us | 390,035.0 | 0.0343 |    1088 B |\r\n ReadSingleMessage | LargeArguments |        Json | 107.738 us | 5.0070 us | 14.0402 us |   9,281.8 | 1.9531 |   59016 B |\r\n ReadSingleMessage |  ManyArguments |        Json |   4.395 us | 0.1133 us |  0.3252 us | 227,516.6 | 0.0458 |    1648 B |\r\n ReadSingleMessage |    NoArguments |        Json |   1.556 us | 0.0431 us |  0.1237 us | 642,509.5 | 0.0229 |     768 B |\r\n```\r\n\r\n## https://github.com/aspnet/SignalR/tree/davidfowl/json-reader\r\n\r\n![image](https://user-images.githubusercontent.com/95136/37873308-2a149fa2-2fcf-11e8-9950-1a63678b6848.png)\r\n\r\n```\r\n           Method |          Input | HubProtocol |       Mean |     Error |     StdDev |    Median |      Op/s |  Gen 0 | Allocated |\r\n------------------ |--------------- |------------ |-----------:|----------:|-----------:|----------:|----------:|-------:|----------:|\r\n ReadSingleMessage |   FewArguments |        Json |   2.701 us | 0.0937 us |  0.2627 us |  2.625 us | 370,301.2 | 0.0343 |    1088 B |\r\n ReadSingleMessage | LargeArguments |        Json | 103.064 us | 4.0845 us | 11.6534 us | 99.266 us |   9,702.7 | 1.9531 |   59016 B |\r\n ReadSingleMessage |  ManyArguments |        Json |   4.573 us | 0.1927 us |  0.5559 us |  4.446 us | 218,662.1 | 0.0458 |    1648 B |\r\n ReadSingleMessage |    NoArguments |        Json |   1.635 us | 0.0323 us |  0.0659 us |  1.618 us | 611,595.4 | 0.0229 |     768 B |\r\n ```\r\n\r\n1M messages:\r\n\r\n## Before\r\n\r\n![image](https://user-images.githubusercontent.com/95136/37874120-6f65500c-2fdd-11e8-9587-37159e8f3ee9.png)\r\n\r\n\r\n## After\r\n\r\n![image](https://user-images.githubusercontent.com/95136/37873485-ac308214-2fd2-11e8-9c23-682885c7cf5a.png)\r\n\r\n## Update\r\n\r\nI see better results for the latest commit but there's too much variance on my machine to trust. I'll measure more and see if anything shows up."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7444735600","Type":"PullRequestEvent","CreatedAt":"2018-03-28T00:13:43","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7526","RelatedDescription":"Merged pull request \"Add mapping service for action results\" (#7526) at aspnet/Mvc","RelatedBody":"This allows the use of custom 'envelope' types like ActionResult<> with\r\na corresponding API Explorer implementation.\r\n\r\nBasically this PR services to decouple a bunch of infrastructure from\r\nActionResult<>."},{"Id":"7444688266","Type":"PullRequestEvent","CreatedAt":"2018-03-27T23:57:28","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7564","RelatedDescription":"Opened pull request \"[Design]:  Use ModelMetadataProvider to infer BindingSource on application model\" (#7564) at aspnet/Mvc","RelatedBody":""},{"Id":"7444618481","Type":"IssuesEvent","CreatedAt":"2018-03-27T23:33:26","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7563","RelatedDescription":"Opened issue \"Add IsRequired, DefaultValue to ApiParameterDescription\" (#7563) at aspnet/Mvc","RelatedBody":"This is low hanging fruit that we just missed for whatever reason. This means that Swashbuckle/NSwag and other libraries that produce swagger can't see default values when they apply to query string parameters.\r\n\r\nThis makes a lot more sense for us to add now that we have validation on parameters.\r\n\r\nWe currently only support default values for route parameters via https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Abstractions/ApiExplorer/ApiParameterDescription.cs\r\n\r\nThe fix for would look like:\r\n- Add `ApiParameterDescription.IsRequired` and `ApiParameterDescription.DefaultValue`\r\n- Deprecate `ApiParameterRouteInfo.DefaultValue` - the new parameter handles more cases\r\n- Update `DefaultApiDescriptionProvider` to add new logic to set these\r\n\r\nBy default most parameters will be **optional** because that's **the truth** of MVC. \r\n\r\nNow that we support validation of parameter nodes we can actually provide this data. A parameter should be considered required if it:\r\n- Is `[FromBody]`\r\n- Has `[BindRequired]` \r\n- Is a required route parameter\r\n\r\nWe may need to polish that list of conditions a bit, but that's a good start."},{"Id":"7443808577","Type":"PullRequestEvent","CreatedAt":"2018-03-27T20:19:36","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7530","RelatedDescription":"Closed pull request \"[Fixes #7518] NullReferenceException thrown when Controller method us…\" (#7530) at aspnet/Mvc","RelatedBody":"…es Guid parameter default value\r\n\r\nNote that this is for an RC1 issue and so review it per your priorities."},{"Id":"7443564448","Type":"PullRequestEvent","CreatedAt":"2018-03-27T19:30:18","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7556","RelatedDescription":"Closed pull request \"Use RazorCompiledItemMetadataAttribute to calculate route\" (#7556) at aspnet/Mvc","RelatedBody":""},{"Id":"7443493000","Type":"IssuesEvent","CreatedAt":"2018-03-27T19:15:43","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7478","RelatedDescription":"Closed issue \"Add a framework specific reference to Microsoft.DiaSymReader.Native to Microsoft.AspNetCore.Mvc.Razor\" (#7478) at aspnet/Mvc","RelatedBody":"The goal is to reference it in places where we'd generate full pdbs which is desktop .NET."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7445074046","Type":"IssuesEvent","CreatedAt":"2018-03-28T02:16:44","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1702","RelatedDescription":"Closed issue \"Maximum limit of Role Claims\" (#1702) at aspnet/Identity","RelatedBody":"I have used Role Claims for authorize our system, but, problem is role claim table growing rapidly and sometimes there are more than 200 claims for some roles. and it has given error (HTTP Error 400. The size of the request headers is too long.) when a user going to login the site. HOW CAN I FIX THIS ????"},{"Id":"7445071755","Type":"IssuesEvent","CreatedAt":"2018-03-28T02:15:53","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1710","RelatedDescription":"Closed issue \"Authorization Points (i.e. authorization on at-the-point-of-authorization basis) as an improvement on current methodologies\" (#1710) at aspnet/Identity","RelatedBody":"I have a proposal for the Identity team to include a feature, especially as an optional feature and upgrade, that would enable authorizing based on at-the-point-of-authorization basis, for example...\r\n\r\n`[Authorize(AuthorizationPointId = \"UniqueIdOfThisAuthorizationPoint\")]//The value of the unique authorization point ID could be a GUID string or something familiar and human-readable, as chosen by the developer.`\r\n`public ActionResult EditBlogPost()`\r\n`{`\r\n`    ...`\r\n`}`\r\n\r\n...instead of just based on hard-coding the names of roles, etc., as it's being currently done, for example...\r\n\r\n`[Authorize(Roles = \"Admin\")]`\r\n`public ActionResult EditBlogPost()`\r\n`{`\r\n`    ...`\r\n`}`\r\n\r\nThe currently used method, i.e. based on hard-coding names of roles, etc., is not scalable and quite a bad practice, because when role names happen to get changed in the lifetime of the solution, it can become hard to reflect the changes in code.\r\n\r\nNow, with this request or solution I am proposing, authorization point IDs should be used as an optional feature. Every identity entity (i.e. roles, claims, users, etc.) that should be able to access code or resource being guarded must be enrolled in the said authorization point. This enrollment can be eased if the Identity team can provide a Visual Studio integration or solution for that (similar to how web pages are already prepared to register users, etc.), because, for example, if a developer decides to use GUID strings as their authorization IDs, it can be hard to bear in mind the roles and users that can have access through said authorization IDs. But if there can be a Visual Studio integration such that, for example, on mouse hovering over the Authorize attribute, enlisted roles and users can pop up in some way similar to how IntelliSense does it.\r\n\r\nI have used this methodology in my own private coding and it works very fine. I didn't implement mine using the Authorize attribute though. Anybody who have been faced with the inflexibility of Identity in the area of renaming roles and some other tasks that could make things flexible, can testify to how Identity can quickly become unhelpful beyond mere authorization.\r\n\r\nI plead with the Identity team to REALLY consider this and make it a feature in Identity."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7444545282","Type":"PullRequestEvent","CreatedAt":"2018-03-27T23:10:22","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2436","RelatedDescription":"Opened pull request \"Skip flaky test\" (#2436) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7444388436","Type":"IssuesEvent","CreatedAt":"2018-03-27T22:25:32","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2415","RelatedDescription":"Closed issue \"Unable to load DLL 'libuv': The specified module or one of its dependencies could not be found.\" (#2415) at aspnet/KestrelHttpServer","RelatedBody":"I'm building my docker image using the alpine docker image and I get this message when I run the docker container on linux.  The code works on windows outside of docker.\r\n\r\n# Dockerfile\r\n\r\nFROM microsoft/dotnet:2.1-sdk-alpine\r\n\r\nRUN apk update \\\r\n\t&& apk add libuv\r\n\r\n#Set the Working Directory\r\nWORKDIR /app\r\n\r\n#Configure the listening port to 80\r\nENV ASPNETCORE_URLS http://*:80\r\nEXPOSE 80\r\n\r\n#Start the app\r\nENTRYPOINT [\"dotnet\", \"mycode.dll\"]\r\n\r\nI tried adding Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv but it didn't make any difference.  I also commented out the entry point and ran the container, went into the container and verified that libuv was install.  Then, I ran the app inside the container and got the same error."},{"Id":"7444344726","Type":"IssuesEvent","CreatedAt":"2018-03-27T22:14:09","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2435","RelatedDescription":"Opened issue \"Make further Socket Transport performance improvements\" (#2435) at aspnet/KestrelHttpServer","RelatedBody":""}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7444781791","Type":"PullRequestEvent","CreatedAt":"2018-03-28T00:30:01","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2228","RelatedDescription":"Opened pull request \"Handle Mutex creation exceptions\" (#2228) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2226\r\n\r\nHandling Mutex creation exceptions the same way roslyn handles them. We log the exception and fallback to in process cli execution instead of blowing up.\r\n\r\nSuggest reviewing this with ?w=1"},{"Id":"7444770197","Type":"PullRequestEvent","CreatedAt":"2018-03-28T00:25:55","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2227","RelatedDescription":"Opened pull request \"Change Razor directive completions to use new completions API.\" (#2227) at aspnet/Razor","RelatedBody":"- Kept the same behavior as we previously had with Razor directive completions.\r\n- Attempted adding additional functionalities such as lighting up Razor directive completion when completion was invoked on top of Razor directives (non-C#) but ran into issues involving the core HTML editor not consuming the new completion APIs yet. That's something we'll have to re-visit once they move to the new completion APIs.\r\n- Removed a ton of code that was previously needed to make old-school directive completion work.\r\n- Added tests to validate all aspects of new completion APIs.\r\n\r\n\r\n![](https://i.imgur.com/uKORRg4.gif)\r\n\r\n\r\n#1743\r\n#1813"},{"Id":"7443095044","Type":"IssuesEvent","CreatedAt":"2018-03-27T18:00:20","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2226","RelatedDescription":"Opened issue \"Handle Mutex creation failures gracefully\" (#2226) at aspnet/Razor","RelatedBody":"This issue https://github.com/dotnet/roslyn/issues/24124 causes the Mutex constructor to throw on Linux causing the Roslyn build server to fail without falling back to the slow process. We need to account for that in Razor build server as well."},{"Id":"7443024997","Type":"PullRequestEvent","CreatedAt":"2018-03-27T17:47:33","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2224","RelatedDescription":"Merged pull request \"Skip checking thumbprint of file in osx\" (#2224) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2219\r\n\r\n"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":45,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":156,"FavoriteCount":99,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2018-03-28T05:30:09.9878162Z","RunDurationInMilliseconds":8683}