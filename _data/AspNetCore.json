{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7470121179","Type":"IssuesEvent","CreatedAt":"2018-04-03T02:56:31","Actor":"WangCharlie","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3017","RelatedDescription":"Opened issue \"Use Proxy to youtube and get error \" (#3017) at aspnet/Home","RelatedBody":"\r\nhere is the code.\r\n```\r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddCors();\r\n            services.AddProxy(options =>\r\n            {\r\n                options.MessageHandler = new HttpClientHandler\r\n                {\r\n                    AllowAutoRedirect = false,\r\n                    UseCookies = true\r\n                };\r\n\r\n                options.PrepareRequest = (originalRequest, message) =>\r\n                {\r\n                    var host = GetHeaderValue(originalRequest, \"X-Forwarded-Host\") ?? originalRequest.Host.Host;\r\n                    var port = GetHeaderValue(originalRequest, \"X-Forwarded-Port\") ?? originalRequest.Host.Port.Value.ToString(CultureInfo.InvariantCulture);\r\n                    var prefix = GetHeaderValue(originalRequest, \"X-Forwarded-Prefix\") ?? originalRequest.PathBase;\r\n\r\n                    message.Headers.Add(\"Access-Control-Allow-Origin\", originalRequest.Scheme + \"://\" + originalRequest.Host.Host);\r\n                    message.Headers.Add(\"X-Forwarded-Host\", host);\r\n                    if (!string.IsNullOrWhiteSpace(port)) message.Headers.Add(\"X-Forwarded-Port\", port);\r\n                    if (!string.IsNullOrWhiteSpace(prefix)) message.Headers.Add(\"X-Forwarded-Prefix\", prefix);\r\n\r\n                    return Task.FromResult(0);\r\n                };\r\n            });\r\n        }\r\n\r\n        private static string GetHeaderValue(HttpRequest request, string headerName)\r\n        {\r\n            return request.Headers.TryGetValue(headerName, out StringValues list) ? list.FirstOrDefault() : null;\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            app.UseWebSockets()\r\n                //.Map(\"/youtubei\",api=>api.RunProxy(new Uri(\"https://www.youtube.com\")))\r\n                .RunProxy(new Uri(\"https://www.youtube.com\"));\r\n        }\r\n```\r\n \r\n![image](https://user-images.githubusercontent.com/6106454/38226717-9ea25fca-372d-11e8-8419-e4eb79f0a3a9.png)\r\n\r\n"},{"Id":"7468739774","Type":"IssuesEvent","CreatedAt":"2018-04-02T20:05:28","Actor":"HappyNomad","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3016","RelatedDescription":"Opened issue \"Stop prepending patch operation paths with /\" (#3016) at aspnet/Home","RelatedBody":"[This line](https://github.com/aspnet/JsonPatch/blob/63f03228106c61b6af2965c874f09758f7a5439e/src/Microsoft.AspNetCore.JsonPatch/Internal/PathHelpers.cs#L24) seems pointless and caused a bug in my app.  I wrote `jsonPatchDocument.Remove( \"\" )` to produce a `remove` operation that applies to the whole document.  That linked line changes the operation's path to `\"/\"`.  Whereas `\"\"` indicates the whole document, this new path indicates a field with an empty name.  The difference is [described in the spec](https://tools.ietf.org/html/rfc6901#section-5).  I want to reference the whole document - _not_ an empty-named field.\r\n\r\nI propose removing that code from `ValidateAndNormalizePath` which modifies the path like this.  If the library user wants to prepend a path with `/` then the user will do it himself.  I don't see a reason for the library to do it."},{"Id":"7468424758","Type":"IssuesEvent","CreatedAt":"2018-04-02T18:55:51","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2750","RelatedDescription":"Closed issue \"Review naming of ITrackingConsentFeature and CanTrack\" (#2750) at aspnet/Home","RelatedBody":"@blowdart @DamianEdwards \r\nhttps://github.com/aspnet/HttpAbstractions/blob/6558c2bd07dc3e40c477a33ee0ec4663a8ff81a7/src/Microsoft.AspNetCore.Http.Features/ITrackingConsentFeature.cs\r\nhttps://github.com/aspnet/templating/pull/213/files"},{"Id":"7467359241","Type":"IssuesEvent","CreatedAt":"2018-04-02T15:00:55","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3009","RelatedDescription":"Closed issue \"request processing slows down on concurrent requests.\" (#3009) at aspnet/Home","RelatedBody":"_From @rkdrnfds on March 29, 2018 6:43_\n\nRequest handling extremely slows down on concurrent requests\r\n\r\n```\r\n[Route(\"Test\")]\r\npublic class TestController : Controller {\r\n        [HttpGet(\"DoNothingGet\")]\r\n        public void DoNothingGet() { }\r\n}\r\n```\r\nAgainst above controller, I tested concurrent request using shell script below \r\n```\r\nfor i in {1..50}\r\ndo\r\ncurl -X GET \"http://localhost:5000/Test/DoNothingGet\" -H \"Host: 127.0.0.1:5000\" -H \"X-Debug: true\" -H \"User-Agent: Terminal\" -d \"[0, 0]\" &\r\ndone\r\n```\r\n\r\nFor sequential request, there's almost no delay for processing requests. consuming about 1~5ms per request.\r\nbut For concurrent request, handling time varies from 100ms ~ 2000ms\r\n\r\nThere's light middleware attached for logging execution time.\r\n\r\n```\r\npublic class ProcessingTimeLoggingMiddleware\r\n    {\r\n        readonly RequestDelegate _next;\r\n        readonly ILogger<RequestLoggingMiddleware> _logger;\r\n\r\n        public ProcessingTimeLoggingMiddleware(\r\n            RequestDelegate next,\r\n            ILogger<RequestLoggingMiddleware> logger\r\n        )\r\n        {\r\n            _logger = logger;\r\n            _next = next;\r\n        }\r\n\r\n        public async Task Invoke(HttpContext context)\r\n        {\r\n            _logger.LogInformation(\"Start Middleware\");\r\n            var sw = Stopwatch.StartNew();\r\n\r\n            await _next.Invoke(context);\r\n\r\n            sw.Stop();\r\n\r\n            _logger.LogInformation(LoggingEvents.RequestProcessingTime,\r\n                \"Processing {Path} [{StatusCode}] took {ElapsedTime}ms.\",\r\n                context.Request.Path, context.Response.StatusCode, sw.ElapsedMilliseconds\r\n            );\r\n        }\r\n    }\r\n```\r\n\r\nBelow are collected logs for slow request. (one of 50 requests. others also have similar logs)\r\n\r\n```\r\nMarch 29th 2018, 15:50:20.286 Microsoft.AspNetCore.Hosting.Internal.WebHost \r\nRequest starting HTTP/1.1 GET http://127.0.0.1:5000/Test/DoNothingGet application/x-www-form-urlencoded 6\r\n\r\nMarch 29th 2018, 15:50:20.412 Server.Middlewares.RequestLoggingMiddleware \r\nStart Middleware\r\n\r\nMarch 29th 2018, 15:50:21.445 Server.Middlewares.RequestLoggingMiddleware \r\nProcessing /Test/DoNothingGet [200] took 830ms\r\n\r\nMarch 29th 2018, 15:50:22.439 Microsoft.AspNetCore.Hosting.Internal.WebHost \r\nRequest finished in 2166.119ms \r\n```\r\n\r\nI tried manipulating `ThreadPool.SetMinThreads` and `KestrelServerOptions.Limits.MaxConcurrentConnection` but nothing had any effect.\r\n\r\n## Environment data\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.0-preview1-final\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Owin\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.0.0\" />\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#8930_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7470409815","Type":"PullRequestEvent","CreatedAt":"2018-04-03T04:49:22","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1830","RelatedDescription":"Opened pull request \"[WIP] Refactor HubConnectionBuilder\" (#1830) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1688"},{"Id":"7470037803","Type":"PullRequestEvent","CreatedAt":"2018-04-03T02:25:48","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1827","RelatedDescription":"Merged pull request \"Couple logging additions\" (#1827) at aspnet/SignalR","RelatedBody":""},{"Id":"7469812277","Type":"IssuesEvent","CreatedAt":"2018-04-03T01:03:22","Actor":"amccool","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1829","RelatedDescription":"Opened issue \"DI and System.ObjectDisposedException: 'Cannot access a disposed object.'\" (#1829) at aspnet/SignalR","RelatedBody":"* Versions of Server-Side NuGet Packages:\r\n  microsoft.aspnetcore.signalr\\1.0.0-preview1-final\r\n* Versions of Client-Side NuGet/NPM Packages:\r\n \"@aspnet/signalr\": \"^1.0.0-preview1-update1\"\r\nJavaScript client via TypeScript:\r\n* The Server you are using\r\n Kestrel\r\n* The Operating System on the Server\r\n Windows\r\n* The Operating System on the Client\r\n Windows\r\n* The Browser on the client, if using the JavaScript client\r\n Chrome\r\n\r\nI have a dependency I inject into a Hub.   The dependency has a method in it which I supply with Action<T> lambda methods.\r\n\r\nWhen the dependency calls my lambda Action<T> methods, it does jump into my hub code, However I always get\r\n\r\n`System.ObjectDisposedException: Cannot access a disposed object. Object name: 'CallActivityHub'.`\r\n\r\n`at Microsoft.AspNetCore.SignalR.Hub.CheckDisposed()    \r\nat Microsoft.AspNetCore.SignalR.Hub.get_Context()    \r\nat REWebApp.SignalR.Hubs.CallActivityHub.<ConnectToStream>b__5_2(PCConsoleSnapshot snapshot) in c:\\xxx\\SignalR\\Hubs\\CallActivityHub.cs:line 49    \r\nat REWebApp.Startup.<>c.<<ConfigureServices>b__4_3>d.MoveNext() in c:\\xxx\\Startup.cs:line 81`\r\n\r\nI have used, AddSingleton, AddScoped, Add Transient for the dependency, and all do the same thing.   I have also Moq'd the dependency, and it also does the same thing.\r\n\r\nWhat is disposing of the Hub?\r\nor do I need to be looking at this:   https://github.com/aspnet/SignalR/issues/1699#issuecomment-376956884\r\n\r\nalso -- help with this TypeScript setup, VS doesnt like LogLevel.  Do I need another import?\r\n    this.hubConnection = new HubConnection(\"/CallActivity\", { logger: LogLevel.Trace } );\r\n\r\n\r\n"},{"Id":"7469794599","Type":"PullRequestEvent","CreatedAt":"2018-04-03T00:56:47","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1828","RelatedDescription":"Opened pull request \"Don't normalize urls that start with //\" (#1828) at aspnet/SignalR","RelatedBody":"Issue: https://github.com/aspnet/SignalR/issues/1436\r\nNeed to think about how to test this. "},{"Id":"7469743205","Type":"IssuesEvent","CreatedAt":"2018-04-03T00:37:12","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/426","RelatedDescription":"Closed issue \"Handle back pressure from slow clients when application complete\" (#426) at aspnet/SignalR","RelatedBody":"If an application is complete but the transport is currently writing to a slow connection, it's possible we'll miss the notification that the application is complete for an indeterminate amount of time, leaking resources. We need to handle this situation by checking the channel's task and completing the outgoing send after some timeout.\r\n\r\nThis needs to be handled in all 3 transports:\r\n- LP - https://github.com/aspnet/SignalR/blob/d19ed0070c25478c6ed23c2490e700f1452e8a68/src/Microsoft.AspNetCore.Sockets/Transports/LongPollingTransport.cs#L69\r\n- SSE - https://github.com/aspnet/SignalR/blob/d19ed0070c25478c6ed23c2490e700f1452e8a68/src/Microsoft.AspNetCore.Sockets/Transports/ServerSentEventsTransport.cs#L65\r\n- WS - https://github.com/aspnet/SignalR/blob/d19ed0070c25478c6ed23c2490e700f1452e8a68/src/Microsoft.AspNetCore.Sockets/Transports/WebSocketsTransport.cs#L194\r\n\r\n/cc @anurse "}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7469806841","Type":"IssuesEvent","CreatedAt":"2018-04-03T01:01:18","Actor":"fatih108","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7593","RelatedDescription":"Opened issue \"UseStatusCodePagesWithReExecute,  Does not work  with Ajax\" (#7593) at aspnet/Mvc","RelatedBody":"I want to catch the 401 error with Ajax but UseStatusCodePagesWithReExecute not firing."},{"Id":"7469399827","Type":"IssuesEvent","CreatedAt":"2018-04-02T22:41:32","Actor":"fugaku","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7569","RelatedDescription":"Closed issue \"ModelState overridden by Model\" (#7569) at aspnet/Mvc","RelatedBody":"Hi,\r\n\r\nI'm using ASP.NET Core 2.0 MVC and I'm trying to use the PRG pattern following the usage of TempData [here](https://andrewlock.net/post-redirect-get-using-tempdata-in-asp-net-core/).\r\nThis TempData will act as a holder for the previous ModelState so that we can use previous model value in case of an invalid model state after post.\r\n\r\n```csharp\r\n    public class HomeController : Controller\r\n    {\r\n        [HttpGet]\r\n        [ImportModelState]\r\n        public ActionResult Index()\r\n        {\r\n            MyModel model = new MyModel();\r\n            return View(model);\r\n        }\r\n\r\n        [HttpPost]\r\n        [ExportModelState]\r\n        public ActionResult Index(MyModel model)\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return RedirectToAction(\"Index\");\r\n            }\r\n            else\r\n            {\r\n                return RedirectToAction(\"Success\", new { start = model.StartDate, end = model.EndDate });\r\n            }\r\n        }\r\n\r\n        [HttpGet]\r\n        public ActionResult Success(DateTime? start, DateTime? end)\r\n        {\r\n            var model = new MyModel\r\n            {\r\n                StartDate = start,\r\n                EndDate = end\r\n            };\r\n            return View(model);\r\n        }\r\n    }\r\n```\r\nWith the model \r\n```csharp\r\n    public class MyModel\r\n    {\r\n        [Required]\r\n        public string Name { get; set; }\r\n\r\n        [Required]\r\n        [DisplayName(\"Start: \")]\r\n        [DataType(DataType.Date)]\r\n        [DisplayFormat(DataFormatString = \"{0:yyyy-MM-dd}\", ApplyFormatInEditMode = true)]\r\n        public DateTime? StartDate { get; set; }\r\n\r\n        [Required]\r\n        [DisplayName(\"End: \")]\r\n        [DataType(DataType.Date)]\r\n        [DisplayFormat(DataFormatString = \"{0:yyyy-MM-dd}\", ApplyFormatInEditMode = true)]\r\n        public DateTime? EndDate { get; set; }\r\n    }\r\n```\r\nThe issue happens when I'm trying to render the `StartDate` or `EndDate` property using a TagHelper.\r\nThe input element is always empty when there is an invalid model state eventhough the previous value is imported successfully from the `TempData` to the current `ModelState` using an `ActionFilterAttribute`\r\n\r\n```csharp\r\n    public class ImportModelStateAttribute : ModelStateTransfer\r\n    {\r\n        public override void OnActionExecuted(ActionExecutedContext filterContext)\r\n        {\r\n            var controller = filterContext.Controller as Controller;\r\n            var serialisedModelState = controller?.TempData[Key] as string;\r\n\r\n            if (serialisedModelState != null)\r\n            {\r\n                //Only Import if we are viewing\r\n                if (filterContext.Result is ViewResult)\r\n                {\r\n                    var modelState = ModelStateHelpers.DeserialiseModelState(serialisedModelState);\r\n                    filterContext.ModelState.Merge(modelState);\r\n                }\r\n                else\r\n                {\r\n                    //Otherwise remove it.\r\n                    controller.TempData.Remove(Key);\r\n                }\r\n            }\r\n\r\n            base.OnActionExecuted(filterContext);\r\n        }\r\n    }\r\n```\r\nThe value is then null on the taghelper's property on the `For.Model`\r\n```csharp\r\n    public class DatePickerTagHelper : TagHelper\r\n    {\r\n        IHtmlGenerator generator;\r\n        public DatePickerTagHelper(IHtmlGenerator generator)\r\n        {\r\n            this.generator = generator;\r\n        }\r\n\r\n        [HtmlAttributeNotBound]\r\n        [ViewContext]\r\n        public ViewContext ViewContext { get; set; }\r\n\r\n        [HtmlAttributeName(\"for\")]\r\n        public ModelExpression For { get; set; }\r\n\r\n        [HtmlAttributeName(\"value\")]\r\n        public string Value { get; set; }\r\n\r\n        public override void Process(TagHelperContext context, TagHelperOutput output)\r\n        {\r\n            output.SuppressOutput();\r\n            var value = Value;\r\n            var format = \"yyyy-MM-dd\";\r\n            if (string.IsNullOrEmpty(value))\r\n            {\r\n                if (For != null && For.Model != null)\r\n                {\r\n                    var dt = DateTime.Parse(For.Model.ToString());\r\n                    value = dt.ToString(format);\r\n                }\r\n            }\r\n            var textbox = generator.GenerateTextBox(ViewContext, For.ModelExplorer, For.Name, value, format, null);\r\n            textbox.Attributes[\"value\"] = value;\r\n            textbox.AddCssClass(\"form-control\");\r\n            output.Content.AppendHtml(textbox);\r\n        }\r\n    }\r\n```\r\n\r\nWhat am I doing wrong here?\r\n\r\nPlease see my repro [here](https://github.com/fugaku/testmodelstate)"},{"Id":"7469134159","Type":"IssuesEvent","CreatedAt":"2018-04-02T21:31:55","Actor":"oferns","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7592","RelatedDescription":"Opened issue \" The 'Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.TempDataSerializer' cannot serialize an object of type 'Microsoft.Extensions.Localization.LocalizedString'.\" (#7592) at aspnet/Mvc","RelatedBody":"Surely it should be able to handle this? Is there not an implicit conversion to string?"},{"Id":"7469115370","Type":"IssuesEvent","CreatedAt":"2018-04-02T21:27:31","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7511","RelatedDescription":"Closed issue \"Adjusting BindRequired semantics / alternatives?\" (#7511) at aspnet/Mvc","RelatedBody":"We want to give our REST API users feedback:\r\n* if they provided no value for a required property -> we can use the BindRequired attribute in this scenario\r\n* if they provided an ill-formatted / non-convertible value\r\n** for a required property -> how to improve the BindRequired error message in this scenario, which simply states that no value has been provided which confuses the caller, because he has indeed provided a value, it is simply of the wrong data format.\r\n** for a non-required property -> ? What attribute to use in this scenario?\r\n\r\nNote: we are using ASP.NET Core 1.1.x"},{"Id":"7469086177","Type":"IssuesEvent","CreatedAt":"2018-04-02T21:20:51","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7533","RelatedDescription":"Closed issue \"Using special characters in names of properties causes an exception.\" (#7533) at aspnet/Mvc","RelatedBody":"If we have the following model. \r\n```\r\npublic class SampleModel\r\n    {\r\n        public string gelöscht\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n    }\r\n```\r\nAnd add a view that has an editor for this property like shown below, an exception will be thrown.\r\n\r\n```\r\n@model TestProject.Models.SampleModel\r\n\r\n@Html.TextBoxFor(m => m.gelöscht);\r\n```\r\n"},{"Id":"7468635580","Type":"IssuesEvent","CreatedAt":"2018-04-02T19:42:30","Actor":"khellang","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7546","RelatedDescription":"Closed issue \"Action with complex model and CancellationToken results in ambiguous binding source inference\" (#7546) at aspnet/Mvc","RelatedBody":"In an API controller, if you have an action with both a complex model and a `CancellationToken`, MVC fails to infer the binding source:\r\n\r\n> Unable to unambiguously infer binding sources for parameters on 'System.Threading.Tasks.Task\\`1[Microsoft.AspNetCore.Mvc.ActionResult`1[Models.UserModel]] Register(Controllers.RegisterUserModel, System.Threading.CancellationToken)'. More than one parameter may be inferred to bound from body.\r\n\r\nIt's easy enough to get around it by just setting `SuppressInferBindingSourcesForParameters` and slapping an explicit `[FromBody]` attribute on the model parameter, but this seems like a bug/oversight?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7468722524","Type":"IssuesEvent","CreatedAt":"2018-04-02T20:01:46","Actor":"jholovacs","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1732","RelatedDescription":"Opened issue \"Make UserManager<TUser> implement IUserManager<TUser>\" (#1732) at aspnet/Identity","RelatedBody":"We have to go through an insane amount of mocking (see #344) and creating fake testing classes to get around the fact that UserManager<TUser> does not implement a service interface like just about everything else does when we want to test our code that consumes UserManager<TUser>'s services.  This is silly.  We are not testing UserManager<TUser>, we should not have to mock its dependencies, or include its functionality in our own tests."},{"Id":"7468546859","Type":"IssuesEvent","CreatedAt":"2018-04-02T19:23:05","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1730","RelatedDescription":"Closed issue \"Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts\" (#1730) at aspnet/Identity","RelatedBody":"Found this during verification, we updated the scirpts under the lib folder to following versions:\r\njquery.validate.unobtrusive: from 3.2.6 to 3.2.9\r\njquery.validate: from 1.14.0 to 1.17.0\r\n\r\nWe should update the CDN urls in the following partial to match this.\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/UI/Areas/Identity/Pages/_ValidationScriptsPartial.cshtml\r\n\r\ncc @mkArtakMSFT "},{"Id":"7468539077","Type":"PullRequestEvent","CreatedAt":"2018-04-02T19:21:23","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1731","RelatedDescription":"Merged pull request \"Fix CDN urls to match the fallback source folders' versions\" (#1731) at aspnet/Identity","RelatedBody":"[Fixes #1730] Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts"},{"Id":"7468506551","Type":"PullRequestEvent","CreatedAt":"2018-04-02T19:14:05","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1731","RelatedDescription":"Opened pull request \"Fix CDN urls to match the fallback source folders' versions\" (#1731) at aspnet/Identity","RelatedBody":"[Fixes #1730] Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts"},{"Id":"7468106674","Type":"IssuesEvent","CreatedAt":"2018-04-02T17:47:44","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1730","RelatedDescription":"Opened issue \"Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts\" (#1730) at aspnet/Identity","RelatedBody":"Found this during verification, we updated the scirpts under the lib folder to following versions:\r\njquery.validate.unobtrusive: from 3.2.6 to 3.2.9\r\njquery.validate: from 1.14.0 to 1.17.0\r\n\r\nWe should update the CDN urls in the following partial to match this.\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/UI/Areas/Identity/Pages/_ValidationScriptsPartial.cshtml\r\n\r\ncc @mkArtakMSFT "},{"Id":"7464604365","Type":"IssuesEvent","CreatedAt":"2018-04-01T19:57:32","Actor":"aneequrrehman","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1729","RelatedDescription":"Closed issue \"Expose some internal helpers on UserManager\" (#1729) at aspnet/Identity","RelatedBody":"Referring to #1348 by @HaoK \r\n\r\nShouldn't `ValidateUserAsync` and `ValidatePasswordAsync` be virtual as well?"},{"Id":"7464596980","Type":"IssuesEvent","CreatedAt":"2018-04-01T19:52:41","Actor":"aneequrrehman","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1729","RelatedDescription":"Opened issue \"Expose some internal helpers on UserManager\" (#1729) at aspnet/Identity","RelatedBody":"Referring to #1348 by @HaoK \r\n\r\nShouldn't `ValidateUserAsync` and `ValidatePasswordAsync` by virtual as well?"},{"Id":"7461135015","Type":"IssuesEvent","CreatedAt":"2018-03-30T23:32:50","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1643","RelatedDescription":"Closed issue \"Add third party notice to identity UI package\" (#1643) at aspnet/Identity","RelatedBody":""},{"Id":"7461058708","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:59:12","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1728","RelatedDescription":"Merged pull request \"Reacting to templating repo's script changes\" (#1728) at aspnet/Identity","RelatedBody":""},{"Id":"7461042048","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:52:27","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1728","RelatedDescription":"Opened pull request \"Reacting to templating repo's script changes\" (#1728) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7470098931","Type":"PullRequestEvent","CreatedAt":"2018-04-03T02:48:18","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2459","RelatedDescription":"Merged pull request \"Dispose SocketAsyncEventArgs when we dispose the Socket\" (#2459) at aspnet/KestrelHttpServer","RelatedBody":"#2416"},{"Id":"7470007628","Type":"PullRequestEvent","CreatedAt":"2018-04-03T02:14:52","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2459","RelatedDescription":"Opened pull request \"Dispose SocketAsyncEventArgs when we dispose the Socket\" (#2459) at aspnet/KestrelHttpServer","RelatedBody":"#2416"},{"Id":"7469920904","Type":"IssuesEvent","CreatedAt":"2018-04-03T01:42:35","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2449","RelatedDescription":"Closed issue \"Make Kestrel work with alternative MemoryPool implementations\" (#2449) at aspnet/KestrelHttpServer","RelatedBody":"Today we make some assumptions that the underlying block size will be 4K and swapping out with another pool (like the default array pool) makes the tests fail.\r\n\r\n/cc @jkotas"},{"Id":"7469919510","Type":"PullRequestEvent","CreatedAt":"2018-04-03T01:42:03","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2458","RelatedDescription":"Merged pull request \"Fix CopyToAsyncDoesNotCopyBlocks test\" (#2458) at aspnet/KestrelHttpServer","RelatedBody":"An alternative to #2453 that at least keep some coverage. This test manually fills the RequestBodyPipe instead of pumping it through the message body, but it still verifies that MessageBody.CopyToAsync itself doesn't copy.\r\n\r\nThis also allow TestInput to be changed to use a different pool without affecting this test."},{"Id":"7469637461","Type":"PullRequestEvent","CreatedAt":"2018-04-02T23:59:18","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2453","RelatedDescription":"Closed pull request \"Remove bogus test\" (#2453) at aspnet/KestrelHttpServer","RelatedBody":"The reason this works with the SlabMemoryPool is because the array is actually a giant slab and blocks are all backed by the same array. We're not really verifying anything other than the fact that they came from the same slab. In fact, we're still incurring a copy from transport pipe into the request body pipe so if a pool implementation wasn't slab based, this test could never pass. I'm not sure if we want to preserve anything from this test, but let me know.\r\n\r\nContributes to #2449"},{"Id":"7469606591","Type":"PullRequestEvent","CreatedAt":"2018-04-02T23:48:29","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2458","RelatedDescription":"Opened pull request \"Fix CopyToAsyncDoesNotCopyBlocks test\" (#2458) at aspnet/KestrelHttpServer","RelatedBody":"An alternative to #2453 that at least keep some coverage. This test manually fills the RequestBodyPipe instead of pumping it through the message body, but it still verifies that MessageBody.CopyToAsync itself doesn't copy.\r\n\r\nThis also allow TestInput to be changed to use a different pool without affecting this test."},{"Id":"7469594799","Type":"PullRequestEvent","CreatedAt":"2018-04-02T23:44:14","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2446","RelatedDescription":"Merged pull request \"Reaction to *Memory changes\" (#2446) at aspnet/KestrelHttpServer","RelatedBody":""}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7456810989","Type":"IssuesEvent","CreatedAt":"2018-03-29T23:45:26","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2230","RelatedDescription":"Closed issue \"Shutdown command needs to compute the correct default pipe name\" (#2230) at aspnet/Razor","RelatedBody":"We recently changed the server to be created using the pipe name computed from the path to `rzc.dll` https://github.com/aspnet/Razor/issues/2216. But when the shutdown command is directly invoked, we don't pass in the tool assembly path [here](https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Razor.Tools/ShutdownCommand.cs#L30). It should instead pass in the tool assembly path to `ComputeDefault()`.\r\n\r\ncc @rynowak "},{"Id":"7456398269","Type":"PullRequestEvent","CreatedAt":"2018-03-29T21:44:52","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2232","RelatedDescription":"Merged pull request \"Normalize the tool assembly path before using it as the base for pipe…\" (#2232) at aspnet/Razor","RelatedBody":"… name\r\n\r\n#2230 \r\n\r\nThe actual reason for this bug was the tool assembly path that MsBuild passes in looks like\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\..\\..\\tools\\rzc.dll`\r\n\r\nbut the shutdown command uses the path\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\tools\\rzc.dll`\r\n\r\nNotice the lack of `\\build\\netstandard2.0\\..\\..\\`\r\n\r\nSo calling `Path.GetFullPath` before using this to compute pipe name fixes the problem.\r\n\r\nAdded a test"},{"Id":"7455835879","Type":"PullRequestEvent","CreatedAt":"2018-03-29T19:44:58","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2232","RelatedDescription":"Opened pull request \"Normalize the tool assembly path before using it as the base for pipe…\" (#2232) at aspnet/Razor","RelatedBody":"… name\r\n\r\n#2230 \r\n\r\nThe actual reason for this bug was the tool assembly path that MsBuild passes in looks like\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\..\\..\\tools\\rzc.dll`\r\n\r\nbut the shutdown command uses the path\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\tools\\rzc.dll`\r\n\r\nNotice the lack of `\\build\\netstandard2.0\\..\\..\\`\r\n\r\nSo calling `Path.GetFullPath` before using this to compute pipe name fixes the problem.\r\n\r\nAdded a test"},{"Id":"7455342054","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:49:46","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2231","RelatedDescription":"Closed issue \"Abstract DocumentTracker lifecycle from directly depending on ITextViews\" (#2231) at aspnet/Razor","RelatedBody":"Today our document trackers live and die based off of having an ITextView associated with them.  We need to be able to work in an invisible editor world (live share) which does not have any associated text views."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":18,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":159,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2018-04-03T05:30:10.2777682Z","RunDurationInMilliseconds":9032}