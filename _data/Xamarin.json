{"Data":{"Blog":{"FeedItems":[{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null},{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null},{"Title":"Xamarin.Forms and Zeplin: Speed Up Your Design to Development Process","PublishedOn":"2018-10-23T18:53:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Arnstein Johansen, a Norwegian software engineer interested in mobile and web development. He works for Itema AS, a consultant agency in Trondheim, Norway and a...","Href":"https://blog.xamarin.com/xamarin-forms-and-zeplin-speed-up-your-design-to-development-process/","RawContent":null},{"Title":"Xamarin.Forms 3.3.0: Little Things, Huge Difference","PublishedOn":"2018-10-18T19:06:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin.Forms team has been working closely with our open-source community to help fill in the “little things”. Things you’ve told us are important to building your mobile apps and being supremely...","Href":"https://blog.xamarin.com/xamarin-forms-3-3-0-little-things-huge-difference/","RawContent":null},{"Title":"Complex Animations in Xamarin.Forms using Finite State Machine","PublishedOn":"2018-10-16T17:32:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff, a Principal Engineer at Binwell. Microsoft MVP and Xamarin Certified experienced mobile cross-platform and native developer. Also, a previously...","Href":"https://blog.xamarin.com/complex-animations-xamarin-forms-using-finite-state-machine/","RawContent":null},{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null},{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null},{"Title":"Mobile Developer Events in October","PublishedOn":"2018-10-01T19:00:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf Local Events Watch all the live sessions from .NET Conf right on Channel 9! With a wide selection of content by feature speakers from the community and .NET product teams, take this...","Href":"https://blog.xamarin.com/mobile-developer-events-in-october/","RawContent":null},{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in the Visual Studio 2017...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8567068224","Type":"PullRequestEvent","CreatedAt":"2018-11-10T06:35:08","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2424","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Fix Aar directory resolution.\" (#2424) at xamarin/xamarin-android","RelatedBody":"Fixed #2408\r\n\r\nAs part of the speed up process when extracting resources\r\nfrom assemblies and Aar files, we dont re-extract if\r\nthe stamp file is newer than the assembly.\r\n\r\nThe problem with that was in the case of Aar files we\r\nwere NOT adding the `res` or `asset` directories to\r\nthe list of resolved directories when we skipped extraction.\r\nAs a result we got less `res` directories on a second\r\nbuild.\r\n\r\nThis commit fixes that."},{"Id":"8566573987","Type":"PullRequestEvent","CreatedAt":"2018-11-10T00:55:13","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2423","RelatedDescription":"Opened pull request \"[docs] Correct a couple links in unix-instructions.md\" (#2423) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8565990015","Type":"PullRequestEvent","CreatedAt":"2018-11-09T21:53:31","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2422","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] <ValidateJavaVersion/> needed for designer\" (#2422) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2410\r\n\r\nIn 3eb41a0, I added a good performance improvement for the initial\r\ndesign-time build (solution create).\r\n\r\nHowever, we have tests downstream in monodroid that check if MSBuild\r\ntargets called by the Android designer are working. Apparently, these\r\ntargets need `$(_JdkVersion)`, whoops! Glad we have that test!\r\n\r\nThe Android designer also sets\r\n`$(AndroidUseManagedDesignTimeResourceGenerator)` to `False`. We can\r\ncheck for this and allow the `<ValidateJavaVersion/>` MSBuild task to\r\nrun in this case."},{"Id":"8565284533","Type":"PullRequestEvent","CreatedAt":"2018-11-09T19:22:56","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2420","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] locate $(JdkJvmPath) only when needed\" (#2420) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2409\r\nContext: https://github.com/xamarin/xamarin-android/wiki/Build-Performance-Results\r\n\r\nWhen doing the latest performance comparison, I noticed the\r\n`<ResolveSdks/>` MSBuild task is a bit slower:\r\n\r\n    * VS 15.9\r\n     80 ms  ResolveSdks                                7 calls\r\n    * VS 16.0 p2 (master)\r\n    127 ms  ResolveSdks                                7 calls\r\n\r\nFor `$(AndroidGenerateJniMarshalMethods)` support, we needed to locate\r\na new `$(JdkJvmPath)` location.\r\n\r\nSince `<ResolveSdks/>` finds `$(JdkJvmPath)` on first build, and\r\ndesign-time builds, it is worth making sure this task doesn't get any\r\nslower. The initial design-time build happens on \"solution create\",\r\nwhich is one of the more important metrics the VS team measures.\r\n\r\nSo I split out the logic finding `$(JdkJvmPath)` and put it in a new\r\n`<ResolveJdkJvmPath/>` MSBuild task.\r\n\r\nAlso setup a `Condition`, so it only runs if:\r\n\r\n- Not a `$(DesignTimeBuild)`\r\n- `$(AndroidGenerateJniMarshalMethods)` is enabled\r\n- `$(JdkJvmPath)` is blank\r\n\r\nThis should save ~50ms on DTBs and first builds."},{"Id":"8565284516","Type":"IssuesEvent","CreatedAt":"2018-11-09T19:22:55","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2409","RelatedDescription":"Closed issue \"[ResolveSdks] reorder the lookup of JdkJvmPath\" (#2409) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nRelated to #2374 \r\n\r\n1. Create a new solution in Visual Studio.\r\n2. See a performance regression in the first design-time build. You can also see it in a regular first build, or incremental build if outside the IDE. DTB has the highest performance bar, though.\r\n\r\n### What should we do?\r\n\r\nThe code here: https://github.com/xamarin/xamarin-android/blob/e4c15751253ed56cfedfd9d428d6129a5727462a/src/Xamarin.Android.Build.Tasks/Tasks/ResolveSdksTask.cs#L130-L157\r\n\r\n1. Move the logic finding `JdkJvmPath` to a new MSBuild task\r\n1. Don't run the task if `$(DesignTimeBuild)` is true.\r\n1. Only run the task if `$(AndroidGenerateJniMarshalMethods)` is true.\r\n\r\n/cc @radekdoulik, feel free to take a stab at this if I don't get to it.\n\n> VS bug [#726927](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/726927)"},{"Id":"8564495028","Type":"PullRequestEvent","CreatedAt":"2018-11-09T16:53:49","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2422","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] <ValidateJavaVersion/> needed for designer\" (#2422) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2410\r\n\r\nIn 3eb41a0, I added a good performance improvement for the initial\r\ndesign-time build (solution create).\r\n\r\nHowever, we have tests downstream in monodroid that check if MSBuild\r\ntargets called by the Android designer are working. Apparently, these\r\ntargets need `$(_JdkVersion)`, whoops! Glad we have that test!\r\n\r\nThe Android designer also sets\r\n`$(AndroidUseManagedDesignTimeResourceGenerator)` to `False`. We can\r\ncheck for this and allow the `<ValidateJavaVersion/>` MSBuild task to\r\nrun in this case."},{"Id":"8564477261","Type":"PullRequestEvent","CreatedAt":"2018-11-09T16:50:47","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2418","RelatedDescription":"Merged pull request \"[tests] Emit error when timing input is missing\" (#2418) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/xamarin/xamarin-android/issues/2397\r\n\r\nMake sure that we don't break the timing measurements again, when the *logcat*\r\noutput is not collected. The PR build should fail in such case."},{"Id":"8564477222","Type":"IssuesEvent","CreatedAt":"2018-11-09T16:50:47","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2397","RelatedDescription":"Closed issue \"Emit error when timing output is not collected\" (#2397) at xamarin/xamarin-android","RelatedBody":"We are loosing useful data, when apk tests timing measurement doesn't work. As happened recently.\r\n\r\nWe should make the build fail, when the timing output is not collected. I will probably let the processing task fail in that case."},{"Id":"8564247367","Type":"PullRequestEvent","CreatedAt":"2018-11-09T16:13:31","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2421","RelatedDescription":"Opened pull request \"[Xamarin.Android.Tools.BootstrapTasks] RenameTestCases errors\" (#2421) at xamarin/xamarin-android","RelatedBody":"Context: https://gitter.im/xamarin/xamarin-android?at=5be467157326df140ed4fe2b\r\nContext: https://gitter.im/xamarin/xamarin-android?at=5be46a0c7326df140ed51325\r\nContext: https://gitter.im/xamarin/xamarin-android?at=5be46dd37326df140ed527d1\r\n\r\nThe `<RenameTestCases/>` task was added in 385699a5 to update the\r\n`//test-case/@name` attribute value to contain the Configuration from\r\nwhich the test came from.\r\n\r\nAs part of its operation, it would occasionally encounter NUnit XML\r\nfiles which were *invalid*, usually because `nunit-console` crashed;\r\nsee also 0ec00e12, which updated `<RenameTestCases/>` semantics so\r\nthat *if* an NUnit file were invalid, it would generate a \"new\" NUnit\r\nXML file containing a generic error message.\r\n\r\nThe problem is, this attempt at reporting *any* error message is still\r\nfailing.  Take for example [Jenkins build 1257][0], which\r\n[reports *no* unit test failures][1], but the build log contains:\r\n\r\n\terror : Unable to process `…/xamarin-android/external/Java.Interop/TestResult-Java.Interop-PerformanceTests.xml`.  Is it empty?  (Did a unit test runner SIGSEGV?)\r\n\r\nThis is *precisely* what 0ec00e12 (and 1db436c6) attempted to address:\r\n*surface* that error so that it's shown in the `testReport` URL.\r\n\r\n[Further investigation][2] suggests that there are (at least?) two\r\nremaining problems around `<RenameTestCases/>`:\r\n\r\n 1. The `<RenameTestCases/>` task ***cannot report errors***.\r\n 2. The NUnit XML `<RenameTestCases/>` generated was invalid.\r\n\r\nThe `<RenameTestCases/>` task cannot fail -- cannot return `false`\r\nfrom `RenameTestCases.Execute()` -- because it is used within an\r\n[MSBuild Task Batching][3] context, and is thus executed *separately*\r\nfor each `@(_RenameSource)` value.  If one invocation fails, then all\r\nfollowing `@(_RenameSource)` values *are not processed*.\r\n\r\nAdditionally, the \"generic error\" `<RenameTestCases/>` generated\r\ndidn't validate against the [NUnit XSD][4]:\r\n\r\n\tWARNING: At line 5 of file:…/xamarin-android/TestResult-Java.Interop-PerformanceTests-Debug.xml:cvc-complex-type.4: Attribute 'executed' must appear on element 'test-case'.\r\n\r\nThis is presumably why the `testReport` URL doesn't show these.\r\n\r\nFix both of these problems:\r\n\r\n 1. Update `<RenameTestCases/>` so that instead of reporting errors it\r\n    instead reports *warnings*, and it *always* returns `true` (unless\r\n    there's an unhandled exception elsewhere, which *should* fail).\r\n\r\n    When an \"invalid\" NUnit file is created, it also sets\r\n    `%(_RenameFailed.Invalid)`, so that the `RenameTestCases` target\r\n    can emit an error once all `@(_RenameSource)` files are processed.\r\n\r\n 2. Update `<RenameTestCases/>` so that the XML it generates will\r\n    validate.\r\n\r\n    To assist in this, `RenameTestCases.cs` now contains a `Main()`\r\n    method, which will exist if it's compiled with `APP` defined.\r\n\r\nThe \"generic error\" XML output can thus be validated, using\r\n`mono-xmltool`:\r\n\r\n\tcsc build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks/RenameTestCases.cs /out:test.exe /d:APP /r:System.Xml.Linq.dll\r\n\tmono test.exe test.xml\r\n\tcurl -o Results.xsd https://nunit.org/docs/files/Results.xsd\r\n\tMONO_XMLTOOL_ERROR_DETAILS=yes mono-xmltool  --validate Results.xsd test.xml\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/1257\r\n[1]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/1257/testReport/\r\n[2]: https://gitter.im/xamarin/xamarin-android?at=5be467157326df140ed4fe2b\r\n[3]: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching?view=vs-2017#task-batching\r\n[4]: https://nunit.org/docs/files/Results.xsd\r\n\r\nTODO: insert issues here."},{"Id":"8563732107","Type":"PullRequestEvent","CreatedAt":"2018-11-09T14:53:08","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2420","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] locate $(JdkJvmPath) only when needed\" (#2420) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2409\r\nContext: https://github.com/xamarin/xamarin-android/wiki/Build-Performance-Results\r\n\r\nWhen doing the latest performance comparison, I noticed the\r\n`<ResolveSdks/>` MSBuild task is a bit slower:\r\n\r\n    * VS 15.9\r\n     80 ms  ResolveSdks                                7 calls\r\n    * VS 16.0 p2 (master)\r\n    127 ms  ResolveSdks                                7 calls\r\n\r\nFor `$(AndroidGenerateJniMarshalMethods)` support, we needed to locate\r\na new `$(JdkJvmPath)` location.\r\n\r\nSince `<ResolveSdks/>` finds `$(JdkJvmPath)` on first build, and\r\ndesign-time builds, it is worth making sure this task doesn't get any\r\nslower. The initial design-time build happens on \"solution create\",\r\nwhich is one of the more important metrics the VS team measures.\r\n\r\nSo I split out the logic finding `$(JdkJvmPath)` and put it in a new\r\n`<ResolveJdkJvmPath/>` MSBuild task.\r\n\r\nAlso setup a `Condition`, so it only runs if:\r\n\r\n- Not a `$(DesignTimeBuild)`\r\n- `$(AndroidGenerateJniMarshalMethods)` is enabled\r\n- `$(JdkJvmPath)` is blank\r\n\r\nThis should save ~50ms on DTBs and first builds."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8568231071","Type":"PullRequestEvent","CreatedAt":"2018-11-10T19:25:02","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4328","RelatedDescription":"Merged pull request \"Bring ImageButton API additions in line with current code\" (#4328) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nFixing ImageButotn APIs to match already existing patterns\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Testing Procedure ###\r\nTest that Image, Button, ImageButton all look to still work ok. Test setting images on them and swapping out the images\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8567726723","Type":"IssuesEvent","CreatedAt":"2018-11-10T14:40:27","Actor":"Reveon","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4374","RelatedDescription":"Opened issue \"Frame is missing elevation and shadow inside ListView\" (#4374) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nFrame shadow and elevation looks different when upgrade from 3.2 to 3.3 or 3.4 pre when used inside ListView. It looks more flat and very similar to  #3532. Tested the issue on Android emulator 8.0 and also on device HTC U11 with Android 8.0\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create Xamarin.Forms project (Blank, .NET Standard, Android)\r\n2. Use Xaml:\r\n `<StackLayout Orientation=\"Vertical\">\r\n            <Frame Padding=\"1\"\r\n                   HasShadow=\"True\">\r\n                <Label Text=\"Test\" />\r\n            </Frame>\r\n            <Frame Padding=\"1\"\r\n                   HasShadow=\"True\">\r\n                <Label Text=\"Test\" />\r\n            </Frame>\r\n            <ListView HasUnevenRows=\"True\"\r\n                      ItemsSource=\"{Binding ListItems}\"\r\n                      SeparatorVisibility=\"None\">\r\n                <ListView.ItemTemplate>\r\n                    <DataTemplate>\r\n                        <ViewCell>\r\n                            <Grid Margin=\"5\">\r\n                                <Grid.RowDefinitions>\r\n                                    <RowDefinition Height=\"50\" />\r\n                                </Grid.RowDefinitions>\r\n                                <Frame Padding=\"1\"\r\n                                       HasShadow=\"True\">\r\n                                    <Label Text=\"{Binding}\" />\r\n                                </Frame>\r\n                            </Grid>\r\n                        </ViewCell>\r\n                    </DataTemplate>\r\n                </ListView.ItemTemplate>\r\n            </ListView>\r\n       </StackLayout>`\r\n\r\n### Expected Behavior\r\nFrame has visible shadow and elevation\r\n\r\n### Actual Behavior\r\nFrame looks flat and does not have a shadow when placed inside ListView\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.3.0.967583, 3.3.0.967583, both of the 3.4 pre versions\r\n- Last known good version: 3.2.0.871581\r\n- IDE: Visual Studio Enterprise 2017 15.8.9\r\n- Platform Target Frameworks:\r\n  - Android: 8.0\r\n- Nuget Packages: default\r\n\r\n### Screenshots\r\nAll fine on 3.2\r\n![obrazek](https://user-images.githubusercontent.com/29383312/48302480-d79c3e80-e4fd-11e8-8f5a-e5b576a19819.png)\r\n\r\nElevation and shadow missing inside ListView on 3.3+\r\n![obrazek](https://user-images.githubusercontent.com/29383312/48302482-dff47980-e4fd-11e8-850a-c5648f7999b2.png)\r\n\r\n"},{"Id":"8567465203","Type":"IssuesEvent","CreatedAt":"2018-11-10T11:43:03","Actor":"bojan96","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4373","RelatedDescription":"Opened issue \"OnSelectTemplate method, item argument is null\" (#4373) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description\r\nIf you set ListView ItemTemplate property to custom DataTemplateSelector, while scrolling overridden OnSelectTemplate method will be called with item argument equal to null. \r\nUnable to reproduce issue on Android.\r\n\r\n### Steps to Reproduce\r\n1.  Run UWP project\r\n2.  Scroll the ListView\r\n\r\n### Expected Behavior\r\nScrolling works as expected, assert condition is always true.\r\n### Actual Behavior\r\nAssertion fails in overridden method (OnSelectTemplate)\r\n\r\n- Version with issue: XF 3.3.0.967583\r\n- Platform Target Frameworks: \r\n  - UWP:  17134 \r\n\r\n### Reproduction Link\r\n[Project](https://1drv.ms/u/s!Aj4uJLvp0Pzqhifg-K2b1LwGaEW4)\r\n[Reproduction video](https://youtu.be/b0lxx9nowVM)\r\n"},{"Id":"8567148534","Type":"IssuesEvent","CreatedAt":"2018-11-10T07:39:56","Actor":"JanabiSoft","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4372","RelatedDescription":"Opened issue \"Add down arrow / up arrow to picker on android\" (#4372) at xamarin/Xamarin.Forms","RelatedBody":"##Summary\r\non android there is no way to differentiate between entry and picker, so please add down arrow / up arrow to picker.\r\n\r\n##API Changes\r\nUnknown\r\n\r\n##Intended Use Case\r\nto enhance the UI"},{"Id":"8567142585","Type":"IssuesEvent","CreatedAt":"2018-11-10T07:34:56","Actor":"Sasikumar3595","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4371","RelatedDescription":"Opened issue \"Performance Issue : Convert Forms View to Native Android View (Custom Control)\" (#4371) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nIn the Syncfusion SfCalendar, we are converting convert the Xamarin forms view to native Android view for providing custom view for month cell but the each of the conversion take around **0.035 sec**. We are converting 126 Xamarin forms view to Native Android view so it take more time(**around 5 - 6 sec**). We are attached the code for converting the Forms view to native view, Please provide the suggestion for this?\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run the attached sample \r\n2. Open the SfCalendar Page\r\n3.  See the reported bug\r\n\r\n### Expected Behavior\r\n\r\nOpen the SfCalendar page then suddenly the opened\r\n\r\n### Actual Behavior\r\n\r\nThe SfCalendar page opened with more time delay\r\n\r\n### Basic Information\r\n\r\n- Version with issue: All the versions\r\n- Last known good version: No\r\n- Nuget Packages: Latest SfCalendar (16.3.0.29)\r\n\r\n### Screenshots\r\n\r\nNot Applicable\r\n\r\n### Reproduction Link\r\n\r\nSample : \r\n[CalendarTest.zip](https://github.com/xamarin/Xamarin.Forms/files/2568187/CalendarTest.zip)\r\n\r\n### Code Snippet for converting Xamarin forms view to Native forms view\r\n\r\n////  This is the code snippet for converting Xamarin forms view to Native forms view\r\n\r\nvar vRenderer = Convert(view, (Xamarin.Forms.VisualElement)formsCalendar.Parent);\r\nvar viewGroup = vRenderer.View;\r\nvRenderer.Tracker.UpdateLayout();\r\nvar layoutParams = new ViewGroup.LayoutParams((int)size.Width, (int)size.Height);\r\nviewGroup.LayoutParameters = layoutParams;\r\nview.Layout(size);\r\nviewGroup.Layout(0, 0, (int)view.Width, (int)view.Height);\r\nview.Measure(double.PositiveInfinity, double.PositiveInfinity);\r\n \r\n////  This is the code snippet for converting Xamarin forms view to IVisualElementRenderer\r\n\r\ninternal static IVisualElementRenderer Convert(Xamarin.Forms.View source, Xamarin.Forms.VisualElement valid)\r\n        {\r\n            var render = (IVisualElementRenderer)source.GetValue(RendererProperty);\r\n            if (render == null)\r\n            {\r\n                source.Parent = valid;\r\n                render = Platform.CreateRenderer(source);\r\n                source.SetValue(RendererProperty, render);\r\n                var p = PlatformProperty.GetValue(valid);\r\n                PlatformProperty.SetValue(source, p);\r\n                IsPlatformEnabledProperty.SetValue(source, true);\r\n            }\r\n           return render;\r\n        }\r\n\r\n"},{"Id":"8566565000","Type":"IssuesEvent","CreatedAt":"2018-11-10T00:51:21","Actor":"Viridovics","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4370","RelatedDescription":"Opened issue \"`ListView` within `ScrollView` is not rendered fully if `ListView` contains many elements\" (#4370) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n`ListView` within `ScrollView` is not rendered fully on Andorid platform if `ListView` contains many elements. \r\nOn UWP this issue is not reproduced.  \r\nOn iOs I didn't check.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Put `ListView` in`ScrollView`\r\n2. Add many elements in `ListView`\r\n3. Scroll to bottom page\r\n\r\n### Expected Behavior\r\nAll elements is shown\r\n### Actual Behavior\r\nLast elements is not shown\r\n### Basic Information\r\n\r\n- Version with issue: 3.3 and above\r\n- Last known good version: 3.2\r\n- IDE: Visual studio 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n  - iOS:  ??\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n   - Xamarin.Forms Version=\"3.4.0.987044-pre2\"\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\nThe last element was expected to be \"39\":\r\n![image](https://user-images.githubusercontent.com/6348792/48294840-ef40dc00-e497-11e8-8973-b4be9d20cdc1.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\n[ListViewTest.zip](https://github.com/xamarin/Xamarin.Forms/files/2567935/ListViewTest.zip)\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8566536632","Type":"PullRequestEvent","CreatedAt":"2018-11-10T00:39:21","Actor":"jamesmontemagno","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4369","RelatedDescription":"Opened pull request \"WIP - CheckBox & CheckBoxCell Implementation\" (#4369) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nStart Implementation of CheckBox and CheckBoxCell.\r\n\r\nImplementations:\r\n* [x] Android\r\n* [ ] iOS\r\n* [ ] UWP\r\n\r\nProperties:\r\n* [x] IsChecked\r\n* [ ] CheckedColor \r\n\r\n### Issues Resolved ### \r\n- fixes #1728\r\n\r\n### API Changes ###\r\nAdded:\r\n - CheckBox\r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n![image](https://user-images.githubusercontent.com/1676321/48295124-cee43380-e43d-11e8-8d55-aa72a77135bd.png)\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8566443505","Type":"PullRequestEvent","CreatedAt":"2018-11-10T00:03:26","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5119","RelatedDescription":"Opened pull request \"[QuickLook] Add [ThreadSafe] to `QLThumbnailReply`\" (#5119) at xamarin/xamarin-macios","RelatedBody":"`QLThumbnailReply` members are called from a background thread\r\nwithin `QLThumbnailProvider` extension so our check on\r\n`UIApplication.EnsureUIThread ()` is not needed.\r\n\r\nFixes xamarin/xamarin-macios#5117"},{"Id":"8566023541","Type":"PullRequestEvent","CreatedAt":"2018-11-09T22:01:16","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5101","RelatedDescription":"Merged pull request \"[mac] Remove unnecessary PostSnippet and backing fields\" (#5101) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/3543"},{"Id":"8565994374","Type":"PullRequestEvent","CreatedAt":"2018-11-09T21:54:31","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5115","RelatedDescription":"Merged pull request \"Bump to mono:2018-06\" (#5115) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\r\n\r\n* mono/mono@eee1d634e8b [ios] remove DISABLE_POLICY_EVIDENCE (#11580)\r\n\r\nDiff: https://github.com/mono/mono/compare/4d7b7ab37517a13eee8b966cec9c4308ad772c0a...eee1d634e8b256a6e51bf8a8cf2feac4015fb1bc\r\n\r\nNeeded for green mscorlib tests interp only (mixed mode still has some failures):\r\n<img width=\"1169\" alt=\"screenshot 2018-11-09 at 17 10 48\" src=\"https://user-images.githubusercontent.com/75403/48273953-854a1780-e442-11e8-85ad-559a9c809ef3.png\">\r\n"},{"Id":"8565869433","Type":"PullRequestEvent","CreatedAt":"2018-11-09T21:26:11","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5118","RelatedDescription":"Opened pull request \"[msbuild] Pass ProjectGuid and ProjectTypeGuids to Archive task\" (#5118) at xamarin/xamarin-macios","RelatedBody":"This is part of https://devdiv.visualstudio.com/DevDiv/_workitems/edit/705977"},{"Id":"8565438554","Type":"IssuesEvent","CreatedAt":"2018-11-09T19:53:09","Actor":"praeclarum","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5117","RelatedDescription":"Opened issue \"QLThumbnailReply.CreateReply incorrectly calls EnsureUIThread\" (#5117) at xamarin/xamarin-macios","RelatedBody":"```\r\npublic unsafe static QLThumbnailReply CreateReply (CGSize contextSize, Func<CGContext, bool> drawingBlock)\r\n```\r\nCalls `UIApplication.EnsureUIThread ()` but it should not.\r\n\r\nThis method gets called by `QLThumbnailProvider.ProvideThumbnail` which runs on a background thread.\r\n\r\nIf you look at Xcode's template for document apps, you'll see that they don't do any UI thread synchronization.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create an iOS thumbnail extension\r\n2. Note the crash when you call `CreateReply`\r\n\r\n### Expected Behavior\r\n\r\nCan call the method on the background thread.\r\n\r\n### Actual Behavior\r\n\r\nCrash\r\n\r\n```\r\ndefault\t11:45:37.556627 -0800\tCircuitThumbs\t\r\nUnhandled Exception:\r\nUIKit.UIKitThreadAccessException: UIKit Consistency error: you are calling a UIKit method that can only be invoked from the UI thread.\r\ndefault\t11:45:37.556630 -0800\tCircuitThumbs\t\r\nUnhandled Exception:\r\nUIKit.UIKitThreadAccessException: UIKit Consistency error: you are calling a UIKit method that can only be invoked from the UI thread.\r\ndefault\t11:45:37.556852 -0800\tCircuitThumbs\tUnhandled managed exception:\r\nUIKit Consistency error: you are calling a UIKit method that can only be invoked from the UI thread. (UIKit.UIKitThreadAccessException)\r\n(null)\r\ndefault\t11:45:37.556857 -0800\tCircuitThumbs\tUnhandled managed exception:\r\nUIKit Consistency error: you are calling a UIKit method that can only be invoked from the UI thread. (UIKit.UIKitThreadAccessException)\r\n(null)\r\ndefault\t11:45:37.556975 -0800\tCircuitThumbs\tcritical: Stacktrace:\r\ndefault\t11:45:37.557052 -0800\tCircuitThumbs\tcritical: \r\nNative stacktrace:\r\ndefault\t11:45:37.558009 -0800\tCircuitThumbs\tcritical: \t0   Mono                                0x000000010142f944 mono_handle_native_crash + 244\r\ndefault\t11:45:37.558111 -0800\tCircuitThumbs\tcritical: \t1   libsystem_platform.dylib            0x0000000110ac9b3d _sigtramp + 29\r\ndefault\t11:45:37.558207 -0800\tCircuitThumbs\tcritical: \t2   ???                                 0x0000000000000000 0x0 + 0\r\ndefault\t11:45:37.558308 -0800\tCircuitThumbs\tcritical: \t3   libsystem_c.dylib                   0x000000011084cc45 abort + 127\r\ndefault\t11:45:37.558478 -0800\tCircuitThumbs\tcritical: \t4   CircuitThumbs                       0x00000001010904ff xamarin_unhandled_exception_handler + 47\r\ndefault\t11:45:37.558571 -0800\tCircuitThumbs\tcritical: \t5   Mono                                0x000000010150c3fe mono_invoke_unhandled_exception_hook + 158\r\ndefault\t11:45:37.558687 -0800\tCircuitThumbs\tcritical: \t6   Mono                                0x000000010142f2ec mono_handle_exception_internal + 6140\r\ndefault\t11:45:37.558764 -0800\tCircuitThumbs\tcritical: \t7   Mono                                0x000000010142dae9 mono_handle_exception + 25\r\ndefault\t11:45:37.558844 -0800\tCircuitThumbs\tcritical: \t8   Mono                                0x0000000101495663 mono_amd64_throw_exception + 131\r\ndefault\t11:45:37.558921 -0800\tCircuitThumbs\tcritical: \t9   ???                                 0x000000012e6a05a7 0x0 + 5073667495\r\ndefault\t11:45:37.558989 -0800\tCircuitThumbs\tcritical: \t10  CircuitThumbs                       0x0000000101099dff xamarin_invoke_trampoline + 8175\r\ndefault\t11:45:37.559068 -0800\tCircuitThumbs\tcritical: \t11  CircuitThumbs                       0x00000001010a07fd xamarin_arch_trampoline + 189\r\ndefault\t11:45:37.559141 -0800\tCircuitThumbs\tcritical: \t12  CircuitThumbs                       0x00000001010a1c31 xamarin_x86_64_common_trampoline + 110\r\ndefault\t11:45:37.559207 -0800\tCircuitThumbs\tcritical: \t13  QuickLookSupport                    0x0000000125d2ddee __137-[QLThumbnailServiceContext generateThumbnailOfSize:minimumSize:scale:badgeType:withFileURLHandler:ioSurfaceGenerator:completionHandler:]_block_invoke + 371\r\ndefault\t11:45:37.559287 -0800\tCircuitThumbs\tcritical: \t14  libdispatch.dylib                   0x00000001106ef4e1 _dispatch_call_block_and_release + 12\r\ndefault\t11:45:37.559361 -0800\tCircuitThumbs\tcritical: \t15  libdispatch.dylib                   0x00000001106f054b _dispatch_client_callout + 8\r\ndefault\t11:45:37.559440 -0800\tCircuitThumbs\tcritical: \t16  libdispatch.dylib                   0x00000001106f2f70 _dispatch_continuation_pop + 453\r\ndefault\t11:45:37.559509 -0800\tCircuitThumbs\tcritical: \t17  libdispatch.dylib                   0x00000001106f25dd _dispatch_async_redirect_invoke + 827\r\ndefault\t11:45:37.559579 -0800\tCircuitThumbs\tcritical: \t18  libdispatch.dylib                   0x00000001106ff491 _dispatch_root_queue_drain + 355\r\ndefault\t11:45:37.559645 -0800\tCircuitThumbs\tcritical: \t19  libdispatch.dylib                   0x00000001106ffcfb _dispatch_worker_thread2 + 97\r\ndefault\t11:45:37.559718 -0800\tCircuitThumbs\tcritical: \t20  libsystem_pthread.dylib             0x0000000110ad96ee _pthread_wqthread + 619\r\ndefault\t11:45:37.559784 -0800\tCircuitThumbs\tcritical: \t21  libsystem_pthread.dylib             0x0000000110ad9415 start_wqthread + 13\r\n```\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac (Preview) ===\r\n\r\nVersion 7.7 Preview (7.7 build 1738)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000208\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.208 (2018-06/b2915194221) (64-bit)\r\n\tPackage version: 516000208\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.9 (Visual Studio Enterprise)\r\nHash: 62840955\r\nBranch: \r\nBuild date: 2018-10-09 19:53:55-0400\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.9 (Visual Studio Enterprise)\r\nHash: 62840955\r\nBranch: d15-9\r\nBuild date: 2018-10-09 19:53:55-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: dd6b1cc3\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001738\r\nGit revision: 7dc7716c1cf2bdfb1baafd728a09ef805643c15d\r\nBuild date: 2018-10-23 14:31:07+00\r\nBuild branch: release-7.7\r\nXamarin extensions: c114276813ea8f259a34bc54b015d7bf711d402b\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.0\r\nDarwin 18.0.0 Darwin Kernel Version 18.0.0\r\n    Wed Aug 22 20:13:40 PDT 2018\r\n    root:xnu-4903.201.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.0.4\r\n\r\n```\r\n\r\n### Example Project (If Possible)\r\n\r\n[CircuitThumbs.zip](https://github.com/xamarin/xamarin-macios/files/2567317/CircuitThumbs.zip)\r\n\r\n"},{"Id":"8565364708","Type":"IssuesEvent","CreatedAt":"2018-11-09T19:38:50","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4110","RelatedDescription":"Closed issue \"msbuild-mac tests should be running with msbuild in addition to xbuild\" (#4110) at xamarin/xamarin-macios","RelatedBody":"Initial bug: https://bugzilla.xamarin.com/show_bug.cgi?id=53164 (moving out of bugzilla due to future read-only mode).\r\n\r\nThis is a tracking bug for updating the tests to support msbuild.\r\n\r\nThere are at least two tests that are disabled for now until this is fixed.\r\n\r\nThey can not be enabled yet, so we don't have the infrastructure to build msbuild tests without using the global install, which does not work on bots."},{"Id":"8565363893","Type":"PullRequestEvent","CreatedAt":"2018-11-09T19:38:41","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5113","RelatedDescription":"Merged pull request \"[mac] Enable various msbuild only tests that were disabled\" (#5113) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/4110"},{"Id":"8564525719","Type":"PullRequestEvent","CreatedAt":"2018-11-09T16:58:42","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5116","RelatedDescription":"Opened pull request \"[mmp] A few framework support bug fixes\" (#5116) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/3973\r\n- https://github.com/xamarin/xamarin-macios/issues/4066"},{"Id":"8564239163","Type":"PullRequestEvent","CreatedAt":"2018-11-09T16:12:11","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5115","RelatedDescription":"Opened pull request \"Bump to mono:2018-06\" (#5115) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\r\n\r\n* mono/mono@eee1d634e8b [ios] remove DISABLE_POLICY_EVIDENCE (#11580)\r\n\r\nDiff: https://github.com/mono/mono/compare/4d7b7ab37517a13eee8b966cec9c4308ad772c0a...eee1d634e8b256a6e51bf8a8cf2feac4015fb1bc\r\n\r\nNeeded for green mscorlib tests interp only (mixed mode still has some failures):\r\n<img width=\"1169\" alt=\"screenshot 2018-11-09 at 17 10 48\" src=\"https://user-images.githubusercontent.com/75403/48273953-854a1780-e442-11e8-85ad-559a9c809ef3.png\">\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":22,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":28,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":18,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":27,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":36,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":31,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":201,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":45,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":125,"FavoriteCount":80,"RawContent":null}]}},"RunOn":"2018-11-11T05:30:50.8884595Z","RunDurationInMilliseconds":4223}