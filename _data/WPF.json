{"Data":{"GitHub":{"Issues":[{"Id":"478208804","IsPullRequest":false,"CreatedAt":"2019-08-08T01:37:59","Actor":"vatsan-madhavan","Number":"1567","RawContent":null,"Title":"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF","State":"open","Body":"This issue tracks WPF's portion of the work. \r\n\r\n-- \r\n\r\n@etbyrd commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438)\r\n\r\nThe Project System needs a way to know the correct SupportedTargetFrameworks for WinForms and WPF projects so we can display the correct TFM's in the property pages. \r\n\r\nIs it possible that this can be done on the SDK side?\r\n\r\nhttps://github.com/dotnet/project-system/issues/5010\r\n\r\ncc @nguerrera \r\n\r\n\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513017079)\r\n\r\ncc @vatsan-madhavan @rladuca\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513017129)\r\n\r\ncc @dsplaisted \r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513018706)\r\n\r\nToday we have a static list of supported TFMs here:\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedTargetFrameworks.props\r\n\r\nWhat I'm thinking is that the WindowsDesktop SDK could override this somehow to remove the target frameworks that it doesn't support.\r\n\r\nSimplest form of that would be to do some `Removes` but then I think we want no versions of .NET Standard to be supported, and then we'd have a maintenance problem when say .NETStandard 2.2 came out and wasn't yet removed. \r\n\r\nAnother way would be for WindowsDesktop SDK to remove all and have its own fixed allow-list. But then it is in the business of taking an update for every version.\r\n\r\nFinally, we could make the list above dynamic based on whether the WindowsDesktop SDK has set certain props.\r\n\r\nWhat do you all think would be best?\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513019026)\r\n\r\nI don't understand the request for the SDK. \r\n\r\nWe already have logic for handling  TFM < 3.0 && TargetFrameworkIdentifier==.NETCoreApp. What specifically is being requested here? \r\n\r\nSee [_WindowsDesktopFrameworkRequiresVersion30](https://github.com/dotnet/wpf/blob/580a4283fffd4b0523ecee02cb22997122d6708f/packaging/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.targets#L58) - currently there is a warning shown when someone tries to use WindowsDesktop SDK and sets TFM < netcoreapp3.0 \r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513019664)\r\n\r\n> Today we have a static list of supported TFMs here:\r\n> https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedTargetFrameworks.props\r\n> Simplest form of that would be to do some `Removes` but then I think we want no versions of .NET Standard to be supported, and then we'd have a maintenance problem when say .NETStandard 2.2 came out and wasn't yet removed.\r\n> \r\n\r\nSpoke too soon.. thanks for the context. \r\n\r\n\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513019718)\r\n\r\nThe request is that the list of SupportedTargetFramework: https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedTargetFrameworks.props\r\n\r\nnot include target frameworks that aren't supported by windows desktop projects. VS uses these items to populate a retargeting drop-down in property pages. \r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513023924)\r\n\r\n`Remove`-ing these is easy, and doesn't pose maintainability problems. \r\n\r\n```xml\r\n<SupportedTargetFramework Include=\".NETCoreApp,Version=v1.0\" DisplayName=\".NET Core 1.0\" />\r\n<SupportedTargetFramework Include=\".NETCoreApp,Version=v1.1\" DisplayName=\".NET Core 1.1\" />\r\n<SupportedTargetFramework Include=\".NETCoreApp,Version=v2.0\" DisplayName=\".NET Core 2.0\" />\r\n<SupportedTargetFramework Include=\".NETCoreApp,Version=v2.1\" DisplayName=\".NET Core 2.1\" />\r\n<SupportedTargetFramework Include=\".NETCoreApp,Version=v2.2\" DisplayName=\".NET Core 2.2\" />\r\n```\r\n\r\nI would expect 3.0+ `.NETCoreApp` TFM's to be supported. \r\n\r\nIf we don't want any version of `.NETStandard` to be supported, is there a way we can `Remove` them all without having to run a `Target`? That would probably be the easiest thing to do... For e.g., if we could coordinate a change with [dotnet/sdk](https://github.com/dotnet/sdk) and have it define `@(_NetStandardSupportedTargets)` in `Microsoft.NET.SupportedTargetFrameworks.props`, we could probably use that and easily eliminate .NET Standard TFM's. \r\n\r\nThoughts? \r\n\r\n\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513023943)\r\n\r\nHow come this list doesn't include `.NETFramework` items? Is that because SDK-style projects \"work with, but don't support\" .NET Framework? \r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513034195)\r\n\r\nGood question about .NET Framework. I suppose that is why. @davkean?\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513036765)\r\n\r\nI think I like where you were going we could have this:\r\n\r\n``` xml\r\n<SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v1.0\" DisplayName=\".NET Core 1.0\" />\r\n<SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v1.1\" DisplayName=\".NET Core 1.1\" />\r\n<SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.0\" DisplayName=\".NET Core 2.0\" />\r\n<!-- etc. -->\r\n\r\n<SupportedNETStandardTargetFramework Include=\".NETStandard,Version=1.0\" DisplayName=\".NET Standard 1.0\" />\r\n<! -- etc. -->\r\n\r\n<SupportedTargetFramework Include=\"@(SupportedNETCoreTargetFramework);@(SupportedNETStandardTargetFramework)\" />\r\n```\r\nAnother idea would be to set the metadata with the TargetFrameworkIdentifier and Version separated. I think this would let you do the removes with conditions that match all .NET Standard, though I have to check what is possible in evaluation here. We can't use a target for any of this.\r\n\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513039964)\r\n\r\nI don't think metadata will work - though I wish that it did. \r\n\r\n```xml\r\n   <!-- Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedTargetFrameworks.props --> \r\n\r\n    <!-- .NET Standard -->\r\n    <ItemGroup>\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.0\" DisplayName=\".NET Standard 1.0\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.1\" DisplayName=\".NET Standard 1.1\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.2\" DisplayName=\".NET Standard 1.2\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.3\" DisplayName=\".NET Standard 1.3\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.4\" DisplayName=\".NET Standard 1.4\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.5\" DisplayName=\".NET Standard 1.5\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v1.6\" DisplayName=\".NET Standard 1.6\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v2.0\" DisplayName=\".NET Standard 2.0\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n        <SupportedTargetFramework Include=\".NETStandard,Version=v2.1\" DisplayName=\".NET Standard 2.1\" TargetFrameworkIdentifier=\".NETStandard\" />\r\n    </ItemGroup>\r\n```\r\n\r\n```xml\r\n<!-- WindowsDesktop SDK props -->\r\n  <ItemGroup>\r\n    <SupportedTargetFramework Remove=\"@(SupportedTargetFramework0)\" Condition=\"'%(TargetFrameworkIdentifier)'=='.NETStandard'\" />\r\n  </ItemGroup>\r\n``` \r\n\r\n\r\n```\r\nerror MSB4191: The reference to custom metadata \"TargetFrameworkIdentifier\" at position 1 is not allowed in this condition \"'%(SupportedTargetFramework.TargetFrameworkIdentifier)'=='.NETStandard'\"\r\n```\r\n\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513040520)\r\n\r\nWe should probably do this, IMO, like you described above: \r\n\r\n**Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedTargetFrameworks.props**\r\n```xml\r\n    <!-- .NET Core -->\r\n    <ItemGroup>\r\n        <SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v1.0\" DisplayName=\".NET Core 1.0\" />\r\n        <SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v1.1\" DisplayName=\".NET Core 1.1\" />\r\n        <SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.0\" DisplayName=\".NET Core 2.0\" />\r\n        <SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.1\" DisplayName=\".NET Core 2.1\" />\r\n        <SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.2\" DisplayName=\".NET Core 2.2\" />\r\n        <SupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v3.0\" DisplayName=\".NET Core 3.0\" />\r\n    </ItemGroup>\r\n\r\n    <!-- .NET Standard -->\r\n    <ItemGroup>\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.0\" DisplayName=\".NET Standard 1.0\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.1\" DisplayName=\".NET Standard 1.1\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.2\" DisplayName=\".NET Standard 1.2\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.3\" DisplayName=\".NET Standard 1.3\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.4\" DisplayName=\".NET Standard 1.4\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.5\" DisplayName=\".NET Standard 1.5\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v1.6\" DisplayName=\".NET Standard 1.6\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v2.0\" DisplayName=\".NET Standard 2.0\" />\r\n        <SupportedNETtandardTargetFramework Include=\".NETStandard,Version=v2.1\" DisplayName=\".NET Standard 2.1\" />\r\n    </ItemGroup>\r\n\r\n\r\n    <ItemGroup>\r\n        <SupportedTargetFramework Include=\"@(SupportedNETCoreAppTargetFramework);@(SupportedNETtandardTargetFramework)\" />\r\n    </ItemGroup>\r\n```\r\n\r\n**Microsoft.NET.Sdk.WindowsDesktop.props**\r\n\r\n```xml\r\n  <ItemGroup>\r\n\r\n    <SupportedNETCoreAppTargetFramework Remove=\".NETCoreApp,Version=v1.0\" />\r\n    <SupportedNETCoreAppTargetFramework Remove=\".NETCoreApp,Version=v1.1\" />\r\n    <SupportedNETCoreAppTargetFramework Remove=\".NETCoreApp,Version=v2.0\" />\r\n    <SupportedNETCoreAppTargetFramework Remove=\".NETCoreApp,Version=v2.1\" />\r\n    <SupportedNETCoreAppTargetFramework Remove=\".NETCoreApp,Version=v2.2\" />\r\n    \r\n    <SupportedTargetFramework0 Remove=\"@(SupportedNETtandardTargetFramework)\" />\r\n  </ItemGroup>\r\n```\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513045147)\r\n\r\nThat works for me. \r\n\r\n(I assume the 0 in SupportedTargetFramework0 is a typo.)\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513045352)\r\n\r\n> That works for me.\r\n> \r\n> (I assume the 0 in SupportedTargetFramework0 is a typo.)\r\n\r\nyeah, typo ... \r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513045766)\r\n\r\n@davkean Any concerns here? Shall we go ahead?\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513047113)\r\n\r\nDo we need a separate issue to puzzle out whether to add .`NETFramework` to `SupportedTargetFramework` items in _Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedTargetFrameworks.props_ ? \r\n\r\nUnless we have documented it as unsupported, I'm starting to think that it ought to be supported. \r\nThe very first example at [How to: Use MSBuild project SDKs](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk?view=vs-2019) shows how to target .NET 4.6 using SDK style project. [Additions to the csproj format for .NET Core](https://docs.microsoft.com/en-us/dotnet/core/tools/csproj) also describes how to leverage it for .NET Framework. These seem to suggest strongly that the SDK style projects are both supported and encouraged for use by .NET Framework projects.\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513047961)\r\n\r\nI assume the project system doesn't use this data for .NET Framework and instead looks in a more classical place for versions of .NET Framework to offer. I'm fine adding it, but if it's not going to be used, it doesn't seem to be high priority.\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513048240)\r\n\r\n> I assume the project system doesn't use this data for .NET Framework and instead looks in a more classical place for versions of .NET Framework to offer.\r\n\r\nIf the project system doesn't use it, then I agree that it doesn't matter. We should probably add a comment that .NET Framework is missing because the project system doesn't use it... \r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513048398)\r\n\r\n.NET Framework is supported by us. In fact, ASP.NET Core 1.x, 2.x projects could even target .NET Framework from File -> New Project.\r\n\r\n---\r\n\r\n@nguerrera commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513048621)\r\n\r\nIt already shows the full list:\r\n\r\n![image](https://user-images.githubusercontent.com/75470/61501754-94944400-a985-11e9-8577-93be260f66bf.png)\r\n\r\nIt is quite possible that the oldest ones in that list don't work so maybe we should get them out of there?\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Thu Jul 18 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-513048802)\r\n\r\n> It is quite possible that the oldest ones in that list don't work so maybe we should get them out of there?\r\n\r\nIf the project system used SupportedTargetFrameworks, this would be so easy ;-)\r\n\r\n\r\n---\r\n\r\n@davkean commented on [Wed Jul 24 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-514814644)\r\n\r\nWe can use it for desktop, assuming you won't return < .NET Framework 3.0 for WPF/~WInForms~? It would be great if you return all of the TFMs from all frameworks so that we can switch between .NET Framework -> .NET Core as we've had quite a few bugs on this.\r\n\r\n---\r\n\r\n@nguerrera commented on [Wed Jul 24 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-514815513)\r\n\r\n@davkean OK, we can add supported .NET Framework TFMs with the same pattern and WindowsDesktop can remove accordingly there too.\r\n\r\nSo you're good with this plan?\r\n\r\n---\r\n\r\n@davkean commented on [Wed Jul 24 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-514815841)\r\n\r\nYep, does this overlap with the existing infrastructure we already use to retrieve the frameworks?\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Wed Jul 24 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-514816261)\r\n\r\n> We can use it for desktop, assuming you won't return < .NET Framework 3.0 for WPF/~WInForms~? \r\n\r\nWhy not WinForms? \r\n\r\n---\r\n\r\n@davkean commented on [Wed Jul 24 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-514816351)\r\n\r\nWinForms is supported on .NET Framework 2.0.\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Wed Jul 24 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-514816889)\r\n\r\nAh, got it. We have the right rules in place for WinForms for that in WindowsDesktop SDK. \r\n\r\n@nguerrera We should see if we can do this correctly for WindowsDesktop.WindowsForms (netfx 2.0+) vs. WindowsDesktop.WPF vs. WindowsDesktop (same as WPF). \r\n\r\n---\r\n\r\n@davkean commented on [Mon Aug 05 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-518476923)\r\n\r\nWhat's the state of this? Is this ready to be consumed?\r\n\r\n---\r\n\r\n@nguerrera commented on [Mon Aug 05 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-518487377)\r\n\r\nNot yet. We have approval to go ahead. I'm a bit slammed on more critical issues. @livarcocc can you possibly see if someone else can pick this up?\r\n\r\n---\r\n\r\n@peterhuene commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519235183)\r\n\r\nI'll go ahead with implementing this in the SDK.\r\n\r\n---\r\n\r\n@peterhuene commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519239135)\r\n\r\nI assume WindowsDesktop would want this in their props (for completeness):\r\n\r\n```xml\r\n<ItemGroup>\r\n    <_UnsupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v1.0\" />\r\n    <_UnsupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v1.1\" />\r\n    <_UnsupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.0\" />\r\n    <_UnsupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.1\" />\r\n    <_UnsupportedNETCoreAppTargetFramework Include=\".NETCoreApp,Version=v2.2\" />\r\n\r\n    <_UnsupportedNETStandardTargetFramework Include=\"@(SupportedNETStandardTargetFramework)\" />\r\n    \r\n    <SupportedNETCoreAppTargetFramework Remove=\"@(_UnsupportedNETCoreAppTargetFramework)\" />\r\n    <SupportedNETStandardTargetFramework Remove=\"@(_UnsupportedNETStandardTargetFramework)\" />\r\n    <SupportedTargetFramework Remove=\"@(_UnsupportedNETCoreAppTargetFramework);@(_UnsupportedNETStandardTargetFramework)\" />\r\n</ItemGroup>\r\n```\r\n\r\n---\r\n\r\n@peterhuene commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519271370)\r\n\r\nI've created PR #3516 for the SDK side of the changes.\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519289675)\r\n\r\nNice! \r\n\r\nWe have to obviously wait until an SDK containing this change flows into dotnet/wpf - which can be a few hours or a few days... \r\n\r\n---\r\n\r\n@peterhuene commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519290952)\r\n\r\nI've verified my suggestion for the Windows Desktop props above with VS (16.3 preview).  With both the SDK change and that one, Visual Studio only shows netcoreapp3.0 in the drop down.\r\n\r\n---\r\n\r\n@nguerrera commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519292370)\r\n\r\nThere was some discussion of adding supported .NET Framework to this above. But given that VS doesn't use that today, I think it is fine to do later. Should we open a separate issue to track that?\r\n\r\n---\r\n\r\n@peterhuene commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519292894)\r\n\r\nAh I missed that part.  I can add that to this change now rather than deferring that work.\r\n\r\nDo we have a list of the expected supported .NET Framework TFs?\r\n\r\n---\r\n\r\n@nguerrera commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519293280)\r\n\r\nI don't know. I'm pretty sure older ones and client platform don't work. @dsplaisted Do we have a list?\r\n\r\n---\r\n\r\n@nguerrera commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519293460)\r\n\r\nI'm guessing we should use the same set as what was used for the full framework targeting packs as nupkgs? Where is that?\r\n\r\n---\r\n\r\n@vatsan-madhavan commented on [Wed Aug 07 2019](https://github.com/dotnet/sdk/issues/3438#issuecomment-519318217)\r\n\r\nFor WPF and WinForms, the .NET Framework support list can be found indirectly at https://github.com/dotnet/wpf/blob/8a234021a4e697f7e4999c282bde42d2473131f0/packaging/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.props#L77. \r\n\r\n\r\nIn short,\r\n\r\n- **WPF**: .NET Framework 3.0+\r\n- **WinForms**: .NET Framework 3.0 + \r\n\r\nThe exact reference set varies from net30, net35 to net40, net45 etc. , but they are all supported all the way to net48. \r\n\r\n- I can build a WPF and WinForms app in Visual Studio for any of the following targets:\r\n  - net30, net35, net40, net45, net46, net472, net48 \r\n  - **edit**: the ones I haven't listed here in-between these values would also surely work. \r\n- I can build the same projects using `dotnet` for TFM net40+\r\n  - `dotnet` has trouble finding ref-assemblies for net30, net35. If they are supplied carefully in the projects, they build as well. (I tried this a while back but did not check again now). I think it suffers from https://github.com/microsoft/msbuild/issues/1333\r\n\r\nThere are corner cases that need some special handling. For e.g., if you try to use `SplashScreen` with `net30`, you'll get an build-error (unsupported), but those are small issues. \r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1567","RelatedDescription":"Open issue \"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF\" (#1567)"},{"Id":"478207888","IsPullRequest":false,"CreatedAt":"2019-08-08T01:33:17","Actor":"vatsan-madhavan","Number":"1566","RawContent":null,"Title":"Adopt YAML stages based publishing and validation for DncEng\\dotnet-wpf-test","State":"open","Body":"See https://github.com/dotnet/wpf/issues/1564 for details. You can base the work on https://github.com/dotnet/wpf/pull/1565. \r\n\r\nThe Arcade team has guidance available for the adoption of publishing via YAML Stages here: https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md\r\n\r\nThey will be tracking the status of repos adopting these templates here: https://github.com/dotnet/arcade/blob/master/Documentation/YamlStagesRepoStatus.md.\r\n\r\n/cc @rladuca, @ojhad \r\n","Url":"https://github.com/dotnet/wpf/issues/1566","RelatedDescription":"Open issue \"Adopt YAML stages based publishing and validation for DncEng\\dotnet-wpf-test\" (#1566)"},{"Id":"477649386","IsPullRequest":true,"CreatedAt":"2019-08-08T00:42:32","Actor":"SamBent","Number":"1557","RawContent":null,"Title":"WPF controls in a RowVirtualized DataGrid control lose their value after scrolling","State":"closed","Body":"Addresses #1541 \r\n\r\nSelector should not change its selection properties, when reacting to being disconnected.","Url":"https://github.com/dotnet/wpf/pull/1557","RelatedDescription":"Closed or merged PR \"WPF controls in a RowVirtualized DataGrid control lose their value after scrolling\" (#1557)"},{"Id":"478161881","IsPullRequest":true,"CreatedAt":"2019-08-07T23:47:15","Actor":"vatsan-madhavan","Number":"1565","RawContent":null,"Title":"Adopt YAML stages based publishing and validation in dotnet/wpf","State":"closed","Body":"Addresses https://github.com/dotnet/wpf/issues/1564 for [dotnet/wpf](https://github.com/dotnet/wpf). \r\n\r\nWe have a couple of successful builds from this branch: \r\n\r\n- https://dev.azure.com/dnceng/internal/_build/results?buildId=299330\r\n- https://dev.azure.com/dnceng/internal/_build/results?buildId=298971 ","Url":"https://github.com/dotnet/wpf/pull/1565","RelatedDescription":"Closed or merged PR \"Adopt YAML stages based publishing and validation in dotnet/wpf\" (#1565)"},{"Id":"478109338","IsPullRequest":true,"CreatedAt":"2019-08-07T23:44:41","Actor":"vatsan-madhavan","Number":"1563","RawContent":null,"Title":"Adding PresentationUI to RefAssembly list in build-props.","State":"closed","Body":"Helps with addressing #1423 - adding back PresentationUI ref-assembly.\r\n\r\nAdding PUI to RefAssembly list in props.","Url":"https://github.com/dotnet/wpf/pull/1563","RelatedDescription":"Closed or merged PR \"Adding PresentationUI to RefAssembly list in build-props.\" (#1563)"},{"Id":"477647086","IsPullRequest":true,"CreatedAt":"2019-08-07T22:23:14","Actor":"rladuca","Number":"1555","RawContent":null,"Title":"Fix double free in calls to CreateTTFDelta(Ex).","State":"closed","Body":"Addresses #1554 \r\n\r\nDuring execution of CreateTTFDeltaEx, the call-chain may re-allocate and move *ppuchDestBuffer.  If this happens and an error condition occurs, we will return the buffer that realloc de-allocated.  Callers may then double-free *ppuchDestBuffer.\r\n\r\nTo fix this, set *ppuchDestBuffer to NULL after it is stored in OutputBufferInfo.puchBuffer.  After this change, the non-error return will set *ppuchDestBuffer to OutputBufferInfo.puchBuffer as always, but the error case will de-allocate OutputBufferInfo.puchBuffer (as was intended) and return NULL in *ppuchDestBuffer.  Callers then cannot double-free the buffer.","Url":"https://github.com/dotnet/wpf/pull/1555","RelatedDescription":"Closed or merged PR \"Fix double free in calls to CreateTTFDelta(Ex).\" (#1555)"},{"Id":"478161184","IsPullRequest":false,"CreatedAt":"2019-08-07T22:08:56","Actor":"vatsan-madhavan","Number":"1564","RawContent":null,"Title":"Adopt YAML Stages based Publishing and Validation ","State":"open","Body":"The Arcade team has guidance available for the adoption of publishing via YAML Stages here: https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md\r\n\r\nThey will be tracking the status of repos adopting these templates here: https://github.com/dotnet/arcade/blob/master/Documentation/YamlStagesRepoStatus.md. \r\n\r\nThe target completion date for this work is 8/13. \r\n","Url":"https://github.com/dotnet/wpf/issues/1564","RelatedDescription":"Open issue \"Adopt YAML Stages based Publishing and Validation \" (#1564)"},{"Id":"477633888","IsPullRequest":true,"CreatedAt":"2019-08-07T20:22:03","Actor":"SamBent","Number":"1553","RawContent":null,"Title":"Dev/sambent/speller1540","State":"closed","Body":"Addresses #1540 \r\n\r\nEnsure that each spell-checking task makes progress before stopping for a timeout.","Url":"https://github.com/dotnet/wpf/pull/1553","RelatedDescription":"Closed or merged PR \"Dev/sambent/speller1540\" (#1553)"},{"Id":"478083712","IsPullRequest":true,"CreatedAt":"2019-08-07T19:21:26","Actor":"dotnet-maestro[bot]","Number":"1562","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190807.2\r\n- **Date Produced**: 8/7/2019 6:25 PM\r\n- **Commit**: 2db14f6fd1ff9b9bba3c3b6436987e02193a75e7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19407.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview9-19407-06 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview8.19405.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview8.19379.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19379.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19379.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1562","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1562)"},{"Id":"477919499","IsPullRequest":true,"CreatedAt":"2019-08-07T13:45:28","Actor":"dotnet-maestro[bot]","Number":"1561","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190806.11\r\n- **Date Produced**: 8/7/2019 3:23 AM\r\n- **Commit**: a0f406bc6471b318d3be8b5b7ea1b7503fea33be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19406.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1561","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1561)"},{"Id":"477917354","IsPullRequest":true,"CreatedAt":"2019-08-07T13:31:07","Actor":"dotnet-maestro[bot]","Number":"1560","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190806.11\r\n- **Date Produced**: 8/7/2019 3:23 AM\r\n- **Commit**: a0f406bc6471b318d3be8b5b7ea1b7503fea33be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19406.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1560","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1560)"},{"Id":"477888643","IsPullRequest":true,"CreatedAt":"2019-08-07T13:17:22","Actor":"dotnet-maestro[bot]","Number":"1559","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1559","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1559)"},{"Id":"477888393","IsPullRequest":true,"CreatedAt":"2019-08-07T13:17:07","Actor":"dotnet-maestro[bot]","Number":"1558","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190806.7\r\n- **Date Produced**: 8/7/2019 12:08 AM\r\n- **Commit**: c155e609f88491128e1a66d09f413062f3344d4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19406.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19406.7\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1558","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1558)"},{"Id":"477647966","IsPullRequest":false,"CreatedAt":"2019-08-07T00:18:33","Actor":"nguerrera","Number":"1556","RawContent":null,"Title":"Restore failure on creation of wpflib template","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013640\r\n Commit:    1d6c76dc2b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013640\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28380-08\r\n  Commit:  c855ac7187\r\n\r\n.NET Core SDKs installed:\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013437 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013640 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19374.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19381.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28373-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28380-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28373-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28380-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n* Windows version: (`winver`)\r\n\r\nWindows 10, 1903 RTM\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\nN/A\r\n \r\n **Problem description:**\r\n\r\nGet an error when running the following to create a new WPF library VB project:\r\n\r\n `dotnet new  wpflib --language VB -o repro`\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nRestore tries to run on Company.ClassLibrary1.csproj, instead of the created repro.vbproj.\r\nThe project doens't exist so it fails.\r\n \r\n```\r\nThe template \"WPF Class library\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on repro\\Company.ClassLibrary1.csproj...\r\nMSBUILD : error MSB1009: Project file does not exist.\r\nSwitch: repro\\Company.ClassLibrary1.csproj\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n```\r\n\r\n **Expected behavior:**\r\n\r\nNo errors from post-creation restore\r\n \r\n **Minimal repro:**\r\n \r\n `dotnet new  wpflib --language VB -o repro`\r\n\r\n@jmarolf @vatsan-madhavan \r\n\r\nFound while trying all the VB templates for something else.\r\n","Url":"https://github.com/dotnet/wpf/issues/1556","RelatedDescription":"Open issue \"Restore failure on creation of wpflib template\" (#1556)"},{"Id":"477645438","IsPullRequest":false,"CreatedAt":"2019-08-07T00:06:56","Actor":"rladuca","Number":"1554","RawContent":null,"Title":"WPF XpsSerialization crashes intermittently caused by double free","State":"open","Body":"This is a port of a .NET Framework servicing bug:  https://devdiv.visualstudio.com/DevDiv/_workitems/edit/961349\n\nDuring execution of CreateTTFDeltaEx, the call-chain may re-allocate and move *ppuchDestBuffer.  If this happens and an error condition occurs, we will return the buffer that realloc de-allocated.  Callers may then double-free *ppuchDestBuffer.\n\nTo fix this, set *ppuchDestBuffer to NULL after it is stored in OutputBufferInfo.puchBuffer.  After this change, the non-error return will set *ppuchDestBuffer to OutputBufferInfo.puchBuffer as always, but the error case will de-allocate OutputBufferInfo.puchBuffer (as was intended) and return NULL in *ppuchDestBuffer.  Callers then cannot double-free the buffer.\n\n","Url":"https://github.com/dotnet/wpf/issues/1554","RelatedDescription":"Open issue \"WPF XpsSerialization crashes intermittently caused by double free\" (#1554)"},{"Id":"477619806","IsPullRequest":false,"CreatedAt":"2019-08-06T22:20:45","Actor":"vatsan-madhavan","Number":"1552","RawContent":null,"Title":"Theme assemblies cannot be referenced from XAML in latest SDK","State":"open","Body":"This is related to #765, which primarily deals with the inability to reference theme assemblies for consumption in C#/VB etc. code. \r\n\r\nIn recent preview8 builds, XAML like this no longer builds because the WPF theme assembles are no longer referenced by default by `Microsoft.WindowsDesktop`.\r\n\r\n```XAML\r\n... xmlns:theme=\"clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero\"\r\n\r\n<theme:SystemDropShadowChrome>\r\n       <HeaderedContentControl Padding=\"10\" Foreground=\"#CCFFFFFF\">\r\n              <HeaderedContentControl.Header>\r\n\r\n```\r\n\r\nGiven there is no way to reference these directly at build-time,  the theme assemblies are not complete unusable. \r\n\r\nThis change was made by https://github.com/dotnet/core-setup/issues/7218, which was done in due to a miscommunication between the WPF and the SDK teams. We are working together to undo this change for .NET Core 3.0. \r\n\r\nAlso related: https://github.com/dotnet/sdk/issues/3265\r\nThis issue tracks work in dotnet/sdk: https://github.com/dotnet/sdk/issues/3512","Url":"https://github.com/dotnet/wpf/issues/1552","RelatedDescription":"Open issue \"Theme assemblies cannot be referenced from XAML in latest SDK\" (#1552)"},{"Id":"477563306","IsPullRequest":false,"CreatedAt":"2019-08-06T19:49:44","Actor":"chabiss","Number":"1551","RawContent":null,"Title":"Add support for design time discoverability of default style key.","State":"open","Body":"**Feature request:** add support for design time discoverability of default style key.\r\n**Goal:** VS XAML intellisense to support Copy Style/Template without running app. Mostly for platform controls like Button and 3rd party SDKs like Telerik.\r\n**Details:** when creating WPF Core Custom Control Library project in VS, the project contains following:\r\n  themes/generic.xaml\r\n  <ResourceDictionary . . .>\r\n    <Style TargetType=\"{x:Type local:MyControl}\">\r\n\r\n  MyControl.cs\r\n  public class MyControl : Control\r\n  {\r\n    static MyControl()\r\n    {\r\n        DefaultStyleKeyProperty.OverrideMetadata(typeof(MyControl), new FrameworkPropertyMetadata(typeof(MyControl)));\r\n    }\r\n  }\r\n\r\nThis is not design time friendly as we cannot find default style key via Roslyn INamedTypeSymbol for MyControl. One way to fix it is to add DefaultStyleKeyAttribute, e.g.\r\n  [DefaultStyleKey(typeof(MyControl))]\r\n  public class MyControl : Control\r\n\r\nNote that VS project and item templates should be updated to DefaultStyleKeyAttribute.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1551","RelatedDescription":"Open issue \"Add support for design time discoverability of default style key.\" (#1551)"},{"Id":"477543477","IsPullRequest":false,"CreatedAt":"2019-08-06T18:59:49","Actor":"matt-entrekin","Number":"1550","RawContent":null,"Title":"Clicking a TreeView item while the tooltip is visible results in System.FormatException: 'Token is not valid.'","State":"open","Body":"* .NET Core Version: 3.0 Preview 7\r\n* Windows version: Windows 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nClicking on an item in a TreeView while a tooltip is visible causes an exception to be thrown.\r\n\r\n **Actual behavior:**\r\nSystem.FormatException\r\n  HResult=0x80131537\r\n  Message=Token is not valid.\r\n  Source=PresentationCore\r\n  StackTrace:\r\n   at MS.Internal.Parsers.ParseBrush(String brush, IFormatProvider formatProvider, ITypeDescriptorContext context) in /_/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Media/Parsers.cs:line 298\r\n   at System.Windows.Media.Brush.Parse(String value, ITypeDescriptorContext context) in /_/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Media/Brush.cs:line 84\r\n   at System.Windows.Media.BrushConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value) in /_/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Media/Generated/BrushConverter.cs:line 124\r\n   at System.ComponentModel.TypeConverter.ConvertFromInvariantString(String text)\r\n   at Microsoft.VisualStudio.DesignTools.WpfTap.WpfVisualTreeService.TypeServices.PropertyValueHelper.GetValueAsConvertableString(Object value, TypeConverter converter, Type targetType)\r\n\r\n **Expected behavior:**\r\nThe user should be able to click tree items while a tooltip is visible without an exception being thrown.\r\n \r\n **Minimal repro:**\r\n1. Create a .NET Core WPF app with a TreeView that has an item with a tooltip\r\n```xaml\r\n<TreeView>\r\n  <TextBlock Text=\"text\" ToolTip=\"tooltip\"/>\r\n</TreeView>\r\n``` \r\n2. Hover over the item with the tooltip\r\n3. While the tooltip is visible, click on the tree item\r\n","Url":"https://github.com/dotnet/wpf/issues/1550","RelatedDescription":"Open issue \"Clicking a TreeView item while the tooltip is visible results in System.FormatException: 'Token is not valid.'\" (#1550)"},{"Id":"476996121","IsPullRequest":false,"CreatedAt":"2019-08-06T18:45:20","Actor":"SamBent","Number":"1539","RawContent":null,"Title":"Port Editing test fixes from .NET 4.8","State":"closed","Body":"Two changes to Editing tests made recently in .NET 4.8 need to be ported to .NETCore.\n1. \"TripleClick\" tests fail because they rely on the old behavior of Input.SendMouseInput, which implicitly did a mouse-move when the Absolute flag was present.\n2. Speller tests are missing correct version numbers.","Url":"https://github.com/dotnet/wpf/issues/1539","RelatedDescription":"Closed issue \"Port Editing test fixes from .NET 4.8\" (#1539)"},{"Id":"477478691","IsPullRequest":false,"CreatedAt":"2019-08-06T16:28:15","Actor":"AlexChuev","Number":"1549","RawContent":null,"Title":"WPF controls render slower on .NET Core 3 compared to .NET Framework 4.8","State":"open","Body":"* .NET Core 3.0 Preview 7\r\n* Windows version 1809\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**  \r\n According to our performance tests, visual operations take longer to execute in .NET Core 3 compared to .NET Framework 4.8. We were unable to narrow down the issue so far, but it is certainly not connected to the performance issue with the GetCustomAttributes method reported [here](https://github.com/dotnet/wpf/issues/94), since you can see the difference in performance even when all XAML has been parsed (e.g., when scrolling).\r\n \r\n **Minimal repro:**  \r\n You can find a small sample with the Data Grid control here: https://github.com/AlexChuev/NetCorePerformanceTest\r\nIn the sample, it takes about 30% more time to scroll the Data Grid vertically in a .NET Core 3 project compared to an identical .NET Framework 4.8 configuration.","Url":"https://github.com/dotnet/wpf/issues/1549","RelatedDescription":"Open issue \"WPF controls render slower on .NET Core 3 compared to .NET Framework 4.8\" (#1549)"},{"Id":"477368812","IsPullRequest":true,"CreatedAt":"2019-08-06T13:40:00","Actor":"dotnet-maestro[bot]","Number":"1548","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190805.18\r\n- **Date Produced**: 8/5/2019 11:43 PM\r\n- **Commit**: 46e92f2d724c7b5db807eac1092cb095ee46e147\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19405.18\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1548","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1548)"},{"Id":"477367091","IsPullRequest":true,"CreatedAt":"2019-08-06T13:31:40","Actor":"dotnet-maestro[bot]","Number":"1547","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190805.18\r\n- **Date Produced**: 8/5/2019 11:43 PM\r\n- **Commit**: 46e92f2d724c7b5db807eac1092cb095ee46e147\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19405.18\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1547","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1547)"},{"Id":"477341900","IsPullRequest":true,"CreatedAt":"2019-08-06T13:10:27","Actor":"dotnet-maestro[bot]","Number":"1545","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1545","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1545)"},{"Id":"477342266","IsPullRequest":true,"CreatedAt":"2019-08-06T13:05:16","Actor":"dotnet-maestro[bot]","Number":"1546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190805.9\r\n- **Date Produced**: 8/6/2019 12:26 AM\r\n- **Commit**: 44ccf0f527de559b07f9ad955a47ec97f03f2146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19405.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19405.9\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1546)"},{"Id":"477113055","IsPullRequest":false,"CreatedAt":"2019-08-06T00:33:16","Actor":"rladuca","Number":"1544","RawContent":null,"Title":"Fix WPF JumpList support and re-enable JumpList tests","State":"open","Body":"The WPF JumpList support broke in Windows 8.1.  This is due to many changes to the shell underneath and the fact that WPF has old versions of Automation proxies that cause us to not be able to find certain items.\r\n\r\nHere are some explanations from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/126798:\r\n\r\n@miguep In case he has any input on this.\r\n```\r\nAfter investigating this issue, it seems that WPF is the one at fault for this, WPF provides some custom out-dated Proxy providers (for standard win32 controls) for UIAutomation to use, this causes UIAutomation to use those providers instead of its more up-to-date defaults (for win32, winforms, WPF), which results in some newer controls (or updated ones) to not be reported when querying UIAutomation.\r\n\r\nIt seems that the easiest solution to this problem would be to remove our call to UiaRegisterProviderCallback, and let UIAutomation use their proxy defaults, I've tested that approach and I've gotten the desired results. The problem is that we need the call to UiaRegisterProviderCallback in order to provide the users with the ability to create their own custom proxy providers.\r\n\r\nThe solution would be to forward the user's custom proxy providers to UIAutomation via IUIAutomationProxyFactory, the problem with this approach is that we need a CUIAutomation object, but creating one of our own does not work, since our stack uses the flat node API, which creates a CUIAutomation object internally, but does not expose it.\r\n\r\nThe other solution would be to re-work all our proxy providers and bring them up-to-date.\r\n\r\nThis issue is caused by the OS call GetWindow, the public call will by default ignore immersive windows (Metro/Universal apps), since the jumplist in Win10 is now a Universal window, all the automation lookups and traversals will ignore it, the only way so far to change this behavior is via the app manifest\r\n\r\n<asmv3:application>\r\n    <asmv3:windowsSettings xmlns=\"http://schemas.microsoft.com/SMI/2011/WindowsSettings\">\r\n      <disableWindowFiltering>true</disableWindowFiltering>\r\n    </asmv3:windowsSettings>\r\n  </asmv3:application>\r\n```","Url":"https://github.com/dotnet/wpf/issues/1544","RelatedDescription":"Open issue \"Fix WPF JumpList support and re-enable JumpList tests\" (#1544)"},{"Id":"477068402","IsPullRequest":false,"CreatedAt":"2019-08-05T21:33:55","Actor":"vsfeedback","Number":"1543","RawContent":null,"Title":"VS 2019 16.2 Hangs when connecting via Remote Desktop","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/661862/vs-2019-162-hangs-when-connecting-via-remote-deskt.html)._\n\n---\nWhen I reconnect to an existing Remote Desktop session on my development machine, the instance of Visual Studio that is already open will hang or become unresponsive. A &quot;Visual Studio is busy&quot; notification will appear after several seconds.\n\nThe development machine is running Visual Studio 2019 16.2 and Windows Server 2012 R2.\n\nI am connecting to the remote via Remote Desktop Connection 10.0.18362.1 on Windows 10.\n\n---\n### Original Comments\n\n#### Fiona Niu[MSFT] on 7/26/2019, 05:16 AM: \n\n<p>Thank you for taking the time to log this issue! Could you please provide more information via the Visual Studio Feedback Tool(Help -&gt; Send Feedback -&gt; Report A Problem)so that we can conduct further research?  The feedback tool  will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).<br>\nSince this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:</p>\n<pre><code>• Open Visual Studio Feedback tool.\n \n• Click the banner letting you know that you have problems requesting your attention.\n \n• Click this problem from the list\n\n• Click &quot;View their request and respond&quot; from the problem details banner\n\n• Add a comment, in the Attachments/Record: click Start Recording\n\n• When the Steps Recorder tool appears, perform the steps that reproduce the problem.\n\n• When you're done, choose the Stop Record button.\n \n• Wait a few minutes for Visual Studio to collect and package the information that you recorded.\n\n• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.\n</code></pre>\n<p>For the full instructions, please see: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info\">https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info</a> . For information about what data is collected, see <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect\">https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect</a></p>\n<p>We look forward to hearing from you!</p>\n\n#### sjeynes on 7/26/2019, 06:09 AM: \n\nI tried recording the steps before, and it said nothing was recorded, even though the problem did occur. I'll give it another try. These are the steps that cause the issue in Visual Studio:<br>1. Open Visual Studio 2019 on the remote server<br>2. Exit the remote session (do not sign out)<br>3. Reconnect to the remote session<br>4. Visual Studio 2019 will consistently be unresponsive in the remote session, even after several minutes<br>This time, I tried the Steps Recorder again, and it became unresponsive after I clicked Stop (screenshot attached). After about 2 minutes, the Steps Recorder said there was an error trying to save the recorded steps.\n#### Fiona Niu[MSFT] on 7/28/2019, 07:41 PM: \n\n<p>Thanks a lot for providing the information. We’re sorry for the issues you’re experiencing. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 7/30/2019, 06:00 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n#### Visual Studio Feedback System on 7/31/2019, 06:59 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1543","RelatedDescription":"Open issue \"VS 2019 16.2 Hangs when connecting via Remote Desktop\" (#1543)"},{"Id":"477053849","IsPullRequest":false,"CreatedAt":"2019-08-05T20:54:08","Actor":"SamBent","Number":"1542","RawContent":null,"Title":"Images not drawn by software rendering","State":"open","Body":"(Port of fix in the .NETFx servicing pipeline)\nSoftware rendering fails to draw images (or only partially draws them) when the image position and scaling are too large.  \n\nSoftware rendering does image-processing using integer arithmetic, representing points as \"16.16\" fixed-point numbers (16 bits of integer, 16 bits of fraction).  Thus it cannot deal with quantities whose magnitude exceeds 2^15=32768.   The translation components of the device-to-texture mapping can exceed this limit if the position and scaling of the image are large enough.  For example, the mapping for a 10x10 Image element, sourced to a 500x500 bitmap and positioned 700 pixels from the edge of the enclosing window, has scaling factor 500/10 = 50 and a desired translation of -50*700 = -35000 -- too big.\n\nIn this case the renderer uses the closest available number, -32768, causing it to sample the source bitmap too far to the right.  This produces a result equivalent to painting the image at the maximum \"working\" offset then clipping by the actual position of the Image.  In other words, as the Image moves to the right, the picture stops moving when the maximum offset is reached, and instead gets clipped on its left side until it eventually disappears altogether.\n\nFix:\nUse an adjusted mapping, relative to an \"origin\" point.  When mapping from device to texture, subtract the origin (in regular \"int\" coords), then apply the adjusted 16.16 mapping.  The adjusted mapping's translation components depend on the distance from the origin, rather than from the window-edge, so choosing an origin point that's close to the Image position will avoid the overflow.\n","Url":"https://github.com/dotnet/wpf/issues/1542","RelatedDescription":"Open issue \"Images not drawn by software rendering\" (#1542)"},{"Id":"477014840","IsPullRequest":false,"CreatedAt":"2019-08-05T19:13:58","Actor":"SamBent","Number":"1541","RawContent":null,"Title":"WPF controls in a RowVirtualized DataGrid control lose their value after scrolling","State":"open","Body":"(Port of recent .NETFx servicing fix)\nComboBox (or any Selector) displays the wrong value for SelectedValue (or any selection property) when\n1. ComboBox is declared in a cell template of a DataGrid\n2. Both ItemsSource and SelectedValue are bound to the row's data item via implicit DataContext (as opposed to explicit Source, ElementName, RelativeSource, etc.)\n3. DataGrid row virtualization is enabled.\n4. Item is re-virtualized, then de-virtualized.  E.g. scrolling it out of view, then back in.\n\nRoot cause:\nRe-virtualization causes the item's UI to be disconnected.  This sets DataContext to {DisconnectedItem}, which should set ItemsSource to null and leave SelectedValue unchanged, while removing property-changed listeners and other similar cleanup.  But if ItemsSource happens first, Selector tries to change SelectedValue (to null).   In a DataGrid, this records null as the \"proposed value\" of SelectedValue, (awaiting writing to the data item when the row-edit is committed).   When the item is later de-virtualized, the cell displays the proposed value (null).\n\nFix:  Selector should not change its selection properties, when reacting to being disconnected.","Url":"https://github.com/dotnet/wpf/issues/1541","RelatedDescription":"Open issue \"WPF controls in a RowVirtualized DataGrid control lose their value after scrolling\" (#1541)"},{"Id":"477004358","IsPullRequest":false,"CreatedAt":"2019-08-05T18:46:21","Actor":"SamBent","Number":"1540","RawContent":null,"Title":"Crash inserting text in front of Hyperlink when spelling is enabled","State":"open","Body":"Hard crash (FailFast) when inserting text in front of a Hyperlink in a RichTextBox, when spell-checking is enabled.\n\nThis is a port of a recent servicing fix in .NETFx.","Url":"https://github.com/dotnet/wpf/issues/1540","RelatedDescription":"Open issue \"Crash inserting text in front of Hyperlink when spelling is enabled\" (#1540)"},{"Id":"476956011","IsPullRequest":true,"CreatedAt":"2019-08-05T17:01:07","Actor":"dotnet-maestro[bot]","Number":"1538","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190805.4\r\n- **Date Produced**: 8/5/2019 4:00 PM\r\n- **Commit**: 1d51f96ffdedd2f506d92f18af4d67a17e382f6a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19405.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1538","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1538)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-08T05:30:54.309287Z","RunDurationInMilliseconds":908}