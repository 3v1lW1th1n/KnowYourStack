{"Data":{"GitHub":{"Issues":[{"Id":"503225513","IsPullRequest":false,"CreatedAt":"2019-10-07T04:23:42","Actor":"vsfeedback","Number":"2007","RawContent":null,"Title":"DragDrop.DoDragDrop not working in wpf , when drag to windows explorer in windows10","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/759425/dragdropdodragdrop-not-working-in-wpf-when-drag-to.html)._\n\n---\n<p>i am using below code to drag and drop the file or folder to windows explorer, it works perfectly for winforms but fails for wpf. </p> <p>In WPF the code not work in windows 10 </p><p></p><p> string path = @&quot;C:\\Rajesh\\documents\\bug\\5.07 testing folder drag&quot;;\n            StringCollection collection = new StringCollection() { path };                       \n            string[] files = { path };\n            var data = new DataObject(DataFormats.FileDrop, files);\n            data. SetData(DataFormats.Text, files[0]);\n            // Clipboard.SetData(DataFormats.FileDrop, files);\n            // Perform dragdrop\n            DragDrop.DoDragDrop(this, data, DragDropEffects.Copy);</p> <p class=\"\"></p><p class=\"\"></p>\n</p>\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/2007","RelatedDescription":"Open issue \"DragDrop.DoDragDrop not working in wpf , when drag to windows explorer in windows10\" (#2007)"},{"Id":"502916101","IsPullRequest":true,"CreatedAt":"2019-10-05T19:41:30","Actor":"vatsan-madhavan","Number":"2006","RawContent":null,"Title":"Add `ThemeInfoAttribute` to application project templates","State":"closed","Body":"Fixes #1699, #1966 \r\n\r\n### Description \r\n\r\nAdding `generic.xaml` to a .NET Core application doesn't work out of the box because the default application template doesn't include `ThemeInfoAttribute` the way it used to in .NET Framework.\r\n\r\nThis can create subtle problems like https://github.com/dotnet/wpf/issues/1966\r\n\r\nThis change adds back `ThemeInfoAttribute` that was inadvertently left out of the .NET Core application templates.\r\n\r\n### Customer Impact\r\n\r\n`generic.xaml` is used to supply default styles, often for custom controls etc. For it to function so, the application must have the `ThemeInfoAttribute` set. This was always the case in .NET Framework given the fact that WPF's application template set this attribute by default. \r\n\r\nIn .NET core, we inadvertently dropped this attribute from the application project-templates (they are still correctly retained by the .NET Core _User Control_ and _Custom Control_ project templates). \r\n\r\nThis can certainly be worked-around by a developer by adding an attribute in a `.cs` files, but identifying the cause of app misbehavior (owing to the missing `ThemeInfo` attribute in itself would be a confusing and difficult process. This is a confusion we would very much like to prevent in the ecosystem. \r\n\r\n### Regression \r\n\r\nYes, from .NET Framework.\r\n\r\n### Risk\r\n\r\nLow. (a) Does not impact WPF product (isolated to project templates), and (b) easy to test the locally built project templates. \r\n\r\nNote that the fix to the VB project template in this branch is for completeness' sake only. VB project templates are not enabled in this branch at this time. ","Url":"https://github.com/dotnet/wpf/pull/2006","RelatedDescription":"Closed or merged PR \"Add `ThemeInfoAttribute` to application project templates\" (#2006)"},{"Id":"502771991","IsPullRequest":true,"CreatedAt":"2019-10-05T19:31:01","Actor":"vatsan-madhavan","Number":"2004","RawContent":null,"Title":"Ensure that markup compilation is run for all design time builds","State":"closed","Body":"Port of #1895 \r\nFixes #1915 \r\n\r\n/cc @debonte, @davidwengier \r\n\r\n<hr/>\r\n\r\n### Description\r\n\r\nIn SDK-style projects the project system will combine design time builds together to improve performance, but depending on timing, this can cause issues. If something like the designer asks for output groups, then the build for that could be combined with the build that produces the intellisense file, but getting output groups sets `BuildingProject `to `true`, which in turn prevents WPF's markup-compilation from running.\r\n\r\nThis change works around the issue by allowing the intellisense files to generate irrespective of the value of `BuildingProject `, as long we're doing a design time build.\r\n\r\n### Customer Impact\r\n\r\nDevelopers encountering this problem see the following error: \r\n\r\n```\r\nError: ‘CS0103 - The name ‘InitializeComponent’ does not exist in the current context’\r\n```\r\n\r\nThis is usually persistent and doesn't go away upon rebuilds. It can sometimes be overcome by persistently cleaning the project, deleting intermediate files etc., and rebuilding. \r\n\r\nWe have also been hearing several reports of this on .NET core via //vsfeedback. \r\n\r\n### Regression \r\n\r\nNot a regression. This problem exists in .NET Framework also, but now we understand what's going on and have a fix for this. \r\n\r\n### Risk \r\n\r\nLow risk. \r\nThe fix is very simple, safe and easy to test. It has been in **master**/.NET 5 for a few weeks now. ","Url":"https://github.com/dotnet/wpf/pull/2004","RelatedDescription":"Closed or merged PR \"Ensure that markup compilation is run for all design time builds\" (#2004)"},{"Id":"502915163","IsPullRequest":true,"CreatedAt":"2019-10-05T04:38:15","Actor":"vatsan-madhavan","Number":"2005","RawContent":null,"Title":"Add `ThemeInfoAttribute` to application project templates","State":"open","Body":"Adding `generic.xaml` a .NET Core application doesn't work out of the box because the default application template doesn't include `ThemeInfoAttribute` the way it used to in .NET Framework.\r\n\r\nThis can create unexpected problems like https://github.com/dotnet/wpf/issues/1966\r\n\r\nThis change adds back `ThemeInfoAttribute` that was inadvertently left out of the .NET Core application templates.\r\n\r\nThis needs to be ported to release/3.1\r\n\r\nAddresses #1699, #1966 \r\n\r\n/cc @weltkante, @mysteryx93  ","Url":"https://github.com/dotnet/wpf/pull/2005","RelatedDescription":"Open PR \"Add `ThemeInfoAttribute` to application project templates\" (#2005)"},{"Id":"502749256","IsPullRequest":true,"CreatedAt":"2019-10-04T17:12:19","Actor":"Youssef1313","Number":"2003","RawContent":null,"Title":"Fix typo","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/2003","RelatedDescription":"Open PR \"Fix typo\" (#2003)"},{"Id":"502158945","IsPullRequest":false,"CreatedAt":"2019-10-04T14:59:38","Actor":"clurch","Number":"1997","RawContent":null,"Title":"Packaging Project Build Failed","State":"closed","Body":"* .NET Core Version: 3.0.0\r\n* Windows version: 1903 (10.0; Build 18362)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n \r\n **Problem description:**\r\n Upon building a .NETCore WPF project package, the Microsoft.Toolkit.Win32.UI.XamlHost.dll cannot be found. I don't believe this dll is used for the Microsoft.Toolkit.Wpf.UI packages.\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nMSB3030\tCould not copy the file \"...source\\repos\\ToastNotifcationTestingNetCore\\ToastNotifcationTestingNetCore\\bin\\Debug\\netcoreapp3.0\\Microsoft.Toolkit.Win32.UI.XamlHost.dll\" because it was not found.\tToastNotificationTestingNetCore.Package\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\DesktopBridge\\Microsoft.DesktopBridge.targets line 567\t\r\n \r\n **Expected behavior:**\r\nPackage should build successfully.\r\n\r\n **Minimal repro:**\r\nFollow the instructions found in https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/modernize-wpf-tutorial-4 for \"Add a notification\" then perform https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/modernize-wpf-tutorial-5. \r\n\r\n**NOTE**\r\nThis issue looks to have been resolved in https://github.com/MicrosoftDocs/windows-uwp/issues/1811 about 3 months ago, however it may have resurfaced with v6.0.0-preview9.1 of Microsoft.Toolkit.Wpf.UI.Controls and Microsoft.Toolkit.Wpf.UI.XamlHost. I am sorry if I am reporting this issue to the incorrect place.","Url":"https://github.com/dotnet/wpf/issues/1997","RelatedDescription":"Closed issue \"Packaging Project Build Failed\" (#1997)"},{"Id":"502679961","IsPullRequest":false,"CreatedAt":"2019-10-04T14:47:32","Actor":"muqiuq","Number":"2002","RawContent":null,"Title":"Missing RichTextBox.SelectionFont Property","State":"open","Body":"According to the documentation https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.richtextbox.selectionfont?view=netcore-3.0 RichTextBox.SelectionFont Property sould be available. But I can't find it anywhere. Has this been replaced by something else or is it not yet implemented? ","Url":"https://github.com/dotnet/wpf/issues/2002","RelatedDescription":"Open issue \"Missing RichTextBox.SelectionFont Property\" (#2002)"},{"Id":"502500358","IsPullRequest":true,"CreatedAt":"2019-10-04T09:45:53","Actor":"dotnet-maestro[bot]","Number":"2001","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191004.1\r\n- **Date Produced**: 10/4/2019 8:08 AM\r\n- **Commit**: 1934207dfd7aa570337791a67e4eeec4f6b82265\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19504.1\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2001","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2001)"},{"Id":"502354619","IsPullRequest":true,"CreatedAt":"2019-10-04T00:15:30","Actor":"dotnet-maestro[bot]","Number":"2000","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191003.1\r\n- **Date Produced**: 10/3/2019 11:32 PM\r\n- **Commit**: cf14d40dae262b353c5e2aa6cf0d35507dc279dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19503.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2000","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2000)"},{"Id":"502333551","IsPullRequest":true,"CreatedAt":"2019-10-03T22:39:13","Actor":"vatsan-madhavan","Number":"1999","RawContent":null,"Title":"Use correct PresentationBuildTasks.dll for VS and MSBuild builds","State":"open","Body":"The PresentationBuildTasks.dll built out of the .NET Core codebase is not being used for msbuild based builds (i.e., when `$(MSBuildRuntimeType)==Full`) of WPF projects that use WindowsDesktop SDK. Instead, the PresentationBuildTasks.dll from GAC, i.e., the DLL that shipped with .NET Framework, is being used for builds instead.\r\n\r\nThis is because the *first* occurance of an `UsingTask` element that applies to a `TaskName` will always be used - it can not be overridden by subsequent `UsingTask` entries (this is unlike `Property` and `Item` behavior). See note in https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/msbuild/usingtask-element-msbuild.md immediate after the **Syntax** section (Note: The msbuild team added this note after identifying this behavior as part of investiaging this PresentationBuildTasks.dll issue).\r\n\r\nThe fix ensures that the `UsingTask` declarations supplied by the WindowsDesktop SDK precede those supplied by .NET Framework's copy of `Microsoft.WinFX.targets` by introducing a new `.props` file - `Microsoft.WinFX.props` - and moving a small number of `Property` and `UsingTask` declartions into it. Since `.props` are imported before `targets`, the `UsingTask` declarations supplied by WindowsDesktop SDK will thus take precedence.\r\n\r\nNote that `Pbt.props` is used only for building this repo - it doesn't ship. \r\n\r\nAddresses #1998 \r\nThis needs to be ported to release/3.1 and release/3.0 (servicing). ","Url":"https://github.com/dotnet/wpf/pull/1999","RelatedDescription":"Open PR \"Use correct PresentationBuildTasks.dll for VS and MSBuild builds\" (#1999)"},{"Id":"502332631","IsPullRequest":false,"CreatedAt":"2019-10-03T22:36:27","Actor":"vatsan-madhavan","Number":"1998","RawContent":null,"Title":"Visual Studio and MSBuild builds use legacy PresentationBuildTasks.dll when using WindowsDesktop SDK","State":"open","Body":"When building WPF projects using the WindowsDesktop SDK in Visual Studio or MSBuild, legacy `PresentationBuildTasks.dll` (i.e, the one that shipped with .NET Framework, and installed in GAC) is used for Markup Compilation. \r\n\r\nThis behavior is wrong - and not what is intended. The correct behavior is to use the copy of PresentationBuildTasks.dll that ships with the .NET Core SDK under `3.0.100\\SDKs\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\net472\\PresentationBuildTasks.dll`\r\n\r\nRepro:\r\n\r\n```diff\r\n# Launch Visual Studio 2019 Developer Command Prompt\r\ndotnet new globaljson --sdk-version 3.0.100\r\n+dotnet new wpf\r\n-dotnet new wpf --target-framework-override net472\r\nmsbuild /bl \r\n// Inspect the logs; Search for $task MarkupCompilePass1\r\n// Observed: PresentationBuildTasks, Version 4.0.0.0 is used from the .NET Framework GAC  \r\n// Expected: 3.0.100\\SDKs\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\net472\\PresentationBuildTasks.dll from .NET Core 3.0 SDK should be used\r\n```\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1998","RelatedDescription":"Open issue \"Visual Studio and MSBuild builds use legacy PresentationBuildTasks.dll when using WindowsDesktop SDK\" (#1998)"},{"Id":"501171740","IsPullRequest":true,"CreatedAt":"2019-10-03T19:31:57","Actor":"rladuca","Number":"1986","RawContent":null,"Title":"Fix missing type forwards in reference assemblies","State":"closed","Body":"Relates to #1964 \r\n\r\nSome reference assemblies (WindowsBase, System.Xaml) were missing type forwards.  This adds them back and rebaselines the ApiCompat (especially against 4.8) to be correct.  This also fixes some issues in the PresentationFramework reference assembly that might have allowed instances of this problem to show up in the future.\r\n\r\nSteps taken to find and fix these:\r\n\r\n- Find all type forwards deeper in the code tree than OtherAssemblyAttrs.cs\r\n- Ensure they are all hoisted into the corresponding OtherAssemblyAttrs.cs\r\n- Ensure all ref assemblies directly use the lib assemblies OtherAssemblyAttrs.cs so they maintain parity.\r\n\r\nFurther investigation is needed into why reference API compat failed to find these issues (4.8 API compat did but I incorrectly baselined them).","Url":"https://github.com/dotnet/wpf/pull/1986","RelatedDescription":"Closed or merged PR \"Fix missing type forwards in reference assemblies\" (#1986)"},{"Id":"501244439","IsPullRequest":true,"CreatedAt":"2019-10-03T17:15:44","Actor":"YoshihiroIto","Number":"1987","RawContent":null,"Title":"Use  Array.Empty","State":"closed","Body":"This change reduces heap allocation.","Url":"https://github.com/dotnet/wpf/pull/1987","RelatedDescription":"Closed or merged PR \"Use  Array.Empty\" (#1987)"},{"Id":"502032348","IsPullRequest":true,"CreatedAt":"2019-10-03T12:22:22","Actor":"dotnet-maestro[bot]","Number":"1996","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191003.2\r\n- **Date Produced**: 10/3/2019 9:33 AM\r\n- **Commit**: 93d2015b6133654679272bba4c69dcb3ca4a0ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha1.19503.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1996","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1996)"},{"Id":"501859164","IsPullRequest":true,"CreatedAt":"2019-10-03T06:15:40","Actor":"dotnet-maestro[bot]","Number":"1995","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191002.3\r\n- **Date Produced**: 10/3/2019 5:04 AM\r\n- **Commit**: 2fb40d0baf02c4137cdfaab55e4dfd02919dcc9b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19502.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1995)"},{"Id":"501836546","IsPullRequest":true,"CreatedAt":"2019-10-03T04:05:45","Actor":"dotnet-maestro[bot]","Number":"1994","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191002.1\r\n- **Date Produced**: 10/3/2019 3:38 AM\r\n- **Commit**: 231650a60977a0ad415e03a91f126c0cde7f76ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19502.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.14 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 5.0.0-alpha1.19501.1 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19501.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19501.1 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19501.2 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1994","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1994)"},{"Id":"501654895","IsPullRequest":false,"CreatedAt":"2019-10-02T20:25:05","Actor":"IGMikeS","Number":"1993","RawContent":null,"Title":"SendInput API does not work on WPF NetCore controls","State":"closed","Body":".NET Core Version: Version: 3.0.100-preview6-012264\r\nHave you experienced this same bug with .NET Framework?: No\r\nWindows 10\r\n\r\nI have some code that calls the SendInput Windows API in order to simulate keystrokes to a WPF control. This code works fine in the DotNetFramework and triggers all of the appropriate events such as PreviewKeyDown, KeyDown, PreviewTextInput, TextInput, PreviewKeyUp, and KeyUp. \r\n\r\nThe same code does not work in NetCore. No events are fired. \r\n\r\nI have attached  sample solution here which contains two projects. One is using the DotNetFramework (DNFApp) and the other is using NetCore (NCApp). Both projects share the same code files. \r\n\r\nIf you run the DNFApp and click the button, the Output window shows that all of the appropriate events are fired on the Button control. \r\n\r\nRun the NCApp and click the button, the Output window shows that the button click fires, and nothing else. If you press a keym such as (\"F\") on the keyboard, all of the events fire. \r\n\r\n[SendInputTest.zip](https://github.com/dotnet/wpf/files/3682752/SendInputTest.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/1993","RelatedDescription":"Closed issue \"SendInput API does not work on WPF NetCore controls\" (#1993)"},{"Id":"501455712","IsPullRequest":true,"CreatedAt":"2019-10-02T13:08:16","Actor":"dotnet-maestro[bot]","Number":"1992","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191002.3\r\n- **Date Produced**: 10/2/2019 8:22 AM\r\n- **Commit**: e899060baa974bbe2be536e45b7548c3afb5a063\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha1.19502.3\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1992","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1992)"},{"Id":"501409234","IsPullRequest":false,"CreatedAt":"2019-10-02T10:35:56","Actor":"pieterphilippaerts","Number":"1991","RawContent":null,"Title":"Misleading error message in .NET Core WPF","State":"open","Body":"When you compile a WPF (on .NET Core 3) app with the following XAML, I get the error message\r\n\r\n> Unknown build error, 'Could not find assembly ‘Extension, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null’. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or use a MetadataAssemblyResolver that returns a valid assembly.\r\n\r\n```\r\n<Window x:Class=\"WpfCoreBug.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:WpfCoreBug\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid Background=\"{Binding RelativeSource={RelativeSource, AncestorType={x:Type Window}}}\">\r\n\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\nIt’s normal that I get a build error (the XAML is wrong; in particular, the binding should read “{RelativeSource FindAncestor, …”), but this build error is not helping me to figure out what’s wrong. In fact, my first thought was not that I did something wrong but that Visual Studio’s build chain somehow got broken.\r\n\r\nNote that you get a better error message if you add a space in `RelativeSource ,` (notice the extra space). In this case, I get the error:\r\n\r\n> ’ , AncestorType={x:Type Window}}’ is not valid. Markup extensions require only spaces between the markup extension name and the first parameter. Cannot have comma or equals sign before the first parameter.\r\n\r\nThat’s a good error description.\r\n\r\nAlso note that the code in the example above produces a better error description on WPF for the full .NET Framework. In this case, I get the error\r\n\r\n> The character “,” is unexpected at this position.\r\n\r\nwhich is an excellent description of the problem.","Url":"https://github.com/dotnet/wpf/issues/1991","RelatedDescription":"Open issue \"Misleading error message in .NET Core WPF\" (#1991)"},{"Id":"501274536","IsPullRequest":true,"CreatedAt":"2019-10-02T05:00:26","Actor":"dotnet-maestro[bot]","Number":"1990","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191001.3\r\n- **Date Produced**: 10/2/2019 4:30 AM\r\n- **Commit**: fec2b23f60b0a4c4d3bee27b2f6be627e8f4482c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19501.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1990","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1990)"},{"Id":"501260410","IsPullRequest":true,"CreatedAt":"2019-10-02T04:20:48","Actor":"dotnet-maestro[bot]","Number":"1989","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191001.1\r\n- **Date Produced**: 10/2/2019 3:37 AM\r\n- **Commit**: be3d33927476deb6e299c69cc68f0c54ed1b828c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19501.1\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1989","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1989)"},{"Id":"501260335","IsPullRequest":true,"CreatedAt":"2019-10-02T04:20:29","Actor":"dotnet-maestro[bot]","Number":"1988","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191001.2\r\n- **Date Produced**: 10/2/2019 3:37 AM\r\n- **Commit**: 7b3aca5a1efc1760bf330a79b89e77a08b538e40\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19501.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1988","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1988)"},{"Id":"501162510","IsPullRequest":false,"CreatedAt":"2019-10-01T21:44:55","Actor":"EmaginationStore","Number":"1985","RawContent":null,"Title":"Error creating XPS from Canvas","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: 1903 (18362.356)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n**Description**\r\n \r\nI have a Textblock with text of \"Hello\" within a Canvas on the MainWindow. I am running the following code on mouse down of the main window (as a test):\r\n\r\n```\r\nprivate void MainWindow_OnMouseDoubleClick(object sender, MouseButtonEventArgs e)\r\n        {\r\n            var sfd = new SaveFileDialog { Filter = \"XPS files (*.xps)|*.xps\" };\r\n            if (sfd.ShowDialog() != true) return;\r\n            var c = Canv;\r\n            var doc = new XpsDocument(sfd.FileName, FileAccess.Write);\r\n            var writer = XpsDocument.CreateXpsDocumentWriter(doc);\r\n            writer.Write(c, new PrintTicket { PageMediaSize = new PageMediaSize(c.ActualWidth, c.ActualHeight) });\r\n            doc.Close();\r\n        }\r\n```\r\n \r\n**Actual behavior:** \r\nEntries cannot be created while previously created entries are still open.\r\nat System.IO.Compression.ZipArchive.AcquireArchiveStream(ZipArchiveEntry entry)\r\n   at System.IO.Compression.ZipArchiveEntry..ctor(ZipArchive archive, String entryName)\r\n   at System.IO.Compression.ZipArchiveEntry..ctor(ZipArchive archive, String entryName, CompressionLevel compressionLevel)\r\n   at System.IO.Compression.ZipArchive.DoCreateEntry(String entryName, Nullable`1 compressionLevel)\r\n   at System.IO.Compression.ZipArchive.CreateEntry(String entryName, CompressionLevel compressionLevel)\r\n   at System.IO.Packaging.ZipPackage.CreatePartCore(Uri partUri, String contentType, CompressionOption compressionOption)\r\n   at System.IO.Packaging.Package.CreatePart(Uri partUri, String contentType, CompressionOption compressionOption)\r\n   at System.Windows.Xps.Packaging.XpsManager.GeneratePart(ContentType contentType, Uri partUri)\r\n   at System.Windows.Xps.Packaging.XpsManager.GenerateUniquePart(ContentType contentType)\r\n   at System.Windows.Xps.Packaging.XpsFixedDocumentSequenceReaderWriter.AddFixedDocument()\r\n   at System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForFixedDocument()\r\n   at System.Windows.Xps.Serialization.XpsSerializationManager.AcquireXmlWriter(Type writerType)\r\n   at System.Windows.Xps.Serialization.ReachHierarchySimulator.SimulateBeginFixedDocument()\r\n   at System.Windows.Xps.Serialization.ReachHierarchySimulator.BeginConfirmToXPSStructure(Boolean mode)\r\n   at System.Windows.Xps.Serialization.XpsSerializationManager.SaveAsXaml(Object serializedObject)\r\n   at System.Windows.Xps.XpsDocumentWriter.SaveAsXaml(Object serializedObject, Boolean isSync)\r\n   at System.Windows.Xps.XpsDocumentWriter.Write(Visual visual, PrintTicket printTicket)\r\n   at Test.MainWindow.MainWindow_OnMouseDoubleClick(Object sender, MouseButtonEventArgs e) in C:\\Users\\ashdo\\source\\repos\\Test\\Test\\MainWindow.xaml.cs:line 27\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n   at Test.App.Main()\r\n \r\n **Expected behavior:** An XPS document to be created of the Canvas\r\n \r\n **Minimal repro:** \r\n```\r\n<Window x:Class=\"Test.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:Test\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\" MouseDown=\"MainWindow_OnMouseDoubleClick\">\r\n    <Grid>\r\n        <Canvas Name=\"Canv\">\r\n                    <TextBlock FontSize=\"200\" Foreground=\"BlueViolet\" Text=\"Hello\" >\r\n                    </TextBlock>\r\n        </Canvas>\r\n    </Grid>\r\n</Window>\r\n```\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1985","RelatedDescription":"Open issue \"Error creating XPS from Canvas\" (#1985)"},{"Id":"500984553","IsPullRequest":false,"CreatedAt":"2019-10-01T15:45:49","Actor":"Mrnikbobjeff","Number":"1984","RawContent":null,"Title":"Potential security issue in dataobjects.cs","State":"open","Body":"https://github.com/dotnet/wpf/blob/1d4abe6b45ed1a1e9fe605ae1c9949d6d2a99fb4/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/dataobject.cs#L1670\r\nThe actual bytes read are ignored, instead a constant is used in the following line to specify the amount of bytes to read, even if the actual amount of bytes may be lower.\r\nhttps://github.com/dotnet/wpf/blob/1d4abe6b45ed1a1e9fe605ae1c9949d6d2a99fb4/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/dataobject.cs#L1672\r\n I do not know if it is easily possible to trigger, but this definitely seems incorrect. Also, as far as I can tell the pointer is a constant and could be hoisted so that it does not need to be converted multiple times.","Url":"https://github.com/dotnet/wpf/issues/1984","RelatedDescription":"Open issue \"Potential security issue in dataobjects.cs\" (#1984)"},{"Id":"500906777","IsPullRequest":false,"CreatedAt":"2019-10-01T13:44:53","Actor":"poizan42","Number":"1983","RawContent":null,"Title":"Potential TOCTTOU race in Window.ShowDialog","State":"open","Body":"* .NET Core Version: (The code in question is in master)\r\n* Windows version: It is seen on some version of Windows 10, but haven't reproduced it locally.\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: It was probably net48\r\n \r\n **Problem description:**\r\n\r\nWe got this on netfx, but the same code seems to be present in core WPF. \r\n`SafeNativeMethods.ReleaseCapture` throws an exception (`System.ComponentModel.Win32Exception (0x80004005): The operation completed successfully`).\r\n\r\nIgnoring the ERROR_SUCCESS result which is outside of the scope of WPF, it looks like this could be caused by a TOCTTOU race in https://github.com/dotnet/wpf/blob/185e2e8c62ede5c188bf3655f862f87eba4a3cb5/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Window.cs#L375-L399\r\n\r\nNote that ReleaseCapture is only able to release capture from a window owned by the current thread. It looks like a window on another thread might be able to \"steal\" the mouse capture in the time between the two calls - the error from ReleaseCapture should probably just be ignored.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n```\r\nCatching Unhandled exception:System.ComponentModel.Win32Exception (0x80004005): The operation completed successfully \r\nved MS.Win32.SafeNativeMethods.ReleaseCapture() \r\nved System.Windows.Window.ShowDialog() \r\n...\r\n```\r\n\r\n **Expected behavior:**\r\nShowDialog succeeds.\r\n\r\n **Minimal repro:**\r\nUnfortunately I haven't been able to reproduce the issue.","Url":"https://github.com/dotnet/wpf/issues/1983","RelatedDescription":"Open issue \"Potential TOCTTOU race in Window.ShowDialog\" (#1983)"},{"Id":"500859550","IsPullRequest":true,"CreatedAt":"2019-10-01T13:02:32","Actor":"dotnet-maestro[bot]","Number":"1982","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191001.2\r\n- **Date Produced**: 10/1/2019 9:22 AM\r\n- **Commit**: e1b421533609eef40a3db3b2a85fcdb9b0047ac2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha1.19501.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1982","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1982)"},{"Id":"500769026","IsPullRequest":false,"CreatedAt":"2019-10-01T09:19:38","Actor":"TFTomSun","Number":"1981","RawContent":null,"Title":"Incremental Build in Visual Studio 2019 and WPF with .NET Core 3.0 broken","State":"open","Body":"- Create a library with the following project file:\r\n\r\n```xml\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n\r\n```\r\n\r\n- To keep it simple, leave the library empty\r\n\r\n-> The delta build in Visual Studio is broken. Normally Visual Studio would not build the project on the second build, if no changes have been performed. But WPF libraries are always build again, which also causes dependent projects to be rebuild. WPF apps don't have that issue.\r\n\r\nUnfortunately the diagnostic build output does not tell any reason why the project is build again.","Url":"https://github.com/dotnet/wpf/issues/1981","RelatedDescription":"Open issue \"Incremental Build in Visual Studio 2019 and WPF with .NET Core 3.0 broken\" (#1981)"},{"Id":"500662160","IsPullRequest":true,"CreatedAt":"2019-10-01T05:10:25","Actor":"dotnet-maestro[bot]","Number":"1980","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.6\r\n- **Date Produced**: 10/1/2019 4:43 AM\r\n- **Commit**: 3750c43d5d9b5161be967e39fd848c89d6479ff5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19480.6\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1980","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1980)"},{"Id":"500652240","IsPullRequest":true,"CreatedAt":"2019-10-01T04:40:45","Actor":"dotnet-maestro[bot]","Number":"1979","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.4\r\n- **Date Produced**: 10/1/2019 3:20 AM\r\n- **Commit**: a6735263e78d4ad74de61cf63af76b5f7b661092\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19480.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1979","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1979)"},{"Id":"500636864","IsPullRequest":true,"CreatedAt":"2019-10-01T04:25:19","Actor":"dotnet-maestro[bot]","Number":"1978","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 10/1/2019 3:09 AM\r\n- **Commit**: 15610a77c574b3f390893699143d33fbbc94d756\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19480.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1978","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1978)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-07T05:30:57.3858188Z","RunDurationInMilliseconds":1004}