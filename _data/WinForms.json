{"Data":{"GitHub":{"Issues":[{"Id":"552710815","IsPullRequest":false,"CreatedAt":"2020-01-22T04:53:48","Actor":"bairog","Number":"2746","RawContent":null,"Title":"WindowsForms support to .vcxproj","State":"closed","Body":"I'm trying to port my C++/CLI project from .NET Framework 4.8 to .Net Core 3.1.\r\nBut compiler (latest Visual Studio 2019 16.4.3) doesn't see `System::Windows::Forms` namespace.\r\nAdding the following line changes nothing:\r\n`<UseWindowsForms>true</UseWindowsForms>`\r\nI also couldn't find any reference or tutorial explaing how to add WindowsForms support to .vcxproj.","Url":"https://github.com/dotnet/winforms/issues/2746","RelatedDescription":"Closed issue \"WindowsForms support to .vcxproj\" (#2746)"},{"Id":"552645894","IsPullRequest":true,"CreatedAt":"2020-01-22T00:09:09","Actor":"RussKie","Number":"2745","RawContent":null,"Title":"Generate transport package manifest","State":"closed","Body":"\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n(Re)generate the list of transport assemblies by inspecting Microsoft.Private.Winforms nuspec.\r\nThis will reduce manual efforts in keeping x-repo synchronisations (e.g. dotnet/windowsdesktop#365)\r\n\r\nResolves dotnet/windowsdesktop#412\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2745)","Url":"https://github.com/dotnet/winforms/pull/2745","RelatedDescription":"Closed or merged PR \"Generate transport package manifest\" (#2745)"},{"Id":"553196084","IsPullRequest":true,"CreatedAt":"2020-01-22T00:08:02","Actor":"MaherJendoubi","Number":"2751","RawContent":null,"Title":"Contributing: fixed some typos","State":"closed","Body":"just fixed some typos\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2751)","Url":"https://github.com/dotnet/winforms/pull/2751","RelatedDescription":"Closed or merged PR \"Contributing: fixed some typos\" (#2751)"},{"Id":"550606094","IsPullRequest":false,"CreatedAt":"2020-01-21T21:58:33","Actor":"PDostalek","Number":"2725","RawContent":null,"Title":" [loc][Query][winforms] Localizability of  0; \"ErrorResourcePerStoreLimitReached\"","State":"closed","Body":"Hello developers,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nThe store has reached its limit of '{0}' resources.\r\n\r\nID & File Name:\r\n 0; \"ErrorResourcePerStoreLimitReached\"\r\nbuild___test___sign\\outputs\\build\\loc\\en\\src\\Microsoft.Azure.AppConfiguration.Rp\\Resources\\Localization.Strings\r\n\r\nQuery:\r\nWould you please clarify the placeholder? Is it a numeric value or a resource name?\r\n\r\nOther affected resource ids:\r\n\".resx\", 0; \"ErrorSkuDowngradeNotAllowed\"\r\n\".resx\", 0; \"ErrorSkuPerSubscriptionLimitReached","Url":"https://github.com/dotnet/winforms/issues/2725","RelatedDescription":"Closed issue \" [loc][Query][winforms] Localizability of  0; \"ErrorResourcePerStoreLimitReached\"\" (#2725)"},{"Id":"550603266","IsPullRequest":false,"CreatedAt":"2020-01-21T21:58:07","Actor":"PDostalek","Number":"2724","RawContent":null,"Title":"[loc][Query][winforms] Localizability of  0; \"FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription\"","State":"closed","Body":"Hello developers,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nDeletes a configuration store event grid filter.\r\n\r\nID & File Name:\r\n 0; \"FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription\"\r\nbuild___test___sign\\outputs\\build\\loc\\en\\src\\Microsoft.Azure.AppConfiguration.Rp\\Resources\\Localization.Strings.\r\n\r\nAll the affected reosurces ids:\r\n\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription\"\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersDeleteOperationName\"\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersReadOperationDescription\"\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersReadOperationName\"\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersResourceType\"\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersWriteOperationDescription\"\r\n\".resx\", 0; \"FriendlyConfigurationStoreEventGridFiltersWriteOperationName\"","Url":"https://github.com/dotnet/winforms/issues/2724","RelatedDescription":"Closed issue \"[loc][Query][winforms] Localizability of  0; \"FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription\"\" (#2724)"},{"Id":"553061788","IsPullRequest":false,"CreatedAt":"2020-01-21T18:49:15","Actor":"weltkante","Number":"2750","RawContent":null,"Title":"Collection `Remove` methods are sometimes missing ownership checks.","State":"open","Body":"* .NET Core Version: master\r\n* Have you experienced this same bug with .NET Framework?: didn't check but probably has the same bugs\r\n\r\n**Problem description:**\r\nSome custom `IList` implementations don't check in their `Remove` implementations whether the removed object is actually part of the list. They just go ahead and start disconnecting the object passed as argument, even if it belongs to a different container. The object will probably end up in a partially disconnected state without its actual owner being notified.\r\n\r\nThis was discovered while trying to implement generic `IList<T>` on those collections, where `Remove` is required to report success. It is immediately noticeable if a method doesn't have a branch that returns false (#2644 and #2749)\r\n\r\n**Expected behavior:**\r\n`Remove` methods should check if the object to be removed is actually part of the collection before they start disconnecting the object.\r\n\r\n**Minimal repro:**\r\ndiscovered on following types via code review while implementing generic `Remove` for generic `IList<T>`:\r\n* [ListViewGroupCollection](https://source.dot.net/#System.Windows.Forms/System/Windows/Forms/ListViewGroupCollection.cs,295)\r\n* [TableLayoutStyleCollection](https://source.dot.net/#System.Windows.Forms/System/Windows/Forms/TableLayoutStyleCollection.cs,90)\r\n* [ToolStripItemCollection](https://source.dot.net/#System.Windows.Forms/System/Windows/Forms/ToolStripItemCollection.cs,441)\r\n\r\nThere might be more, will do a more thorough review later while working on the generic IList implementation, just want to document the bugs for now.","Url":"https://github.com/dotnet/winforms/issues/2750","RelatedDescription":"Open issue \"Collection `Remove` methods are sometimes missing ownership checks.\" (#2750)"},{"Id":"553053749","IsPullRequest":true,"CreatedAt":"2020-01-21T18:31:36","Actor":"weltkante","Number":"2749","RawContent":null,"Title":"WIP: implement generic IList interface","State":"open","Body":"Contributes to #2644\r\n\r\nThis is a WIP PR for exploring the impact #2644 may have and whether its worth taking the breaking change.\r\n\r\nThis PR contains adding `IList<T>` interface implementation to types currently implementing `IList`. I thought it'd be a good way to start the work. If you want me to split down further in either multiple commits or separate PRs I don't mind, I fully expect having to go through the full changes several times anyways. On that note, if you have nits don't bother reviewing/annotating all of them, just pick one representative for discussion.\r\n\r\nNotes:\r\n- As far as placement of new code goes I tried to orient myself on the corresponding `IList` methods (where available), this makes for weird placement since not all `IList<T>` methods are together, but considering I don't really want to reorder the existing methods (unless asked to) I figured it'd be the best solution to minimize diffs for now.\r\n- There are plenty of odd design decisions in the original collections subclassing hierarchy which makes updating them harder.\r\n- Some subclass hierarchies could profit from adding generics to their signatures. Of course this is a highly breaking change.\r\n- Some classes expose a backing collection (usually of type `ArrayList`) to their subclasses. Should we break subclasses by changing the type of the backing list to a generic collection? Nullability annotations would profit from such a change.\r\n- Existing `Remove` implementations don't tell the caller whether they removed something, but `IList<T>` requires this in its API. I've updated them where it looked sensible but some `Remove` implementations are virtual and changing return type to `bool` would require updating subclasses. I opted to not do this in this PR before discussing this point, instead for now I did  implement `IList<T>.Remove` as explicit interface with a weird workaround. That is just placeholder until it is clear what is desired.\r\n    - Should we require updating subclasses and change the return type?\r\n    - If not, how much do we want to assume about how the subclass behaves? (This decides how weird/complicated the explicit interface implementation has to be.)\r\n- There are bugs in some existing collection classes where they don't check in `Remove` implementations whether the item to be removed is actually part of the collection. They run logic which severs the item and partially disconnects it from its true owner, but without notifying that owner. I did not fix these bugs yet (some are marked with comments though), I'm going to create a separate issue for this problem (so it doesn't have to wait for this issue/PR, which probably will take a while to dicscuss and resolve all points).\r\n- xunit apparently doesn't support non-generic lists, so when you start implementing the generic list interface all kinds of collection-tests stop compiling because some analyzer wants you to use `Assert.Contains` or `Assert.DoesNotContain`. Minor inconvenience which is easily fixed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2749)","Url":"https://github.com/dotnet/winforms/pull/2749","RelatedDescription":"Open PR \"WIP: implement generic IList interface\" (#2749)"},{"Id":"553001823","IsPullRequest":false,"CreatedAt":"2020-01-21T16:50:52","Actor":"poutine70","Number":"2748","RawContent":null,"Title":"PropertyGrid: Enum Property with DefaultValueAttribute for Vb.Net Classes are readonly","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1.101\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n\"Enum Type Read/Write Properties\" of a class defined in Vb.Net with a DefaultValueAttribute are render \"Readonly\" (ghosted/can't be modified) in a property grid. Without the DefaultValueAttribute, the property grid behaves normally. The property grid works correctly if the class if defined in C#.\r\n\r\n\r\n**Expected behavior:**\r\nProperty Grid should show the property as Read/Write regardless of the presence of DefaultValueAttribute or the language used to define the class owning the property.\r\n\r\n**Minimal repro:**\r\nSee attached VisualStudio 2019 Solution\r\n\r\n![image](https://user-images.githubusercontent.com/12993055/72824780-ddce9480-3c43-11ea-868a-9bfbfa4afd67.png)\r\n[TestCase.zip](https://github.com/dotnet/winforms/files/4092286/TestCase.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/2748","RelatedDescription":"Open issue \"PropertyGrid: Enum Property with DefaultValueAttribute for Vb.Net Classes are readonly\" (#2748)"},{"Id":"552872533","IsPullRequest":true,"CreatedAt":"2020-01-21T13:20:20","Actor":"hughbe","Number":"2747","RawContent":null,"Title":"Remove Interop.WindowMessages","State":"open","Body":"## Proposed Changes\r\n- Remove Interop.WindowMessages in favor of User32.WM\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2747)","Url":"https://github.com/dotnet/winforms/pull/2747","RelatedDescription":"Open PR \"Remove Interop.WindowMessages\" (#2747)"},{"Id":"551998884","IsPullRequest":true,"CreatedAt":"2020-01-20T22:27:56","Actor":"hughbe","Number":"2744","RawContent":null,"Title":"Rename WindowMessage to WM","State":"closed","Body":"## Proposed Changes\r\n- Since this now only contains `WM_` messages\r\n\r\nNext step to combine `WM` and the `WindowMessage.cs` file\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2744)","Url":"https://github.com/dotnet/winforms/pull/2744","RelatedDescription":"Closed or merged PR \"Rename WindowMessage to WM\" (#2744)"},{"Id":"551208564","IsPullRequest":true,"CreatedAt":"2020-01-20T04:27:30","Actor":"RussKie","Number":"2731","RawContent":null,"Title":"Add Microsoft.CodeAnalysis.PublicApiAnalyzers","State":"closed","Body":"- Copy v3.0 public API surface reports as baseline\r\n- Capture the surface of public API\r\n- Mark new API as shipped\r\n\r\nRelates to #2705\r\nRelates to #2112\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None, capturing the shipped public API surface only.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2731)","Url":"https://github.com/dotnet/winforms/pull/2731","RelatedDescription":"Closed or merged PR \"Add Microsoft.CodeAnalysis.PublicApiAnalyzers\" (#2731)"},{"Id":"551215375","IsPullRequest":true,"CreatedAt":"2020-01-20T04:12:55","Actor":"RussKie","Number":"2732","RawContent":null,"Title":"Add Microsoft.CodeAnalysis.PublicApiAnalyzers","State":"closed","Body":"Capture the surface of public API\r\n\r\nRelates to #2705\r\nRelates to #2092\r\n\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None, capturing the shipped public API surface only.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2732)","Url":"https://github.com/dotnet/winforms/pull/2732","RelatedDescription":"Closed or merged PR \"Add Microsoft.CodeAnalysis.PublicApiAnalyzers\" (#2732)"},{"Id":"551959535","IsPullRequest":true,"CreatedAt":"2020-01-20T01:28:02","Actor":"hughbe","Number":"2740","RawContent":null,"Title":"Don't force handle creation in TrackBar.OnHandleCreated","State":"closed","Body":"## Proposed Changes\r\n- Don't force handle creation in TrackBar.OnHandleCreated\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2740)","Url":"https://github.com/dotnet/winforms/pull/2740","RelatedDescription":"Closed or merged PR \"Don't force handle creation in TrackBar.OnHandleCreated\" (#2740)"},{"Id":"551959920","IsPullRequest":true,"CreatedAt":"2020-01-20T01:27:20","Actor":"hughbe","Number":"2741","RawContent":null,"Title":"Don't force TabControl handle creation in OnHandleCreated","State":"closed","Body":"## Proposed Changes\r\n- Don't force TabControl handle creation in OnHandleCreated\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2741)","Url":"https://github.com/dotnet/winforms/pull/2741","RelatedDescription":"Closed or merged PR \"Don't force TabControl handle creation in OnHandleCreated\" (#2741)"},{"Id":"551951599","IsPullRequest":true,"CreatedAt":"2020-01-19T22:27:38","Actor":"gpetrou","Number":"2739","RawContent":null,"Title":"Remove unused ACM, CP, CONNECT, GCL, IMAGE, LOCK, MB, MSH and PSM constants","State":"closed","Body":"## Proposed changes\r\n\r\n- Remove unused ACM, CP, CONNECT, GCL, IMAGE, LOCK, MB, MSH and PSM constants.\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2739)","Url":"https://github.com/dotnet/winforms/pull/2739","RelatedDescription":"Closed or merged PR \"Remove unused ACM, CP, CONNECT, GCL, IMAGE, LOCK, MB, MSH and PSM constants\" (#2739)"},{"Id":"551966700","IsPullRequest":true,"CreatedAt":"2020-01-19T22:26:25","Actor":"gpetrou","Number":"2743","RawContent":null,"Title":"Move GetDlgItem to Interop User32","State":"closed","Body":"## Proposed changes\r\n\r\n- Move GetDlgItem to Interop User32.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2743)","Url":"https://github.com/dotnet/winforms/pull/2743","RelatedDescription":"Closed or merged PR \"Move GetDlgItem to Interop User32\" (#2743)"},{"Id":"551774070","IsPullRequest":true,"CreatedAt":"2020-01-19T22:20:50","Actor":"hughbe","Number":"2736","RawContent":null,"Title":"Fix IFont and IPicture definitions","State":"closed","Body":"## Proposed Changes\r\n- Add missing `IFont` methods\r\n- Make `IFont` and `IPicture` tests `WinFormsFact` to run on STA thread\r\n- Make `HDC`/`HPALETTE`/`HBITMAP`/`HENHMETAFILE`/`HMETAFILE`/`HFONT` `int`s not `uint`s  due to sign extension bugs\r\n\r\n/cc @weltkante @JeremyKuhne \r\n\r\n\r\nFixes #2002, Fixes #2003, Fixes #2004, Fixes #2005, Fixes #2007\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2736)","Url":"https://github.com/dotnet/winforms/pull/2736","RelatedDescription":"Closed or merged PR \"Fix IFont and IPicture definitions\" (#2736)"},{"Id":"551962924","IsPullRequest":false,"CreatedAt":"2020-01-19T18:30:02","Actor":"hughbe","Number":"2742","RawContent":null,"Title":"Possible porting bug: ScrollBar.ScaleScrollBarForDpiChange is unused in .NET Core","State":"open","Body":"In .NET Framework, if `ScaleScrollBarForDpiChange` then the scroll bar's size does not change if DPI is rescaled.\r\n\r\nE.g. https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/ScrollBar.cs,218\r\n\r\nWe're missing this check in .NET Core","Url":"https://github.com/dotnet/winforms/issues/2742","RelatedDescription":"Open issue \"Possible porting bug: ScrollBar.ScaleScrollBarForDpiChange is unused in .NET Core\" (#2742)"},{"Id":"551919059","IsPullRequest":true,"CreatedAt":"2020-01-19T13:16:55","Actor":"dotnet-maestro[bot]","Number":"2738","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200118.1\r\n- **Date Produced**: 1/18/2020 1:38 PM\r\n- **Commit**: ebc71292545adda514c1e6a5657cd9ab753240bc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20068.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20068.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20068.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20068.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20068.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2738)","Url":"https://github.com/dotnet/winforms/pull/2738","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2738)"},{"Id":"551776559","IsPullRequest":true,"CreatedAt":"2020-01-18T14:30:53","Actor":"hughbe","Number":"2737","RawContent":null,"Title":"Cleanup DPI_AWARENESS_CONTEXT duplication","State":"open","Body":"## Proposed Changes\r\n- Fix https://github.com/dotnet/winforms/issues/1344\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2737)","Url":"https://github.com/dotnet/winforms/pull/2737","RelatedDescription":"Open PR \"Cleanup DPI_AWARENESS_CONTEXT duplication\" (#2737)"},{"Id":"551766434","IsPullRequest":true,"CreatedAt":"2020-01-18T13:16:57","Actor":"dotnet-maestro[bot]","Number":"2735","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200117.2\r\n- **Date Produced**: 1/17/2020 11:26 PM\r\n- **Commit**: 514e47a844ea7fe193978725c15e67ec16bff572\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20067.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20067.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20067.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20067.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20067.2\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2735)","Url":"https://github.com/dotnet/winforms/pull/2735","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2735)"},{"Id":"551416543","IsPullRequest":false,"CreatedAt":"2020-01-17T13:30:24","Actor":"weltkante","Number":"2734","RawContent":null,"Title":"CurrentCulture in unit tests?","State":"open","Body":"While updating the PaddingConverter tests in PR #2679 I noticed that it contains tests which only succeed on english (or similar) environments which use comma as separator. Some languages use semicolon due to comma being used as decimal separator. This leads to false-positive failing tests on developer machines.\r\n\r\nFailing tests are [PaddingConverter_ConvertFrom_String_ReturnsExpected](https://github.com/dotnet/winforms/blob/fde3805ea206227ad01266c7d25ce0ed2df4996f/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/PaddingConverterTests.cs#L41) on e.g. [this input](https://github.com/dotnet/winforms/blob/fde3805ea206227ad01266c7d25ce0ed2df4996f/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/PaddingConverterTests.cs#L30) as well as [PaddingConverter_ConvertTo_String_ReturnsExpected](https://github.com/dotnet/winforms/blob/fde3805ea206227ad01266c7d25ce0ed2df4996f/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/PaddingConverterTests.cs#L80). (I'm only selectively running tests locally so I'd assume there could be more instances of this problem in other tests.)\r\n\r\nDo you think tests should be running under fixed CurrentCulture (maybe some sort of fixture)? Maybe check how corefx is solving this problem when they are testing their converters/parsers.","Url":"https://github.com/dotnet/winforms/issues/2734","RelatedDescription":"Open issue \"CurrentCulture in unit tests?\" (#2734)"},{"Id":"551402524","IsPullRequest":true,"CreatedAt":"2020-01-17T13:16:45","Actor":"dotnet-maestro[bot]","Number":"2733","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200116.1\r\n- **Date Produced**: 1/16/2020 1:39 PM\r\n- **Commit**: bca68c2df2c6230389f10def3880a61db266c6c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20066.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20066.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20066.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20066.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20066.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2733)","Url":"https://github.com/dotnet/winforms/pull/2733","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2733)"},{"Id":"551131872","IsPullRequest":true,"CreatedAt":"2020-01-17T03:26:23","Actor":"AdamYoblick","Number":"2730","RawContent":null,"Title":"remove VS and roslyntools msbuild dependencies from our global.json","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2729\r\n\r\n\r\n## Proposed changes\r\n\r\n- Remove the vs and xcopy-msbuild entries from our global.json\r\n- This will make us build with dotnet instead of msbuild\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to build without having to install VS\r\n\r\n## Regression? \r\n\r\n- Yes, we were able to do this before\r\n\r\n## Risk\r\n\r\n- None\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Built on a clean VM\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2730)","Url":"https://github.com/dotnet/winforms/pull/2730","RelatedDescription":"Closed or merged PR \"remove VS and roslyntools msbuild dependencies from our global.json\" (#2730)"},{"Id":"551131271","IsPullRequest":false,"CreatedAt":"2020-01-17T03:26:23","Actor":"AdamYoblick","Number":"2729","RawContent":null,"Title":"Unable to build without VS installed","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\nIrrelevant (we don't need dotnet installed to build)\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nUnable to build on a clean VM without VS installed. Errors look like this:\r\n```\r\n:\\src\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\WinformsControlsTest.csproj : erro\r\nr : Version 5.0.100-alpha1-015536 of the .NET Core SDK requires at least version 16.3.0 of MSBuild. The current availab\r\nle version of MSBuild is 16.0.461.62831. Change the .NET Core SDK specified in global.json to an older version that req\r\nuires the MSBuild version currently available.\r\nC:\\src\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\WinformsControlsTest.csproj : erro\r\nr MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nShould be able to build\r\n\r\n**Minimal repro:**\r\n\r\nGet a clean Win10 VM without VS installed.\r\nClone the repo.\r\nbuild.","Url":"https://github.com/dotnet/winforms/issues/2729","RelatedDescription":"Closed issue \"Unable to build without VS installed\" (#2729)"},{"Id":"551049156","IsPullRequest":false,"CreatedAt":"2020-01-16T21:02:41","Actor":"JeremyKuhne","Number":"2728","RawContent":null,"Title":"WindowsFormsSynchronizationContext fails to construct","State":"closed","Body":"It appears that there is a thread safety issue with `ThreadContext`. This came up in #2603.\r\n\r\nHere is the debug runtime stack:\r\n\r\n```\r\nThe active test run was aborted. Reason: Test host process crashed : Process terminated. Assertion failed.\r\nhash table insert failed!  Load factor too high, or our double hashing function is incorrect.\r\n   at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\n   at System.Collections.Hashtable.set_Item(Object key, Object value)\r\n   at System.Windows.Forms.Application.ThreadContext..ctor()\r\n   at System.Windows.Forms.Application.ThreadContext.FromCurrent()\r\n   at System.Windows.Forms.WindowsFormsSynchronizationContext..ctor()\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.Create()\r\n   at Xunit.Sdk.UITestInvoker.<RunAsync>b__2_0()\r\n   at Xunit.Sdk.UITestInvoker.<>c__DisplayClass3_0.<RunOnSTA>b__0()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n\r\nIn release you get:\r\n\r\n```\r\nSystem.InvalidOperationException : Hashtable insert failed. Load factor too high. The most common cause is multiple threads writing to the Hashtable simultaneously.\r\n```","Url":"https://github.com/dotnet/winforms/issues/2728","RelatedDescription":"Closed issue \"WindowsFormsSynchronizationContext fails to construct\" (#2728)"},{"Id":"550793364","IsPullRequest":true,"CreatedAt":"2020-01-16T13:17:00","Actor":"dotnet-maestro[bot]","Number":"2727","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200115.5\r\n- **Date Produced**: 1/16/2020 5:26 AM\r\n- **Commit**: 39220c078e22f4b5a053e0de5c616a567446a0eb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20065.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20065.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20065.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20065.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20065.5\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2727)","Url":"https://github.com/dotnet/winforms/pull/2727","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2727)"},{"Id":"550742823","IsPullRequest":false,"CreatedAt":"2020-01-16T11:19:43","Actor":"M-Lipin","Number":"2726","RawContent":null,"Title":"WinForms Tooltips should become visible when hover over","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html    \r\nDescribe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nWinForms ToolTip should meet WCAG 2.1 requirements and satisfy the rule 1.4.13 \"Content on Hover or Focus\". For more details please see [WCAG 2.1 Criterion 1.4.13](https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html)\r\n\r\n**Expected behavior:**\r\nToolTip should become visible when hover over.\r\n\r\n**Minimal repro:**\r\n1. Create WinForms app with some control and ToolTip.\r\n2. Add the ToolTip text for the control.\r\n3. Run app, mouse over the control. ToolTip appears after a second.\r\n4. Mouse over the ToolTip (mouse should be out of the control). Observe: ToolTip disappears.\r\n","Url":"https://github.com/dotnet/winforms/issues/2726","RelatedDescription":"Open issue \"WinForms Tooltips should become visible when hover over\" (#2726)"},{"Id":"550525071","IsPullRequest":false,"CreatedAt":"2020-01-16T01:50:59","Actor":"vsfeedback","Number":"2723","RawContent":null,"Title":"6.4.2 .net Core with WinForms doesn't allow MainMenu","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/883311/642-net-core-with-winforms-doesnt-allow-mainmenu.html)._\n\n---\n[regression] [worked-in:6.4.0]\r\nI have tried porting old WinForms code to .net Core and it was working before I upgraded to 6.4.2 (I think I was using 6.4.1 before) but it might have been 6.4.0).\n\nNow when I try to run my program, I get the error:\nSystem.TypeLoadException: 'Could not load type 'System.Windows.Forms.MainMenu' from assembly 'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=xxxxxxxxxxxxx'.'\n\nBoth MainMenu and MenuItem create the same basic error.\n\nIf I comment out my menu and make my selections with procedure calls, I can get the program to run, so it is only the MainMenu class items that seem to have broken.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/14/2020, 03:33 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/2723","RelatedDescription":"Closed issue \"6.4.2 .net Core with WinForms doesn't allow MainMenu\" (#2723)"},{"Id":"550479133","IsPullRequest":false,"CreatedAt":"2020-01-15T23:07:09","Actor":"hsmoccio","Number":"2722","RawContent":null,"Title":"Erroneous border or spacing margin on TabControls","State":"open","Body":"* .NET Core Version: **3.1.1 (current)**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**Problem description:**\r\n\r\nSince inception, there has always been a thin border or spacing margin present on `TabControl` objects when its appearance property is set to `Normal` (the default). This border usually measures 1 pixel high on the bottom and 2 pixels wide on the right. It cannot be hidden or styled, and is not the same as the usual `BorderStyle` property which some controls implement.\r\n\r\nThis is a tiny but long-standing appearance bug. I have attached a screenshot with the border highlighted in red. This was done in MSPAINT as the the border cannot actually be styled.\r\n\r\n![TabControlBorderBug](https://user-images.githubusercontent.com/51760052/72478348-c749b880-37bf-11ea-9251-30bfed39884c.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe border/spacing margin should not be present. The `TabControl` should fill in these holes with its content.\r\n\r\n**Suggestions:**\r\n\r\n* Fix the underlying painting event to remove the border by filling in the empty space with the selected tab page's content.\r\n\r\n* Implement a `BorderStyle` property which can show or hide this border. However, it may technically not be considered a border since it only encases the control on the bottom and left.\r\n\r\n* Remove the spacing altogether. This may cause issues with control positioning on older projects because the size of the control changes slightly.\r\n\r\n**Minimal repro:**\r\n\r\nCreate a .NET Core WinForms project and add a `TabControl` and a few `TabPages` to the main form. Here's some code if you are using a version of Visual Studio which does not have the WinForms designer ready. Some color is added for visibility:\r\n\r\n```\r\nBackColor = Color.Pink;\r\n\r\nTabControl tc = new TabControl();\r\n\r\ntc.TabPages.Add(\"tp1\");\r\ntc.TabPages.Add(\"tp2\");\r\ntc.TabPages.Add(\"tp3\");\r\n\r\nTextBox tb = new TextBox();\r\ntb.BorderStyle = BorderStyle.None;\r\n\r\ntc.TabPages[1].BackColor = Color.LightBlue;\r\n\r\nControls.Add(tc);\r\ntc.SelectTab(1);\r\n```","Url":"https://github.com/dotnet/winforms/issues/2722","RelatedDescription":"Open issue \"Erroneous border or spacing margin on TabControls\" (#2722)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-01-22T05:31:04.8524569Z","RunDurationInMilliseconds":1140}