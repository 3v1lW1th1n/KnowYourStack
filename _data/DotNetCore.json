{"Data":{"Blog":{"FeedItems":[{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-23T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/23/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":35,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7301280619","Type":"PullRequestEvent","CreatedAt":"2018-02-27T04:10:46","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16607","RelatedDescription":"Merged pull request \"Re-attempt fixing case in GC reliability/stress night config \" (#16607) at dotnet/coreclr","RelatedBody":"#16595 didn't get in the last commit for some reason.. Corrections made."},{"Id":"7301208174","Type":"PullRequestEvent","CreatedAt":"2018-02-27T03:43:20","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16618","RelatedDescription":"Opened pull request \"[WIP] coreclr changes for ValueTask extensibility\" (#16618) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/27445\r\nThe APIs still need to be reviewed, and it's possible we could end up with a different design / different type names / etc.  But this should represent the bulk of the work.\r\n\r\nA few points:\r\n- Stream.Read/WriteAsync now both return ValueTasks.  FileStream would benefit from using a custom IValueTaskSource that could be pooled/reused, but I've left that for the future.\r\n- AsyncMethodBuilder has been updated so that async methods that await only Tasks and ValueTasks (including ones backed by Ts, Tasks, and IValueTaskSources) don't have to allocate a delegate and thus have just the single Task allocation for the whole method.\r\n- I'd previously gone through and updated ReadAsync calls to switch to using the new Memory-based APIs. Now that WriteAsync returns a ValueTask as well, I've also modified those.\r\n- In ValueTask, the coreclr implementation has several optimizations #ifdef'd that the netstandard build (out of code mirrored to corefx) won't have, e.g. AsTask is at worst a single allocation in coreclr whereas it may be two in the netstandard build."},{"Id":"7301104889","Type":"PullRequestEvent","CreatedAt":"2018-02-27T03:08:15","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16183","RelatedDescription":"Merged pull request \"Update the table-driven framework to support x86 imm-intrinsics\" (#16183) at dotnet/coreclr","RelatedBody":"This PR updates the table-driven framework to support x86 imm-intrinsics. After this update, implementing imm-intrinsics just needs one-line definition in `hwintrinsiclistxarch.h`.\r\n\r\nThis PR implements certain imm-intrinsics which have special semanctics\r\n1. `Avx.Compare\\CompareScalar` just accepts imm-value in 0-31. Out of range argument will trigger `ArgumentOutOfRangeException`.\r\n2. `Avx2\\Sse2.ShiftLeftLogical\\ShiftRightLogical\\ShiftRightArithmetic` never throw any exception\r\n    - that will be converted to `shift* ymm, ymm, xmm` (or `shift* xmm, xmm`)form when the imm-arg is not a constant. For example, `Avx2.ShiftLeftLogical(v, i)` would generate `vmovd   xmm1, edi;  vpsllw  ymm0, ymm0, xmm1` instead of the jumptable fallback.\r\n    - <del>`ShiftLeftLogical\\ShiftRightLogical` will be converted to `SetZeroVector256\\128` on out of range imm-arg.</del>\r\n    - <del>`ShiftRightArithmetic`'s imm-arg will be normalized to the maximum valid value on out of range imm-arg.</del>\r\n3. <del>`Avx2\\Sse2.ShiftLeftLogical128BitLane` will be converted to `SetZeroVector256\\128` on out of range imm-arg.</del>"},{"Id":"7300924274","Type":"PullRequestEvent","CreatedAt":"2018-02-27T02:10:07","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16616","RelatedDescription":"Opened pull request \"Fixed mixed mode attach/JIT debugging.\" (#16616) at dotnet/coreclr","RelatedBody":"The mixed mode debugging attach uses TLS slot to communicate between debugger break-in thread and the right side. Unfortunately, the __thread static variables cannot be used on debugger breakin\r\nthread because of it does not have storage allocated for them.\r\n\r\nThe fix is to switch the storage for debugger word to classic TlsAlloc allocated slot that works\r\nfine on debugger break-in thread.\r\n\r\nThere was also problem (that is also in 2.0) where the WINNT_OFFSETOF__TEB__ThreadLocalStoragePointer was using the define for 64/32 bit and ended up always the 32 bit Windows value. This caused the right side GetEEThreadValue, GetEETlsDataBlock unmanaged thread functions to always fail.\r\n\r\nCode reviewd by Jan Kotas and Noah Falk."},{"Id":"7300894803","Type":"PullRequestEvent","CreatedAt":"2018-02-27T02:01:01","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16597","RelatedDescription":"Merged pull request \"Upgrade TraceEvent and XUnit-Performance to Latest Versions\" (#16597) at dotnet/coreclr","RelatedBody":"This brings CoreCLR and CoreFX into sync."},{"Id":"7300810052","Type":"IssuesEvent","CreatedAt":"2018-02-27T01:34:34","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16614","RelatedDescription":"Opened issue \"Optimize Span ClearWithoutReferences so other platforms are on par with AMD64 CoreCLR\" (#16614) at dotnet/coreclr","RelatedBody":"See https://github.com/dotnet/coreclr/blob/22f1bc00d018a49f9550ee3b564f5f7737960b0d/src/mscorlib/shared/System/Span.NonGeneric.cs#L707\r\n\r\ncc @stephentoub, @jkotas, @GrabYourPitchforks "},{"Id":"7300799360","Type":"IssuesEvent","CreatedAt":"2018-02-27T01:31:12","Actor":"nategraf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16613","RelatedDescription":"Opened issue \"[Perf][x86] Investigate performance regression in FannkuchRedux_2 and FannkuchRedux_5\" (#16613) at dotnet/coreclr","RelatedBody":"There appears a 35% and 3% performance regression in release/2.1 as compared 7f143364a8ed1ebc51356195fc90bbe972c2c038\r\n\r\nA possible cause for this regression has yet be found"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7301019071","Type":"PullRequestEvent","CreatedAt":"2018-02-27T02:40:16","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8691","RelatedDescription":"Opened pull request \"[WIP] Implement the `list tool` command.\" (#8691) at dotnet/cli","RelatedBody":"This is a WIP as it is currently missing tests for the list-tool command.  I hope to have those completed tomorrow and then will update the PR.\r\n\r\nThis PR implements the `list tool` command for listing currently installed (global) tools."},{"Id":"7300704208","Type":"IssuesEvent","CreatedAt":"2018-02-27T01:02:20","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8690","RelatedDescription":"Opened issue \"The dotnet install tool fails if a feed can't be reached, even if the package is available in the offline cache. \" (#8690) at dotnet/cli","RelatedBody":"For example, this might happen when the machine is offline\r\n\r\nDue to by default nuget will throw if the a feed cannot reach.\r\n\r\n"},{"Id":"7300480560","Type":"PullRequestEvent","CreatedAt":"2018-02-26T23:56:11","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8689","RelatedDescription":"Opened pull request \"ingest runtime Rpm agnostic and produce Rpm agnostic packages\" (#8689) at dotnet/cli","RelatedBody":"this RP is built on top of https://github.com/dotnet/cli/pull/8625. I think it is better to create a different PR\r\n\r\nThe above insertion failed due to CLI cannot ingest runtime RPM agnostic packages. After this change, CLI will **produce** RPM agnostic packages as well. \r\n\r\nexample file name `dotnet-sdk-2.1.300-preview2-008268-x64.rpm`\r\ncc @leecow "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7298903116","Type":"PullRequestEvent","CreatedAt":"2018-02-26T18:24:07","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/659","RelatedDescription":"Merged pull request \"Fix typo\" (#659) at dotnet/standard","RelatedBody":""},{"Id":"7298225710","Type":"PullRequestEvent","CreatedAt":"2018-02-26T16:22:39","Actor":"elbro","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/659","RelatedDescription":"Opened pull request \"Fix typo\" (#659) at dotnet/standard","RelatedBody":""},{"Id":"7289990134","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:54:43","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/658","RelatedDescription":"Merged pull request \"Update BuildTools to 2.1.0-preview2-02522-03\" (#658) at dotnet/standard","RelatedBody":"This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734"},{"Id":"7289897216","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:28:21","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/658","RelatedDescription":"Opened pull request \"Update BuildTools to 2.1.0-preview2-02522-03\" (#658) at dotnet/standard","RelatedBody":"This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734"},{"Id":"7289502975","Type":"PullRequestEvent","CreatedAt":"2018-02-23T20:50:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/656","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02522-02 (master)\" (#656) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7301276583","Type":"IssuesEvent","CreatedAt":"2018-02-27T04:09:14","Actor":"nblumhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27498","RelatedDescription":"Opened issue \"Microsoft.Windows.Compatibility pulls in unlisted non-Microsoft MEF1 package\" (#27498) at dotnet/corefx","RelatedBody":"Guessing this may have already been noted elsewhere, but took me by surprise - the MEF1 work for the Windows Compatibility Pack hasn't been done yet (mentioned on #24909), but _Microsoft.Windows.Compatibility_ still declares it as a package dependency.\r\n\r\nThe NuGet client falls back to installing this unlisted non-Microsoft package uploaded in 2010:\r\n\r\nhttps://www.nuget.org/packages/System.ComponentModel.Composition\r\n\r\n"},{"Id":"7301209116","Type":"PullRequestEvent","CreatedAt":"2018-02-27T03:43:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27497","RelatedDescription":"Opened pull request \"[WIP] corefx changes for ValueTask extensibility\" (#27497) at dotnet/corefx","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/27445\r\nDepends on https://github.com/dotnet/coreclr/pull/16618\r\nThe APIs still need to be reviewed, and it's possible we could end up with a different design / different type names / etc.  But this should represent the bulk of the work.\r\n\r\nThe primary changes here are adapting all of the relevant APIs to return `ValueTask` instead of `Task`, and using the `ValueTask` and `ValueTask<T>`-returning APIs in more places; this includes changes to APIs on Streams, Sockets, WebSockets, and Channels.  Along the way as I was reviewing code I made a few other tweaks.\r\n\r\nThe two main places a custom IValueTaskSource is used is in Sockets (which then also directly surfaces through NetworkStream) and in Channels."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7301323215","Type":"PullRequestEvent","CreatedAt":"2018-02-27T04:28:07","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25071","RelatedDescription":"Merged pull request \"Update Mono apt repo URL\" (#25071) at dotnet/roslyn","RelatedBody":"We should figure out with the Mono people where we can point this to be resilient to changing packages, but this fixes the build for now."},{"Id":"7301310363","Type":"PullRequestEvent","CreatedAt":"2018-02-27T04:22:54","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25075","RelatedDescription":"Opened pull request \"Refactor PR: Visual Basic Test Helpers 2\" (#25075) at dotnet/roslyn","RelatedBody":"More renames of Visual Basic Test Helpers to match the counterparts in\r\nthe CSharp code\r\n\r\n"},{"Id":"7301186185","Type":"PullRequestEvent","CreatedAt":"2018-02-27T03:35:39","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25072","RelatedDescription":"Merged pull request \"Refactor PR: Visual Basic Test Helpers\" (#25072) at dotnet/roslyn","RelatedBody":"This is a refactor PR:\r\n\r\n- Removes the BasicTestBaseBase helper \r\n- Unifies parameter names with C# counter parts\r\n    - source: name ofr the test sources \r\n    - references: name for the parameters to add to the compilation"},{"Id":"7300925895","Type":"IssuesEvent","CreatedAt":"2018-02-27T02:10:34","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24774","RelatedDescription":"Closed issue \"Make OOP to use connection pool\" (#24774) at dotnet/roslyn","RelatedBody":"connection pool will make creating new connection to OOP almsot no cost at all. right now it is between 1-15ms based on how busy OOP is at the moment.\r\n\r\nthis should let feature writer to consume OOP easier than before when they need to make hundreds of connections."},{"Id":"7300848960","Type":"PullRequestEvent","CreatedAt":"2018-02-27T01:46:32","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25074","RelatedDescription":"Opened pull request \"fixed a bug where free after shutdown is not properly handled. this i…\" (#25074) at dotnet/roslyn","RelatedBody":"…s expected behavior. looks like got messed up while addressing PR feedbacks\r\n\r\n### Customer scenario\r\n\r\nUsers shutdown VS after using C#/Vb and VS crashes.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/572016\r\n\r\n### Workarounds, if any\r\n\r\none can set hidden reg key to turn off connection pool but it requires special reg key\r\n\r\n### Risk\r\n\r\nI don't see any risk\r\n\r\n### Performance impact\r\n\r\nNo perf impact\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes. Connection Pool is newly added to 15.7 to improve perf.\r\n\r\n### Root cause analysis\r\n\r\nFree being called for a connection after OOP is asked to shutdown is expected since connection is given out to async workers and we can't control their lifetime. this is common to any pool. existing code didn't handle this properly.\r\n\r\n### How was the bug found?\r\n\r\nTesting\r\n"},{"Id":"7300819680","Type":"IssuesEvent","CreatedAt":"2018-02-27T01:37:32","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25073","RelatedDescription":"Opened issue \"[Draft] Test plan for ExpressionVariables\" (#25073) at dotnet/roslyn","RelatedBody":"This is a placeholder for a draft test plan for the work in https://github.com/dotnet/roslyn/tree/features/ExpressionVariables\r\nThe championed proposal is at https://github.com/dotnet/csharplang/issues/32\r\nThe proposal is at https://github.com/dotnet/csharplang/blob/master/proposals/expression-variables-in-initializers.md\r\n\r\nTests for the following probably predate this feature's implementation:\r\n- [ ] Test that an expression variable declaration in any of the three contexts is an error if the name is used to declare a local in an enclosing scope\r\n- [ ] Test that an expression variable declaration in any of the three contexts is an error if the name is used to declare a local in a nested scope\r\n- [ ] Test that an expression variable declaration in any of the three contexts is an error if the name is used to declare a local in the same scope\r\n- [ ] Each of the above for each of the ways a local can be declared (if possible)\r\n- [ ] Each of the above for each of the ways an expression variable can be declared (if possible)\r\n\r\n- [ ] Test that an expression variable declared in a ctor-initializer (test both this() and base())\r\n  - [ ] can be used later in the ctor-initializer\r\n  - [ ] cannot be used earlier in the ctor-initializer\r\n  - [ ] can be used in the body (expression body, block body, or both)\r\n  - [ ] can be inferred\r\n    - [ ] But if an inferred out variable, may not be used later in the same argument list\r\n- [ ] Test that an expression variable in a field initializer\r\n  - [ ] may be used later in that same initializing expression\r\n  - [ ] may not be used before its point of declaration\r\n  - [ ] is not in scope in the initializers for any other fields (even in the same declaration).\r\n  - [ ] can be inferred\r\n    - [ ] But if an inferred out variable, may not be used later in the same argument list\r\n- [ ] Test that an expression variable in a query clause\r\n  - [ ] may be used later in that same expression of the query clause\r\n  - [ ] may not be used before its point of declaration\r\n  - [ ] is not in scope in other expressions of the query clause\r\n  - [ ] is not in scope in other query clauses\r\n  - [ ] can be inferred\r\n    - [ ] But if an inferred out variable, may not be used later in the same argument list\r\n- [ ] Each of the above for each of the ways an expression variable can be declared (if possible)\r\n\r\n- [ ] Test that an expression variable declared in the initializing expression of a top-level variable in a script is in the global scope of the script.\r\n\r\n/cc @AlekseyTs "},{"Id":"7300750179","Type":"PullRequestEvent","CreatedAt":"2018-02-27T01:16:36","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24165","RelatedDescription":"Merged pull request \"Remove IVisualStudioWorkspaceHost and related interfaces\" (#24165) at dotnet/roslyn","RelatedBody":"This interface was originally introduced to support CodeLens, when we needed the ability to create a Workspace that was out-of-proc but connected to the in-process project system interfaces. This created the abstraction of how we pushed updates to the workspace, and came with the rule that the VisualStudioProjectTracker was unable to ever touch a workspace directly.\r\n\r\nToday, that's not how we build our out-of-proc components. We now have an in-proc workspace, and we mirror that in-proc workspace via a pull model to the out-of-process workspace. This meant that the\r\ninterface was nearly pointless, except it was being used for the out-of-proc workspace setup to mirror some persistence settings over. Providing a new interface to do that directly is simpler and also\r\nmuch cheaper, as it doesn't come with the overhead of pushing workspace changes to the remote host that were being ignored.\r\n\r\nThis has the direct perf benefit of removing some delays around setting up the remote workspace since we're not computing useless data. It has longer-term benefits to aid in further refactorings, as we now have workspace updates going directly to the in-proc workspace, which we can start to do in a free-threaded manner.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nThis is refactoring some ickier bits of our project system shims to enable us to make them free-threaded.\r\n\r\n### Bugs this fixes\r\n\r\nNo particular bug, this is new feature work.\r\n\r\n### Risk\r\n\r\nModerate: this is a tricky area of code with lots of tangled dependencies. (Trying to remove them is part of the point of this.)\r\n\r\n### Performance impact\r\n\r\nNone expected, as this is largely removing layers of indirection.\r\n\r\n</details>\r\n"},{"Id":"7300746450","Type":"PullRequestEvent","CreatedAt":"2018-02-27T01:15:34","Actor":"t-camaia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25026","RelatedDescription":"Merged pull request \"SkipLocalsInitAttribute propagates from Methods to Local Functions an…\" (#25026) at dotnet/roslyn","RelatedBody":"…d Lambdas.\r\n\r\nSimply added a bool in SynthesizedClosureMethod and two tests."},{"Id":"7300665280","Type":"PullRequestEvent","CreatedAt":"2018-02-27T00:50:35","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25072","RelatedDescription":"Opened pull request \"Refactor PR: Visual Basic Test Helpers\" (#25072) at dotnet/roslyn","RelatedBody":"This is a refactor PR:\r\n\r\n- Removes the BasicTestBaseBase helper \r\n- Unifies parameter names with C# counter parts\r\n    - source: name ofr the test sources \r\n    - references: name for the parameters to add to the compilation"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7301095547","Type":"PullRequestEvent","CreatedAt":"2018-02-27T03:05:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5450","RelatedDescription":"Merged pull request \"Avoid async method caching of a 0 decimal task\" (#5450) at dotnet/corert","RelatedBody":"Port CoreCLR #16588. This is under #if 0 in CoreRT right now, but it does not hurt to keep it in sync."},{"Id":"7300942379","Type":"PullRequestEvent","CreatedAt":"2018-02-27T02:15:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5451","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5451) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7300789750","Type":"PullRequestEvent","CreatedAt":"2018-02-27T01:28:21","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5451","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5451) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7300647286","Type":"PullRequestEvent","CreatedAt":"2018-02-27T00:45:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5450","RelatedDescription":"Opened pull request \"Avoid async method caching of a 0 decimal task\" (#5450) at dotnet/corert","RelatedBody":"Port CoreCLR #16588. This is under #if 0 in CoreRT right now, but it does not hurt to keep it in sync."},{"Id":"7298610986","Type":"PullRequestEvent","CreatedAt":"2018-02-26T17:32:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5439","RelatedDescription":"Merged pull request \"Move check for IsByRefLike to MakeArrayType\" (#5439) at dotnet/corert","RelatedBody":"Having a call to `IsByRefLike` in the type unifier meant that an app that uses a simple `typeof()` would require the full reflection stack to be present in the image (all of the custom attribute resolution, method resolution, etc.).\r\n\r\nThis is a step towards having a more pay for play framework (a hello world EXE really should not have the full reflection stack compiled in it)."},{"Id":"7297854669","Type":"PullRequestEvent","CreatedAt":"2018-02-26T15:24:02","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5449","RelatedDescription":"Opened pull request \"Change new ThreadPool.QueueUserWorkItem method to be generic\" (#5449) at dotnet/corert","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/27464\r\nPort of https://github.com/dotnet/coreclr/pull/16570\r\ncc: @kouvel, @jkotas, @benaadams "},{"Id":"7296659723","Type":"PullRequestEvent","CreatedAt":"2018-02-26T11:33:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5448","RelatedDescription":"Opened pull request \"Revert \"Make g_rgWellKnownMethodNames specific to binder (#5390)\"\" (#5448) at dotnet/corert","RelatedBody":"This reverts commit b02c2edaa6b4390615de5bb1daefdf1ec39d5e7b.\r\n\r\nThis commit didn't actually fully fix #5390 (it's an external issue), but it triggered a linker warning on Windows (`AsmOffsetsVerify.obj : warning LNK4221: This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library`). It doesn't seem worth it to try to fix the warning and the useless `extern` nicely works around the problem..."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7300546063","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:14:33","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1998","RelatedDescription":"Opened issue \"Cannot create tool with P2P using dotnet pack\" (#1998) at dotnet/sdk","RelatedBody":"fail with \r\n`/usr/local/share/dotnet/sdk/2.1.300-preview1-008162/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): Could not find a part of the path '/Users/williamli/Downloads/testp2p/leaf/bin/Debug/netcoreapp2.1/publish'. [/Users/williamli/Downloads/testp2p/main/main.csproj]`\r\n"},{"Id":"7300481028","Type":"PullRequestEvent","CreatedAt":"2018-02-26T23:56:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1997","RelatedDescription":"Opened pull request \"Port fix to make satellite generation work for VB to release/2.1.1xx\" (#1997) at dotnet/sdk","RelatedBody":"**Customer scenario**\r\n\r\nVB project using SDK and having satellite assemblies. Build breaks trying to compile the Assembly info for the satellite that is written out in VB instead of C# even though satellite builds in SDK always invoke the C# compiler.\r\n\r\n2.1.1xx and 2.1.2xx SDKs cannot build themselves because Roslyn in these release branches depends on having this fix.\r\n\r\n**Bugs this fixes:** \r\n\r\nhttps://github.com/dotnet/sdk/issues/1748 (Already fixed, but only for 2.1.300+ and this is a request to have it included in the next 2.1.1xx servicing release as well as 2.1.200.)\r\n\r\n**Workarounds, if any**\r\n\r\nWait for 2.1.300 to be released (which already has the fix).\r\n\r\nCopy entire target with fix into Directory.Build.targets. This is very fragile because it would shut off any future fixes to the target and tie the customer project to internal implementation details of the SDK. I would be very hesitant to recommend this.\r\n\r\nSource build can apply a patch, but this keeps a discrepancy betweeen source and non-source-builds and adds debt. By putting this low risk fix into the next servicing release, we eliminate that debt sooner.\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nNone\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo. It was broken since the first release that supported VB (1.1 I believe), but Roslyn was the first customer to report it. It seems the intersection of VB sdk projects and satellite assemblies is small.\r\n\r\n**Root cause analysis:**\r\n\r\nInsufficient VB coverage.\r\n\r\nInsufficient understanding / communication that a Roslyn branch effectively cannot depend on a CLI newer than the CLI release train it is on. Otherwise, source build will break. Moving forward, any fix we take to unblock Roslyn will need to consider the correlation between Roslyn branches and CLI branches.\r\n\r\n**How was the bug found?**\r\n\r\nDogfooding\r\n"},{"Id":"7300319896","Type":"PullRequestEvent","CreatedAt":"2018-02-26T23:12:30","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1992","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/2.1\" (#1992) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7297610690","Type":"IssuesEvent","CreatedAt":"2018-02-26T14:44:55","Actor":"jkotas","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1996","RelatedDescription":"Opened issue \"netstandard deps.json and the netfx gac are not compatible\" (#1996) at dotnet/sdk","RelatedBody":"_From @ForkBug on February 26, 2018 14:32_\n\nI create a windows C# project A. A refers to netstandard project B. B refers to a couple of nuget, like C,D,E.\r\nThe problem is, C,D,E couldn't be found in A's project output folder. They have to be copied manually.\r\n\r\nThe root cause may be the netstandard deps.json and the netfx gac are not compatible. Core/netstandard use another way to find dependencies.\r\n\r\nRecursive copy referred netstandard dll to VS output folder, may fix this problem. But it mostly like a workaround\n\n_Copied from original issue: dotnet/coreclr#16569_"},{"Id":"7295671972","Type":"PullRequestEvent","CreatedAt":"2018-02-26T08:00:47","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1995","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to master\" (#1995) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7295671865","Type":"PullRequestEvent","CreatedAt":"2018-02-26T08:00:45","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1994","RelatedDescription":"Opened pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#1994) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7295671697","Type":"PullRequestEvent","CreatedAt":"2018-02-26T08:00:42","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1993","RelatedDescription":"Opened pull request \"Merge release/2.1 to release/2.1.1xx\" (#1993) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into release/2.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-release/2.1.1xx\ngit reset --hard upstream/release/2.1.1xx\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-release/2.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"968171532038975489","CreatedAt":"2018-02-26T17:10:55+00:00","UserScreenname":"dotnet","Text":"Learn about async/await best practices from @BrandonXamarin - https://t.co/JMIkq5iZti show https://t.co/lHr6F9jmEI /cc @ch9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":94,"FavoriteCount":32,"RawContent":null},{"Id":"967455752855027712","CreatedAt":"2018-02-24T17:46:40+00:00","UserScreenname":"dotnet","Text":"Please take a moment and think of all the office chairs that were destroyed in the office olympics.\n\n@gotheap’s tea… https://t.co/8RvGxAQI5o","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":29,"FavoriteCount":4,"RawContent":null},{"Id":"966205758831554561","CreatedAt":"2018-02-21T06:59:38+00:00","UserScreenname":"dotnet","Text":"Are you following these amazing people already? Expand your list :-) https://t.co/g02dmPDLsX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":12,"RawContent":null},{"Id":"965964952375873544","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"dotnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/ioBP2nkstm","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"965646227764232192","CreatedAt":"2018-02-19T17:56:16+00:00","UserScreenname":"dotnet","Text":"Interactive learning with Try .NET with @LadyNaggaga https://t.co/8btikidagq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":24,"RawContent":null},{"Id":"964556484267868162","CreatedAt":"2018-02-16T17:46:01+00:00","UserScreenname":"dotnet","Text":"How can #VisualStudio help you get started building #dotNET apps in #Azure? Join @PaulYuki99 &amp; @andrewBrianHall at… https://t.co/Sws9Apkm6t","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":19,"FavoriteCount":13,"RawContent":null}]}},"RunOn":"2018-02-27T05:30:20.1182347Z","RunDurationInMilliseconds":7832}