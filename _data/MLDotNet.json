{"Data":{"GitHub":{"Issues":[{"Id":"353133987","IsPullRequest":true,"CreatedAt":"2018-08-22T21:33:38","Actor":"Zruty0","Number":"716","RawContent":null,"Title":"SDCA trainers become Estimators","State":"open","Body":"Converted the SDCA family to Estimators","Url":"https://github.com/dotnet/machinelearning/pull/716","RelatedDescription":"Open PR \"SDCA trainers become Estimators\" (#716)"},{"Id":"353129833","IsPullRequest":false,"CreatedAt":"2018-08-22T21:19:46","Actor":"yaeldekel","Number":"715","RawContent":null,"Title":"Find a C# API for extracting input/output metadata from ONNX models","State":"open","Body":"This will be needed for implementing an ONNX transform, so that we can validate the names and sizes of the inputs, and be able to know the sizes of the outputs in advance (before we see any data).","Url":"https://github.com/dotnet/machinelearning/issues/715","RelatedDescription":"Open issue \"Find a C# API for extracting input/output metadata from ONNX models\" (#715)"},{"Id":"353128512","IsPullRequest":false,"CreatedAt":"2018-08-22T21:15:26","Actor":"yaeldekel","Number":"714","RawContent":null,"Title":"Test TensorFlow pre-trained models","State":"open","Body":"We should run some TensorFlow pre-trained models using the TensorFlowTransform and validate the results.","Url":"https://github.com/dotnet/machinelearning/issues/714","RelatedDescription":"Open issue \"Test TensorFlow pre-trained models\" (#714)"},{"Id":"353126659","IsPullRequest":false,"CreatedAt":"2018-08-22T21:09:34","Actor":"yaeldekel","Number":"713","RawContent":null,"Title":"Package TF binaries in a separate nuget package for distribution","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/713","RelatedDescription":"Open issue \"Package TF binaries in a separate nuget package for distribution\" (#713)"},{"Id":"353126229","IsPullRequest":false,"CreatedAt":"2018-08-22T21:08:16","Actor":"yaeldekel","Number":"712","RawContent":null,"Title":"Enable outputting multiple layers in one call to TF","State":"open","Body":"Users should be able to specify a list of output names to the TF transform arguments.","Url":"https://github.com/dotnet/machinelearning/issues/712","RelatedDescription":"Open issue \"Enable outputting multiple layers in one call to TF\" (#712)"},{"Id":"352308659","IsPullRequest":true,"CreatedAt":"2018-08-22T17:19:22","Actor":"eerhardt","Number":"698","RawContent":null,"Title":"Add convenience constructors for TextLoader.","State":"closed","Body":"Creating a TextLoader and specifying its arguments manually is too verbose. We should add a few constructor overloads to make it easier.\r\n\r\nThis work item is related to the new API proposal #371","Url":"https://github.com/dotnet/machinelearning/pull/698","RelatedDescription":"Closed or merged PR \"Add convenience constructors for TextLoader.\" (#698)"},{"Id":"353047060","IsPullRequest":false,"CreatedAt":"2018-08-22T17:15:33","Actor":"Zruty0","Number":"711","RawContent":null,"Title":"Perf benchmarks for optimization","State":"open","Body":"We want to have a couple ML scenarios to be used for tracking performance. We can use it to detect regression from build to build, as well as improve performance.","Url":"https://github.com/dotnet/machinelearning/issues/711","RelatedDescription":"Open issue \"Perf benchmarks for optimization\" (#711)"},{"Id":"352958681","IsPullRequest":false,"CreatedAt":"2018-08-22T13:40:54","Actor":"JeataekRyu","Number":"710","RawContent":null,"Title":"Is there any way to make it the same as the vector created by the TextFeaturizer in ML.NET(ex. korean, chinese) unsupported language?","State":"open","Body":"pipeline.Add(New TextFeaturizer(\"Features\", \"Text\"))\r\n\r\nWhen  language(like Korean, Chinese) support is not available, it seems that i can create a learning model by using  my own vector(based on the language text). If possible, I hope that the relevant content is shared.","Url":"https://github.com/dotnet/machinelearning/issues/710","RelatedDescription":"Open issue \"Is there any way to make it the same as the vector created by the TextFeaturizer in ML.NET(ex. korean, chinese) unsupported language?\" (#710)"},{"Id":"352906101","IsPullRequest":false,"CreatedAt":"2018-08-22T11:09:14","Actor":"EduardoGarcias","Number":"709","RawContent":null,"Title":"Data preprocessing question","State":"open","Body":"I'd like to ask a few question regarding data preprocessing in ML.NET.\r\n\r\n1.) Is there a possibility of getting rid of **outliers** in case of input data?\r\n2.) Is it possible to perform a **normalization** or **standardization** on the input data?\r\n\r\nThank you in advance.","Url":"https://github.com/dotnet/machinelearning/issues/709","RelatedDescription":"Open issue \"Data preprocessing question\" (#709)"},{"Id":"352857147","IsPullRequest":false,"CreatedAt":"2018-08-22T08:44:26","Actor":"Balduran90","Number":"708","RawContent":null,"Title":"Sentinemt Analysis - ML prediction wrong","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10  Pro x64\r\n- **.NET Version (eg., dotnet --info)**:  .NET version 4.7/ C# 7.2\r\n\r\n### Issue\r\nI used the \"sentiment analysis\" tutorial and wrote the console application as described.\r\nIt seems to be working, but the predictions are wrong. The model predicts \"positive\" every time.\r\nI used the training and testing data from github of course.\r\n\r\n\r\n### Source code / logs\r\n`using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Models;\r\nusing Microsoft.ML.Runtime.Api;\r\nusing Microsoft.ML.Trainers;\r\nusing Microsoft.ML.Transforms;\r\n\r\nnamespace MyML\r\n{\r\n    class Program{\r\n        \r\n        //Variables for training and testing\r\n        static readonly string _dataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"wikipedia-detox-250-line-data.tsv\");\r\n        static readonly string _testDataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"wikipedia-detox-250-line-test.tsv\");\r\n        static readonly string _modelpath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"Model.zip\");\r\n\r\n        //starting the program\r\n        static async Task Main(string[] args){\r\n            var model = await Train();\r\n            Evaluate(model);\r\n            Predict(model);\r\n\r\n            //keeps the console open until enter is pressed\r\n            Console.WriteLine(\"Done. Press 'Enter' to exit.\");\r\n            Console.ReadLine();\r\n        }\r\n\r\n        //Creating and training the model. Writes learned data into a .zip file\r\n        public static async Task<PredictionModel<SentimentData, SentimentPrediction>> Train(){\r\n            var pipeline = new LearningPipeline();\r\n            pipeline.Add(new TextLoader(_dataPath).CreateFrom<SentimentData>());\r\n            pipeline.Add(new TextFeaturizer(\"Features\", \"SentimentText\"));\r\n            pipeline.Add(new FastTreeBinaryClassifier() { NumLeaves = 5, NumTrees = 5, MinDocumentsInLeafs = 2 });\r\n            PredictionModel<SentimentData, SentimentPrediction> model =\r\n            pipeline.Train<SentimentData, SentimentPrediction>();\r\n            await model.WriteAsync(_modelpath);\r\n            return model;\r\n        }\r\n\r\n        //Evaluating data after model training\r\n        public static void Evaluate(PredictionModel<SentimentData, SentimentPrediction> model){\r\n            var testData = new TextLoader(_testDataPath).CreateFrom<SentimentData>();\r\n            var evaluator = new BinaryClassificationEvaluator();\r\n            BinaryClassificationMetrics metrics = evaluator.Evaluate(model, testData);\r\n\r\n            //Console user information\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"PredictionModel quality metrics evaluation\");\r\n            Console.WriteLine(\"------------------------------------------\");\r\n            Console.WriteLine($\"Accuracy: {metrics.Accuracy:P2}\");\r\n            Console.WriteLine($\"Auc: {metrics.Auc:P2}\");\r\n            Console.WriteLine($\"F1Score: {metrics.F1Score:P2}\");\r\n        }\r\n\r\n        //Method for sentiment prediction. Use after training & evaluation\r\n        public static void Predict(PredictionModel<SentimentData, SentimentPrediction> model){\r\n            //Small testdata for prediction\r\n            IEnumerable<SentimentData> sentiments = new[] {\r\n                new SentimentData{\r\n                    SentimentText = \"Please refrain from adding nonsense to Wikipedia.\"},\r\n                new SentimentData{\r\n                    SentimentText = \"He is the best, and the article should say that.\"}\r\n            };\r\n\r\n            IEnumerable<SentimentPrediction> predictions = model.Predict(sentiments);\r\n\r\n            //User information header\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"Sentiment Predictions\");\r\n            Console.WriteLine(\"---------------------\");\r\n\r\n            var sentimentsAndPredictions = sentiments.Zip(predictions, (sentiment, prediction) => (sentiment, prediction));\r\n\r\n            //Write prediction to console for the user\r\n            //Error! The model predicts \"Positive\" every time!\r\n            foreach (var item in sentimentsAndPredictions)\r\n            {\r\n                Console.WriteLine($\"Sentiment: {item.sentiment.SentimentText} | Prediction: {(item.prediction.Sentiment ? \"Positive\" : \"Negative\")}\");\r\n            }\r\n            Console.WriteLine();\r\n        }\r\n    }\r\n}\r\n`\r\n`using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.ML.Runtime.Api;\r\n\r\nnamespace MyML\r\n{\r\n    public class SentimentData\r\n    {\r\n        [Column(ordinal: \"0\", name: \"Label\")]\r\n        public float Sentiment;\r\n        [Column(ordinal: \"1\")]\r\n        public string SentimentText;\r\n    }\r\n\r\n    public class SentimentPrediction\r\n    {\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public bool Sentiment;\r\n    }\r\n}\r\n`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/708","RelatedDescription":"Open issue \"Sentinemt Analysis - ML prediction wrong\" (#708)"},{"Id":"352756926","IsPullRequest":false,"CreatedAt":"2018-08-22T00:25:04","Actor":"Zruty0","Number":"707","RawContent":null,"Title":"Need a 'workout test' for estimators","State":"open","Body":"Pretty much any `IEstimator` needs to adhere to certain properties, which we should enforce in a test:\r\n\r\nEstimator `est`:\r\n- `est.Fit()` throws on a data if `est.GetOutputSchema()` throws on its schema.\r\n  - The opposite may not be true.\r\n- `est.Fit()` on the same data produces identical transformers.\r\n- Schema validation errors should look properly (same message).\r\n\r\nFitted transformer `xf = est.Fit(data)`:\r\n- `xf` should be able to transform the data it was fitted on.\r\n- `xf.GetOutputSchema()` should match `est.GetOutputSchema()`.\r\n- `xf.Transform()` throws on a data if `xf.GetOutputSchema()` throws on its schema.\r\n  - The opposite may not be true.\r\n- Save/load should be transparent for `xf`. \r\n- Subject the outputs of `xf.Transform()` to the same workouts as we do for transforms: `CheckSameSchema`, `CheckSameValues`.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/707","RelatedDescription":"Open issue \"Need a 'workout test' for estimators\" (#707)"},{"Id":"352745900","IsPullRequest":true,"CreatedAt":"2018-08-21T23:23:13","Actor":"Ivanidzo4ka","Number":"706","RawContent":null,"Title":"WIP copy column estimator","State":"open","Body":"+ @Zruty0 ","Url":"https://github.com/dotnet/machinelearning/pull/706","RelatedDescription":"Open PR \"WIP copy column estimator\" (#706)"},{"Id":"352741604","IsPullRequest":true,"CreatedAt":"2018-08-21T23:01:35","Actor":"codemzs","Number":"705","RawContent":null,"Title":"WIP Replace DvText with .NET Standard type.","State":"open","Body":"I need to do some clean up but its good for initial review.","Url":"https://github.com/dotnet/machinelearning/pull/705","RelatedDescription":"Open PR \"WIP Replace DvText with .NET Standard type.\" (#705)"},{"Id":"351674145","IsPullRequest":true,"CreatedAt":"2018-08-21T22:06:23","Actor":"Zruty0","Number":"688","RawContent":null,"Title":"API scenarios implementation with Estimators","State":"closed","Body":"First version of a couple scenarios over Estimators","Url":"https://github.com/dotnet/machinelearning/pull/688","RelatedDescription":"Closed or merged PR \"API scenarios implementation with Estimators\" (#688)"},{"Id":"352713186","IsPullRequest":true,"CreatedAt":"2018-08-21T21:15:40","Actor":"abgoswam","Number":"704","RawContent":null,"Title":"TensorFlowMapper transform for scoring Tensorflow models in ML.NET","State":"open","Body":"Fixes #696 \r\n\r\nThis PR creates a new transform 'TensorFlowMapper' for scoring Tensorflow models in ML.NET.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/704","RelatedDescription":"Open PR \"TensorFlowMapper transform for scoring Tensorflow models in ML.NET\" (#704)"},{"Id":"351762242","IsPullRequest":true,"CreatedAt":"2018-08-21T16:31:35","Actor":"eerhardt","Number":"690","RawContent":null,"Title":"Move to netcoreapp2.1","State":"closed","Body":"Since .NET Core 2.0 is [getting to the end of its lifetime](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/), we should upgrade our tests and build infrastructure to .NET Core 2.1.\r\n\r\nFYI - @TomFinley @codemzs @Ivanidzo4ka @Zruty0 ","Url":"https://github.com/dotnet/machinelearning/pull/690","RelatedDescription":"Closed or merged PR \"Move to netcoreapp2.1\" (#690)"},{"Id":"352327477","IsPullRequest":true,"CreatedAt":"2018-08-21T16:15:00","Actor":"danmosemsft","Number":"701","RawContent":null,"Title":"Add package tags","State":"closed","Body":"Fix https://github.com/dotnet/machinelearning/issues/484\r\n\r\nAdd some tags to the nuget package to help us appear more prominently when searching for \"ML.NET\"\r\n\r\nWe can also add a custom title (see first commit) which apparently helps, but it is probably not a good idea, since as @eerhardt pointed out, one might expect to be able to add `<PackageReference Include=\"ML.NET\" />` if the title is `ML.NET`, but not the package ID.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/701","RelatedDescription":"Closed or merged PR \"Add package tags\" (#701)"},{"Id":"352602524","IsPullRequest":true,"CreatedAt":"2018-08-21T15:45:25","Actor":"adamsitnik","Number":"703","RawContent":null,"Title":"Few benchmark fixes","State":"open","Body":"1. I added README.md so everyone can find out how to run the benchmarks\r\n2. I fixed a bug in the benchmarks where it was returning a lazy-executed `IEnumerable<T>` without the actual execution. So instead of 16 nanoseconds we now have 2.3 milisecond ;)\r\n3. I updated BenchmarkDotNet to latest version to get advantage of performance improvements and new features.\r\n4. I have changed the configuration to run not 3 (`Job.Short`) but up to 20 iterations (BenchmarkDotNet implements a heuristic based on standard error and runs the benchmarks until they are not stable). 3 iterations is simply not enough to get trustworthy results.\r\n\r\n/cc @danmosemsft @KrzysztofCwalina ","Url":"https://github.com/dotnet/machinelearning/pull/703","RelatedDescription":"Open PR \"Few benchmark fixes\" (#703)"},{"Id":"352429217","IsPullRequest":false,"CreatedAt":"2018-08-21T08:06:52","Actor":"JeataekRyu","Number":"702","RawContent":null,"Title":"Can I get an example of simple naive bayes based on ML.NET?","State":"open","Body":"I would like to use NaiveBayesClassifier instead of StochasticDualCoordinateAscentBinaryClassifier, but the example [here ](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.naivebayesclassifier?view=ml-dotnet)is not detailed and has limitations.\r\n\r\nI want to do various tests with ML.NET, but there are not many examples, I can not find any explanation, and there are many restrictions on learning. In particular, I wonder how to useFeatureColumn, LabelColumn, and TrainingData.\r\n\r\nI think it will be improvement in the future, but I want to know when the plan will be.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/702","RelatedDescription":"Open issue \"Can I get an example of simple naive bayes based on ML.NET?\" (#702)"},{"Id":"352317120","IsPullRequest":true,"CreatedAt":"2018-08-20T22:20:15","Actor":"eerhardt","Number":"700","RawContent":null,"Title":" Replace all ML.Transforms SubComponent usages with IComponentFactory.","State":"open","Body":"Working towards #585\r\n\r\nPlease ignore the first commit, it is being proposed separately as #698. I am using these new constructors in this PR, so I needed to include it.  If you have any comments regarding it directly, please put them on #698.\r\n\r\nThere are 2 \"hacks\" in this PR that I'm not proud of:\r\n\r\n1. `LearnerFeatureSelectionTransform` depends on `SDCA`, but `ML.Transforms` doesn't have a reference to `ML.StandardLearners`. I wasn't sure how to proceed here (add the dependency, or move some code around).  For now I continued to use Dependency Injection to create the component. Please give me your opinion on what the best approach forward would be.\r\n\r\n2. `RffTransform` has an undesirable coupling to which kind of MatrixGenerator it is using (gaussian or not). Previously, it was using the ComponentCatalog to determine which type of MatrixGenerator it was working with before actually creating it. However, I can no longer do that without actually creating the generator, so I needed to make a \"dummy\" instance. I spoke with @yaeldekel, and we decided this was \"OK\" for now, since it typically only used with a small number of columns (i.e. 1). I've logged #699 for this.","Url":"https://github.com/dotnet/machinelearning/pull/700","RelatedDescription":"Open PR \" Replace all ML.Transforms SubComponent usages with IComponentFactory.\" (#700)"},{"Id":"352317080","IsPullRequest":false,"CreatedAt":"2018-08-20T22:20:04","Actor":"eerhardt","Number":"699","RawContent":null,"Title":"RffTransform has undesirable coupling to its MatrixGenerator","State":"open","Body":"`RffTransform` has an undesirable coupling to which kind of MatrixGenerator it is using (gaussian or not). \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e77f24e68d92f033910a5d783576d1879763d979/src/Microsoft.ML.Transforms/RffTransform.cs#L421-L425\r\n\r\nIt is using the ComponentCatalog to determine which type of MatrixGenerator it was working with before actually creating it. And then depending on the Type, it is doing a different distance scaling algorithm.\r\n\r\nThis type of decision (which algorithm to use for distance scaling) should be done by the MatrixGenerator itself, and not necessarily decided by the RffTransform.\r\n\r\nI am changing RffTransform to no longer use SubComponent. However, I can no longer tell which type of MatrixGenerator is going to be created without actually creating the generator, so I needed to make a \"dummy\" instance. I spoke with @yaeldekel, and we decided this was \"OK\" for now, since it typically only used with a small number of columns (i.e. 1).\r\n\r\nWe should consider refactoring RffTransform and the IFourierDistributionSampler types to allow RffTransform to not have to switch based on whether Gaussian sampling is used or not.","Url":"https://github.com/dotnet/machinelearning/issues/699","RelatedDescription":"Open issue \"RffTransform has undesirable coupling to its MatrixGenerator\" (#699)"},{"Id":"352284689","IsPullRequest":false,"CreatedAt":"2018-08-20T20:29:34","Actor":"justinormont","Number":"697","RawContent":null,"Title":"Attribution of Wikipedia images","State":"open","Body":"Images in https://github.com/dotnet/machinelearning/tree/master/test/data/images/ need citations to their Wikipedia sources. \r\n\r\n![Banana](https://github.com/dotnet/machinelearning/blob/bdb742d3cc2bc273b18831e7e778f95a81e96a56/test/data/images/banana.jpg?raw=true)\r\n\r\nPerhaps listing in the [README.md](https://github.com/dotnet/machinelearning/blob/5e812d166d01d9cbd4c9ed16d4648041fbb7c83a/test/data/README.md) file? ","Url":"https://github.com/dotnet/machinelearning/issues/697","RelatedDescription":"Open issue \"Attribution of Wikipedia images\" (#697)"},{"Id":"352216279","IsPullRequest":false,"CreatedAt":"2018-08-20T16:53:01","Actor":"yaeldekel","Number":"696","RawContent":null,"Title":"Enable scoring of TensorFlow models in ML.NET","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/696","RelatedDescription":"Open issue \"Enable scoring of TensorFlow models in ML.NET\" (#696)"},{"Id":"352215404","IsPullRequest":false,"CreatedAt":"2018-08-20T16:50:19","Actor":"yaeldekel","Number":"695","RawContent":null,"Title":"Enable scoring of ONNX models in ML.NET","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/695","RelatedDescription":"Open issue \"Enable scoring of ONNX models in ML.NET\" (#695)"},{"Id":"351917460","IsPullRequest":false,"CreatedAt":"2018-08-19T16:53:11","Actor":"ArieJones","Number":"694","RawContent":null,"Title":"Confusion matrices didn't have enough matrices","State":"open","Body":"We are running into this error when we try to do a cross validation of a classifier.. \r\n```\r\nnew StochasticDualCoordinateAscentClassifier()\r\n                {\r\n                    Caching = CachingOptions.Memory,\r\n                    MaxIterations = 100,\r\n                    LossFunction = new SmoothedHingeLossSDCAClassificationLossFunction(),\r\n                    NumThreads = System.Environment.ProcessorCount - 1  //We use one less than the number of processors available\r\n                }\r\n\r\n```\r\nSystem.InvalidOperationException: 'Confusion matrices didn't have enough matrices.'\r\n\r\n\r\nThis seems to be thrown only at the very end.. because it seems to be rolling through just fine ..outputting the below on each iteration.. \r\n\r\n`Not training a calibrator because it is not needed.\r\nAutomatically adding a MinMax normalization transform, use 'norm=Warn' or 'norm=No' to turn this behavior off.\r\nUsing 3 threads to train.\r\nAutomatically choosing a check frequency of 3.\r\nAuto-tuning parameters: L2 = 8.341675E-05.\r\nAuto-tuning parameters: L1Threshold (L1/L2) = 1.\r\nUsing best model from iteration 33.`\r\n\r\n\r\nIs there something that we are doing incorrectly such as we need to specify the number of folds to use? \r\n\r\nThanks,\r\nAJ","Url":"https://github.com/dotnet/machinelearning/issues/694","RelatedDescription":"Open issue \"Confusion matrices didn't have enough matrices\" (#694)"},{"Id":"351880144","IsPullRequest":true,"CreatedAt":"2018-08-19T07:05:42","Actor":"codemzs","Number":"693","RawContent":null,"Title":"Replace DvDateTimeZone, DvDateTime, DvTimeSpan with .NET standard types.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/693","RelatedDescription":"Open PR \"Replace DvDateTimeZone, DvDateTime, DvTimeSpan with .NET standard types.\" (#693)"},{"Id":"351859667","IsPullRequest":true,"CreatedAt":"2018-08-18T23:24:26","Actor":"codemzs","Number":"692","RawContent":null,"Title":"Replace DvBool with .NET standard type.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/692","RelatedDescription":"Open PR \"Replace DvBool with .NET standard type.\" (#692)"},{"Id":"351777552","IsPullRequest":true,"CreatedAt":"2018-08-18T01:10:29","Actor":"briancylui","Number":"691","RawContent":null,"Title":"Port all relevant AVX hardware intrinsics C# APIs from SIMD native algorithms","State":"open","Body":"### What's new:\r\n1. Implemented all relevant AVX intrinsics, sharing the same software fallbacks previously implemented in `CpuMathUtils`\r\n2. Implemented unit tests in a way compatible with both AVX and SSE alignments, and both netcoreapp and netstandard\r\n2. Implemented separate performance tests for AVX and SSE intrinsics, except for those that accept `AlignedArray` as an argument\r\n3. Performance test results for all applicable AVX intrinsics are updated in https://github.com/briancylui/machinelearning/issues/1\r\n4. **Note:** This time, most AVX intrinsics with the `U` suffix are implemented from scratch and do not yet have support from [native code](https://github.com/dotnet/machinelearning/blob/b51d9f9060acfcbe84405ce37f9c045654573ee0/src/Native/CpuMathNative/Avx.cpp), which only contains their counterparts with the `X` suffix.\r\n\r\n\r\n### Description from https://github.com/dotnet/machinelearning/pull/668:\r\n1. Implemented all remaining active SSE intrinsics, including their software fallbacks and passing unit tests\r\n2. Implemented the performance tests of all remaining active SSE intrinsics, except for those that accept `AlignedArray` as an argument\r\n3. Performance test results for all applicable, active SSE intrinsics are updated in https://github.com/briancylui/machinelearning/issues/1\r\n\r\n### Description from https://github.com/dotnet/machinelearning/pull/562:\r\n- with unit tests and performance tests for two target frameworks: .NET Core App 3.0 and .NET Standard 2.0.\r\n- .NET Core App 3.0 gets the new C# hardware intrinsics APIs, while .NET Standard 2.0 gets the original native SIMD algorithms.\r\n- Several things have made this multi-targeting feature possible.\r\n   1. The new CpuMathUtils class that contains the new APIs is implemented as a partial class with method definitions split into two separate files (src\\Microsoft.ML.CpuMath\\CpuMathUtils.[target].cs), only one of which is compiled based on the target framework.\r\n   2. The Microsoft.ML.CpuMath.csproj file makes the switching decision to compile the right files based on the target framework.\r\n\r\n### Structure:\r\n1. All new hardware intrinsics APIs are contained in src\\Microsoft.ML.CpuMath.\r\n2. Unit tests for the two target frameworks live in test\\Microsoft.ML.CpuMath.UnitTests.[target], and contain the same content except for the target framework in .csproj.\r\n3. Performance tests live in test\\Microsoft.ML.CpuMath.PerformanceTests.\r\n\r\n### Changes to users:\r\n1. Originally, users call intrinsics APIs via the SseUtils class in src\\Microsoft.ML.CpuMath\\Sse.cs, but now they call them via the new CpuMathUtils class, which will handle switching between SSE and AVX in the future.\r\n2. CpuMathUtils methods and SseUtils methods share the same signature, but CpuMathUtils methods additionally call a new helper class (SseIntrinsics) for C# implementations of SSE operations.\r\n\r\n### Future follow-up for `CpuMath` enhancement\r\n1. Suggestions on `CpuMath` enhancement in this PR scheduled for future follow-ups have been compiled into an issue page (https://github.com/briancylui/machinelearning/issues/2).\r\n\r\ncc: @eerhardt @safern @tannergooding @danmosemsft ","Url":"https://github.com/dotnet/machinelearning/pull/691","RelatedDescription":"Open PR \"Port all relevant AVX hardware intrinsics C# APIs from SIMD native algorithms\" (#691)"},{"Id":"351703424","IsPullRequest":false,"CreatedAt":"2018-08-17T18:55:01","Actor":"eerhardt","Number":"689","RawContent":null,"Title":"Consider removing Sweeper, PipelineInference, and ResultProcessor assemblies from Microsoft.ML nuget","State":"open","Body":"We currently have a few assemblies in our `Microsoft.ML` nuget package that aren't part of what we want in our public API surface area.\r\n\r\nThese assemblies include:\r\n\r\n* Microsoft.ML.Maml\r\n* Microsoft.ML.ResultProcessor\r\n* Microsoft.ML.PipelineInference\r\n* Microsoft.ML.Sweeper\r\n\r\nThe last two may some day be part of our public API, but in their current form we don't want to expose them as public API.\r\n\r\nWe should remove these assemblies from our nuget package (maybe put them in a separate nuget package), so external users don't depend on these types. That way we are free to update the API until we are ready to ship it as an official API.\r\n\r\n/cc @Zruty0 @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/689","RelatedDescription":"Open issue \"Consider removing Sweeper, PipelineInference, and ResultProcessor assemblies from Microsoft.ML nuget\" (#689)"},{"Id":"351668715","IsPullRequest":true,"CreatedAt":"2018-08-17T17:03:31","Actor":"Zruty0","Number":"687","RawContent":null,"Title":"API scenarios implemented with Estimators API","State":"closed","Body":"Added some Estimators-based scenarios and stopgap implementations of necessary components","Url":"https://github.com/dotnet/machinelearning/pull/687","RelatedDescription":"Closed or merged PR \"API scenarios implemented with Estimators API\" (#687)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-23T05:30:35.2996706Z","RunDurationInMilliseconds":1097}