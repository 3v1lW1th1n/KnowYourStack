{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Today, we are releasing the January 2018 Security and Quality Rollup. Please avoid installing this update on Windows 7 or Windows Server 2008 R2. See .NET Framework January 2018 Rollup Known Issue...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7089640941","Type":"PullRequestEvent","CreatedAt":"2018-01-12T04:07:33","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15837","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx to preview1-26112-01, preview1-26112-01, respectively (master)\" (#15837) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7089412649","Type":"PullRequestEvent","CreatedAt":"2018-01-12T02:32:34","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15836","RelatedDescription":"Opened pull request \"Refactoring emitInsBinary\" (#15836) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/coreclr/issues/15829"},{"Id":"7089333426","Type":"PullRequestEvent","CreatedAt":"2018-01-12T02:01:16","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15807","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, PgoData to prerelease-02411-04, preview1-26111-02, preview1-26111-02, master-20180111-0041, respectively (master)\" (#15807) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7089586716","Type":"PullRequestEvent","CreatedAt":"2018-01-12T03:43:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8377","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26111-03 (master)\" (#8377) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7089185857","Type":"IssuesEvent","CreatedAt":"2018-01-12T01:06:46","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8381","RelatedDescription":"Opened issue \"Incorrect error message with missing package name for install tool command\" (#8381) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\n$ dotnet install tool\r\n```\r\n\r\n## Expected  behavior\r\nAn error message is printed about the missing tool package name.\r\n\r\n## Actual behavior\r\n```\r\n$ dotnet install tool\r\npackageId\r\nUsage: dotnet install tool [options] <packageId>\r\n\r\nArguments:\r\n  <packageId>   Package Id in NuGet\r\n\r\nOptions:\r\n  --version           Version of the package in NuGet\r\n  --configfile        NuGet configuration file\r\n  -f, --framework     Target framework to publish for. The target framework has to be specified in the project file.\r\n  -h, --help          Show help information.\r\n```\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007928)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007928\r\n Commit SHA-1 hash:  0d6f8f9d59\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.2.0-preview1-007928/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26110-02\r\n  Build    : 77152705cd56e7d89f52585959ec3559d91084c4\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7088911336","Type":"PullRequestEvent","CreatedAt":"2018-01-11T23:30:57","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8371","RelatedDescription":"Merged pull request \"Use a multi-proc aware MSBuild logger\" (#8371) at dotnet/cli","RelatedBody":"Make use of the MSBuild distributed logger functionality and add a\r\nforwarding logger. When in a multi-proc build, the forwarding logger\r\nwill decide which events to forward to the main node to be logged.\r\nWithout this, all events are routed and a perf penalty is incurred.\r\n\r\nFixes https://github.com/Microsoft/msbuild/issues/2769\r\n\r\nNote: I got unrelated build errors in VS. So I haven't actually tested this. But it should eliminate the perf issue. In my own testing firing off a few thousand events that my forwarding logger ignored had zero perf penalty from no logger while a regular, no-op, logger increased the build time by more than double. Feel free to take this over or let me know which branch, and I might have questions if I have trouble testing."},{"Id":"7088899549","Type":"PullRequestEvent","CreatedAt":"2018-01-11T23:27:14","Actor":"tannergooding","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8376","RelatedDescription":"Merged pull request \"Updating the ArchiveExtension to be zip everywhere\" (#8376) at dotnet/cli","RelatedBody":"Packages are agnostic and this greatly simplifies our production/consumption logic for intermediate components.\r\n\r\nThe final packages (those created in core-sdk that are released for production) will still be platform specific (zip on windows, tar.gz elsewhere).\r\n"},{"Id":"7088719751","Type":"PullRequestEvent","CreatedAt":"2018-01-11T22:37:06","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8354","RelatedDescription":"Merged pull request \"Remove method to publish to Debian feeds.\" (#8354) at dotnet/cli","RelatedBody":"**Follow-up actions:**\r\nRemove the variables:\r\n\"REPO_SERVER\"\r\n\"REPO_PASS\"\r\n\"REPO_USER\"\r\n\"debian8x64RepositoryId\"\r\n\"ubuntu1404x64RepositoryId\"\r\n\"ubuntu1604x64RepositoryId\"\r\nfrom CLI:master VSO build definitions.\r\n\r\n\r\n  "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7088753160","Type":"PullRequestEvent","CreatedAt":"2018-01-11T22:45:46","Actor":"ahsonkhan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/620","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02411-04 (master)\" (#620) at dotnet/standard","RelatedBody":""},{"Id":"7081339249","Type":"PullRequestEvent","CreatedAt":"2018-01-10T16:19:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/620","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02410-01 (master)\" (#620) at dotnet/standard","RelatedBody":""},{"Id":"7080349426","Type":"IssuesEvent","CreatedAt":"2018-01-10T13:12:15","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/615","RelatedDescription":"Closed issue \"Missing binary/namespace from NuGet package in .NET Standard 2.0 library\" (#615) at dotnet/standard","RelatedBody":"Hello, I'm writing a .NET Standard 2.0 library and I'm having issues with a NuGet package I'd like to use (https://www.nuget.org/packages/Alea/) which I think is only supported for PCL libraries right now, and was wondering if there was a workaround available.\r\n\r\nI can install the package just fine, but its assemblies aren't visible in the drop-down list of the dependencies, and I don't have any of the namespaces in the project:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/34453242-1c63ff6e-ed4f-11e7-9bc0-dd75319bff04.png)\r\n\r\nI tried to manually link the net45 binaries by modifying the .csproj file for the library, like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"Alea\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Alea.IL\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.IL.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Alea.Parallel\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.Parallel.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nAnd this actually works perfectly fine - I can use the library both from a .NET Core 2.0 application, and if I use it from a .NET Framework application (where those GPU libraries are originally supposed to work), I can also use the code from that package just fine.\r\n\r\nThe problem is that this workaround is only looking for the net45 binaries, and I'm not even sure they'd get installed in that path automatically regardless of the PC building the solution.\r\n\r\nMy question is:\r\n\r\n> Since the library itself works just fine in a .NET Standard 2.0 library, is there a way to make it so that these missing binaries are correctly linked/referenced and added to the project, so that their namespaces are available when coding in the project?\r\n\r\nSee the original Stack Overflow question here: https://stackoverflow.com/questions/48030077/alea-gpu-on-net-standard-2-0-will-this-workaround-work\r\n\r\nThank you for your help!\r\n\r\n**EDIT:** I did a couple tests installing the NuGet package ([here](https://www.nuget.org/packages/NeuralNetwork.NET/)) into a .NET Framework 4.7.1 console app, I've cleared the NuGet cache before that and everything works fine, the Alea package is correctly restored for the net45 platform, so those .dll are loaded successfully by the library (through those `HintPath`s above.\r\n\r\nThe problem with this is that I'm quite sure it wouldn't work when using Mono/Xamarin, as those paths are hardcoded as \"net45\", while on those frameworks that wouldn't be right.\r\nI can't use the `$(TargetFrameworkVersion)` macro, as that would just return \"netstandard2.0\", since that's the library framework.\r\n\r\n> Is there any workaround to at least have that `HintPath` trick work on different platforms/frameworks, so that even if the .dlls aren't automatically referenced by NuGet, they'll be found by the user application using the library?\r\n\r\n  "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7089642564","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:08:19","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26290","RelatedDescription":"Opened issue \"OS builds matrix in README.md\" (#26290) at dotnet/corefx","RelatedBody":"The matrix is getting out of date. It should be scrubbed and updated to match the current state of the world and our builds."},{"Id":"7089583051","Type":"PullRequestEvent","CreatedAt":"2018-01-12T03:41:51","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26289","RelatedDescription":"Opened pull request \"Remove use of Unsafe in UTF-8 formatters, plus performance improvements\" (#26289) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/25648.\r\n\r\nMy first attempt to switch the implementations from unsafe code to safe buffer-based code was a bit naive and resulted in considerable performance degradation (double-digit percentage loss of throughput across many APIs). I've spent time reworking the implementations to to work around the performance loss, and in many cases the new implementations are faster than the originals.\r\n\r\nFor reviewers: I recommend looking at each commit in isolation, as each commit deals with a very specific formatter. It'll also be easier to see which helper routines in `FormatterHelpers` correlate with which implementations."},{"Id":"7089571681","Type":"PullRequestEvent","CreatedAt":"2018-01-12T03:36:55","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26245","RelatedDescription":"Merged pull request \"Rename System.Runtime.Intrinsics.X86 to System.Runtime.Intrinsics.\" (#26245) at dotnet/corefx","RelatedBody":"Since the ref assembly is so small, it doesn't pay to split each architecture into separate assemblies.  Also, there are common types shared between architectures - ex. Vector128.\r\n\r\nFix #26194 \r\n\r\n/cc @sdmaclea @fiigii @CarolEidt @jkotas "},{"Id":"7089571677","Type":"IssuesEvent","CreatedAt":"2018-01-12T03:36:54","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26194","RelatedDescription":"Closed issue \"Proposal rename System.Runtime.Intrinsics.X86.dll to System.Runtime.Intrinsics.dll\" (#26194) at dotnet/corefx","RelatedBody":"For HW Intrinsics X86 has created `System.Runtime.Intrinsics.X86.dll`.  It currently contains Vector128, and Vector256 from `System.Runtime.Intrinsics` as well as the X86\r\nHW intrinsics from `System.Runtime.Intrinsics.X86`\r\n\r\nARM64 intrinsics will use Vector128 from `System.Runtime.Intrinsics`\r\nARM64 intrinsics will add Vector64 to `System.Runtime.Intrinsics`\r\n\r\nThe question arises about where to put ARM64 intrinsic reference assemblies.\r\n\r\nIt seems any application which takes the time to optimize code using intrinsics may want to support multiple platforms.\r\n\r\nMy preference would be to add ARM64 intrinsics to the same reference assembly.  Therefore to rename the reference assembly to a more generic name `System.Runtime.Intrinsics.dll` rather than creating `System.Runtime.Intrinsics.ARM.ARM64.dll` and later `System.Runtime.Intrinsics.ARM.ARM32.dll`.\r\n\r\n@eerhardt @CarolEidt @RussKeldorph Please advise\r\n\r\n@tannergooding @fiigii FYI\r\n  "},{"Id":"7089392784","Type":"IssuesEvent","CreatedAt":"2018-01-12T02:24:45","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26288","RelatedDescription":"Opened issue \"WebSocketProtocol_CreateFromConnectedStream_Succeeds fails at ReceiveAsync\" (#26288) at dotnet/corefx","RelatedBody":"This issue tracks to fix the test."},{"Id":"7089284051","Type":"PullRequestEvent","CreatedAt":"2018-01-12T01:42:41","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26287","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26112-01 (master)\" (#26287) at dotnet/corefx","RelatedBody":""},{"Id":"7089256555","Type":"PullRequestEvent","CreatedAt":"2018-01-12T01:32:17","Actor":"weshaggard","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26286","RelatedDescription":"Opened pull request \"Update references assemblies to include private fields for structs\" (#26286) at dotnet/corefx","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/6185.\r\n\r\nThis is an update to the rest of the reference assemblies in corefx. I updated every reference assembly that as a struct with any private fields. Some of the refs that weren't easy to regenerate I did targeted fixes for and others I regenerated with the latest tools so there are some other normalization changes in some of the refs.\r\n\r\nPTAL @jkotas @VSadov @jaredpar @gafter @tmat @nguerrera "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7089405763","Type":"PullRequestEvent","CreatedAt":"2018-01-12T02:29:59","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24199","RelatedDescription":"Opened pull request \"Support System.Enum as a valid generic type constraint\" (#24199) at dotnet/roslyn","RelatedBody":""},{"Id":"7089320846","Type":"PullRequestEvent","CreatedAt":"2018-01-12T01:56:38","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24198","RelatedDescription":"Opened pull request \"Internal error in Immediate Window when trying to create an already e…\" (#24198) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/22599 and https://github.com/dotnet/roslyn/issues/22474\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7089296302","Type":"PullRequestEvent","CreatedAt":"2018-01-12T01:46:58","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24197","RelatedDescription":"Opened pull request \"Active Statement Handling\" (#24197) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7089578598","Type":"PullRequestEvent","CreatedAt":"2018-01-12T03:39:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5238","RelatedDescription":"Opened pull request \"Fix public surface to match CoreCLR\" (#5238) at dotnet/corert","RelatedBody":""},{"Id":"7084744887","Type":"PullRequestEvent","CreatedAt":"2018-01-11T08:25:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5225","RelatedDescription":"Merged pull request \"Add MonoGame sample\" (#5225) at dotnet/corert","RelatedBody":""},{"Id":"7084524447","Type":"PullRequestEvent","CreatedAt":"2018-01-11T07:21:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5237","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5237) at dotnet/corert","RelatedBody":""},{"Id":"7084524113","Type":"PullRequestEvent","CreatedAt":"2018-01-11T07:21:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5237","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5237) at dotnet/corert","RelatedBody":""},{"Id":"7084523302","Type":"PullRequestEvent","CreatedAt":"2018-01-11T07:20:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5236","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5236) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7084096323","Type":"PullRequestEvent","CreatedAt":"2018-01-11T04:32:22","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5236","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5236) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7084078274","Type":"PullRequestEvent","CreatedAt":"2018-01-11T04:24:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5234","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5234) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7083816516","Type":"PullRequestEvent","CreatedAt":"2018-01-11T02:38:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5185","RelatedDescription":"Merged pull request \"Update the way metadata blobs get hooked up\" (#5185) at dotnet/corert","RelatedBody":"This is mostly a mechanical change: when MRT100.dll was brought up on Project X, a new property got added to metadata manager: `SupportsReflection`.\r\n\r\nAll the metadata blobs got always hooked up into the dependency graph, but `SupportsReflection` was used to skip emitting them (because MRT100.dll has a base class library that doesn't have fancy reflection or type loader anyway, so no point in emitting the blobs). Turns out this is kind of backwards: metadata managers have different needs when it comes to what blobs will be generated (as proven by the ugly `#if !CORERT` we had in MetadataManager.cs). Metadata manager should decide what blobs are needed. This commit makes the hookup behavior polymorphic.\r\n\r\nAfter I did that, this actually found places in the compiler that were still injecting blob-required dependencies into the graph that triggered generation of all sorts of garbage that we didn't need because we don't generate the blob (we probably still generated the unreferenced garbage in the obj file though).\r\n\r\nThe remaining places that call `SupportsReflection` serve as a pretty good marker for things we should probably move to metadata manager too (in the same fashion we moved the reflection dependencies)."},{"Id":"7083093837","Type":"IssuesEvent","CreatedAt":"2018-01-10T22:38:06","Actor":"jcouv","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5235","RelatedDescription":"Opened issue \"[ILVerify] Directory structure for splitting ILVerify into exe+dll\" (#5235) at dotnet/corert","RelatedBody":"I’m going to split ILVerify.exe into an exe and a dll containing the public APIs, as we discussed in https://github.com/dotnet/corert/pull/5186.\r\n\r\nCurrently, the directory structure is:\r\n```\r\nILVerify/\r\n              Src/ -> produces ILVerify.exe\r\n              Test/\r\n```\r\n\r\nI see two options: \r\n```\r\nILVerify/\r\n              Src/ -> produces ILVerify.exe\r\nILVerification/\r\n              Src/ -> produces new library\r\n              Test/\r\n```\r\nOR\r\n```\r\nILVerify/\r\n              Src/ -> produces ILVerify.exe\r\n              Lib/ -> produces new library (which I propose calling ILVerification.dll)\r\n              Test/\r\n```\r\n\r\nThe first option is more in-line with the organization of the repo, so I’m assuming that’s what you prefer. \r\nCan you confirm?\r\n\r\nDoes ILVerification.dll sound ok? (an alternative could be ILAnalysis.dll)\r\n\r\nTagging @jkotas @ArztSamuel @KrzysztofCwalina \r\n\r\n"},{"Id":"7082638713","Type":"PullRequestEvent","CreatedAt":"2018-01-10T20:51:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5186","RelatedDescription":"Merged pull request \"Add public API for ILVerify\" (#5186) at dotnet/corert","RelatedBody":"@ArztSamuel @jkotas @VSadov  Here is another stab at a public API for ILVerify.\r\nThe ILVerify program, the ILVerify tests and the Roslyn tests all rely on the same API, summarized below. There are two APIs that are internal and used by the ILVerify tests.\r\n```C#\r\nnamespace ILVerify\r\n{\r\n    public delegate bool ShouldVerifyMethod(string name);\r\n\r\n    public interface IResolver\r\n    {\r\n        PEReader Resolve(AssemblyName name);\r\n    }\r\n\r\n    public class Verifier\r\n    {\r\n        public ShouldVerifyMethod ShouldVerifyMethod { set; } // Used by ILVerify program to filter which methods should be verified vs. skipped\r\n        public Verifier(IResolver resolver);\r\n        internal Verifier(SimpleTypeSystemContext context); // Used by the ILVerify tests\r\n        public void SetSystemModuleName(AssemblyName name);\r\n        public VerificationResult Verify(AssemblyName moduleToVerify);\r\n    }\r\n\r\n    public class VerificationResult\r\n    {\r\n        public int NumErrors = 0;\r\n        public string Message = string.Empty;\r\n        internal IEnumerable<VerifierError> _errors; // Note: there may be fewer errors recorded here than counted in NumErrors, which also counts exceptions. Used by the ILVerify tests\r\n    }\r\n\r\n    public class VerifierException : Exception\r\n    {\r\n        public VerifierException(string message) : base(message)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote 1: there is auto-discovery feature for the system module. It is required for Roslyn tests which create their own core library, but the test framework doesn't know when that is the case. If this feature feels wrong, I can further explore a Roslyn-side solution.\r\n\r\nNote 2: the `SimpleTypeSystemContext` keeps a cache of `EcmaModule`s (`_modules`). That is currently keyed on simple name instead of full name. That's because I don't know how to get a full name from an `EcmaModule` or `MetadataReader` (see `CreateModule` method). Any tips?\r\n\r\nIf the API looks good, I will clean up this PR (removing strong name using Roslyn key, switch back to an exe).\r\n\r\nFixes https://github.com/dotnet/corert/issues/3734\r\n  "},{"Id":"7082638703","Type":"IssuesEvent","CreatedAt":"2018-01-10T20:51:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/3734","RelatedDescription":"Closed issue \"[ILVerify] Define and Implement a public API surface\" (#3734) at dotnet/corert","RelatedBody":"Currently basically everything is internal in ILVerify. \r\n\r\nHaving a public API surface is needed for at least two things:\r\n\r\n- Supporting a .dll flavor, so it can be embedded into any .NET application\r\n- Creating tests without exposing every internal data structure to the test code. (see https://github.com/dotnet/corert/pull/3725#discussion_r118855361) \r\n\r\nStep1: would be: let's discuss what we want to expose as public API \r\nStep2: implement it. I'm happy to do that. "},{"Id":"7082046792","Type":"PullRequestEvent","CreatedAt":"2018-01-10T18:41:26","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5234","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5234) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7088988488","Type":"PullRequestEvent","CreatedAt":"2018-01-11T23:56:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1848","RelatedDescription":"Merged pull request \"VB-specific DocumentationFile generation.\" (#1848) at dotnet/sdk","RelatedBody":"Fixes #1598\r\n\r\nVB targets already include `$(IntermediateOutputPath)`, so don't add it for `GenerateDocumentationFile`."},{"Id":"7088988486","Type":"IssuesEvent","CreatedAt":"2018-01-11T23:56:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1598","RelatedDescription":"Closed issue \"GenerateDocumentationFile=true breaks DebugSymbolsProjectOutputGroup in VB projects\" (#1598) at dotnet/sdk","RelatedBody":"Get the following when trying to replace `<DocumentationFile>Foo.xml</DocumentationFile>` with `<GenerateDocumentionFile>true</GenerateDocumentationFile>`.\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\\Microsoft.Common.CurrentVersion.targets(5458,44): error MSB4023: Cannot evaluate the item metadata \"%(FullPath)\". The item metadata \"%(FullPath)\" cannot be applied to the path \"D:\\Src\\roslyn\\Binaries\\Obj\\BasicEditorFeatures\\Debug\\D:\\Src\\roslyn\\Binaries\\Obj\\BasicEditorFeatures\\Debug\\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.xml\". The given path's format is not supported. [D:\\Src\\roslyn\\src\\EditorFeatures\\VisualBasic\\BasicEditorFeatures.vbproj]\r\n```\r\n\r\nThe issue is that VB targets do not expect DocumentationFile to include the IntermediateOutputPath like C# targets, so GenerateDocumentationFile needs to behave differently for VB than C#."},{"Id":"7088905947","Type":"PullRequestEvent","CreatedAt":"2018-01-11T23:29:15","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1852","RelatedDescription":"Merged pull request \"Fix spelling of 'overridden'\" (#1852) at dotnet/sdk","RelatedBody":"This typo fix affects msbuild metadata, but it is non-breaking because it was just introduced with #1805 and hasn't shipped."},{"Id":"7088375409","Type":"PullRequestEvent","CreatedAt":"2018-01-11T21:17:24","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1852","RelatedDescription":"Opened pull request \"Fix spelling of 'overridden'\" (#1852) at dotnet/sdk","RelatedBody":"This typo fix affects msbuild metadata, but it is non-breaking because it was just introduced with #1805 and hasn't shipped."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":13,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":27,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":54,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":64,"RawContent":null},{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-01-12T05:30:21.8877335Z","RunDurationInMilliseconds":8512}