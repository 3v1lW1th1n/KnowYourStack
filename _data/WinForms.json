{"Data":{"GitHub":{"Issues":[{"Id":"593096486","IsPullRequest":true,"CreatedAt":"2020-04-09T01:43:10","Actor":"weltkante","Number":"3035","RawContent":null,"Title":"Make NativeWindow.CreateHandle reentrant","State":"closed","Body":"Fixes #2979\r\n\r\n## Proposed changes\r\n\r\n- Make `NativeWindow.CreateWindow` reentrant\r\n\r\n## Customer Impact\r\n\r\n- Creating a control may execute user code, if such user code creates additional controls this causes reentrancy which under some conditions can lead to an exception because NativeWindow.CreateWindow isn't prepared for this case.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Fixes a data structure corruption, probably not going to get worse\r\n\r\n## Test methodology\r\n\r\n- Manual testing of the scenario in #2979\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3035)","Url":"https://github.com/dotnet/winforms/pull/3035","RelatedDescription":"Closed or merged PR \"Make NativeWindow.CreateHandle reentrant\" (#3035)"},{"Id":"596911644","IsPullRequest":true,"CreatedAt":"2020-04-08T22:57:12","Actor":"paul1956","Number":"3050","RawContent":null,"Title":"WIP - Single instance","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2056\r\n\r\n## Proposed changes\r\nUse NamedPipes to support VB Single Instance\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\nVB needs to support Single Instance applications, this supports existing Framework features including passing command line arguments from additional launches back to first instance.\r\n\r\n## Regression? \r\n- Yes I am fixing a regression\r\n\r\n## Risk\r\nNo automated tests are included until design review (it was tested manually). Also I only write tests in VB and all the tests here are written in C#.\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\nManual not ready to Merge. The logic is from Reference Source and Microsoft NamedPipes documentation examples.\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft.WindowsDesktop.App 5.0.0-preview.1.20127.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3050)","Url":"https://github.com/dotnet/winforms/pull/3050","RelatedDescription":"Open PR \"WIP - Single instance\" (#3050)"},{"Id":"596476952","IsPullRequest":false,"CreatedAt":"2020-04-08T10:33:16","Actor":"John-Qiao","Number":"3049","RawContent":null,"Title":"String Collection Editor dialog is incorrect for PropertiesToLoad property in DirectorySearcher control","State":"open","Body":"\r\n**.NET Core Version:**\r\n\r\n5.0.100-preview.4.20202.8 + Dev16 16.6.0 [30006.145.master]\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\n\r\nNo\r\n\r\n**Problem description:**\r\n\r\nWhen edit the PropertiesToLoad property for a DirectorySearcher control in PropertyGrid, the incorrect String Collection Editor dialog be opened.\r\n![Core5 0](https://user-images.githubusercontent.com/45864985/78774488-533a3d80-79c7-11ea-90a4-9e60a367d950.png)\r\n\r\n**More info:**\r\n\r\nThis issue occurs in .NET Core 3.1 too.\r\n\r\n**Expected behavior:**\r\n\r\nThe correct String Collection Editor dialog should be opened.\r\n![Framework](https://user-images.githubusercontent.com/45864985/78774362-26862600-79c7-11ea-9ba8-71365e7d51b6.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Launch the attached project in VS and run it.\r\n2. Click the … edit button for PropertiesToLoad property in PropertyGrid.\r\n[WindowsFormsApp4.zip](https://github.com/dotnet/winforms/files/4449907/WindowsFormsApp4.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3049","RelatedDescription":"Open issue \"String Collection Editor dialog is incorrect for PropertiesToLoad property in DirectorySearcher control\" (#3049)"},{"Id":"596461815","IsPullRequest":false,"CreatedAt":"2020-04-08T10:07:15","Actor":"Thea-Zhao","Number":"3048","RawContent":null,"Title":"The nodes and child nodes of the TreeView control disappear in the runtime project","State":"open","Body":"**.NET Core Version:**\r\n.Net Core 5.0.100-preview.4.20202.8+VS2019 with latest core designer\r\n\r\n**Have you experienced this same bug with .NET Framework?:** \r\nNo\r\n\r\n**Problem description:**\r\nCannot show Root nodes and Child nodes in the TreeView control when in the runtime.\r\n\r\n**More info:**\r\n1. This issue can also repro in the .NET Core 3.1 project.\r\n2. The tree nodes on the form designer also disappear after stop the runtime project.\r\n3. This issue cannot repro when all the nodes are only Root nodes. \r\n\r\n**Minimal repro:**\r\n\t\r\n1. Create a winforms .NET Core app. \r\n2. Add a TreeView to Form designer and click the smart tag.\r\n3. Click the \"Edit Nodes..\" in the TreeView Tasks dialog.\r\n4. Add one Root node and one Child node in the TreeNode Editor.\r\n5. Click OK and run the application.\r\n6. Observer the TreeView.\r\n\r\n\r\n\r\n**Expected behavior:**\r\nThe nodes and child nodes in the TreeView should show on the form just like in the .Net Framework project.\r\n![treeview-Expected](https://user-images.githubusercontent.com/53589182/78771191-a0290000-7944-11ea-9d74-d8dc368762bd.png)\r\n\r\n**Actual:**\r\nThe nodes and child nodes in the TreeView disappear on the form.\r\n![treeview-Actual](https://user-images.githubusercontent.com/53589182/78771610-4f65d700-7945-11ea-93d7-63105057a02c.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3048","RelatedDescription":"Open issue \"The nodes and child nodes of the TreeView control disappear in the runtime project\" (#3048)"},{"Id":"596457084","IsPullRequest":false,"CreatedAt":"2020-04-08T09:59:26","Actor":"John-Qiao","Number":"3047","RawContent":null,"Title":"An error dialog pop-up when edit the DefaultCellStyle property in DataGridView control ","State":"open","Body":"**.NET Core Version:**\r\n\r\n5.0.100-preview.4.20202.8 + Dev16 16.6.0 [30006.145.master]\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\n\r\nNo\r\n\r\n**Problem description:**\r\nWhen edit the cell style properties for a DataGridView control in PropertyGrid, an error dialog pop-up.  \r\n![5 0](https://user-images.githubusercontent.com/45864985/78771231-70b8d880-79c2-11ea-9df5-be1bcc110dde.png)\r\n\r\n\r\n**More info:**\r\n\r\n1. This issue occurs in all cell style properties: AlternatingRowsDefaultCellStyle, ColumnHeadersDefaultCellStyle, DefaultCellStyle, RowHeadersDefaultCellStyle and RowDefaultCellStyle.\r\n2. If target .NET Core project to 3.1, these proprties are grey and cannot edit. \r\n![3 1](https://user-images.githubusercontent.com/45864985/78771317-9219c480-79c2-11ea-9952-38cdd3716eec.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe CellStyle Builder dialog should be opened.\r\n![Framework](https://user-images.githubusercontent.com/45864985/78771263-7b736d80-79c2-11ea-8300-1031325441fe.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Launch the attached project in VS and run it.\r\n2. Click the … edit button for AlternatingRowsDefaultCellStyle property in PropertyGrid.\r\n[WindowsFormsApp4.zip](https://github.com/dotnet/winforms/files/4449699/WindowsFormsApp4.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3047","RelatedDescription":"Open issue \"An error dialog pop-up when edit the DefaultCellStyle property in DataGridView control \" (#3047)"},{"Id":"595480545","IsPullRequest":true,"CreatedAt":"2020-04-08T05:25:51","Actor":"RussKie","Number":"3042","RawContent":null,"Title":"Update docs pertaining to feature requests","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3042)","Url":"https://github.com/dotnet/winforms/pull/3042","RelatedDescription":"Closed or merged PR \"Update docs pertaining to feature requests\" (#3042)"},{"Id":"596196642","IsPullRequest":true,"CreatedAt":"2020-04-07T23:48:35","Actor":"vatsan-madhavan","Number":"3045","RawContent":null,"Title":"Re-enable flow from dotnet/runtime","State":"closed","Body":"- Updates dependencies from `dotnet/runtime`\r\n- Includes a miscellaneous fix for how ILAsm tools are used. Without this, nuget restore failures happen. \r\n  - Defines `$(MicrosoftNETCoreILAsmVersion)` required by `Microsoft.NET.SDK.IL.targets`\r\n- Disables a couple of tests. \r\n  - Opened https://github.com/dotnet/winforms/issues/3046 to track this. \r\n\r\nThis is Part 1 (of 4) of changes needed to ingest updated runtime bits in WindowsDesktop. Once WinForms publishes to .NET 5 Dev channel, more changes are needed in dotnet/wpf and dotnet-wpf-int, and dotnet/windowsdesktop. \r\n\r\nIn addition to this, I've re-enabled the subscription from `dotnet/runtime` to `dotnet/winforms`\r\n```\r\nλ darc get-subscriptions --source-repo dotnet/runtime --target-repo dotnet/winforms\r\nhttps://github.com/dotnet/runtime (.NET 5 Dev) ==> 'https://github.com/dotnet/winforms' ('master')\r\n  - Id: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n  - Update Frequency: EveryBuild\r\n  - Enabled: True  ***** UPDATED  *****\r\n  - Batchable: False\r\n  - Merge Policies:\r\n    Standard\r\n```\r\n\r\n/cc @dotnet/wpf-developers \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3045)","Url":"https://github.com/dotnet/winforms/pull/3045","RelatedDescription":"Closed or merged PR \"Re-enable flow from dotnet/runtime\" (#3045)"},{"Id":"596212310","IsPullRequest":false,"CreatedAt":"2020-04-07T23:34:45","Actor":"vatsan-madhavan","Number":"3046","RawContent":null,"Title":"Fix and re-enable tests disabled by #3045","State":"open","Body":"https://github.com/dotnet/winforms/pull/3045 has disabled two tests. \r\n\r\nSome exception types seem to be thrown unwound - so instead of receiving `TargetInvocationExeption` the inner-exception type is directly observed. \r\n\r\nThese tests need to be investigated, fixed and re-enabled. \r\n\r\n/cc @RussKie, @AdamYoblick, @merriemcgaw, @dotnet/dotnet-winforms ","Url":"https://github.com/dotnet/winforms/issues/3046","RelatedDescription":"Open issue \"Fix and re-enable tests disabled by #3045\" (#3046)"},{"Id":"595612267","IsPullRequest":false,"CreatedAt":"2020-04-07T05:57:48","Actor":"Jessie-Zhang01","Number":"3043","RawContent":null,"Title":"[Accessibility]MAS 1.4.11: Luminosity contrast ratio of the border lines of the DataGridView control are less than 3:1","State":"open","Body":"* .NET Core Version:\r\n.Net Core 5.0.100-preview.4.20202.8 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?:\r\nYes\r\n\r\n**More Info:**\r\nThis issue cannot reproduce for text of DataGridView.\r\n\r\n**Minimal repro:**\r\n\r\n1. Install the Accessibility Insights from https://accessibilityinsights.io/en/downloads\r\n2. Open the attached ‘WindowsFormsApp3’ application in VS, then build and run it.\r\n3. Open the Accessibility Insights and select the Contrast of the directory on the left.Image\r\n4. Click on the color picker under Color1 and focus it to the border lines of the DataGridView.\r\n5. Click on the color picker under Color2 and focus it to the background of the DataGridView.\r\n\r\n**Actual behavior:**\r\nLuminosity contrast ratio of the border lines of the DataGridView control are less than 3:1.\r\n![image](https://user-images.githubusercontent.com/45864649/78634891-90bf9d80-78d7-11ea-8f89-c8b229512f33.png)\r\n\r\n**Expected behavior:**\r\nLuminosity contrast ratio of the border lines of the DataGridView control are greater than 3:1.","Url":"https://github.com/dotnet/winforms/issues/3043","RelatedDescription":"Open issue \"[Accessibility]MAS 1.4.11: Luminosity contrast ratio of the border lines of the DataGridView control are less than 3:1\" (#3043)"},{"Id":"595279358","IsPullRequest":true,"CreatedAt":"2020-04-06T17:07:24","Actor":"vladimir-krestov","Number":"3041","RawContent":null,"Title":"[Regression] Fixing MonthCalendar NRE when MinDate is set","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3034 \r\nFixes #2475\r\nRelated PR #2975\r\n\r\n## Proposed changes\r\n\r\n- Add null-protection and conditions to avoid NullReferenceException throwing\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Correct work of MonthCalendar without crashes\r\n\r\n## Regression? \r\n\r\n- Yes, from 3.0\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- CTI\r\n- Manual UI testing\r\n- Unit tests\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .Net Core 3.1.300-preview-015069\r\n- Microsoft Windows [Version 10.0.18363.720]\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3041)","Url":"https://github.com/dotnet/winforms/pull/3041","RelatedDescription":"Open PR \"[Regression] Fixing MonthCalendar NRE when MinDate is set\" (#3041)"},{"Id":"594872402","IsPullRequest":true,"CreatedAt":"2020-04-06T07:31:00","Actor":"RussKie","Number":"3040","RawContent":null,"Title":"fix: Hide icon when `ShowIcon = false`","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3022\r\n\r\n\r\n## Proposed changes\r\n\r\n- Correct a regression introduced in #695 when a condition was flipped that stopped setting form's [extended style flag `WS_EX_DLGMODALFRAME`](https://docs.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles).\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nCustomers now able to hide form's icon at runtime by setting `myform.ShowIcon = false`.\r\nWorkarounds involve either \r\n* setting an icon on a form to a transparent blank icon, or \r\n* performing an interop call to hide the icon _before_ hiding the icon:\r\n    ```cs\r\n    if (myform.ShowIcon)\r\n    {\r\n        int extendedStyle = (int)User32.GetWindowLong(myform.Handle, User32.GWL.EXSTYLE);\r\n        User32.SetWindowLong(myform.Handle, User32.GWL.EXSTYLE, (IntPtr)(extendedStyle | (int)User32.WS_EX.DLGMODALFRAME));\r\n    }\r\n\r\n    myform.ShowIcon =false;\r\n    ```\r\n\r\n## Regression? \r\n\r\n- Yes, introduced in .NET Core 3.0\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual tests in the integration test app\r\n- unit tests\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3040)","Url":"https://github.com/dotnet/winforms/pull/3040","RelatedDescription":"Open PR \"fix: Hide icon when `ShowIcon = false`\" (#3040)"},{"Id":"594491364","IsPullRequest":true,"CreatedAt":"2020-04-05T14:42:53","Actor":"weltkante","Number":"3039","RawContent":null,"Title":"Fix DataObject.GetData issues","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3025\r\nContributes to #1268\r\n\r\n## Proposed changes\r\n\r\n- use ReleaseStgMedium for ownership handling as suggested by win32 docs\r\n- do not assume third party implementations of IDataObject.GetData return the medium which was asked for (Office sometimes ignores the medium the caller asks for and always returns the medium it happens to be using internally). Since Windows/OLE does not pose constraints on what the DataObject source returns WinForms needs to be robust and handle this case instead of crashing the whole process.\r\n- clean up dead code related to metafiles, most code supporting them is already gone\r\n\r\n## Customer Impact\r\n\r\n- no more crashing when asking Office for \"EnhancedMetafile\"\r\n\r\n## Regression? \r\n\r\n- Yes (earlier Desktop Framework versions which still supported metafiles did not crash; latest Desktop Framework however also crashes the whole process)\r\n\r\n## Risk\r\n\r\n- low\r\n  * For the scenario crashing the process there is no risk, (almost) nothing is worse than crashing the process\r\n  * Metafile support was already removed and did not work anyways. Removing dead code related to metafiles should not be a problem since it was not possible to retrieve them.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual test of scenario #3025 by copy/pasting a metafile from Word to .NET Core, ensuring it no longer crashes the process and instead properly delivers no content as expected.\r\n- Unit test which exercises the code path which was previously crashing\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3039)","Url":"https://github.com/dotnet/winforms/pull/3039","RelatedDescription":"Open PR \"Fix DataObject.GetData issues\" (#3039)"},{"Id":"596069316","IsPullRequest":false,"CreatedAt":"2020-04-05T10:50:44","Actor":"15092368540","Number":"3044","RawContent":null,"Title":"Can not find the file \"alg.exe\" with OpenFileDialog","State":"open","Body":"App with x86 build, then running in x64 System, OpenFileDialog's Filter properties don't work either,\r\nand can not find the file \"alg.exe\"\r\n\r\n.Net Framework and .Net Core have same problem\r\n\r\n[Test.zip](https://github.com/dotnet/core/files/4433456/Test.zip)\r\n\r\n![X86OpenFileDialog](https://user-images.githubusercontent.com/49462433/78472808-4f5fae80-776e-11ea-90c6-cbeb2fe1d8d3.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3044","RelatedDescription":"Open issue \"Can not find the file \"alg.exe\" with OpenFileDialog\" (#3044)"},{"Id":"593360930","IsPullRequest":true,"CreatedAt":"2020-04-03T12:52:55","Actor":"Ryuugamine","Number":"3038","RawContent":null,"Title":"Fixing DataGridView's scrollbars shouldn't include their control type in their accessible names","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2965\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added Accessible objects with a correct accessible name for ScrollBar classes\r\n- Added unit tests\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- With the fix available customer will be able to get correct information about the control using accessibility client apps.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n![image](https://user-images.githubusercontent.com/29531443/78363142-f18f6300-75c3-11ea-830c-60b8c8eaa132.png)\r\n\r\n### Before\r\n\r\n- \"Vertical scroll bar\" scroll bar\r\n\r\n### After\r\n\r\n- \"Vertical\" scroll bar\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect and Narrator\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- DotNet version: 5.0.0-preview.4.20180.8\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3038)","Url":"https://github.com/dotnet/winforms/pull/3038","RelatedDescription":"Open PR \"Fixing DataGridView's scrollbars shouldn't include their control type in their accessible names\" (#3038)"},{"Id":"593337152","IsPullRequest":true,"CreatedAt":"2020-04-03T12:09:39","Actor":"M-Lipin","Number":"3037","RawContent":null,"Title":"WIP: Fixing Narrator caps navigation to take into account control tab index","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2164 \r\n\r\n\r\n## Proposed changes\r\n\r\n- [x] Adding UIA navigation to the Form control;\r\n- [ ] Adding UIA support for Control;\r\n- [x] Adding UIA previous and next navigation to base Control.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Narrator caps navigation will take into account control tab index.\r\n- There will be no mismatch between common tab navigation accompanied with Narrator announcement and Narrator caps navigation.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Middle risk as requires switching to UIA for all controls. Need to rebase on 5.0.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/67392238-da762f00-f5a8-11e9-8795-de00368c0cfe.png)\r\n\r\n\r\n### After\r\n\r\n* To be added (work in progress).\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n* To be tested.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n* To be added.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n* To be added.\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\nInitial PR: https://github.com/dotnet/winforms/pull/2167\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3037)","Url":"https://github.com/dotnet/winforms/pull/3037","RelatedDescription":"Open PR \"WIP: Fixing Narrator caps navigation to take into account control tab index\" (#3037)"},{"Id":"593294208","IsPullRequest":false,"CreatedAt":"2020-04-03T10:50:12","Actor":"kirsan31","Number":"3036","RawContent":null,"Title":"Overall thoughts on situation with WinFroms (3.1)","State":"open","Body":"Hi all. I want to present a brief report of migration WinForm project from .net to core. I thought for a long time to write this post or not, and still decided to write, because we spent a time and effort on the migration process. If it's out of place here - I apologize :(\r\nMaybe for someone it will be useful...\r\n\r\nExchange trading app - mix of automation and user mode.\r\nSolution: 3 c# projects and one native c++ project. About 36000 Lines of Executable code.\r\n\r\n**Migration process.**\r\n\r\n- No official automation. Other tools like ([try-convert](https://github.com/dotnet/try-convert) and [CsprojToVs2017](https://github.com/hvanbakel/CsprojToVs2017)) are more interfere than help for real projects.\r\n- Bad documented. Again, all available articles about conversion are about simple (not real) projects. Lack of documentation about things that change/gone in core. For example: `legacyCorruptedStateExceptionsPolicy` support removed from app.config. Replaced by `COMPlus_legacyCorruptedStateExceptionsPolicy` environment variable, that must be set **before** app start, and furthermore behave [differently](https://github.com/dotnet/runtime/issues/13805). [Debug.Listeners](https://github.com/dotnet/runtime/issues/26781#issuecomment-605615442) and so on...\r\n- No designer support in VS, it makes us use multi-targeting which further complicates the migration process.\r\n\r\n**Current (3.1) state of WinForms.**\r\n\r\nThe fact that, in **one day of simple overview after conversion**, we found 4 critical bugs (https://github.com/dotnet/winforms/issues/3022, https://github.com/dotnet/winforms/issues/3032, https://github.com/dotnet/winforms/issues/3033, https://github.com/dotnet/winforms/issues/3034) in **released** version of .net core!  Yes, I think all of them critical, for 15 years using .net, we never saw anything like this. Tells us about 2 things:\r\n\r\n1. WinForms core is not usable, at least at prod :( \r\n2. Nobody seriously uses it. I can not explain in a different way a non-working dataGridView :( This is very  frequently used control in .net, and we have not seen reports that it broken to this point... May be it's due to long and complicated migration process and/or Lack of designer in VS? \r\n\r\nAt the moment, our transition process is stopped until better times :(","Url":"https://github.com/dotnet/winforms/issues/3036","RelatedDescription":"Open issue \"Overall thoughts on situation with WinFroms (3.1)\" (#3036)"},{"Id":"592796235","IsPullRequest":false,"CreatedAt":"2020-04-03T06:38:47","Actor":"kirsan31","Number":"3034","RawContent":null,"Title":"NullReferenceException in monthCalendar after setting MinDate","State":"closed","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\nSet `MinDate` (`monthCalendar1.MinDate = DateTime.Today;`) , then select some date in calendar - \r\nNullReferenceException occur:\r\n<details><summary>NullReferenceException </summary>\r\n\r\n```cs\r\n   at System.Windows.Forms.MonthCalendar.MonthCalendarAccessibleObject.GetCalendarCell(Int32 calendarIndex, AccessibleObject parentAccessibleObject, Int32 columnIndex)\r\n   at System.Windows.Forms.MonthCalendar.MonthCalendarAccessibleObject.GetCalendarChildAccessibleObject(Int32 calendarIndex, CalendarChildType calendarChildType, AccessibleObject parentAccessibleObject, Int32 index)\r\n   at System.Windows.Forms.MonthCalendar.MonthCalendarAccessibleObject.GetCalendarChildAccessibleObject(DateTime selectionStart, DateTime selectionEnd)\r\n   at System.Windows.Forms.MonthCalendar.WmDateChanged(Message& m)\r\n   at System.Windows.Forms.MonthCalendar.WmReflectCommand(Message& m)\r\n   at System.Windows.Forms.MonthCalendar.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.SendMessage(HandleRef hWnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at System.Windows.Forms.Control.SendMessage(Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.Control.ReflectMessage(IntPtr hWnd, Message& m)\r\n   at System.Windows.Forms.Control.WmNotify(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n   at System.Windows.Forms.ContainerControl.WndProc(Message& m)\r\n   at System.Windows.Forms.Form.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.CallWindowProc(IntPtr wndProc, IntPtr hWnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at System.Windows.Forms.NativeWindow.DefWndProc(Message& m)\r\n   at System.Windows.Forms.Control.WmMouseDown(Message& m, MouseButtons button, Int32 clicks)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.Run(Form mainForm)\r\n   at WinFormsCoreTest1.Program.Main() in d:\\save\\projects\\core tests\\WinFormsCoreTest3\\Program.cs:line 24\r\n```\r\n\r\n</details>\r\n\r\n![mc](https://user-images.githubusercontent.com/17767561/78277443-33b19980-751d-11ea-9c8b-2941f19da488.gif)\r\n\r\n\r\n**Expected behavior:**\r\nNo exception.\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest4.zip](https://github.com/dotnet/winforms/files/4422459/WinFormsCoreTest4.zip)\r\n\r\n<details><summary>P.s.</summary>\r\n\r\nWe had grate plans about migration our apps to core. A lot of work were done in research, converting old project to new sdk format and then adopting to core... And after brief view on the result (not even testing!!!) I have found **4** problems that make core variant of WinForms unusable :( At least, until version 5.0 I think: ((((\r\n\r\n</details>","Url":"https://github.com/dotnet/winforms/issues/3034","RelatedDescription":"Closed issue \"NullReferenceException in monthCalendar after setting MinDate\" (#3034)"},{"Id":"592684302","IsPullRequest":false,"CreatedAt":"2020-04-02T14:39:20","Actor":"kirsan31","Number":"3033","RawContent":null,"Title":"dataGridView doesn't respect font settings","State":"open","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\ndataGridView doesn't respect font settings in Styles (`DefaultCellStyle, ColumnHeadersDefaultCellStyle...`):\r\n![Snipaste_2020-04-02_17-00-10](https://user-images.githubusercontent.com/17767561/78259184-03f69780-7505-11ea-9da1-53ea81d8b5d0.png)\r\n\r\n**Expected behavior:**\r\ndataGridView must respect font settings.\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest3.zip](https://github.com/dotnet/winforms/files/4421686/WinFormsCoreTest3.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3033","RelatedDescription":"Open issue \"dataGridView doesn't respect font settings\" (#3033)"},{"Id":"592577926","IsPullRequest":true,"CreatedAt":"2020-04-02T12:27:18","Actor":"dotnet-maestro[bot]","Number":"3031","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200401.2\r\n- **Date Produced**: 4/1/2020 4:57 PM\r\n- **Commit**: bce0a98620c1c5a110b2bba9912f3d5929069c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20201.2\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3031)","Url":"https://github.com/dotnet/winforms/pull/3031","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3031)"},{"Id":"592587017","IsPullRequest":false,"CreatedAt":"2020-04-02T12:18:01","Actor":"kirsan31","Number":"3032","RawContent":null,"Title":"RichTextBox Rtf property wrong converting nonbreaking space","State":"open","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\nAfter assigning to `richTextBox.Rtf` some rtf code with nonbreaking space (160 char code), RichTextBox converts it to `\\'c2\\~` insted of `\\~`.\r\n![Snipaste_2020-04-02_15-01-27](https://user-images.githubusercontent.com/17767561/78247868-4bc0f300-74f4-11ea-9805-b74f9484ebcc.png)\r\n\r\nDue to the fact that, number formatting like `:N` using nonbreaking space for thousand separators (in appropriate cultures) this lead to huge problems :((((\r\n\r\n**Expected behavior:**\r\nNonbreaking space must be properly converted to `\\~`.\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest2.zip](https://github.com/dotnet/winforms/files/4420952/WinFormsCoreTest2.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3032","RelatedDescription":"Open issue \"RichTextBox Rtf property wrong converting nonbreaking space\" (#3032)"},{"Id":"592554362","IsPullRequest":true,"CreatedAt":"2020-04-02T11:20:15","Actor":"Ryuugamine","Number":"3030","RawContent":null,"Title":"WIP: Fixing `MonthCalendar. Narrator read only first month in container`","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3019\r\n\r\n## Proposed changes\r\n\r\n- Added GetCalendarCount method to MonthCalendar accessible object\r\n- Added unit test for this issue\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nWork in progress, TODO: add customer impact.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nWork in progress, TODO: add before.\r\n\r\n### After\r\n\r\nWork in progress, TODO: add after.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n-  Added unit test\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\nWork in progress, TODO: add accessibility testing.\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- DotNet version: 5.0.0-preview.4.20180.8\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3030)","Url":"https://github.com/dotnet/winforms/pull/3030","RelatedDescription":"Open PR \"WIP: Fixing `MonthCalendar. Narrator read only first month in container`\" (#3030)"},{"Id":"592389561","IsPullRequest":false,"CreatedAt":"2020-04-02T06:27:39","Actor":"RussKie","Number":"3029","RawContent":null,"Title":"MDI forms lost sub control box","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo \r\n\r\n**Problem description:**\r\n\r\n* .NET 5 current master and Preview2\r\n![image](https://user-images.githubusercontent.com/4403806/78217022-dd396080-7506-11ea-8cfe-d3b17af582c9.png)\r\n\r\n* .NET Core 3.1\r\n![image](https://user-images.githubusercontent.com/4403806/78217036-e4f90500-7506-11ea-8d4b-0f60d20c8b1f.png)\r\n\r\n**Expected behavior:**\r\n\r\n.NET 5 variant must look like .NET Core 3.1 variant.\r\n\r\n**Minimal repro:**\r\n\r\nRun a repro app provided in #2979 ","Url":"https://github.com/dotnet/winforms/issues/3029","RelatedDescription":"Open issue \"MDI forms lost sub control box\" (#3029)"},{"Id":"591049615","IsPullRequest":true,"CreatedAt":"2020-04-02T05:32:54","Actor":"dotnet-maestro[bot]","Number":"3023","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200330.5\r\n- **Date Produced**: 3/30/2020 5:56 PM\r\n- **Commit**: 09bb9d929120b402348c9a0e9c8c951e824059aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20180.5\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3023)\r\n","Url":"https://github.com/dotnet/winforms/pull/3023","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3023)"},{"Id":"592335810","IsPullRequest":false,"CreatedAt":"2020-04-02T03:40:26","Actor":"199621616","Number":"3028","RawContent":null,"Title":"Always pops up the error(run application failure and advise user to install the .NET Core, in fact, .NET Core 3.1 was installed) whether it's win7 or win10","State":"open","Body":"![image](https://user-images.githubusercontent.com/25498672/78208226-713f0400-74d6-11ea-91c1-971bdd937c8f.png)\r\n\r\n从.NetFramework 4.6.1迁移到.Net Core 3.1后，经常有用户反馈出现此问题。而事实上.NetCore3.1已经安装并能正常使用。如何解决此问题？\r\n\r\nAfter migrating from. Netframework 4.6.1 to. Net core 3.1, users often report this problem. In fact. NETCORE 3.1 is installed and working properly. How to solve this problem?","Url":"https://github.com/dotnet/winforms/issues/3028","RelatedDescription":"Open issue \"Always pops up the error(run application failure and advise user to install the .NET Core, in fact, .NET Core 3.1 was installed) whether it's win7 or win10\" (#3028)"},{"Id":"591827952","IsPullRequest":false,"CreatedAt":"2020-04-01T11:03:15","Actor":"Thea-Zhao","Number":"3027","RawContent":null,"Title":"[Inspect]There are no list items displaying under the list tree node in Inspect when expanding the Cursor/Color properties comboBox in PropertyGrid","State":"open","Body":"**.NET Core Version:**\r\n.NET Core SDK 3.1.300-preview-015048 + VS2019 with latest core designer\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nYes\r\n\r\n**Problem description:**\r\nWhen Inspect focus on the dropdown list value, cannot show the list items.\r\n\r\n**More Info:**\r\n\r\n1. This issue can reproduce in the .NET Framework project from .Net Framework 4.7 to latest 4.8.\r\n2. This issue can reproduce in the Core 3.1 and Core 5.0 project.\r\n3. This issue can reproduce in the Anchor, BackColor, Dock, ForeColor properties.\r\n\r\n**Expected behavior:**\r\nThe list node should be expanded and show all list items.\r\n![Expected](https://user-images.githubusercontent.com/53589182/78127836-7012c600-7447-11ea-86b5-51ca94590f5e.png)\r\n\r\n**Actual behavior:**\r\nThe list node cannot be expand in Inspect, there is no any list items shown.\r\n![Actual](https://user-images.githubusercontent.com/53589182/78127991-ba944280-7447-11ea-97c0-85d22cbf9f7e.png)\r\n\r\n\r\n**Minimal repro:**\r\n1. Run attached app.\r\n2. Open the inspect tool.\r\n3. Click the Open button next to the Cursor/Color property on the form\r\n4.  Select one item in the dropdown list.\r\n5. Observer the tree structure in Inspect.\r\n[ComboBoxListIssue.zip](https://github.com/dotnet/winforms/files/4414524/ComboBoxListIssue.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3027","RelatedDescription":"Open issue \"[Inspect]There are no list items displaying under the list tree node in Inspect when expanding the Cursor/Color properties comboBox in PropertyGrid\" (#3027)"},{"Id":"591795818","IsPullRequest":false,"CreatedAt":"2020-04-01T10:11:21","Actor":"asklar","Number":"3026","RawContent":null,"Title":"DataObject.GetData(FileContents) returns null","State":"open","Body":"* .NET Core Version: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.201\r\n Commit:    b1768b4ae7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.201\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.3\r\n  Commit:  4a9f85e9f8\r\n\r\n.NET Core SDKs installed:\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nIDataObject.GetFormats returns FileContents, but IDataObject.GetData(\"FileContents\") returns null\r\n\r\n**Expected behavior:**\r\nReturns the file contents\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/3026","RelatedDescription":"Open issue \"DataObject.GetData(FileContents) returns null\" (#3026)"},{"Id":"591714535","IsPullRequest":false,"CreatedAt":"2020-04-01T08:12:18","Actor":"asklar","Number":"3025","RawContent":null,"Title":"Fatal error. Internal CLR error. (0x80131506) when DataObject.GetData(EnhancedMetaFile)","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.201\r\n Commit:    b1768b4ae7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.201\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.3\r\n  Commit:  4a9f85e9f8\r\n\r\n.NET Core SDKs installed:\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI have a console app that prints out the clipboard contents using System.Windows.Forms.IDataObject.\r\nWhen I do IDataObject.GetData(\"EnhancedMetafile\") (verified that the format is available), the program crashes with this error:\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(IntPtr)\r\n   at System.Windows.Forms.DataObject+OleConverter.GetDataFromOleIStream(System.String)\r\n   at System.Windows.Forms.DataObject+OleConverter.GetDataFromBoundOleDataObject(System.String, Boolean ByRef)\r\n   at System.Windows.Forms.DataObject+OleConverter.GetData(System.String, Boolean)\r\n   at System.Windows.Forms.DataObject.GetData(System.String, Boolean)\r\n   at System.Windows.Forms.DataObject.GetData(System.String)\r\n```\r\n\r\n\r\n**Expected behavior:**\r\nNo crash, should be able to access the data in the EMF\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/3025","RelatedDescription":"Open issue \"Fatal error. Internal CLR error. (0x80131506) when DataObject.GetData(EnhancedMetaFile)\" (#3025)"},{"Id":"591283983","IsPullRequest":true,"CreatedAt":"2020-03-31T17:59:52","Actor":"dotnet-maestro[bot]","Number":"3024","RawContent":null,"Title":"[release/5.0-preview3] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6f5b2698-38c7-4d48-1ad3-08d7d0ed185e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 6f5b2698-38c7-4d48-1ad3-08d7d0ed185e\r\n- **Build**: 20200330.5\r\n- **Date Produced**: 3/30/2020 5:56 PM\r\n- **Commit**: 09bb9d929120b402348c9a0e9c8c951e824059aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20180.5\r\n\r\n[marker]: <> (End:6f5b2698-38c7-4d48-1ad3-08d7d0ed185e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3024)","Url":"https://github.com/dotnet/winforms/pull/3024","RelatedDescription":"Closed or merged PR \"[release/5.0-preview3] Update dependencies from dotnet/arcade\" (#3024)"},{"Id":"590979390","IsPullRequest":false,"CreatedAt":"2020-03-31T10:20:51","Actor":"kirsan31","Number":"3022","RawContent":null,"Title":"Form icon can not be (properly) hide.","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.0, 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\n\r\nIn WinForms core app run `this.ShowIcon = false;` Icon is hiding, but default app. icon appear:\r\n![core](https://user-images.githubusercontent.com/17767561/78015507-2a280600-7352-11ea-82e4-7bfa7be2599d.png)\r\n\r\n\r\n**Expected behavior:**\r\nIcon is hiding:\r\n![net](https://user-images.githubusercontent.com/17767561/78015572-3f049980-7352-11ea-9a4c-dbb83cf8fb66.png)\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest1.zip](https://github.com/dotnet/winforms/files/4419602/WinFormsCoreTest1.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3022","RelatedDescription":"Open issue \"Form icon can not be (properly) hide.\" (#3022)"},{"Id":"590751859","IsPullRequest":false,"CreatedAt":"2020-03-31T03:07:35","Actor":"Amy-Li02","Number":"3021","RawContent":null,"Title":"When coping data from DataGridView, there should no longer apply blank unselected lines onto the clipboard","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:  .NET SDK 5.0.100-preview.3.20180.10\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen coping data from DataGridView, blank unselected lines were applied onto the clipboard. \r\n\r\n**Actual behavior:**\r\nUnselected cells in these rows or columns are copied as blank placeholders to the Clipboard.\r\n\r\n**Expected behavior:**\r\nThere should no longer applies blank unselected lines onto the clipboard. \r\n\r\n**Minimal repro:**\r\n1. Create a .NET Core winforms application.\r\n2. Add a DataGridView with some columns to the form designer and run the app.\r\n3. Add some data to the rows of DataGridView.\r\n4. Select and copy the first and third rows, then paste them to a notepad.\r\n\r\n**App:** [SampleApp.zip](https://github.com/dotnet/winforms/files/4406524/SampleApp.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3021","RelatedDescription":"Open issue \"When coping data from DataGridView, there should no longer apply blank unselected lines onto the clipboard\" (#3021)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-09T05:30:50.8688692Z","RunDurationInMilliseconds":737}