{"Data":{"Vue":{"Events":[],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7314136381","Type":"PullRequestEvent","CreatedAt":"2018-03-01T05:25:05","Actor":"DrSensor","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/2085","RelatedDescription":"Opened pull request \"Support this.$router.options in Typescript\" (#2085) at vuejs/vue-router","RelatedBody":"There is a time when a user wants to access metadata that was defined in `router.ts` ([example](https://github.com/DrSensor/F.I.D.E/blob/develop/src/renderer/components/NavigationSidebar.vue#L93)). I notice that in the typedef `options` is missing.\r\n\r\n![screenshot from 2018-03-01 12-16-59](https://user-images.githubusercontent.com/4953069/36828284-6ed0e5d8-1d4b-11e8-9dc6-0a62c005c384.png)\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"},{"Id":"7313981292","Type":"PullRequestEvent","CreatedAt":"2018-03-01T04:20:01","Actor":"cironunes","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/2084","RelatedDescription":"Opened pull request \"feat: introduce afterResolve navigation hook\" (#2084) at vuejs/vue-router","RelatedBody":"Still missing tests, but this gives an idea of what I'm trying to achieve.\r\n\r\nLooking forward to hear from you guys.\r\n\r\nCloses #2079 "},{"Id":"7313817202","Type":"IssuesEvent","CreatedAt":"2018-03-01T03:15:04","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2083","RelatedDescription":"Closed issue \"官网上部分例子应使用``而不是''\" (#2083) at vuejs/vue-router","RelatedBody":"#如：const User = {\r\n  template: '<div>User {{ $route.params.id }}</div>'\r\n}"},{"Id":"7313817164","Type":"IssuesEvent","CreatedAt":"2018-03-01T03:15:03","Actor":"TyroneYvesChen","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2083","RelatedDescription":"Opened issue \"官网上部分例子应使用``而不是''\" (#2083) at vuejs/vue-router","RelatedBody":"#如：const User = {\r\n  template: '<div>User {{ $route.params.id }}</div>'\r\n}"},{"Id":"7313705825","Type":"IssuesEvent","CreatedAt":"2018-03-01T02:36:18","Actor":"decademoon","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2082","RelatedDescription":"Opened issue \"beforeRouteEnter next callback is not called (in this very specific async situation)\" (#2082) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/df4Lnuw6/271/](http://jsfiddle.net/df4Lnuw6/271/)\r\n\r\n### Steps to reproduce\r\n- Have a `<router-view v-if=\"ready\">` in the root component's template with `ready` initially `false`.\r\n- Have a single route for path `/` whose component has a `beforeRouteEnter` hook.\r\n- Perform the following in the root component's `created` hook:\r\n  1. Replace the route with `/?x=1` (this causes the same component to be reused).\r\n  2. After a timeout, set `ready` to `true`.\r\n\r\n### What is expected?\r\nThe callback function passed to `next` in the `beforeRouteEnter` hook should be called.\r\n\r\n### What is actually happening?\r\nThe callback function passed to `next` in the `beforeRouteEnter` is not called.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7311775758","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:50:58","Actor":"felipe-developer","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/2081","RelatedDescription":"Opened pull request \"Starting portuguese (pt-br) translation\" (#2081) at vuejs/vue-router","RelatedBody":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"},{"Id":"7308655926","Type":"IssuesEvent","CreatedAt":"2018-02-28T09:10:15","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2080","RelatedDescription":"Closed issue \"Multiple Routers\" (#2080) at vuejs/vue-router","RelatedBody":"Is multiple routers supported.\r\n\r\nFor example in Laravel I have routes:\r\n`/account` and `/dashboard`\r\n\r\nCan I use a different set of Vue routes for each Laravel route? So two independent instances of Vue routers?"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7312932068","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:42:39","Actor":"vue-issue-bot","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1168","RelatedDescription":"Closed issue \"Uncaught TypeError: Cannot assign to read only property 'watch' of object '#<Store>'\" (#1168) at vuejs/vuex","RelatedBody":"All I'm doing is\r\n\r\nimport Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\nWhen I compile my js with webpack I get \r\n`Uncaught TypeError: Cannot assign to read only property 'watch' of object '#<Store>'`"},{"Id":"7312932017","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:42:38","Actor":"DusanMilko","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1168","RelatedDescription":"Opened issue \"Uncaught TypeError: Cannot assign to read only property 'watch' of object '#<Store>'\" (#1168) at vuejs/vuex","RelatedBody":"All I'm doing is\r\n\r\nimport Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\nWhen I compile my js with webpack I get \r\n`Uncaught TypeError: Cannot assign to read only property 'watch' of object '#<Store>'`"},{"Id":"7312183598","Type":"IssuesEvent","CreatedAt":"2018-02-28T20:07:56","Actor":"hrasekj","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1167","RelatedDescription":"Opened issue \"If module state is an array his submodules are not reactive\" (#1167) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/nvkupd14/16/](https://jsfiddle.net/nvkupd14/16/)\r\n\r\n### Steps to reproduce\r\nCreate an module which have his state as Array. Then create submodule for it.\r\n\r\n### What is expected?\r\nIm expecting that computed properties in modules will react to changes on submodule.\r\n\r\n### What is actually happening?\r\nVue does not map his getters & setters to submodule. So submodules state is changing, but computed properties not.\r\n\r\n---\r\nIt should warn user or something.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"VueIssues":{"Issues":[{"Id":"301248388","IsPullRequest":false,"CreatedAt":"2018-03-01T01:41:23","Actor":"dmitry-saritasa","Number":"7725","RawContent":null,"Title":"@click.native.stop = \"\" possible?","State":"closed","Body":"I have several nested components on the page with parents component having ```@click.native``` implementation. Therefore when I click on the area occupied by a child component (living inside parent), both click actions executed (parent and all nested children) for example\r\n```\r\n<products>\r\n   <product-details>\r\n       <slide-show>\r\n             <media-manager>\r\n                  <modal-dialog>\r\n   <product-details>\r\n       <slide-show>\r\n             <media-manager>\r\n                  <modal-dialog>\r\n```\r\n\r\nSo I have a list of multiple products, and when I click on \"canvas\" belonging to modal dialog - I also get ```@click.native``` fired on product-details to which modal-dialog belongs. Would be nice to have something like ```@click.native.stop=\"code\"```, is this possible?\r\n\r\nRight now I have to do this:\r\n```\r\n@click.native=\"clickHandler\"\r\nand then \r\n\r\n  methods: {\r\n    clickHandler(e) {\r\n      e.stopPropagation();\r\n      console.log(e);\r\n    }\r\n```\r\n\r\n### code\r\n\r\n```vue\r\n<template>\r\n  <div class=\"media-manager\">\r\n    <div v-if=\"!getMedia\">\r\n      <h1>When you're ready please upload a new image</h1>\r\n      <a href=\"#\"\r\n         class=\"btn btn--diagonal btn--orange\"\r\n         @click=\"upload=true\">Upload Here</a>\r\n    </div>\r\n    <img :src=\"getMedia.media_url\"\r\n         @click=\"upload=true\"\r\n         v-if=\"getMedia\">\r\n    <br>\r\n    <a class=\"arrow-btn\"\r\n       @click=\"upload=true\"\r\n       v-if=\"getMedia\">Add more images</a>\r\n    <!-- use the modal component, pass in the prop -->\r\n    <ModalDialog\r\n      v-if=\"upload\"\r\n      @click.native=\"clickHandler\"\r\n      @close=\"upload=false\">\r\n      <h3 slot=\"header\">Upload Images</h3>\r\n      <p slot=\"body\">Hello World</p>\r\n    </ModalDialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ModalDialog from '@/components/common/ModalDialog';\r\nexport default {\r\n  components: {\r\n    ModalDialog,\r\n  },\r\n  props: {\r\n    files: {\r\n      default: () => [],\r\n      type: Array,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n     upload: false,\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * Obtain single image from the media array\r\n     */\r\n    getMedia() {\r\n      const [\r\n        media,\r\n      ] = this.files;\r\n\r\n      return media;\r\n    },\r\n  },\r\n  methods: {\r\n    clickHandler(e) {\r\n      e.stopPropagation();\r\n      console.log(e);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.media-manager img {\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\na {\r\n  cursor: pointer;\r\n}\r\n\r\n</style>\r\n\r\n```","Url":"https://github.com/vuejs/vue/issues/7725","RelatedDescription":"Closed issue \"@click.native.stop = \"\" possible?\" (#7725)"},{"Id":"301226971","IsPullRequest":false,"CreatedAt":"2018-02-28T23:43:26","Actor":"bulkan","Number":"7724","RawContent":null,"Title":"Flexbox column width does not collapse in Safari when using transition-group ","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/bulkan/57xsxcph/26/](https://jsfiddle.net/bulkan/57xsxcph/26/)\r\n\r\n### Steps to reproduce\r\n* Go to the JSFiddle link\r\n* Click on the `remove` button until all of the children is removed from the second column\r\n\r\n### What is expected?\r\nIn Chrome and Firefox, the second columns width will collapse once all of its children is removed. The other columns will also animate.\r\n\r\nThis is what I expect to occur in Safari.\r\n\r\n### What is actually happening?\r\nIn Safari the second column width remains the same until a repaint occurs.\r\n\r\n---\r\nI ran into this issue whilst testing my work in Mobile Safari. I was able to reproduce the issue on desktop Safari (High Sierra 10.13.1 & Safari 11.0.1)\r\n\r\nI have also created another [JSFiddle](https://jsfiddle.net/bulkan/g6sk6at0/14/) in which I'm not using Vue and the column width collapses.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7724","RelatedDescription":"Open issue \"Flexbox column width does not collapse in Safari when using transition-group \" (#7724)"},{"Id":"301138608","IsPullRequest":false,"CreatedAt":"2018-02-28T18:57:47","Actor":"AlexandreBonneau","Number":"7723","RawContent":null,"Title":"Unable when passing props to a component to define in which order they should be 'treated'","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010](https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010)\r\n\r\n### Steps to reproduce\r\nGiven the following template:\r\n```html\r\n<vue-autonumeric\r\n\t:options=\"obj.options\"\r\n\tv-model=\"obj.val\"\r\n/>\r\n```\r\n\r\nIf you want to modify both `:value` and `:options` props at the same time, you would proceed by doing:\r\n```js\r\nthis.obj = {\r\n    options : 'percentageEU3dec',\r\n    val     : 0.00123456,\r\n};\r\n```\r\n\r\n### What is expected?\r\n`options` should be first modified, before `val`.\r\n\r\n### What is actually happening?\r\nHowever, Vue is first taking into account the `obj.val`, **before** the `obj.options`, leading to the vue-autonumeric component to incorrectly update its internal *raw* value with `0.00` instead of `0.00123` (since the `percentageEU3dec` defines the number of allowed decimals to `5`, instead of the default `2`).\r\n\r\nThe order in which `options` and `val` are set is *super* important for that component, since if you first set the `value`, AutoNumeric will check how many decimal places it needs to keep (and by default it's `2`), which means it will convert the given `0.00123456` to `0.00` first, **before** having had the chance to take into account the `options` `'percentageEU3dec'` that modifies the allowed number of decimal places to `5`.\r\nif it would have first set the `options`, then given the `0.00123456` value, it would have correctly kept 5 decimals `0.00123` which would allow displaying `0,123 %`.\r\n\r\n---\r\nSo the question here is; is there a way when passing props to a component to define in which order they should be 'treated'?\r\n\r\nFor instance in the previous example using the `vue-autonumeric` component, I want to modify the `:value` **and** the `:options` at the same time using a single `obj` object, but I need to make sure the `:options` modification in done first before modifying the `value` (otherwise in this particular case the decimal places are dropped).\r\nSee [the example](https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010) where you can easily see that 'bug'.\r\n\r\nSo far, I can reliably get the correct result when I manually first change the `:options`, then change the `:value` in a `nextTick` block.\r\nI was wondering how I could do that *automatically* inside the `vue-autonumeric` component and prevent the user to have to do that manually each time they want to update the options/value.\r\n\r\n\r\nSome context for this issue: https://github.com/autoNumeric/vue-autoNumeric/issues/10\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7723","RelatedDescription":"Closed issue \"Unable when passing props to a component to define in which order they should be 'treated'\" (#7723)"},{"Id":"301074210","IsPullRequest":false,"CreatedAt":"2018-02-28T16:09:20","Actor":"razbakov","Number":"7722","RawContent":null,"Title":"Ambiguous combined usage of slot-scope and v-for ","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/NyeVEO](https://codepen.io/anon/pen/NyeVEO)\r\n\r\n### Steps to reproduce\r\nSee codepen link or use the following code:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <my-list :items=\"items\">\r\n    <li v-for=\"num in red\" :key=\"num\" slot-scope=\"props\" :slot=\"'slot-'   num\" style=\"color:red\">{{ props.item.text }}</li>\r\n  </my-list>\r\n\r\n</div>\r\n\r\n<template id=\"my-list-template\">\r\n  <ul>\r\n     <template v-for=\"item in items\">\r\n       <slot :name=\"'slot-'   item.id\" :item=\"item\">\r\n         <li>{{ item.text }}</li>\r\n       </slot>\r\n     </template>\r\n    </slot>\r\n  </ul>\r\n</template>\r\n```\r\n\r\n```js\r\nconsole.clear()\r\n\r\nVue.component(\"my-list\",{\r\n  props:[\"items\"],\r\n  template: \"#my-list-template\",\r\n})\r\n\r\nnew Vue({\r\n  el:\"#app\",\r\n  data:{\r\n    items:[\r\n      {id: \"x\", text: \"item 1\", message: \"message 1\"},\r\n      {id: \"y\", text: \"item 2\", message: \"message 2\"},\r\n      {id: \"z\", text: \"item 3\", message: \"message 3\"}\r\n    ],\r\n    red:[\"y\", \"z\"]\r\n  }\r\n})\r\n\r\n```\r\n\r\n### What is expected?\r\n- no warning\r\n- or any way to solve the warning and have a working solution\r\n\r\n### What is actually happening?\r\nConsole warning:\r\n```\r\nAmbiguous combined usage of slot-scope and v-for on <li> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.\r\n```\r\n\r\nThis template solves the warning, but breaks the functionality:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <my-list :items=\"items\">\r\n    <template v-for=\"num in red\" >\r\n      <li :key=\"num\" slot-scope=\"props\" :slot=\"'slot-' + num\"  style=\"color:red\">{{ props.item.text }}</li>\r\n    </template>\r\n  </my-list>\r\n</div>\r\n```\r\n\r\nneither works this:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <my-list :items=\"items\">\r\n    <template v-for=\"num in red\">\r\n      <template slot-scope=\"props\" :slot=\"'slot-' + num\">\r\n        <li style=\"color:red\">{{ props.item.text }}</li>\r\n      </template>\r\n    </template>\r\n  </my-list>\r\n</div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7722","RelatedDescription":"Closed issue \"Ambiguous combined usage of slot-scope and v-for \" (#7722)"},{"Id":"300939205","IsPullRequest":false,"CreatedAt":"2018-02-28T08:54:24","Actor":"lemovel","Number":"7721","RawContent":null,"Title":"The webView loads the H5 blank.","State":"closed","Body":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n\r\n中文用户请注意：\r\n请使用上面的链接来创建新的 issue。如果不是用上述工具创建的 issue 会被自动关闭。\r\n-->\r\n\r\n<!--\r\nLove vuejs? Please consider supporting us via Patreon or OpenCollective:\r\n👉  https://www.patreon.com/evanyou\r\n👉  https://opencollective.com/vuejs/donate\r\n-->\r\n","Url":"https://github.com/vuejs/vue/issues/7721","RelatedDescription":"Closed issue \"The webView loads the H5 blank.\" (#7721)"},{"Id":"300935374","IsPullRequest":false,"CreatedAt":"2018-02-28T08:40:24","Actor":"decademoon","Number":"7720","RawContent":null,"Title":"Vue warns about missing required prop that has a default value","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/df4Lnuw6/207/](http://jsfiddle.net/df4Lnuw6/207/)\r\n\r\n### Steps to reproduce\r\nSpecify a required prop with a default value:\r\n\r\n```js\r\nVue.component('comp', {\r\n    template: '<div>{{ typeof x }} {{ x }}</div>',\r\n    props: {\r\n        x: {\r\n            type: Number,\r\n            required: true,\r\n            default: 5,\r\n        },\r\n    },\r\n});\r\n```\r\n\r\nRender the component without specifying a value for that prop:\r\n\r\n```html\r\n<comp></comp>\r\n```\r\n\r\n### What is expected?\r\nThe component should render the following without any prop validation errors:\r\n\r\n```html\r\n<div>number 5</div>\r\n```\r\n\r\n### What is actually happening?\r\nThe component renders OK, but warns about missing required prop `x`.\r\n\r\n---\r\nWhile it's true that prop `x` is not specified, since it has a default value, there should be no warning message.\r\n\r\nWhat exactly does `required` check for? It appears that it checks two things:\r\n\r\n1. The prop should be *provided*, as in at least `<comp :x=\"...\"></comp>`.\r\n2. The prop value should be non-null and non-undefined.\r\n\r\nI think in the case where a required prop has a default value, (1) should be relaxed.\r\n\r\nOtherwise, how can I enforce a prop to never be null while also providing a default value if the prop value was not provided?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7720","RelatedDescription":"Open issue \"Vue warns about missing required prop that has a default value\" (#7720)"},{"Id":"300874039","IsPullRequest":false,"CreatedAt":"2018-02-28T08:20:36","Actor":"ireeoo","Number":"7719","RawContent":null,"Title":"怎样计算virtual dom 渲染的耗时","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://reeoo.me](https://reeoo.me)\r\n\r\n### Steps to reproduce\r\n比如\r\n在mounted生命周期里面，通过一个方法获取一段数据，然后设置到一个list上，页面进行渲染，这个过程的背后，涉及到virtual dom的计算和渲染，如果我想统计这个计算和渲染的耗时，应该怎么做？\r\n\r\n### What is expected?\r\n这不是一个bug report\r\n\r\n### What is actually happening?\r\n但是没有合适的分类\r\n具体说明见`Steps to reproduce`\r\n\r\n---\r\n上面的demo地址随便写的，因为不需要demo，但是issue模板必须要填。\r\n\r\nThx！\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7719","RelatedDescription":"Closed issue \"怎样计算virtual dom 渲染的耗时\" (#7719)"},{"Id":"300432023","IsPullRequest":false,"CreatedAt":"2018-02-27T18:19:24","Actor":"ryannhg","Number":"7716","RawContent":null,"Title":"Warnings lead to different behavior between `vue.js` and `vue.min.js`","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/RyanNHG/pen/jZQWaz](https://codepen.io/RyanNHG/pen/jZQWaz)\r\n\r\n### Steps to reproduce\r\nCheck out the working example (using minified Vue 2.5.13):\r\nhttps://codepen.io/RyanNHG/pen/gvQPGg\r\n\r\nAnd compare it to this failing example (using dev Vue 2.5.13):\r\nhttps://codepen.io/RyanNHG/pen/jZQWaz\r\n\r\n### What is expected?\r\nI expect the minified and dev versions of Vue to result in the same outcome.\r\n\r\nThe `fromParent` property is defined on the parent, and I'd expect it to render in the child, even though it isn't explicitly defined on the `data` prop.\r\n\r\nPreferably, VueJS warnings wouldn't lead to any components failing to compile.\r\n\r\n### What is actually happening?\r\nIn the minified, production build, this code works as expected. But in the developer build, I am getting a warning that prevents the component from compiling.\r\n\r\n---\r\nI assume this is to prevent me from making a typo, or forgetting to add a data property to my child component.\r\n\r\nThese warning are super useful in general (thanks for taking the time to make them!)\r\n\r\nLet me know if you need any more examples to help you with this issue. Thanks again!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7716","RelatedDescription":"Closed issue \"Warnings lead to different behavior between `vue.js` and `vue.min.js`\" (#7716)"},{"Id":"300553657","IsPullRequest":false,"CreatedAt":"2018-02-27T14:42:18","Actor":"jiananshi","Number":"7717","RawContent":null,"Title":"[async component] add an API to reload load failed async component","State":"closed","Body":"### What problem does this feature solve?\r\nCurrently vue async-component use http to load js file which may fail due to network break or timeout, if there is an API exposed in a way which can make `errorComp` lead user to interact and try to reload this component instead of refresh the whole page.\r\n\r\nIn addition, detailed error should be exposed to the `errorComp` so that it can show different states based on the error, tks in advance.\r\n\r\n### What does the proposed API look like?\r\n```vue\r\n<template>\r\n  <p v-if=\"$asyncComp.error\">{ $asyncComp.error.message }</p>\r\n  <button\r\n     v-if=\"$asyncComp.error && $asyncComp.error.name === 'NETWORK_TIMEOUT'\"\r\n     @click=\"reload\">click to reload</button>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n     methods: {\r\n       reload() { this.$asyncComp.reload(); }\r\n     }\r\n  };\r\n</script>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7717","RelatedDescription":"Closed issue \"[async component] add an API to reload load failed async component\" (#7717)"},{"Id":"300571738","IsPullRequest":false,"CreatedAt":"2018-02-27T10:55:55","Actor":"Rouberg","Number":"7718","RawContent":null,"Title":"when use v-model with Array prop, update prop unexpected by someway.","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/5uLrp7w6/](https://jsfiddle.net/5uLrp7w6/)\r\n\r\n### Steps to reproduce\r\nstep1. open\r\n\r\nstep2. click tab `replied`.\r\n\r\nThe detail I wrote in comments.\r\n\r\n### What is expected?\r\ncomponent update it's share data between parent component should be more strict.\r\n\r\nI wish statement `list[0].active = true` should work.\r\n\r\n### What is actually happening?\r\nstatement `list[0].active = true` work unexpected, and it modified share data between it's parent component.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7718","RelatedDescription":"Closed issue \"when use v-model with Array prop, update prop unexpected by someway.\" (#7718)"},{"Id":"300275122","IsPullRequest":false,"CreatedAt":"2018-02-26T15:14:12","Actor":"ralphchristianeclipse","Number":"7715","RawContent":null,"Title":".global or .window modifier for v-on listeners or new property listeners","State":"closed","Body":"### What problem does this feature solve?\r\nthis solves the issue for components\r\n\r\nlike keys not being called when it's not focused on the element which leads to doing this\r\n\r\nwindow.addEventListener(\"keyup\",this.event)\r\n\r\n\r\nthen on destroy\r\n\r\nwindow.removeEventListener(\"keyup\",this.event)\r\n\r\nthis will solve the issue for doing\r\n\r\nbeforeMount registering of events\r\n\r\nand beforeDestroy\r\n\r\nso it vue will handle this the Vue way\r\n\r\nlike handling keycodes\r\n\r\n### What does the proposed API look like?\r\nwe can do the keyup event like this on an input\r\n\r\n@keyup.global=\"close\"\r\n\r\nor\r\n\r\n@keyup.window=\"close\"\r\n\r\nor maybe on the vue instance\r\n\r\nlisteners: {\r\n  keyup: [this.event]\r\n}\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7715","RelatedDescription":"Closed issue \".global or .window modifier for v-on listeners or new property listeners\" (#7715)"},{"Id":"300230115","IsPullRequest":false,"CreatedAt":"2018-02-26T13:15:51","Actor":"david-kiraly","Number":"7714","RawContent":null,"Title":"Incrementing a variable in a v-for loop increments hundred times more than expected","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/us4mwkjv/19/](https://jsfiddle.net/us4mwkjv/19/)\r\n\r\n### Steps to reproduce\r\nClick on Run and notice the speed of rendering and the value of the variable \"incr\" after rendering\r\n\r\n### What is expected?\r\nI expect variable \"incr\" increases to 2 after v-for finishes.\r\n\r\n### What is actually happening?\r\nVariable \"incr\" increases to 306 after v-for finishes and for that my app works slow. I am also getting a Vue error of \"may have an infinite update loop\" in the console.\r\nI just want to have id-s of 0, 1 and 2 in this example instead of 102, 204 and 306.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7714","RelatedDescription":"Closed issue \"Incrementing a variable in a v-for loop increments hundred times more than expected\" (#7714)"},{"Id":"300224103","IsPullRequest":false,"CreatedAt":"2018-02-26T12:46:12","Actor":"zsky","Number":"7713","RawContent":null,"Title":"Use better types to model prop type","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://github.com/zsky/vue-date-type-issue](https://github.com/zsky/vue-date-type-issue)\r\n\r\n### Steps to reproduce\r\n```\r\nnpm i\r\nnpm run build\r\n```\r\n\r\n### What is expected?\r\nNo typescript error\r\n\r\n### What is actually happening?\r\nTypescript report error: Property 'getTime' does not exist on type 'string'\r\n\r\n***\r\nI use vue with typescript, I want to set a component prop type as Date, so I do this:\r\n```typescript\r\nVue.extend({\r\n  props: { start: Date },\r\n  created() { \r\n     this.start;  // Expect type Date, but String\r\n  }\r\n});\r\n```\r\n\r\nThen I find something could be userful:\r\nIn options.d.ts,\r\n```typescript\r\nexport type Prop<T> = { (): T } | { new (...args: any[]): T & object }\r\n```\r\nMake a simple test:\r\n```typescript\r\nfunction test<T>(opts: { p1: Prop<T> }): T {\r\n    return {} as T;\r\n}\r\nlet result = test({ p1: Date });  // Expect type Date, but String\r\n```\r\nBut I still don't know how to solve it, thanks for any suggestion.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7713","RelatedDescription":"Open issue \"Use better types to model prop type\" (#7713)"},{"Id":"300148378","IsPullRequest":true,"CreatedAt":"2018-02-26T08:34:46","Actor":"ktsn","Number":"7712","RawContent":null,"Title":"fix(types): fix wrong errorCaptured type","State":"open","Body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [x] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n`errorCaptured` lifecycle hook actually receives some parameters. https://vuejs.org/v2/api/#errorCaptured","Url":"https://github.com/vuejs/vue/pull/7712","RelatedDescription":"Open PR \"fix(types): fix wrong errorCaptured type\" (#7712)"},{"Id":"300029849","IsPullRequest":false,"CreatedAt":"2018-02-25T17:57:58","Actor":"oanstein","Number":"7711","RawContent":null,"Title":"HTML Keyboard Input element (<kbd>) is not supported","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/128732/](https://jsfiddle.net/50wL7mdz/128732/)\r\n\r\n### Steps to reproduce\r\nJust add a `<kbd>` element\r\n\r\n### What is expected?\r\nRender `<kdb>` element correctly\r\n\r\n### What is actually happening?\r\n[Vue warn]: Unknown custom element: <kdb> - did you register the component correctly? For recursive components, make sure to provide the \"name\" option.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7711","RelatedDescription":"Closed issue \"HTML Keyboard Input element (<kbd>) is not supported\" (#7711)"},{"Id":"299996132","IsPullRequest":false,"CreatedAt":"2018-02-25T12:43:36","Actor":"greedying","Number":"7709","RawContent":null,"Title":"can Vue get the new props data in hook activated ?","State":"closed","Body":"### What problem does this feature solve?\r\nLet suppose I have a component child, which have a prop id。\r\nthe child use keep-alive。\r\nso I query data from server in the  activated。\r\nbut I found the prop id' s value is old。\r\n\r\nI try to use `this.$nextTick` to get the new id, but not work\r\n`setTimeout`  work, but I do not think it is a right way.\r\n\r\nso, is there a way to get the right value of prop data in  activated？ \r\n\r\n### What does the proposed API look like?\r\njust like  `this.$afterProp(function)`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7709","RelatedDescription":"Closed issue \"can Vue get the new props data in hook activated ?\" (#7709)"},{"Id":"300018545","IsPullRequest":false,"CreatedAt":"2018-02-25T11:31:29","Actor":"miljan-aleksic","Number":"7710","RawContent":null,"Title":"Slots resolving issue on subsequent components","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/316wjk4w41](https://codesandbox.io/s/316wjk4w41)\r\n\r\n### Steps to reproduce\r\nAs stated by the [docs](https://vuejs.org/v2/guide/render-function.html#slots-vs-children) slots() in fn components should be used only when the component knows about them, otherwise should pass along the children and the next component could deal with them.\r\n\r\n### What is expected?\r\nI would expect that all children component would resolve slots correctly as long as children are passed along.\r\n\r\n### What is actually happening?\r\nOnly the initial component gets resolved the slots well, while any subsequent component that gets the children passed along doesn't.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7710","RelatedDescription":"Open issue \"Slots resolving issue on subsequent components\" (#7710)"},{"Id":"299939208","IsPullRequest":false,"CreatedAt":"2018-02-24T15:47:16","Actor":"generateui","Number":"7708","RawContent":null,"Title":"instanceof in expressions does not work","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/127177/](https://jsfiddle.net/50wL7mdz/127177/)\r\n\r\n### Steps to reproduce\r\n1. create a class\r\n2. set data to use an instance of that class\r\n3. create expression in for example a \"v-if\" using instanceof\r\n\r\nNote that the expression does not return true (the span is not rendered in example) while it is expected\r\n\r\n### What is expected?\r\nexpression evaluates to true\r\n\r\n### What is actually happening?\r\nexpression does not return true resulting in not displayed span\r\n\r\n---\r\nworkaround is to create expression in the form of \"instance.contructor.name === 'A'\". But this is not typesafe, and it \"stringly-typed\" instead thus not toolable.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7708","RelatedDescription":"Closed issue \"instanceof in expressions does not work\" (#7708)"},{"Id":"299932610","IsPullRequest":false,"CreatedAt":"2018-02-24T10:55:11","Actor":"Axure","Number":"7707","RawContent":null,"Title":"Styles are not updated in time","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://github.com/Axure/sticky-scroll-demo](https://github.com/Axure/sticky-scroll-demo)\r\n\r\n### Steps to reproduce\r\n```bash\r\nnpm run dev\r\n```\r\nand open `http://localhost:8080`. Scroll inside the region with black border from top to bottom. You will see another div with black border with \"text\" inside it.\r\n\r\n### What is expected?\r\nThe text should always be right on the midline of the visible area of the smaller bordered div.\r\n\r\n### What is actually happening?\r\nThe text is sometimes not on the midline, which produces visible \"lags\".\r\n\r\nYou can see wrongly rendered frames in the developer tools, e.g.:\r\n![photo_2018-02-24_17-07-06](https://user-images.githubusercontent.com/3424317/36629700-a06edd4e-1994-11e8-9b40-f1a4c1757682.jpg)\r\n\r\n(Note that for clarity I temporarily set a red border for the div of the text.)\r\n\r\n---\r\nAn online demo is available at https://axure.github.io/sticky-scroll-demo/.\r\n\r\nThe effect is achieved by modifying the `translateY` of the text inside the smaller div on every scroll. It seems that the modified styled is not applied in time, so the a newly scrolled frame is rendered using the old style.\r\n\r\nI highly suspect that not only styles, but also other data are not applied in time in possible scenarios.\r\n\r\nIt is not a problem of the browser, since the raw DOM solution works well:\r\n  - source: https://github.com/Axure/stickty-scroll-correct/\r\n  - demo: https://axure.github.io/stickty-scroll-correct/\r\n\r\nAngular and React do not suffer from this problem:\r\n  - React source: https://github.com/Axure/sticky-scroll-react/\r\n  - React demo: https://axure.github.io/sticky-scroll-react/\r\n  - Angular source: https://github.com/Axure/sticky-scroll-angular/\r\n  - Angular demo: https://axure.github.io/sticky-scroll-angular/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7707","RelatedDescription":"Open issue \"Styles are not updated in time\" (#7707)"},{"Id":"299917992","IsPullRequest":false,"CreatedAt":"2018-02-24T10:37:47","Actor":"kingofwhales","Number":"7706","RawContent":null,"Title":"Class change for transition not working in mounted lifecycle","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/asiankingofwhales/pen/qxMZrp](https://codepen.io/asiankingofwhales/pen/qxMZrp)\r\n\r\n### Steps to reproduce\r\n1. After the component is mounted change the class to initiate the transition.\r\n2. Not working because the element snaps from left to right without transition\r\n\r\n### What is expected?\r\nThe element should gradually transition from left to right\r\n\r\n### What is actually happening?\r\nthe element jumps from left to right.\r\n\r\n---\r\nWrapping the class change in setTimeout would allow the transition effect to work. However, without the setTimeout, the element simply jumps from left to right. \r\n\r\nSame issue can be replicated in class binding too: https://codepen.io/asiankingofwhales/pen/LQJNvg\r\n\r\nI apologize if this is not a bug but it's been a mystery for a while so i am posting here as a last resort.\r\n\r\np.s\r\nhttps://stackoverflow.com/questions/48658868/class-change-in-mounted-not-triggering-transition-vuejs\r\nhttps://forum.vuejs.org/t/class-change-in-mounted-not-triggering-transition-vuejs/27115/4\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7706","RelatedDescription":"Closed issue \"Class change for transition not working in mounted lifecycle\" (#7706)"},{"Id":"299808901","IsPullRequest":false,"CreatedAt":"2018-02-23T18:36:46","Actor":"STUkh","Number":"7705","RawContent":null,"Title":"Events with modifiers always return \"undefined\"","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/ybr5s354/15/](https://jsfiddle.net/ybr5s354/15/)\r\n\r\n### Steps to reproduce\r\n1. Create event with any modifier\r\n2. Create directive and get event instance from vnode.\r\n3. Call event (maybe dummy event will required)\r\n\r\n### What is expected?\r\nEvent with and without modifiers return function value\r\n\r\n### What is actually happening?\r\nOnly event without modifier return value.\r\nEvents with modifiers always return undefined\r\n\r\n---\r\nFixed in this PR: https://github.com/vuejs/vue/pull/7704\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7705","RelatedDescription":"Open issue \"Events with modifiers always return \"undefined\"\" (#7705)"},{"Id":"299674429","IsPullRequest":true,"CreatedAt":"2018-02-23T11:00:41","Actor":"STUkh","Number":"7704","RawContent":null,"Title":"fix(compiler): return handler value for event modifiers instead of un…","State":"open","Body":"fix(compiler): return handler value for event modifiers instead of undefined\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [x] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nWithout modifiers compiler return original vm function, so we can expect to handle returned value (as example - handle it in directive)\r\n```\r\non: {\r\n    click:  _vm.test($event)\r\n}\r\n```\r\n\r\nWith modifier it always return \"undefined\" because of missing return value\r\n```\r\non: {\r\n    click: function($event) {\r\n        $event.preventDefault()\r\n        _vm.test($event)\r\n    }\r\n}\r\n```\r\n\r\nThis PR add correct return value if modifier wrapper is used\r\n```\r\non: {\r\n    click: function($event) {\r\n        $event.preventDefault()\r\n        return _vm.test($event)\r\n    }\r\n}\r\n```","Url":"https://github.com/vuejs/vue/pull/7704","RelatedDescription":"Open PR \"fix(compiler): return handler value for event modifiers instead of un…\" (#7704)"},{"Id":"299674115","IsPullRequest":false,"CreatedAt":"2018-02-23T10:59:37","Actor":"neoneo","Number":"7703","RawContent":null,"Title":"SSR   Webpack   Vue.extends throws: Property or method \"_ssrNode\" is not defined","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://github.com/neoneo/vue-ssr-webpack-error](https://github.com/neoneo/vue-ssr-webpack-error)\r\n\r\n### Steps to reproduce\r\n- Clone the repo\r\n- `yarn`\r\n- `yarn webpack`\r\n- `node render`\r\n\r\nFor details see the readme in the linked repo.\r\n\r\n### What is expected?\r\nOutput to the console as follows:\r\n\r\n`<div id=\"app\" data-server-rendered=\"true\"><h1>Hello world</h1></div>`\r\n\r\n### What is actually happening?\r\nThe following error:\r\n```\r\nVue warn]: Property or method \"_ssrNode\" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.\r\n\r\nfound in\r\n\r\n---> <App> at src/components/App.vue\r\n       <Root>\r\n[Vue warn]: Property or method \"_ssrEscape\" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.\r\n\r\nfound in\r\n\r\n---> <App> at src/components/App.vue\r\n       <Root>\r\n[Vue warn]: Error in render: \"TypeError: _vm._ssrEscape is not a function\"\r\n\r\nfound in\r\n\r\n---> <App> at src/components/App.vue\r\n       <Root>\r\nTypeError: _vm._ssrEscape is not a function\r\n```\r\n---\r\nI narrowed this case down to Vue.extend, but I actually want to use Typescript with vue-class-component.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7703","RelatedDescription":"Open issue \"SSR   Webpack   Vue.extends throws: Property or method \"_ssrNode\" is not defined\" (#7703)"},{"Id":"299631443","IsPullRequest":true,"CreatedAt":"2018-02-23T08:19:02","Actor":"jmilanovic","Number":"7702","RawContent":null,"Title":"shorten font property","State":"open","Body":"Shortens the font styling from font-size, font-weight, font-family to font.\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [x] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [ ] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","Url":"https://github.com/vuejs/vue/pull/7702","RelatedDescription":"Open PR \"shorten font property\" (#7702)"},{"Id":"299582276","IsPullRequest":false,"CreatedAt":"2018-02-23T08:16:26","Actor":"ripeBoy","Number":"7696","RawContent":null,"Title":"IE11 Internet explorer opens the white screen","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[http://The project is more complex and has not been located to the specific problems.](http://The project is more complex and has not been located to the specific problems.)\r\n\r\n### Steps to reproduce\r\nBuild with vue-cli. After the project development is completed, use chrome to open normal, and IE11 opens the white screen.\r\n\r\n### What is expected?\r\nOpen and use applications normally.\r\n\r\n### What is actually happening?\r\nhang\r\n\r\n---\r\nConsole error:  strict 模式下不允许一个属性有多个定义\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7696","RelatedDescription":"Closed issue \"IE11 Internet explorer opens the white screen\" (#7696)"},{"Id":"299598224","IsPullRequest":false,"CreatedAt":"2018-02-23T08:14:42","Actor":"DMQ","Number":"7699","RawContent":null,"Title":"请问自定义指令支持绑定函数不自动执行吗？","State":"closed","Body":"### What problem does this feature solve?\r\n```\r\n<button v-test=\"test.bind(this, 'something')\"></button>\r\n\r\n-->\r\n\r\n<button v-test=\"test('something')\"></button>\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\n<button v-test=\"test('something')\"></button>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7699","RelatedDescription":"Closed issue \"请问自定义指令支持绑定函数不自动执行吗？\" (#7699)"},{"Id":"299587972","IsPullRequest":false,"CreatedAt":"2018-02-23T08:03:41","Actor":"Horsetoast","Number":"7697","RawContent":null,"Title":"Contenteditable @input doesn't fire in IE11","State":"closed","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/supraniti/pen/Lypobx](https://codepen.io/supraniti/pen/Lypobx)\r\n\r\n### Steps to reproduce\r\nCreate a contenteditable with @input event binder and test in IE11 (Possibly happening with all IE9  according to my searches)\r\n\r\n### What is expected?\r\nIt should fire the input event\r\n\r\n### What is actually happening?\r\nIt doesn't fire the input event\r\n\r\n---\r\nThe same problem found in medium-editor https://github.com/yabwe/medium-editor/issues/394 the issue contains a proposed fix(?)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7697","RelatedDescription":"Closed issue \"Contenteditable @input doesn't fire in IE11\" (#7697)"},{"Id":"299602248","IsPullRequest":false,"CreatedAt":"2018-02-23T05:21:53","Actor":"dsanders11","Number":"7701","RawContent":null,"Title":"Extra Blank Spaces Between Elements In Rendered Template","State":"open","Body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/aoxo2rod/8/](https://jsfiddle.net/aoxo2rod/8/)\r\n\r\n### Steps to reproduce\r\nRun the JSFiddle\r\n\r\n### What is expected?\r\nThe background should be green, styled by `ul:empty`, as the children of `ul` are all conditionally not rendered: empty `v-for` and `v-if` that evaluate to false.\r\n\r\n### What is actually happening?\r\nThe background is red, `ul:empty` is not used because there is a blank space inside the `ul` tags, which CSS doesn't consider to be `:empty`.\r\n\r\n---\r\nThe multiple children elements are important, a single `li` element with `v-if=\"false\"` will produce the correct result. It appears Vue is putting a blank space between the elements, even if they are conditionally not rendered (appearing as `<!---->` instead). It's worth noting that if you manually remove the extra spaces using developer tools, everything looks as expected, `<!---->` does not affect `:empty`.\r\n\r\nFurthermore, this only reproduces if there is a newline between the elements. Modifying the provided JSFiddle to only have the two `li` with `v-if=\"false\"` will produce the correct result if there's no newline between them. So Vue seems to be turning the newline between the elements into a single space, which is causing the issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7701","RelatedDescription":"Open issue \"Extra Blank Spaces Between Elements In Rendered Template\" (#7701)"},{"Id":"299599461","IsPullRequest":false,"CreatedAt":"2018-02-23T05:01:18","Actor":"slisznia","Number":"7700","RawContent":null,"Title":"adding reactive array to state","State":"closed","Body":"My component would like to add a new reactive array to the SST (vuex). I tried in beforeCreate hook, but the added array is not reactive, it's a plain one.\r\n\r\nI can add \"plain\" fields in beforeCreate to my SST and they are all reactive, but the dynamically created array in the SST is not.\r\n\r\nNote that this is not the same as updating an existing array in the SST - I'm aware of the \"[Array Change Detection](https://vuejs.org/v2/guide/list.html#Array-Change-Detection)\" gotchas. I'm trying to dynamically add an entirely new Array to the SST and make it reactive.","Url":"https://github.com/vuejs/vue/issues/7700","RelatedDescription":"Closed issue \"adding reactive array to state\" (#7700)"},{"Id":"299598130","IsPullRequest":false,"CreatedAt":"2018-02-23T04:51:07","Actor":"DMQ","Number":"7698","RawContent":null,"Title":"请问自定义指令支持绑定函数不自动执行吗？","State":"closed","Body":"### What problem does this feature solve?\r\n<button v:test=\"test.bind(this, 'something')\"></button>\r\n\r\n=>\r\n\r\n<button v:test=\"test('something')\"></button>\r\n\r\n### What does the proposed API look like?\r\n<button v:test=\"test('something')\"></button>\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/7698","RelatedDescription":"Closed issue \"请问自定义指令支持绑定函数不自动执行吗？\" (#7698)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-03-01T05:30:31.7221941Z","RunDurationInMilliseconds":2676}