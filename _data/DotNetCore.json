{"Data":{"Blog":{"FeedItems":[{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":53,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7602561361","Type":"PullRequestEvent","CreatedAt":"2018-04-29T02:53:46","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17831","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#17831) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7602400459","Type":"PullRequestEvent","CreatedAt":"2018-04-29T00:29:05","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17832","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26429-01 (master)\" (#17832) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7602063911","Type":"PullRequestEvent","CreatedAt":"2018-04-28T20:05:50","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17813","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26428-04, preview3-26428-04, respectively (master)\" (#17813) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7604099744","Type":"IssuesEvent","CreatedAt":"2018-04-29T21:17:31","Actor":"svick","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9172","RelatedDescription":"Opened issue \"Completion for dotnet add package should suggest package version\" (#9172) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nThe NuGet autocomplete API supports suggesting possible versions for a package, e.g. https://api-v2v3search-0.nuget.org/autocomplete?id=Microsoft.CodeAnalysis&take=100. It would be nice if `dotnet add package` took advantage of this. E.g.:\r\n\r\n```\r\ndotnet add package Microsoft.CodeAnalysis -v <Tab>\r\n1.0.0\r\n1.0.1\r\n1.1.0\r\n1.1.1\r\n1.2.0\r\n1.2.1\r\n1.2.2\r\n1.3.0\r\n1.3.1\r\n1.3.2\r\n2.0.0\r\n2.1.0\r\n2.2.0\r\n2.3.0\r\n2.3.1\r\n2.3.2\r\n2.4.0\r\n2.6.0\r\n2.6.1\r\n2.7.0\r\n```\r\n\r\n## Expected  behavior\r\n\r\n`dotnet complete \"dotnet add package PACKAGE -v \"` returns the list of versions for `PACKAGE`.\r\n\r\n## Actual behavior\r\n\r\n`dotnet complete \"dotnet add package PACKAGE -v \"` returns empty result."},{"Id":"7604050217","Type":"PullRequestEvent","CreatedAt":"2018-04-29T20:46:54","Actor":"svick","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9171","RelatedDescription":"Opened pull request \"Use NuGet autocomplete API for add-package suggestions\" (#9171) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/9128.\r\n\r\nSince `dotnet add package` doesn't work by default with prerelease packages, and since autcompletion is a convenience feature to make common use easier, I have also removed `prerelease=true`.\r\n\r\nOutput from `dotnet complete` for my examples from https://github.com/dotnet/cli/issues/9128 is [here](https://gist.github.com/svick/a29fda60d5923da0a3aa3b067ec1c556). Notice that `dotnet complete \"dotnet add package Microsoft.CodeA\"` now doesn't output anything, I have opened an issue for that: https://github.com/NuGet/NuGetGallery/issues/5858."},{"Id":"7603074268","Type":"IssuesEvent","CreatedAt":"2018-04-29T10:26:05","Actor":"wyang41","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9170","RelatedDescription":"Opened issue \"'not possible to find any compatible framework version' error when running OpenChain project\" (#9170) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI was following the steps given by OpenChain platform (https://docs.openchain.org/en/latest/general/running-openchain.html), and I downloaded .NET from your website not from Git. The APP source files are provided by OpenChain, after I ran 'dotnet run' command in the directory with OC source files, it failed. \r\n\r\nHave to mention,  the version of .NET I installed might be quite different from what OpenChain team had when editing the tutorial doc. Since the step before run, 'dotnet restore', also failed. And I used 'dotnet migrate' as a replacement. Before this command, the source files are 'Program.cs, data, project.json'. After 'dotnet migrate', they changed into 'Openchain.csproj, backup, data, Program.cs, bin, obj'.\r\n\r\nI have tried to change the code in Openchain.csproj, where described the .NET version. I changed '1.0.4' to '2.0.7', but 'Unhandled Exception: System.IO.FileLoadException' happened.\r\n\r\nOpenchain.csproj:\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">                                           \r\n                                                                                \r\n<PropertyGroup>                                                               \r\n<TargetFramework>netcoreapp1.0</TargetFramework>                                             \r\n<PreserveCompilationContext>true</PreserveCompilationContext>               \r\n<AssemblyName>Openchain</AssemblyName>                                      \r\n<OutputType>Exe</OutputType>                                                \r\n<PackageId>Openchain</PackageId>                                            \r\n<RuntimeFrameworkVersion>1.0.4</RuntimeFrameworkVersion>                    \r\n<PackageTargetFallback>$(PackageTargetFallback);dotnet5.6;dnxcore50;portable-net45+win+wpa81+    wp80+Xamarin.iOS10+MonoAndroid10+MonoTouch10</PackageTargetFallback>           \r\n</PropertyGroup> \r\n\r\n\r\n## Expected  behavior\r\n\r\nThe OpenChain APP runs well and then I would do the configuration.\r\n\r\n## Actual behavior\r\n\r\n$ dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '1.0.4' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /\r\n  - Alternatively, install the framework version '1.0.4'.\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.105)\r\n\r\nProduct Information:\r\n Version:            2.1.105\r\n Commit SHA-1 hash:  141cc8d976\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.105/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n\r\n\r\n\r\n@shanselman @AArnott @anurse @AustinWise @srivatsn "},{"Id":"7602489352","Type":"IssuesEvent","CreatedAt":"2018-04-29T01:47:30","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9169","RelatedDescription":"Opened issue \"List command line help description is out of date.\" (#9169) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Run `dotnet --help`.\r\n\r\n## Expected  behavior\r\n\r\nThe `list` command should have a description of `List references of a .NET project.`.\r\n\r\n## Actual behavior\r\n\r\nThe `list` command has a description of `List project references or installed tools`.\r\n\r\nThis is out of date because the list command no longer has anything to do with .NET tools.\r\n\r\n## Environment data\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008672\r\n Commit:    5d471af2a4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-rc1-008672/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26423-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008672 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30661 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30661 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26423-06 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7602415335","Type":"IssuesEvent","CreatedAt":"2018-04-29T00:41:05","Actor":"KevinBurton","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9168","RelatedDescription":"Opened issue \"Test aborted\" (#9168) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet test --filter ImportIndexTest\r\n`\r\n## Expected  behavior\r\n```\r\nTotal tests: 1. Passed: 1. Failed: 0. Skipped: 0.\r\nTest Run Successful.\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nNo test is available in /Users/rebeccaannburton/Projects/PocketNurse/PocketNurse/bin/Debug/netcoreapp2.0/PocketNurse.dll. Make sure test project has a nuget reference of package \"Microsoft.NET.Test.Sdk\" and framework version settings are appropriate and try again.\r\n```\r\n\r\nTest Run Aborted.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\nThe main project\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <UserSecretsId>aspnet-PocketNurse-36604171-3424-4347-80E3-30D24138EC43</UserSecretsId>\r\n  </PropertyGroup>\r\n\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"EPPlus\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.7\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.2\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.3\" PrivateAssets=\"All\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.2\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.1\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThe test project\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.7.0\" />\r\n    <PackageReference Include=\"Moq\" Version=\"4.8.2\" />\r\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.2.1\" />\r\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.2.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\PocketNurse\\PocketNurse.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nWhy is it aborted?\r\n\r\n\r\n\r\n\r\n"},{"Id":"7600214969","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:57:56","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7791","RelatedDescription":"Closed issue \"[build] Passing a property (/property) with multiple values to msbuild isn't working\" (#7791) at dotnet/cli","RelatedBody":"I need to pass values for [`NoWarn` option](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/nowarn-compiler-option) to C# compiler. Previously with msbuild it was being passed as property:\r\n```\r\nmsbuild /p:NoWarn:\"1591;1573;3001;3002\"\r\n```\r\n\r\nBut with dotnet cli it doesn't work anymore.\r\nI tried both `build` and `msbuild` commands. \r\n\r\n\r\n## Steps to reproduce\r\n```\r\ndotnet.exe msbuild /property:NoWarn=1591;1573;3001;3002 mysolution.sln\r\n```\r\nor\r\n```\r\ndotnet.exe msbuild /property:NoWarn=\"1591;1573;3001;3002\" mysolution.sln\r\n```\r\nor\r\n```\r\ndotnet.exe msbuild \"/property:NoWarn=1591;1573;3001;3002\" mysolution.sln\r\n```\r\n\r\nall result in\r\n```\r\nMSBUILD : error MSB1006: Property is not valid.\r\nSwitch: 1573\r\n```\r\nWith `dotnet.exe `build` there's the same error.\r\n\r\nWhile if I set these values in csproj:\r\n```\r\n<NoWarn>1591;1573;3001;3002</NoWarn>\r\n```\r\nit works as expected (warning are being ignored)\r\n\r\n## Expected  behavior\r\nPass all warning code to the compiler.\r\n\r\n## Actual behavior\r\nFaulting with an error\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nD:\\>dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7600203010","Type":"PullRequestEvent","CreatedAt":"2018-04-27T23:52:03","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9153","RelatedDescription":"Merged pull request \"Fix MSBuild invocation to quote property option values.\" (#9153) at dotnet/cli","RelatedBody":"This PR ensures that any `/property` option's value is surrounded by quotes\r\nto allow MSBuild to properly interpret special characters like semicolons.\r\n\r\nUsers familiar with MSBuild expect `/property:Name=\"Value\"` to handle\r\nsemicolons. However, since `dotnet msbuild` parses the command line first, the\r\nquotes get processed by its command line parser.  This results in\r\n`/property:Name=Value` being passed to MSBuild, which will not parse a \"Value\"\r\ncontaining a semicolon correctly.\r\n\r\nSince it is safe to always quote the property value for this option, this fix\r\nsimply ensures that the value is surrounded by quotes.\r\n\r\nThis fixes the issue for all commands that forward arguments to MSBuild.\r\n\r\nFixes #7791."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7601558195","Type":"IssuesEvent","CreatedAt":"2018-04-28T14:44:00","Actor":"MoamenMohamed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Opened issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601217646","Type":"IssuesEvent","CreatedAt":"2018-04-28T11:00:57","Actor":"thomasclaudiushuber","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Opened issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it is actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"},{"Id":"7601081418","Type":"IssuesEvent","CreatedAt":"2018-04-28T09:33:37","Actor":"mperdeck","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/663","RelatedDescription":"Closed issue \"When running ASP.NET Core web site targeting net47 in IIS, dotnet.exe does not appear in process list\" (#663) at dotnet/standard","RelatedBody":"I just converted a large legacy site to Net Core. Because of some old code, I have to target net47 instead of netcoreapp2.0 / netstandard2.0.\r\n\r\nProblem is that when I run the site in IIS, it starts up correctly, but then I cannot attach the debugger. The process list (Debug | Attach to process) does not show the dotnet.exe process at all.\r\n\r\nTo investigate this:\r\n* I created a new ASP.NET Core web application in Visual Studio 2017 targeting netcoreapp2.0, \r\n* published it (dotnet publish) and \r\n* pointed my IIS web site to the published directory. \r\n\r\nAfter hitting the site, I was able to attach to the dotnet.exe process ok.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe shows up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\nI then retargeted it to net47 because that is what my site uses. \r\n* Because Microsoft.AspNetCore.All does not support net47, I replaced it with enough individual packages to make the site compile. \r\n* Published it (dotnet publish -f net47). \r\n* Pointed the IIS site to the new net47 published directory. \r\n\r\nI could load the site ok and navigate around. However, dotnet.exe no longer appeared in the process list.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe does NOT show up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\n\r\nIs there any way I can debug a site running in IIS that targets the Net Framework?\r\n\r\n"},{"Id":"7600173317","Type":"PullRequestEvent","CreatedAt":"2018-04-27T23:38:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/715","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02725-03 (master)\" (#715) at dotnet/standard","RelatedBody":""},{"Id":"7600172487","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:38:02","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/718","RelatedDescription":"Closed issue \"Add IItemProperties, IEditableCollectionView and associated types\" (#718) at dotnet/standard","RelatedBody":"The `IItemProperties` and `IEditableCollectionView` in System.ComponentModel namespace are really great for describing data on ICollectionViewSource to handle dynamic datasources, where you don't have a pre-defined class to encapsulate a datamodel. For instance when dealing with generic data from any database table. It also avoids the need for reflection, as the IItemProperties provides the PropertyInfo you otherwise would retrieve through reflection.\r\n\r\nThese interfaces are useful for generating UI dynamically based on dynamic data models, for use with for instance DataGrids, form entries etc. By having your data collections implement these interfaces, specific platforms can use these interfaces to generate a UI for the data.\r\n\r\n\r\nDoc references:\r\n- [IItemProperties](https://docs.microsoft.com/dotnet/api/system.componentmodel.iitemproperties?view=netframework-4.7.1)\r\n- [IEditableCollectionView](https://docs.microsoft.com/dotnet/api/system.componentmodel.ieditablecollectionview?view=netframework-4.7.1)\r\n- [ItemPropertyInfo](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.itempropertyinfo?view=netframework-4.7.1)"},{"Id":"7600144104","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:25:33","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/708","RelatedDescription":"Closed issue \"Wrong reference path in NETStandard.Library.targets\" (#708) at dotnet/standard","RelatedBody":"@cannehag commented on [Thu Apr 12 2018](https://github.com/dotnet/core/issues/1440)\n\n# After installing NetStandard.Library 2.0.2, a lot of warning occur.\r\nNetStandard.Library.targets 2.0.2 have \r\n<Reference Include=\"$(MSBuildThisFileDirectory)\\ref\\Microsoft.Win32.Primitives.dll...\r\nAccording to documentation MSBuildThisFileDirectory will include a final slash, thus giving a path with double slash and the error message \r\nThe referenced component 'C:\\Users\\xxx\\.nuget\\packages\\netstandard.library\\2.0.2\\build\\netstandard2.0\\\\ref\\Microsoft.Win32.Primitives.dll could not be found'\r\n\r\nVersion 2.0.1 does not have this issue since the targets file is including *.dll from another path\r\n<ReferenceCopyLocalPaths Condition=\"'$(_NetStandardLibraryLibPath)' != ''\" Include=\"$(_NetStandardLibraryLibPath)*.dll\">\r\n\n\n---\n\n@elementalpete commented on [Mon Apr 16 2018](https://github.com/dotnet/core/issues/1440#issuecomment-381640157)\n\nI experienced the same issue after upgrading (path in warning message contains a double slash, actual path has only a single slash).  Downgrading to 2.0.1 solved the issue for now.\n\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7604422595","Type":"IssuesEvent","CreatedAt":"2018-04-30T00:59:44","Actor":"Porges","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29405","RelatedDescription":"Opened issue \"There appears to be no way to prevent strings with embedded NULs from being parsed successfully as numbers\" (#29405) at dotnet/corefx","RelatedBody":"A string with a trailing `NUL` char will always parse successfully, even if `NumberStyles.None` is passed:\r\n\r\n```csharp\r\n// trailing space okay with default NumberStyles\r\nint.Parse(\"1234 \", CultureInfo.InvariantCulture)\r\n→ 1234\r\n\r\n// as is trailing NUL\r\nint.Parse(\"1234\\u0000\", CultureInfo.InvariantCulture)\r\n→ 1234\r\n\r\n// we can prevent parsing of trailing space by specifying NumberStyles.None\r\nint.Parse(\"1234 \", NumberStyles.None, CultureInfo.InvariantCulture)\r\n→ FormatException\r\n\r\n// however, embedded NUL still parses\r\nint.Parse(\"1234\\u0000\", NumberStyles.None, CultureInfo.InvariantCulture)\r\n→ 1234\r\n```"},{"Id":"7604380567","Type":"IssuesEvent","CreatedAt":"2018-04-30T00:30:58","Actor":"kitsor","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29404","RelatedDescription":"Closed issue \"CngKey.Export The requested operation is not supported [Windows]\" (#29404) at dotnet/corefx","RelatedBody":"Can't get RSAParameters on Windows.\r\n\r\nCode to reproduce:\r\n```C#\r\nusing System;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Security.Cryptography.X509Certificates;\r\n\r\nnamespace TestRSA\r\n{\r\n  class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      try\r\n      {\r\n        X509Certificate2 cert = new X509Certificate2(\"certificate.pfx\", \"password\");\r\n        RSAParameters rsaKey = cert.GetRSAPrivateKey().ExportParameters(true);\r\n        Console.WriteLine(string.Join(\"\", rsaKey.P.Select(x => string.Format(\"{0:x2}\", x))));\r\n      }\r\n      catch (Exception ex)\r\n      {\r\n        Console.WriteLine(ex.Message);\r\n        Console.WriteLine(ex.StackTrace);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\non Windows 10/8.1 returns:\r\n\r\n```\r\n> dotnet TestRSA.dll\r\nThe requested operation is not supported\r\n   at System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat format)\r\n   at System.Security.Cryptography.RSACng.ExportKeyBlob(Boolean includePrivateParameters)\r\n   at System.Security.Cryptography.RSACng.ExportParameters(Boolean includePrivateParameters)\r\n   at TestRSA.Program.Main(String[] args) in D:\\VS\\TestRSA\\TestRSA\\Program.cs:line 15\r\n```\r\non Ubuntu 16.04\r\n```\r\n$ dotnet TestRSA.dll\r\nda32f2af4800f9f945bd0c8185e9a78b0e0.....\r\n```\r\n\r\nAdditional info:\r\n```\r\n> dotnet --info\r\n.NET Command Line Tools (2.1.105)\r\n\r\nProduct Information:\r\n Version:            2.1.105\r\n Commit SHA-1 hash:  141cc8d976\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.105\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\r\n```\r\n$ dotnet --info\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n"},{"Id":"7603804942","Type":"IssuesEvent","CreatedAt":"2018-04-29T18:16:37","Actor":"kitsor","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29404","RelatedDescription":"Opened issue \"CngKey.Export The requested operation is not supported [Windows]\" (#29404) at dotnet/corefx","RelatedBody":"Can't get RSAParameters on Windows.\r\n\r\nCode to reproduce:\r\n```C#\r\nusing System;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Security.Cryptography.X509Certificates;\r\n\r\nnamespace TestRSA\r\n{\r\n  class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      try\r\n      {\r\n        X509Certificate2 cert = new X509Certificate2(\"certificate.pfx\", \"password\");\r\n        RSAParameters rsaKey = cert.GetRSAPrivateKey().ExportParameters(true);\r\n        Console.WriteLine(string.Join(\"\", rsaKey.P.Select(x => string.Format(\"{0:x2}\", x))));\r\n      }\r\n      catch (Exception ex)\r\n      {\r\n        Console.WriteLine(ex.Message);\r\n        Console.WriteLine(ex.StackTrace);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\non Windows 10/8.1 returns:\r\n\r\n```\r\n> dotnet TestRSA.dll\r\nThe requested operation is not supported\r\n   at System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat format)\r\n   at System.Security.Cryptography.RSACng.ExportKeyBlob(Boolean includePrivateParameters)\r\n   at System.Security.Cryptography.RSACng.ExportParameters(Boolean includePrivateParameters)\r\n   at TestRSA.Program.Main(String[] args) in D:\\VS\\TestRSA\\TestRSA\\Program.cs:line 15\r\n```\r\non Ubuntu 16.04\r\n```\r\n$ dotnet TestRSA.dll\r\nda32f2af4800f9f945bd0c8185e9a78b0e0.....\r\n```\r\n\r\nAdditional info:\r\n```\r\n> dotnet --info\r\n.NET Command Line Tools (2.1.105)\r\n\r\nProduct Information:\r\n Version:            2.1.105\r\n Commit SHA-1 hash:  141cc8d976\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.105\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\r\n```\r\n$ dotnet --info\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n"},{"Id":"7603429162","Type":"IssuesEvent","CreatedAt":"2018-04-29T14:28:59","Actor":"Trolldemorted","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29403","RelatedDescription":"Opened issue \"ECCurve does not exist in System.Security.Cryptography in netstandard 1.4 projects\" (#29403) at dotnet/corefx","RelatedBody":"Since windows phones want fancy encryption too, could you either support netstandard1.4 on W10M or make the elliptic curve classes available in netstandard1.4?"},{"Id":"7603328233","Type":"PullRequestEvent","CreatedAt":"2018-04-29T13:25:31","Actor":"juliushardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29402","RelatedDescription":"Opened pull request \"Avoid substring allocations in WebUtility.HtmlDecode\" (#29402) at dotnet/corefx","RelatedBody":"Fixes #13960. In contrast to #27250, this PR focuses exclusively on the substring allocations and not on the StringBuilder/TextWriter part.\r\n\r\nThere are three substring allocations in WebUtility: [L199](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Net/WebUtility.cs#L199), [L203](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Net/WebUtility.cs#L203) and [L234](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Net/WebUtility.cs#L234).\r\n\r\nWhile the first two ones can be avoided by simply changing a few API calls since `uint.TryParse` now accepts `Span<char>`, the third one involves a bit more work as it requires the [html entity lookup table](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Net/WebUtility.cs#L776) to be modified. @jamesqo described a possible solution in #13960, however, as he pointed out, it might have an initialization impact. The one implemented here is less flexible, but comes without additional initialization costs. The idea is that because all supported html entity strings are 8 characters or less and are ASCII-only (and hence each character of the entity string can be represented by a single byte), they can be squeezed into an UInt64, which serves as the key in the lookup table. Instructions to compute the key for possible future entries are included in the code comments. A disadvantage of this approach is that potential future HTML entity strings of 9 characters or more would require an additional code path. That being said, HtmlDecode now runs up to 35% faster:\r\n\r\n\r\nMethod | Mean | Error | StdDev | Gen 0 | Allocated\r\n--------- | --------- | -------- | ---------- | ------- | ----------\r\n TestOldImplementation | 2.804 us | 0.0558 us | 0.0933 us | 0.4425 | 1864 B\r\n TestNewImplementation | 1.798 us | 0.0354 us | 0.0363 us | 0.2365 | 1000 B\r\n\r\nI think that the performance improvements justify the added complexity and decreased readability."},{"Id":"7603298451","Type":"PullRequestEvent","CreatedAt":"2018-04-29T13:05:56","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29401","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26429-04, preview1-26429-01, respectively (master)\" (#29401) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7604185118","Type":"IssuesEvent","CreatedAt":"2018-04-29T22:13:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5757","RelatedDescription":"Opened issue \"Implement StringToCoTaskMemUTF8 and related method\" (#5757) at dotnet/corert","RelatedBody":"Reported by @RonnChyran on gitter."},{"Id":"7604182027","Type":"PullRequestEvent","CreatedAt":"2018-04-29T22:11:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5756","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5756) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7602562206","Type":"PullRequestEvent","CreatedAt":"2018-04-29T02:54:36","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5756","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5756) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7601325594","Type":"PullRequestEvent","CreatedAt":"2018-04-28T12:15:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5754","RelatedDescription":"Merged pull request \"Fix safe handle marshaling\" (#5754) at dotnet/corert","RelatedBody":"This makes https:// requests work on Linux."},{"Id":"7601278039","Type":"PullRequestEvent","CreatedAt":"2018-04-28T11:43:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5755","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5755) at dotnet/corert","RelatedBody":""},{"Id":"7601277748","Type":"PullRequestEvent","CreatedAt":"2018-04-28T11:42:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5755","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5755) at dotnet/corert","RelatedBody":""},{"Id":"7600650601","Type":"PullRequestEvent","CreatedAt":"2018-04-28T04:41:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5754","RelatedDescription":"Opened pull request \"Fix safe handle marshaling\" (#5754) at dotnet/corert","RelatedBody":"This makes https:// requests work on Linux."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7604674624","Type":"PullRequestEvent","CreatedAt":"2018-04-30T03:36:36","Actor":"richlander","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2198","RelatedDescription":"Opened pull request \"Simplify preview warning\" (#2198) at dotnet/sdk","RelatedBody":"This multi-line warning bugs me. I'd like it to be single line.\r\n\r\n- Not sure if the localized files need to be updated. I didn't do that, but can.\r\n- The link (same as old one) isn't that helpful. We should have a doc on using previews. Global.json is one part of using previews."},{"Id":"7600154700","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:30:18","Actor":"weshaggard","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2197","RelatedDescription":"Opened issue \"Assembly informational attributes not applied for .net core app\" (#2197) at dotnet/sdk","RelatedBody":"@karelz commented on [Fri Apr 27 2018](https://github.com/dotnet/core-setup/issues/4088)\n\n_From @Priya91 on April 27, 2018 1:33_\n\n**Repro:**\r\n\r\n1. Create a .net core app\r\n2. Set the following properties in the csproj\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <AssemblyTitle>Assembly Information Repro</AssemblyTitle>\r\n    <AssemblyProduct>Assembly Information Repro</AssemblyProduct>\r\n    <AssemblyDescription>Assembly Information Repro</AssemblyDescription>\r\n    <Product>Assembly Information Repro</Product>\r\n    <PublisherName>tester</Publishername>\r\n</PropertyGroup>\r\n```\r\n3. Publish the app.\r\n\r\n**Expected:**\r\nThe properties on ```<assemblyname>.exe``` are set as per the info provided in the csproj.\r\n\r\n**Actual:**\r\nThe properties are set only for ```<assemblyname>.dll```, not on the ```<assemblyname>.exe```. Note, the .exe is the one that runs, and is shown in task manager, firewall prompts, etc. So without the process information, on task manager, it doesn't have a description, and on firewall prompts, it shows the publisher as unknown.\r\n\r\n**AssemblyMetadata.dll**\r\n\r\n![image](https://user-images.githubusercontent.com/7853870/39339896-e260be6e-497f-11e8-867b-fb470122a334.png)\r\n\r\n**AssemblyMetadata.exe**\r\n\r\n![image](https://user-images.githubusercontent.com/7853870/39339877-c3c9349a-497f-11e8-85ad-64ae3f6461e0.png)\r\n\n\n_Copied from original issue: dotnet/corefx#29362_\n\n---\n\n@karelz commented on [Fri Apr 27 2018](https://github.com/dotnet/core-setup/issues/4088#issuecomment-385012366)\n\n_From @kasper3 on April 27, 2018 6:21_\n\nBelongs to https://github.com/dotnet/sdk?\n\n"},{"Id":"7599919437","Type":"PullRequestEvent","CreatedAt":"2018-04-27T22:03:29","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2196","RelatedDescription":"Opened pull request \"Add trim for path in Item\" (#2196) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/sdk/issues/1538"},{"Id":"7599769527","Type":"PullRequestEvent","CreatedAt":"2018-04-27T21:21:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2195","RelatedDescription":"Merged pull request \"Support overriding MSBuildProjectExtensionsPath for a specific project via global properties\" (#2195) at dotnet/sdk","RelatedBody":"Dual check-in into release/2.1.3xx for change in #2194\r\n\r\nTwo properties are needed since global properties flow to referenced projects so there needs to be a way to specify which project the override applies to"},{"Id":"7599642449","Type":"PullRequestEvent","CreatedAt":"2018-04-27T20:50:21","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2194","RelatedDescription":"Merged pull request \"Support overriding MSBuildProjectExtensionsPath for a specific project via global properties\" (#2194) at dotnet/sdk","RelatedBody":"Two properties are needed since global properties flow to referenced projects so there needs to be a way to specify which project the override applies to\r\n\r\nPart of the fix to https://github.com/dotnet/cli/issues/9129"},{"Id":"7599534215","Type":"PullRequestEvent","CreatedAt":"2018-04-27T20:25:12","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2195","RelatedDescription":"Opened pull request \"Support overriding MSBuildProjectExtensionsPath for a specific project via global properties\" (#2195) at dotnet/sdk","RelatedBody":"Dual check-in into release/2.1.3xx for change in #2194\r\n\r\nTwo properties are needed since global properties flow to referenced projects so there needs to be a way to specify which project the override applies to"},{"Id":"7599296211","Type":"PullRequestEvent","CreatedAt":"2018-04-27T19:29:59","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2194","RelatedDescription":"Opened pull request \"Support overriding MSBuildProjectExtensionsPath for a specific project via global properties\" (#2194) at dotnet/sdk","RelatedBody":"Two properties are needed since global properties flow to referenced projects so there needs to be a way to specify which project the override applies to\r\n\r\nPart of the fix to https://github.com/dotnet/cli/issues/9129"},{"Id":"7596898098","Type":"PullRequestEvent","CreatedAt":"2018-04-27T11:27:51","Actor":"noahfalk","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2193","RelatedDescription":"Opened pull request \"Add a tiered compilation build variable\" (#2193) at dotnet/sdk","RelatedBody":"All the other runtimeconfig options have a built-in property to set them in\r\nout build targets so adding this one to follow suit."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":48,"FavoriteCount":21,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":124,"FavoriteCount":93,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":152,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null},{"Id":"985915431499259904","CreatedAt":"2018-04-16T16:18:50+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz and his pair-programming guest @fiercekittenz tomorrow for some LIVE CODING and discussion ab… https://t.co/Vll8gfdlKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2018-04-30T05:30:23.7049197Z","RunDurationInMilliseconds":7970}