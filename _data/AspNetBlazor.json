{"Data":{"GitHubIssues":{"Issues":[{"Id":"382383193","IsPullRequest":false,"CreatedAt":"2018-11-19T20:36:46","Actor":"rodolfograve","Number":"1703","RawContent":null,"Title":"await inside OnInitAsync causes the browser to hang","State":"open","Body":"Similar to #1242 but I can consistently reproduce and it happens on the simplest Component. No Layout involved. Happened on 0.6.0 and kept happening after I upgraded to 0.7.0.\r\n\r\nIt is a very strange behavior which points to some mishandling of asynchronous actions inside OnInitAsync.\r\n\r\n### Version that behaves as expected\r\n\r\nThe code below **fails** as expected. A System.NullReferenceException is shown in the browser console.\r\n\r\n```\r\n@page \"/\"\r\n<div>\r\n    @foreach (var item in Items)\r\n    {\r\n        <div>@item</div>\r\n    }\r\n</div>\r\n\r\n@functions {\r\n    protected IEnumerable<string> Items { get; set; }\r\n}\r\n```\r\n\r\n**Result:** `Uncaught (in promise) Error: System.NullReferenceException: Object reference not set to an instance of an object.`\r\n\r\n### Version that **works** as expected\r\n```\r\n@page \"/\"\r\n<div>\r\n    @foreach (var item in Items)\r\n    {\r\n        <div>@item</div>\r\n    }\r\n</div>\r\n\r\n@functions {\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        await Task.CompletedTask;\r\n        Items = new[] { \"item1\" };\r\n    }\r\n\r\n    protected IEnumerable<string> Items { get; set; }\r\n}\r\n```\r\n\r\n**Result:** item1 is shown on the screen.\r\n\r\n### Version that unexpectedly hangs up\r\n```\r\n@page \"/\"\r\n<div>\r\n    @foreach (var item in Items)\r\n    {\r\n        <div>@item</div>\r\n    }\r\n</div>\r\n\r\n@functions {\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        await Task.Delay(1); // This line is the only difference\r\n        Items = new[] { \"item1\" };\r\n    }\r\n\r\n    protected IEnumerable<string> Items { get; set; }\r\n}\r\n```\r\n**Result:** An exception is shown in the console, but from that point on the browser becomes unresponsive and I need to close the tab and re-run the Blazor application.\r\n\r\n`Uncaught (in promise) Error: System.NullReferenceException: Object reference not set to an instance of an object.`","Url":"https://github.com/aspnet/Blazor/issues/1703","RelatedDescription":"Open issue \"await inside OnInitAsync causes the browser to hang\" (#1703)"},{"Id":"382314625","IsPullRequest":true,"CreatedAt":"2018-11-19T17:15:46","Actor":"kswoll","Number":"1702","RawContent":null,"Title":"Ignore non-public setters in analyzer","State":"open","Body":"Currently if you have a property like:\r\n\r\n```\r\n[Parameter] public string Foo { get; private set; }\r\n```\r\n\r\nThe analzyer emits a warning about public properties with a `[Parameter]` attribute specified.  Since the reason for this warning is about calling the setter (and mutating state at improper points in the rendering cycle) explicit non-public setters should be ignored.\r\n\r\nSee https://github.com/aspnet/Blazor/issues/1388#issuecomment-439650736 for more elaboration","Url":"https://github.com/aspnet/Blazor/pull/1702","RelatedDescription":"Open PR \"Ignore non-public setters in analyzer\" (#1702)"},{"Id":"382250797","IsPullRequest":false,"CreatedAt":"2018-11-19T14:54:24","Actor":"grahamehorner","Number":"1701","RawContent":null,"Title":"Parameter attribute with data annotations","State":"open","Body":"IMHO it would be great to allow the blazor components to enforce parameter contracts using the existing data annotations; eg. \r\n\r\n```\r\n[Required,Parameter,StringLength(80)]\r\nstring Name { get; set; }\r\n```\r\n\r\nthis would avoid a lot of boilerplate code with the components and/or replication of feature that exist in data annotation libraries today.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1701","RelatedDescription":"Open issue \"Parameter attribute with data annotations\" (#1701)"},{"Id":"381587564","IsPullRequest":false,"CreatedAt":"2018-11-19T14:06:12","Actor":"grahamehorner","Number":"1689","RawContent":null,"Title":"Q: client side digital signature","State":"closed","Body":"Is there anyway #blazor can obtain the public key used to secure the https connection, so it can then be used to verify the hash of a data payload client side ? ","Url":"https://github.com/aspnet/Blazor/issues/1689","RelatedDescription":"Closed issue \"Q: client side digital signature\" (#1689)"},{"Id":"382116952","IsPullRequest":false,"CreatedAt":"2018-11-19T09:06:26","Actor":"fs86","Number":"1700","RawContent":null,"Title":"Js initialization in OnAfterRender stopped working with 0.7.0","State":"open","Body":"After I upgraded to Blazor 0.7.0 I noticed that initialization scripts of 3rd party JavaScript libraries which I usually call in OnAfterRender stopped working.\r\nE.g. I use select2 (https://github.com/select2/select2) to apply a custom style for my select fields. But it seems like something has changed with Blazor 0.7.0, because the following code (which used to work in 0.6.0) dosn't work anymore:\r\n\r\n```\r\nprotected override void OnAfterRender()\r\n{\r\n  base.OnAfterRender();\r\n  JsInterop.InitializeSelect2();\r\n}\r\n```\r\n\r\nMy JavaScript function:\r\n```\r\nwindow.JsFunctions = {\r\n  initializeSelect2: function() {\r\n    $('select').select2();\r\n  }\r\n}\r\n```\r\nThe control style will get applied when I Call StateHasChanged() after JsInterop.InitializeSelect2(), but this will end up in an endless loop. Is there a better place to call InitializeSelect2() than OnAfterRender?\r\n\r\n**Edit:**\r\nI found the following statement about lifecycle methods in the official documentation:\r\n\r\n> OnAfterRenderAsync and OnAfterRender are called each time after a component has finished rendering. Element and component references are populated at this point. **Use this stage to perform additional initialization steps using the rendered content, such as activating third-party JavaScript libraries that operate on the rendered DOM elements.**\r\n\r\nAfter doing a bit of research I can say that the corresponding field is not accessible in OnAfterRender.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1700","RelatedDescription":"Open issue \"Js initialization in OnAfterRender stopped working with 0.7.0\" (#1700)"},{"Id":"382048663","IsPullRequest":false,"CreatedAt":"2018-11-19T04:01:06","Actor":"andycnguyen","Number":"1699","RawContent":null,"Title":"Problem deserializing dictionary with object keys","State":"open","Body":"I'm trying to send an object of type `Dictionary<Node, decimal>` from my controller to a page, where `Node `is a custom class I've written. When I first attempted this, I got the following error:\r\n\r\n`WASM: [System.ArgumentException] The value \"App.Shared.Graph.Node\" is not of type \"App.Shared.Graph.Node\" and cannot be used in this generic collection.`\r\n\r\nI learned that there is a more general problem of deserializing dictionaries with complex keys, and sure enough I found that if I attempted to serialize and deserialize one of my dictionaries in a unit test using Json.NET, it failed. With this in mind, I implemented the `TypeConverter` solution suggested [here](https://stackoverflow.com/questions/24504245/not-ableto-serialize-dictionary-with-complex-key-using-json-net). Now I can successfully serialize and deserialize my dictionaries in unit tests, but this still fails in my Blazor app. I now get a different error:\r\n\r\n`WASM: [System.ArgumentException] The value \"{\"Username\":\"123\",\"Name\":null,\"Degree\":0}\" is not of type \"App.Shared.Graph.Node\" and cannot be used in this generic collection.`\r\n\r\n(The value cited above corresponds to one of my `Node` objects.)","Url":"https://github.com/aspnet/Blazor/issues/1699","RelatedDescription":"Open issue \"Problem deserializing dictionary with object keys\" (#1699)"},{"Id":"382007849","IsPullRequest":false,"CreatedAt":"2018-11-18T22:32:06","Actor":"ransagy","Number":"1698","RawContent":null,"Title":"Override/add to the auto-genrated IIS rewrite rules for standalone apps","State":"open","Body":"When using the standalone hosting model, The publish process generates a swanky `web.config` for us with some rewrite rules to make sure static files and urls are handled correctly in the SPA context.\r\n\r\nI'm trying to add an initial redirect to HTTPS on top of that. Following [this](https://www.hanselman.com/blog/HowToEnableHTTPStrictTransportSecurityHSTSInIIS7.aspx) article, for example, means that i want to add two rules to my web.config - one for HTTP->HTTPS redirection and one for adding an HSTS header to better protect such a redirect.\r\n\r\nRight now, The only way is to inject it into the web.config after the build/publish process is done. I'm wondering if there could be a way to define/add to the generated content as part of the process rather than outside of it.","Url":"https://github.com/aspnet/Blazor/issues/1698","RelatedDescription":"Open issue \"Override/add to the auto-genrated IIS rewrite rules for standalone apps\" (#1698)"},{"Id":"382007569","IsPullRequest":false,"CreatedAt":"2018-11-18T22:28:53","Actor":"Venando-a","Number":"1697","RawContent":null,"Title":"dotnet restore does not update links","State":"open","Body":"Probably I am missing something obvious... I can build and execute the demo BlazorApp1 on a Windows 10 machine and also on a Ubuntu one. But if I copy the generated files and folders from the Windows machine to Linux, run\r\n`dotnet restore --force` then\r\n`dotnet run` fails with several errors like this one:\r\n`/home/xy/.nuget/packages/microsoft.aspnetcore.blazor.build/0.7.0/targets/Blazor.MonoRuntime.targets(12,5): error MSB3030: Could not copy the file \"C:/Users/yz/Documents/Visual Studio 2017/Projects/BlazorApp1/obj/Debug/netstandard2.0/blazor/linker/Microsoft.AspNetCore.Blazor.dll\" because it was not found. [/home/xy/Desktop/BlazorApp1/BlazorApp1.csproj]\r\n`\r\nShouldn't restore update these references to a Windows folder? \r\n\r\nBlazor.MonoRuntime.targets(12,5):\r\n`    <!-- Copy the blazor output files  -->\r\n    <Copy\r\n      SourceFiles=\"@(BlazorItemOutput)\"\r\n      DestinationFiles=\"@(BlazorItemOutput->'%(TargetOutputPath)')\"\r\n      SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\r\n      OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\r\n      Retries=\"$(CopyRetryCount)\"\r\n      RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\r\n      UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\r\n      UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\r\n      Condition=\"'@(BlazorItemOutput)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'\">\r\n    </Copy>\r\n`\r\n","Url":"https://github.com/aspnet/Blazor/issues/1697","RelatedDescription":"Open issue \"dotnet restore does not update links\" (#1697)"},{"Id":"381472696","IsPullRequest":false,"CreatedAt":"2018-11-18T04:11:58","Actor":"nickbeau","Number":"1686","RawContent":null,"Title":"Issue with DevOps Build in Blazor 0.7.0","State":"closed","Body":"### Functional impact\r\nThis stops us accessing our Blazor Application from an Azure App Site.\r\n\r\n### Minimal repro steps\r\n1. Create New Blazor Application 0.7.0 from the template\r\n2. Run the build process below\r\n3. Run the publish process below\r\n4. Navigate to the Application URL\r\n\r\n### Expected result\r\nThe application should run, as it did with Blazor 0.6.0\r\n\r\n### Actual result\r\nIf I access the application with https:, I get the following error in the Browser (Chrome) Console:\r\n\r\nWASM: The assembly mscorlib.dll was not found or could not be loaded.\r\n\r\nWASM: It should have been installed in the `/mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/sdks/out/wasm-runtime-release/lib/mono/4.5/mscorlib.dll' directory.\r\n\r\ngo-micro.azurewebsites.net/:1 Uncaught (in promise) ExitStatus {name: \"ExitStatus\", message: \"Program terminated with exit(1)\", status: 1}message: \"Program terminated with exit(1)\"name: \"ExitStatus\"status: 1__proto__: Error\r\n    at https://go-micro.azurewebsites.net/_framework/wasm/mono.js:1:204993\r\nPromise.then (async)\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\ncallRuntimeCallbacks @ mono.js:1\r\npreRun @ mono.js:1\r\nrun @ mono.js:1\r\nrunCaller @ mono.js:1\r\nremoveRunDependency @ mono.js:1\r\nreceiveInstance @ mono.js:1\r\nreceiveInstantiatedSource @ mono.js:1\r\nPromise.then (async)\r\ndoNativeWasm @ mono.js:1\r\n(anonymous) @ mono.js:1\r\n(anonymous) @ mono.js:1\r\n\r\nIf I access the application using http, I get:\r\nWASM: Runtime critical type Mono.RuntimeStructs/HandleStackMark not found\r\nblazor.webassembly.js:1 Uncaught (in promise) abort(). Build with -s ASSERTIONS=1 for more info.\r\n\r\nFinally if I publish directly from Visual Studio, using Azure Publish, it works to a new App Service, but does not to an existing one.\r\n\r\nI'm sure it's me, but am a bit stuck!\r\n\r\n### Further technical details\r\nI followed the instructions to upgrade my Blazor Client Application to 0.7.0 first. I then recreated a brand new application from the template.\r\n\r\nI am using Visual Studio Enterprise 2017 Preview (2) Version 15.9.0 Preview 6.0\r\n\r\n We're using Azure Devops to build and then releasing to Azure Web Applications.\r\n\r\nAfter much fiddling, I have an application which runs, but only runs using http.\r\n\r\nIf I access the aplication with https:, I get the following error in the Browser (Chrome) Console:\r\n\r\nWASM: The assembly mscorlib.dll was not found or could not be loaded.\r\n\r\nWASM: It should have been installed in the `/mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/sdks/out/wasm-runtime-release/lib/mono/4.5/mscorlib.dll' directory.\r\n\r\n Uncaught (in promise)\r\n\r\nThe Build pipeline does the following:\r\n\r\n- Use .NET Core SDK 2.1.500\r\n- Use NuGet 4.8.1\r\n- NuGet restore\r\n- Build solution **\\*.sln with the parameters: /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation=\"$(build.artifactstagingdirectory)\\\\\"\r\n\r\nWe then copy the produced Zip file and publish to Azure using the Deploy Azure App Service function\r\n\r\nAll was working perfectly in Blazor 0.6.0\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1686","RelatedDescription":"Closed issue \"Issue with DevOps Build in Blazor 0.7.0\" (#1686)"},{"Id":"381914511","IsPullRequest":false,"CreatedAt":"2018-11-18T00:18:15","Actor":"DaRosenberg","Number":"1696","RawContent":null,"Title":"How to hook up alternate IServiceProvider implementation?","State":"open","Body":"I'm trying to hook Autofac into my Blazor app, but I can't find any way to provide the actual `IServiceProvider` instance myself.\r\n\r\nHere's an illustration of what I'm trying to do (as per [Autofac documentation](https://autofaccn.readthedocs.io/en/latest/integration/aspnetcore.html#quick-start-without-configurecontainer)):\r\n\r\n```cs\r\npublic class Startup\r\n{\r\n    public IContainer ApplicationContainer { get; private set; }\r\n\r\n    public IServiceProvider ConfigureServices(IServiceCollection services)\r\n    {\r\n        var builder = new ContainerBuilder();\r\n        builder.Populate(services);\r\n        // Add some custom service and implementation to test whether it can be injected\r\n        builder.RegisterType<DefaultSystemClock>().As<ISystemClock>();\r\n        ApplicationContainer = builder.Build();\r\n\r\n        // This return value seems to never be used by the WebAssemblyHostBuilder\r\n        return new AutofacServiceProvider(ApplicationContainer);\r\n    }\r\n\r\n    public void Configure(IBlazorApplicationBuilder app)\r\n    {\r\n        app.AddComponent<App>(\"app\");\r\n    }\r\n}\r\n```\r\n\r\nA quick glance into the source of `WebAssemblyHostBuilder` and `ConventionBasedStartup` seems to confirm that this is not how it's implemented (there's no code that take care of any return value from the `ConfigureServices()` method.\r\n\r\nIs there some other hook I should be using to replace the default `IServiceProvider` implementation with the one provided by Autofac?","Url":"https://github.com/aspnet/Blazor/issues/1696","RelatedDescription":"Open issue \"How to hook up alternate IServiceProvider implementation?\" (#1696)"},{"Id":"381881172","IsPullRequest":false,"CreatedAt":"2018-11-17T17:07:17","Actor":"losmacko","Number":"1694","RawContent":null,"Title":"index.html could be configurable","State":"open","Body":"Currently there is no options to use diffrent index.html file to ex. production and development. It' ll be nice if this could be configurable.","Url":"https://github.com/aspnet/Blazor/issues/1694","RelatedDescription":"Open issue \"index.html could be configurable\" (#1694)"},{"Id":"381747521","IsPullRequest":false,"CreatedAt":"2018-11-17T16:29:53","Actor":"stsrki","Number":"1691","RawContent":null,"Title":"CascadingValue is always null","State":"closed","Body":"I'm trying to use a new feature in Blazor 0.7.0 but with no success. \r\n\r\nThis is the code from my _parent_ `Fields` component.\r\n```\r\n<CascadingValue Value=this>\r\n    <div class=\"field-body\">\r\n        @ChildContent\r\n    </div>\r\n</CascadingValue>\r\n```\r\n\r\nAnd in a _child_ component I have:\r\n\r\n`[CascadingParameter] protected Fields ParentFields { get; set; }`\r\n\r\nBut whatever I do the `ParentFields` property is always null. I don't know what I'm missing. That's basically everything from the documentation. ","Url":"https://github.com/aspnet/Blazor/issues/1691","RelatedDescription":"Closed issue \"CascadingValue is always null\" (#1691)"},{"Id":"381818120","IsPullRequest":false,"CreatedAt":"2018-11-17T02:15:20","Actor":"Entroper","Number":"1693","RawContent":null,"Title":"Router cannot find route in Blazor 0.7","State":"open","Body":"I have [this page](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Pages/Randomize.cshtml) that was working in 0.6, and stopped working when I upgraded to 0.7:\r\n```\r\nError: System.InvalidOperationException: 'Router' cannot find any component with a route for '/Randomize'.\r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x204cb00 + 0x000b2> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1fefc70 + 0x0003e> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.SetDirectParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f79500 + 0x00084> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1f84e68 + 0x00086> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1f84c58 + 0x00086> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1f84940 + 0x000c2> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1f84050 + 0x0024a> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1f83a98 + 0x000a6> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7dc60 + 0x000b8> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1f7d888 + 0x00040> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1f7d0a8 + 0x00050> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7c630 + 0x0006c> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7c398 + 0x0003a> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1f7c2a0 + 0x00048> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f6b270 + 0x000d8> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.SetDirectParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f79500 + 0x00084> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderRootComponent (System.Int32 componentId) <0x1f78930 + 0x00024> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1f111b0 + 0x00084> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ef1820 + 0x00078> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ed0628 + 0x000f8> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ecfdb0 + 0x00020> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at FF1Blazorizer.Program.Main (System.String[] args) <0x1d7fd68 + 0x00014> in <396b29f170474361b9513c314eda4230>:0 \r\n```\r\n\r\nI tried lots of things to isolate the error.  Eventually, I added a new .cshtml file and started copying bits of Randomize.cshtml over to it until it stopped working.  It stopped working when I added what is now [line 278](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Pages/Randomize.cshtml#L278).\r\n\r\nLine 278 refers to a `ViewModelFlags` class in another project `FF1Lib`.  If you look [here](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Shared/ViewModelFlags.cs) you'll see that I've copied all of the code for `ViewModelFlags` into the `FF1Blazorizer` project.  When I did that and referenced the \"new\" class, the application started working again.\r\n\r\nSo I went back to line 278 and changed `FF1Blazorizer.Shared.ViewModelFlags` to `FF1Lib.ViewModelFlags` -- and it **still worked.**\r\n\r\nSo I deleted ViewModelFlags.cs from the Blazor project.  **It stopped working again.**  The mere presence of a copy of the `ViewModelFlags` class in the same project \"cures\" the bug, even though I'm not actually referencing it.  I tried this a couple of times to make sure I hadn't messed something up, but it was consistent.","Url":"https://github.com/aspnet/Blazor/issues/1693","RelatedDescription":"Open issue \"Router cannot find route in Blazor 0.7\" (#1693)"},{"Id":"381814697","IsPullRequest":false,"CreatedAt":"2018-11-17T01:37:09","Actor":"pgrho","Number":"1692","RawContent":null,"Title":"Json.NET throws TypeLoadException on Blazor 0.7.0","State":"open","Body":"I'm updating my standalone Blazor app to use 0.7.0. And found the `JsonConvert.DeserializeObject<T>(string)` method of Newtonsoft.Json 11.0.2 throws `TypeLoadException` in the first invocation.  \r\n\r\n## Repro steps\r\n\r\n1. Create a New ASP.NET Core/Blazor Project. \r\n2. Reference Newtonsoft.Json 11.0.2\r\n3. Add linker.xml\r\n\r\n```\r\n<linker>\r\n    <assembly fullname=\"mscorlib\">\r\n        <!-- Preserve all methods on WasmRuntime, because these are called by JS-side code\r\n    to implement timers. Fixes https://github.com/aspnet/Blazor/issues/239 -->\r\n        <type fullname=\"System.Threading.WasmRuntime\" />\r\n    </assembly>\r\n    <assembly fullname=\"System.Core\">\r\n        <!-- This is required by JSon.NET and any expression.Compile caller -->\r\n        <type fullname=\"System.Linq.Expressions*\" />\r\n    </assembly>\r\n    <!-- Name of the entry point assembly -->\r\n    <assembly fullname=\"BlazorTest\" />\r\n</linker>\r\n```\r\n\r\n4. Reference linker.xml in the .csproj\r\n\r\n```\r\n  <ItemGroup>\r\n    <BlazorLinkerDescriptor Include=\"Linker.xml\" />\r\n  </ItemGroup>\r\n```\r\n\r\n5. Invoke `JsonConvert.DeserializeObject<T>(string)` in some event.\r\n\r\n```csharp\r\nJsonConvert.DeserializeObject<EmptyClass>(\"{}\");\r\n```\r\n\r\nThe steps above will throw `TypeLoadException` for `INotifyPropertyChanged`, and this behavior won't change in the second call. But in my app Json.NET throws `TypeLoadException` for `INotifyPropertyChanging` and subsequent invocations works fine.","Url":"https://github.com/aspnet/Blazor/issues/1692","RelatedDescription":"Open issue \"Json.NET throws TypeLoadException on Blazor 0.7.0\" (#1692)"},{"Id":"381657289","IsPullRequest":false,"CreatedAt":"2018-11-16T16:17:58","Actor":"JulienM28","Number":"1690","RawContent":null,"Title":"Json variables names","State":"closed","Body":"Maybe I didn't find the correct method, but I faced an issue using Dtos.\r\n\r\nI'm doing some application with a backent and a frontend sharing the same dtos in a separate dll.\r\n\r\nI used to do like this\r\n\r\n`    [JsonProperty(\"operationState\")]\r\n    public string OperationState { get; set; }`\r\n\r\nbut it seems Blazor doesn't support NewtonSoft Data Annottions.\r\n\r\nWhat could be the good solution for that problem if there's one right now.\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1690","RelatedDescription":"Closed issue \"Json variables names\" (#1690)"},{"Id":"381570628","IsPullRequest":false,"CreatedAt":"2018-11-16T12:00:08","Actor":"lorranpalmeira","Number":"1688","RawContent":null,"Title":"UseUrl Option","State":"open","Body":"Is it possible set a UseUrl like WebApi?\r\n`.UseUrls(\"http://localhost:7001/\")`\r\n\r\nBecause in Blazor doesn´t has this option:\r\n\r\n```\r\npublic static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) =>\r\n            BlazorWebAssemblyHost.CreateDefaultBuilder()\r\n                .UseBlazorStartup<Startup>();\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1688","RelatedDescription":"Open issue \"UseUrl Option\" (#1688)"},{"Id":"381550141","IsPullRequest":false,"CreatedAt":"2018-11-16T10:57:01","Actor":"ctyar","Number":"1687","RawContent":null,"Title":"Upgrading Blazor language service from 0.6 to 0.7 installs windows SDK","State":"open","Body":"Upgrading Visual studio extension from 0.6 to 0.7 installs multiple versions of Windows SDK.\r\nIs this intended?\r\n\r\n![annotation 2018-11-16 142348](https://user-images.githubusercontent.com/1432648/48617406-a4e5c080-e9ab-11e8-9a7a-fdc55a948ad2.jpg)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1687","RelatedDescription":"Open issue \"Upgrading Blazor language service from 0.6 to 0.7 installs windows SDK\" (#1687)"},{"Id":"381401482","IsPullRequest":false,"CreatedAt":"2018-11-16T00:50:40","Actor":"DaRosenberg","Number":"1685","RawContent":null,"Title":"\"Fatal error in IL Linker\" when adding reference to System.Reactive","State":"open","Body":"I wanted to experiment with building a stand-alone Blazor app that utilizes some existing managed code we have which depends on `System.Reactive`. However, as soon as `System.Reactive` is added (either directly to the Blazor app project, or to any other project the Blazor app references) the following build error happens:\r\n\r\n```\r\n1>------ Rebuild All started: Project: RetrospectBlazorPoc, Configuration: Debug Any CPU ------\r\n1>RetrospectBlazorPoc -> C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\bin\\Debug\\netstandard2.0\\RetrospectBlazorPoc.dll\r\n1>Fatal error in IL Linker\r\n1>Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'System.Reactive, Version=4.1.0.0, Culture=neutral, PublicKeyToken=94bc3704cddfc263'\r\n1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n1>   at Mono.Linker.AssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name)\r\n1>   at Mono.Cecil.MetadataResolver.Resolve(TypeReference type)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(AssemblyDefinition assembly)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.Process()\r\n1>   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\r\n1>   at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step)\r\n1>   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n1>   at Mono.Linker.Driver.Run(ILogger customLogger)\r\n1>   at Mono.Linker.Driver.Execute(String[] args, ILogger customLogger)\r\n1>C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\Blazor.MonoRuntime.targets(439,5): error MSB3073: The command \"dotnet \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/illink/illink.dll\" -l none --verbose --strip-security true --exclude-feature com --exclude-feature sre -v false -c link -u link -b true -d \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/mono/bcl/Facades/\" -o \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\blazor\\linker/\" -x \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.7.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.7.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\lib\\netstandard1.0\\Microsoft.AspNetCore.Blazor.TagHelperWorkaround.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.jsinterop\\0.7.0\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\mono.webassembly.interop\\0.7.0\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.reactive\\4.1.2\\lib\\netstandard2.0\\System.Reactive.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.reactive.core\\4.1.2\\lib\\netstandard2.0\\System.Reactive.Core.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.5.0\\lib\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.runtime.interopservices.windowsruntime\\4.3.0\\lib\\netstandard1.3\\System.Runtime.InteropServices.WindowsRuntime.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.threading.tasks.extensions\\4.5.1\\lib\\netstandard2.0\\System.Threading.Tasks.Extensions.dll\" -a \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\RetrospectBlazorPoc.dll\"\" exited with code 1.\r\n1>Done building project \"RetrospectBlazorPoc.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\n\r\nAny idea why this happens, and how to fix or work around this?","Url":"https://github.com/aspnet/Blazor/issues/1685","RelatedDescription":"Open issue \"\"Fatal error in IL Linker\" when adding reference to System.Reactive\" (#1685)"},{"Id":"381286130","IsPullRequest":false,"CreatedAt":"2018-11-15T18:29:07","Actor":"SteveSandersonMS","Number":"1684","RawContent":null,"Title":"Change \"npm install\" to \"npm ci\"","State":"open","Body":"Hopefully this will lessen the flakiness in CI.","Url":"https://github.com/aspnet/Blazor/issues/1684","RelatedDescription":"Open issue \"Change \"npm install\" to \"npm ci\"\" (#1684)"},{"Id":"381257647","IsPullRequest":false,"CreatedAt":"2018-11-15T17:17:39","Actor":"stas-sultanov","Number":"1683","RawContent":null,"Title":" table.deleteRow without JS","State":"closed","Body":"Can't find in any example\r\nhow to delete table row or any dom element without JS inter-op :(","Url":"https://github.com/aspnet/Blazor/issues/1683","RelatedDescription":"Closed issue \" table.deleteRow without JS\" (#1683)"},{"Id":"381212901","IsPullRequest":false,"CreatedAt":"2018-11-15T15:29:32","Actor":"danroth27","Number":"1682","RawContent":null,"Title":"CSSLint warnings from site.css","State":"open","Body":"On a clean project if you open *site.css* you get the following warnings in VS 15.9:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\toverqualified-elements\t(CssLint) Element (a.active) is overqualified, just use .active without element name.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t69\t\r\nWarning\timport\t(CssLint) @import prevents parallel downloads, use <link> instead.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t1\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\daroth\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t33\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t70\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t75\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t84\t\r\nWarning\timportant\t(CssLint) Use of !important\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t111\t\r\nWarning\tuser\t(CssLint) Use of !important\tWebApplication30.Client\tC:\\Users\\daroth\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t112\t\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1682","RelatedDescription":"Open issue \"CSSLint warnings from site.css\" (#1682)"},{"Id":"380568230","IsPullRequest":true,"CreatedAt":"2018-11-15T09:43:49","Actor":"danroth27","Number":"1677","RawContent":null,"Title":"Update survey link for 0.7.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1677","RelatedDescription":"Closed or merged PR \"Update survey link for 0.7.0\" (#1677)"},{"Id":"381011651","IsPullRequest":false,"CreatedAt":"2018-11-15T05:57:28","Actor":"danroth27","Number":"1681","RawContent":null,"Title":"FormatException: Input string was not in a correct format","State":"open","Body":"When working on replicating the `TabSet` component from the last Blazor community standup I got this exception with VS 2017 15.9 and the Blazor 0.7.0-preview1 build:\r\n\r\n```\r\nSystem.FormatException: Input string was not in a correct format.\r\n at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n at System.String.Format(IFormatProvider provider, String format, Object[] args)\r\n at Microsoft.AspNetCore.Razor.Language.DefaultRazorDiagnostic.GetMessage(IFormatProvider formatProvider)\r\n at Microsoft.VisualStudio.Web.Editors.Razor.RazorCodeGenerator.NotifyOnCodeGenerationComplete()\r\n at Microsoft.VisualStudio.Web.Editors.Razor.RazorCodeGenerator.<>c__DisplayClass67_0.<OnDocumentStructureChanged>b__0()\r\n at Microsoft.Web.Editor.Utility.GuardedOperations.InvokeExtensionPoint(Object errorSource, Action action)\r\n --- End of stack trace from previous location where exception was thrown ---\r\n at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nHere's the component file I was working on:\r\n\r\n```html\r\n<ul class=\"nav nav-tabs\">\r\n    @foreach (var tab in tabs)\r\n    {\r\n        <li class=\"nav-item\">\r\n            <a onclick=\"@(() => SelectTab(tab))\" class=\"nav-link @(tab==)\r\n        </li>\r\n    }\r\n\r\n</ul>\r\n\r\n\r\n@functions {\r\n\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/1681","RelatedDescription":"Open issue \"FormatException: Input string was not in a correct format\" (#1681)"},{"Id":"380936410","IsPullRequest":false,"CreatedAt":"2018-11-14T23:42:56","Actor":"danroth27","Number":"1680","RawContent":null,"Title":"Blazor 0.7.0 release checklist","State":"open","Body":"- [x] Update survey links in templates\r\n- [x] Create final release build with correct version numbers\r\n- [x] Perform final manual verification of VSIX/packages, including that they are all signed\r\n- [x] Upload packages to nuget.org\r\n- [x] Upload VSIX to VS marketplace\r\n- [x] Wait for nuget.org to re-index and show new package versions\r\n- [ ] Publish updated docs (conceptual and API)\r\n- [x] Create release tag and release on the Blazor repo\r\n- [x] Publish announcement blog post\r\n- [x] Tweet announcement from aspnet account\r\n- [ ] Mark the release's milestone as done\r\n","Url":"https://github.com/aspnet/Blazor/issues/1680","RelatedDescription":"Open issue \"Blazor 0.7.0 release checklist\" (#1680)"},{"Id":"380841853","IsPullRequest":false,"CreatedAt":"2018-11-14T19:02:02","Actor":"SteveSandersonMS","Number":"1679","RawContent":null,"Title":"Reconsider how rendering calls are run in series via sync context","State":"open","Body":"In #1672, I made a change to `RemoteRenderer`'s `AddToRenderQueue` so that the rendering calls are always run in series within a given circuit. This worked by posting the rendering action to the circuit's sync context. [See code here](https://github.com/aspnet/Blazor/pull/1672/files#diff-4a18bde3a2af3f8ec6fe58b9f99c7ea2R109). This was a fix to the issue reported at #1573.\r\n\r\nHowever in retrospect I'm not certain this is the right fix. As per Ryan's comment:\r\n\r\n> I would expect the code after the await to resume on the sync context\r\n\r\nWe have a test to show this does work, plus I've manually checked that our sync context *does* cause the lifecycle methods' `await` continuations to be run in series within a given circuit. So why was it necessary to make a further change to queue the render calls sequentally on the sync context? Why weren't they *already* running sequentially on the sync context?\r\n\r\nAfter some investigation, I think the reason is that in various places, we use `task.ContinueWith`, and surprisingly that does *not* honour `SynchonizationContext.Current` in the same way that `await` does. If we want `ContinueWith` to queue continuations on the sync context, we need to change the value of `TaskScheduler.Current` to something like `TaskScheduler.FromCurrentSynchronizationContext()`. I'm not certain where the right place to plug that in would be. If we can make this work, then we can remove the old workaround that explicitly marshals onto the sync context in `RemoteRenderer.AddToRenderQueue` (because we'll already be on it), which will be a good thing for perf.\r\n\r\nAdditionally, I think we should consider being stricter about forcing all UI interactions (`Render` calls at least) to be running inside a queued work item on the renderer's corresponding sync context. In any case where that's not happening, we should consider throwing like other UI frameworks do. That would help earlier diagnosis of any weirdness we may have missed.\r\n\r\ncc @rynowak for any comments or opinions.\r\n\r\n**Repro steps**\r\n\r\nIf you want to repro the original issue, go to `RemoteRenderer.cs` and remove its override of the `AddToRenderQueue` method (or comment out the call to `_syncContext.Post`, and just invoke `base.AddToRenderQueue` directly instead). Then run the E2E tests in server-side execution mode (launch `TestServer`, browse to http://localhost:port/subdir#server), open the \"Concurrent renders\" example, and see that the rendering has got all messed up because you removed the marshalling back onto the sync context.\r\n\r\nYou can also set a breakpoint inside `RenderHandle`'s `Render` method and use the immediate window to observe that, after the `await`, the call is *not* on the circuit sync context any more.","Url":"https://github.com/aspnet/Blazor/issues/1679","RelatedDescription":"Open issue \"Reconsider how rendering calls are run in series via sync context\" (#1679)"},{"Id":"380563123","IsPullRequest":false,"CreatedAt":"2018-11-14T16:33:58","Actor":"danroth27","Number":"1676","RawContent":null,"Title":"Strange method intellisense in Blazor app","State":"closed","Body":"![image](https://user-images.githubusercontent.com/1874516/48465643-675d1980-e798-11e8-973c-cf10758d2913.png)\r\n![image](https://user-images.githubusercontent.com/1874516/48465671-7cd24380-e798-11e8-97b4-ba415f383657.png)\r\n\r\nThe type name for the Blazor component should just be `Index`.","Url":"https://github.com/aspnet/Blazor/issues/1676","RelatedDescription":"Closed issue \"Strange method intellisense in Blazor app\" (#1676)"},{"Id":"380633576","IsPullRequest":true,"CreatedAt":"2018-11-14T10:31:56","Actor":"StevenTCramer","Number":"1678","RawContent":null,"Title":"(TS) Object is possibly 'null' fix","State":"open","Body":"micro fix for #1670 \r\nadd the non-null assertion operator.","Url":"https://github.com/aspnet/Blazor/pull/1678","RelatedDescription":"Open PR \"(TS) Object is possibly 'null' fix\" (#1678)"},{"Id":"380281042","IsPullRequest":false,"CreatedAt":"2018-11-13T15:30:25","Actor":"BickelLukas","Number":"1675","RawContent":null,"Title":"Allow ComponentFactory to be extended","State":"open","Body":"When using a custom DI container that doesn't provide an IServiceProvider it's not possible to inject services into components.\r\n\r\nI'm using SimpleInjector as a DI container. Now I can't inject services into Views that were registered into that container.\r\n\r\nIt would be great If the renderer wouldn't depend on the IServiceProvider but instead take an IComponentFactory that I can then override to provide my own implementation using my DI container. \r\n\r\nHere's a great post on the creator of SimpleInjector on this topic: https://simpleinjector.org/blog/2016/06/whats-wrong-with-the-asp-net-core-di-abstraction/","Url":"https://github.com/aspnet/Blazor/issues/1675","RelatedDescription":"Open issue \"Allow ComponentFactory to be extended\" (#1675)"},{"Id":"380239889","IsPullRequest":true,"CreatedAt":"2018-11-13T14:41:56","Actor":"SteveSandersonMS","Number":"1674","RawContent":null,"Title":"Bump version to 0.8.0-preview1-*","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1674","RelatedDescription":"Closed or merged PR \"Bump version to 0.8.0-preview1-*\" (#1674)"},{"Id":"380196737","IsPullRequest":true,"CreatedAt":"2018-11-13T13:40:14","Actor":"SteveSandersonMS","Number":"1673","RawContent":null,"Title":"Marshal oninput events as UIChangeEventArgs","State":"closed","Body":"Same as #1475","Url":"https://github.com/aspnet/Blazor/pull/1673","RelatedDescription":"Closed or merged PR \"Marshal oninput events as UIChangeEventArgs\" (#1673)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-20T05:30:03.1534856Z","RunDurationInMilliseconds":1592}