{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7433027320","Type":"PullRequestEvent","CreatedAt":"2018-03-26T05:20:48","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17216","RelatedDescription":"Merged pull request \"Update CoreFx to preview3-26326-01 (master)\" (#17216) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7433023608","Type":"PullRequestEvent","CreatedAt":"2018-03-26T05:19:13","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17218","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#17218) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7432927039","Type":"PullRequestEvent","CreatedAt":"2018-03-26T04:33:56","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17217","RelatedDescription":"Opened pull request \"Fixed a few typos\" (#17217) at dotnet/coreclr","RelatedBody":""},{"Id":"7432896855","Type":"PullRequestEvent","CreatedAt":"2018-03-26T04:18:47","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17215","RelatedDescription":"Merged pull request \"Fixed a few typos\" (#17215) at dotnet/coreclr","RelatedBody":""},{"Id":"7432678996","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:44:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17216","RelatedDescription":"Opened pull request \"Update CoreFx to preview3-26326-01 (master)\" (#17216) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7432400462","Type":"PullRequestEvent","CreatedAt":"2018-03-26T00:26:13","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17214","RelatedDescription":"Merged pull request \"Update use of AsBytes in perf tests to use MemoryMarshal.AsBytes.\" (#17214) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/27094"},{"Id":"7432283362","Type":"PullRequestEvent","CreatedAt":"2018-03-25T23:06:30","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17215","RelatedDescription":"Opened pull request \"Fixed a few typos\" (#17215) at dotnet/coreclr","RelatedBody":""},{"Id":"7432272455","Type":"PullRequestEvent","CreatedAt":"2018-03-25T22:59:17","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17190","RelatedDescription":"Merged pull request \"Update CoreFx to preview3-26325-01 (master)\" (#17190) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7432270733","Type":"PullRequestEvent","CreatedAt":"2018-03-25T22:58:08","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17214","RelatedDescription":"Opened pull request \"Update use of AsBytes in perf tests to use MemoryMarshal.AsBytes.\" (#17214) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/27094"},{"Id":"7432214410","Type":"PullRequestEvent","CreatedAt":"2018-03-25T22:21:17","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17196","RelatedDescription":"Merged pull request \"Dictionary/List code clean up/formatting (C#7)\" (#17196) at dotnet/coreclr","RelatedBody":"and some mild asm improves\r\n```\r\nTotal bytes of diff: -2037 (-0.06% of base)\r\n    diff is an improvement.\r\n\r\nTotal byte diff includes 0 bytes from reconciling methods\r\n        Base had    0 unique methods,        0 unique bytes\r\n        Diff had    0 unique methods,        0 unique bytes\r\n\r\nTop file improvements by size (bytes):\r\n       -2037 : System.Private.CoreLib.dasm (-0.06% of base)\r\n\r\n1 total files with size differences (1 improved, 0 regressed), 0 unchanged.\r\n\r\nTop method improvements by size (bytes):\r\n        -603 : System.Private.CoreLib.dasm - Dictionary`2:System.Collections.ICollection.CopyTo(ref,int):this (29 methods)\r\n        -451 : System.Private.CoreLib.dasm - Dictionary`2:CopyTo(ref,int):this (29 methods)\r\n        -376 : System.Private.CoreLib.dasm - ValueCollection:System.Collections.ICollection.CopyTo(ref,int):this (30 methods)\r\n        -370 : System.Private.CoreLib.dasm - KeyCollection:System.Collections.ICollection.CopyTo(ref,int):this (30 methods)\r\n         -71 : System.Private.CoreLib.dasm - KeyCollection:CopyTo(ref,int):this (31 methods)\r\n         -71 : System.Private.CoreLib.dasm - ValueCollection:CopyTo(ref,int):this (31 methods)\r\n         -33 : System.Private.CoreLib.dasm - List`1:RemoveRange(int,int):this (23 methods)\r\n         -21 : System.Private.CoreLib.dasm - List`1:System.Collections.IList.Add(ref):int:this (27 methods)\r\n         -18 : System.Private.CoreLib.dasm - List`1:set_Item(int,struct):this (12 methods)\r\n          -9 : System.Private.CoreLib.dasm - List`1:Clear():this (27 methods)\r\n          -3 : System.Private.CoreLib.dasm - List`1:set_Item(int,ref):this\r\n          -2 : System.Private.CoreLib.dasm - PinnableBufferCache:TrimFreeListIfNeeded():bool:this\r\n          -2 : System.Private.CoreLib.dasm - List`1:set_Item(int,ushort):this (2 methods)\r\n          -2 : System.Private.CoreLib.dasm - List`1:set_Item(int,ubyte):this (2 methods)\r\n          -1 : System.Private.CoreLib.dasm - EventSource:InitializeProviderMetadata():this\r\n          -1 : System.Private.CoreLib.dasm - RuntimeAssembly:GetForwardedTypes():ref:this\r\n          -1 : System.Private.CoreLib.dasm - List`1:set_Item(int,short):this\r\n          -1 : System.Private.CoreLib.dasm - List`1:set_Item(int,byte):this\r\n          -1 : System.Private.CoreLib.dasm - List`1:set_Item(int,bool):this\r\n\r\n19 total methods with size differences (19 improved, 0 regressed), 17262 unchanged.\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7432611744","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:15:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8894","RelatedDescription":"Merged pull request \"MSBuild 15.7.124 for 2.1.2xx\" (#8894) at dotnet/cli","RelatedBody":"This is a continuation of #8876 but I didn't have permissions to edit that. It picks up:\r\n\r\n* The new MSBuild with the workaround flag\r\n* A new NuGet required to take that\r\n* Opting into the workaround from `dotnet test`."},{"Id":"7432609190","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:14:21","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8884","RelatedDescription":"Merged pull request \"MSBuild 15.7.124 for 2.1.3xx\" (#8884) at dotnet/cli","RelatedBody":"Supersedes #8854.\r\n\r\nThis version has https://github.com/Microsoft/msbuild/pull/3126, which should resolve the TF problems from #8854."},{"Id":"7432603488","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:11:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8876","RelatedDescription":"Closed pull request \"Msbuild 15.7.0-preview-000108\" (#8876) at dotnet/cli","RelatedBody":"Replaces https://github.com/dotnet/cli/pull/8855\r\n\r\n@AndyGerlicher "},{"Id":"7431969573","Type":"PullRequestEvent","CreatedAt":"2018-03-25T19:54:27","Actor":"sdmaclea","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8896","RelatedDescription":"Opened pull request \"[Arm64] Enable arm64 cli builds\" (#8896) at dotnet/cli","RelatedBody":"Adds arm64 builds\r\n\r\nDepends on #8881 merging\r\n\r\n@Petermarcu @johnbeisner @peterhuene @livarcocc \r\n"},{"Id":"7431772352","Type":"PullRequestEvent","CreatedAt":"2018-03-25T17:57:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8895","RelatedDescription":"Opened pull request \"Minimizing collsions in global tool names and future CLI commands\" (#8895) at dotnet/cli","RelatedBody":""},{"Id":"7431215778","Type":"PullRequestEvent","CreatedAt":"2018-03-25T12:35:32","Actor":"rainersigwald","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8894","RelatedDescription":"Opened pull request \"MSBuild 15.7.124 for 2.1.2xx\" (#8894) at dotnet/cli","RelatedBody":"This is a continuation of #8876 but I didn't have permissions to edit that. It picks up:\r\n\r\n* The new MSBuild with the workaround flag\r\n* A new NuGet required to take that\r\n* Opting into the workaround from `dotnet test`."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7416830969","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:32:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/691","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02622-01 (master)\" (#691) at dotnet/standard","RelatedBody":""},{"Id":"7416827294","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:30:59","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/687","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02620-10 (master)\" (#687) at dotnet/standard","RelatedBody":""},{"Id":"7416814357","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:26:19","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/684","RelatedDescription":"Closed issue \"System.AppContext.GetData is in netstandard1.6 but not net462\" (#684) at dotnet/standard","RelatedBody":"@nothrow commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281)\n\n# Issue Title\r\n\r\nSome .NET Standard calls are not implemented as expected in .NET Framework\r\n\r\n# General\r\n\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.appcontext.getdata?view=netstandard-1.6#System_AppContext_GetData_System_String_\r\n\r\nHere, it says that AppContext.GetData is supported in NetStandard 1.6, 2.0, but .NET Framework 4.7.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n\r\nthis one says, that .NET 461 is fully supporting .NET Standard 2.0.\r\n\r\nI have application, that is compiled as .NET Standard library, and then is expected to be called from some kind of service host, that is either net462, or netcoreapp (based on platform it is running on). However, some of the libraries (Microsoft.Extensions.DependencyModel) for netstandard uses this call.\r\n\n\n---\n\n@svick commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281#issuecomment-368089059)\n\nThis is expected. .Net Framework 4.6.1 behaves as if it supported .Net Standard 2.0 and it does support the vast majority of it, but not everything. Specifically, it does not support APIs that were added in .Net Standard 1.5 and 1.6.\r\n\r\nFor more details, see [.NET Framework 4.6.1 supporting .NET Standard 2.0](https://github.com/dotnet/standard/tree/master/docs/netstandard-20#net-framework-461-supporting-net-standard-20).\r\n\r\nAs for your specific case, Microsoft.Extensions.DependencyModel 2.0.4 has versions for .Net Framework 4.5.1, .Net Standard 1.3 and .Net Standard 1.6. How exactly are you distributing your application/library? Maybe there's a way to use the .Net Framework 4.5.1 version of Microsoft.Extensions.DependencyModel from your .Net Framework 4.6.2 host?\n\n---\n\n@nothrow commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369511734)\n\nThanks for the link, I missed this specific document. \r\n\r\n> Considering the number of APIs that .NET Framework 4.6.1 will not support is low and that these are all brand-new APIs with low adoption we believe this is a much better trade-off.\r\n\r\nThis is kind of unfortunate, since the brand new API is used by ASP.NET Core, so eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here.\r\n\r\nI had troubles with 4.5.1 version, so I ended up with shipping my own forked version of DependencyModel. \r\n\r\nJust a suggestion, there is bunch of #if DOTNETCORE s  in `Microsoft.Extensions.DependencyModel`. Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\n\n\n---\n\n@svick commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369566176)\n\n> eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here\r\n\r\nI don't think so, that's what the .Net Framework 4.5.1 version is for. I think you're in a special situation, where you're distributing a single DLL to multiple frameworks, so that doesn't help. But most people will be fine.\r\n\r\n> Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\nI don't know, I'm not sure that would actually work. You might consider creating a new issue about that in the repo where that code lives: [dotnet/core-setup](https://github.com/dotnet/core-setup).\n\n---\n\n@Petermarcu commented on [Wed Mar 14 2018](https://github.com/dotnet/core/issues/1281#issuecomment-373257629)\n\n@terrajobst , sounds like this one is just unfortunately hitting the small set of API's that fell through the cracks. Anything actionable here? Should we move this to the standard repo or close?\n\n"},{"Id":"7416804653","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:22:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/683","RelatedDescription":"Closed issue \"netstandard2.0 library, dependent on Microsoft.Win32.Registry, doesn't work from net471 when loaded via MEF\" (#683) at dotnet/standard","RelatedBody":"@jherby2k commented on [Wed Feb 28 2018](https://github.com/dotnet/core/issues/1311)\n\n# Issue Title\r\n\r\nI'm building a .net standard 2.0 library that uses MEF to load extensions. The MEF parts are also .net standard 2.0.\r\n\r\nEverything works fine when called from netcore2.0 test project. But if i have the test project also target net471, calls to Microsoft.Win32.Registry from the MEF part fail (Registry.LocalMachine returns null). I assume this is because Microsoft.Win32.Registry has a net461-specific library that isn't present.\r\n\r\nI see this problem doesn't exist if, instead of using MEF, i just directly depend on the part. I imagine MEF prevents the framework-specific dependencies from flowing through correctly. Any suggestions?\r\n\r\n# General\r\n\r\nYou can repro this by cloning https://github.com/jherby2k/AudioWorks.git then changing the AudioWorks.Api.Tests projects to also target net471. Tests using the AudioWorks.Extensions.Apple extension will fail because it can't read the registry.\n\n"},{"Id":"7415822023","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:06:25","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/690","RelatedDescription":"Merged pull request \"Update BuildTools to 2.1.0-preview2-02621-01, fix up build\" (#690) at dotnet/standard","RelatedBody":" * Ported https://github.com/dotnet/corefx/pull/26686 \"Building non-Windows builds using the CLI's MSBuild\"\r\n * Set `<RunMatchingRefApiCompat>false</RunMatchingRefApiCompat>` globally. This came from https://github.com/dotnet/buildtools/pull/1949. I think it should be turned off and baselined (like https://github.com/dotnet/corefx/pull/27881) but I'm not familiar with this infra, or if it makes sense to do that in a `release/2.0.0` branch.\r\n\r\nThis was driven by attempting to build on Fedora 26, but I also successfully built on Windows.\r\n\r\nDoing this for https://github.com/dotnet/source-build/pull/371#issuecomment-375013767"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7433023569","Type":"PullRequestEvent","CreatedAt":"2018-03-26T05:19:12","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28460","RelatedDescription":"Merged pull request \"Update uses of AsBytes to use MemoryMarshal.AsBytes\" (#28460) at dotnet/corefx","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/27094\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/28296"},{"Id":"7433019903","Type":"PullRequestEvent","CreatedAt":"2018-03-26T05:17:32","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28464","RelatedDescription":"Merged pull request \"Vectorize {RO}Span.IndexOf for T = char, similar to T = byte.\" (#28464) at dotnet/corefx","RelatedBody":"See https://github.com/aspnet/Common/pull/324#issuecomment-375997102\r\n\r\ncc @gfoidl, @jkotas, @benaadams, @AndyAyersMS, @davidfowl, @AtsushiKan, @eerhardt "},{"Id":"7432719620","Type":"PullRequestEvent","CreatedAt":"2018-03-26T03:01:09","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28463","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#28463) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7432676653","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:43:24","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28467","RelatedDescription":"Opened pull request \"Update CoreFx, CoreSetup to preview3-26326-01, preview3-26325-02, respectively (master)\" (#28467) at dotnet/corefx","RelatedBody":""},{"Id":"7432459382","Type":"IssuesEvent","CreatedAt":"2018-03-26T01:02:02","Actor":"twest820","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28466","RelatedDescription":"Opened issue \"FileStream.ReadAsync() fails with System.IO.IOException: The media is write protected.\" (#28466) at dotnet/corefx","RelatedBody":"This occurs sporadically when copying files from an SD card whose write protect tab is not engaged. The FileStream is the only handle opened on the file and is created using\r\n\r\n    new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read, 1024 * 1024, FileOptions.Asynchronous | FileOptions.SequentialScan)\r\n\r\n.NET 4.7.1, Windows 10 Fall Creators Update, Lenovo T440s built in Realtek PCI-E SD card reader with driver version 10.0.10125.21277. Some investigation shows the SD card is mounted read only in these cases, which is not expected and may signal an issue in Realtek's driver, but this doesn't explain why operations on a read only handle are failing because write permission is unavailable. There is a second concurrent task writing the data read to another file on an SSD but, for both tasks, the FileStreams are local.\r\n\r\n    new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 1024 * 1024, FileOptions.Asynchronous | FileOptions.SequentialScan | FileOptions.WriteThrough);\r\n\r\nThe underlying native API is [SetFilePointerEx()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365542.aspx). Since the two handles in use are distinct and used single threaded I don't see any obvious races in code review. It's possible the issue may be in native code under .NET and therefore external, but filing this for a look anyway.\r\n\r\nWorkaround: Copy files manually using FileExplorer. This issue also fails to reproduce with File.Copy().\r\n\r\nSystem.IO.IOException: The media is write protected.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.SeekCore(Int64 offset, SeekOrigin origin)\r\n   at System.IO.FileStream.BeginReadCore(Byte[] bytes, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject, Int32 numBufferedBytesRead)\r\n   at System.IO.FileStream.BeginReadAsync(Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject)\r\n   at System.IO.FileStream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)\r\n   at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\n   at CritterShell.Images.FileCopy.<>c__DisplayClass7_0.<<StreamAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at CritterShell.Images.FileCopy.<StreamAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at CritterShell.CopyCameraFiles.<>c__DisplayClass26_0.<ProcessRecord>b__1(String inputSubdirectoryPath, ParallelLoopState loopState)\r\n   at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1()\r\n   at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n   at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object )\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, \r\nFunc`1 localInit, Action`1 localFinally)\r\n   at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndInd\r\nex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n   at System.Threading.Tasks.Parallel.ForEach[TSource](IEnumerable`1 source, ParallelOptions parallelOptions, Action`2 body)\r\n   at CritterShell.CopyCameraFiles.<>c__DisplayClass26_0.<ProcessRecord>b__0()\r\n   at System.Threading.Tasks.Task.Execute()\r\n---> (Inner Exception #0) System.IO.IOException: The media is write protected.\r\n\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.SeekCore(Int64 offset, SeekOrigin origin)\r\n   at System.IO.FileStream.BeginReadCore(Byte[] bytes, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject, Int32 numBufferedBytesRead)\r\n   at System.IO.FileStream.BeginReadAsync(Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject)\r\n   at System.IO.FileStream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)\r\n   at System.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\n   at CritterShell.Images.FileCopy.<>c__DisplayClass7_0.<<StreamAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at CritterShell.Images.FileCopy.<StreamAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at CritterShell.CopyCameraFiles.<>c__DisplayClass26_0.<ProcessRecord>b__1(String inputSubdirectoryPath, ParallelLoopState loopState)"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7432731858","Type":"IssuesEvent","CreatedAt":"2018-03-26T03:06:22","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25716","RelatedDescription":"Opened issue \"[Regression] Syntax no longer shows up in Find All References\" (#25716) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.7.0 Preview 3.0 [27523.0.d15.7]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Git clone http://github.com/dotnet/project-system\r\n2. Open ProjectSystem.sln\r\n3. Open src\\Microsoft.VisualStudio.ProjectSystem.Managed\\IO\\IFileSystem.cs\r\n4. Right-click Create in `Stream Create(string path);` and choose Find All References\r\n\r\n**Expected Behavior**:\r\nIn 15.6.3:\r\n![image](https://user-images.githubusercontent.com/1103906/37885022-b040e100-30fe-11e8-8770-8588beb4c591.png)\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/37885035-bcd6874e-30fe-11e8-8ba7-241e2b968fb2.png)\r\n\r\nNote: I tried to repro this on a new project and couldn't - however, it repros in every FAR I've done in project-system and CPS solution."},{"Id":"7432711992","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:58:02","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25712","RelatedDescription":"Merged pull request \"Update Language Feature Status\" (#25712) at dotnet/roslyn","RelatedBody":"Tagging @jaredpar @gafter FYI"},{"Id":"7432680152","Type":"IssuesEvent","CreatedAt":"2018-03-26T02:44:50","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/17761","RelatedDescription":"Closed issue \"[Bug] Forgot to update Localisation of Feature String.\" (#17761) at dotnet/roslyn","RelatedBody":"[Comment in code](https://github.com/dotnet/roslyn/blob/1e38875dd13c712bf347050d7b27512bc8365a13/src/Compilers/VisualBasic/Portable/Parser/Parser.vb#L6171)\r\n```\r\n' Bug: It is too late in the release cycle to update localized strings.  As a short term measure we will output \r\n' an unlocalized string and fix this to be localized in the next release.\r\n```\r\n\r\n"},{"Id":"7432664958","Type":"IssuesEvent","CreatedAt":"2018-03-26T02:38:34","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25715","RelatedDescription":"Opened issue \"[Regression] \"Refresh CodeLens Team Indicators\" always visible on editor context menu instead of just over CodeLens\" (#25715) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.7.0 Preview 3.0 [27523.0.d15.7]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Console App (.NET Framework)\r\n2. In status bar, choose Add to Source Control -> Git\r\n3. Right-click on Editor within a method body\r\n\r\n**Expected Behavior**:\r\n\r\nNo **Refresh CodeLens Team Indicators**\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/37884234-aa571510-30fa-11e8-883f-cc0e755a8050.png)\r\n\r\nTried 15.6.3 and it does not repro, so this appears to be a regression."},{"Id":"7432491158","Type":"IssuesEvent","CreatedAt":"2018-03-26T01:19:12","Actor":"HaloFour","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25714","RelatedDescription":"Opened issue \"No reference when awaiting custom GetAwaiter method\" (#25714) at dotnet/roslyn","RelatedBody":"**Version Used**:   v15.6.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a class with a custom `GetAwaiter` that returns an awaitable.\r\n2. Instantiate that class and `await` on it from a separate `async` method.\r\n\r\n**Expected Behavior**:\r\n\r\nThat the `GetAwaiter` method shows references from being used in an `await` expression.\r\n\r\n**Actual Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/10102290/37882519-f914f430-3071-11e8-950b-4181512caddd.png)\r\n\r\n"},{"Id":"7432458039","Type":"IssuesEvent","CreatedAt":"2018-03-26T01:01:12","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/14479","RelatedDescription":"Closed issue \"Deadlock closing solutions with CPS projects referencing Shared Projects.\" (#14479) at dotnet/roslyn","RelatedBody":"I am hitting a deadlock in the CPS project system with the below callstack.\n[ClearProjectData](http://source.roslyn.io/Microsoft.CodeAnalysis.Workspaces/R/19e4be6ac9ac48bd.html) method on the workspace ends up invoking [SetDocumentContext](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Workspace_Editor.cs,97) within a lock, which may end up invoking back into workspace causing this deadlock. The comment  [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Workspace_Editor.cs,93) indicates we shouldn't be invoking SetDocumentContext when project/solution is closing, but it seems there are code paths like this one where we do invoke it.\n\n```\n    mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout, bool exitContext) Line 203  C#\n    mscorlib.dll!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken) Line 469 C#\n    mscorlib.dll!System.Threading.SemaphoreSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 439    C#\n>   Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.OnDocumentContextUpdated(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceTextContainer container) Line 356   C#\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.OnDocumentContextUpdated(Microsoft.CodeAnalysis.DocumentId documentId) Line 349  C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.UpdateDocumentContextIfContainsDocument(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy sharedHierarchy, Microsoft.CodeAnalysis.DocumentId documentId) Line 915    C#\n    Microsoft.VisualStudio.LanguageServices.dll!Roslyn.VisualStudio.ProjectSystem.HierarchyEventsSink.OnPropertyChanged(uint itemid, int propid, uint flags) Line 31    C#\n    Microsoft.VisualStudio.ProjectSystem.Managed.VS.dll!Microsoft.VisualStudio.ProjectSystem.VS.LanguageServices.UnconfiguredProjectHostObject.OnPropertyChanged(uint itemid, int propid, uint flags) Line 91   C#\n    Microsoft.VisualStudio.ProjectSystem.Managed.VS.dll!Microsoft.VisualStudio.ProjectSystem.VS.LanguageServices.UnconfiguredProjectHostObject.SetProperty(uint itemid, int propid, object var) Line 67 C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.SetDocumentContext(Microsoft.CodeAnalysis.DocumentId documentId) Line 883    C#\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearOpenDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool isSolutionClosing) Line 97  C#\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearOpenDocuments(Microsoft.CodeAnalysis.ProjectId projectId) Line 78   C#\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearProjectData(Microsoft.CodeAnalysis.ProjectId projectId) Line 260    C#\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId) Line 423    C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.VisualStudioWorkspaceHost.Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkspaceHost.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId) Line 1332 C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject_Foreground(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject project) Line 385 C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject.AnonymousMethod__0() Line 361 C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.ExecuteOrScheduleForegroundAffinitizedAction(System.Action action) Line 169 C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject project) Line 362    C#\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Disconnect() Line 1109 C#\n    Microsoft.VisualStudio.LanguageServices.Implementation.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.Disconnect() Line 54 C#\n    Microsoft.VisualStudio.LanguageServices.Implementation.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.Dispose() Line 156   C#\n```\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7432547828","Type":"PullRequestEvent","CreatedAt":"2018-03-26T01:47:03","Actor":"jkoritzinsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5618","RelatedDescription":"Opened pull request \"Implement P/Invoke 'A' and 'W' Probing\" (#5618) at dotnet/corert","RelatedBody":"Implement probing for native function names following the A/W suffix notation used on Windows.\r\n\r\nFixes #730."},{"Id":"7432393708","Type":"PullRequestEvent","CreatedAt":"2018-03-26T00:21:44","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5617","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5617) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7432299235","Type":"PullRequestEvent","CreatedAt":"2018-03-25T23:17:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5617","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5617) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7432298015","Type":"PullRequestEvent","CreatedAt":"2018-03-25T23:16:52","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5616","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5616) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7432207995","Type":"PullRequestEvent","CreatedAt":"2018-03-25T22:17:08","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5616","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5616) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7431364271","Type":"PullRequestEvent","CreatedAt":"2018-03-25T14:02:58","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5615","RelatedDescription":"Opened pull request \"Use a shared DynamicInvoke for delegates and reflection\" (#5615) at dotnet/corert","RelatedBody":"When I did the `System.Reflection.Pointer` support for reflection invoke and delegate `DynamicInvoke`, I found these two thunks do pretty much the same thing. They got implemented separately because I was just porting Project N IL2IL code, but there's no reason why we need two.\r\n\r\nWith this change, Delegate.DynamicInvoke will just call into the shared helper that is also used for reflection invoke.\r\n\r\nThis is a bigger diff due to bunch of mechanical changes:\r\n\r\n* The set of generated helpers had to be moved to a place from where both delegate and reflection infrastructure can see it. A type system context dot file did the trick. (Contributes to #3873.)\r\n* The generated assembly got moved to the type system context so that the thunks can stay homed in it.\r\n* Fix to CppCodegen name mangling so that these can be still referenced in CppCodegen."},{"Id":"7431108658","Type":"IssuesEvent","CreatedAt":"2018-03-25T11:23:07","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5614","RelatedDescription":"Opened issue \"Dup opcode redoing loads instead of remembering results\" (#5614) at dotnet/corert","RelatedBody":" The ```dup``` opcode implementation isn't remembering loaded values, it's redoing their loads. Usually that's the same, but in the case of:\r\n```\r\nsomeArray[index++] = somethingToStore;\r\n```\r\nThe compiler generates\r\n```\r\nldloc.0 // someArray\r\nldloc.1 // index\r\ndup\r\nldc.i4.1\r\nadd\r\nstloc.1 // store the incremented value\r\nldloc.2 // somethingToStore\r\nstelem // should be indexed based on the original value of index that was dup'd\r\n```\r\nDue to this bug, it stores the incremented value and then reloads it instead of remembering the previous value (and ends up writing to the wrong array index)."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7432616084","Type":"PullRequestEvent","CreatedAt":"2018-03-26T02:17:26","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2084","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview3.5039 into sdk\" (#2084) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview3.5039 into sdk release/2.1.2xx branch"},{"Id":"7428095073","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:48:38","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2085","RelatedDescription":"Opened pull request \"Roll forward self-contained apps to latest patch version\" (#2085) at dotnet/sdk","RelatedBody":"- Bring back behavior where self-contained apps will roll-forward to the latest patch the SDK knows about\r\n  - We had reverted this in #1574\r\n  - Hopefully the implementation here should be a bit easier to follow\r\n- Add an error message when the version of .NET Core in the assets file is different than what was expected based on current settings: `The project was restored using Microsoft.NETCore.App version 2.0.0, but with current settings, version 2.0.6 would be used instead.  To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish.  Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore.`\r\n- Fix various test issues\r\n\r\nRelated: #1570\r\n\r\n@nguerrera @livarcocc @dotnet/dotnet-cli for review"},{"Id":"7428089950","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:46:52","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2006","RelatedDescription":"Merged pull request \"Fix issues with dogfood environment setup\" (#2006) at dotnet/sdk","RelatedBody":"1. There's a typo in the extensions targets in some branches\r\n2. The .sh had the old-old incorrect extensions targets path\r\n3. DotNetRoot was not set early enough in .sh\r\n4. .sh was still setting CustomAfter targets"},{"Id":"7428088790","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:46:27","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2081","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#2081) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7428078599","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:42:58","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2079","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview3.5038 into sdk\" (#2079) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview3.5038 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":102,"FavoriteCount":69,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":224,"FavoriteCount":172,"RawContent":null},{"Id":"976141100074373120","CreatedAt":"2018-03-20T16:59:08+00:00","UserScreenname":"dotnet","Text":"Check out this video from @csharpfritz and @jasonbock talking about @roslyn Analyzers and making your code easier t… https://t.co/Nv8pTxt0zP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"975544139893825536","CreatedAt":"2018-03-19T01:27:02+00:00","UserScreenname":"dotnet","Text":"We agree with this sentiment very much! We often retweet blog posts that came to our attention. While it doesn't im… https://t.co/GtFpUrShX8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2018-03-26T05:30:19.7989193Z","RunDurationInMilliseconds":7779}