{"Data":{"GitHub":{"Issues":[{"Id":"516875652","IsPullRequest":false,"CreatedAt":"2019-11-03T19:19:59","Actor":"ericjohannsen","Number":"4434","RawContent":null,"Title":"Can't specify categorical columns","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\nThe AutoML API Getting Started [documentation](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/how-to-use-the-automl-api) states:\r\n\r\n> Explore other overloads for Execute() if you want to pass in validation data, column information indicating the column purpose, or prefeaturizers.\r\n\r\nOne overload accepts `ColumnInformation`. However, most of the properties of that class including `CategoricalColumnNames` are get-only. If domain information dictates that a column contains categorical data, how do I provide that insight to AutoML?\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4434","RelatedDescription":"Open issue \"Can't specify categorical columns\" (#4434)"},{"Id":"516873493","IsPullRequest":false,"CreatedAt":"2019-11-03T19:07:23","Actor":"t-smirnov","Number":"4433","RawContent":null,"Title":"[Feature] Markov chains","State":"closed","Body":"First of all, there aren't any libraries for text processing\r\nMaybe someone wants to deal with Markov chains for example.  Or it'll be better not to include some of these things to ml lib?","Url":"https://github.com/dotnet/machinelearning/issues/4433","RelatedDescription":"Closed issue \"[Feature] Markov chains\" (#4433)"},{"Id":"516871759","IsPullRequest":false,"CreatedAt":"2019-11-03T18:48:54","Actor":"ericjohannsen","Number":"4432","RawContent":null,"Title":"Trailing comma in header crashes AutoML wizard & VS 2019","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 3.0.\r\n\r\n### Issue\r\n\r\n- Used the AutoML plugin in VS2019 (right-click project/Add/Machine learning)\r\n- VS2019 crashed to the desktop\r\n- The wizard did its thing.\r\n\r\n### Source code / logs\r\n\r\nThe issue is caused by a trailing comma in the header. Our data extraction tool created a CSV header like:\r\n\r\nC1, C2, C3,..CMany,Label,\r\n\r\nRemoving the trailing comma (in a text editor, or by opening the CSV in Excel and saving it) corrects the issue.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4432","RelatedDescription":"Open issue \"Trailing comma in header crashes AutoML wizard & VS 2019\" (#4432)"},{"Id":"515781131","IsPullRequest":false,"CreatedAt":"2019-11-01T23:13:46","Actor":"ashbhandare","Number":"4426","RawContent":null,"Title":"[Image Classification] Error running Transfer learning example with InceptionV3 ","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nMicrosoft.ML: 1.4.0-preview3-28230-4\r\nMicrosoft.ML.ImageAnalytics : 1.4.0-preview3-28230-4\r\nMicrosoft.ML.Vision: 1.4.0-preview3-28230-4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to run the ImageClassification.Train sample at https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_Training \r\nwith Architecture InceptionV3\r\n- **What happened?**\r\nException : \r\nTensorflow.TensorflowException\r\n  HResult=0x80131500\r\n  Message=NewRandomAccessFile failed to Create/Open: ./tfhub_modules/d765412e8955a7067e9c0031f60783359e0e5c3f/variables/variables.data-00000-of-00001 : The system cannot find the path specified.\r\n; No such process\r\n\t [[{{node checkpoint_initializer_32}}]]\r\n  Source=Microsoft.ML.TensorFlow\r\n  StackTrace:\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at ImageClassification.Train.Program.Main() in C:\\Users\\aibhanda\\luis-machinelearning-samples\\samples\\csharp\\getting-started\\DeepLearning_ImageClassification_Training\\ImageClassification.Train\\Program.cs:line 80\r\n\r\n\r\n- **What did you expect?**\r\nSample should run, as other architectures run without exception.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n[1.4.0_RC-1_InceptionV3.log](https://github.com/dotnet/machinelearning/files/3796015/1.4.0_RC-1_InceptionV3.log)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4426","RelatedDescription":"Closed issue \"[Image Classification] Error running Transfer learning example with InceptionV3 \" (#4426)"},{"Id":"516374191","IsPullRequest":false,"CreatedAt":"2019-11-01T22:16:26","Actor":"codemzs","Number":"4431","RawContent":null,"Title":"Cleanup residual from passing validation set to ImageClassification API in AutoML","State":"open","Body":"Pursuant to https://github.com/dotnet/machinelearning/pull/4430#discussion_r341755273\r\n\r\nCC: @justinormont ","Url":"https://github.com/dotnet/machinelearning/issues/4431","RelatedDescription":"Open issue \"Cleanup residual from passing validation set to ImageClassification API in AutoML\" (#4431)"},{"Id":"516338397","IsPullRequest":true,"CreatedAt":"2019-11-01T22:02:04","Actor":"codemzs","Number":"4430","RawContent":null,"Title":"Do not pass validation set and metrics callback to Image Classification API.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4430","RelatedDescription":"Closed or merged PR \"Do not pass validation set and metrics callback to Image Classification API.\" (#4430)"},{"Id":"515647305","IsPullRequest":true,"CreatedAt":"2019-11-01T22:01:23","Actor":"bpstark","Number":"4424","RawContent":null,"Title":"Modified how data is saved to disk","State":"closed","Body":"pre-trained meta files are now stored in one location always, this\r\nallows multiple runs to re-use the same meta file without having to\r\nredownload.\r\n\r\nAdditionally added the ability to cleanup the temporary workspace used\r\nto train the model. This should prevent issues of running out of disk\r\nspace when running multiple training session sequentially.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4424","RelatedDescription":"Closed or merged PR \"Modified how data is saved to disk\" (#4424)"},{"Id":"514867575","IsPullRequest":true,"CreatedAt":"2019-11-01T22:01:05","Actor":"harshithapv","Number":"4415","RawContent":null,"Title":"Defaults for ImageClassification API","State":"closed","Body":"Changed EarlyStopping to run by default with ExponentialLR Decay for learning rate scheduling.\r\nThis combination seems to give most optimal results with a trade-off balance between the accuracy and training time.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4415","RelatedDescription":"Closed or merged PR \"Defaults for ImageClassification API\" (#4415)"},{"Id":"516277052","IsPullRequest":false,"CreatedAt":"2019-11-01T18:26:01","Actor":"antoniovs1029","Number":"4429","RawContent":null,"Title":"LoadImages not warning that input column is empty and ignoring imageFolder parameter in such a case","State":"open","Body":"I don't know if this is actually an issue, but it's something that I noticed when working with the LoadImages method, and perhaps it is necessary to warn the user that this could happen, whether at runtime, or in the documentation.\r\n\r\n### Issue\r\nAs I show in the source code I provide below, if all the values of the input column of a LoadImages transform are empty when fitting a pipeline, then the code will still run and not give any warning whatsoever, even though no image is actually loaded to train the model. The transform would also appear to work when transforming an input Data View which uses an empty column as input of the LoadImages, and, in the example I provide, the pipeline would still assign a predicted label to each row of the input data view bein transformed, even if no image was actually loaded.\r\n\r\nI show this by exemplifying two main cases in which this could happen:\r\n1. When the user loads its data through a method such as LoadFromTextFile, with an input file that only has 2 columns, but the user specifies that the ImagePath column (to be used as input column of the LoadImages method) is the 3rd column inside of the file.  This kind of scenario could happen if the user makes a typo in the ModelInput class, or if the user (perhaps mistakenly) passes an input file that doesn't contain an image path column.\r\n\r\n2. When the user loads its data through a method such as LoadFromEnumerable from an array where all of the objects provide either a null or an empty string value to the ImagePath column.\r\n\r\nAlso notice in my code that in both cases the LoadImages transform **also ignores whatever is passed as the imageFolder parameter**, since because there are actually no ImagePaths, it will never _try_ to load images. If there was at least one ImagePath in the input dataview, then LoadImages would actually try to load that image using the imageFolder parameter, and an exception is correctly thrown if the folder doesn't exist.\r\n\r\n### **Why is this a problem?**\r\n- I would understand this behavior happening if the input data view doesn't provide an image path for _some_ of the rows, specially when working with big datasets. But I think it becomes a problem if there's actually no image loaded, and the whole thing appears to work without a warning, like in the example I provided. If a user unknowingly makes a mistake that leads to this problem, then s/he might believe that the model was actually correctly trained with actual images, or that it actually transformed an input where no imagePath was provided. This problem might be harder to spot in more complex pipelines or input files.\r\n\r\n- Also the fact that the imageFolder parameter gets ignored in this case seems odd to me, as I would have expected an exception to be thrown if a user passes an inexistent folder path to the LoadImages transformer, regardless of the content of the ImagePath column.\r\n\r\n### Source code and input file\r\nhttps://gist.github.com/antoniovs1029/997ca183411f173e81a131f09722b092\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4429","RelatedDescription":"Open issue \"LoadImages not warning that input column is empty and ignoring imageFolder parameter in such a case\" (#4429)"},{"Id":"516267001","IsPullRequest":false,"CreatedAt":"2019-11-01T18:06:06","Actor":"CESARDELATORRE","Number":"4428","RawContent":null,"Title":"[Image Classification] Very long time to warm-up when doing the first prediction","State":"open","Body":"I'd like to know if we can do anything to improve the first prediction's needed time when using the new Image Classification model based on DNN (TensorFlow).\r\n\r\nThis behavior/times happen when using the default DNN architecture which is **ResnetV250**.\r\n\r\nWhen using the CPU, the first prediction takes something in between 7 to 12 seconds depending on the model and environment.\r\nThen, upcoming predictions using the same PredictionEngine only need around 200 mlSecs if using CPU.\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/68045426-b09ec580-fc96-11e9-9a38-506089a32cc7.png)\r\n\r\nWhen using a GPU the difference is even larger. Around 15 secs for the first prediction, then a lot less for the next predictions (in this case, something in between 40 mlsecs and 100 mlSecs)\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/68045597-1e4af180-fc97-11e9-859e-66ef707f59fc.png)\r\n\r\nBasically, after the first prediction, it behaves good, with CPU and even better with GPU, but the first prediction needs a huge amount of time to probably initialize internally?\r\n\r\nCould that initialization be improved or happen before calling .Predict()?\r\nI'd like to know if we can do anything to improve the behavior/perf of the first prediction like initializing in advanced when creating the prediction engine instead of when predicting the first time?\r\n\r\n@codemzs - Thoughts?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4428","RelatedDescription":"Open issue \"[Image Classification] Very long time to warm-up when doing the first prediction\" (#4428)"},{"Id":"514139113","IsPullRequest":false,"CreatedAt":"2019-11-01T14:35:27","Actor":"ThomasIE","Number":"4411","RawContent":null,"Title":"Getting RegressionTree from ITransformer model","State":"closed","Body":"### System information\r\n\r\nWindows 10 & Visual Studio 2019\r\n\r\n### Issue\r\n\r\nHi, I want to know how to get RegressionTree object from a FastTree regression model because the RegressionTree is private and not available to access. (For your information, I have attached my code below. I got it from **https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/predict-prices)**\r\n\r\nAlso, due to the combination of left and right nodes, is it allowed to use binary splits, not multiple splits per node?\r\n\r\nFinally, how can I use the function in \"SaveAsCode\" in FastTree.cs? Is there any example to take a look at?\r\n\r\nThanks in advance.\r\n\r\nSincerely,\r\n\r\n### Source code / logs\r\n        static readonly string _trainDataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"taxi-fare-train.csv\");\r\n        static readonly string _testDataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"taxi-fare-test.csv\");\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            MLContext mlContext = new MLContext(seed: 0);\r\n            ITransformer model = Train(mlContext, _trainDataPath);\r\n            \r\n            \r\n        }\r\n\r\n        public static ITransformer Train(MLContext mlContext, string dataPath)\r\n        {\r\n            IDataView dataView = mlContext.Data.LoadFromTextFile<TaxiTrip>(dataPath, hasHeader: true, separatorChar: ',');\r\n            var pipeline = mlContext.Transforms.CopyColumns(outputColumnName: \"Label\", inputColumnName: \"FareAmount\")\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"VendorIdEncoded\", inputColumnName: \"VendorId\"))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"RateCodeEncoded\", inputColumnName: \"RateCode\"))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"PaymentTypeEncoded\", inputColumnName: \"PaymentType\"))\r\n                .Append(mlContext.Transforms.Concatenate(\"Features\", \"VendorIdEncoded\", \"RateCodeEncoded\", \"PassengerCount\", \"TripTime\", \"TripDistance\", \"PaymentTypeEncoded\"))\r\n                .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n            var model = pipeline.Fit(dataView);\r\n\r\n\r\n            return model;\r\n        }","Url":"https://github.com/dotnet/machinelearning/issues/4411","RelatedDescription":"Closed issue \"Getting RegressionTree from ITransformer model\" (#4411)"},{"Id":"515925439","IsPullRequest":false,"CreatedAt":"2019-11-01T05:48:09","Actor":"RussKie","Number":"4427","RawContent":null,"Title":"Duplicate lines in Microsoft.ML.StableApi.csproj","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/365ccf292789ba1f14d80b13e44daaf951517fff/tools-local/Microsoft.ML.StableApi/Microsoft.ML.StableApi.csproj#L26-L28\r\n\r\nLines 26 and 28 are duplicated.","Url":"https://github.com/dotnet/machinelearning/issues/4427","RelatedDescription":"Open issue \"Duplicate lines in Microsoft.ML.StableApi.csproj\" (#4427)"},{"Id":"514897068","IsPullRequest":false,"CreatedAt":"2019-10-31T20:09:23","Actor":"antoniovs1029","Number":"4418","RawContent":null,"Title":"Stop publishing nightly build nugets to private feed","State":"closed","Body":"Currently there is a[ task](https://github.com/dotnet/machinelearning/blob/36fab9b6806260e64e50992450a219e869c7f74a/build/vsts-ci.yml#L259) that publishes nugets to a private feed whenever there is a change in the master branch of this repo. This private feed is of internal use for the members of the ML.net team.\r\n\r\nAfter [this discussion](https://github.com/dotnet/machinelearning/pull/4406#discussion_r339848534) on PR #4406  , and after discussing it offline with @codemzs , it was decided to stop publishing nugets to the private feed, because it will be unnecessary work now that PR #4406 added a task to publish the nugets to a [public feed](https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=MachineLearning).","Url":"https://github.com/dotnet/machinelearning/issues/4418","RelatedDescription":"Closed issue \"Stop publishing nightly build nugets to private feed\" (#4418)"},{"Id":"514899119","IsPullRequest":true,"CreatedAt":"2019-10-31T20:09:21","Actor":"antoniovs1029","Number":"4419","RawContent":null,"Title":"Fixes #4418. Removes publishing nugets to private feed and fixes some minor issues in .yml file","State":"closed","Body":"* Removed task that published nugets to a private feed (fixing issue #4418)\r\n* Removed commented task that used to publish to myget feed (fixing [this comment](https://github.com/dotnet/machinelearning/pull/4406#discussion_r339847771))\r\n* Fixed typo in OPTOUT variable (fixing [this comment](https://github.com/dotnet/machinelearning/pull/4406#discussion_r339847110))","Url":"https://github.com/dotnet/machinelearning/pull/4419","RelatedDescription":"Closed or merged PR \"Fixes #4418. Removes publishing nugets to private feed and fixes some minor issues in .yml file\" (#4419)"},{"Id":"515691361","IsPullRequest":false,"CreatedAt":"2019-10-31T19:34:30","Actor":"eerhardt","Number":"4425","RawContent":null,"Title":"CodeGenerator throws a bad error when StablePackageVersion isn't set","State":"open","Body":"With the addition of https://github.com/dotnet/machinelearning/pull/4391, we added two new string properties to `CodeGeneratorSettings`:\r\n\r\n* StablePackageVersion\r\n* UnstablePackageVersion\r\n\r\nThese properties are required to be set, if you don't code gen fails. But even worse, it fails in a way that isn't immediately obvious to what you did wrong.\r\n\r\nWe should make these properties required when creating a `CodeGeneratorSettings` object. That way callers of CodeGen know they need to set it.","Url":"https://github.com/dotnet/machinelearning/issues/4425","RelatedDescription":"Open issue \"CodeGenerator throws a bad error when StablePackageVersion isn't set\" (#4425)"},{"Id":"515117636","IsPullRequest":false,"CreatedAt":"2019-10-31T02:44:05","Actor":"ashalogic","Number":"4423","RawContent":null,"Title":"UnauthorizedAccessException in UWP App","State":"open","Body":"### Issue\r\nSystem.Net.WebException: 'An exception occurred during a WebClient request.'\r\nwhen trying to create new mlContext.Model.ImageClassification() in **UWP App**\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/42332369/67914016-f5940080-fb9f-11e9-8af0-afedf07f6700.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4423","RelatedDescription":"Open issue \"UnauthorizedAccessException in UWP App\" (#4423)"},{"Id":"515068630","IsPullRequest":false,"CreatedAt":"2019-10-31T00:29:57","Actor":"vnarula","Number":"4422","RawContent":null,"Title":"ML.net doesn't exposes useOrderedHashing input parameter for Hash transformation","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nUsing Conversion Hash transform.\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.conversionsextensionscatalog.hash?view=ml-dotnet-1.0.0\r\n\r\n- **What happened?**\r\n\r\nIt doesn't exposes property useOrderedHashing \r\n\r\n- **What did you expect?**\r\n\r\nExpose useOrderedHashing  property as this is blocking us to move to ML.net.\r\n\r\n### Source code / logs\r\nSee link .\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.conversionsextensionscatalog.hash?view=ml-dotnet-1.0.0\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4422","RelatedDescription":"Open issue \"ML.net doesn't exposes useOrderedHashing input parameter for Hash transformation\" (#4422)"},{"Id":"515042844","IsPullRequest":true,"CreatedAt":"2019-10-30T23:18:04","Actor":"maryamariyan","Number":"4421","RawContent":null,"Title":"Cleanup: makes Recommendation sample easier to use","State":"open","Body":"This PR makes the Recommendation sample under docs easier to use, by pointing to an existing sample in machinelearning-samples repo:\r\n\r\nUsing the same datasets under [https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation/Data](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation/Data)\r\n\r\nThe model generated using instructions in [here](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation), produces metrics below:\r\n```\r\nMeanAbsoluteError: 0.619940823978848\r\nMeanSquaredError: 0.947787365931922\r\nRootMeanSquaredError: 0.973543715470406\r\nRSquared: 0.43654475860194\r\n```\r\n\r\nWhereas using AutoML for Recommendation task with just 540 seconds training time (as seen in this PR), we can get a little over 100 models generated out of which the best produced has the improved metrics below:\r\n```\r\nMetrics of best model on test data --\r\nMeanAbsoluteError: 0.578644904825423\r\nMeanSquaredError: 0.747918695002957\r\nRootMeanSquaredError: 0.864822926964218\r\nRSquared: 0.555365766640444\r\n```\r\n--- \r\n\r\nAdditionally in this PR I updated the CodeGeneratorTests a bit so that, the code generated in \r\n- CodeGeneratorTests.Recommendation_GenerateConsoleAppProjectContents_VerifyPredictProgram\r\n- CodeGeneratorTests.Recommendation_GenerateConsoleAppProjectContents_VerifyPredictProject\r\n\r\ncan be used to test the model generated from running the Recommendation experiment in the doc\\samples folder.\r\n\r\ncc: @CESARDELATORRE, @eerhardt @LittleLittleCloud ","Url":"https://github.com/dotnet/machinelearning/pull/4421","RelatedDescription":"Open PR \"Cleanup: makes Recommendation sample easier to use\" (#4421)"},{"Id":"514985132","IsPullRequest":false,"CreatedAt":"2019-10-30T22:37:01","Actor":"luisquintanilla","Number":"4420","RawContent":null,"Title":"[Image Classification API] TensorFlow exception triggered while loading model","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1 \r\n- **NuGet Packages**\r\n\r\n  - Microsoft.ML (1.4.0-preview3-28230-5)\r\n  - Microsoft.ML.ImageAnalytics (1.4.0-preview3-28230-5)\r\n  - Microsoft.ML.Vision (1.4.0-preview3-28230-5)\r\n\r\n### Issue\r\n\r\nTried to train a model using Image Classification API and ResNetV2101 architecture.\r\n\r\n### Source code / logs\r\n\r\nSource Code: https://github.com/luisquintanilla/machinelearning-samples/blob/testing-1.4.0-samples/samples/csharp/getting-started/DeepLearning_ImageClassification_Binary/DeepLearning_ImageClassification_Binary/Program.cs\r\n\r\nStack Trace:\r\n\r\n```text\r\n   System.FormatException\r\n  HResult=0x80131537\r\n  Message=Tensorflow exception triggered while loading model.\r\n  Source=Microsoft.ML.TensorFlow\r\n  StackTrace:\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch, String path)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at DLImageClassificationBinary.Program.Main(String[] args) in C:\\Users\\luquinta.REDMOND\\source\\repos\\DLImageClassificationBinary\\DLImageClassificationBinary\\Program.cs:line 60\r\n\r\nInner Exception 1:\r\nDllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4420","RelatedDescription":"Closed issue \"[Image Classification API] TensorFlow exception triggered while loading model\" (#4420)"},{"Id":"514883908","IsPullRequest":true,"CreatedAt":"2019-10-30T18:19:04","Actor":"harshithapv","Number":"4417","RawContent":null,"Title":"Added Cyclic LR scheduling","State":"open","Body":"Added functionality for added unit tests for Cyclic LR scheduling with the unit and integration tests. Also added unit tests for LsrDecay and Exponential decay.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4417","RelatedDescription":"Open PR \"Added Cyclic LR scheduling\" (#4417)"},{"Id":"514868848","IsPullRequest":true,"CreatedAt":"2019-10-30T17:54:53","Actor":"harishsk","Number":"4416","RawContent":null,"Title":"Upgraded OnnxRuntime to v1.0 and Google Protobuf to 3.10.1","State":"open","Body":"This PR upgrades the OnnxRuntime to v1.0 and the Google Protobuf version to 3.10.1","Url":"https://github.com/dotnet/machinelearning/pull/4416","RelatedDescription":"Open PR \"Upgraded OnnxRuntime to v1.0 and Google Protobuf to 3.10.1\" (#4416)"},{"Id":"514763351","IsPullRequest":true,"CreatedAt":"2019-10-30T15:27:45","Actor":"codemzs","Number":"4414","RawContent":null,"Title":"Bump release version to 1.5.0-preview and preview version to 0.17.0-preview.","State":"open","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4414","RelatedDescription":"Open PR \"Bump release version to 1.5.0-preview and preview version to 0.17.0-preview.\" (#4414)"},{"Id":"514227734","IsPullRequest":true,"CreatedAt":"2019-10-30T05:23:44","Actor":"codemzs","Number":"4412","RawContent":null,"Title":"Move Microsoft.ML.Vision to stable package.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4412","RelatedDescription":"Closed or merged PR \"Move Microsoft.ML.Vision to stable package.\" (#4412)"},{"Id":"514128690","IsPullRequest":true,"CreatedAt":"2019-10-30T05:22:10","Actor":"bpstark","Number":"4410","RawContent":null,"Title":"Modify ImageClassification API to use a workspace for saving data","State":"closed","Body":"Originally this API saved data to the same directory as the DLL, this\r\ncould cause issues if the DLL was in a read only path. Instead moving to\r\ndefault to a temporary workspace path which can be defined in the\r\noptions by the user. This will allow all the data to be saved in one\r\npath.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4410","RelatedDescription":"Closed or merged PR \"Modify ImageClassification API to use a workspace for saving data\" (#4410)"},{"Id":"514294370","IsPullRequest":true,"CreatedAt":"2019-10-29T23:31:10","Actor":"michaelgsharp","Number":"4413","RawContent":null,"Title":"Initial featurizers project","State":"open","Body":"This is the initial featurizers PR to split apart PR #4157 and get all the common code into master.\r\nOnce this code goes in, I will create separate PR's for each of the 5 featurizers.\r\n\r\nThis is the common code for the featurizers. Its mostly changes to project files and solution files. Common.cs is for all the shared code for the featurizers. The change in Utils.cs is to allow `Marshal.Invoke` with multiple type parameters. The RowToRowMapperTransform.cs change has it create a new mapper when possible. This helps with thread safety/local caching of the mappers when run in a multi threaded approach.","Url":"https://github.com/dotnet/machinelearning/pull/4413","RelatedDescription":"Open PR \"Initial featurizers project\" (#4413)"},{"Id":"514001912","IsPullRequest":true,"CreatedAt":"2019-10-29T20:42:29","Actor":"codemzs","Number":"4408","RawContent":null,"Title":"Rename Microsoft.ML.Dnn to Microsoft.ML.Vision and reverse dependency between Microsoft.ML.TensorFlow and Microsoft.ML.Dnn","State":"closed","Body":"- Refactors Microsoft.ML.TensorFlow and Microsoft.ML.Dnn such that Microsoft.ML.Dnn depends on Microsoft.ML.TensorFlow and not vice-versa and fixes #4305.\r\n\r\n- Renames Microsoft.ML.Dnn nuget and namespace to Microsoft.ML.Vision.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4408","RelatedDescription":"Closed or merged PR \"Rename Microsoft.ML.Dnn to Microsoft.ML.Vision and reverse dependency between Microsoft.ML.TensorFlow and Microsoft.ML.Dnn\" (#4408)"},{"Id":"514093594","IsPullRequest":false,"CreatedAt":"2019-10-29T17:27:52","Actor":"eerhardt","Number":"4409","RawContent":null,"Title":"TensorFlowUtils should add the caught exception as an inner exception","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/4c3be03282db29b65eb8f33888d8cb8c1a8dadac/src/Microsoft.ML.Dnn/DnnUtils.cs#L84-L87\r\n\r\nThis code is catching an exception and throwing a new one, but not using the caught exception as an inner exception. This loses the information of what the original exception was.\r\n\r\nSee https://github.com/dotnet/machinelearning/pull/4408#discussion_r340181047","Url":"https://github.com/dotnet/machinelearning/issues/4409","RelatedDescription":"Open issue \"TensorFlowUtils should add the caught exception as an inner exception\" (#4409)"},{"Id":"513623792","IsPullRequest":true,"CreatedAt":"2019-10-29T02:48:50","Actor":"antoniovs1029","Number":"4406","RawContent":null,"Title":"Fixes #4405 About publishing nugets to public feed","State":"closed","Body":"Fixes #4405 about publishing nugets to this public feed:\r\nhttps://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=MachineLearning\r\n\r\nThis will be executed by the AzureDevOps build pipeline whenever a new commit is added to the master branch of this repo. Notice that sometimes there are some problems on the side of Azure DevOps, and it might fail when executing the build pipeline, even in steps that were not modified in this PR, and producing errors that prevent the pipeline to actually publish the nugets to the feed; this unplanned errors already existed before the changes introduced in this PR, and they are somewhat unpredictable. The solution to this is to rerun the build manually until the pipeline succeeds.\r\n\r\nWorked this out following @safern instructions.","Url":"https://github.com/dotnet/machinelearning/pull/4406","RelatedDescription":"Closed or merged PR \"Fixes #4405 About publishing nugets to public feed\" (#4406)"},{"Id":"513620169","IsPullRequest":false,"CreatedAt":"2019-10-29T02:48:49","Actor":"antoniovs1029","Number":"4405","RawContent":null,"Title":"NuGet packages not being published to public feed","State":"closed","Body":"It's desirable to have NuGets being published to a public feed as soon as the master branch of this repo gets updated.\r\n\r\nIn the past, this was tried to be done by publishing them to MyGet, but currently the lines of code that do this are commented out. https://github.com/dotnet/machinelearning/blob/f0fb7203d7597d2779a298662970b1f74b47f4b8/build/vsts-ci.yml#L237-L242\r\n\r\nAs discussed offline with @codemzs it would be better to instead publish them into this other public feed in Azure DevOps:\r\nhttps://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=MachineLearning","Url":"https://github.com/dotnet/machinelearning/issues/4405","RelatedDescription":"Closed issue \"NuGet packages not being published to public feed\" (#4405)"},{"Id":"513642400","IsPullRequest":true,"CreatedAt":"2019-10-29T01:33:00","Actor":"jeremytieman","Number":"4407","RawContent":null,"Title":"SEAL Homomorphic Encryption support","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4407","RelatedDescription":"Open PR \"SEAL Homomorphic Encryption support\" (#4407)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-11-04T05:30:39.5985034Z","RunDurationInMilliseconds":821}