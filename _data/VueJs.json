{"Data":{"Vue":{"Events":[{"Id":"6986612785","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:41:20","Actor":"jingsam","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7237","RelatedDescription":"Opened issue \"组件名称校验错误\" (#7237) at vuejs/vue","RelatedBody":"### Version\r\n2.5.10\r\n\r\n### Reproduction link\r\n[https://github.com/iview/iview/issues/2616](https://github.com/iview/iview/issues/2616)\r\n\r\n### Steps to reproduce\r\n![pic](https://user-images.githubusercontent.com/26481272/33947801-5142761c-e060-11e7-8e25-ad7994fc4b4b.jpg)\r\n\r\n### What is expected?\r\n不报错\r\n\r\n### What is actually happening?\r\n报错\r\n\r\n---\r\nv2.5.10 对组件名称校验引入了breaking change，会导致iView的大部分组件报错。\r\n\r\n原因在于这个提交[644274c](https://github.com/vuejs/vue/commit/644274cbd34e14e74e8931fa979b22dc2db04895)将名称校验提取到了统一的函数`validateComponentName`中，这个函数对组件名称校验前都进行了lowercase。\r\n\r\n而原来校验过程并不会对组件名称预先lowercase，而是对HTML、SVG、BuiltinTag做区分对待,参见 [element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)\r\n\r\niView从设计初就一直坚持使用大写组件名，从实践中发现CamelCase区分度比camel-case更高，有助于保护程序员的视力\r\n\r\n关于组件名称，我说说我的理解：\r\n\r\n组件名称的校验，主要目的在于让template compiler跳过对标准HTML标签的解析，降低解析负担。例如模板中有大量的div、button标签，对每个标签尝试解析是很大的负担。\r\n\r\n这就涉及到一个本质问题，到底哪些标签不应该被解析？\r\n\r\n从规范视角、解析器视角、用户视角出发，会得到不同的答案，以下从HTML tag和SVG tag来说明：\r\n\r\n## 规范视角\r\n\r\n从规范角度来看，HTML5规定HTML Tag是case-insensitive的，意思是`button`和`Button`是规范有效的标准Tag；SVG规范规定SVG Tag是case-sensitive的，因为SVG遵从XML规范，所以`circle`是有效的Tag，而`Circle`不是。\r\n\r\n所以从规范视角来看，对HTML标签的判断应该不区分大小写，对SVG的标签的判断应该区分大小写。而[element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)的实现中恰好相反，对HTML标签的判断应该区分大小写，对SVG的标签不区分大小写。\r\n\r\n## 解析器视角\r\n\r\n对于template compiler来说，它实际上可以区分大小写的。之所以In DOM template中不能区分大小写，是因为浏览器在将HTML片段传给tempalte compiler解析的时候，把tag都抹成为lowercase了，导致大小写信息丢失了。所以你在代码中写的大写标签，经过浏览器处理后，template compiler就看不见了。\r\n\r\n之所以对HTML标签进行lowercase处理，是为了匹配方便，总不能对button匹配一次，Button再匹配一次吧。而SVG标签是区分大小写的，所以浏览器对SVG内的标签不做lowercase处理，而是传递给SVG engine处理。对于SVG engine来说，理论上应该拒绝Circle的解析，但实现上为了照顾某些粗心的程序员，估计会做容错处理（猜想，未做证实）。\r\n\r\n所以从解析器视角来看，HTML和SVG标签应该都不区分大小写。\r\n\r\n## 用户视角\r\n\r\n从用户视角来讲，当他声明一个`Button`，他的本意到底是说这是一个自定义组件，还是说他手抖了写错了，本意是表示`button`？\r\n\r\n当用户在template String中明确写了一个大写标签，我认为有很大的可能性他想表达这个组件是自定义组件。毕竟，现有的各种处理HTML的工具软件输出的HTML是大写标签的，也见过哪个开发者有用大写表示HTML tag的癖好。\r\n\r\n对SVG标签来讲，我还没调查是不是有处理SVG的工具软件输出大写标签，例如有的输出`<svg>`,有的输出<SVG>。我觉得这块应该遵守规范，输出标签应该按照SVG规范来，即所谓的“宽进严出”。\r\n\r\n所以从用户视角来说，HTML和SVG都应该区分大小写。\r\n\r\n## 总结\r\n\r\n前面我说了从规范视角、解析器视角和用户视角，会得出不同的结果。那到底按照哪种方式跟好呢？我认为从用户视角是更好的。从用户视角意味着，template compiler能够最大化的反应开发者的本意，减少开发者理解的负担。虽然，template尽量遵守HTML规范，但它本质不是HTML，所以当HTML规范不符合应用场景时，我们应该打破它。\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6986609806","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:40:00","Actor":"vue-issue-bot","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7236","RelatedDescription":"Closed issue \"组件名称校验错误\" (#7236) at vuejs/vue","RelatedBody":"### Version\r\n2.5.10\r\n\r\n### Reproduction link\r\n[https://github.com/iview/iview/issues/2616](https://github.com/iview/iview/issues/2616)\r\n\r\n### Steps to reproduce\r\n![pic](https://user-images.githubusercontent.com/26481272/33947801-5142761c-e060-11e7-8e25-ad7994fc4b4b.jpg)\r\n\r\n### What is expected?\r\n不报错\r\n\r\n### What is actually happening?\r\n报错\r\n\r\n---\r\nv2.5.10 对组件名称校验引入了breaking change，会导致iView的大部分组件报错。\r\n\r\n原因在于这个提交[644274c](https://github.com/vuejs/vue/commit/644274cbd34e14e74e8931fa979b22dc2db04895)将名称校验提取到了统一的函数`validateComponentName`中，这个函数对组件名称校验前都进行了lowercase。\r\n\r\n而原来校验过程并不会对组件名称预先lowercase，而是对HTML、SVG、BuiltinTag做区分对待,参见 [element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)\r\n\r\niView从设计初就一直坚持使用大写组件名，从实践中发现CamelCase区分度比camel-case更高，有助于保护程序员的视力\r\n\r\n关于组件名称，我说说我的理解：\r\n\r\n组件名称的校验，主要目的在于让template compiler跳过对标准HTML标签的解析，降低解析负担。例如模板中有大量的div、button标签，对每个标签尝试解析是很大的负担。\r\n\r\n这就涉及到一个本质问题，到底哪些标签不应该被解析？\r\n\r\n从规范视角、解析器视角、用户视角出发，会得到不同的答案，以下从HTML tag和SVG tag来说明：\r\n\r\n## 规范视角\r\n\r\n从规范角度来看，HTML5规定HTML Tag是case-insensitive的，意思是`button`和`Button`是规范有效的标准Tag；SVG规范规定SVG Tag是case-sensitive的，因为SVG遵从XML规范，所以`circle`是有效的Tag，而`Circle`不是。\r\n\r\n所以从规范视角来看，对HTML标签的判断应该不区分大小写，对SVG的标签的判断应该区分大小写。而[element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)的实现中恰好相反，对HTML标签的判断应该区分大小写，对SVG的标签不区分大小写。\r\n\r\n## 解析器视角\r\n\r\n对于template compiler来说，它实际上可以区分大小写的。之所以In DOM template中不能区分大小写，是因为浏览器在将HTML片段传给tempalte compiler解析的时候，把tag都抹成为lowercase了，导致大小写信息丢失了。所以你在代码中写的大写标签，经过浏览器处理后，template compiler就看不见了。\r\n\r\n之所以对HTML标签进行lowercase处理，是为了匹配方便，总不能对button匹配一次，Button再匹配一次吧。而SVG标签是区分大小写的，所以浏览器对SVG内的标签不做lowercase处理，而是传递给SVG engine处理。对于SVG engine来说，理论上应该拒绝Circle的解析，但实现上为了照顾某些粗心的程序员，估计会做容错处理（猜想，未做证实）。\r\n\r\n所以从解析器视角来看，HTML和SVG标签应该都不区分大小写。\r\n\r\n## 用户视角\r\n\r\n从用户视角来讲，当他声明一个`Button`，他的本意到底是说这是一个自定义组件，还是说他手抖了写错了，本意是表示`button`？\r\n\r\n当用户在template String中明确写了一个大写标签，我认为有很大的可能性他想表达这个组件是自定义组件。毕竟，现有的各种处理HTML的工具软件输出的HTML是大写标签的，也见过哪个开发者有用大写表示HTML tag的癖好。\r\n\r\n对SVG标签来讲，我还没调查是不是有处理SVG的工具软件输出大写标签，例如有的输出`<svg>`,有的输出<SVG>。我觉得这块应该遵守规范，输出标签应该按照SVG规范来，即所谓的“宽进严出”。\r\n\r\n所以从用户视角来说，HTML和SVG都应该区分大小写。\r\n\r\n## 总结\r\n\r\n前面我说了从规范视角、解析器视角和用户视角，会得出不同的结果。那到底按照哪种方式跟好呢？我认为从用户视角是更好的。从用户视角意味着，template compiler能够最大化的反应开发者的本意，减少开发者理解的负担。虽然，template尽量遵守HTML规范，但它本质不是HTML，所以当HTML规范不符合应用场景时，我们应该打破它。"},{"Id":"6986609781","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:39:59","Actor":"jingsam","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7236","RelatedDescription":"Opened issue \"组件名称校验错误\" (#7236) at vuejs/vue","RelatedBody":"### Version\r\n2.5.10\r\n\r\n### Reproduction link\r\n[https://github.com/iview/iview/issues/2616](https://github.com/iview/iview/issues/2616)\r\n\r\n### Steps to reproduce\r\n![pic](https://user-images.githubusercontent.com/26481272/33947801-5142761c-e060-11e7-8e25-ad7994fc4b4b.jpg)\r\n\r\n### What is expected?\r\n不报错\r\n\r\n### What is actually happening?\r\n报错\r\n\r\n---\r\nv2.5.10 对组件名称校验引入了breaking change，会导致iView的大部分组件报错。\r\n\r\n原因在于这个提交[644274c](https://github.com/vuejs/vue/commit/644274cbd34e14e74e8931fa979b22dc2db04895)将名称校验提取到了统一的函数`validateComponentName`中，这个函数对组件名称校验前都进行了lowercase。\r\n\r\n而原来校验过程并不会对组件名称预先lowercase，而是对HTML、SVG、BuiltinTag做区分对待,参见 [element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)\r\n\r\niView从设计初就一直坚持使用大写组件名，从实践中发现CamelCase区分度比camel-case更高，有助于保护程序员的视力\r\n\r\n关于组件名称，我说说我的理解：\r\n\r\n组件名称的校验，主要目的在于让template compiler跳过对标准HTML标签的解析，降低解析负担。例如模板中有大量的div、button标签，对每个标签尝试解析是很大的负担。\r\n\r\n这就涉及到一个本质问题，到底哪些标签不应该被解析？\r\n\r\n从规范视角、解析器视角、用户视角出发，会得到不同的答案，以下从HTML tag和SVG tag来说明：\r\n\r\n## 规范视角\r\n\r\n从规范角度来看，HTML5规定HTML Tag是case-insensitive的，意思是`button`和`Button`是规范有效的标准Tag；SVG规范规定SVG Tag是case-sensitive的，因为SVG遵从XML规范，所以`circle`是有效的Tag，而`Circle`不是。\r\n\r\n所以从规范视角来看，对HTML标签的判断应该不区分大小写，对SVG的标签的判断应该区分大小写。而[element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)的实现中恰好相反，对HTML标签的判断应该区分大小写，对SVG的标签不区分大小写。\r\n\r\n## 解析器视角\r\n\r\n对于template compiler来说，它实际上可以区分大小写的。之所以In DOM template中不能区分大小写，是因为浏览器在将HTML片段传给tempalte compiler解析的时候，把tag都抹成为lowercase了，导致大小写信息丢失了。所以你在代码中写的大写标签，经过浏览器处理后，template compiler就看不见了。\r\n\r\n之所以对HTML标签进行lowercase处理，是为了匹配方便，总不能对button匹配一次，Button再匹配一次吧。而SVG标签是区分大小写的，所以浏览器对SVG内的标签不做lowercase处理，而是传递给SVG engine处理。对于SVG engine来说，理论上应该拒绝Circle的解析，但实现上为了照顾某些粗心的程序员，估计会做容错处理（猜想，未做证实）。\r\n\r\n所以从解析器视角来看，HTML和SVG标签应该都不区分大小写。\r\n\r\n## 用户视角\r\n\r\n从用户视角来讲，当他声明一个`Button`，他的本意到底是说这是一个自定义组件，还是说他手抖了写错了，本意是表示`button`？\r\n\r\n当用户在template String中明确写了一个大写标签，我认为有很大的可能性他想表达这个组件是自定义组件。毕竟，现有的各种处理HTML的工具软件输出的HTML是大写标签的，也见过哪个开发者有用大写表示HTML tag的癖好。\r\n\r\n对SVG标签来讲，我还没调查是不是有处理SVG的工具软件输出大写标签，例如有的输出`<svg>`,有的输出<SVG>。我觉得这块应该遵守规范，输出标签应该按照SVG规范来，即所谓的“宽进严出”。\r\n\r\n所以从用户视角来说，HTML和SVG都应该区分大小写。\r\n\r\n## 总结\r\n\r\n前面我说了从规范视角、解析器视角和用户视角，会得出不同的结果。那到底按照哪种方式跟好呢？我认为从用户视角是更好的。从用户视角意味着，template compiler能够最大化的反应开发者的本意，减少开发者理解的负担。虽然，template尽量遵守HTML规范，但它本质不是HTML，所以当HTML规范不符合应用场景时，我们应该打破它。"},{"Id":"6986604564","Type":"IssuesEvent","CreatedAt":"2017-12-14T04:37:30","Actor":"jingsam","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7235","RelatedDescription":"Opened issue \"组件名称校验错误\" (#7235) at vuejs/vue","RelatedBody":"## 我的issue太长了，Vue Issue Helper会报 414 Request-URI Too Large\r\n\r\nhttps://github.com/iview/iview/issues/2616\r\n![pic](https://user-images.githubusercontent.com/26481272/33947801-5142761c-e060-11e7-8e25-ad7994fc4b4b.jpg)\r\n\r\nv2.5.10 对组件名称校验引入了breaking change，会导致iView的大部分组件报错。\r\n\r\n原因在于这个提交[644274c](https://github.com/vuejs/vue/commit/644274cbd34e14e74e8931fa979b22dc2db04895)将名称校验提取到了统一的函数`validateComponentName`中，这个函数对组件名称校验前都进行了lowercase。\r\n\r\n而原来校验过程并不会对组件名称预先lowercase，而是对HTML、SVG、BuiltinTag做区分对待,参见 [element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)\r\n\r\niView从设计初就一直坚持使用大写组件名，从实践中发现CamelCase区分度比camel-case更高，有助于保护程序员的视力:)\r\n\r\n关于组件名称，我说说我的理解：\r\n\r\n组件名称的校验，主要目的在于让template compiler跳过对标准HTML标签的解析，降低解析负担。例如模板中有大量的div、button标签，对每个标签尝试解析是很大的负担。\r\n\r\n这就涉及到一个本质问题，到底哪些标签不应该被解析？\r\n\r\n从规范视角、解析器视角、用户视角出发，会得到不同的答案，以下从HTML tag和SVG tag来说明：\r\n\r\n## 规范视角\r\n\r\n从规范角度来看，HTML5规定HTML Tag是case-insensitive的，意思是`button`和`Button`是规范有效的标准Tag；SVG规范规定SVG Tag是case-sensitive的，因为SVG遵从XML规范，所以`circle`是有效的Tag，而`Circle`不是。\r\n\r\n所以从规范视角来看，对HTML标签的判断应该不区分大小写，对SVG的标签的判断应该区分大小写。而[element.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/util/element.js)的实现中恰好相反，对HTML标签的判断应该区分大小写，对SVG的标签不区分大小写。\r\n\r\n## 解析器视角\r\n\r\n对于template compiler来说，它实际上可以区分大小写的。之所以In DOM template中不能区分大小写，是因为浏览器在将HTML片段传给tempalte compiler解析的时候，把tag都抹成为lowercase了，导致大小写信息丢失了。所以你在代码中写的大写标签，经过浏览器处理后，template compiler就看不见了。\r\n\r\n之所以对HTML标签进行lowercase处理，是为了匹配方便，总不能对button匹配一次，Button再匹配一次吧。而SVG标签是区分大小写的，所以浏览器对SVG内的标签不做lowercase处理，而是传递给SVG engine处理。对于SVG engine来说，理论上应该拒绝Circle的解析，但实现上为了照顾某些粗心的程序员，估计会做容错处理（猜想，未做证实）。\r\n\r\n所以从解析器视角来看，HTML和SVG标签应该都不区分大小写。\r\n\r\n## 用户视角\r\n\r\n从用户视角来讲，当他声明一个`Button`，他的本意到底是说这是一个自定义组件，还是说他手抖了写错了，本意是表示`button`？\r\n\r\n当用户在template String中明确写了一个大写标签，我认为有很大的可能性他想表达这个组件是自定义组件。毕竟，现有的各种处理HTML的工具软件输出的HTML是大写标签的，也见过哪个开发者有用大写表示HTML tag的癖好。\r\n\r\n对SVG标签来讲，我还没调查是不是有处理SVG的工具软件输出大写标签，例如有的输出`<svg>`,有的输出<SVG>。我觉得这块应该遵守规范，输出标签应该按照SVG规范来，即所谓的“宽进严出”。\r\n\r\n所以从用户视角来说，HTML和SVG都应该区分大小写。\r\n\r\n## 总结\r\n\r\n前面我说了从规范视角、解析器视角和用户视角，会得出不同的结果。那到底按照哪种方式跟好呢？我认为从用户视角是更好的。从用户视角意味着，template compiler能够最大化的反应开发者的本意，减少开发者理解的负担。虽然，template尽量遵守HTML规范，但它本质不是HTML，所以当HTML规范不符合应用场景时，我们应该打破它。"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6982542646","Type":"IssuesEvent","CreatedAt":"2017-12-13T12:15:55","Actor":"front-end-developer-candy","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1936","RelatedDescription":"Opened issue \"这个需求的目的应该是为了更利于SEO？\" (#1936) at vuejs/vue-router","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vue-router\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n"},{"Id":"6980079158","Type":"IssuesEvent","CreatedAt":"2017-12-12T23:40:16","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1935","RelatedDescription":"Closed issue \"Vue application displays blank screen\" (#1935) at vuejs/vue-router","RelatedBody":"Hello! I've been trying to resolve a routing problem in my application for several days.\r\nHow can I target the domain: www.softshop.com.br/painel \r\nfor an application vue\r\nthe domain www.softshop.com.br should be pointed to a site built in laravel\r\nthe domain www.softshop.com.br/painel  should be pointed to the system vue\r\nI tried to use this example, but it did not work: \r\n\r\nhttps://gist.github.com/Maras0830/dc6f627eba005bdfc6b741f7f2ea3178\r\n\r\nIf you access the address, you will see that the page is all white:\r\n\r\nhttp://www.softshop.com.br/painel\r\nCan someone help me?\r\n"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6986281810","Type":"IssuesEvent","CreatedAt":"2017-12-14T02:27:08","Actor":"vue-issue-bot","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1089","RelatedDescription":"Closed issue \" Uncaught Error: [vuex] getters should be function but \"getters.default\" is {}.     vuex.esm.js?7734:97\" (#1089) at vuejs/vuex","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vuex\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n"},{"Id":"6986281743","Type":"IssuesEvent","CreatedAt":"2017-12-14T02:27:07","Actor":"juny1zhang","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1089","RelatedDescription":"Opened issue \" Uncaught Error: [vuex] getters should be function but \"getters.default\" is {}.     vuex.esm.js?7734:97\" (#1089) at vuejs/vuex","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vuex\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n"},{"Id":"6985035211","Type":"PullRequestEvent","CreatedAt":"2017-12-13T20:34:07","Actor":"manico","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/pull/1088","RelatedDescription":"Opened pull request \"Add support for mixins\" (#1088) at vuejs/vuex","RelatedBody":"Fixes #1078\r\nIf this is ok direction, I can create tests."}],"ResultType":"GitHubEvent"}},"RunOn":"2017-12-14T05:30:37.5985666Z","RunDurationInMilliseconds":2251}