{"Data":{"Blog":{"FeedItems":[{"Title":"The Next Evolution of Xamarin Training: Microsoft Learn","PublishedOn":"2019-05-06T08:01:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce two new learning paths on Building Xamarin Apps in Microsoft Learn: A free and interactive learning portal.\nXamarin University Joins MS Learn\nThe Xamarin University...","Href":"https://devblogs.microsoft.com/xamarin/next-evolution-xamarin-training-microsoft-learn/","RawContent":null},{"Title":"Join the Xamarin Team at Microsoft Build 2019","PublishedOn":"2019-05-03T20:27:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Build 2019 kicks off next week in beautiful downtown Seattle Washington and we have a packed schedule for Xamarin developers to look forward to. In addition to sessions, you can find some of...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-team-microsoft-build-2019/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in May","PublishedOn":"2019-04-30T16:01:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn about new, exciting releases and tools to help jumpstart your next mobile development project by networking with your local community. You too could get all the latest updates about Xamarin and...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-net-developer-events-may/","RawContent":null},{"Title":"Customer Showcase: Aggreko","PublishedOn":"2019-04-23T18:23:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce a new inclusion to our Xamarin Showcase gallery:\nThe Aggreko Technician App\nA key objective of Aggreko’s company-wide Aggreko18 digital transformation program was to...","Href":"https://devblogs.microsoft.com/xamarin/customer-showcase-aggreko/","RawContent":null},{"Title":"Shrinking Your Android App Size","PublishedOn":"2019-04-22T18:15:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Mobile devices are limited in many ways. Whether it&#8217;s how much of a charge your battery can hold, the amount of storage you have left, or the speed of your internet connection to view more cat...","Href":"https://devblogs.microsoft.com/xamarin/shrinking-android-app-size/","RawContent":null},{"Title":"Xamarin.Forms 4.0 CollectionView Challenge ","PublishedOn":"2019-04-19T17:04:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"During March, many of you made submissions to our Visual Challenge. Your feedback has been extremely valuable and you all put together some impressive samples! As a follow up in this series, we now...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-forms-4-0-collectionview-challenge/","RawContent":null},{"Title":"The New & Improved Xamarin Developers YouTube Channel!","PublishedOn":"2019-04-18T18:13:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are so excited to re-launch our Xamarin Developers YouTube channel! Here you will find fresh content on building amazing mobile apps directly from the Xamarin team here at Microsoft. To kick things...","Href":"https://devblogs.microsoft.com/xamarin/new-xamarin-developers-youtube-channel/","RawContent":null},{"Title":"Getting Ready for macOS’s Hardened Runtime and Notary","PublishedOn":"2019-04-15T16:11:14+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"With macOS Mojave, Apple introduced support for Hardened Runtime and Notary service. These two services are designed to improve application security on macOS. Recently Apple has...","Href":"https://devblogs.microsoft.com/xamarin/macos-hardened-runtime-notary/","RawContent":null},{"Title":"Xamarin Podcast: Visual Studio 2019 is released!","PublishedOn":"2019-04-12T17:14:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in Xamarin and cloud development.\nPodcast Highlights\nVisual Studio 2019 has been released and is...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-visual-studio-2019-is-released/","RawContent":null},{"Title":"Sharing Files & Email Attachments with Xamarin.Essentials Preview Features","PublishedOn":"2019-04-10T19:15:56+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In the recent release of Xamarin.Essentials (1.1.0), we introduced several new stable features including detect shake, browser customization, and a plethora of platform helpers. The team has also been...","Href":"https://devblogs.microsoft.com/xamarin/sharing-files-attachments-xamarin-essentials/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9589365941","Type":"PullRequestEvent","CreatedAt":"2019-05-08T20:53:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3080","RelatedDescription":"Merged pull request \"Fixing xabuild path on UsingYourBuild.md\" (#3080) at xamarin/xamarin-android","RelatedBody":"The path of generated xabuild was wrong."},{"Id":"9589326626","Type":"PullRequestEvent","CreatedAt":"2019-05-08T20:46:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3082","RelatedDescription":"Closed pull request \" [Xamarin.Android.Build.Tasks] Handle duplicate Resources for Resource.Designer.cs d16-2\" (#3082) at xamarin/xamarin-android","RelatedBody":"You can have versioned resources in android. As a\r\nresult you can have duplicate resource entries.\r\nIn the case of styleable items we were trying to\r\nuse a dictionary to keep track of the items which\r\nwe need to generate id's for. However because we\r\nwhere comming across duplicate resource entires\r\nwe were crashing with a\r\n\r\n\tSystem.ArgumentException: An item with the same key has already been added.\r\n\r\nThis was because we had already created that `CodeMemberField`\r\nand added it to the dictionary. What we need to do is skip over\r\nitems which have already been added.\r\n\r\nAnother problem with this was the order in which we\r\ngenerated the styleable items. Adding the new `MultiSelectListPreference`\r\nitem caused the `ManagedResourceParser` to produce\r\ndifferent results. It turns out that android does some\r\nsorting on the values and fields it produces for\r\nthe `Styleable` items.\r\n\r\nGiven the following xml declaration\r\n\r\n\t  <declare-styleable name=\"MultiSelectListPreference\">\r\n\t\t<attr name=\"entries\"/>\r\n\t\t<attr name=\"android:entries\"/>\r\n\t\t<attr name=\"entryValues\"/>\r\n\t\t<attr name=\"android:entryValues\"/>\r\n\t</declare-styleable>\r\n\r\nthe following is produced in the `R.txt` file.\r\n\r\n\tint[] styleable MultiSelectListPreference { 0x010100b2, 0x010101f8, 0x7f030001, 0x7f030002 }\r\n\tint styleable MultiSelectListPreference_android_entries 0\r\n\tint styleable MultiSelectListPreference_android_entryValues 1\r\n\tint styleable MultiSelectListPreference_entries 2\r\n\tint styleable MultiSelectListPreference_entryValues 3\r\n\r\nNote that the items are ordered alphabetically and NOT by the\r\norder in which they appear in the xml. This needs to be done\r\nBEFORE we actaully generate or lookup the actual id values\r\nfor these items. This is so they have the correct `index` into\r\nthe `MultiSelectListPreference` array. This commit also\r\nfixes up this issue.\r\n\r\nUnit test has been modified to take into account these new\r\nsenarios."},{"Id":"9589102410","Type":"PullRequestEvent","CreatedAt":"2019-05-08T20:10:51","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3077","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Handle duplicate Resources for Resource.Designer.cs\" (#3077) at xamarin/xamarin-android","RelatedBody":"You can have versioned resources in android. As a\r\nresult you can have duplicate resource entries.\r\nIn the case of styleable items we were trying to\r\nuse a dictionary to keep track of the items which\r\nwe need to generate id's for. However because we\r\nwhere comming across duplicate resource entires\r\nwe were crashing with a\r\n\r\n\tSystem.ArgumentException: An item with the same key has already been added.\r\n\r\nThis was because we had already created that `CodeMemberField`\r\nand added it to the dictionary. What we need to do is skip over\r\nitems which have already been added.\r\n\r\nAnother problem with this was the order in which we\r\ngenerated the styleable items. Adding the new `MultiSelectListPreference`\r\nitem caused the `ManagedResourceParser` to produce\r\ndifferent results. It turns out that android does some\r\nsorting on the values and fields it produces for\r\nthe `Styleable` items.\r\n\r\nGiven the following xml declaration\r\n\r\n\t  <declare-styleable name=\"MultiSelectListPreference\">\r\n\t\t<attr name=\"entries\"/>\r\n\t\t<attr name=\"android:entries\"/>\r\n\t\t<attr name=\"entryValues\"/>\r\n\t\t<attr name=\"android:entryValues\"/>\r\n\t</declare-styleable>\r\n\r\nthe following is produced in the `R.txt` file.\r\n\r\n\tint[] styleable MultiSelectListPreference { 0x010100b2, 0x010101f8, 0x7f030001, 0x7f030002 }\r\n\tint styleable MultiSelectListPreference_android_entries 0\r\n\tint styleable MultiSelectListPreference_android_entryValues 1\r\n\tint styleable MultiSelectListPreference_entries 2\r\n\tint styleable MultiSelectListPreference_entryValues 3\r\n\r\nNote that the items are ordered alphabetically and NOT by the\r\norder in which they appear in the xml. This needs to be done\r\nBEFORE we actaully generate or lookup the actual id values\r\nfor these items. This is so they have the correct `index` into\r\nthe `MultiSelectListPreference` array. This commit also\r\nfixes up this issue.\r\n\r\nUnit test has been modified to take into account these new\r\nsenarios."},{"Id":"9587679015","Type":"IssuesEvent","CreatedAt":"2019-05-08T16:28:45","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3083","RelatedDescription":"Opened issue \"Apk per ABI fails with TargetFrameworkVersion v7.1 and lower when Aapt2 is enabled\" (#3083) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. ``` msbuild /t:SignAndroidPackage *.csproj /p:Configuration=Release /p:TargetFrameworkVersion=v7.1 /p:AndroidCreatePackagePerAbi=True /p:AndroidUseAapt2=True```\r\n\r\nThis could be considered a regression in d16-2 as `Aapt2` resource processing is now enabled by default.\r\n\r\n### Actual Behavior\r\nI've noticied a difference in `Aapt2Link` task behavior when comparing good and bad builds (both attached below). For some reason ABI specific manifest files don't appear to be processed by `Aapt2Link` when targeting a lower API level, and the ABI specific resource files are never created:\r\n\r\n```\r\nerror MSB4018: The \"BuildApk\" task failed unexpectedly.\r\nerror MSB4018: System.IO.FileNotFoundException: Could not find file 'obj\\Release\\71\\android\\bin\\packaged_resources-armeabi-v7a'\r\n```\r\n\r\n\r\n### Version Information\r\nXA D16-2 9.4.0.4 (HEAD/cc0e8b8d5)\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n[good-bad-binlogs.zip](https://github.com/xamarin/xamarin-android/files/3158319/good-bad-binlogs.zip)\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9587403535","Type":"PullRequestEvent","CreatedAt":"2019-05-08T15:50:06","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3082","RelatedDescription":"Opened pull request \" [Xamarin.Android.Build.Tasks] Handle duplicate Resources for Resource.Designer.cs d16-2\" (#3082) at xamarin/xamarin-android","RelatedBody":"You can have versioned resources in android. As a\r\nresult you can have duplicate resource entries.\r\nIn the case of styleable items we were trying to\r\nuse a dictionary to keep track of the items which\r\nwe need to generate id's for. However because we\r\nwhere comming across duplicate resource entires\r\nwe were crashing with a\r\n\r\n\tSystem.ArgumentException: An item with the same key has already been added.\r\n\r\nThis was because we had already created that `CodeMemberField`\r\nand added it to the dictionary. What we need to do is skip over\r\nitems which have already been added.\r\n\r\nAnother problem with this was the order in which we\r\ngenerated the styleable items. Adding the new `MultiSelectListPreference`\r\nitem caused the `ManagedResourceParser` to produce\r\ndifferent results. It turns out that android does some\r\nsorting on the values and fields it produces for\r\nthe `Styleable` items.\r\n\r\nGiven the following xml declaration\r\n\r\n\t  <declare-styleable name=\"MultiSelectListPreference\">\r\n\t\t<attr name=\"entries\"/>\r\n\t\t<attr name=\"android:entries\"/>\r\n\t\t<attr name=\"entryValues\"/>\r\n\t\t<attr name=\"android:entryValues\"/>\r\n\t</declare-styleable>\r\n\r\nthe following is produced in the `R.txt` file.\r\n\r\n\tint[] styleable MultiSelectListPreference { 0x010100b2, 0x010101f8, 0x7f030001, 0x7f030002 }\r\n\tint styleable MultiSelectListPreference_android_entries 0\r\n\tint styleable MultiSelectListPreference_android_entryValues 1\r\n\tint styleable MultiSelectListPreference_entries 2\r\n\tint styleable MultiSelectListPreference_entryValues 3\r\n\r\nNote that the items are ordered alphabetically and NOT by the\r\norder in which they appear in the xml. This needs to be done\r\nBEFORE we actaully generate or lookup the actual id values\r\nfor these items. This is so they have the correct `index` into\r\nthe `MultiSelectListPreference` array. This commit also\r\nfixes up this issue.\r\n\r\nUnit test has been modified to take into account these new\r\nsenarios."},{"Id":"9587339259","Type":"PullRequestEvent","CreatedAt":"2019-05-08T15:41:36","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3068","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] do not use %(HintPath)\" (#3068) at xamarin/xamarin-android","RelatedBody":"We noticed some odd behavior from MSBuild such as:\r\n\r\n    ReferenceDependencyPaths\r\n        C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Facades\\netstandard.dll\r\n            HintPath = ..\\..\\..\\packages\\Newtonsoft.Json.11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\r\n        C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.Runtime.Serialization.dll\r\n            HintPath = ..\\..\\..\\packages\\Xamarin.Forms.3.1.0.583944\\lib\\MonoAndroid10\\Xamarin.Forms.Platform.Android.dll\r\n\r\n`%(HintPath)` is leftover metadata from the `@(ReferencePath)` item\r\ngroup, so it points to the original assembly???\r\n\r\nWe currently use `%(HintPath)` in two places, but it seems like we\r\ndon't need to use it at all? `@(ReferencePath)` and\r\n`@(ReferenceDependencyPaths)` will both have the full path to all of\r\nthe assemblies in `ITaskItem.ItemSpec`.\r\n\r\nI was able to simplify two of our tasks and just use `ItemSpec`:\r\n\r\n* `<ResolveLibraryProjectImports/>`\r\n* `<GenerateResourceDesigner/>`\r\n\r\nI also did some general refactoring in `<GenerateResourceDesigner/>`:\r\n\r\n* Reorganized the top-level `foreach` loop, to more closely match what\r\n  we were already doing in `<ResolveLibraryProjectImports/>`.\r\n* Cleaned up some general LINQ usage.\r\n* A `List<string>` of assembly names could just be a\r\n  `List<AssemblyDefinition>`, to avoid some LINQ.\r\n* Fixed spelling/used string interpolation in log messages.\r\n\r\n## Results ##\r\n\r\nI think I'm seeing a ~50ms improvement in\r\n`<GenerateResourceDesigner/>` for an initial build:\r\n\r\n    Before:\r\n    205 ms  GenerateResourceDesigner                   1 calls\r\n    After:\r\n    152 ms  GenerateResourceDesigner                   1 calls\r\n\r\n## Future Work ##\r\n\r\n* It might be worth porting `<GenerateResourceDesigner/>` to use\r\n  System.Reflection.Metadata instead of Mono.Cecil at some point."},{"Id":"9587119099","Type":"IssuesEvent","CreatedAt":"2019-05-08T15:13:41","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3081","RelatedDescription":"Opened issue \"Debug deployment attempts are crashing on startup\" (#3081) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a new or load an existing project and deploy to device in Debug mode.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n\r\n### Actual Behavior\r\n```\r\n05-08 10:51:06.524  7834  7834 E mono    : Unhandled Exception:\r\n05-08 10:51:06.524  7834  7834 E mono    : System.ArgumentException: Handle must be valid.\r\n05-08 10:51:06.524  7834  7834 E mono    : Parameter name: instance\r\n05-08 10:51:06.524  7834  7834 E mono    :   at Java.Interop.JniEnvironment+InstanceMethods.CallObjectMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method) [0x00009] in <872818d1526e40d0b1926facf75f539d>:0\r\n```\r\n### Version Information\r\nXA 9.4.0.4 (HEAD/cc0e8b8d5)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n```\r\n05-06 15:44:39.605 W/ActivityManager( 1516): Activity pause timeout for ActivityRecord{5104222 u0 Notepad.Notepad/md57135d3c68dd99636a6eb42c8fba6d00e.NotesListActivity t75}\r\n05-06 15:44:39.605 V/ActivityManager( 1516): Scheduling idle now: forceIdle=trueimmediate=true\r\n05-06 15:44:39.632 D/Mono    (25698): Loading reference 7 of Mono.Android.dll asmctx DEFAULT, looking for System.Runtime.Serialization, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n05-06 15:44:39.633 D/Mono    (25698): Image addref System.Runtime.Serialization[0x76711b7880] (asmctx DEFAULT) -> System.Runtime.Serialization.dll[0x765f2e5800]: 2\r\n05-06 15:44:39.633 D/Mono    (25698): Prepared to set up assembly 'System.Runtime.Serialization' (System.Runtime.Serialization.dll)\r\n05-06 15:44:39.633 D/Mono    (25698): Assembly System.Runtime.Serialization[0x76711b7880] added to domain RootDomain, ref_count=1\r\n05-06 15:44:39.634 D/Mono    (25698): AOT: image 'System.Runtime.Serialization.dll.so' not found: (null)\r\n05-06 15:44:39.634 D/Mono    (25698): AOT: image '/Users/builder/jenkins/workspace/archive-mono/2018-10/android/release/sdks/out/android-arm64-v8a-release/lib/mono/aot-cache/arm64/System.Runtime.Serialization.dll.so' not found: (null)\r\n05-06 15:44:39.634 D/Mono    (25698): Config attempting to parse: 'System.Runtime.Serialization.dll.config'.\r\n05-06 15:44:39.634 D/Mono    (25698): Config attempting to parse: '/Users/builder/jenkins/workspace/archive-mono/2018-10/android/release/sdks/out/android-arm64-v8a-release/etc/mono/assemblies/System.Runtime.Serialization/System.Runtime.Serialization.config'.\r\n05-06 15:44:39.634 D/Mono    (25698): Assembly Ref addref Mono.Android[0x76711b7000] -> System.Runtime.Serialization[0x76711b7880]: 2\r\n05-06 15:44:39.635 D/Mono    (25698): Loading reference 0 of System.Runtime.Serialization.dll asmctx DEFAULT, looking for mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\r\n05-06 15:44:39.635 D/Mono    (25698): Assembly Ref addref System.Runtime.Serialization[0x76711b7880] -> mscorlib[0x767988fc80]: 6\r\n05-06 15:44:39.638 E/mono    (25698): \r\n05-06 15:44:39.638 E/mono    (25698): Unhandled Exception:\r\n05-06 15:44:39.638 E/mono    (25698): System.ArgumentException: Handle must be valid.\r\n05-06 15:44:39.638 E/mono    (25698): Parameter name: instance\r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Interop.JniEnvironment+InstanceMethods.CallObjectMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method) [0x00009] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Android.Runtime.JNIEnv.CallObjectMethod (System.IntPtr jobject, System.IntPtr jmethod) [0x0000e] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Interop.TypeManager.GetClassName (System.IntPtr class_ptr) [0x00000] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Interop.TypeManager.CreateInstance (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type targetType) [0x00054] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Lang.Object.GetObject (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type type) [0x000c1] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Lang.Object._GetObject[T] (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer) [0x00017] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Lang.Object.GetObject[T] (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer) [0x00000] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Java.Lang.Thread.get_DefaultUncaughtExceptionHandler () [0x0001e] in :0 \r\n05-06 15:44:39.638 E/mono    (25698):   at Android.Runtime.JNIEnv.Initialize (Android.Runtime.JnienvInitializeArgs* args) [0x00202] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698): [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Handle must be valid.\r\n05-06 15:44:39.639 E/mono-rt (25698): Parameter name: instance\r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Interop.JniEnvironment+InstanceMethods.CallObjectMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method) [0x00009] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Android.Runtime.JNIEnv.CallObjectMethod (System.IntPtr jobject, System.IntPtr jmethod) [0x0000e] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Interop.TypeManager.GetClassName (System.IntPtr class_ptr) [0x00000] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Interop.TypeManager.CreateInstance (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type targetType) [0x00054] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Lang.Object.GetObject (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer, System.Type type) [0x000c1] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Lang.Object._GetObject[T] (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer) [0x00017] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Lang.Object.GetObject[T] (System.IntPtr handle, Android.Runtime.JniHandleOwnership transfer) [0x00000] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Java.Lang.Thread.get_DefaultUncaughtExceptionHandler () [0x0001e] in :0 \r\n05-06 15:44:39.639 E/mono-rt (25698):   at Android.Runtime.JNIEnv.Initialize (Android.Runtime.JnienvInitializeArgs* args) [0x00202] in :0 \r\n05-06 15:44:39.677 I/ActivityManager( 1516): Process Notepad.Notepad (pid 25698) has died: fore TPSL(308,3204)\r\n```\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9585979401","Type":"PullRequestEvent","CreatedAt":"2019-05-08T12:46:57","Actor":"thaystg","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3080","RelatedDescription":"Opened pull request \"Fixing xabuild path on UsingYourBuild.md\" (#3080) at xamarin/xamarin-android","RelatedBody":"The path of generated xabuild was wrong."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9591105107","Type":"IssuesEvent","CreatedAt":"2019-05-09T04:13:41","Actor":"Mushtaq123","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6140","RelatedDescription":"Opened issue \"WCF service methods not connected with Xamarin.Forms app (Android, iOS)\" (#6140) at xamarin/Xamarin.Forms","RelatedBody":"Hi,\r\nI have created a WCF service and called the same from Xamarin Cross-Platform with Dot Net Standard 2 (UWP, iOS, Android), an app using Connected Service approach.\r\n\r\nI checked this service approach in UWP and it works fine. But in Android and iOS project, the service is not connected.\r\n\r\nConnected service call \r\n```\r\nIMobileservice mobileservice = new MobileserviceClient();\r\ntry\r\n{\r\n       ValidateCredentials validateCredentials = await mobileservice.ValidateLoginCredentialsAsync(_param);\r\n       label.Text = validateCredentials.p_UserGroupCodeDesc;\r\n}\r\ncatch (Exception ex)\r\n{\r\n\r\n}\r\n```\r\nAndroid runtime error after clicked button :\r\n\r\n> Unhandled Exception:\r\n> \r\n> System.ServiceModel.FaultException`1[[System.ServiceModel.ExceptionDetail, System.ServiceModel, Version=2.0.5.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]: Error in deserializing body of request message for operation 'GetData'. OperationFormatter encountered an invalid Message body. Expected to find node type 'Element' with name 'GetData' and namespace 'http://tempuri.org/'. Found node type 'Element' with name 'GetDataAsync' and namespace 'http://tempuri.org/'\r\n> \r\n\r\niOS runtime error after clicked button :\r\n\r\n> Unhandled Exception:\r\n> \r\n> System.InvalidOperationException: MonoTouch does not support dynamic proxy code generation. Override this method or its caller to return specific client proxy instance\r\n\r\nFunny thing is UWP work fine and return method string just fine.\r\nThis is my first experience to consume WCF in xamarin.forms and I feel maybe I do something wrong."},{"Id":"9591090240","Type":"IssuesEvent","CreatedAt":"2019-05-09T04:08:57","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6139","RelatedDescription":"Opened issue \"[Spec] Shell Hierarchical navigation \" (#6139) at xamarin/Xamarin.Forms","RelatedBody":"# Shell Hierarchical Navigation\r\n\r\nProvide a way to express hierarchical (drill down) navigation in Shell.\r\n\r\n# API\r\n\r\n```\r\n<DrillDownNavigation>\r\n    <ShellContent ContentTemplate=\"{}\">\r\n        <ShellContent ContentTemplate=\"{}\">\r\n            <ShellContent ContentTemplate=\"{}\">\r\n                <ShellContent ContentTemplate=\"{}\"/>\r\n            </ShellContent>\r\n        </ShellContent>\r\n    </ShellContent>\r\n</DrillDownNavigation>\r\n```\r\n\r\nAnd navigate via `Forward` and `Back` methods off of `Shell.Current.Navigation`.\r\n\r\n# Scenarios\r\n\r\nConsider an app like the Azure portal, it has deeply nested navigation routes.\r\n\r\nExample: `Home > All resources > davidortinau - Blobs > Share`\r\n\r\nConsider an app like iOS General Settings. It's a  list to a list to a list to details, and other variations of drill down.\r\n\r\nYes this can be achieved by managing your own `PushAsync` style navigation, but it would be desirable to manage this in Shell as well."},{"Id":"9590064094","Type":"PullRequestEvent","CreatedAt":"2019-05-08T23:15:44","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6081","RelatedDescription":"Merged pull request \"remove route params from shell\" (#6081) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nThis makes routescheme, shell.route, shell.routehost internal\r\n\r\nCurrently there is no functional purpose for exposing these APIs and there is a good chance we are just going to delete them. The purpose of this PR is to simplify down how you construct the shell and how you perform internal routing.  \r\n\r\n\r\n### API Changes ###\r\n\r\n Removed:\r\n - Shell.Route\r\n- Shell.RouteHost\r\n- Shell.Scheme\r\n \r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\nUsers will get an error if they've specified these values and they will need to update their routing code\r\n\r\n\r\n### Testing Procedure ###\r\nAll Unit tests pass so routing should still be intact\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9590062580","Type":"PullRequestEvent","CreatedAt":"2019-05-08T23:15:19","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6023","RelatedDescription":"Merged pull request \"[Shell] Add Tab bar and auto promote tabs to nearest TabBar\" (#6023) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Changes ###\r\n\r\nIf you specify Tabs without a container then they automatically get promoted to the nearest implicit TabBar.\r\n\r\nIf you specify a type as a TabBar it auto disables the Flyout Behavior when you are on that TabBar\r\n\r\n#### Example 1\r\n```xaml\r\n<Shell>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n</Shell>\r\n```\r\n\r\nbecomes\r\n```xaml\r\n<Shell>\r\n     <TabBar>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n         </Tab>\r\n          <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n     </TabBar>\r\n</Shell>\r\n```\r\n#### Example 2\r\n\r\n```xaml\r\n<Shell>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n<TabBar>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n</TabBar>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n</Shell>\r\n```\r\n\r\nbecomes\r\n```xaml\r\n<Shell>\r\n     <TabBar>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n     </TabBar>\r\n     <TabBar>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n     </TabBar>\r\n     <TabBar>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n        <Tab Title=\"Home\" Icon=\"home.png\">\r\n        </Tab>\r\n     </TabBar>\r\n</Shell>\r\n```\r\n\r\n### API Changes ###\r\n\r\n- Added Tab Bar alias for ShellItem which disables the flyout by default\r\n\r\n### Visual Changes ###\r\nDraft PR of being able to specify\r\n```xaml\r\n<Shell>\r\n   <Tab Title=\"Home\" Icon=\"home.png\">\r\n            <ShellContent>\r\n                <ContentPage></ContentPage>\r\n            </ShellContent>\r\n        </Tab>\r\n        <Tab Title=\"Library\" Icon=\"library.png\">\r\n            <ShellContent>\r\n                <ContentPage></ContentPage>\r\n            </ShellContent>\r\n        </Tab>\r\n        <Tab Title=\"Contact\" Icon=\"contact.png\">\r\n            <ShellContent>\r\n            <ContentPage></ContentPage>\r\n        </ShellContent>\r\n        </Tab>\r\n</Shell>\r\n```\r\n\r\nto render as one page\r\n\r\n![image](https://user-images.githubusercontent.com/5375137/56825909-e2caf880-6817-11e9-9548-73ba4c73c8db.png)\r\n\r\n"},{"Id":"9590058839","Type":"PullRequestEvent","CreatedAt":"2019-05-08T23:14:19","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5980","RelatedDescription":"Merged pull request \"Make Android CollectionView smarter about recycling elements/renderers\" (#5980) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nReuse template Views and Renderers in the Android CollectionView. Significantly reduces the number of allocations and calls to Activator.CreateInstance.\r\n\r\n### Issues Resolved ### \r\n\r\n- choppy scrolling because of GC delays\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nUnfortunately, no good way to automate testing for this right now. To test it, in Control Gallery navigate to CollectionView Gallery -> DataTemplate Galleries and run any of the examples; scroll around - the scrolling should be smooth (or at least, _smoother_).\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9589741672","Type":"IssuesEvent","CreatedAt":"2019-05-08T22:00:50","Actor":"lcm98","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6138","RelatedDescription":"Opened issue \"[Bug] DatePicker / TimePicker Unfocused Event Fired When Focused\" (#6138) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description\r\n\r\nAndroid 9.0 (Pie) - API 28 only.\r\n\r\nWhen a DatePicker is behind another element (hidden) the dialog for either the DatePicker or TimePicker is opened, the unfocused event from that picker is fired. \r\n\r\nIn this particular case, I am using the unfocused event of the DatePicker to focus on the TimePicker. The result is actually that as soon as the DatePicker calendar opens, the unfocused event instantly fires which then opens the TimePicker Clock overlayed on-top of the calendar.\r\n\r\nThis seems related to #5159 , except instead of the issue being that the dialog won't open at all, it opens and immediately fires the Unfocused event. I am not sure about the technicalities of the difference between something having IsVisible=True or Width=0 and Height=0, and having it hidden behind other elements, but this is the behavior that I am experiencing which is not consistent with any other Platform.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Have a DatePicker behind another Element\r\n2. Have handler attached to Unfocused Event of Date or Time Picker\r\n3. Click Picker\r\n\r\n### Expected Behavior\r\n\r\nUnfocused event is fired when dialog is closed.\r\n\r\n### Actual Behavior\r\n\r\nUnfocused event fires as soon as dialog opens\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin Forms v3.6.0.344457\r\n- Last known good version: Unknown - Believe related to Android 9 Version\r\n- IDE: VS 2017 v15.9.11\r\n- Platform Target Frameworks: \r\n  - Android: 9.0\r\n\r\n"},{"Id":"9588840229","Type":"PullRequestEvent","CreatedAt":"2019-05-08T19:28:50","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6137","RelatedDescription":"Opened pull request \"[Android] Fix WebView EnableZoomControls and DisplayZoomControls api\" (#6137) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe EnableZoomControls BP was missing the \"s\", making it impossible for XAML to pick it up.\r\n\r\nThe helper methods were supposed to set the values instead of return the values, so fixing that, too.\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #6132 \r\n- fixes #6130 \r\n\r\n### API Changes ###\r\n\r\n\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\n1. Open Issue 6132. Verify that the Zoom controls work and are displayed when you tap on the WebView.\r\n2. Open Issue 6130. Verify that the Zoom controls work and are displayed when you tap on the WebView.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9588691594","Type":"PullRequestEvent","CreatedAt":"2019-05-08T19:04:51","Actor":"jcmanke","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6136","RelatedDescription":"Opened pull request \"[Maps] Add polylines\" (#6136) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd the ability to draw polylines on a Map. This PR could also be expanded to include other shapes (polygons, circles) and using data templating to create the overlays. \r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #1673\r\n- fixes #5773\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - Maps\r\n   - `Polyline` class\r\n   - `public IList<Polyline> Map.Polylines { get; }`\r\n - Android MapRenderer\r\n   - `protected Android.Gms.Maps.Model.Polyline GetNativePolyline(Xamarin.Forms.Maps.Polyline polyline)`\r\n   - `protected Xamarin.Forms.Maps.Polyline GetPolylineFromNative(Android.Gms.Maps.Model.Polyline polyline)`\r\n   - `protected virtual PolylineOptions CreateNativePolyline(Xamarin.Forms.Maps.Polyline polyline)`\r\n   - `void PolylineOnPropertyChanged(object sender, PropertyChangedEventArgs e)`\r\n   - `void OnPolylineCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)`\r\n   - `void AddPolylines(IEnumerable<Xamarin.Forms.Maps.Polyline> polylines)`\r\n   - `void RemovePolylines(IEnumerable<Xamarin.Forms.Maps.Polyline> polylines)`\r\n - iOS MapRenderer\r\n   - `void OnPolylineCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)`\r\n   - `void AddPolylines(IEnumerable<Polyline> polylines)`\r\n   - `void RemovePolylines(IEnumerable<Polyline> polylines)`\r\n   - `void PolylineOnPropertyChanged(object sender, PropertyChangedEventArgs e)`\r\n   - `protected MKOverlayRenderer GetViewForOverlay(MKMapView mapview, IMKOverlay overlay)`\r\n   - `protected virtual MKPolylineRenderer GetViewForPolyline(MKPolyline mkPolyline)`\r\n - UWP MapRenderer\r\n   - `void OnPolylineCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)`\r\n   - `void LoadPolylines()`\r\n   - `void LoadPolyline(Polyline polyline)`\r\n   - `void RemovePolyline(Polyline polyline)`\r\n   - `void OnPolylinePropertyChanged(object sender, PropertyChangedEventArgs e)`\r\n   \r\nChanged:\r\n - Renamed `OnCollectionChanged` method to `OnPinCollectionChanged` in Android, iOS, and UWP MapRenderers\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nAdded Map Elements Gallery page to Control Gallery app. \r\n\r\n1. Click on the map to add a point to the end of the current polyline's Geopath. \r\n2. Click the Add Polyline button to start a new polyline. \r\n3. Click the Remove Polyline button to remove the current polyline and continue editing the previous polyline.\r\n4. Click the Change Stroke Color or Change Stroke Width button to change the respective properties on the current polyline.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9591153914","Type":"PullRequestEvent","CreatedAt":"2019-05-09T04:29:40","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6017","RelatedDescription":"Merged pull request \"[d16-2] [sampletester] Bump prebuilt-apps hash.\" (#6017) at xamarin/xamarin-macios","RelatedBody":"Bump prebuilt-apps hash to get fix for https://github.com/xamarin/prebuilt-apps/pull/31.\n\nBackport of #6015.\n\n/cc @rolfbjarne "},{"Id":"9587975621","Type":"PullRequestEvent","CreatedAt":"2019-05-08T17:15:17","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6020","RelatedDescription":"Opened pull request \"[XHarness] List the simulators and devices in the html.\" (#6020) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9587846094","Type":"PullRequestEvent","CreatedAt":"2019-05-08T16:54:51","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6019","RelatedDescription":"Opened pull request \"[VSTS] Ensure that the corrent tests are run on devices.\" (#6019) at xamarin/xamarin-macios","RelatedBody":"The change allows to state the tests that have to be ran. ATM with these\r\nchanges, the vsts pipeline must add the following to the env vars:\r\n\r\n* tvOS device pipelines: Must add 'run-tvos-tests' to the labels.\r\n* iOS device pipelines: Must add 'run-ios-tests' to the labels.\r\n\r\nThis will ensure that only the tests for the devices are ran and if the\r\ntests pass we get a green build with no unexpected skips."},{"Id":"9587785243","Type":"IssuesEvent","CreatedAt":"2019-05-08T16:45:10","Actor":"msasso69","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/6018","RelatedDescription":"Opened issue \"[Mac] hanged in InvokeOnMainThread\" (#6018) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\nMy application has several background threads created by Parallel.ForEach that update the same controls in the UI using at the end NSObject.InvokeOnMainThread.\r\nAt the begin all is almost fine (I say almost because sometimes switching to the ui thread takes several seconds), but after some while all my threads get stuck in:\r\n```\r\nMessaging.void_objc_msgSend_IntPtr_IntPtr_bool (d.Handle, Selector.PerformSelectorOnMainThreadWithObjectWaitUntilDoneHandle, \r\n\t\t                                                                NSDispatcher.Selector.Handle, d.Handle, true);\r\n``` \r\nIs this method thread safe?\r\nWhy switching to the ui thread takes sometimes so much time? I assume that my background threads might not give the ui thread a chance to run so I placed some Thread.Sleep to pause my threads, but it did not help. Is it possible to give the ui thread a higher priority compared to the threads launched with Parallel.ForEach?\r\n\r\nThanks for your support.\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.7.4 (build 1)\r\nInstallation UUID: e409d373-5fb2-462c-80fe-83508116ec94\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\nMono Framework MDK\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\nNuGet\r\nVersion: 4.8.0.5385\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.7\r\n\t2.1.2\r\n\t2.0.5\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.503/Sdks\r\nSDK Versions:\r\n\t2.1.503\r\n\t2.1.302\r\n\t2.1.4\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nUpdater\r\nVersion: 11\r\n\r\nApple Developer Tools\r\nXcode 9.3 (14154)\r\nBuild 9E145\r\n\r\nXamarin.Android\r\nNot Installed\r\n\r\nMicrosoft Mobile OpenJDK\r\nJava SDK: \r\nNo Java runtime present, requesting install.\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nAndroid Device Manager\r\nVersion: 7.7.5.0\r\nHash: 06ceaea1\r\n\r\nXamarin Inspector\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\nXamarin.Mac\r\nVersion: 5.2.1.13 (Visual Studio Community)\r\nHash: a4332c90\r\nBranch: \r\nBuild date: 2019-01-11 13:08:10-0500\r\n\r\nXamarin.iOS\r\nXamarin.iOS not installed.\r\nCan't find mtouch or the Version file at /Library/Frameworks/Xamarin.iOS.framework/Versions/Current.\r\n\r\nBuild Information\r\nRelease ID: 707040001\r\nGit revision: 2a4679454f31c8bb887cfd181ea133c9149d3cad\r\nBuild date: 2019-01-30 16:18:21+00\r\nBuild branch: release-7.7.4\r\nXamarin extensions: c8b4305fd4c60b9c25947072eb150fdc3a5aa2b5\r\n\r\nOperating System\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\nEnabled user installed extensions\r\nEto.Forms Support Addin 2.4.9999.0\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1125851046939697152","CreatedAt":"2019-05-07T19:53:01+00:00","UserScreenname":"xamarinhq","Text":"The @XamarinU team has joined the #MicrosoftLearn family! Find Xamarin content in Microsoft Learn today at… https://t.co/gWKXwsPUuk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":127,"FavoriteCount":60,"RawContent":null},{"Id":"1125402214661382146","CreatedAt":"2019-05-06T14:09:31+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin Team at Microsoft Build 2019.\nWe have a packed schedule for Xamarin developers.\nCheck out the sche… https://t.co/fFz1nlYVTp","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":64,"FavoriteCount":26,"RawContent":null},{"Id":"1123980358289100801","CreatedAt":"2019-05-02T15:59:34+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8zSXL","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":7,"RawContent":null},{"Id":"1123639473726685184","CreatedAt":"2019-05-01T17:25:01+00:00","UserScreenname":"xamarinhq","Text":"On this week's Xamarin.Essential API of the week, we take a look at the Detect Shake API to help you detect when a… https://t.co/rrPQPNYeFY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1123274432565452802","CreatedAt":"2019-04-30T17:14:28+00:00","UserScreenname":"xamarinhq","Text":"Learn about new, exciting releases and tools to help jump start your next mobile development project by networking… https://t.co/9YpJzAFHml","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":29,"FavoriteCount":11,"RawContent":null},{"Id":"1121888817483530243","CreatedAt":"2019-04-26T21:28:32+00:00","UserScreenname":"xamarinhq","Text":"This week, @JamesMontemagno &amp; Alexandre Costa show us the importance of making mobile apps accessible as they talk… https://t.co/7qsj6o1VYm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":15,"RawContent":null},{"Id":"1121502644189716481","CreatedAt":"2019-04-25T19:54:01+00:00","UserScreenname":"xamarinhq","Text":"We're excited to announce a new inclusion to our Xamarin Showcase gallery... let's take a look at the latest custom… https://t.co/mC9hK1Vmol","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":63,"FavoriteCount":25,"RawContent":null},{"Id":"1120428795440267265","CreatedAt":"2019-04-22T20:46:56+00:00","UserScreenname":"xamarinhq","Text":"When it comes to application size, bigger is not better. It’s one of the key factors a user takes into consideratio… https://t.co/K3s0FDTdqV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":39,"RawContent":null},{"Id":"1120357094811680768","CreatedAt":"2019-04-22T16:02:01+00:00","UserScreenname":"xamarinhq","Text":"Say \"Hello!\" to the new Xamarin You Tube Channel.\nCheck it out, and don't forget to subscribe.… https://t.co/KSNaDZg4J0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":118,"FavoriteCount":48,"RawContent":null},{"Id":"1119296356651339777","CreatedAt":"2019-04-19T17:47:01+00:00","UserScreenname":"xamarinhq","Text":"During March, you made submissions to our Visual Challenge. Your feedback and samples have been valuable. ...but wa… https://t.co/S2oMKbh17G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":75,"FavoriteCount":34,"RawContent":null},{"Id":"1119279495238823937","CreatedAt":"2019-04-19T16:40:01+00:00","UserScreenname":"xamarinhq","Text":"We're re-launching our Xamarin Developers YouTube channel! ...find fresh content on building amazing mobile apps di… https://t.co/SDfbKwLV1u","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":44,"RawContent":null},{"Id":"1118990448654200832","CreatedAt":"2019-04-18T21:31:27+00:00","UserScreenname":"xamarinhq","Text":"Find fresh content on building amazing mobile apps directly from the Xamarin team @ Microsoft.\n\nIntroducing the New… https://t.co/S4JC1oCDJU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":117,"FavoriteCount":42,"RawContent":null},{"Id":"1117944446899896322","CreatedAt":"2019-04-16T00:15:01+00:00","UserScreenname":"xamarinhq","Text":"We're getting ready for macOS’s Hardened Runtime and Notary. Learn how to get started; from configuring your entitl… https://t.co/p4W2CszalI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":26,"FavoriteCount":14,"RawContent":null},{"Id":"1116762533346652160","CreatedAt":"2019-04-12T17:58:31+00:00","UserScreenname":"xamarinhq","Text":"There’re tons in store for you in the latest podcast... @codemillmatt and @JamesMontemagno rundown the new features… https://t.co/1TlcD9N8yV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":38,"FavoriteCount":18,"RawContent":null},{"Id":"1115620503232962560","CreatedAt":"2019-04-09T14:20:29+00:00","UserScreenname":"xamarinhq","Text":"Under the Hood: Take an inside look at #DevOps at Microsoft, in this webinar with @abelsquidhead and @Applitools on… https://t.co/qgf7T5OPvM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":38,"FavoriteCount":23,"RawContent":null},{"Id":"1115323538091720704","CreatedAt":"2019-04-08T18:40:27+00:00","UserScreenname":"xamarinhq","Text":"Say 'Hello' to WorkManager - a library that makes it easy to schedule deferrable, asynchronous tasks even if the ap… https://t.co/xOYvf5E0K0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":106,"FavoriteCount":47,"RawContent":null},{"Id":"1113833658920472576","CreatedAt":"2019-04-04T16:00:12+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1113554700702449664","CreatedAt":"2019-04-03T21:31:44+00:00","UserScreenname":"xamarinhq","Text":"Last week we issued a challenge to the Xamarin community to use the new Material Design controls with Visual by rep… https://t.co/JpaGEihELG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":147,"FavoriteCount":54,"RawContent":null},{"Id":"1113137014768066560","CreatedAt":"2019-04-02T17:52:00+00:00","UserScreenname":"xamarinhq","Text":"News from the #VisualStudio 2019 Launch Event. See what’s new for #Xamarin Developers in #VS2019,… https://t.co/ylrA7eBnQ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":149,"FavoriteCount":72,"RawContent":null},{"Id":"1112804184166944768","CreatedAt":"2019-04-01T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Learn about the new, exciting releases and tooling to help jumpstart your next mobile development project.\n\nJoin us… https://t.co/4AhXCdCrB0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":27,"FavoriteCount":13,"RawContent":null}]}},"RunOn":"2019-05-09T05:30:53.200618Z","RunDurationInMilliseconds":2156}