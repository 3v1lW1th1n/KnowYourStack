{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7160589291","Type":"PullRequestEvent","CreatedAt":"2018-01-28T02:39:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16056","RelatedDescription":"Merged pull request \"Update CoreClr to preview2-26128-01 (master)\" (#16056) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7160501762","Type":"PullRequestEvent","CreatedAt":"2018-01-28T01:25:15","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16056","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26128-01 (master)\" (#16056) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7160423578","Type":"PullRequestEvent","CreatedAt":"2018-01-28T00:21:01","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16055","RelatedDescription":"Opened pull request \"Add ActivityId Support to EventPipe\" (#16055) at dotnet/coreclr","RelatedBody":"Adds full support for activity ID tracking to EventPipe.  This change includes:\r\n\r\n - Removal of the previous managed ThreadStatic activity id.\r\n - Per-thread activity ID.\r\n - Consumption of the ID if it is present and one isn't specified to WriteEvent.\r\n - Plumbing through EventSource.\r\n - Functional test.\r\n\r\nFixes #15302.\r\ncc: @xiaomi7732"},{"Id":"7160399650","Type":"PullRequestEvent","CreatedAt":"2018-01-28T00:02:13","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15961","RelatedDescription":"Merged pull request \"Updates `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` to have the appropriate packing.\" (#15961) at dotnet/coreclr","RelatedBody":"As per the discussion in https://github.com/dotnet/coreclr/issues/15943.\r\n\r\nThis updates the VM to specially handle `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` so that they have the requisite packing levels as described in the various ABI specifications.\r\n\r\nUnlike several of the other fundamental data types, these types are required to have a specific packing and are expected to use that packing regardless of the packing of the parent structure.\r\n\r\n`LayoutKind.Auto` hasn't been handled yet as that is a bit more complicated."},{"Id":"7160120119","Type":"PullRequestEvent","CreatedAt":"2018-01-27T20:52:05","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16054","RelatedDescription":"Opened pull request \"Use EventSource guid ctor for ArrayPoolEventSource\" (#16054) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/coreclr/issues/15954"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7160494187","Type":"IssuesEvent","CreatedAt":"2018-01-28T01:19:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8490","RelatedDescription":"Closed issue \"asp.net mvc template app crashes with exceptions on raspian ARM\" (#8490) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n    1. create example mvc app with \"dotnet new mvc -n test\"\r\n    2. Disable HttpsRedirect comment out (//app.UseHttpsRedirection();)\r\n    3. Disable Cookie Policies comment out (//app.UseCookiePolicy();)\r\n    4. publish with \"dotnet publish -r linux-arm\" and deploy it to the raspberry pi\r\n    5. run app on raspberry device with ./test\r\n    6. place a webrequest from any browser to the server\r\n\r\n\r\n## Expected  behavior\r\nMVC Example App shows up in browser window\r\n\r\n## Actual behavior\r\n- Exceptions get thrown.\r\n\r\n- Even without modifying the example app (not deactivating https) the app is throwing exceptions on requests.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nProduct Information:\r\nVersion: 2.2.0-preview1-007947\r\nCommit SHA-1 hash: e8f7ddd01b\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.10586\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.2.0-previe\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\nVersion : 2.1.0-preview1-26116-04\r\nBuild : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n\r\n\r\n\r\n[Exception.log](https://github.com/dotnet/cli/files/1670022/Exception.log)\r\n\r\n\r\n"},{"Id":"7159263997","Type":"IssuesEvent","CreatedAt":"2018-01-27T11:32:06","Actor":"Buzze11","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8490","RelatedDescription":"Opened issue \"asp.net mvc template app crashes with exceptions\" (#8490) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n    1. create example mvc app with \"dotnet new mvc -n test\"\r\n    2. Disable HttpsRedirect comment out (//app.UseHttpsRedirection();)\r\n    3. Disable Cookie Policies comment out (//app.UseCookiePolicy();)\r\n    4. publish with \"dotnet publish -r linux-arm\" and deploy it to the raspberry pi\r\n    5. run app on raspberry device with ./test\r\n    6. place a webrequest from any browser to the server\r\n\r\n\r\n## Expected  behavior\r\nMVC Example App shows up in browser window\r\n\r\n## Actual behavior\r\n- Exceptions get thrown.\r\n\r\n- Even without modifying the example app (not deactivating https) the app is throwing exceptions on requests.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nProduct Information:\r\nVersion: 2.2.0-preview1-007947\r\nCommit SHA-1 hash: e8f7ddd01b\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.10586\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.2.0-previe\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\nVersion : 2.1.0-preview1-26116-04\r\nBuild : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n\r\n\r\n\r\n[Exception.log](https://github.com/dotnet/cli/files/1670022/Exception.log)\r\n\r\n\r\n"},{"Id":"7158605785","Type":"PullRequestEvent","CreatedAt":"2018-01-27T02:20:50","Actor":"vijayrkn","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8489","RelatedDescription":"Opened pull request \"Updating the WebSdk DependencyVersion to support local build\" (#8489) at dotnet/cli","RelatedBody":"Package location: https://dotnet.myget.org/feed/dotnet-web/package/nuget/microsoft.net.sdk.web\r\n\r\n@mlorbetske @livarcocc @seancpeters "},{"Id":"7158241140","Type":"PullRequestEvent","CreatedAt":"2018-01-26T23:24:59","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8488","RelatedDescription":"Opened pull request \"Repairing the first pass call to 'dotnet msbuild'; CLI:master\" (#8488) at dotnet/cli","RelatedBody":"'$ExtraParametersNoTargets', which is used on the first pass call to 'dotnet msbuild', currently is of type 'string' not 'List'1' as is '$ExtraParameters'. This results in the non-honoring of any parameter other than parameter one. \r\n\r\nSolution: Make a copy of '$ExtraParameters' to '$ExtraParametersNoTargets' of type 'List'1' and remove the targets from the list.\r\n\r\n\r\n\r\n"},{"Id":"7158161277","Type":"IssuesEvent","CreatedAt":"2018-01-26T22:58:22","Actor":"danroth27","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8487","RelatedDescription":"Opened issue \"Provide a way to launch the browser when running `dotnet run`\" (#8487) at dotnet/cli","RelatedBody":"It would be great if there was a way to run an ASP.NET Core app from the command line using `dotnet run` and have the default browser launch at the right URL. CLIs for other platforms let you do this. For example, with the Angular CLI you can do `ng serve --open` to both run the app and open the default browser. \r\n\r\nThis would be particularly useful for projects that you created using VS, which generate random ports for the server URLs. \r\n\r\nThere are already `launchBrowser` and `launchUrl` properties the launch profiles in `launchSettings.json` that let you specify that you want this behavior in VS. \r\n\r\nWe would also want this to work with `dotnet watch` without having the browser pop up multiple times, which may require some coordination.\r\n\r\n@mlorbetske @natemcmaster @livarcocc @KathleenDollard \r\n"},{"Id":"7158152916","Type":"PullRequestEvent","CreatedAt":"2018-01-26T22:55:56","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8476","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4862 into cli\" (#8476) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4862 into cli release/2.1.1xx branch"},{"Id":"7158112448","Type":"PullRequestEvent","CreatedAt":"2018-01-26T22:44:04","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8486","RelatedDescription":"Opened pull request \"Add visibility option to `install tool` command.\" (#8486) at dotnet/cli","RelatedBody":"This PR adds the `--visibility` option to the `install tool` command.\r\n\r\nNuGet output is now controllable by the user and defaults to being `quiet`.\r\nThis enables users to see warnings from NuGet that otherwise would be swallowed\r\nunless NuGet returned a non-zero exit code.\r\n\r\nAs a byproduct of this change, the exception handling and error messages\r\nrelated to obtaining tool packages was retooled. We no longer display\r\n`install tool` command line help for installation failures, as it should only\r\nbe displayed for command line syntax errors.\r\n\r\nFixes #8456.\r\n"},{"Id":"7157601623","Type":"IssuesEvent","CreatedAt":"2018-01-26T20:30:18","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8485","RelatedDescription":"Opened issue \"Cannot install prereleased tool package from dotnet-install-tool without specifying the exact version\" (#8485) at dotnet/cli","RelatedBody":"To install a prerelease version of a CLI tool, users must know the exact version they want to install. This means they have to open a browser to nuget.org or myget.org to find the package.\r\n\r\nFor example, this is the console output for dotnet-watch\r\n```\r\n> dotnet install tool --global dotnet-watch --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\nInstall failed. Failed to download package:\r\nNuGet returned:\r\n\r\nFailed to restore package.\r\nWorkingDirectory:\r\nArguments: restore C:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json --runtime win10-x64 /p:BaseIntermediateOutputPath=\\\"C:\\Users\\namc\\.dotnet\\tools\\dotnet-watch\\gx5ifack.dyr\\\"\r\nOutput:   Restoring packages for C:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj...\r\nC:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj : error NU1103: Unable to find a stable package dotnet-watch with version\r\n\r\nC:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj : error NU1103:   - Found 124 version(s) in https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json [ Nearest version: 2.1.0-preview1-27934 ]\r\nC:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj : error NU1103:   - Found 1 version(s) in C:\\Users\\namc\\.dotnet\\x64\\sdk\\NuGetFallbackFolder [ Nearest version: 2.1.0-preview1-28124 ]\r\n  Restore failed in 680.98 ms for C:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj.\r\n\r\nUsage: dotnet install tool [options] <PACKAGE_ID>\r\n\r\nArguments:\r\n  <PACKAGE_ID>   NuGet Package Id of the tool to install.\r\n\r\nOptions:\r\n  -g, --global        Install user wide.\r\n  --version           Version of the tool package in NuGet.\r\n  --configfile        The NuGet configuration file to use.\r\n  --source <SOURCE>   Specifies a NuGet package source to use during installation.\r\n  -f, --framework     The target framework to install the tool for.\r\n  -h, --help          Show help information.\r\n```\r\n\r\nThis is the console output when trying to specify `--version 2.1.0-*`\r\n```\r\n> dotnet install tool --global dotnet-watch --version 2.1.0-* --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\nSystem.ArgumentException: Illegal characters in path.\r\nParameter name: path\r\n   at System.IO.Path.GetFullPath(String path)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at Microsoft.DotNet.ToolPackage.ToolPackageObtainer.EnsureDirectoryExists(DirectoryPath path)\r\n   at Microsoft.DotNet.ToolPackage.ToolPackageObtainer.CreateIndividualToolVersionDirectory(String packageId, PackageVersion packageVersion)\r\n\r\n   at Microsoft.DotNet.ToolPackage.ToolPackageObtainer.ObtainAndReturnExecutablePath(String packageId, String packageVersion, Nullable`1 nugetconfig, String targetframework, String source)\r\n   at Microsoft.DotNet.Tools.Install.Tool.InstallToolCommand.ObtainPackage(DirectoryPath executablePackagePath, DirectoryPath offlineFeedPath)\r\n   at Microsoft.DotNet.Tools.Install.Tool.InstallToolCommand.Execute()\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.RunCommand(String[] args)\r\n   at Microsoft.DotNet.Tools.Install.InstallCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n*Ideas*\r\n\r\n- Support wildcards `--version 2.1.0-*`\r\n- Support a `--prerelease` flag\r\n\r\ncc @KathleenDollard \r\n\r\n\r\n"},{"Id":"7157160531","Type":"PullRequestEvent","CreatedAt":"2018-01-26T18:53:41","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8484","RelatedDescription":"Closed pull request \"Merge install scripts from master to release/2.0.0\" (#8484) at dotnet/cli","RelatedBody":"Typically, CLI:release/2.0.0 holds the latest version of the install scripts. Recently, with the introduction of Alpine, et al, CLI:master holds the latest versions. This will update release/2.0.0\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7159717258","Type":"PullRequestEvent","CreatedAt":"2018-01-27T16:48:11","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/634","RelatedDescription":"Opened pull request \"Add MarshallAs attributes to IStream\" (#634) at dotnet/standard","RelatedBody":"Upon further testing I realized that my previous IStream fix was insufficient. This adds back the required 'MarshalAs' attributes to finish the scenario."},{"Id":"7158290796","Type":"PullRequestEvent","CreatedAt":"2018-01-26T23:43:37","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/631","RelatedDescription":"Merged pull request \"Fix marshalling declarations of System.Runtime.InteropServices.ComTypes.IStream in netstandard reference dll\" (#631) at dotnet/standard","RelatedBody":"The IStream definition in contract definition of System.Runtime.InteropServices.ComTypes had incorrect marshalling declarations which meant that COM marshalling generator tools would output incorrect code.\r\n\r\nThis corrects the definition.\r\n\r\nNote: There are other types in the ComTypes namespace that also have incorrect marshalling. But from what I could tell, none of them looked like they would be relevant in X-Plat scenarios, and fixing them was somewhat involved and I didn't have a good way to test them. So I left them alone."},{"Id":"7157638186","Type":"PullRequestEvent","CreatedAt":"2018-01-26T20:39:30","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/633","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02426-04 (master)\" (#633) at dotnet/standard","RelatedBody":""},{"Id":"7157065182","Type":"IssuesEvent","CreatedAt":"2018-01-26T18:31:36","Actor":"mquelcutti","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/632","RelatedDescription":"Opened issue \"DataAnnotaions in .net core misbehaving\" (#632) at dotnet/standard","RelatedBody":"Hi the range for dataannotaions does not seem to work or the (0) for the display attib correctly if you put in range of 1 250 it always errors after you enter any chars. Additionally if you try to use the {0} {1} {2} the param (0) never shows the display attrib. The {0] is puling in min length and {1) max length and you cant get the display name  eg \r\n\r\n      [Required(ErrorMessage =\"{0} is required\")]\r\n\r\n        [Display(Name = \"Message\")]\r\n\r\n        [Range(1,250, ErrorMessage = \"{0) should be between {1} and {2}\")]\r\n\r\n        public string Message { get; set; }\r\n\r\nas you type in the text area and tab off it errors with \r\n\r\n1 should be between 250 and {2}:\r\n\r\nbut i would expect is 'Message should be between 1 and 250'\r\n\r\nbut only error if nothing is in the text area and or max has exceed not if the range of text is correct\r\n\r\nEdit (0)"},{"Id":"7156541792","Type":"PullRequestEvent","CreatedAt":"2018-01-26T16:37:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/630","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02425-02 (master)\" (#630) at dotnet/standard","RelatedBody":""},{"Id":"7154108089","Type":"PullRequestEvent","CreatedAt":"2018-01-26T06:36:12","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/631","RelatedDescription":"Opened pull request \"Fix marshalling declarations of System.Runtime.InteropServices.ComTypes.IStream in netstandard reference dll\" (#631) at dotnet/standard","RelatedBody":"The IStream definition in contract definition of System.Runtime.InteropServices.ComTypes had incorrect marshalling declarations which meant that COM marshalling generator tools would output incorrect code.\r\n\r\nThis corrects the definition.\r\n\r\nNote: There are other types in the ComTypes namespace that also have incorrect marshalling. But from what I could tell, none of them looked like they would be relevant in X-Plat scenarios, and fixing them was somewhat involved and I didn't have a good way to test them. So I left them alone."},{"Id":"7151351258","Type":"PullRequestEvent","CreatedAt":"2018-01-25T17:13:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/630","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02425-01 (master)\" (#630) at dotnet/standard","RelatedBody":""},{"Id":"7149575857","Type":"IssuesEvent","CreatedAt":"2018-01-25T11:27:48","Actor":"archanasoni","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/629","RelatedDescription":"Opened issue \"Question:Is there a common api to load unmanaged dll in .net standard 2.0 ?\" (#629) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nWe're working to have .net standard 2.0 support for IBM .Net Provider. We have dependency on unmanaged\\native dll and currently we are loading it via LoadUnmanagedDllFromPath(..) from System.Runtime.Loader pkg.\r\nWe want our package to work with Full Framework as well.. Since System.Runtime.Loader pkg do not support FullFramework, we need to figure out alternate way of loading unmanaged dll.\r\nOne way we could see using  DllImport.. or Platform invoke. But in this case we have to deal with Linux and OSX. Which we are trying to avoid..  \r\nOur question are-\r\n1. Is there a way or common api across the platforms to load unmanaged dll in .Net standard 2.0\r\n2. What are the best way to Handle\\load unmanaged dll ?\r\n\r\nWarm Regards,\r\nArchana"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7160651255","Type":"IssuesEvent","CreatedAt":"2018-01-28T03:33:29","Actor":"MhAllan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26617","RelatedDescription":"Opened issue \"System.Net.WebSocket ReceiveAsync reads wrongly when buffer is smaller than whole message\" (#26617) at dotnet/corefx","RelatedBody":"I am using websockets sending 1046 bytes using SendAsync, while the receiving is using buffer of 1024 which is 22 byte less than the whole message.\r\n\r\nI suppose I can do a loop where first round reads 1024 byte with WebSocketReceiveResult.EndOfMessage is false, then receive 22 byte with WebSocketReceiveResult.EndOfMessage is true. but that's not what actually happens, what happens is that the first round is correct, the second round it receives 22 byte but the WebSocketReceiveResult.EndOfMessage is false and the loop continues endlessly reading 22 bytes (all zeros). using manual bytes counts to break the loop instead of WebSocketReceiveResult.EndOfMessage flag doesn't help as the socket keeps 22 byte of zeros forever so next messages won't succeed\r\n\r\n```CSharp\r\ndo\r\n{\r\n    var segment = new ArraySegment<byte>(receiveBuffer);\r\n    result = await _webSocket.ReceiveAsync(segment, cts.Token);\r\n    await ms.WriteAsync(receiveBuffer, 0, result.Count);\r\n}\r\nwhile (!result.EndOfMessage)\r\n```\r\n\r\nTesting environment\r\n- Local machine connection\r\n- Windows 10 x64\r\n- Visual studio 2017\r\n- .Net Standard 2\r\n"},{"Id":"7160621934","Type":"IssuesEvent","CreatedAt":"2018-01-28T03:08:10","Actor":"SinnersSumit","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26616","RelatedDescription":"Opened issue \"Naming decision behind ref structs\" (#26616) at dotnet/corefx","RelatedBody":"I am confused as to why the new stack-only structs are called `ref struct`. I understand the desire to reuse keywords, but why are they not titled `stackalloc struct` instead? They are after all objects which must never leave the stack, and I think `ref` would tend to imply the opposite. I understand that this is past the point where it can be changed, but I would still like to know why `ref struct` was chosen."},{"Id":"7160330055","Type":"PullRequestEvent","CreatedAt":"2018-01-27T23:11:56","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26596","RelatedDescription":"Merged pull request \"Make sure HttpListenerContext will not deallocate twice\" (#26596) at dotnet/corefx","RelatedBody":"Under certain stress conditions, HttpListener.EndGetContext (GetContextAsync) will throw NullReferenceException\r\nas it tries to deallocate an internal HttpListenerContext object twice while processing authentication.\r\nThis fix ensures that the code will not deallocate twice.\r\n\r\nI have verified that the issue will repro on .NET Core 2.0, but I didn't ported the .NET Framework stress test, \r\nbecause the test may regress networking CI runs. It is ignored on .NET Framework test run as well\r\n`[Ignore] // TODO: Failed with System.TimeoutException when running on dev machine.`\r\n\r\nThis issue was reported in internal bug 200343."},{"Id":"7160096963","Type":"IssuesEvent","CreatedAt":"2018-01-27T20:40:24","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26615","RelatedDescription":"Opened issue \"NetFX Failing CI for System.Data.SqlClient.Tests\" (#26615) at dotnet/corefx","RelatedBody":"E.g. https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/7466/console https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/7464/console and https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/7465/console\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7160484245","Type":"PullRequestEvent","CreatedAt":"2018-01-28T01:10:49","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24186","RelatedDescription":"Merged pull request \"Allow resolving mscorlib with different assembly version numbers\" (#24186) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nNavigate to Decompiled Sources cannot resolve **mscorlib** when the target of a navigation operation references **netstandard**. This causes cascading failures in the decompilation process leading to unusable output.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #24178\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow. The original cause of the problem and dependency on assembly unification is not well understood, but this change has been scoped to only impact **mscorlib**, which ILSpy assumes is always available.\r\n\r\n### Performance impact\r\n\r\nNo performance change except in cases where the new behavior is required for correctness.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThe behavior was discovered early in this new feature, but remained uncorrected while we attempted to find a stable long-term resolution.\r\n\r\n### How was the bug found?\r\n\r\nNew feature testing.\r\n\r\n### Test documentation updated?\r\n\r\nA manual test case was added for this scenario."},{"Id":"7160095952","Type":"PullRequestEvent","CreatedAt":"2018-01-27T20:39:48","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24494","RelatedDescription":"Opened pull request \"NormalizeWhitespace: no need for space after colon in interpolation format clause\" (#24494) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nInvoke `NormalizeWhitespace` on string interpolation with format, such as `:N`. No space should be injected after the colon.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/24454"},{"Id":"7160089096","Type":"IssuesEvent","CreatedAt":"2018-01-27T20:35:17","Actor":"carlreinke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24493","RelatedDescription":"Opened issue \"CSC doesn't care if struct-type out parameter not assigned if compiling with /nostdlib+\" (#24493) at dotnet/roslyn","RelatedBody":"**Version Used**: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nC:\\temp>type Program.cs\r\nclass C\r\n{\r\n    static bool M( out System.Collections.Generic.KeyValuePair<byte, byte> x )\r\n    {\r\n        return false;  // No error here!?\r\n    }\r\n}\r\n\r\nC:\\temp>csc.exe /out:Test.dll /target:library Program.cs\r\nMicrosoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nProgram.cs(5,9): error CS0177: The out parameter 'x' must be assigned to before control leaves the current method\r\n\r\nC:\\temp>csc.exe /nostdlib+ /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\System.Runtime.dll\" /out:Test.dll /target:library Program.cs\r\nMicrosoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\r\nC:\\temp>\r\n```\r\n\r\n**Expected Behavior**: Show error message and fail to compile.\r\n\r\n**Actual Behavior**: Compilation succeeds.\r\n"},{"Id":"7160012478","Type":"PullRequestEvent","CreatedAt":"2018-01-27T19:47:17","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24492","RelatedDescription":"Opened pull request \"Add test for override completion with in parameter\" (#24492) at dotnet/roslyn","RelatedBody":"Test-only change\r\n\r\nVerifies https://github.com/dotnet/roslyn/issues/24490\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7159494865","Type":"PullRequestEvent","CreatedAt":"2018-01-27T14:25:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5296","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5296) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7159332089","Type":"PullRequestEvent","CreatedAt":"2018-01-27T12:26:49","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5297","RelatedDescription":"Opened pull request \"[WIP] Add support for building wasm on OSX\" (#5297) at dotnet/corert","RelatedBody":"Work in progress for making it possible to build wasm on OSX host.\r\n\r\nSpun off from this issue:\r\nhttps://github.com/dotnet/corert/issues/4508"},{"Id":"7158916786","Type":"PullRequestEvent","CreatedAt":"2018-01-27T06:36:41","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5296","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5296) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7158839453","Type":"IssuesEvent","CreatedAt":"2018-01-27T05:28:49","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1453","RelatedDescription":"Closed issue \"GetFileDependsOnNETStandard holds handles to assemblies after it returns\" (#1453) at dotnet/sdk","RelatedBody":"I believe this is the root cause of https://github.com/NuGet/Home/issues/5609.\r\n\r\nI've been looking at this with @mishra14. \r\n\r\nIt appears that [GetFileDependsOnNETStandard](https://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/GetDependsOnNETStandard.netstandard.cs#L14), introduced to support .NET Standard 2.0 in VS 15.3, holds locks on files longer than it should.\r\n\r\nIt [appears](https://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/GetDependsOnNETStandard.net46.cs#L130) to close the handle to the files it's inspecting, but we can observe through the debugger that they don't get closed immediately--stepping over that line and running a `handle.exe` search shows the handle still open.\r\n\r\nWhen `devenv.exe` is started from an environment with `set ImplicitlyExpandNETStandardFacades=false`, project creation succeeds. That property [disables calling `GetDependsOnNETStandard`](https://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/msbuildExtensions/Microsoft/Microsoft.NET.Build.Extensions/Microsoft.NET.Build.Extensions.NETFramework.targets#L24)."},{"Id":"7158828091","Type":"IssuesEvent","CreatedAt":"2018-01-27T05:18:28","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1554","RelatedDescription":"Closed issue \"InvalidOperationException: Cannot find compilation library location for package\" (#1554) at dotnet/sdk","RelatedBody":"I am working on asp.net core 2.0  and stuck on above issue .i have added class library using services.AddMvc().AddApplicationPart  and return view from class library project\r\n\r\n\r\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List<string> assemblies)\r\n\r\n\r\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart+<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n\r\n\r\nSystem.Linq.Enumerable+SelectManySingleSelectorIterator.MoveNext()\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable<ApplicationPart> parts, MetadataReferenceFeature feature)\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature<TFeature>(TFeature feature)\r\n\r\n\r\nMicrosoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n\r\n\r\n"},{"Id":"7158820546","Type":"IssuesEvent","CreatedAt":"2018-01-27T05:11:33","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1906","RelatedDescription":"Closed issue \".NET Core can't build AnyCPU exes\" (#1906) at dotnet/sdk","RelatedBody":"(I may be misunderstanding how things are supposed to work here; apologies if this is more of a question than a bug.)\r\n\r\nConsider the following project file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net47</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n    <RuntimeIdentifier>win</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis project builds/runs correctly and generates an AnyCPU exe. Now change the target framework to .NET Core:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n    <RuntimeIdentifier>win</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis project generates a build error:\r\nProject is targeting runtime 'win' but did not resolve any runtime-specific packages for the 'Microsoft.NETCore.App' package.  This runtime may not be supported by .NET Core.\r\n\r\nIf RuntimeIdentifier is win-x86 or win-x64, it builds, but at publish time I suspect (though couldn't confirm) that the assemblies it generates are not AnyCPU, even though the Platform in the project file was explicitly AnyCPU.\r\n\r\nI believe .NET Core still supports AnyCPU for DLLs. But does it really support AnyCPU for EXEs? It looks like today there isn't a clear answer - you can say you're building an AnyCPU exe, but you don't actually get an exe unless you do publish on a Self-Contained Deployment by using a RuntimeIdentifier, and no AnyCPU RuntimeIdentifier (aka just \"win\"?) is currently supported.\r\n\r\nHow should this work? Should .NET Core allow creating AnyCPU EXEs? If not, should the build generate an error when OutputType=Exe and Platform=AnyCPU?"},{"Id":"7158811038","Type":"PullRequestEvent","CreatedAt":"2018-01-27T05:02:58","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1908","RelatedDescription":"Opened pull request \"Update CLI version to 2.1.100-preview-007341\" (#1908) at dotnet/sdk","RelatedBody":"We need the new CLI so that we can take the matching NuGet on the SDK side."},{"Id":"7158805756","Type":"PullRequestEvent","CreatedAt":"2018-01-27T04:58:42","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1893","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-rtm-4859 into sdk\" (#1893) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4859 into sdk release/2.1.1xx branch"},{"Id":"7158805019","Type":"PullRequestEvent","CreatedAt":"2018-01-27T04:58:06","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1902","RelatedDescription":"Merged pull request \"Adding the Runtime Identifier and PlatformTarget to the error message\" (#1902) at dotnet/sdk","RelatedBody":"Adding the Runtime Identifier and PlatformTarget to the error message for when they don't match.\r\n\r\nFixes https://github.com/dotnet/sdk/issues/1616"},{"Id":"7158805017","Type":"IssuesEvent","CreatedAt":"2018-01-27T04:58:06","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1616","RelatedDescription":"Closed issue \"CheckForMismatchingPlatform should log the RuntimeIdentifier and PlatformTarget on error\" (#1616) at dotnet/sdk","RelatedBody":"I've run into a situation where I get this error:\r\n\r\n`  /home/eerhardt/git/source-build/src/vstest/tools/dotnet/sdk/2.0.0-preview3-006845/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.RuntimeIdentifierInference.targets(125,5): error : The RuntimeIdentifier platform and the PlatformTarget must match. [/home/eerhardt/git/source-build/src/vstest/src/testhost.x86/testhost.x86.csproj] [/home/eerhardt/git/source-build/targets/repository.proj]\r\n `\r\n\r\nThis is coming from this code:\r\n\r\nhttps://github.com/dotnet/sdk/blob/98ea6b2a1701ee9e2e3dd8122c77d5a2adcc5bb7/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.RuntimeIdentifierInference.targets#L121-L128\r\n\r\nIt would be helpful if this error would log what the `$(RuntimeIdentifier)` and `$(PlatformTarget)` values where, in order to help users debug what went wrong in their builds."},{"Id":"7158804717","Type":"PullRequestEvent","CreatedAt":"2018-01-27T04:57:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1892","RelatedDescription":"Merged pull request \"Updating the branding to 2.1.100, to match the CLIs branding.\" (#1892) at dotnet/sdk","RelatedBody":""},{"Id":"7158186273","Type":"PullRequestEvent","CreatedAt":"2018-01-26T23:06:05","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1866","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-rtm-4825 into sdk\" (#1866) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4825 into sdk release/2.1 branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-01-28T05:30:21.1402291Z","RunDurationInMilliseconds":8145}