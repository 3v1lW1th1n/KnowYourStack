{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing SignalR (alpha) for ASP.NET Core 2.0","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official preview release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core... <a aria-label=\"read more about Announcing SignalR (alpha) for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T00:00:00","CommentsCount":45,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T00:00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null},{"Title":"WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication","PublishedOn":"2017-06-28T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the recent update to the WCF Service Reference tool in the VS Marketplace, support has been added for downloading metadata for a web service where the metadata exchange (MEX) endpoint has been secured with IIS authentication. The purpose of MEX endpoints is to allow clients to discover the service capabilities, including security aspects of... <a aria-label=\"read more about WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/","RawContent":null},{"Title":"Introducing ASP.NET Core 2.0 Preview 2","PublishedOn":"2017-06-28T00:00:00","CommentsCount":41,"FacebookCount":0,"Summary":"At Build 2017, we released an initial preview version of ASP.NET Core 2.0.  Over the last two months we have incorporated your feedback and added a number of new features.  We now have a Preview 2 version of the ASP.NET Core 2.0 framework and Visual Studio tools for you to try.  In this post, we... <a aria-label=\"read more about Introducing ASP.NET Core 2.0 Preview 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers","PublishedOn":"2017-05-10T00:00:00","CommentsCount":25,"FacebookCount":0,"Summary":"The ASP.NET team is pleased to share the first preview version of the ASP.NET Core 2.0 framework.  In this post, we’ll look at the new features and changes to the web framework that were announced at the Build 2017 keynote and sessions.  We will also look at some other updates that were published for ASP.NET... <a aria-label=\"read more about Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/","RawContent":null},{"Title":"Visual Studio 2017 Tools for Azure Functions","PublishedOn":"2017-05-10T00:00:00","CommentsCount":105,"FacebookCount":0,"Summary":"Visual Studio 2017 Tools for Azure Functions are now available as part of the Azure development workload starting in the Visual Studio 2017 15.3 release. These tools: Enable creating pre-compiled C# functions that bring better cold start performance than script based functions, and opens the entire eco-system of Visual Studio tools for class libraries including code... <a aria-label=\"read more about Visual Studio 2017 Tools for Azure Functions\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6655358412","Type":"IssuesEvent","CreatedAt":"2017-09-29T16:04:50","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2219","RelatedDescription":"Closed issue \"CallbackPath on Oauth Authentication cannot specify HTTPS or HTTP protocol\" (#2219) at aspnet/Home","RelatedBody":"Hi, using Oauth for the authentication  \r\n```\r\n\r\n          .AddOAuth(OpenIdConnectDefaults.AuthenticationScheme, x =>\r\n            {\r\n                x.SignInScheme = \"Cookies\";\r\n                x.ClaimsIssuer = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"ClaimsIssuer\").First().Value;\r\n                x.AuthorizationEndpoint = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"AuthorizationEndpoint\").First().Value;\r\n                x.TokenEndpoint = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"TokenEndpoint\").First().Value;\r\n                x.UserInformationEndpoint = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"UserInformationEndpoint\").First().Value;\r\n\r\n                x.CallbackPath = new PathString(\"/signin-oidc\"); /* provider specific DO NOT MODIFY */\r\n\r\n\r\n```\r\nYou can't specify if the Callback Path runs on HTTPS instead of HTTP.\r\n\r\nThis lead to scenario where if your web server runs HTTP behind an SSL Accelerator or a Load Balancer that expose your app as HTTPS the call back page cannot be reached by the external Oauth login page simply because to the OAuth is provided the callback to the HTTP endpoint that doesn't really exist.\r\n\r\nIf you have NO control on the Load Balancer or the SSL Accelerator (like we DO NOT have within Cloud Foundry) it doesn't work.\r\n"},{"Id":"6654347907","Type":"IssuesEvent","CreatedAt":"2017-09-29T12:26:55","Actor":"gornialberto","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2219","RelatedDescription":"Opened issue \"CallbackPath on Oauth Authentication cannot specify HTTPS or HTTP protocol\" (#2219) at aspnet/Home","RelatedBody":"Hi, using Oauth for the authentication  \r\n\r\n`          .AddOAuth(OpenIdConnectDefaults.AuthenticationScheme, x =>\r\n            {\r\n                x.SignInScheme = \"Cookies\";\r\n                x.ClaimsIssuer = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"ClaimsIssuer\").First().Value;\r\n                x.AuthorizationEndpoint = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"AuthorizationEndpoint\").First().Value;\r\n                x.TokenEndpoint = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"TokenEndpoint\").First().Value;\r\n                x.UserInformationEndpoint = Configuration.GetSection(\"UAA\").GetChildren().Where(y => y.Key == \"UserInformationEndpoint\").First().Value;\r\n\r\n                x.CallbackPath = new PathString(\"/signin-oidc\"); /* provider specific DO NOT MODIFY */\r\n`\r\nYou can't specify if the Callback Path runs on HTTPS instead of HTTP.\r\n\r\nThis lead to scenario where if your web server runs HTTP behind an SSL Accelerator or a Load Balancer that expose your app as HTTPS the call back page cannot be reached by the external Oauth login page simply because to the OAuth is provided the callback to the HTTP endpoint that doesn't really exist.\r\n\r\nIf you have NO control on the Load Balancer or the SSL Accelerator (like we DO NOT have within Cloud Foundry) it doesn't work.\r\n"},{"Id":"6651930247","Type":"IssuesEvent","CreatedAt":"2017-09-28T22:05:16","Actor":"louislewis2","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2218","RelatedDescription":"Opened issue \"Health Checks\" (#2218) at aspnet/Home","RelatedBody":"Hi, \r\n\r\nI am wondering what is happening / the current status of the health checks.\r\nThe code was here, then it moved to another repo. According to the docs,\r\nwe are meant to clone the repo, copy code into our projects to make use of it.\r\n\r\nThis is less than ideal, as a nuget package would most certainly be first prize.\r\nAlso no active development can be seen on that repository which is unnerving.\r\nIs it perhaps that their is no active development because its already perfect? If so,\r\nthen why cant a nuget package be released, even if it was a preview release?\r\n\r\nAlso if it is part of Asp.Net Core, why does the repo not live here with all the other ones?\r\n\r\nThe roadmap mentions this as part of 2.0 if I am not mistaken, so just wondering about that too. If it was missed and is going to form part of the 2.1 release, I am thinking that at least some work would have been on it by now, even if it was bringing the projects up to date with the latest released bits, the current host dependency is sitting at 1.0.2. There is also not much love given to pull requests, that do not seem all that complicated to provide an accept / reject answer on, I can of course be wrong. Its just how it looks when looking at the repo.\r\n\r\nJust a few questions for those who cannot copy source code of what may or may not be what is actually going to land. One can work with preview packages and feel slightly better about it, I think. So any insight or feedback will be greatly appreciated.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6658468553","Type":"PullRequestEvent","CreatedAt":"2017-09-30T19:40:07","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/970","RelatedDescription":"Closed pull request \"Exclude connection ids in users\" (#970) at aspnet/SignalR","RelatedBody":""},{"Id":"6658384852","Type":"IssuesEvent","CreatedAt":"2017-09-30T18:35:47","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/972","RelatedDescription":"Closed issue \"Manually Resolved IHubContext<T> is not functioning correctly.\" (#972) at aspnet/SignalR","RelatedBody":"i have scenario where i need to access Hub clients from a static class so i tried resolving an instance of HubContext this way:\r\n\r\n    `public class Startup\r\n     {\r\n        public static ServiceProvider Provider { get; private set; }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // other stuff\r\n            services.AddSignalR();\r\n\r\n            Provider = services.BuildServiceProvider();\r\n        }\r\n    }`\r\n\r\n**and in the static class:**\r\n\r\n` var chatHub = Startup.Provider.GetService<IHubContext<Chat>>();\r\nchatHub.Clients.All.InvokeAsync(\"Send\", \"Hellow folks\").Wait();`\r\n\r\nchatHub instance is correctly instantiated but calling InvokeAsync dose not really do anything with the clients. (note that asking to inject  to IHubContext<THub> to controller or similar objects works just fine).\r\n\r\nasp.net Core 2.0\r\nsdk version: 2.0\r\nsignalr version: 1.0.0-alpha1-final\r\n\r\nThanks in advance"},{"Id":"6657905104","Type":"IssuesEvent","CreatedAt":"2017-09-30T12:27:05","Actor":"csafg2","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/972","RelatedDescription":"Opened issue \"Manually Resolved HubContext not functioning correctly.\" (#972) at aspnet/SignalR","RelatedBody":"i have scenario where i need to access Hub clients from a static class so i tried resolving an instance of HubContext this way:\r\n\r\n    `public class Startup\r\n     {\r\n        public static ServiceProvider Provider { get; private set; }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // other stuff\r\n            services.AddSignalR();\r\n\r\n            Provider = services.BuildServiceProvider();\r\n        }`\r\n\r\nand in the static class:\r\n\r\n` var chatHub = Startup.Provider.GetService<IHubContext<Chat>>();\r\nchatHub.Clients.All.InvokeAsync(\"Send\", \"Hellow folks\").Wait();`\r\n\r\nchatHub instance is correctly instantiated but call InvokeAsync dose not really do anything with the clients.\r\n\r\nasp.net Core 2.0\r\nsdk version: 2.0\r\nsignalr version: 1.0.0-alpha1-final\r\n\r\ni`m expecting to have an exception if the way i am resolving IHubContext is some what wrong?"},{"Id":"6657022315","Type":"PullRequestEvent","CreatedAt":"2017-09-30T00:02:38","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/971","RelatedDescription":"Opened pull request \"Fixing MsgPack serializing byte[] as string Part 1\" (#971) at aspnet/SignalR","RelatedBody":"Enabling sending byte[] from server to client.\r\n\r\nIssue: https://github.com/aspnet/SignalR/issues/945"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6658433130","Type":"IssuesEvent","CreatedAt":"2017-09-30T19:12:24","Actor":"davidfowl","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6899","RelatedDescription":"Closed issue \"Different behavior of HttpContextAccessor between windows and Linux\" (#6899) at aspnet/Mvc","RelatedBody":"` \r\nservices.AddTransient<HttpContextAccessor>().AddScoped<IOCRService>(provider => `\r\n       `    {`\r\n              ` //  provider.GetRequiredService<HttpContextAccessor>().HttpContext Is Always Null On  Linux Docker microsoft/aspnetcore:2 `\r\n                \r\n`var accessor = ActivatorUtilities.GetServiceOrCreateInstance<HttpContextAccessor>(provider);`\r\n`var logger = provider.GetRequiredService<ILogger<Startup>>();`\r\n\r\n` logger.LogWarning(\"accessor ==null ? \" + (accessor == null));`\r\n`                logger.LogWarning(\"accessor.HttpContext ==null ? \" + (accessor.HttpContext == null));`\r\n`                return ActivatorUtilities.CreateInstance<FakeOCR>(provider);`\r\n\r\n`}`\r\n`provider.GetRequiredService<HttpContextAccessor>().HttpContext`  Is Always Null On  Linux Docker microsoft/aspnetcore:2\r\n\r\n**Windows is Ok.**\r\n**Docker image microsoft/aspnetcore:2 is base on debian.**\r\n"},{"Id":"6657706130","Type":"IssuesEvent","CreatedAt":"2017-09-30T09:26:39","Actor":"McKabue","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6900","RelatedDescription":"Opened issue \"How to implement ASP MVC CORE 2 DefaultControllerFactor\" (#6900) at aspnet/Mvc","RelatedBody":"[I want to be able to call server side functionality by name instead of route. i have succeeded in doing that by creating a special action that receives a name of the other action to call and then return the result of that other action....[ VIEW THE QUESTION AT STACKOVERFLOW - ITS VERY LONG] ](https://stackoverflow.com/questions/46501242/how-to-implement-asp-mvc-core-2-defaultcontrollerfactor)"},{"Id":"6657187183","Type":"IssuesEvent","CreatedAt":"2017-09-30T01:53:54","Actor":"jbagga","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6780","RelatedDescription":"Closed issue \"Returning a file, accept-ranges headers, and browser behaviors\" (#6780) at aspnet/Mvc","RelatedBody":"In ASPNET Core 2, any time you return a file from actual binary data (Either `byte[]` or `Stream` from my testing, haven't tried others yet), it automatically opts you into it sending headers to the browser of `accept-ranges`, and `content-length`. But the problem is that if the browser tries to take advantage of this, and your action may end up getting pinged multiple times, even though you likely have provided the entire file on the first request/response cycle. This results in repeat requests that you may not expect, or have planned for. In some cases can prevent the file from loading correctly on consumption because you're returning the same bytes no matter what range was asked for, simply by upgrading to ASPNET Core 2. There is no documentation about how to support this from what I can tell, and no details warning people about the change.\r\n\r\nIdeally, the developer should be able to opt out of this behavior, or be required to explicitly opt in.\r\n\r\nThere should be some sort of documentation on how to support range requests.\r\n\r\nSteps to reproduce\r\nCreate a new ASPNET Core 2 MVC app\r\nAdd a new action on the Home controller with the following\r\n\r\n```C#\r\npublic IActionResult FileExample([FromServices]IHostingEnvironment hostingEnvironment)\r\n{\r\n    //Using https://www.iso.org/files/live/sites/isoorg/files/archive/pdf/en/annual_report_2009.pdf copied to the project folder as my example PDF\r\n    //I just googled for a random PDF, my real world example pulls its files from a SQL DB\r\n    var buffer = System.IO.File.ReadAllBytes(Path.Combine(hostingEnvironment.ContentRootPath, \"annual_report_2009.pdf\")); \r\n    var contentDisposition = new System.Net.Mime.ContentDisposition() { FileName = \"annual_report_2009.pdf.pdf\", Inline = true };\r\n    Response.Headers.Add(\"Content-Disposition\", contentDisposition.ToString());\r\n    return File(buffer, \"application/pdf\");\r\n}\r\n```\r\n\r\nIn this example, I saw Chrome request this action 5 times for one request in the browser, and IE requests it 8."},{"Id":"6657168554","Type":"PullRequestEvent","CreatedAt":"2017-09-30T01:39:47","Actor":"jbagga","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6895","RelatedDescription":"Merged pull request \"Add EnableRangeProcessing\" (#6895) at aspnet/Mvc","RelatedBody":"Addresses #6780 \r\n\r\nEnsured that this change solves the multiple GET requests issue described in #6780.\r\n\r\n@Tratcher @rynowak "}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6658674214","Type":"PullRequestEvent","CreatedAt":"2017-09-30T22:26:44","Actor":"mvas","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1305","RelatedDescription":"Closed pull request \"fixed typos, mostly in documentation comments.\" (#1305) at aspnet/Identity","RelatedBody":"fixed typos, mostly in documentation comments\r\n-mostly xml docs\r\n-some comments\r\n-log string"},{"Id":"6652963503","Type":"IssuesEvent","CreatedAt":"2017-09-29T05:45:13","Actor":"yodasad","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1448","RelatedDescription":"Opened issue \"The proper way to extend UserManager\" (#1448) at aspnet/Identity","RelatedBody":"Assume I want to write a library that extends identity model with a new object called Organization.  It can look like this\r\n````\r\npublic class Organization\r\n{\r\n    public string Id { get; set; }\r\n    public string Name { get; set; }\r\n    public string Address { get; set; }\r\n\r\n    // Some other properties\r\n}\r\n````\r\nA user can be a member of many organization.\r\nThe next step is to extend `UserManager` with some methods\r\n````\r\nAddUserToOrganizationAsync\r\nRemoveUserFromOrganizationAsync\r\nGetUserOrganizationsAsync\r\n````\r\n\r\nMy question is: what is the proper way to implement these methods?\r\n1. Should I invent a new class `UserOgranizationInfo` (analogue of `UserLoginInfo`)?\r\n\r\nSo the methods will look like\r\n````\r\npublic class UserOgranizationInfo\r\n{\r\n    public string Id { get; set; }\r\n    public string Name { get; set; }\r\n}\r\n\r\npublic class MyUserManager<TUser> : UserManager<TUser> where TUser : class\r\n{\r\n    public Task AddUserToOrganizationAsync(TUser user, UserOrganizationInfo org);\r\n    public Task RemoveUserFromOrganizationAsync(TUser user, UserOrganizationInfo org);\r\n    public Task<IEnumerable<UserOrganazationInfo>>GetUserOrganizationsAsync(TUser user);\r\n}\r\n````\r\n\r\n2. Or is it normal to use my entity type here?\r\n\r\nSo my UserManager will look like\r\n````\r\npublic MyUserManager<TUser, TOrganization> : UserManager<TUser>\r\n    where TUser : class, TOrganization : class\r\n{\r\n     // Other code\r\n\r\n    public Task AddUserToOrganizationAsync(TUser user, TOrganization org);\r\n    public Task RemoveUserFromOrganizationAsync(TUser user, TOrganization org);\r\n    public Task<IEnumerable<TOrganazation>>GetUserOrganizationsAsync(TUser user);\r\n\r\n    // Other code\r\n}\r\n````\r\n\r\nOr even more simpler\r\n````\r\npublic MyUserManager: UserManager<IdentityUser>\r\n{\r\n     // Other code\r\n\r\n    public Task AddUserToOrganizationAsync(IdentityUseruser, Organization org);\r\n    public Task RemoveUserFromOrganizationAsync(IdentityUseruser, Organization org);\r\n    public Task<IEnumerable<Organazation>>GetUserOrganizationsAsync(IdentityUser user);\r\n\r\n    // Other code\r\n}\r\n````\r\n\r\nI think that the only purpose for the first case (with `UserOrganizationInfo`) is to support store that doesn't support Organizations at all. In this case it will be quite inconvenient to add dependency on Organization.\r\nBut if I know that my stores and my UserManager will always support Organizations the second way is ok, is it? Because the second way is much more convenient: we can get full organization info directly from the UserManager rather than from additional `OrganizationManager` class.\r\n\r\nAm I right?\r\n\r\n"},{"Id":"6650562668","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:45:54","Actor":"ajcvickers","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1447","RelatedDescription":"Opened issue \"Document how to customize the EF model\" (#1447) at aspnet/Identity","RelatedBody":"People often seem to run into issues when attempting to customize the entities in the Entity Framework model. It would be good to have documentation showing the general approach (i.e. talk about OnModelCreating, that the model needs to remain in a consistent state, etc) as well as common scenarios (adding a property, adding an FK, changing to use a composite key, etc.)\r\n"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6658582445","Type":"PullRequestEvent","CreatedAt":"2017-09-30T21:10:15","Actor":"VSadov","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2090","RelatedDescription":"Opened pull request \"new toolset compiler - 2.6.0-beta1-62126-01\" (#2090) at aspnet/KestrelHttpServer","RelatedBody":"This was a \"special\" build, so there is no public VSIX for this.\r\nThe old one should be ok, for most scenarios.\r\n\r\nWhen VS 15.5 preview1 is available it will match this compiler feature-wise by default."},{"Id":"6657800670","Type":"IssuesEvent","CreatedAt":"2017-09-30T10:46:44","Actor":"rgl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2089","RelatedDescription":"Opened issue \"Add projectUrl to the Microsoft.AspNetCore.Server.Kestrel nuget package\" (#2089) at aspnet/KestrelHttpServer","RelatedBody":"It would be nice to be able to easily jump from the nuget package at https://www.nuget.org/packages/Microsoft.AspNetCore.Server.Kestrel/ to this source code repository. This can be done by adding a `projectUrl` element to the nuspec file. I can submit a patch."},{"Id":"6657034261","Type":"IssuesEvent","CreatedAt":"2017-09-30T00:09:26","Actor":"natemcmaster","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/1955","RelatedDescription":"Reopened issue \"Flaky test: ConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate\" (#1955) at aspnet/KestrelHttpServer","RelatedBody":"Saw this test failure on Travis today. Appears to have failed this assertion:\r\n```c#\r\nAssert.True(aborted.Wait(TimeSpan.FromSeconds(60)));\r\n```\r\n\r\n\r\n```\r\nFailed   ConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate\r\nError Message:\r\n Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\nStack Trace:\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<ConnectionClosedWhenResponseDoesNotSatisfyMinimumDataRate>d__64.MoveNext() in /home/travis/build/aspnet/KestrelHttpServer/test/Kestrel.FunctionalTests/ResponseTests.cs:line 2499\r\n```\r\n\r\nhttps://travis-ci.org/aspnet/KestrelHttpServer/jobs/252952635#L994-L1000\r\n\r\ncc @cesarbs "},{"Id":"6656978969","Type":"PullRequestEvent","CreatedAt":"2017-09-29T23:40:03","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2073","RelatedDescription":"Merged pull request \"HTTP/2: do not ACK PING frames received with ACK set\" (#2073) at aspnet/KestrelHttpServer","RelatedBody":"http://httpwg.org/specs/rfc7540.html#rfc.section.6.7\r\n\r\n> The PING frame defines the following flags:\r\n> \r\n> ACK (0x1): When set, bit 0 indicates that this PING frame is a PING response. An endpoint MUST set this flag in PING responses. **An endpoint MUST NOT respond to PING frames containing this flag.**"},{"Id":"6656559181","Type":"IssuesEvent","CreatedAt":"2017-09-29T21:07:56","Actor":"jkotalik","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2088","RelatedDescription":"Closed issue \"IHttpUpgradeFeature.UpgradeAsync() should not be setting any headers\" (#2088) at aspnet/KestrelHttpServer","RelatedBody":"As @Tratcher mentioned for the in-process scenario, [the UpgradeAsync method](https://github.com/aspnet/KestrelHttpServer/blob/a31d1e024ca86a4a9053e0be105fde17c5ccae10/src/Kestrel.Core/Internal/Http/Http1Connection.FeatureCollection.cs#L40-L50) should not be setting any headers. It is a caller responsibility to do so. See [the RFC spec](https://tools.ietf.org/html/rfc7230#section-6.7) and [our websocket implementation](https://github.com/aspnet/WebSockets/blob/31c1e9d7d727fda23ae657cb3598c7c3f3950d15/src/Microsoft.AspNetCore.WebSockets/Internal/HandshakeHelpers.cs#L66-L75)."},{"Id":"6656486904","Type":"IssuesEvent","CreatedAt":"2017-09-29T20:49:04","Actor":"jkotalik","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2088","RelatedDescription":"Opened issue \"IHttpUpgradeFeature.UpgradeAsync() should not be setting any headers\" (#2088) at aspnet/KestrelHttpServer","RelatedBody":"As @Tratcher mentioned for the in-process scenario, [the UpgradeAsync method](https://github.com/aspnet/KestrelHttpServer/blob/a31d1e024ca86a4a9053e0be105fde17c5ccae10/src/Kestrel.Core/Internal/Http/Http1Connection.FeatureCollection.cs#L40-L50) should not be setting any headers. It is a caller responsibility to do so. See [the RFC spec](https://tools.ietf.org/html/rfc7230#section-6.7) and [our websocket implementation](https://github.com/aspnet/WebSockets/blob/31c1e9d7d727fda23ae657cb3598c7c3f3950d15/src/Microsoft.AspNetCore.WebSockets/Internal/HandshakeHelpers.cs#L66-L75)."},{"Id":"6656188767","Type":"IssuesEvent","CreatedAt":"2017-09-29T19:31:56","Actor":"jkotalik","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2087","RelatedDescription":"Opened issue \"Default values in HttpProtocol.FeatureCollection should be on set and not get\" (#2087) at aspnet/KestrelHttpServer","RelatedBody":"For example, [the Scheme](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Kestrel.Core/Internal/Http/HttpProtocol.FeatureCollection.cs#L85-L89) and [the PathBase](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Kestrel.Core/Internal/Http/HttpProtocol.FeatureCollection.cs#L97-L101) both provide default on get rather than on set, even though they are always set to non-null in the constructor. Also, why are there no default for Path, Query, etc? Seems inconsistent. "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6656954119","Type":"IssuesEvent","CreatedAt":"2017-09-29T23:28:05","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1696","RelatedDescription":"Closed issue \"Create a VS for Mac Plugin for Razor binaries.\" (#1696) at aspnet/Razor","RelatedBody":""},{"Id":"6656953576","Type":"IssuesEvent","CreatedAt":"2017-09-29T23:27:49","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1690","RelatedDescription":"Closed issue \"Split Microsoft.VisualStudio.LanguageServices.Razor into two assemblies.\" (#1690) at aspnet/Razor","RelatedBody":"We should have a more-generic editor assembly that can be used in VS for mac.\r\n\r\nMy idea for now is to break the assembly into two:\r\n- `Microsoft.VisualStudio.LanguageServices.Razor`\r\n- `Microsoft.VisualStudio.Editor.Razor` (to correspond with `Microsoft.VisualStudio.Editor`)\r\n\r\nWhich leaves room for a third assembly for VS for mac specifics: `Microsoft.VisualStudioMac.LangugeServices.Razor`"},{"Id":"6656951704","Type":"PullRequestEvent","CreatedAt":"2017-09-29T23:26:52","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1694","RelatedDescription":"Merged pull request \"Split LanguageServices.Razor.\" (#1694) at aspnet/Razor","RelatedBody":"- Created a new `Microsoft.VisualStudio.Editor.Razor` assembly to contain Visual Studio platform agnostic info.\r\n\r\n#1690"},{"Id":"6656950818","Type":"PullRequestEvent","CreatedAt":"2017-09-29T23:26:27","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1701","RelatedDescription":"Merged pull request \"Add a VS for Mac compatible Razor addin\" (#1701) at aspnet/Razor","RelatedBody":"- Add Microsoft.MonoDevelop.RazorAddin.\r\n- As part of this work I also added `Microsoft.MonoDevelop.LanguageServices.Razor` to be the monodevelop specific Razor code.\r\n- Added MSBuild infrastructure to automate creation of MonoDevelop addins (MPacks). This work enables us to not have a dependency on a specific version of monodevelop and does not require us to have tool-prerequisites on the box. Every build outputs the mpacks into the artifacts/build directory.\r\n- Built in build-level metadata pieces to workaround how addins are typically developed. They are usually authored C# first and then config files are generated after the fact; with this changeset we auto-generate the addin.info and its corresponding assembly attributes. Both of these take information directly from the build system.\r\n\r\n#1696 \r\n\r\n/cc @ToddGrun @KirillOsenkov "},{"Id":"6656914216","Type":"IssuesEvent","CreatedAt":"2017-09-29T23:09:43","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/431","RelatedDescription":"Closed issue \"Support bound and minimized boolean (or bool?) TagHelper attributes.\" (#431) at aspnet/Razor","RelatedBody":"Today `TagHelper`s do not support bound minimized attributes because typically it doesn't make sense to have a bound attribute that will have 0 value. This isn't the case for `boolean` attributes though; we could special case `boolean` and even `bool?` values to allow situations such as:\n\n``` C#\npublic class InputTagHelper : TagHelper\n{\n    public bool Checked { get; set; }\n\n    public bool? Extra { get; set; }\n\n    public override void Process(...)\n    {\n        // <input checked />                 Checked = true, Extra = null\n        // <input checked=\"1 + 1 == 2\" />    Checked = true, Extra = null\n        // <input />                         Checked = false, Extra= null\n        // <input extra />                   Checked = false, Extra = true\n        // <input extra=\"1 + 3 == 2\" />      Checked = false, Extra = false\n        // <input extra checked />           Checked = true, Extra = true\n    }\n}\n```\n"},{"Id":"6656911451","Type":"IssuesEvent","CreatedAt":"2017-09-29T23:08:29","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1678","RelatedDescription":"Closed issue \"Implementing quirking of parser and language features for Razor\" (#1678) at aspnet/Razor","RelatedBody":"We're planning some other work items for Razor 2.1.0 that will require us to add features or relax restrictions specific to Razor 2.1.0\r\n\r\nThe time has come for us to implement version support in Razor. Make it so."},{"Id":"6656911434","Type":"PullRequestEvent","CreatedAt":"2017-09-29T23:08:29","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1683","RelatedDescription":"Merged pull request \"Added version support to Razor parser\" (#1683) at aspnet/Razor","RelatedBody":"#1678 \r\n\r\n@rynowak \r\n\r\n- Added `Version` property to `RazorParserOptions`\r\n- Added an internal `RazorParserFeatureContext` that contains a flag for all features we want to enable/disable in the parser\r\n- Reason for having a centralized location is so we don't have to look at the version every time we want to decide whether to light-up a feature\r\n- ~~I'll send a separate PR that will use `AllowMinimizedBooleanTagHelperAttributes` to enable/disable that feature.~~ https://github.com/aspnet/Razor/pull/1695"},{"Id":"6656885887","Type":"IssuesEvent","CreatedAt":"2017-09-29T22:57:31","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1705","RelatedDescription":"Closed issue \"Enable OOP functionality to use the 64bit host\" (#1705) at aspnet/Razor","RelatedBody":"From @heejaechang\r\n\r\nFor both LUT and Razor, can you guys add some *.json files on top of your existing json files with this modification.\r\n\r\nFor each your service file (*.servicehub.service.json), add another json file with 64 ending \r\nex, razorLanguageService64.servicehub.service.json for razorLanguageService.servicehub.service.json)\r\n\r\nwith this change\r\n\r\n  \"host\": \"desktopClr.x86\" => \"host\": \"desktopClr \"\r\n\"hostId\": \"RoslynCodeAnalysisService32\" => \"hostId\": \"RoslynCodeAnalysisService\"\r\n\r\nEverything else should be exactly same.\r\n\r\nAnd then add this new file (*64.servicehub.service.json) to all places where *.servicehub.service.json would be placed such as vsixmanifest\r\n\r\nFor Razor, that is all you need to do.\r\n\r\nI can change this (http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices.Razor.RemoteClient/RazorLangaugeServiceClient.cs,15) to pick up right json file from A/B testing in Roslyn side for you.\r\n\r\nFor LUT, you need to do the below as well.\r\n\r\nBasically, check some options and then choose between remoteBuildService or remoteBuildService64 \r\nEx) http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Remote/RemoteHostClientServiceFactory.RemoteHostClientService.cs,166"},{"Id":"6656883995","Type":"PullRequestEvent","CreatedAt":"2017-09-29T22:56:43","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1706","RelatedDescription":"Merged pull request \"Add x64 service hub json for 64bit oop host\" (#1706) at aspnet/Razor","RelatedBody":"- Updated corresponding entries in manifest and csproj to reflect the new json addition.\r\n\r\n#1705 \r\n\r\n@heejaechang if you could review as well that would be fantastic!"},{"Id":"6656102444","Type":"PullRequestEvent","CreatedAt":"2017-09-29T19:10:23","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1706","RelatedDescription":"Opened pull request \"Add x64 service hub json for 64bit oop host\" (#1706) at aspnet/Razor","RelatedBody":"- Updated corresponding entries in manifest and csproj to reflect the new json addition.\r\n\r\n#1705 \r\n\r\n@heejaechang if you could review as well that would be fantastic!"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6644367490","Type":"IssuesEvent","CreatedAt":"2017-09-27T14:32:40","Actor":"joeaudette","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Opened issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868) at aspnet/Templates","RelatedBody":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217"},{"Id":"6561160159","Type":"IssuesEvent","CreatedAt":"2017-09-07T12:16:43","Actor":"SteveSandersonMS","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866) at aspnet/Templates","RelatedBody":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n"},{"Id":"6560156021","Type":"IssuesEvent","CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Opened issue \"Cannot force version of the template to install\" (#867) at aspnet/Templates","RelatedBody":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version"},{"Id":"6532477866","Type":"IssuesEvent","CreatedAt":"2017-08-30T23:19:06","Actor":"andyg8180","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Opened issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866) at aspnet/Templates","RelatedBody":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6635483866","Type":"IssuesEvent","CreatedAt":"2017-09-25T22:47:03","Actor":"mlorbetske","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/829","RelatedDescription":"Closed issue \"(package.json) Namespaced packages do not display version & details on hover-over\" (#829) at aspnet/Tooling","RelatedBody":"(latest) VStudio 2015 Update **3**\n\n![image](https://cloud.githubusercontent.com/assets/2574412/19649471/eadc6be0-99d3-11e6-9d8e-565003f9e2cd.png)\n\nWhen hovering over Namespaced packages (@whatever/), version numbers and details are labeled as \"Uknown\".\n\nAlso intellisense comes out as \"Unknown\" as well when typing in the version area to the right.\n![image](https://cloud.githubusercontent.com/assets/2574412/19649727/e3f93e56-99d4-11e6-81e8-a89cd21abeee.png)\n"},{"Id":"6626869082","Type":"IssuesEvent","CreatedAt":"2017-09-22T21:30:36","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/431","RelatedDescription":"Closed issue \"Having multiple sites with the same IIS Express launch url causes VS to launch the wrong site\" (#431) at aspnet/Tooling","RelatedBody":"The Security repo has three sample sites with the same launch url. (It needs to be the same because that url is registered with a remote auth server).  This can cause VS / IIS Express to launch the wrong site.\n"},{"Id":"6598999142","Type":"IssuesEvent","CreatedAt":"2017-09-16T14:09:01","Actor":"ctopher31","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059) at aspnet/Tooling","RelatedBody":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n"},{"Id":"6598993466","Type":"IssuesEvent","CreatedAt":"2017-09-16T14:04:41","Actor":"ctopher31","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Opened issue \"How do I make file nesting for js broken again. File nesting is really lame. I want my files structured the way I want them. If some lame ass wants nesting let it be an opt-in.\" (#1059) at aspnet/Tooling","RelatedBody":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6585749309","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:57:15","Actor":"davidfowl","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Closed issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6585739204","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:55:30","Actor":"jsdmitry","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Opened issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6504000070","Type":"IssuesEvent","CreatedAt":"2017-08-23T19:03:38","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/269","RelatedDescription":"Opened issue \"ExpandoObjectAdapter does not assume case insensitivity\" (#269) at aspnet/Announcements","RelatedBody":"When applying a json patch to `ExpandoObject`s, case insensitive search will not be used to match the path segment to the object's dictionary keys. Instead, the path segment will be resolved using the `NamingStrategy` defined in the `IContractResolver`.\r\n\r\nAddresses https://github.com/aspnet/JsonPatch/issues/102\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/103 for discussion\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"906146139933638658","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"aspnet","Text":"Getting Started with Windows Containers https://t.co/8twiZLlB5H","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-10-01T05:30:08.619024Z","RunDurationInMilliseconds":7126}