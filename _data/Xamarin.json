{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 3.5: A Little Bindable Love","PublishedOn":"2019-01-11T18:06:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Andrei Nitescu, a mobile developer since 2013 and frequent contributor to Xamarin.Forms. He shares about his experiences with other developers on his blog, and...","Href":"https://blog.xamarin.com/xamarin-forms-3-5-a-little-bindable-love/","RawContent":null},{"Title":"Hackathon Superweapon: F# and Fabulous","PublishedOn":"2019-01-10T20:27:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, I participated in Hack for the Sea, a weekend devoted to applying tech to marine conservation. One of our local challenges was a “cross-platform mobile app for reporting marine debris.” A...","Href":"https://blog.xamarin.com/hackathon-superweapon-f-and-fabulous/","RawContent":null},{"Title":"Xamarin and .NET Community Events in January","PublishedOn":"2019-01-02T19:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s a new year with tons of new and awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page....","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-january/","RawContent":null},{"Title":"Accessing Native Features the Cross-Platform Way with Xamarin.Essentials","PublishedOn":"2018-12-19T22:46:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every mobile application requires access to native functionality. When developing native mobile apps with Xamarin, developers are able to integrate deeply into iOS and Android since Xamarin exposes...","Href":"https://blog.xamarin.com/accessing-native-features-xamarin-essentials/","RawContent":null},{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8900493452","Type":"IssuesEvent","CreatedAt":"2019-01-16T22:20:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2610","RelatedDescription":"Closed issue \"Make it possible to use debug.mono.log=timing to just log, without employing the mono performance counters.\" (#2610) at xamarin/xamarin-android","RelatedBody":"We use `debug.mono.log=timing` property setting to measure the times for performance. We use only the log output and not the methods.txt and counters.txt files.\r\n\r\nSo we also measure the time to write these files, plus probably more time spent preparing their content.\r\n\r\nSometimes I see quite different results from profiler and our measurements thru log timing. It will be interesting to see only the timing, without the performance counters enabled."},{"Id":"8900492347","Type":"PullRequestEvent","CreatedAt":"2019-01-16T22:20:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2623","RelatedDescription":"Merged pull request \"[monodroid] Add log timing categories\" (#2623) at xamarin/xamarin-android","RelatedBody":"Implements https://github.com/xamarin/xamarin-android/issues/2610\r\n\r\nIt is possible to set log to timing=bare to avoid employing the\r\nperformance counters.\r\n\r\nExample:\r\n\r\n    adb shell setprop debug.mono.log timing=bare\r\n\r\nThis way we can get closer to \"normal\" app run times.\r\n\r\nComparison of XF test on Pixel XL 2:\r\n\r\nBefore:\r\n\r\n    Time:    328ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218359126::16774850937603807740\r\n    Time:    329ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218787043::16774850937603807745\r\n    Time:    337ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441219141783::16774850937603807750\r\n    Time:    320ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218515064::16774850937603807755\r\n    Time:    327ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218450741::16774850937603807760\r\n\r\nAfter:\r\n\r\n    Time:    321ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441219032407::16774850937603807703\r\n    Time:    314ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441219071678::16774850937603807708\r\n    Time:    314ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218700949::16774850937603807713\r\n    Time:    313ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218922616::16774850937603807718\r\n    Time:    326ms Message: monodroid-timing: Runtime.init: end, total time; elapsed: 0s.18432517441218974960::16774850937603807723\r\n\r\nThe performance counters added about 10.6ms in average in this case."},{"Id":"8898967192","Type":"IssuesEvent","CreatedAt":"2019-01-16T17:53:17","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2573","RelatedDescription":"Closed issue \"Question: Why is btls included when using Andriod native client and minimun target is apk 21?\" (#2573) at xamarin/xamarin-android","RelatedBody":"I get more and more confused reading docs about httpclient implementation and tls.\r\n\r\nIn the microsoft docs it says that using the androidClientHandler reduces the size of the apk (since it will not use btls for tls 1.2) => only works on api >=21 \r\n\r\nAnd on another doc AndroidClientHandler now defaults to use btls becuase of the support for httpwebrequest with tls 1.2...\r\n\r\nAnd what ever i do, I allways find that my apk ends up with the btls lib.. \r\n\r\n\r\naccording to the docs https://docs.microsoft.com/en-us/xamarin/android/app-fundamentals/http-stack?tabs=windows The androidClientHandler is a good choice because its fast/native and reduces app size(becuase it doesnt use btls) -- Then please tell me how to get an apk without btls! Very confusing..\r\n\r\nThey also say that the managed httpclient doestn support tls 1.2, to further down in the docs say that i DOES! because it is using btls. The confusion is real!!\r\n\r\nI do not want to use btls when building apps that dont use webclient and has the minimun target to api 21.. \r\n\r\nIm on the latest version of vs2017\r\n\r\nThx! :)"},{"Id":"8898536864","Type":"PullRequestEvent","CreatedAt":"2019-01-16T16:46:44","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2612","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] use System.Reflection.Metadata in <ResolveAssemblies/>\" (#2612) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/dotnet/corefx/tree/master/src/System.Reflection.Metadata/src/System/Reflection/Metadata\r\nContext: https://github.com/jonathanpeppers/Benchmarks\r\n\r\nThere is a new System.Reflection.Metadata library from corefx for\r\nreading .NET assemblies. It is a bit more performant than Mono.Cecil\r\nbecause it is a different library with different opinions.\r\n\r\nSome notes about System.Reflection.Metadata:\r\n\r\n- SRM has a forward \"reader\" style API\r\n- SRM uses lots of structs, and you have to do an additional call to\r\nlookup strings generally.\r\n- SRM, as far as I have seen, doesn't have APIs to modify and write\r\nout new assemblies.\r\n- SRM only supports \"portable\" pdb files.\r\n- SRM is not well documented yet. To discover usage, I read source\r\n  code and/or unit tests.\r\n\r\nFrom my benchmark above, it seems that SRM is 10x faster on\r\nWindows/.NET framework and 5x faster on macOS/Mono.\r\n\r\nSo it makes sense for use to use SRM when reading assemblies (and we\r\ndon't need symbols), and continue with Mono.Cecil for the linker and\r\nother things that modify assemblies.\r\n\r\nThere are a few places we can take advantage of SRM, but the simplest\r\nwith a reasonable impact was `ResolveAssemblies`:\r\n\r\n    Before:\r\n    320 ms  ResolveAssemblies                          1 calls\r\n    After:\r\n    112 ms  ResolveAssemblies                          1 calls\r\n\r\nSo a ~200ms savings on this MSBuild task, which runs on *every* build.\r\nThis was the Xamarin.Forms test project in this repo: a build with no\r\nchanges.\r\n\r\n## Changes ##\r\n\r\n- Added a `MetadataResolver` type, as a way to cache `PEReader`\r\n  instances. This is a comparable drop-in replacement for\r\n  `DirectoryAssemblyResolver`.\r\n- `MonoAndroidHelper.IsReferenceAssembly` now uses\r\n  `System.Reflection.Metadata` instead of `Mono.Cecil`. This is used\r\n  in a few other MSBuild tasks.\r\n- A `MetadataExtensions` provides an extension method to simplify\r\n  getting the full name of a custom attribute. We can add more here as\r\n  needed.\r\n\r\nThe resulting code *should* be the same, except we are using SRM over\r\nMono.Cecil.\r\n\r\n## Downstream ##\r\n\r\nWe will need to add the following assemblies to the installer:\r\n\r\n- `System.Reflection.Metadata.dll`\r\n- `System.Collections.Immutable.dll`"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8901146057","Type":"IssuesEvent","CreatedAt":"2019-01-17T00:58:56","Actor":"mashake-mendoza","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4998","RelatedDescription":"Opened issue \"Having an issue with bindable AutomationID wherein the AutomationID can only be set one time... would be good if there is a way to enable the AutomationIDs to be set multiple times.\" (#4998) at xamarin/Xamarin.Forms","RelatedBody":"I am designing a cross-platform UI test for Xamarin Apps but I am having a problem on how to set a sequential AutomationID on a ListView because the Grids/Cells in the ListView are being recycled.\r\n\r\nFor example I have 7 items in my ListView, assuming that 5 of the items are displayed in the screen when I load the page and I have to scrolldown to view the other 2, The other 2 grids are recycled from the first 5 items and the AutomationIDs for that cell were already set\r\n\r\n*Expected AutomationIDs\r\nListTitle1\r\nListTitle2\r\nListTitle3\r\nListTitle4\r\nListTitle5\r\nListTitle6\r\nListTitle7\r\n\r\n*Actual AutomationIDs\r\nListTitle1\r\nListTitle2\r\nListTitle3\r\nListTitle4\r\nListTitle5\r\nListTitle1\r\nListTitle2\r\n\r\nPossible Solutions:\r\n1. Since AutomationIDs are now bindable, should also allow the ability to set AutomationIDs multiple times\r\n2. Have a way to disable ListView cells/grids recycling\r\n\r\n- Version with issue: 3.4.0.1008975\r\n"},{"Id":"8900943650","Type":"PullRequestEvent","CreatedAt":"2019-01-17T00:03:07","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4883","RelatedDescription":"Merged pull request \"[UWP] Implementation of Switch.OnColor\" (#4883) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplements the `Switch.OnColor` for UWP which was reported as a bug to be not working\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #4460\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\n`Switch.OnColor` now actually works on UWP!\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nAfter: \r\n\r\n![screenshot 2019-01-02 15 38 41](https://user-images.githubusercontent.com/939291/50596407-8298fb00-0ea4-11e9-874a-23be523d4542.png)\r\n\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\nAdded a case for this in the Switch Gallery app\r\n\r\n![untitled](https://user-images.githubusercontent.com/939291/50596546-f76c3500-0ea4-11e9-800e-d2c364f0391c.gif)\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8900943636","Type":"IssuesEvent","CreatedAt":"2019-01-17T00:03:07","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4460","RelatedDescription":"Closed issue \"[UWP] Switch color is not set\" (#4460) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n3.1.0 introduced the ability to set the color of a switch. This isn't working for UWP.\r\n\r\n### Steps to Reproduce\r\n```\r\n<Switch OnColor=\"Purple\" IsToggled=\"true\" />\r\n```\r\n\r\n### Expected Behavior\r\n\r\nSwitch color is purple.\r\n\r\n### Actual Behavior\r\n\r\nSwitch color is blue.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1008975\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/41873/48685530-66ebc680-eb7c-11e8-9217-9ef096bdfd61.png)\r\n\r\nAndroid showing the purple:\r\n\r\n![image](https://user-images.githubusercontent.com/41873/48685561-939fde00-eb7c-11e8-956c-e46fe7308886.png)\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/davidortinau/TheLittleThingsPlayground/blob/master/TheLittleThingsPlayground/Views/ThreeOnePage.xaml#L56\r\n"},{"Id":"8900720461","Type":"PullRequestEvent","CreatedAt":"2019-01-16T23:07:47","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4952","RelatedDescription":"Merged pull request \".create-nuget.bat + maps\" (#4952) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nAdd maps to private nuget package. \r\n\r\n>set NUGET_DIR=...\r\n>set CREATE_MAP_NUGET=1\r\n>.create-nuget.bat all\r\n\r\n### Issues Resolved ### \r\nWhile investigating https://github.com/xamarin/Xamarin.Forms/issues/4919, unable run https://github.com/davidortinau/TheLittleThingsPlayground with private nuget packages because they don't include maps. \r\n\r\nFix adds maps. \r\n"},{"Id":"8900290969","Type":"PullRequestEvent","CreatedAt":"2019-01-16T21:42:49","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4865","RelatedDescription":"Merged pull request \"[iOS] CollectionView item replacement on iOS\" (#4865) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nReplace items on iOS\r\n\r\n### Issues Resolved ### \r\n\r\n- implements item replacement from #3172\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n\r\n### Before/After Screenshots ### \r\n\r\n![2018-12-26_12-46-22 1](https://user-images.githubusercontent.com/538025/50455665-d6d43600-090c-11e9-884f-4134c56b381a.gif)\r\n\r\n### Testing Procedure ###\r\n\r\nAutomated tests will be available once #4697 is merged.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8899315611","Type":"PullRequestEvent","CreatedAt":"2019-01-16T18:53:42","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5425","RelatedDescription":"Opened pull request \"[XHarness] Reneable the System tests on iOS, WatchOS and TVOs.\" (#5425) at xamarin/xamarin-macios","RelatedBody":"All the failing tests have been ignored. There are a large number of\r\ntests ignored on the watchOS platform beacuase atm the iOS test dll is\r\nused.\r\n\r\nFixes https://github.com/xamarin/maccore/issues/1135"},{"Id":"8899076730","Type":"PullRequestEvent","CreatedAt":"2019-01-16T18:12:21","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5411","RelatedDescription":"Merged pull request \"[XHarness] Reenable SystemTransactionsTests on iOS, TvOS and WatchOs.\" (#5411) at xamarin/xamarin-macios","RelatedBody":"Fixes https://github.com/xamarin/maccore/issues/1134"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1083829954515750923","CreatedAt":"2019-01-11T20:56:12+00:00","UserScreenname":"xamarinhq","Text":"...just posted on the Xamarin Blog, Andrei Nitescu shares one of his contributions to Xamarin.Forms, the bindable l… https://t.co/rp3eVPLbYl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":101,"FavoriteCount":43,"RawContent":null},{"Id":"1083399709526503424","CreatedAt":"2019-01-10T16:26:34+00:00","UserScreenname":"xamarinhq","Text":"Our very first Mobile .NET #CommunityStandup will be live in about 30 minutes at 9am Pacific! @maddyleger1,… https://t.co/vmFHIKZTIt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":19,"RawContent":null},{"Id":"1080559862642282502","CreatedAt":"2019-01-02T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"It’s a new year with tons of new and awesome Xamarin and .NET Community events coming this month. Get the full list… https://t.co/ZOykEyCRBN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":22,"RawContent":null},{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":270,"FavoriteCount":119,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":153,"FavoriteCount":69,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":82,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":177,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":113,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null}]}},"RunOn":"2019-01-17T05:31:14.8656144Z","RunDurationInMilliseconds":3310}