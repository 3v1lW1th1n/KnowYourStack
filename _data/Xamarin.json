{"Data":{"Blog":{"FeedItems":[{"Title":"GlideX For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Getting good image performance on Android has traditionally been a difficult task. Google has some documentation on the subject, which unfortunately mentions some complex topics: Cache and recycle...","Href":"https://blog.xamarin.com/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Historically iOS applications have had a number of limitations when running on a device, as Apple disallows the execution of dynamically generated code. Applications are compiled “Ahead of Time” (AOT)...","Href":"https://blog.xamarin.com/introducing-xamarin-ios-interpreter/","RawContent":null},{"Title":"Join the Xamarin Visual Challenge","PublishedOn":"2019-03-22T16:00:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past month, we have been running a low-key challenge to flex the new Xamarin.Forms 3.6 feature, Visual with Material Design. For more information about what Visual is and what you can do with...","Href":"https://blog.xamarin.com/join-the-xamarin-visual-challenge/","RawContent":null},{"Title":"Get Your Apps Ready for Apple’s New Watch Processor Architecture","PublishedOn":"2019-03-20T15:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last fall, Apple announced that new applications and updates would need to support the Apple Watch Series 4. &#8220;Starting March 2019, all new apps and app updates for iPhone, including universal...","Href":"https://blog.xamarin.com/apple-new-processor-architecture/","RawContent":null},{"Title":"Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More!","PublishedOn":"2019-03-18T18:54:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Essentials are your ultimate open source library to access native features from a single cross-platform API. Since the first release, we have received awesome feedback on GitHub from...","Href":"https://blog.xamarin.com/xamarin-essentials-detect-shake-browser-customization/","RawContent":null},{"Title":"Introducing the New Xamarin Customer Showcase","PublishedOn":"2019-03-15T16:53:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developers around the world use Xamarin every day to build beautiful native mobile apps with .NET. What better way to highlight the amazing work that these developers are doing than with a customer...","Href":"https://blog.xamarin.com/new-xamarin-customer-showcase/","RawContent":null},{"Title":"A Quick Update on Google Components for iOS and Android","PublishedOn":"2019-03-13T19:12:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts about using Xamarin for mobile development is access to all of the platform APIs from C# bindings. Additionally, any native iOS or Android library can be consumed by a Xamarin...","Href":"https://blog.xamarin.com/update-google-components-ios-android/","RawContent":null},{"Title":"Enhanced Xamarin Development With MFractor","PublishedOn":"2019-03-12T15:58:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Matthew Robbins. Matthew is a Microsoft MVP and the founder of MFractor, incredible Xamarin tools for Visual Studio Mac. MFractor MFractor is a powerful...","Href":"https://blog.xamarin.com/enhanced-xamarin-development-with-mfractor/","RawContent":null},{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null},{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9349994467","Type":"IssuesEvent","CreatedAt":"2019-04-01T00:27:21","Actor":"plynkus","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2906","RelatedDescription":"Opened issue \"VS2019 (RC4) regression with certain use of in parameter semantics.\" (#2906) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Load VS2019 (RC4) and create an empty solution.\r\n2. Create a blank Xamarin.Android application.\r\n3. Create a blank Xamarin.iOS application.\r\n4. To each, add the following snippet to the file for the main activity/app delegate:\r\n\r\n```\r\n    namespace Base\r\n    {\r\n        public abstract class Feature<T> where T : struct\r\n        {\r\n            public abstract void Update(in T value);\r\n        }\r\n    }\r\n\r\n    public class Feature<T> : Base.Feature<T> where T : struct\r\n    {\r\n        public override void Update(in T value)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n    }\r\n\r\n    struct Data\r\n    {\r\n        public float Value;\r\n    }\r\n```\r\n\r\n5. To each the OnCreate(Bundle) and app delegate FinishedLaunching, simply instantiate the above with:\r\n\r\n```\r\nnew Feature<Data>();\r\n```\r\n\r\n### Expected Behavior\r\n\r\nA normal application launch.\r\n\r\n### Actual Behavior\r\n\r\nCrashes on each platform so long as the `in` parameter semantics are in use.  Removal of the `in` keywords from both `Feature<T>` signatures results in proper operation.\r\n\r\nExceptions on Android are of the form:\r\n\r\n```\r\nSystem.TypeLoadException: Could not find method '.ctor' due to a type load error:\r\nType Android.Feature`1[T] has invalid vtable method slot 4 with method none\r\n```\r\n\r\n...vs. corresponding outcomes on iOS:\r\n\r\n```\r\nSystem.ExecutionEngineException: Attempting to JIT compile method\r\n'iOS.AppDelegate:FinishedLaunching (UIKit.UIApplication,Foundation.NSDictionary)'\r\nwhile running in aot-only mode.\r\n```\r\n\r\nThe identical snippets built (`in` parameters included) under the latest VS2017 (with appropriate compiler setting bumped up from defaults to allow `in` parameters at all) work as expected.  We tripped up on these during a VS2019 upgrade pass that included a couple use cases well boiled down to the snippets above.\r\n\r\nThere were no issues with the same semantics under VS2019 with UWP.\r\n\r\nI have submitted this issue in the Android repo for starters, given that it seems likely the issue is of a common origin.  I am happy to issue a dup for the iOS repo if that turns out not to be the case.\r\n"},{"Id":"9349017146","Type":"PullRequestEvent","CreatedAt":"2019-03-31T16:43:12","Actor":"xtmq","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2905","RelatedDescription":"Opened pull request \"Deploy target\" (#2905) at xamarin/xamarin-android","RelatedBody":"When adb fails it is difficult to understand thats going on especially from IDE where an user usually observes only error messages, something like: \r\n```\r\nMyAndroidProject\r\n   ...\\Xamarin\\Android\\Xamarin.Android.Common.targets(3281,3): error MSB3073: \r\nThe command \"\"C:\\Program Files (x86)\\Android\\android-sdk\\platform-tools\\\\adb\" -s emulator-5554 install -r \"bin\\Debug\\com.companyname.MyAndroidProject-Signed.apk\"\" exited with code 1.\r\n```\r\n\r\nIt is better to have an error message like\r\n```\r\nMyAndroidProject\r\n  ...\\Xamarin\\Android\\Xamarin.Android.Common.targets(3285,9): error : \r\nThe command \"\"C:\\Program Files (x86)\\Android\\android-sdk\\platform-tools\\\\adb\" -s emulator-5554 install -r \"bin\\Debug\\com.companyname.MyAndroidProject-Signed.apk\"\" exitied with code 1: \r\nadb: failed to install bin\\Debug\\com.companyname.MyAndroidProject-Signed.apk: Failure [INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION: Failed to parse /data/app/vmdl192544199.tmp/base.apk: AndroidManifest.xml]\r\n```"},{"Id":"9348577622","Type":"IssuesEvent","CreatedAt":"2019-03-31T13:28:32","Actor":"AdmiralSnyder","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2904","RelatedDescription":"Opened issue \"SIGSEGV crash in AccessibilityService when using HttpClient\" (#2904) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nError occurs in Emulator, Android 8.1 - API 27.\r\n\r\nContext: I build an AccessibilityService that sends its event to another system via HttpClient.PostAsync.\r\n\r\n\r\n\r\nThe service must be activated in adb shell with \r\n$ settings put secure enabled_accessibility_services App2.App2/App2.ResearchAccessibilityService\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n[App2.zip](https://github.com/xamarin/xamarin-android/files/3026624/App2.zip)\r\n\r\n### Expected Behavior\r\nDon't crash, or at least give me a C# stacktrace.\r\n### Actual Behavior\r\nAfter a couple of successful POSTs, it randomly crashes (Got a SIGSEGV while executing native code.), but the managed stacktrace errors with \"domain required for stack walk\" (which originates from https://github.com/mono/mono/blob/master/mono/mini/mini-exceptions.c, because some domain is not given --> is this another error needing another Issue?)\r\n\r\nthe last line of the output is:\r\n03-31 13:10:53.031 F/libc    ( 8639): Fatal signal 11 (SIGSEGV), code 1, fault addr 0x50 in tid 8690 (OkHttp Dispatch), pid 8639 (App2.App2)\r\n\r\nThe problem occurs both when I use the Android HttpClient implementation and the Managed one.\r\n### Version Information\r\nI'm on windows, so what should be pasted here?\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nWindows 10 1809, 17763.402\r\n\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.0.0 Preview 4.4\r\nVisualStudio.16.Preview/16.0.0-pre.4.4+28721.148\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nInstalled Version: Enterprise\r\n\r\nArchitecture Diagrams and Analysis Tools   00435-60000-00000-AA436\r\nMicrosoft Architecture Diagrams and Analysis Tools\r\n\r\nVisual C++ 2019   00435-60000-00000-AA436\r\nMicrosoft Visual C++ 2019\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nApplication Insights Tools for Visual Studio Package   9.0.20307.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2019   16.0.12307.51536\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Core Blazor Language Services   16.0.19154.02\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.0.12307.51536\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   16.0.12307.51536\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.8000.0\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   16.0.12307.51536\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.8000.0\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.77 (master@24013d5)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nGitHub.VisualStudio   2.8.1.7307\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.8000.0\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.8000.0\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.8000.0\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.0.0\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   16.0.300 (573eda3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   5.0.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nOffice Developer Tools for Visual Studio   16.0.28628.00\r\nMicrosoft Office Developer Tools for Visual Studio\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSnapshot Debugging Extension   1.0\r\nSnapshot Debugging Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   16.0.61903.21090\r\nMicrosoft SQL Server Data Tools\r\n\r\nSyntax Visualizer   1.0\r\nAn extension for visualizing Roslyn SyntaxTrees.\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   16.0.10306.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual C++ for Linux Development   1.0.9.28711\r\nVisual C++ for Linux Development\r\n\r\nVisual F# Tools 10.4 for F# 4.6   16.0.0.0.  Commit Hash: 809f41207b74a1356208f11b8fa3a15233734050.\r\nMicrosoft Visual F# Tools 10.4 for F# 4.6\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Unity   4.0.0.5\r\nVisual Studio Tools for Unity\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWorkflow Manager Tools 1.0   1.0\r\nThis package contains the necessary Visual Studio integration components for Workflow Manager.\r\n\r\nXamarin   16.0.0.513 (d16-0@aebc6bdb5)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.17.4.413 (remotes/origin/d16-0@db42fb8b0)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   16.1.43 (fe3ade5)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.2.0.5 (HEAD/292d27fa)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2018-08-rc@5ad371dab1b\r\n    Java.Interop: xamarin/java.interop/d16-0@c987483\r\n    LibZipSharp: grendello/LibZipSharp/master@44de300\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    MXE: xamarin/mxe/xamarin@b9cbb535\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.26.0@325e91a\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-0@0a7edd6\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.6.0.23 (ad57f87)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\nwhat should be used on windows where there is no pbcopy?\r\n\r\n[adb.log](https://github.com/xamarin/xamarin-android/files/3026628/adb.log)\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9344257769","Type":"PullRequestEvent","CreatedAt":"2019-03-29T22:02:10","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2903","RelatedDescription":"Opened pull request \"[build] use a repository-wide NuGet.config\" (#2903) at xamarin/xamarin-android","RelatedBody":"Context: https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior\r\nContext: http://build.devdiv.io/2500191\r\nContext: https://github.com/xamarin/xamarin-android/pull/2859#issuecomment-476691256\r\n\r\nWe are randomly getting failures during Windows builds such as:\r\n\r\n    NuGet.targets(114,5): Unable to load the service index for source https://someurl.visualstudio.com/_packaging/Dev/nuget/v3/index.json.\r\n        Response status code does not indicate success: 401 (Unauthorized).\r\n\r\nIt appears that some of our build machines on Azure DevOps have a\r\nglobal (or user-level) `NuGet.Config` file that points to a NuGet feed\r\nwe don't have access to.\r\n\r\nThe way we can workaround this, is to provide our own `NuGet.config`\r\nfile that *only* uses the official nuget.org feed.\r\n\r\n* We can put a top-level `NuGet.config` next to our SLN files.\r\n* We also need to use this file during MSBuild tests.\r\n\r\nI also made sure any calls to `nuget restore` are giving us the\r\nhighest log information via `-Verbosity Detailed`. This will tell us\r\nwhat `NuGet.config` files and feeds are used."},{"Id":"9344242551","Type":"IssuesEvent","CreatedAt":"2019-03-29T21:58:42","Actor":"jNery","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2902","RelatedDescription":"Opened issue \"NetworkCredential ignored using AndroidClientHandler resulting in 401 (Unauthorized) \" (#2902) at xamarin/xamarin-android","RelatedBody":"NetworkCredential ignored using AndroidClientHandler resulting in 401 (Unauthorized) \r\n\r\n### Steps to Reproduce\r\n\r\n1. Set NetworkCredential to valid username/password\r\nNotice that `HttpClientHandler` works just fine but 401 (Unauthorized) using `AndroidClientHandler`\r\n```CSharp\r\nEventHandler clickedHandler = async (a, b) =>\r\n{\r\n    var dialog = new Android.App.AlertDialog.Builder(this);\r\n    try\r\n    {\r\n        if (a == button)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new HttpClientHandler() { Credentials = new System.Net.NetworkCredential(\"guest\", \"guest\") });\r\n            var response = await client.GetAsync(new Uri(\"https://jigsaw.w3.org/HTTP/Basic/\"));\r\n            dialog.SetTitle(response.StatusCode.ToString());\r\n            dialog.SetMessage(await response.Content.ReadAsStringAsync());\r\n        }\r\n        else if (a == button1)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new AndroidClientHandler() { Credentials = new System.Net.NetworkCredential(\"guest\", \"guest\") });\r\n            var response = await client.GetAsync(new Uri(\"https://jigsaw.w3.org/HTTP/Basic/\"));\r\n            dialog.SetTitle(response.StatusCode.ToString());\r\n            dialog.SetMessage(await response.Content.ReadAsStringAsync());\r\n        }\r\n    }\r\n    catch (Exception error)\r\n    {\r\n        Exception ex = error;\r\n        if (ex is AggregateException)\r\n        {\r\n            ex = ((AggregateException)ex).GetBaseException();\r\n        }\r\n        dialog.SetTitle(ex.GetType().Name);\r\n        dialog.SetMessage(ex.Message);\r\n    }\r\n    RunOnUiThread(() => dialog.Show());\r\n};\r\nbutton.Click += clickedHandler;\r\nbutton1.Click += clickedHandler;\r\n```\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nServer should respond with `HttpStatusCode.OK` \r\n### Actual Behavior\r\nServer should respond with `HttpStatusCode.Unauthorized` \r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.9\r\nVisualStudio.15.Release/15.9.9+28307.518\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.80 (d15-9@914127c74)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.15 (d60abd1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9344086243","Type":"IssuesEvent","CreatedAt":"2019-03-29T21:24:33","Actor":"jNery","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2901","RelatedDescription":"Opened issue \"ObjectDisposedException when retrying POST request using AndroidClientHandler\" (#2901) at xamarin/xamarin-android","RelatedBody":"ObjectDisposedException when retrying POST request using AndroidClientHandler\r\n\r\n### Steps to Reproduce\r\n\r\n1. Implement AndroidClientHandler that will retry the same request\r\n```CSharp\r\npublic class NativeClientHandler : AndroidClientHandler\r\n{\r\n    bool retry = true;\r\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        HttpResponseMessage response = await BaseSendAsync(request, cancellationToken);\r\n        if (retry)\r\n        {\r\n            retry = !retry;\r\n            return await SendAsync(request, cancellationToken);\r\n        }\r\n        return response;\r\n    }\r\n    internal Task<HttpResponseMessage> BaseSendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        return base.SendAsync(request, cancellationToken);\r\n    }\r\n}\r\n```\r\nNotice that same implementation above for HttpClientHandler works just fine\r\n```CSharp\r\npublic class ManagedClientHandler : HttpClientHandler\r\n{\r\n    bool retry = true;\r\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        HttpResponseMessage response = await BaseSendAsync(request, cancellationToken);\r\n        if (retry)\r\n        {\r\n            retry = !retry;\r\n            return await SendAsync(request, cancellationToken);\r\n        }\r\n        return response;\r\n    }\r\n    internal Task<HttpResponseMessage> BaseSendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        return base.SendAsync(request, cancellationToken);\r\n    }\r\n}\r\n```\r\n2. Send POST request that will be re-sent \r\nUse case: server may respond with JSON error so client can challenge for credential; thus, sending the same POST request with authorization header or parameter.\r\n\r\n```CSharp\r\nEventHandler clickedHandler = async (a, b) =>\r\n{\r\n    var dialog = new Android.App.AlertDialog.Builder(this);\r\n    try\r\n    {\r\n        if (a == button)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new NativeClientHandler());\r\n            var response = await client.PostAsync(new Uri(\"http://httpbin.org/post\"), new System.Net.Http.FormUrlEncodedContent(new[] { new KeyValuePair<string, string>(\"f\", \"json\") }));\r\n        }\r\n        if (a == button1)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new ManagedClientHandler());\r\n            var response = await client.PostAsync(new Uri(\"http://httpbin.org/post\"), new System.Net.Http.FormUrlEncodedContent(new[] { new KeyValuePair<string, string>(\"f\", \"json\") }));\r\n            dialog.SetMessage(await response.Content.ReadAsStringAsync());\r\n        }\r\n        dialog.SetTitle(\"Success!\");\r\n    }\r\n    catch (Exception error)\r\n    {\r\n        Exception ex = error;\r\n        if (ex is AggregateException)\r\n        {\r\n            ex = ((AggregateException)ex).GetBaseException();\r\n        }\r\n        dialog.SetTitle(ex.GetType().Name);\r\n        dialog.SetMessage(ex.Message);\r\n    }\r\n    RunOnUiThread(() => dialog.Show());\r\n};\r\nbutton.Click += clickedHandler;\r\nbutton1.Click += clickedHandler\r\n```\r\n\r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nFollowing request should have succeeded.\r\n\r\n### Actual Behavior\r\nFollowing request fails with ObjectDisposedException \"Cannot access a closed Stream\"\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.9\r\nVisualStudio.15.Release/15.9.9+28307.518\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.80 (d15-9@914127c74)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.15 (d60abd1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9344008556","Type":"PullRequestEvent","CreatedAt":"2019-03-29T21:08:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2897","RelatedDescription":"Merged pull request \"Bump to mono/mono/2018-10@2264e1b30cc\" (#2897) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/pull/13722\r\nChanges: https://github.com/mono/mono/compare/204d95cec15...2264e1b30cc\r\n\r\nFixes: https://github.com/mono/mono/issues/12307\r\nFixes: https://github.com/mono/mono/issues/12843\r\nFixes: https://github.com/mono/mono/issues/13610\r\n\r\nShould fix AOT failures on Windows, when the mono archive is used."},{"Id":"9343114346","Type":"PullRequestEvent","CreatedAt":"2019-03-29T18:26:47","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2900","RelatedDescription":"Opened pull request \"Use correct `strip` path when building with mono archives\" (#2900) at xamarin/xamarin-android","RelatedBody":"Mono Android build still creates a standalone NDK toolchain as part of its\r\nprovisioning step and places it in `~/android-toolchain/toolchains` and its\r\nsubdirectories. Xamarin.Android then uses this location to find the `strip`\r\nutility which we call after the build is done. However, when Mono archives are\r\nused and the Mono build does *not* take place, the standalone toolchain is never\r\ncreated (as Xamarin.Android itself doesn't use it) and thus we fail to find the\r\nrequired `strip` binaries and the build fails\r\n\r\nThis commit fixes the problem by always using strip from the prebuilt toolchains\r\nas shipped with the NDK."},{"Id":"9342567162","Type":"PullRequestEvent","CreatedAt":"2019-03-29T17:02:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2881","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] helpers for AsyncTask + TPL\" (#2881) at xamarin/xamarin-android","RelatedBody":"Unhandled exceptions from a `Parallel.ForEach` log an exception in\r\nMSBuild such as:\r\n\r\n    E:\\A\\_work\\1214\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Aapt2.targets(84,3): One or more errors occurred.\r\n        at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n        at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        at System.Threading.Tasks.Task.Wait()\r\n        at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n        at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](TSource[] array, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n        at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n        at System.Threading.Tasks.Parallel.ForEach[TSource](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body)\r\n        at Xamarin.Android.Tasks.Aapt2Compile.DoExecute()\r\n        at Xamarin.Android.Tasks.Aapt2Compile.<Execute>b__15_0()\r\n        at System.Threading.Tasks.Task.InnerInvoke()\r\n        at System.Threading.Tasks.Task.Execute() [E:\\A\\_work\\1214\\s\\bin\\TestRelease\\temp\\BuildAMassiveApp\\App1\\App1.csproj]\r\n\r\n`One or more errors occurred` is not helpful, and it looks like this\r\ncould happen in several places throughout our MSBuild tasks. The only\r\nway to get a better error is to add a `try-catch` and manually log the\r\nexception.\r\n\r\nA couple extension methods can simplify where we use the PCL, and fix\r\nthis problem at the same time:\r\n\r\n* `Parallel.ForEach` -> `this.ParallelForEach()`:\r\n  * Can setup `ParallelOptions` & `CancellationToken`\r\n  * Adds a `try-catch` block that reports `XA0000` on unhandled\r\n    exceptions\r\n  * Calls `AsyncTask.Cancel()` if there is an exception\r\n* `this.ParallelForEachWithLock` passes an `object lockObject` to the\r\n  inner method for any needed locking.\r\n* `Task.Run` -> `this.RunTask()`\r\n  * Sets up the `CancellationToken`\r\n\r\nWith these extension methods we can also drop this `using` in several\r\nfiles:\r\n\r\n    using ThreadingTasks = System.Threading.Tasks;\r\n\r\nIt is a bit annoying to have to disambiguate an MSBuild task from a\r\nthreading task."},{"Id":"9342322837","Type":"PullRequestEvent","CreatedAt":"2019-03-29T16:27:05","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2899","RelatedDescription":"Opened pull request \"[WIP] AndroidX SkipResources/Packaging etc.\" (#2899) at xamarin/xamarin-android","RelatedBody":"Context #2895"},{"Id":"9342183687","Type":"IssuesEvent","CreatedAt":"2019-03-29T16:07:21","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2898","RelatedDescription":"Opened issue \"[linker] does not currently link away Resource.designer.cs\" (#2898) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build an app with the support libraries. This [Xamarin.Forms one](https://github.com/xamarin/xamarin-android/tree/master/tests/Xamarin.Forms-Performance-Integration) is fine.\r\n2. Notice how huge the `Resource.designer.cs` file is.\r\n3. Even when using `link all assemblies`, the `Resource` class doesn't get stripped down because of the way the fields are used.\r\n\r\nSome comments from @erikpowa https://github.com/xamarin/xamarin-android/issues/2836#issuecomment-477874589:\r\n\r\n> I haven't dived myself into the designtime resource-generator, but the only problem is the \"strong references\" to the fields. As I see as for solution:\r\nCurrently, library resource fields are required to be static, because UpdateIdValues() will change them when app starts (or atleast when the Resource class first accessed, which is also bad because of it uses reflection when \"we know the metadata at compile time\"). Foreg:\r\nglobal::CommonUI.Resource.Dimension.size200 = global::MainAssembly.Resource.Dimension.size200;\r\nthis is one line from UpdateIdValues() in MainAssembly\r\nwhere global::CommonUI.Resource.Dimension.size200 is static field from a library\r\nwhere global::MainAssembly.Resource.Dimension.size200 const field from the RootAssembly (having the final resourceId)\r\n\r\n> If the res designer already knows what resource will be set for which static field, then why isn't this knowledge/process moved out?\r\nLet's say global::MainAssembly.Resource.Dimension.size200 has value 2131099880.\r\n\"LinkAssemblies\" uses mono cecil anyway, it would be easier just modify the field's value in the libraries when the app compiles (we know the field, we know what value it's gonna get) Foreg: In CommonUI library, the global::CommonUI.Resource.Dimension.size200 will be set to 2131099880 in the UpdateIdValues(), but if we could make the global::CommonUI.Resource.Dimension.size200 a const field and modify the IL code to have a value with 2131099880 then all the problem will disappear... no longer strong reference to fields, no longer required to call UpdateIdValues(), no static constructor with trigger of UpdateIdValues, no reflection used and the linker will remove any unused const field(?).\r\n\r\n### Expected Behavior\r\n\r\n`Resource.designer.cs` can get smaller when `link all assemblies` is used.\r\n\r\n### Actual Behavior\r\n\r\n`Resource.designer.cs` contains a lot of unused IL. I did not measure the size, but since .NET assemblies are uncompressed in the APK it could be quite a bit if you an app that uses Google Play Services into account"},{"Id":"9342095142","Type":"PullRequestEvent","CreatedAt":"2019-03-29T15:55:39","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2897","RelatedDescription":"Opened pull request \"Bump to mono/mono/2018-10@2264e1b30cc\" (#2897) at xamarin/xamarin-android","RelatedBody":"Changes: https://github.com/mono/mono/compare/204d95cec15...2264e1b30cc\r\n\r\nFixes: https://github.com/mono/mono/issues/12307\r\nFixes: https://github.com/mono/mono/issues/12843\r\nFixes: https://github.com/mono/mono/issues/13610\r\n\r\nShould fix AOT failures on Windows, when the mono archive is used."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9350829462","Type":"PullRequestEvent","CreatedAt":"2019-04-01T05:13:05","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5771","RelatedDescription":"Opened pull request \"Add covariance back to IElementConfiguration\" (#5771) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nFast Renderer UI tests broke because IElementConfiguration<T> can no longer be covariantly cast which makes us realize that removing the out parameter will be too breaking. It'll also be breaking in such a way that's not obvious. \r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9349947668","Type":"IssuesEvent","CreatedAt":"2019-04-01T00:04:47","Actor":"mfeingol","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5770","RelatedDescription":"Opened issue \"Compiled bindings can cause (handled) NullReferenceExceptions\" (#5770) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nCompiled bindings should check for null members instead of dereferencing them and handling exceptions.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set up a binding against a member of a member. E.g. `<Label TextColor=\"{Binding MyContentViewModel.TextColor}\"  Text=\"{Binding MyContentViewModel.Text}\" />`\r\n2. Assign that member using another binding. E.g. `<local:MyContentView MyContentViewModel=\"{Binding MainContentViewModel}\" />`\r\n3. Enable compiled bindings. E.g.  `x:DataType=\"local:MyContentView\"`\r\n\r\n### Expected Behavior\r\n\r\nCompiled bindings should now throw any exceptions during initialization, just like non-compiled bindings.\r\n\r\n### Actual Behavior\r\n\r\nNullReferenceExceptions are thrown (and handled) during page initialization, which is extremely annoying when running an app in the debugger.\r\n\r\n```\r\n>\t0x0 in XamarinFormsSample.ContentViewModel.get_TextColor at C:\\Users\\mfeingol\\source\\Repos\\XamarinFormsSample\\XamarinFormsSample\\XamarinFormsSample\\MainPage.xaml.cs:35,34\tC#\r\n \t0x24 in XamarinFormsSample.MyContentView.<InitializeComponent>typedBindingsM__3\tC#\r\n \t0x81 in Xamarin.Forms.Internals.TypedBinding<XamarinFormsSample.MyContentView,Xamarin.Forms.Color>.ApplyCore at D:\\a\\1\\s\\Xamarin.Forms.Core\\TypedBinding.cs:208,7\tC#\r\n \t0x5D in Xamarin.Forms.Internals.TypedBinding<XamarinFormsSample.MyContentView,Xamarin.Forms.Color>.Apply at D:\\a\\1\\s\\Xamarin.Forms.Core\\TypedBinding.cs:135,4\tC#\r\n \t0x51 in Xamarin.Forms.BindableObject.ApplyBindings at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:453,5\tC#\r\n \t0xA in Xamarin.Forms.BindableObject.BindingContextPropertyChanged at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:472,4\tC#\r\n \t0x12E in Xamarin.Forms.BindableObject.SetValueActual at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:624,5\tC#\r\n \t0x182 in Xamarin.Forms.BindableObject.SetValueCore at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422,5\tC#\r\n \t0x51 in Xamarin.Forms.BindableObject.SetValue at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:572,4\tC#\r\n \t0x5 in Xamarin.Forms.BindableObject.SetValue at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:122,4\tC#\r\n \t0x7 in Xamarin.Forms.BindableObject.set_BindingContext at D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:26,10\tC#\r\n \t0x16 in XamarinFormsSample.MyContentView..ctor at C:\\Users\\mfeingol\\source\\Repos\\XamarinFormsSample\\XamarinFormsSample\\XamarinFormsSample\\MyContentView.xaml.cs:20,13\tC#\r\n \t0x66 in XamarinFormsSample.MainPage.InitializeComponent at C:\\Users\\mfeingol\\source\\Repos\\XamarinFormsSample\\XamarinFormsSample\\XamarinFormsSample.Android\\obj\\Debug\\81\\MainPage.xaml.g.cs:23,9\tC#\r\n \t0x9 in XamarinFormsSample.MainPage..ctor at C:\\Users\\mfeingol\\source\\Repos\\XamarinFormsSample\\XamarinFormsSample\\XamarinFormsSample\\MainPage.xaml.cs:21,13\tC#\r\n \t0x10 in XamarinFormsSample.App..ctor at C:\\Users\\mfeingol\\source\\Repos\\XamarinFormsSample\\XamarinFormsSample\\XamarinFormsSample\\App.xaml.cs:14,13\tC#\r\n \t0x28 in XamarinFormsSample.Droid.MainActivity.OnCreate at C:\\Users\\mfeingol\\source\\Repos\\XamarinFormsSample\\XamarinFormsSample\\XamarinFormsSample.Android\\MainActivity.cs:23,13\tC#\r\n```\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.0.264807\r\n- Last known good version:\r\n- IDE: VS 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n\r\n### Reproduction Link\r\n\r\n[XamarinFormsSample.zip](https://github.com/xamarin/Xamarin.Forms/files/3027330/XamarinFormsSample.zip)\r\n"},{"Id":"9347785379","Type":"IssuesEvent","CreatedAt":"2019-03-31T05:51:14","Actor":"HobDev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5769","RelatedDescription":"Opened issue \"[iOS,Visual]The ContentView is misaligned on iOS if Visual=\"Material\"\" (#5769) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nI am using ContentView in one of my ContentPages. Normally the ContentView Renders nicely on iOS. But when Visual is used the ContentView is misaligned and pushed out of the screen.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nRun the repro project with and without visual. \r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms- pre7\r\n- IDE:VSMac 2019 preview\r\n\r\n- Affected Devices: iOS\r\n\r\n### Screenshots\r\n### Without Visual\r\n![WithoutVisual](https://user-images.githubusercontent.com/9531864/55285162-af758500-53a3-11e9-9856-d7238208bf0d.png)\r\n\r\n\r\n### With Visual\r\n![WithVisual](https://user-images.githubusercontent.com/9531864/55285175-e9468b80-53a3-11e9-8ba3-bca39e836270.png)\r\n\r\n\r\n\r\n\r\n### Reproduction Link\r\n\r\n[MyApp.zip](https://github.com/xamarin/Xamarin.Forms/files/3026249/MyApp.zip)\r\n\r\n\r\n"},{"Id":"9347098257","Type":"IssuesEvent","CreatedAt":"2019-03-30T21:48:17","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5768","RelatedDescription":"Opened issue \"[Shell] Unable to focus search handler\" (#5768) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nhttps://www.screencast.com/t/kmwfyFkTdS\r\n\r\nIt's possible to show and hide the search box, however you cannot set focus. I don't see any method for focus or to get the Entry field to set focus myself.\r\n\r\nI suspect this will be an accessibility problem.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Start with search hidden\r\n2. Tap a search icon (toolbaritem or whatever) to open the search (expanded)\r\n3. Observe there is not way to set focus programmatically. \r\n\r\n### Expected Behavior\r\n\r\nCan set focus automatically OR explicitly.\r\n\r\n### Actual Behavior\r\n\r\nCannot. \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.0-pre8\r\n\r\n\r\n### Reproduction Link\r\n\r\nYou can use this if the gallery doesn't already have tests for it. https://github.com/davidortinau/Gastropods\r\n"},{"Id":"9346324477","Type":"IssuesEvent","CreatedAt":"2019-03-30T15:32:55","Actor":"HobDev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5767","RelatedDescription":"Opened issue \"AbsoluteLayout does not take the size of its children as RelativeLayout takes\" (#5767) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI want to use Image to display data on top of it. I put image inside the AbsoluteLayout. But the AbsoluteLayout does take extra pixels around the image. Whereas using RelativeLayout does not have this issue. The issue magnify in low resolution devices.\r\n### Steps to Reproduce\r\nswap RelativeLayout and AbsoluteLayout in the uploaded sample\r\n\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue:Xamarin.Forms-pre7\r\n- IDE:VSMac preview\r\n- Affected Devices:Android and iOS\r\n\r\n\r\n### Reproduction Link\r\n[MyApp.zip](https://github.com/xamarin/Xamarin.Forms/files/3025642/MyApp.zip)\r\n\r\n"},{"Id":"9346251529","Type":"IssuesEvent","CreatedAt":"2019-03-30T14:59:19","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5766","RelatedDescription":"Opened issue \"[Android / Fast Renderer] Frame size gets corrupted when ListView is scrolled\" (#5766) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nIf you put a `Frame` in a `ViewCell` and scroll the `ListView` up and down several times, you will notice that `Frame` size gets corrupted. This only happens when Fast Renderers are turned on.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run attachment\r\n2. Scroll up and down several times\r\n3. Observe that some frames have inaccurate lengths\r\n\r\n### Reproduction Link\r\n\r\n[App155.zip](https://github.com/xamarin/Xamarin.Forms/files/3025617/App155.zip)\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9346247495","Type":"IssuesEvent","CreatedAt":"2019-03-30T14:57:29","Actor":"HobDev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5765","RelatedDescription":"Opened issue \"[Frame, CollectionView, Android]The Label.Text is invisible on Android if DataTemplate have frame as layout\" (#5765) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI have developed a xaml page for an app. It have CollectionView. When I have Frame as Layout in DataTemplate of CollectionView The Label.Text field on Android is invisible. Whereas when I put the Frame in StackLayout the Text becomes visible.\r\n### Steps to Reproduce\r\nRemove the parent StackLayout  from child FrameLayout in CollectionView DataTemplate using my sample.\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue:Xamarin.Forms- pre7\r\n- IDE:VSMac 2019 preview\r\n\r\n- Affected Devices: Android\r\n\r\n\r\n### Reproduction Link\r\n\r\n[MyApp.zip](https://github.com/xamarin/Xamarin.Forms/files/3025610/MyApp.zip)\r\n\r\n"},{"Id":"9346219440","Type":"PullRequestEvent","CreatedAt":"2019-03-30T14:44:14","Actor":"stanbav","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5764","RelatedDescription":"Opened pull request \"[GTK] Fix Padding/Margin properties of Frame element (#5533)\" (#5764) at xamarin/Xamarin.Forms","RelatedBody":"Frame's content wrapped into a Gtk.Fixed container since Gtk.Frame itself can't position it's content.\r\n\r\n### Description of Change ###\r\n\r\nIn FrameRenderer.cs Frame's native content wrapped into a Gtk.Fixed container since Gtk.Frame itself can't position it's content. So content view will be positioned by wrapping Gtk.Fixed.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #5533 \r\n\r\n### API Changes ###\r\nNone\r\n\r\n### Platforms Affected ### \r\n\r\n- GTK\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nPadding and margin properties will work when view is a Content of a Frame.\r\n\r\n### Before/After Screenshots ### \r\n\r\nBefore\r\n![before_fix](https://user-images.githubusercontent.com/3056222/55277583-0717e000-5313-11e9-95f2-96cab11e5c4e.png)\r\n\r\nAfter\r\n![after_fix](https://user-images.githubusercontent.com/3056222/55277582-04b58600-5313-11e9-9ef8-3a13d8ecdbef.png)\r\n\r\n### Testing Procedure ###\r\n\r\nDescribed in the issue #5533 \r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9348955110","Type":"IssuesEvent","CreatedAt":"2019-03-31T16:14:26","Actor":"innnzzz6","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5824","RelatedDescription":"Opened issue \"https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\" (#5824) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see \r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"9344319584","Type":"PullRequestEvent","CreatedAt":"2019-03-29T22:17:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5823","RelatedDescription":"Opened pull request \"[linker] Teach linker to accept old (before optimization) bindings      Existing binding binaries won't have the `[Preserve]` attribute on the `Handler` field and, with the new optimization, would not work properly.      This tweak make sure that older, already linker-safe, bindings will remain this way (safe) in this (and future) versions of both iOS and macOS SDK.\" (#5823) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9343753294","Type":"PullRequestEvent","CreatedAt":"2019-03-29T20:20:45","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5822","RelatedDescription":"Opened pull request \"Merge `xcode10.2` into `d16-0`\" (#5822) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9343719562","Type":"IssuesEvent","CreatedAt":"2019-03-29T20:14:29","Actor":"jwholme2","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5810","RelatedDescription":"Closed issue \"Sporadic build failures caused by native linking error\" (#5810) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\nMy iOS builds in AppCenter fail if\r\n1. Xamarin iOS 12.2 and Mono 5.16 is selected\r\n\r\nThe builds _did_ work for a few days if I select Mono 5.12, but now they are failing again. It's always a native linker issue. \r\n\r\n### Expected Behavior\r\niOS builds work.\r\n### Actual Behavior\r\niOS builds fail.\r\n### Environment\r\nAppCenter builds.\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\nhttps://gist.github.com/jwholme2/af89f2979e45289f2d0fa7b034e68050\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":25,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":36,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":43,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":65,"FavoriteCount":28,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":25,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":117,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":95,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":73,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":39,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":22,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":150,"FavoriteCount":70,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":40,"FavoriteCount":9,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":18,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":262,"FavoriteCount":130,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":19,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":23,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":30,"RawContent":null}]}},"RunOn":"2019-04-01T05:30:53.6388871Z","RunDurationInMilliseconds":2361}