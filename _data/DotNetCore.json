{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":83,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3673","PublishedOn":"2018-10-30T19:27:39+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"We are happy to share the next Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a single package that bundles the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/30/announcing-net-framework-4-8-early-access-build-3673/","RawContent":null},{"Title":"Bringing .NET application performance analysis to Linux","PublishedOn":"2018-10-24T21:36:02+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Both the Windows and Linux ecosystems have a swath of battle-hardened performance analysis and investigation tools. But up until recently, developers and platform engineers could use none of these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/","RawContent":null},{"Title":".NET Core Source Code Analysis with Intel® VTune™ Amplifier","PublishedOn":"2018-10-23T21:04:49+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, Denis Pravdin, who are engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/23/net-core-source-code-analysis-with-intel-vtune-amplifier/","RawContent":null},{"Title":"Call For Participation: .NET and TypeScript at FOSDEM conference","PublishedOn":"2018-10-23T20:16:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The organizers of the FOSDEM 2019 conference have allocated a “Developer Room” on Saturday February 2nd 2019 for .NET and TypeScript discussions in Brussels Belgium.   FOSDEM is one of Europe’s most...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/23/call-for-participation-net-and-typescript-at-fosdem-conference/","RawContent":null},{"Title":".NET Framework October 2018 Preview of Quality Rollup","PublishedOn":"2018-10-18T20:44:34+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Updated Japanese dates that...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/18/net-framework-october-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Core 2.2 Preview 3","PublishedOn":"2018-10-18T01:03:01+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.2 Preview 3. We have made more improvements to the overall release that we would love to get your feedback on, either in the comments or at dotnet/core #2004....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/17/announcing-net-core-2-2-preview-3/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2 Preview 3","PublishedOn":"2018-10-17T20:10:48+00:00","CommentsCount":23,"FacebookCount":0,"Summary":"Today we are making EF Core 2.2 Preview 3 available, together with a new preview of our data provider for Cosmos DB and updated spatial extensions for various providers. Preview 3 is going to be the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/17/announcing-entity-framework-core-2-2-preview-3/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8520090559","Type":"PullRequestEvent","CreatedAt":"2018-11-01T16:20:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Merged pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser."},{"Id":"8448824845","Type":"PullRequestEvent","CreatedAt":"2018-10-19T12:44:07","Actor":"SeanKilleen","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Opened pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65"},{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"},{"Id":"8203056810","Type":"IssuesEvent","CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/111","RelatedDescription":"Opened issue \"Sourcelink location is confusing\" (#111) at dotnet/home","RelatedBody":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section."},{"Id":"8173033759","Type":"PullRequestEvent","CreatedAt":"2018-08-27T16:21:56","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Merged pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8163761410","Type":"PullRequestEvent","CreatedAt":"2018-08-24T15:35:46","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Opened pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8160074991","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:10:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Merged pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8160071932","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:09:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Merged pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8561172597","Type":"IssuesEvent","CreatedAt":"2018-11-09T05:25:35","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20902","RelatedDescription":"Closed issue \"Ubuntu arm Cross legs failing with static assert\" (#20902) at dotnet/coreclr","RelatedBody":"The Ubuntu arm Cross legs are current failing with: `error: static_assert failed \"sizeof(DebuggerIPCEvent) <= CorDBIPC_BUFFER_SIZE\"`"},{"Id":"8561163084","Type":"PullRequestEvent","CreatedAt":"2018-11-09T05:21:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20885","RelatedDescription":"Merged pull request \"Globalization mode.invariant\" (#20885) at dotnet/coreclr","RelatedBody":""},{"Id":"8561154786","Type":"PullRequestEvent","CreatedAt":"2018-11-09T05:18:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20891","RelatedDescription":"Merged pull request \"Delete unnecessary ReferenceSystemPrivateCoreLib\" (#20891) at dotnet/coreclr","RelatedBody":""},{"Id":"8561143537","Type":"PullRequestEvent","CreatedAt":"2018-11-09T05:13:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20903","RelatedDescription":"Merged pull request \"Revert \"Passing the CONTEXT in ICorDebugManagedCallback4::DataBreakpoint\"\" (#20903) at dotnet/coreclr","RelatedBody":"This reverts commit 9dd2a3688320fa197a3a2a412523416f10e7fa3b."},{"Id":"8561142834","Type":"PullRequestEvent","CreatedAt":"2018-11-09T05:13:38","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20903","RelatedDescription":"Opened pull request \"Revert \"Passing the CONTEXT in ICorDebugManagedCallback4::DataBreakpoint\"\" (#20903) at dotnet/coreclr","RelatedBody":"This reverts commit 9dd2a3688320fa197a3a2a412523416f10e7fa3b."},{"Id":"8561117214","Type":"IssuesEvent","CreatedAt":"2018-11-09T05:03:13","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20902","RelatedDescription":"Opened issue \"Ubuntu arm Cross legs failing with static assert\" (#20902) at dotnet/coreclr","RelatedBody":"The Ubuntu arm Cross legs are current failing with: `error: static_assert failed \"sizeof(DebuggerIPCEvent) <= CorDBIPC_BUFFER_SIZE\"`"},{"Id":"8561047259","Type":"IssuesEvent","CreatedAt":"2018-11-09T04:35:40","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18744","RelatedDescription":"Closed issue \"Determine how to expose hwintrinsics that are only supported in 64-bit mode\" (#18744) at dotnet/coreclr","RelatedBody":"There are several hwintrinsics exposed that are only emittable in 64-bit mode and throw a PNSE exception if invoked in 32-bit mode (regardless of the fact that the general `Isa.IsSupported` check returns true).\r\n\r\nWe should have a deeper discussion on how to properly expose this data to the consumer of these APIs."},{"Id":"8561040181","Type":"IssuesEvent","CreatedAt":"2018-11-09T04:32:42","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/10288","RelatedDescription":"Closed issue \"Math.Floor on Windows x86 handles `-0.0` differently\" (#10288) at dotnet/coreclr","RelatedBody":"On all platforms, except x86 Windows, `Math.Floor(-0.0)` returns `-0.0`.\r\n\r\nThe IEEE spec does not directly specify a correct behavior here (just indirectly via the handling of -0 with regards to certain rounding modes), but the C11 spec does. Specifically, in `Annex F: IEC 60559 floating-point arithmetic`, it specifies:\r\n> F.10.6.2 The floor functions\r\n> — floor(±0) returns ±0.\r\n> — floor(±∞) returns ±∞"},{"Id":"8560945357","Type":"PullRequestEvent","CreatedAt":"2018-11-09T03:56:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20901","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,corert\" (#20901) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"8560934322","Type":"PullRequestEvent","CreatedAt":"2018-11-09T03:52:24","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20897","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#20897) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8560763974","Type":"PullRequestEvent","CreatedAt":"2018-11-09T02:55:17","Actor":"KevinRansom","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10308","RelatedDescription":"Opened pull request \"Add Commands for fsc and fsi\" (#10308) at dotnet/cli","RelatedBody":"This adds dotnet fsc and dotnet fsi commands to dotnet.exe\r\nThis is intendended for VS2016 RTM, is this the correct branch?\r\n\r\nStill needs additional test cases.\r\n\r\n````\r\nc:\\kevinransom\\cli>dotnet /?\r\n.NET Command Line Tools (2.2.200-preview-009431)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET Core application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>     Path containing probing policy and assemblies to probe for.\r\n  --additional-deps <path>           Path to additional deps.json file.\r\n  --fx-version <version>             Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx  Roll forward on no candidate shared framework is enabled.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nUsage: dotnet [sdk-options] [command] [command-options] [arguments]\r\n\r\nExecute a .NET Core SDK command.\r\n\r\nsdk-options:\r\n  -d|--diagnostics  Enable diagnostic output.\r\n  -h|--help         Show command line help.\r\n  --info            Display .NET Core information.\r\n  --list-runtimes   Display the installed runtimes.\r\n  --list-sdks       Display the installed SDKs.\r\n  --version         Display .NET Core SDK version in use.\r\n\r\nSDK commands:\r\n  add               Add a package or reference to a .NET project.\r\n  build             Build a .NET project.\r\n\r\n   …\r\n\r\nAdditional commands from bundled tools:\r\n  dev-certs         Create and manage development certificates.\r\n  ef                Entity Framework Core command-line tools.\r\n  fsc               Execute F# compiler.\r\n  fsi               Start F# Interective / execute F# scripts.\r\n  sql-cache         SQL Server cache command-line tools.\r\n  user-secrets      Manage development user secrets.\r\n  watch             Start a file watcher that runs a command when files change.\r\n\r\nRun 'dotnet [command] --help' for more information on a command.\r\n\r\n````"},{"Id":"8560613773","Type":"PullRequestEvent","CreatedAt":"2018-11-09T02:08:30","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10299","RelatedDescription":"Merged pull request \" Can add entry to tool manifest file\" (#10299) at dotnet/cli","RelatedBody":"this is an internal API to add entry to tool manifest file\r\n\r\nplease review by commits since there is a big rename"},{"Id":"8560520776","Type":"PullRequestEvent","CreatedAt":"2018-11-09T01:39:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10306","RelatedDescription":"Merged pull request \"Updating ASP.NET and M.NC.App runtimes version\" (#10306) at dotnet/cli","RelatedBody":"Updating to a version that contains the .nupkg.metada files in the lzma archive to fix offline scenarios."},{"Id":"8560520050","Type":"PullRequestEvent","CreatedAt":"2018-11-09T01:39:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10305","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10305) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8560518090","Type":"PullRequestEvent","CreatedAt":"2018-11-09T01:38:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10307","RelatedDescription":"Opened pull request \"Enabling dependency uptake for the CLI.\" (#10307) at dotnet/cli","RelatedBody":""},{"Id":"8560385958","Type":"PullRequestEvent","CreatedAt":"2018-11-09T00:58:53","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10304","RelatedDescription":"Merged pull request \"Updating SDK to 2.2.200-preview-63508-04\" (#10304) at dotnet/cli","RelatedBody":"Contains a matching NuGet version.\r\n"},{"Id":"8560260848","Type":"PullRequestEvent","CreatedAt":"2018-11-09T00:21:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10306","RelatedDescription":"Opened pull request \"Updating ASP.NET and M.NC.App runtimes version\" (#10306) at dotnet/cli","RelatedBody":"Updating to a version that contains the .nupkg.metada files in the lzma archive to fix offline scenarios."},{"Id":"8560208783","Type":"IssuesEvent","CreatedAt":"2018-11-09T00:06:36","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10302","RelatedDescription":"Closed issue \"dotnet-install.ps1 doesn't allow arm/arm64 runtimes to be installed\" (#10302) at dotnet/cli","RelatedBody":"The diagnostics and dotnet-diagnostictests repo's need to install arm/arm64 runtimes and this prevents it:\r\n\r\nLine 166 dotnet-install.ps1:\r\n```\r\nfunction Get-CLIArchitecture-From-Architecture([string]$Architecture) {\r\n    Say-Invocation $MyInvocation\r\n\r\n    switch ($Architecture.ToLower()) {\r\n        { $_ -eq \"<auto>\" } { return Get-CLIArchitecture-From-Architecture $(Get-Machine-Architecture) }\r\n        { ($_ -eq \"amd64\") -or ($_ -eq \"x64\") } { return \"x64\" }\r\n        { $_ -eq \"x86\" } { return \"x86\" }\r\n        default { throw \"Architecture not supported. If you think this is a bug, please report it at https://github.com/dotnet/cli/issues\" }\r\n    }\r\n}    \r\n```\r\nThese two lines need to be added to the switch:\r\n```\r\n    { $_ -eq \"arm\" } { return \"arm\" }\r\n    { $_ -eq \"arm64\" } { return \"arm64\" }\r\n```\r\n"},{"Id":"8560206859","Type":"PullRequestEvent","CreatedAt":"2018-11-09T00:06:03","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10303","RelatedDescription":"Merged pull request \"Adding downloads of 'arm' and 'arm64'\" (#10303) at dotnet/cli","RelatedBody":"Adding downloads of 'arm' and 'arm64'\r\n\r\nAddresses: https://github.com/dotnet/cli/issues/10302"},{"Id":"8560190381","Type":"PullRequestEvent","CreatedAt":"2018-11-09T00:01:29","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10305","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10305) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8556451299","Type":"PullRequestEvent","CreatedAt":"2018-11-08T13:13:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/959","RelatedDescription":"Merged pull request \"[Darc-Update] Update dependencies from build 20181106.6 of https://github.com/dotnet/arcade\" (#959) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18556.6\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18556.6.symbols.nupkg - 2.2.0-beta.18556.6\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18556.6.symbols.nupkg - 2.4.0-beta.18556.6\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18556.6\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18556.6\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18556.6\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18556.6\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18556.6\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Darc - 1.0.0-beta.18556.6\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18556.6\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18556.6\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18556.6\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18556.6\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18556.6"},{"Id":"8556385136","Type":"IssuesEvent","CreatedAt":"2018-11-08T13:01:11","Actor":"valeriob","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/940","RelatedDescription":"Closed issue \"'SocketTaskExtensions' is a type, which is not valid in the given context\" (#940) at dotnet/standard","RelatedBody":"Hi,\r\ni just created a netstandard2.0 library with vs 15.8.7 and i can't use this type  SocketTaskExtensions, the error is 'SocketTaskExtensions' is a type, which is not valid in the given context."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8561133640","Type":"IssuesEvent","CreatedAt":"2018-11-09T05:09:59","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33346","RelatedDescription":"Reopened issue \"Abnormal memory spikes in .NET Core 2.1 when running on containers with memory limit set\" (#33346) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nWe have been investigating some weird memory issues on docker containers running aspnet core 2.1.5. I have been using Sebastien Ros' [memory leak](https://github.com/sebastienros/memoryleak) project (specifically bigstring endpoint) as benchmark...\r\nWhat we're finding is that in .NET core 2.1, when constraining container memory to 256MB or less and applying some load, the memory quickly jumps up until the container dies.\r\nIf only limiting to 512MB, the memory jumps all the way to 480MB, then drops to 280MB and stays stable...\r\n\r\nChanging `<ServerGarbageCollection>`  to false solves the problem but given the fact it seems the surge only happens initially, it seems something should be fixed at .NET Core level to make sure it respects the memory limit set.\r\n\r\nPlease also note that if we are also constraining the CPU, the memory stays under control (around 130MB). Memory limit therefore seems linked to the number of CPUs available (as indicated in https://blog.markvincze.com/troubleshooting-high-memory-usage-with-asp-net-core-on-kubernetes/)\r\n\r\nFinally, please note that when running the same service on .NET Core 2.0, the memory only jumps to 200MB (80%) ... so this behavior seems to be new in 2.1\r\n\r\nIs this a known issue / expected behavior?\r\n\r\nThanks,\r\nPatrick"},{"Id":"8561133470","Type":"IssuesEvent","CreatedAt":"2018-11-09T05:09:54","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33346","RelatedDescription":"Closed issue \"Abnormal memory spikes in .NET Core 2.1 when running on containers with memory limit set\" (#33346) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nWe have been investigating some weird memory issues on docker containers running aspnet core 2.1.5. I have been using Sebastien Ros' [memory leak](https://github.com/sebastienros/memoryleak) project (specifically bigstring endpoint) as benchmark...\r\nWhat we're finding is that in .NET core 2.1, when constraining container memory to 256MB or less and applying some load, the memory quickly jumps up until the container dies.\r\nIf only limiting to 512MB, the memory jumps all the way to 480MB, then drops to 280MB and stays stable...\r\n\r\nChanging `<ServerGarbageCollection>`  to false solves the problem but given the fact it seems the surge only happens initially, it seems something should be fixed at .NET Core level to make sure it respects the memory limit set.\r\n\r\nPlease also note that if we are also constraining the CPU, the memory stays under control (around 130MB). Memory limit therefore seems linked to the number of CPUs available (as indicated in https://blog.markvincze.com/troubleshooting-high-memory-usage-with-asp-net-core-on-kubernetes/)\r\n\r\nFinally, please note that when running the same service on .NET Core 2.0, the memory only jumps to 200MB (80%) ... so this behavior seems to be new in 2.1\r\n\r\nIs this a known issue / expected behavior?\r\n\r\nThanks,\r\nPatrick"},{"Id":"8561026818","Type":"IssuesEvent","CreatedAt":"2018-11-09T04:27:20","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/32834","RelatedDescription":"Closed issue \"Expose a way to create a scalar `Vector64<T>`, `Vector128<T>`, or `Vector256<T>` without setting the upper bits.\" (#32834) at dotnet/corefx","RelatedBody":"### Rationale\r\n\r\nIn certain performance oriented code, it may be important for you to be able to efficiently create a \"scalar\" `Vector64<T>`, `Vector128<T>`, or `Vector256<T>` (that is, a vector type where only the first element has been set).\r\n\r\nFor the native hardware intrinsics, they expose a single function which always leaves the upper bits \"unset\" (their value cannot statically be determined). However, when exposing the \"equivalent\" APIs in managed code, we decided that these upper bits should always be cleared to zero. While this provides an \"easier to use\" API that is also considered less \"error prone\", it also comes with a perf hit that can be viewed as unacceptable in certain scenarios.\r\n\r\nAs such, I propose we expose additional `CreateScalarUnsafe` methods which allow the user to explicitly opt-into leaving the upper bits \"unset\".\r\n\r\n### Proposed API\r\n\r\n```csharp\r\npublic abstract class Vector64\r\n{\r\n    public static Vector64<byte> CreateScalarUnsafe(byte value);\r\n    public static Vector64<double> CreateScalarUnsafe(double value);\r\n    public static Vector64<short> CreateScalarUnsafe(short value);\r\n    public static Vector64<int> CreateScalarUnsafe(int value);\r\n    public static Vector64<long> CreateScalarUnsafe(long value);\r\n    public static Vector64<sbyte> CreateScalarUnsafe(sbyte value);\r\n    public static Vector64<float> CreateScalarUnsafe(float value);\r\n    public static Vector64<ushort> CreateScalarUnsafe(ushort value);\r\n    public static Vector64<uint> CreateScalarUnsafe(uint value);\r\n    public static Vector64<ulong> CreateScalarUnsafe(ulong value);\r\n}\r\n\r\npublic abstract class Vector128\r\n{\r\n    public static Vector128<byte> CreateScalarUnsafe(byte value);\r\n    public static Vector128<double> CreateScalarUnsafe(double value);\r\n    public static Vector128<short> CreateScalarUnsafe(short value);\r\n    public static Vector128<int> CreateScalarUnsafe(int value);\r\n    public static Vector128<long> CreateScalarUnsafe(long value);\r\n    public static Vector128<sbyte> CreateScalarUnsafe(sbyte value);\r\n    public static Vector128<float> CreateScalarUnsafe(float value);\r\n    public static Vector128<ushort> CreateScalarUnsafe(ushort value);\r\n    public static Vector128<uint> CreateScalarUnsafe(uint value);\r\n    public static Vector128<ulong> CreateScalarUnsafe(ulong value);\r\n}\r\n\r\npublic abstract class Vector256\r\n{\r\n    public static Vector256<byte> CreateScalarUnsafe(byte value);\r\n    public static Vector256<double> CreateScalarUnsafe(double value);\r\n    public static Vector256<short> CreateScalarUnsafe(short value);\r\n    public static Vector256<int> CreateScalarUnsafe(int value);\r\n    public static Vector256<long> CreateScalarUnsafe(long value);\r\n    public static Vector256<sbyte> CreateScalarUnsafe(sbyte value);\r\n    public static Vector256<float> CreateScalarUnsafe(float value);\r\n    public static Vector256<ushort> CreateScalarUnsafe(ushort value);\r\n    public static Vector256<uint> CreateScalarUnsafe(uint value);\r\n    public static Vector256<ulong> CreateScalarUnsafe(ulong value);\r\n}\r\n```\r\n\r\n### Additional Notes\r\n\r\nIdeally this would simply be handled by codegen, such as via \"peephole optimizations\". However, given that these are performance-oriented APIs, we have no peephole optimizations in the JIT today, there may be cases that the JIT will never be able to handle, and the lack of such functionality is already showing up on various perf measurements for ported code: it was determined that providing this \"back-door\" might still be desirable.\r\n\r\nAnother suggestion that was brought up was changing `CreateScalar(T value)` to be `CreateScalar(T value, bool zeroUpper = true)`. This would, for existing usages (and for the default behavior, if `zeroUpper` was not specified) return \"deterministic\" results and would allow users to explicitly opt-into leaving the upper bits unset. However, it was determined that this does not match the current API conventions we generally follow and that exposing it as `CreateScalarUnsafe` might be better."},{"Id":"8561023705","Type":"IssuesEvent","CreatedAt":"2018-11-09T04:26:06","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33053","RelatedDescription":"Closed issue \"[Discussion] Fixing up the double parser to be IEEE compliant\" (#33053) at dotnet/corefx","RelatedBody":"### Summary\r\n\r\nToday, the `System.Double` and `System.Single` parser will return incorrect values for various inputs. This is tracked by a number of issues, such as: https://github.com/dotnet/coreclr/issues/17467, https://github.com/dotnet/coreclr/issues/1316, and https://github.com/dotnet/coreclr/issues/19802.\r\n\r\nAfter have done some research, reviewing the IEEE spec, etc; I believe I know the path forward but it will be a bit more involved than initially expected. There are a lot of resources about IEEE compliance around the web, but one of the most cited and well-put together collections is the \"Exploring Binary\" blog. Another point of reference is the \"Correctly Rounded Binary-Decimal and Decimal-Binary Conversions\" paper by David M. Gay (which is generally considered to be the \"gold standard\" implementation).\r\n\r\n### Today's Implementation\r\n\r\nToday, we have almost all the relevant parsing/formatting code under `System.Number` in System.Private.Corelib (the class itself is split into multiple files). One of the `core` types is `NumberBuffer` which is shared between both the formatting and parsing code. However, this type will only consider at most 50 significant digits and for the IEEE double (binary64) type, you must consider at most 768 digits to correctly round. This many digits are needed because you must be able to process the largest \"exact\" string for the smallest representable denormal value plus a rounding digit (which will control whether you actually return the smallest representable denormal or the next value above it).\r\n\r\n### Proposal\r\n\r\nI propose we split `NumberBuffer` into two types. The first is an `IntegerBuffer`, which is identical to the current layout and can be used to process integer values, which always require less than 50 digits (even `Int128`, if we were to support it, only requires 39 digits). The other type would be a buffer which is used to support floating-point values, and would consist of most of the same fields, but would track the unbiased-exponent (rather than the scale) and would have a linked-list of 50 digit character buffers (due to the assumption that most input strings will be less than 50 digits long, and more than that is only needed for edge cases).\r\n* The MSVCRT implementation uses a \"fixed-sized\" buffer of 768 characters here, so I don't believe stack size will be a concern, and such space will only be used/needed to support the \"worst case scenario\".\r\n* An alternative to using linked lists would be to just fallback to `StringBuilder` for the edge cases, which would also allow us to support `Quad` eventually (which requires at most 11564 digits to be processed)\r\n\r\nWe can then look into updating the rest of the parsing code to be \"correct\" and performant. The code we have today is already correct and generally fast for a number of inputs, as it attempts to use a well-known shortcut and multiply the mantissa by the exponent to compute the correct result. However, this is only valid for a number of inputs (generally speaking those that compute a result containing less than 16 digits) and you must fallback to BigInteger arithmetic for the outliers (in the worst case we need 464 bytes in this BigInteger to process the smallest denormal double value).\r\n\r\n### Some Numbers\r\n\r\nTo compute the number of significant digits in the smallest representable denormal value you do:\r\n```\r\nx = d + floor(log10((2^m - 1) / 2^d)) + 2\r\nwhere d = absolute value of the minimum exponent + explicit mantissa bits\r\nwhere m = implicit mantissa bits\r\nwhere x = max significant digits required (includes rounding digit)\r\n```\r\n\r\nThen to compute the number of big integer bits needed to process the smallest representable denormal value you do:\r\n```\r\ny = d + floor(log2(10^x)) + 1 + 32\r\nwhere d = absolute value of the minimum exponent + explicit mantissa bits\r\nwhere x = max significant digits required\r\nwhere y = max bits needed in a big integer\r\n```\r\n\r\nType   | Implicit Mantissa Bits | Maximum Exponent | Maximum Digits\r\n------ | ---------------------- | ---------------- | --------------\r\nHalf   | 11                     | 15               | 22\r\nSingle | 24                     | 127              | 113\r\nDouble | 53                     | 1023             | 768\r\nQuad   | 113                    | 16383            | 11564\r\n\r\nThe explicit mantissa bits is `(implicit - 1)`\r\nThe minimum exponent is `(1 - max)`"},{"Id":"8561023040","Type":"PullRequestEvent","CreatedAt":"2018-11-09T04:25:50","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33356","RelatedDescription":"Opened pull request \"Use DSA (base class) PKCS8 import for DSACng\" (#33356) at dotnet/corefx","RelatedBody":"CNG's PKCS8 reader for DSA seems to incorrectly process keys whose X value is\r\nencoded in fewer bytes than Q.  Switching to the Pkcs8 import methods\r\nprovided directly on the DSA class means that any key properties that CNG\r\nwanted to set via PKCS8 attributes won't make it; but rather than make for an\r\ninconsistent story with the ~1/256 imports which would have this issue, just\r\ngive up on the attribute/property import for DSA.\r\n\r\nSince DSA isn't a popular algorithm, this feature hasn't shipped, and\r\n(unlike CNG ECDSA keys) no attributes are really expected, this shouldn't be\r\nmuch of a problem.\r\n\r\nFixes #33313."},{"Id":"8560988430","Type":"PullRequestEvent","CreatedAt":"2018-11-09T04:11:59","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33355","RelatedDescription":"Opened pull request \"Porting the Roslyn RealParser tests to cover some well-known troublesome values\" (#33355) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8560978796","Type":"IssuesEvent","CreatedAt":"2018-11-09T04:08:22","Actor":"akinohana","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6548","RelatedDescription":"Opened issue \"5 million  times of List<T>.Add will cause program hang in GC even memory useage was little\" (#6548) at dotnet/corert","RelatedBody":"5 million times of List<T>.Add will cause program to hang in GC even memory usage was little\r\n\r\n\r\n```\r\n\r\n\t    static void test()\r\n\t    {\r\n\r\n\t\t    List<Test2> test = new List<Test2>();\r\n\r\n\t\t    Test2 t2;\r\n\t\t    t2.y = 11;\r\n\r\n\t\t\tStopwatch stopwatch = new Stopwatch();\r\n\t\t    stopwatch.Start();\r\n\t\t    for (int i = 0; i < 5000000; i++)\r\n\t\t    {\r\n\r\n\t\t\t    //vectorEmplaceBack(vectorFunctions.pVector,&t2);\r\n\t\t\t    test.Add(t2);\r\n\t\t    }\r\n\t\t    stopwatch.Stop();\r\n\t\t    Console.WriteLine(\"c# time:\" + stopwatch.ElapsedMilliseconds);\r\n\r\n\t\t}\r\n```\r\n\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/29968862/48242821-ec060b80-e417-11e8-8bd9-3f7824369efe.png)\r\n\r\n\r\nmemory usage at the time of hang was 60MB in taskmgr\r\n\r\nwas static linked in C++ with x64 release ,however I believe it can reproduce in other cases"},{"Id":"8560599485","Type":"PullRequestEvent","CreatedAt":"2018-11-09T02:03:56","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6547","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6547) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8560583064","Type":"PullRequestEvent","CreatedAt":"2018-11-09T01:58:59","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6546","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6546) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jorive"},{"Id":"8560276351","Type":"PullRequestEvent","CreatedAt":"2018-11-09T00:26:14","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6546","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6546) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8559534913","Type":"PullRequestEvent","CreatedAt":"2018-11-08T21:34:50","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6545","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6545) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"8559221173","Type":"PullRequestEvent","CreatedAt":"2018-11-08T20:36:15","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6545","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6545) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8558374071","Type":"PullRequestEvent","CreatedAt":"2018-11-08T18:04:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6544","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6544) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8558343503","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:58:29","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6544","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6544) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8558310434","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:52:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6539","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#6539) at dotnet/corert","RelatedBody":""},{"Id":"8558305186","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:51:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6542","RelatedDescription":"Merged pull request \"Refactor the CPAOT compiler to stop using ValueTuple\" (#6542) at dotnet/corert","RelatedBody":"Per Michal's suggestion I have removed the two value tuple types\r\nI used in my initial CPAOT changes. I have verified by manually\r\ncopying over the modified files that with these changes I can build\r\nthe ILCompiler.ReadyToRUn project from within ProjectN. I'll send\r\nout the CR adding the new project once this change has been\r\nmerged into CoreRT and integrated to ProjectN.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8558300469","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:50:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6541","RelatedDescription":"Merged pull request \"Update CoreFX\" (#6541) at dotnet/corert","RelatedBody":""},{"Id":"8558298386","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:50:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6540","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6540) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @tannergooding @GrabYourPitchforks @wfurt @GrabYourPitchforks @stephentoub @tannergooding @fiigii @tannergooding @GrabYourPitchforks"},{"Id":"8558263350","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:44:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6543","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6543) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8558112628","Type":"PullRequestEvent","CreatedAt":"2018-11-08T17:18:35","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6543","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6543) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8557033484","Type":"PullRequestEvent","CreatedAt":"2018-11-08T14:47:15","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6542","RelatedDescription":"Opened pull request \"Refactor the CPAOT compiler to stop using ValueTuple\" (#6542) at dotnet/corert","RelatedBody":"Per Michal's suggestion I have removed the two value tuple types\r\nI used in my initial CPAOT changes. I have verified by manually\r\ncopying over the modified files that with these changes I can build\r\nthe ILCompiler.ReadyToRUn project from within ProjectN. I'll send\r\nout the CR adding the new project once this change has been\r\nmerged into CoreRT and integrated to ProjectN.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8559883709","Type":"IssuesEvent","CreatedAt":"2018-11-08T22:45:29","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2654","RelatedDescription":"Opened issue \"PresentationFramework not found in SelfContainedDeployments\" (#2654) at dotnet/sdk","RelatedBody":"_From @rido-min on November 8, 2018 22:29_\n\n# PresentationFramework not found in SelfContainedDeployments\r\n\r\n1 - Create WPF app `dotnet new wpf`\r\n2 - Create a Publishing Profile with Self Contained and a RID:\r\n```xml\r\n  <PropertyGroup>\r\n    <PublishProtocol>FileSystem</PublishProtocol>\r\n    <Configuration>Release</Configuration>\r\n    <Platform>Any CPU</Platform>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PublishDir>bin\\Release\\netcoreapp3.0\\publishSCD\\</PublishDir>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <SelfContained>true</SelfContained>\r\n    <_IsPortable>false</_IsPortable>\r\n  </PropertyGroup>\r\n```\r\nAfter publish, the output exe does nothing, but running `dotnet myapp.dll` returns\r\n\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n```\r\n\r\nI also reviewed the folder, and PresentationFramework.dll is not there.\r\n\r\nI'm running:\r\n\r\n```\r\nNET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009736\r\n Commit:    d273cdc5af\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009736\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview1-27031-02\r\n  Commit:  16fc8e9125\r\n```\n\n_Copied from original issue: dotnet/core#2044_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1055215025982398465","CreatedAt":"2018-10-24T21:50:41+00:00","UserScreenname":"dotnet","Text":"Bringing .NET application performance analysis to Linux https://t.co/jivjRwPVBM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":61,"RawContent":null},{"Id":"1054879096981704704","CreatedAt":"2018-10-23T23:35:50+00:00","UserScreenname":"dotnet","Text":".NET Core Source Code Analysis with Intel® VTune™ Amplifier https://t.co/2I1YLWYbKb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":27,"RawContent":null},{"Id":"1054829662738608128","CreatedAt":"2018-10-23T20:19:24+00:00","UserScreenname":"dotnet","Text":"Call For Participation: .NET and TypeScript at FOSDEM conference https://t.co/xjDh49lbko","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":12,"RawContent":null},{"Id":"1053032574933581824","CreatedAt":"2018-10-18T21:18:24+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2018 Preview of Quality Rollup\n\nhttps://t.co/P6vAFbZLAa","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-11-09T05:30:29.6315007Z","RunDurationInMilliseconds":8079}