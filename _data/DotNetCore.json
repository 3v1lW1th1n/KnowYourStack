{"Data":{"Blog":{"FeedItems":[{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7697516495","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:04:23","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Merged pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7833724480","Type":"IssuesEvent","CreatedAt":"2018-06-16T02:23:53","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18478","RelatedDescription":"Closed issue \"Question: Does profiling API support Linux?\" (#18478) at dotnet/coreclr","RelatedBody":"This was originally posted by @dotnetjt . To avoid pinging the subscribers to our announcement issue (#15136) with a potentially ongoing discussion I moved it here:\r\n\r\n> Hi @noahfalk - just wondering if the profiling API support for Linux went out in 2.1. I've been coding off and on, still working against a 2.1 preview.\r\n> I fired up a new Ubuntu server and installed the 2.1 runtime, and set up environment to point to my (portable) profiler library and it doesn't even attempt to load. I'm pretty sure it's not me as ldd shows that I'm not missing any libraries, so all of my static linking is fine.\r\n> Only other thing I can think of is that 2.1 doesn't support it yet.\r\n\r\nGlad you reached out and sorry its causing you trouble! Linux is fully supported ([profiler status page](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/profiling-api-status.md)) so this should work.\r\n\r\nIf you have a repro I could help diagnose the problem, or if you are set up to [debug the runtime](https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md) (you don't need SOS, regular C++ debugging is fine) you could set a breakpoint at https://github.com/dotnet/coreclr/blob/master/src/vm/profilinghelper.cpp#L690 and then see what fails.\r\n"},{"Id":"7833686224","Type":"IssuesEvent","CreatedAt":"2018-06-16T01:49:21","Actor":"pjanotti","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18488","RelatedDescription":"Closed issue \"Profiler flag to ignore NGEN doesn't seem to be working\" (#18488) at dotnet/coreclr","RelatedBody":"/cc @noahfalk \r\n\r\nThese [comments](https://github.com/dotnet/coreclr/pull/11040#issuecomment-298004449) indicate that the flag `COR_PRF_DISABLE_ALL_NGEN_IMAGES` can be used to force jitting of precompiled methods. However, this is not working for `System.Private.CoreLib.dll` in CoreFx with OpenCover, which does specify the flag and works when the IL version of S.P.C.dll is used instead.\r\n\r\nIf this is something that can be changed on the short run I may be able to drop some work to restore CI coverage for S.P.C.dll (Windows only)."},{"Id":"7833664564","Type":"PullRequestEvent","CreatedAt":"2018-06-16T01:30:47","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18502","RelatedDescription":"Opened pull request \"Allow ILCodeVersion to fallback to default IL\" (#18502) at dotnet/coreclr","RelatedBody":"For compat with profilers that used our APIs in unexpected ways we can allow\r\nthe ILCodeVersion to fallback to the default IL code when no IL was explicitly\r\ngiven.\r\n\r\nThis is the 2.1 port for #18448\r\n"},{"Id":"7833652179","Type":"IssuesEvent","CreatedAt":"2018-06-16T01:20:15","Actor":"bartonjs","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18501","RelatedDescription":"Opened issue \"Add an aggressively-clear GC mode\" (#18501) at dotnet/coreclr","RelatedBody":"There are workstreams which have higher than average requirements about being defensive against in-memory sniffing and heapdumps.  For those customers, the clear-on-use behavior of the garbage collector may be a reason that they cannot use .NET, or may cause them a lot of regulatory/compliance paperwork to use .NET.\r\n\r\nWhile the primary responsibility of clearing sensitive data would fall on the application, there's a fair amount of platform code which makes temporaries and leaves them to the GC.  Additionally, immutable types (such as `string`) have no \"good\" mechanism for clearing their data.\r\n\r\nRather than making the majority of applications have a performance penalty of a lot of small memory clears, this behavior would be behind an opt-in.\r\n\r\nWhen in the aggressively clearing mode, the GC would clear the memory assigned to an object when that object has been declared to be \"garbage\", and calling applications would be able to get a moderate cleanup of potentially sensitive data by manually invoking `GC.Collect()`."},{"Id":"7833573414","Type":"PullRequestEvent","CreatedAt":"2018-06-16T00:23:51","Actor":"acmyu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18500","RelatedDescription":"Opened pull request \"R2RDump - Output GcSlot liveness interweaved with disasm instructions\" (#18500) at dotnet/coreclr","RelatedBody":""},{"Id":"7833566620","Type":"PullRequestEvent","CreatedAt":"2018-06-16T00:19:37","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18499","RelatedDescription":"Opened pull request \"genPutArgStk needs to check for FIELD_LIST first\" (#18499) at dotnet/coreclr","RelatedBody":"When a struct is passed on the stack using `FIELD_LIST`, the type of the `FIELD_LIST` is the type of its first field. If that type was a struct type (i.e. a SIMD type), `genPutArgStk` would assume that it was the non-`FIELD_LIST` case.\r\n\r\nFix #18497"},{"Id":"7833486852","Type":"PullRequestEvent","CreatedAt":"2018-06-15T23:36:41","Actor":"acmyu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18474","RelatedDescription":"Merged pull request \"R2RDump - Get GC slot liveness code offset\" (#18474) at dotnet/coreclr","RelatedBody":""},{"Id":"7833486181","Type":"PullRequestEvent","CreatedAt":"2018-06-15T23:36:19","Actor":"acmyu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18379","RelatedDescription":"Merged pull request \"R2RDump - Print disassembly to text buffer\" (#18379) at dotnet/coreclr","RelatedBody":"I've added a variant of the disasm tools in the llilc repo that dumps to buffer: https://github.com/dotnet/llilc/pull/1086"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7832895968","Type":"PullRequestEvent","CreatedAt":"2018-06-15T20:25:12","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9505","RelatedDescription":"Opened pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#9505) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7832857565","Type":"PullRequestEvent","CreatedAt":"2018-06-15T20:15:30","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9473","RelatedDescription":"Merged pull request \"Update VS insertion package name\" (#9473) at dotnet/cli","RelatedBody":"This will allow 2.1.2xx and 2.1.4xx to be separate components in the VS installer."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7830571777","Type":"IssuesEvent","CreatedAt":"2018-06-15T12:14:03","Actor":"panost","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/770","RelatedDescription":"Closed issue \"[Question] Nullable Ref Types\" (#770) at dotnet/standard","RelatedBody":"I don't ask if are they plans for it, but if it is possible (for technological POV) to support Nullable Ref Types (C# 8.0) annotations even if none of the supported frameworks has them?\r\n\r\nFor example String.Replace to be defined in .NET Standard as \r\n\r\n> public string String.Replace(string oldValue,string? newValue);\r\n\r\neven if none of the supported frameworks has this annotation ?\r\n"},{"Id":"7828631070","Type":"IssuesEvent","CreatedAt":"2018-06-15T02:45:19","Actor":"gongdo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/476","RelatedDescription":"Closed issue \"Unit Test project(.NET 4.7) cannot load System.ValueTuple\" (#476) at dotnet/standard","RelatedBody":"> (The original issue was reported by Gyuwon Yi from here: https://developercommunity.visualstudio.com/content/problem/102236/unit-test-projectnet-47-cannot-load-systemvaluetup.html )\r\n\r\nUnit Test project(.NET 4.7) referencing .NET Core library using value tuple cannot load System.ValueTuple assembly.\r\nBut console client application works correctly.\r\nYou can repro with code from https://github.com/gyuwon/ValueTypeTestingProblem\r\n\r\nThe whole message:\r\n\r\n> Test Name: Bar_returns_value_tuple_correctly\r\n> Test FullName: ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly\r\n> Test Source: c:\\users\\gyuwon\\Documents\\Projects\\ValueTupleTesting\\ValueTupleTestsNet47\\FooService_specs.cs : line 16\r\n> Test Outcome: Failed\r\n> Test Duration: 0:00:00.0261781 Result StackTrace: at ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly()\r\n> Result Message: \r\n> Test method ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly threw exception: \r\n> System.IO.FileLoadException: Could not load file or assembly 'System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nAs I replied on the original issue, it can be solved by making library project to target multiple frameworks.\r\nBut it's just a work-around, not a solution.\r\nI think it's not a single ValueTuple problem. There's some referencing issue on .NET Standard 2.0.\r\nFor example this issue on Azure Function(Web Job) project with .NET Standard 2.0 library, looks like similar: https://github.com/Azure/azure-webjobs-sdk-script/issues/1792"},{"Id":"7827023981","Type":"IssuesEvent","CreatedAt":"2018-06-14T19:02:04","Actor":"Rutix","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/775","RelatedDescription":"Opened issue \"[Question] Why does the releasenotes link to .NET Core?\" (#775) at dotnet/standard","RelatedBody":"In slack someone pointed out that the releasenotes link at https://www.nuget.org/packages/NETStandard.Library/2.0.3 points to https://github.com/dotnet/core/tree/master/release-notes (using an go.microsoft link). Why is this? I noticed that not all version of .NET Standard have seperate releasenotes, is this the reason?"},{"Id":"7819553637","Type":"PullRequestEvent","CreatedAt":"2018-06-13T15:18:33","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/773","RelatedDescription":"Merged pull request \"Add diagnostic logging to trimming\" (#773) at dotnet/standard","RelatedBody":"Enable diagnostic logging to help understand the state of the task if a failure occurs.\r\n\r\nAlso guard against unpopulated dependencies."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7833870363","Type":"IssuesEvent","CreatedAt":"2018-06-16T04:50:26","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29696","RelatedDescription":"Closed issue \"Exception.HResult setter should be made public\" (#29696) at dotnet/corefx","RelatedBody":"Currently The setter on Exception.HResult is protected. If customer need to set a different HResult for a specific exception, customer has to create a derived exception to override.\r\n\r\n## Rationale and Usage\r\n\r\nIt is very common to set a different HResult for interop area due to compatibility reason --- Interop should return same HResult as the code is called/implemented by native code.\r\n\r\nFor example:\r\n\r\nhttps://github.com/dotnet/corefx/blob/02a26f8f417967e31bab8d96605d3d8846154e8a/src/System.Runtime.WindowsRuntime/src/System/IO/NetFxToWinRtStreamAdapter.cs#L195\r\n\r\nException.SetErrorCode is an internal API. The HResult for ObjectDisposedException is 0x80131622 and RO_E_CLOSED is 0x80000013\r\n\r\n``` c++\r\n        if (_fClosed)\r\n        {\r\n            return RO_E_CLOSED;\r\n        }\r\n```\r\n\r\n\r\nWith this change, you can directly assign HResult and remove SetErrorCode internal API.\r\n``` c#\r\nex. HResult  = __HResults.RO_E_CLOSED;\r\n```\r\n\r\n## Proposed API\r\n\r\n``` c#\r\n    public partial class Exception : System.Runtime.Serialization.ISerializable\r\n    {\r\n        // Existing members\r\n        // public int HResult { get { throw null; } protected set { } }\r\n         // Proposed members\r\n         public int HResult { get { throw null; } set { } }\r\n    }\r\n```\r\n\r\n## Details\r\n\r\nThere are other ways to achieve this:\r\n-     Change Exception.SetErrorCode from Internal to public API \r\n      Pro: a lot of existing code already use this API, less code change\r\n      Con:  More complicated than proposed one. There are two ways to change HResult(Derived from exists exception and use Exception.SetErrorCode API). \r\n\r\n-     Add a new public API in Marshal which update HResult for an exception\r\n      Pro: It works\r\n      Con: Complicated and customer have to know this new Marshal API exists.\r\n\r\nOverall,  Make Exception.HResult setter to public is simpler way to do this.\r\n\r\n\r\n"},{"Id":"7833783448","Type":"PullRequestEvent","CreatedAt":"2018-06-16T03:19:26","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/30446","RelatedDescription":"Closed pull request \"Update BuildTools to the latest build\" (#30446) at dotnet/corefx","RelatedBody":"I need to get new BuildTools to continue working on #29831. I made this change separate so it can go in without being blocked by the latest coreclr in #30438."},{"Id":"7833783014","Type":"PullRequestEvent","CreatedAt":"2018-06-16T03:19:01","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30438","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC, Standard to preview1-02915-01, preview1-26616-01, preview1-26615-01, preview1-26615-02, beta-26615-00, beta-26615-00, servicing-26419-02, respectively (master)\" (#30438) at dotnet/corefx","RelatedBody":""},{"Id":"7833704154","Type":"PullRequestEvent","CreatedAt":"2018-06-16T02:05:28","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30446","RelatedDescription":"Opened pull request \"Update BuildTools to the latest build\" (#30446) at dotnet/corefx","RelatedBody":"I need to get new BuildTools to continue working on #29831. I made this change separate so it can go in without being blocked by the latest coreclr in #30438."},{"Id":"7833702152","Type":"IssuesEvent","CreatedAt":"2018-06-16T02:03:46","Actor":"MohammadHamdyGhanem","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30445","RelatedDescription":"Closed issue \"Add Enumerable.HasElements method\" (#30445) at dotnet/corefx","RelatedBody":"In this LinQ:\r\n```\r\nvar result = (from int N in new[] { 1, -2, 3 }\r\n                where N < 0\r\n                select N).Take(1);\r\n\r\nif (result.Count() > 0)\r\n    Console.WriteLine(result.First());\r\n```\r\n\r\n```result.Count()``` will execute a count query, then ```result.First``` will execute a Take(1) query, which is not sufficient. I solve this by using:\r\n\r\n```\r\nforeach (var item in result)\r\n{\r\n   Console.WriteLine(item);\r\n   break;\r\n}\r\n```\r\n\r\nOr:\r\n```\r\ntry\r\n{\r\n  Console.WriteLine(result.First());\r\n}\r\ncatch { }\r\n```\r\n\r\nBut they booth seem ugly!\r\nI suggest to add a HasElements() extension Method to the Enumerable and Queryable classes, so than we can write:\r\n\r\n```\r\nif (result.HasElements( ))\r\n    Console.WriteLine(result.First());\r\n```\r\n\r\nHasElements should return true after finding one element, which is stored in a private field to be uses as the return value of the First() method and ElementAt(0) method, without re-executing the query again!\r\n\r\nAnother approach is to add another method named IfFirst, which return value if (bool exists, T Item), so we can write:\r\n```\r\nvar r = result.IfFirst()\r\nif (r.Exists( ))\r\n    Console.WriteLine(r.Item);\r\n```\r\n\r\n"},{"Id":"7833682609","Type":"PullRequestEvent","CreatedAt":"2018-06-16T01:46:16","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30439","RelatedDescription":"Merged pull request \"Cleanup BinaryFormatterHelpers usage\" (#30439) at dotnet/corefx","RelatedBody":"In most projects BinaryFormatterHelpers.cs was still referenced but not used. Also removed two test files that had completely redundant tests."},{"Id":"7833678348","Type":"PullRequestEvent","CreatedAt":"2018-06-16T01:42:25","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30437","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#30437) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7833779380","Type":"IssuesEvent","CreatedAt":"2018-06-16T03:15:28","Actor":"NMSAzulX","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27783","RelatedDescription":"Closed issue \"Low perfomance?\" (#27783) at dotnet/roslyn","RelatedBody":"![35ff256d677f72565c72a10c0772083001d79bcdeac3908aa338fd729e7bf75d](https://user-images.githubusercontent.com/16236903/41338187-ff93edca-6f23-11e8-9523-9d3db5eb6ac5.png)\r\n\r\nReally?  Why??"},{"Id":"7833765265","Type":"IssuesEvent","CreatedAt":"2018-06-16T03:01:49","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27197","RelatedDescription":"Reopened issue \"Cannot turn off \"'if' statement can be simplified\"\" (#27197) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.8.0 Preview 2.0 [27723.0.d15.8]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Try flipping the setting back and forth from `false` to `true:suggestion` with a VS restart in between. The setting is being cached someone I cannot figure out.\r\n\r\n.editorconfig\r\n```\r\nroot = true\r\n\r\n[*.{cs,vb}]\r\ndotnet_style_prefer_conditional_expression_over_return = false\r\n```\r\n\r\n``` C#\r\n    class Program\r\n    {\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj is string other)\r\n            {\r\n                return Equals(other);\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\n**Expected Behavior**:\r\nNo suggestion\r\n\r\n**Actual Behavior**:\r\n```\r\nMessage\tIDE0046\t'if' statement can be simplified\tConsoleApp372\tC:\\Users\\davkean\\Source\\Repos\\ConsoleApp372\\Program.cs\t9\tActive\r\n\r\n```\r\n\r\n"},{"Id":"7833742258","Type":"IssuesEvent","CreatedAt":"2018-06-16T02:40:30","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27197","RelatedDescription":"Closed issue \"Cannot turn off \"'if' statement can be simplified\"\" (#27197) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.8.0 Preview 2.0 [27723.0.d15.8]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Try flipping the setting back and forth from `false` to `true:suggestion` with a VS restart in between. The setting is being cached someone I cannot figure out.\r\n\r\n.editorconfig\r\n```\r\nroot = true\r\n\r\n[*.{cs,vb}]\r\ndotnet_style_prefer_conditional_expression_over_return = false\r\n```\r\n\r\n``` C#\r\n    class Program\r\n    {\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj is string other)\r\n            {\r\n                return Equals(other);\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\n**Expected Behavior**:\r\nNo suggestion\r\n\r\n**Actual Behavior**:\r\n```\r\nMessage\tIDE0046\t'if' statement can be simplified\tConsoleApp372\tC:\\Users\\davkean\\Source\\Repos\\ConsoleApp372\\Program.cs\t9\tActive\r\n\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7833745083","Type":"PullRequestEvent","CreatedAt":"2018-06-16T02:43:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5920","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#5920) at dotnet/corert","RelatedBody":""},{"Id":"7833738863","Type":"PullRequestEvent","CreatedAt":"2018-06-16T02:37:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5950","RelatedDescription":"Opened pull request \"Delete PinnableBufferCache\" (#5950) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/18360 to CoreRT"},{"Id":"7833677084","Type":"PullRequestEvent","CreatedAt":"2018-06-16T01:41:13","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5949","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5949) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7833564961","Type":"PullRequestEvent","CreatedAt":"2018-06-16T00:18:36","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5949","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5949) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7833558833","Type":"PullRequestEvent","CreatedAt":"2018-06-16T00:14:58","Actor":"maryamariyan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5946","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5946) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7833238394","Type":"PullRequestEvent","CreatedAt":"2018-06-15T21:57:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5948","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5948) at dotnet/corert","RelatedBody":""},{"Id":"7833237042","Type":"PullRequestEvent","CreatedAt":"2018-06-15T21:57:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5947","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5947) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7833025683","Type":"PullRequestEvent","CreatedAt":"2018-06-15T20:57:47","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5947","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5947) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7832269030","Type":"PullRequestEvent","CreatedAt":"2018-06-15T17:53:02","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5946","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5946) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7828880875","Type":"PullRequestEvent","CreatedAt":"2018-06-15T04:38:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5945","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5945) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7828701173","Type":"PullRequestEvent","CreatedAt":"2018-06-15T03:14:12","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5945","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5945) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7833403799","Type":"IssuesEvent","CreatedAt":"2018-06-15T22:59:09","Actor":"kygagner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2340","RelatedDescription":"Opened issue \"Modification of project file properties / items in targets\" (#2340) at dotnet/sdk","RelatedBody":"Prior to the Microsoft.NET.Sdk props/targets I was not aware of any properties or items typically specified in a project file which were subject to change by build targets. Now that is not the case.\r\n\r\nExample:\r\nThe IncludeTransitiveProjectReferences target adds elements to the ProjectReference item.\r\n\r\nConsequences:\r\n\r\n- The '[Common MSBuild Project Properties](https://msdn.microsoft.com/en-us/library/bb629394.aspx)', various source file and reference items, as well as information in '[MSBuild Reserved and Well-Known Properties](https://msdn.microsoft.com/en-us/library/ms164309.aspx)' are a kind of API surface. They are a source of reliable information about the project being built. If these are changed during property evaluation or in a build target, then there is nothing secure left to base a build process off of.\r\n- Changing such properties and items during the execution of a build target is more impactful than doing so during property evaluation because the unknown effect of the target is conditional upon its execution and the order of its execution with respect to the target it impacts. This is the case I ran in to when I noticed a difference in my build script behavior during Rebuild vs. Build (IncludeTransitiveProjectReferences runs before my targets if the Clean target executes first).\r\n- Worse still, if the BeforeTargets and AfterTargets attributes are used, an issue with order dependency may be further exacerbated by nondeterminism.\r\n\r\nMSBuild is an extensible tool. Customers depend not just on Microsoft's scripts to drive their build, but also to provide extension points for their own build processes. A claim of backward compatibility for these extension points (e.g. the BuildDependsOn and CleanDependsOn properties) is not made, and this is tolerable. The point of pain here is that hidden implementation detail now causes uncertainty about information written in the project file."},{"Id":"7833271390","Type":"PullRequestEvent","CreatedAt":"2018-06-15T22:08:12","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2339","RelatedDescription":"Opened pull request \"Packtool supress all dependency via nuget\" (#2339) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/cli/issues/9109\r\n\r\nUse new nguet feature SuppressDependenciesOnPacking to avoid set all as private asset"},{"Id":"7833261580","Type":"IssuesEvent","CreatedAt":"2018-06-15T22:04:55","Actor":"jceddy","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2338","RelatedDescription":"Opened issue \"Since installing SDK 2.1.3, getting GenerateDepsFile error\" (#2338) at dotnet/sdk","RelatedBody":"Since I installed the 2.1.3 SDK, I have started getting this error when building a solution that previously built correctly:\r\n\r\n> Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\n> Error\tMSB4018\tThe \"GenerateDepsFile\" task failed unexpectedly.\r\n> System.ArgumentException: Can not add property Company.Product.Server.Core/3.1.2.0 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.\r\n>    at Newtonsoft.Json.Linq.JObject.ValidateToken(JToken o, JToken existing)\r\n>    at Newtonsoft.Json.Linq.JContainer.InsertItem(Int32 index, JToken item, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JObject.InsertItem(Int32 index, JToken item, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.Add(Object content)\r\n>    at Newtonsoft.Json.Linq.JObject..ctor(Object content)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTarget(IReadOnlyList`1 libraries)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTargets(DependencyContext context)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context, Stream stream)\r\n>    at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore()\r\n>    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tOATI.webVision.Server.Core\tC:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t128\t\r\n\r\nI've looked around the web and haven't been able to find any kind of solution. Is this a known issue?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1007054749512814592","CreatedAt":"2018-06-14T00:18:57+00:00","UserScreenname":"dotnet","Text":"Using .NET and Docker Together – DockerCon 2018 Update https://t.co/ZYju7lEGqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":138,"FavoriteCount":76,"RawContent":null},{"Id":"1007012327353454594","CreatedAt":"2018-06-13T21:30:22+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz tomorrow to learn how to use @AppInsights with your #ASP.NET Core project. https://t.co/pSofjdde2Y","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"1005426264029753345","CreatedAt":"2018-06-09T12:27:55+00:00","UserScreenname":"dotnet","Text":"Tune in today at 10a ET / 7a PT / 14:00 UTC / 8p IST and learn about global tools along with Jeff. https://t.co/hqxNjfqPMq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1005082168442449920","CreatedAt":"2018-06-08T13:40:37+00:00","UserScreenname":"dotnet","Text":"Tune in with Jeff as he works through the tutorials to learn F#.  Ask questions, and learn along with him https://t.co/rntL0szWYX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-06-16T05:30:34.9048062Z","RunDurationInMilliseconds":8574}