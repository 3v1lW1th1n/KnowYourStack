{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null},{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in which the Framework throws an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9466613471","Type":"PullRequestEvent","CreatedAt":"2019-04-18T05:28:14","Actor":"jorive","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24082","RelatedDescription":"Opened pull request \"[WIP] If IPC connections fails, then remove active session.\" (#24082) at dotnet/coreclr","RelatedBody":"## Before\r\n\r\nIf the connected client listening to events over IPC disconnects without previously sending a stop command, then\r\n\r\n- The EventPipe session would stay active while silently failing to send data,\r\n- Clients would not be able to reconnect (we currently support a single session)\r\n\r\n## After\r\n\r\nIf the connected client listening to events over IPC disconnects without previously sending a stop command, then we remove the currently active session to allow for new connections."},{"Id":"9466408912","Type":"PullRequestEvent","CreatedAt":"2019-04-18T04:22:30","Actor":"andy-ms","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24081","RelatedDescription":"Opened pull request \"Improve LOH heap balancing\" (#24081) at dotnet/coreclr","RelatedBody":"Previously in `balance_heaps_loh`, we would default to `org_hp` being\r\n`acontext->get_alloc_heap()`.\r\n\r\nSince `alloc_large_object` is an instance method, that ultimately came\r\nfrom the heap instance this was called on. In `GCHeap::Alloc` that came\r\nfrom `acontext->get_alloc_heap()` (this is a different acontext). That\r\nvariable is set when we allocate a small object. So the heap we were\r\nallocating large objects on was affected by the heap we were allocating\r\nsmall objects on. This isn't necessary as small object heap and large\r\nobject heaps have separate areas. In scenarios with limited memory, we\r\ncan unnecessarily run out of memory by refusing to move away from that\r\nhea. However, we do want to ensure that the large object heap accessed\r\nis not on a different numa node than the small object heap.\r\n\r\nI experimented with adding a `get_loh_alloc_heap()` to acontext similar\r\nto the SOH alloc heap, but performance tests showed that it was usually\r\nbetter to just start from the home heap. The chosen policy was:\r\n\r\n* Start searching from the home heap -- this is the one corresponding to\r\nour processor.\r\n\r\n* Have a low (but non-zero) preference for that heap (dd_min_size(dd) /\r\n2), as long as we stay within the same numa node.\r\n\r\n* Have a higher cost of switching to a different numa node. However,\r\nthis is still much less than before; it was dd_min_size(dd) * 4, now\r\ndd_min_size(dd) * 3 / 2.\r\n\r\nThis showed big performance improvements (over 30% less time) in a\r\nscenario with lots of LOH allocation where there were fewer allocating\r\nthreads than GC heaps. The changes were more pronounced the more we\r\nallocated large objects vs small objects. There was usually slight\r\nimprovement (1-2%) when there were 48 constantly allocating threads and\r\n48 heaps. The one place we did see a slight regression was in an 800MB\r\ncontainer and 4 allocating threads on a 48 processor machine; however,\r\nsimilar tests with less memory or more threads were prone to running out\r\nof memory or running very slow on the master branch, so we've improved\r\nstability. Previously the gc could get lucky by having the SOH choice\r\nhappen to be a good choice for LOH, but we shouldn't be relying on it as\r\nit failed in some container scenarios.\r\n\r\nOne more change is in joined_generation_to_condemn: If there is a memory\r\nlimit and we are about to OOM, we should always do a compacting GC. This\r\nhelps avoid the OOM and feeds into the next change.\r\n\r\nThis PR also adds a *second* balance_heaps_loh function for when there\r\nis a memory limit and we previously failed to allocate into the chosen\r\nheap. `balance_heaps_loh` works based on allocation budgets, whereas\r\n`balance_heaps_loh_hard_limit_retry` works on the actual space available\r\nat the end of the segment. Thanks to the change to\r\njoined_generation_to_condemn the heaps should be compact, so not looking\r\nat free space here."},{"Id":"9465995478","Type":"PullRequestEvent","CreatedAt":"2019-04-18T02:19:10","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24080","RelatedDescription":"Opened pull request \"Allow UpperVector Save and Restore without base type\" (#24080) at dotnet/coreclr","RelatedBody":"Fixes an issue with crossgen on Arm64/linux"},{"Id":"9465912604","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:55:37","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24078","RelatedDescription":"Closed issue \"[x64] Assert failure: FitsIn<unsigned short>(EHSize)\" (#24078) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs0x1000/800/\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 98461 [0x0001809d], Thread: 98541 [0x180ed]): FitsIn<unsigned short>(EHSize)\r\n      File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x1000/src/vm/dynamicmethod.cpp Line: 1118\r\n      Image: /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x1000/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-x64/dotnet\r\n```"},{"Id":"9465813611","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:26:47","Actor":"mjsabby","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24079","RelatedDescription":"Opened pull request \"Large Pages on Linux in Embedded GC\" (#24079) at dotnet/coreclr","RelatedBody":"PTAL @Maoni0 @janvorli "},{"Id":"9465797081","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:21:57","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24078","RelatedDescription":"Opened issue \"[x64] Assert failure: FitsIn<unsigned short>(EHSize)\" (#24078) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs0x1000/800/\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 98461 [0x0001809d], Thread: 98541 [0x180ed]): FitsIn<unsigned short>(EHSize)\r\n      File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x1000/src/vm/dynamicmethod.cpp Line: 1118\r\n      Image: /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x1000/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-x64/dotnet\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9466222593","Type":"PullRequestEvent","CreatedAt":"2019-04-18T03:24:04","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11188","RelatedDescription":"Merged pull request \"Insert latest 2.1.6xx SDK.\" (#11188) at dotnet/cli","RelatedBody":"Bump SDK version to `2.1.600-preview-64018-02`.\r\n"},{"Id":"9466047858","Type":"PullRequestEvent","CreatedAt":"2019-04-18T02:34:15","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11189","RelatedDescription":"Merged pull request \"Insert latest 2.2.2xx SDK.\" (#11189) at dotnet/cli","RelatedBody":"Bump SDK version to `2.2.200-preview-64018-01`."},{"Id":"9465879522","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:45:59","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11189","RelatedDescription":"Opened pull request \"Insert latest 2.2.2xx SDK.\" (#11189) at dotnet/cli","RelatedBody":"Bump SDK version to `2.2.200-preview-64018-01`."},{"Id":"9465872308","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:43:53","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11188","RelatedDescription":"Opened pull request \"Insert latest 2.1.6xx SDK.\" (#11188) at dotnet/cli","RelatedBody":"Bump SDK version to `2.1.600-preview-64018-02`.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9465852850","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Merged pull request \"Reorder members\" (#1151) at dotnet/standard","RelatedBody":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced."},{"Id":"9465710476","Type":"PullRequestEvent","CreatedAt":"2019-04-18T00:56:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Opened pull request \"Fix Range.GetOffsetAndLength()\" (#1154) at dotnet/standard","RelatedBody":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*"},{"Id":"9465704387","Type":"PullRequestEvent","CreatedAt":"2019-04-18T00:54:17","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Opened pull request \"Respond to change in .NET Core simplify Index and Range\" (#1153) at dotnet/standard","RelatedBody":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies Index and Range: instead of having to provide indexers that take Index and Range, the compiler can lower Index automatically and allows indexing via Range to be expressed via a method called Slice. Both make the feature more useful for interfaces where adding members isn't easily possible."},{"Id":"9465615288","Type":"PullRequestEvent","CreatedAt":"2019-04-18T00:27:40","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Opened pull request \"Implement IEquatable on Memory<T>\" (#1152) at dotnet/standard","RelatedBody":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586"},{"Id":"9465583429","Type":"PullRequestEvent","CreatedAt":"2019-04-18T00:18:21","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Opened pull request \"Reorder members\" (#1151) at dotnet/standard","RelatedBody":"**No API change**\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted."},{"Id":"9460961582","Type":"PullRequestEvent","CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1150) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n"},{"Id":"9460830198","Type":"PullRequestEvent","CreatedAt":"2019-04-17T12:03:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1150) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n"},{"Id":"9457947851","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:50:13","Actor":"yyjdelete","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Opened issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149) at dotnet/standard","RelatedBody":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)"},{"Id":"9452679478","Type":"PullRequestEvent","CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1148) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n"},{"Id":"9452610455","Type":"PullRequestEvent","CreatedAt":"2019-04-16T12:04:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1148) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9466443354","Type":"IssuesEvent","CreatedAt":"2019-04-18T04:34:05","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36987","RelatedDescription":"Opened issue \"Refactor Utf8JsonWriter code to remove code duplication\" (#36987) at dotnet/corefx","RelatedBody":"The Utf8JsonWriter DCR here: https://github.com/dotnet/corefx/pull/36961 introduced some code duplication which can be re-factored into helper methods to avoid duplication (for example writing property names, or using write literal helper for formatted numbers as well, etc.)."},{"Id":"9466427197","Type":"PullRequestEvent","CreatedAt":"2019-04-18T04:28:42","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/36985","RelatedDescription":"Closed pull request \"[WIP]  Check if calls to Utf8Formatter.TryFormat float fail on x86 in CI\" (#36985) at dotnet/corefx","RelatedBody":"Can't get a local repro or get access to the failing machine so trying different things in CI."},{"Id":"9466401828","Type":"IssuesEvent","CreatedAt":"2019-04-18T04:20:08","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36986","RelatedDescription":"Closed issue \"Float formatting writing in scientific notation on Windows x86 rather than standard format ('G')\" (#36986) at dotnet/corefx","RelatedBody":"Writing floats is failing **only on** `Windows.10.Amd64.ClientRS5.Open-x86-Release`, i.e. **Windows and x86**, where its writing the float in scientific notation rather than following the 'G':\r\n\r\nFor example check the following where I get an isolated repro: https://github.com/dotnet/corefx/pull/36985/commits/cef2e42b9c11cf3c28853540016c9f426c836b0b from https://github.com/dotnet/corefx/pull/36985\r\n\r\nThis came up in Utf8JsonWriter use case where the test is failing [WriteNumberValueSingle](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36961~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.66/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FWriteNumberValueSingle(formatted:%20False,%20skipValidation:%20False)):\r\n```text\r\nAssert.Equal() Failure\r\n            ↓ (pos 2)\r\nExpected: [12345678,12345678,12345678,12345678,123456···\r\nActual:   [1.234568E+07,1.234568E+07,1.234568E+07,1.2···\r\n            ↑ (pos 2)\r\n```\r\n\r\nSame issue with `12345680`\r\n\r\nTried the following:\r\n```C#\r\n        [Fact]\r\n        public void TestWritingFloat1()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345678, output, out int bytesWritten));\r\n            \r\n            string expectedStr = \"12345678\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        [Fact]\r\n        public void TestWritingFloat2()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345680, output, out int bytesWritten));\r\n\r\n            string expectedStr = \"12345680\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        private bool WriteNumberValueMinimized(float value, byte[] output, out int bytesWritten)\r\n        {\r\n            return Utf8Formatter.TryFormat(value, output, out bytesWritten);\r\n        }\r\n```\r\n\r\n**Expected something like the following (since all bytes should match):** And we do get this behavior on other OSes and on Windows-x64.\r\n```text\r\nMessage :\r\n8, 8, 8, \r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in /Users/vsts/agent/2.149.2/work/1/s/src/System.Text.Json/tests/Utf8JsonWriterTests.cs:line 3013\r\n```\r\n\r\n[TestWritingFloat1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat1)\r\n\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 2978\r\n```\r\n\r\n[TestWritingFloat2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3006\r\n```\r\n\r\n[TestWritingFloatIBW1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW1)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3051\r\n```\r\n\r\n[TestWritingFloatIBW2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,6, 54,7, 56,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3098\r\n```\r\n\r\ncc @tannergooding, @jkotas, @GrabYourPitchforks "},{"Id":"9466343927","Type":"PullRequestEvent","CreatedAt":"2019-04-18T04:01:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36946","RelatedDescription":"Merged pull request \"Fix SocketsHttpHandler streams to do sync I/O in sync methods\" (#36946) at dotnet/corefx","RelatedBody":"SocketsHttpHandler hands back response Streams for reading response body content.  While we encourage developers to use the async Stream APIs, Stream does expose synchronous APIs, yet the current implementations are just wrapping the async ones and doing sync-over-async.\r\n\r\nThis fixes the response stream synchronous APIs to be sync down to the underlying networking stream.\r\n\r\nIt also fixes a couple other minor issues, e.g. Flush{Async} on read-only stream should be nops rather than throwing, we should include an error message about a stream being read-only when trying to write to it, etc.\r\n\r\ncc: @davidsh, @wfurt, @karelz"},{"Id":"9466319253","Type":"IssuesEvent","CreatedAt":"2019-04-18T03:53:25","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36986","RelatedDescription":"Opened issue \"Float formatting writing in scientific notation on Windows x86 rather than standard format ('G')\" (#36986) at dotnet/corefx","RelatedBody":"Writing floats is failing **only on** `Windows.10.Amd64.ClientRS5.Open-x86-Release`, i.e. **Windows and x86**, where its writing the float in scientific notation rather than following the 'G':\r\n\r\nFor example check the following where I get an isolated repro: https://github.com/dotnet/corefx/pull/36985/commits/cef2e42b9c11cf3c28853540016c9f426c836b0b from https://github.com/dotnet/corefx/pull/36985\r\n\r\nThis came up in Utf8JsonWriter use case where the test is failing [WriteNumberValueSingle](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36961~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.66/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FWriteNumberValueSingle(formatted:%20False,%20skipValidation:%20False)):\r\n```text\r\nAssert.Equal() Failure\r\n            ↓ (pos 2)\r\nExpected: [12345678,12345678,12345678,12345678,123456···\r\nActual:   [1.234568E+07,1.234568E+07,1.234568E+07,1.2···\r\n            ↑ (pos 2)\r\n```\r\n\r\nSame issue with `12345680`\r\n\r\nTried the following:\r\n```C#\r\n        [Fact]\r\n        public void TestWritingFloat1()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345678, output, out int bytesWritten));\r\n            \r\n            string expectedStr = \"12345678\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        [Fact]\r\n        public void TestWritingFloat2()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345680, output, out int bytesWritten));\r\n\r\n            string expectedStr = \"12345680\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        private bool WriteNumberValueMinimized(float value, byte[] output, out int bytesWritten)\r\n        {\r\n            return Utf8Formatter.TryFormat(value, output, out bytesWritten);\r\n        }\r\n```\r\n\r\n**Expected something like the following (since all bytes should match):** And we do get this behavior on other OSes and on Windows-x64.\r\n```text\r\nMessage :\r\n8, 8, 8, \r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in /Users/vsts/agent/2.149.2/work/1/s/src/System.Text.Json/tests/Utf8JsonWriterTests.cs:line 3013\r\n```\r\n\r\n[TestWritingFloat1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat1)\r\n\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 2978\r\n```\r\n\r\n[TestWritingFloat2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3006\r\n```\r\n\r\n[TestWritingFloatIBW1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW1)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3051\r\n```\r\n\r\n[TestWritingFloatIBW2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,6, 54,7, 56,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3098\r\n```\r\n\r\ncc @tannergooding, @jkotas, @GrabYourPitchforks "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9466104147","Type":"PullRequestEvent","CreatedAt":"2019-04-18T02:49:57","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35103","RelatedDescription":"Opened pull request \"Revoke IVTs to dotnet/roslyn-analyzers\" (#35103) at dotnet/roslyn","RelatedBody":"Closes #35102"},{"Id":"9465920046","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:57:45","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35102","RelatedDescription":"Opened issue \"Revoke IVTs to unit tests in dotnet/roslyn-analyzers\" (#35102) at dotnet/roslyn","RelatedBody":""},{"Id":"9465917942","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:57:07","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35101","RelatedDescription":"Opened issue \"Migrate ALM IVTs to the External Access pattern\" (#35101) at dotnet/roslyn","RelatedBody":"Applies to **Microsoft.VisualStudio.Alm.Shared.CodeAnalysisClient**."},{"Id":"9465886171","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:47:56","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35100","RelatedDescription":"Opened issue \"C# semantic model returns a single candidate symbol for chained queries and generic vs non-generic overloads\" (#35100) at dotnet/roslyn","RelatedBody":"```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace ThenIncludeIntellisenseBug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var registrations = new List<Registration>().AsQueryable();\r\n            var reg = registrations.Include(r => r.Activities).ThenInclude(c => c.$$);\r\n        }\r\n    }\r\n\r\n    public class Registration\r\n    {\r\n        public ICollection<Activity> Activities { get; set; }\r\n    }\r\n\r\n    public class Activity\r\n    {\r\n        public Task Task { get; set; }\r\n    }\r\n\r\n    public class Task\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public interface IIncludableQueryable<out TEntity, out TProperty> : IQueryable<TEntity>\r\n    {\r\n    }\r\n\r\n    public static class EntityFrameworkQuerybleExtensions\r\n    {\r\n        public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(\r\n            this IQueryable<TEntity> source,\r\n            Expression<Func<TEntity, TProperty>> navigationPropertyPath)\r\n            where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n\r\n        public static IIncludableQueryable<Registration, Task> ThenInclude(\r\n            this IIncludableQueryable<Registration, ICollection<Activity>> source,\r\n            Func<Activity, Task> navigationPropertyPath)\r\n        {\r\n            return default(IIncludableQueryable<Registration, Task>);\r\n        }\r\n\r\n        public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(\r\n            this IIncludableQueryable<TEntity, TPreviousProperty> source,\r\n            Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n    }\r\n}\r\n```\r\n`c` before $$ can be either Activity or ICollection<Activity>. One can replace $$ with `Task `or with `First()`. Both are valid. However, intellisense is provided for `First() `and other collection methods. `Task `is not available in intellisense.\r\n\r\nThis happens because C# semantic model provides just a single candidate for the method symbol."},{"Id":"9465785984","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:18:38","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35099","RelatedDescription":"Opened issue \"Migrate Xamarin IVTs to the External Access pattern\" (#35099) at dotnet/roslyn","RelatedBody":""},{"Id":"9465780591","Type":"IssuesEvent","CreatedAt":"2019-04-18T01:16:58","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35098","RelatedDescription":"Opened issue \"Remove old Microsoft.VisualStudio.InteractiveServices project and IVTs\" (#35098) at dotnet/roslyn","RelatedBody":""},{"Id":"9465731158","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:02:13","Actor":"jp2masa","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35097","RelatedDescription":"Opened pull request \"Use Machine.Arm64 instead of raw value\" (#35097) at dotnet/roslyn","RelatedBody":"## Changes\r\n- Use `Machine.Arm64` instead of raw value.\r\n\r\nThese cases were probably missed on #27023."},{"Id":"9465665890","Type":"IssuesEvent","CreatedAt":"2019-04-18T00:42:50","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35096","RelatedDescription":"Opened issue \"VisualBasic semantic model does not recognize overloads at chained queries\" (#35096) at dotnet/roslyn","RelatedBody":"```\r\nImports System.Linq.Expressions\r\n\r\nNamespace ThenIncludeIntellisenseBug\r\n\r\n    Class Program\r\n        Shared Sub Main(args As String())\r\n            Dim registrations = New List(Of Registration)().AsQueryable()\r\n            Dim reg = registrations.Include(Function(r) r.Activities).ThenInclude(Function(a, b, c) c.F)\r\n        End Sub\r\n    End Class\r\n\r\n    Friend Class Registration\r\n        Public Property Activities As ICollection(Of Activity)\r\n    End Class\r\n\r\n    Public Class Activity\r\n        Public Property Task As Task\r\n    End Class\r\n\r\n    Public Class Task\r\n        Public Property Name As String\r\n    End Class\r\n\r\n    Public Interface IIncludableQueryable(Of Out TEntity, Out TProperty)\r\n        Inherits IQueryable(Of TEntity)\r\n    End Interface\r\n\r\n    Public Module EntityFrameworkQuerybleExtensions\r\n        <System.Runtime.CompilerServices.Extension>\r\n        Public Function Include(Of TEntity, TProperty)(\r\n                                                      source As IQueryable(Of TEntity),\r\n                                                      navigationPropertyPath As Expression(Of Func(Of TEntity, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)\r\n            Return Nothing\r\n        End Function\r\n\r\n        <System.Runtime.CompilerServices.Extension>\r\n        Public Function ThenInclude(Of TEntity, TPreviousProperty, TProperty)(\r\n                                                                             source As IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty)),\r\n                                                                             navigationPropertyPath As Expression(Of Func(Of String, TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)\r\n            Return Nothing\r\n        End Function\r\n\r\n        <System.Runtime.CompilerServices.Extension>\r\n        Public Function ThenInclude(Of TEntity, TPreviousProperty, TProperty)(\r\n                                                                             source As IIncludableQueryable(Of TEntity, TPreviousProperty),\r\n                                                                             navigationPropertyPath As Expression(Of Func(Of String, String, TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)\r\n            Return Nothing\r\n        End Function\r\n\r\n    End Module\r\nEnd Namespace\r\n```\r\n\r\nVB displays the following diagnostic\r\n`BC36532\tNested function does not have the same signature as delegate 'Func(Of String, Activity, Object)'.\t`\r\n\r\nThen, if place caret after F and you type CTRL+J, it would provide completion for object not for ICollection<>.\r\n\r\nCompare with C#\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace ThenIncludeIntellisenseBug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var registrations = new List<Registration>().AsQueryable();\r\n            var reg = registrations.Include(r => r.Activities).ThenInclude((a, b, c) => c.F);\r\n        }\r\n    }\r\n\r\n    internal class Registration\r\n    {\r\n        public ICollection<Activity> Activities { get; set; }\r\n    }\r\n\r\n    public class Activity\r\n    {\r\n        public Task Task { get; set; }\r\n    }\r\n\r\n    public class Task\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public interface IIncludableQueryable<out TEntity, out TProperty> : IQueryable<TEntity>\r\n    {\r\n    }\r\n\r\n    public static class EntityFrameworkQuerybleExtensions\r\n    {\r\n        public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(\r\n            this IQueryable<TEntity> source,\r\n            Expression<Func<TEntity, TProperty>> navigationPropertyPath)\r\n            where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n\r\n        public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(\r\n            this IIncludableQueryable<TEntity, ICollection<TPreviousProperty>> source,\r\n            Expression<Func<string, TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n\r\n        public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(\r\n            this IIncludableQueryable<TEntity, TPreviousProperty> source,\r\n            Expression<Func<string, string, TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nC# provides \r\n`CS1061\t'ICollection<Activity>' does not contain a definition for 'F' and no accessible extension method 'F' accepting a first argument of type 'ICollection<Activity>' could be found (are you missing a using directive or an assembly reference?)`\r\nand it works properly with CTRL + J.\r\n"},{"Id":"9465600947","Type":"PullRequestEvent","CreatedAt":"2019-04-18T00:23:31","Actor":"ryzngard","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35095","RelatedDescription":"Opened pull request \"Add new ConversionKind to IsImplicitConversion test\" (#35095) at dotnet/roslyn","RelatedBody":"Fixes #34984 \r\n\r\n`UnsertConversionKind` was added by [this commit](https://github.com/dotnet/roslyn/commit/9160b423#diff-61c14d55196186c0f71024c92e5a382fR11) but the switch statement wasn't updated. "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9465023036","Type":"PullRequestEvent","CreatedAt":"2019-04-17T22:01:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7320","RelatedDescription":"Opened pull request \"Update objwriter version\" (#7320) at dotnet/corert","RelatedBody":""},{"Id":"9464188483","Type":"PullRequestEvent","CreatedAt":"2019-04-17T19:42:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7319","RelatedDescription":"Merged pull request \"Increase official build Linux job timeout\" (#7319) at dotnet/corert","RelatedBody":"We need more time when building the object writer package. 120 is probably overboard (we timed out while copying artifacts around), but it matches the Windows job timeout."},{"Id":"9464187565","Type":"PullRequestEvent","CreatedAt":"2019-04-17T19:41:59","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7319","RelatedDescription":"Opened pull request \"Increase official build Linux job timeout\" (#7319) at dotnet/corert","RelatedBody":"We need more time when building the object writer package. 120 is probably overboard (we timed out while copying artifacts around), but it matches the Windows job timeout."},{"Id":"9463720557","Type":"PullRequestEvent","CreatedAt":"2019-04-17T18:29:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7318","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7318) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @tarekgh"},{"Id":"9463246611","Type":"PullRequestEvent","CreatedAt":"2019-04-17T17:17:28","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7318","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7318) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9462724297","Type":"IssuesEvent","CreatedAt":"2019-04-17T16:01:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7317","RelatedDescription":"Closed issue \"Unable to load DLL 'clrcompression.dll'\" (#7317) at dotnet/corert","RelatedBody":"## Stack trace\r\n\r\n```\r\nUnhandled Exception: System.IO.Compression.ZLibException: The underlying compression routine could not be loaded correctly. ---> System.DllNotFoundException: Unable to load DLL 'clrcompression.dll': The specified module could not be found.\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0xef\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x4f\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvoke(InteropHelpers.MethodFixupCell*) + 0x3e\r\n   at Interop.zlib.InflateInit2_(ZLibNative.ZStream&, Int32) + 0x41\r\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32) + 0x40\r\n   at System.IO.Compression.ZLibNative.CreateZLibStreamForInflate(ZLibNative.ZLibStreamHandle&, Int32) + 0x4e\r\n   at System.IO.Compression.Inflater.InflateInit(Int32) + 0x45\r\n```\r\n\r\n## Command\r\n\r\n```\r\ndotnet publish -r win-x64\r\n```\r\n\r\n## Environment\r\n\r\n.NET Core 3.0 or 2.2\r\nWindows 10 1809 x64\r\n\r\nRuns fine with CoreCLR."},{"Id":"9462704716","Type":"IssuesEvent","CreatedAt":"2019-04-17T15:59:05","Actor":"NextTurn","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7317","RelatedDescription":"Opened issue \"Unable to load DLL 'clrcompression.dll'\" (#7317) at dotnet/corert","RelatedBody":"## Stack trace\r\n\r\n```\r\nUnhandled Exception: System.IO.Compression.ZLibException: The underlying compression routine could not be loaded correctly. ---> System.DllNotFoundException: Unable to load DLL 'clrcompression.dll': The specified module could not be found.\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0xef\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x4f\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvoke(InteropHelpers.MethodFixupCell*) + 0x3e\r\n   at Interop.zlib.InflateInit2_(ZLibNative.ZStream&, Int32) + 0x41\r\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32) + 0x40\r\n   at System.IO.Compression.ZLibNative.CreateZLibStreamForInflate(ZLibNative.ZLibStreamHandle&, Int32) + 0x4e\r\n   at System.IO.Compression.Inflater.InflateInit(Int32) + 0x45\r\n```\r\n\r\n## Command\r\n\r\n```\r\ndotnet publish -r win-x64\r\n```\r\n\r\n## Environment\r\n\r\n.NET Core 3.0 or 2.2\r\nWindows 10 1809 x64\r\n\r\nRuns fine with CoreCLR."},{"Id":"9461391898","Type":"PullRequestEvent","CreatedAt":"2019-04-17T13:22:43","Actor":"tannergooding","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7316","RelatedDescription":"Opened pull request \"Updating the roslyn toolset to 3.1.0-beta3-19213-02\" (#7316) at dotnet/corert","RelatedBody":"CC. @jkotas \r\n\r\nThis brings in the latest nullability changes and the new `readonly members` feature, which will be needed for changes like https://github.com/dotnet/coreclr/pull/23827"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9465945456","Type":"PullRequestEvent","CreatedAt":"2019-04-18T02:04:40","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3137","RelatedDescription":"Opened pull request \"Update NuGet\" (#3137) at dotnet/sdk","RelatedBody":"Insert NuGet 5.1.0-rtm.5921\r\n\r\nSyncs with the version inserted to dotnet/toolset here: https://github.com/dotnet/toolset/pull/593"},{"Id":"9465932437","Type":"PullRequestEvent","CreatedAt":"2019-04-18T02:00:57","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3136","RelatedDescription":"Opened pull request \"Allow disabling apphost\" (#3136) at dotnet/sdk","RelatedBody":"Don't try to find apphost packs if UseAppHost is not true.\r\n\r\nThere was a regression in global tool installation caught by the GivenDotnetInstallTool.ItRunsWithTheSpecifiedVerbosity test in the cli repo.  This is a targeted change to enable fixing that (the dummy restore.proj will need to set UseAppHost to false too), in order to unblock https://github.com/dotnet/cli/pull/11166.\r\n\r\nThis is related to #3135, but this PR is a more surgical fix than the broader questions in that bug."},{"Id":"9465803641","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:23:52","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3117","RelatedDescription":"Merged pull request \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3117) at dotnet/sdk","RelatedBody":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.1.6xx branch"},{"Id":"9465802183","Type":"PullRequestEvent","CreatedAt":"2019-04-18T01:23:27","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3116","RelatedDescription":"Merged pull request \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3116) at dotnet/sdk","RelatedBody":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.2.2xx branch"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"434596259","IsPullRequest":true,"CreatedAt":"2019-04-18T05:28:13","Actor":"jorive","Number":"24082","RawContent":null,"Title":"[WIP] If IPC connections fails, then remove active session.","State":"open","Body":"## Before\r\n\r\nIf the connected client listening to events over IPC disconnects without previously sending a stop command, then\r\n\r\n- The EventPipe session would stay active while silently failing to send data,\r\n- Clients would not be able to reconnect (we currently support a single session)\r\n\r\n## After\r\n\r\nIf the connected client listening to events over IPC disconnects without previously sending a stop command, then we remove the currently active session to allow for new connections.","Url":"https://github.com/dotnet/coreclr/pull/24082","RelatedDescription":"Open PR \"[WIP] If IPC connections fails, then remove active session.\" (#24082)"},{"Id":"434584003","IsPullRequest":true,"CreatedAt":"2019-04-18T04:22:29","Actor":"andy-ms","Number":"24081","RawContent":null,"Title":"Improve LOH heap balancing","State":"open","Body":"Previously in `balance_heaps_loh`, we would default to `org_hp` being\r\n`acontext->get_alloc_heap()`.\r\n\r\nSince `alloc_large_object` is an instance method, that ultimately came\r\nfrom the heap instance this was called on. In `GCHeap::Alloc` that came\r\nfrom `acontext->get_alloc_heap()` (this is a different acontext). That\r\nvariable is set when we allocate a small object. So the heap we were\r\nallocating large objects on was affected by the heap we were allocating\r\nsmall objects on. This isn't necessary as small object heap and large\r\nobject heaps have separate areas. In scenarios with limited memory, we\r\ncan unnecessarily run out of memory by refusing to move away from that\r\nhea. However, we do want to ensure that the large object heap accessed\r\nis not on a different numa node than the small object heap.\r\n\r\nI experimented with adding a `get_loh_alloc_heap()` to acontext similar\r\nto the SOH alloc heap, but performance tests showed that it was usually\r\nbetter to just start from the home heap. The chosen policy was:\r\n\r\n* Start searching from the home heap -- this is the one corresponding to\r\nour processor.\r\n\r\n* Have a low (but non-zero) preference for that heap (dd_min_size(dd) /\r\n2), as long as we stay within the same numa node.\r\n\r\n* Have a higher cost of switching to a different numa node. However,\r\nthis is still much less than before; it was dd_min_size(dd) * 4, now\r\ndd_min_size(dd) * 3 / 2.\r\n\r\nThis showed big performance improvements (over 30% less time) in a\r\nscenario with lots of LOH allocation where there were fewer allocating\r\nthreads than GC heaps. The changes were more pronounced the more we\r\nallocated large objects vs small objects. There was usually slight\r\nimprovement (1-2%) when there were 48 constantly allocating threads and\r\n48 heaps. The one place we did see a slight regression was in an 800MB\r\ncontainer and 4 allocating threads on a 48 processor machine; however,\r\nsimilar tests with less memory or more threads were prone to running out\r\nof memory or running very slow on the master branch, so we've improved\r\nstability. Previously the gc could get lucky by having the SOH choice\r\nhappen to be a good choice for LOH, but we shouldn't be relying on it as\r\nit failed in some container scenarios.\r\n\r\nOne more change is in joined_generation_to_condemn: If there is a memory\r\nlimit and we are about to OOM, we should always do a compacting GC. This\r\nhelps avoid the OOM and feeds into the next change.\r\n\r\nThis PR also adds a *second* balance_heaps_loh function for when there\r\nis a memory limit and we previously failed to allocate into the chosen\r\nheap. `balance_heaps_loh` works based on allocation budgets, whereas\r\n`balance_heaps_loh_hard_limit_retry` works on the actual space available\r\nat the end of the segment. Thanks to the change to\r\njoined_generation_to_condemn the heaps should be compact, so not looking\r\nat free space here.","Url":"https://github.com/dotnet/coreclr/pull/24081","RelatedDescription":"Open PR \"Improve LOH heap balancing\" (#24081)"},{"Id":"434560767","IsPullRequest":true,"CreatedAt":"2019-04-18T02:19:10","Actor":"CarolEidt","Number":"24080","RawContent":null,"Title":"Allow UpperVector Save and Restore without base type","State":"open","Body":"Fixes an issue with crossgen on Arm64/linux","Url":"https://github.com/dotnet/coreclr/pull/24080","RelatedDescription":"Open PR \"Allow UpperVector Save and Restore without base type\" (#24080)"},{"Id":"434549953","IsPullRequest":false,"CreatedAt":"2019-04-18T01:55:36","Actor":"VincentBu","Number":"24078","RawContent":null,"Title":"[x64] Assert failure: FitsIn<unsigned short>(EHSize)","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs0x1000/800/\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 98461 [0x0001809d], Thread: 98541 [0x180ed]): FitsIn<unsigned short>(EHSize)\r\n      File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x1000/src/vm/dynamicmethod.cpp Line: 1118\r\n      Image: /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x1000/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-x64/dotnet\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24078","RelatedDescription":"Closed issue \"[x64] Assert failure: FitsIn<unsigned short>(EHSize)\" (#24078)"},{"Id":"434550994","IsPullRequest":true,"CreatedAt":"2019-04-18T01:26:47","Actor":"mjsabby","Number":"24079","RawContent":null,"Title":"Large Pages on Linux in Embedded GC","State":"open","Body":"PTAL @Maoni0 @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/24079","RelatedDescription":"Open PR \"Large Pages on Linux in Embedded GC\" (#24079)"},{"Id":"434548098","IsPullRequest":false,"CreatedAt":"2019-04-18T01:11:53","Actor":"VincentBu","Number":"24077","RawContent":null,"Title":"[x64] Error : No space left on device ","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_osx10.12/29040/\r\n\r\n**Log:**\r\n```\r\n/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/.dotnet/sdk/2.1.503/NuGet.targets(114,5): error : No space left on device [/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/src/Common/test_dependencies/test_dependencies.csproj] [/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/src/Common/test_dependencies/test_dependencies.csproj]\r\n/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/Tools/packageresolve.targets(48,5): error MSB3073: The command \"\"/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/../.dotnet/dotnet\" restore --packages \"/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/../packages\" --source https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json --source https://dotnetfeed.blob.core.windows.net/dotnet-coreclr/index.json --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json --source https://api.nuget.org/v3/index.json /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/src/Common/test_dependencies/test_dependencies.csproj /p:TargetGroup= /p:ConfigurationGroup= /p:ArchGroup= /p:OSGroup=OSX /p:TargetFramework=netcoreapp3.0  \" exited with code 1. [/Users/dotnet-bot/j/workspace/dotnet_coreclr/master/checked_osx10.12/tests/src/Common/test_dependencies/test_dependencies.csproj]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24077","RelatedDescription":"Open issue \"[x64] Error : No space left on device \" (#24077)"},{"Id":"434536673","IsPullRequest":true,"CreatedAt":"2019-04-18T00:11:31","Actor":"bbartels","Number":"24076","RawContent":null,"Title":"Fixed ChunkEnumerator.Current NRE","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/36973\r\n\r\nTo keep in line with IEnumerable behaviour, ChunkEnumerator should throw an InvalidOperationException as well, if MoveNext() has not been called yet.\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n    var sb = new StringBuilder();\r\n    sb.Insert(0, new [] {'t', 'e', 's', 't'});\r\n    var enumerator = sb.GetChunks();\r\n    Console.WriteLine(enumerator.Current);\r\n}\r\n```\r\n\r\nBefore:\r\n\r\n`Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Text.StringBuilder.ChunkEnumerator.get_Current()\r\n   at ConsoleApp.Program.Main(String[] args) in C:\\repos\\ConsoleApp\\Program.cs:line 19`\r\n\r\nAfter:\r\n\r\n`Unhandled Exception: System.InvalidOperationException: Enumeration has either not started or has already finished.\r\n   at System.Text.StringBuilder.ChunkEnumerator.get_Current()\r\n   at ConsoleApp.Program.Main(String[] args) in C:\\repos\\ConsoleApp\\Program.cs:line 19\r\n`\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24076","RelatedDescription":"Open PR \"Fixed ChunkEnumerator.Current NRE\" (#24076)"},{"Id":"434530094","IsPullRequest":true,"CreatedAt":"2019-04-17T23:39:36","Actor":"jkotas","Number":"24075","RawContent":null,"Title":"Move R2R-specific code to be outside FEATURE_PREJIT","State":"open","Body":"This refactoring is preparation for disabling fragile NGen support in the runtime. It keeps fragile-NGen specific code under FEATURE_PREJIT and moves the code required to support R2R to be outside FEATURE_PREJIT.\r\n\r\nThe eventual goal is to compile the runtime without FEATURE_PREJIT defined to avoid fragile-NGen specific overhead.","Url":"https://github.com/dotnet/coreclr/pull/24075","RelatedDescription":"Open PR \"Move R2R-specific code to be outside FEATURE_PREJIT\" (#24075)"},{"Id":"434428695","IsPullRequest":true,"CreatedAt":"2019-04-17T23:35:11","Actor":"cshung","Number":"24068","RawContent":null,"Title":"Removing the unnecessary friend relationship","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24068","RelatedDescription":"Closed or merged PR \"Removing the unnecessary friend relationship\" (#24068)"},{"Id":"434523509","IsPullRequest":true,"CreatedAt":"2019-04-17T23:11:21","Actor":"jkotas","Number":"24074","RawContent":null,"Title":"Skip type sanity checks for CoreLib","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24074","RelatedDescription":"Open PR \"Skip type sanity checks for CoreLib\" (#24074)"},{"Id":"434520224","IsPullRequest":false,"CreatedAt":"2019-04-17T22:57:31","Actor":"noahfalk","Number":"24073","RawContent":null,"Title":"Verify EventPipe scalability","State":"open","Body":"We had a report from a user on a machine with a 20 core CPU group that a hot lock in EventPipe (EventPipeBufferManager::m_lock) was causing excessive spinning in EventPipeBufferManager::AllocateBufferForThread. There was conflicting evidence about whether or not the system was sustaining high event load. Regardless of the specifics of that case, we need to validate that EventPipe scales well.\r\n\r\nWe should create a performance test that will EventPipe use from a large number of cores (>= 20) reading with both EventListener and IPC. We should then compare a low load case (1 event/sec/thread) with a high load case (maximum sustainable event rate on all threads) and compare the latency distribution in calls to WriteEvent. A first stab at a goal is probably that P50 latency increases no more than 10% and P99 latency increases no more than 50%.","Url":"https://github.com/dotnet/coreclr/issues/24073","RelatedDescription":"Open issue \"Verify EventPipe scalability\" (#24073)"},{"Id":"434421074","IsPullRequest":true,"CreatedAt":"2019-04-17T22:23:03","Actor":"briansull","Number":"24067","RawContent":null,"Title":"Fix for Desktop build break","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24067","RelatedDescription":"Closed or merged PR \"Fix for Desktop build break\" (#24067)"},{"Id":"434508772","IsPullRequest":true,"CreatedAt":"2019-04-17T22:13:58","Actor":"omajid","Number":"24072","RawContent":null,"Title":"Add a destructor for sos::GCHeap","State":"open","Body":"The constructor allocates memory via `new []`. It should be freed up via `delete []` by a destructor to avoid a memory leak.\r\n\r\n(I am not familiar with this codebase, so I would appreciate it if someone can review this change with the assumption that it is broken.)","Url":"https://github.com/dotnet/coreclr/pull/24072","RelatedDescription":"Open PR \"Add a destructor for sos::GCHeap\" (#24072)"},{"Id":"434498260","IsPullRequest":true,"CreatedAt":"2019-04-17T21:40:05","Actor":"AndyAyersMS","Number":"24071","RawContent":null,"Title":"JIT: fix arm64 crossgen simd issue","State":"open","Body":"Need to check `supportSIMDType()` and not `featureSIMD` in rationalize.\r\n\r\nFixes #24055.","Url":"https://github.com/dotnet/coreclr/pull/24071","RelatedDescription":"Open PR \"JIT: fix arm64 crossgen simd issue\" (#24071)"},{"Id":"434484899","IsPullRequest":true,"CreatedAt":"2019-04-17T21:02:49","Actor":"krwq","Number":"24070","RawContent":null,"Title":"Nullable: System.Diagnostics.Tracing","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24070","RelatedDescription":"Open PR \"Nullable: System.Diagnostics.Tracing\" (#24070)"},{"Id":"434392137","IsPullRequest":true,"CreatedAt":"2019-04-17T20:16:05","Actor":"dotnet-maestro-bot","Number":"24063","RawContent":null,"Title":"Update BuildTools, CoreClr, CoreFx, CoreSetup to preview4-03917-01, preview5-27616-73, preview5.19217.2, preview5-27617-04, respectively (feature/utf8string)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24063","RelatedDescription":"Closed or merged PR \"Update BuildTools, CoreClr, CoreFx, CoreSetup to preview4-03917-01, preview5-27616-73, preview5.19217.2, preview5-27617-04, respectively (feature/utf8string)\" (#24063)"},{"Id":"434458390","IsPullRequest":true,"CreatedAt":"2019-04-17T20:10:14","Actor":"safern","Number":"24069","RawContent":null,"Title":"Fix StringBuilder annotations and debug.asserts","State":"closed","Body":"Some debug assers where wrong and doing the wrong assumptions, causing corefx tests to fail.","Url":"https://github.com/dotnet/coreclr/pull/24069","RelatedDescription":"Closed or merged PR \"Fix StringBuilder annotations and debug.asserts\" (#24069)"},{"Id":"434410421","IsPullRequest":true,"CreatedAt":"2019-04-17T19:31:34","Actor":"sandreenko","Number":"24065","RawContent":null,"Title":"Add --runtime-path to CoreFX test runner.","State":"closed","Body":"corefx arm32 ubuntu testing is blocked by https://github.com/dotnet/core-eng/issues/6014#event-2283234371","Url":"https://github.com/dotnet/coreclr/pull/24065","RelatedDescription":"Closed or merged PR \"Add --runtime-path to CoreFX test runner.\" (#24065)"},{"Id":"434062731","IsPullRequest":false,"CreatedAt":"2019-04-17T18:25:01","Actor":"stephentoub","Number":"24053","RawContent":null,"Title":"EventPipeController ctor potentially throws ArgumentNullException?","State":"closed","Body":"EventPipeController's ctor accesses AppContext.BaseDirectory and passes the result to Path.Combine, which will throw an ArgumentNullException if BaseDirectory returns null.  BaseDirectory returns the result of GetBaseDirectoryCore, which calls Assembly.GetEntryAssembly()?.Location.  GetEntryAssembly may return null, in which case GetBaseDirectoryCore will return null, in which case Path.Combine will throw and the EventPipeController ctor will throw.  This will be eaten in the Initialize method by a catch-all block, but it seems like it'd be better not to throw in the first place.","Url":"https://github.com/dotnet/coreclr/issues/24053","RelatedDescription":"Closed issue \"EventPipeController ctor potentially throws ArgumentNullException?\" (#24053)"},{"Id":"434414333","IsPullRequest":true,"CreatedAt":"2019-04-17T18:02:30","Actor":"janvorli","Number":"24066","RawContent":null,"Title":"Put back the CPU limiting in GC","State":"open","Body":"The CPU limiting was accidentally removed during refactoring of the CPU\r\ngroups support in GC. This change puts them back.\r\n\r\nFix https://github.com/dotnet/coreclr/issues/23951","Url":"https://github.com/dotnet/coreclr/pull/24066","RelatedDescription":"Open PR \"Put back the CPU limiting in GC\" (#24066)"},{"Id":"434392954","IsPullRequest":false,"CreatedAt":"2019-04-17T17:09:20","Actor":"richlander","Number":"24064","RawContent":null,"Title":"Choosing the right defaults for Tiered Compilation","State":"open","Body":"# Choosing the right defaults for tiered compilation\r\n\r\nTiered compilation (TC) is a runtime feature that is able to control the compilation speed and quality of the JIT to achieve various performance outcomes. It is enabled by default in .NET Core 3.0 builds. We are considering what the default TC configuration should be for the final 3.0 release. We have been investigating the performance impact (positive and/or negative) for a variety of application scenarios, with the goal of selecting a default that is good for all scenarios, and providing configuration switches to enable developers to opt apps into other configurations.\r\n\r\nWe would like your feedback on this exercise and want to share how we are thinking about TC currently.\r\n\r\n## TC Feature Explained (briefly)\r\n\r\nTC is based on the underlying [re-jit capability](https://github.com/dotnet/coreclr/blob/master/Documentation/Profiling/davbr-blog-archive/ReJIT%20-%20The%20Basics.md) in the runtime, which enables methods to be compiled more than once (typically with different code). The re-jit capability was initially built to support instrumenting profilers.\r\n\r\nThe fundamental benefit and capability of TC is to enable (re-)jitting methods with lower but faster to produce or higher quality but slower to produce code in order to increase performance of an application as it goes through various stages of execution, from startup through stead-state. This contrasts with the non-TC approach, where every method is compiled a single way (the same as the high-quality tier), which biases to steady-state over startup performance. \r\n\r\nTC isn't solely about jitted code. TC is able to re-jit R2R code to higher-quality jitted code. Ahead-of-time compiled [ready-to-run (R2R) images](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md) are biased towards startup performance, and are worse for stead-state performance than high-quality jitted code. This capability of TC can significantly improve steady state performance for compute-intensive applications like web servers.\r\n\r\nOnly methods that are called multiple times are re-jitted, after calls to that methods satisfy a threshold, currently defined at [30 calls](https://github.com/dotnet/coreclr/blob/58d9cf157f54e8fd61eaaf56b3f8045075d171cd/src/inc/clrconfigvalues.h#L649). Many methods are called only a few times, and don't warrant optimization.\r\n\r\nWe call code that is either already available (specifcally R2R code) or can be inexpensively produced at startup \"tier 0\". We call optimized code that is generated after startup \"tier 1\". Tier 1 code is the code that is generated after a method has been called multiple times, as described above.\r\n\r\nAt startup, tier 0 code can be one of the following:\r\n\r\n* Ahead-of-time compiled R2R code.\r\n* Tier 0 jitted code, produced by \"Quick JIT\". Quick JIT applies fewer optimizations (similar to \"minopts\") to compile code faster.\r\n\r\n## Context\r\n\r\nWe [first introduced TC with .NET Core 2.1](https://devblogs.microsoft.com/dotnet/tiered-compilation-preview-in-net-core-2-1/). We intended at that time to enable TC by default. We found regressions with some ASP.NET benchmarks, so opted to leave the feature off by default. We have heard that some users (including Microsoft products) have enabled TC based on observed benefits. That's great, and is part of the information we are collecting to make the decision on how to configure TC for 3.0.\r\n\r\nAs part of the .NET Core 3.0 release, we have [invested significant effort into improving and optimizing TC](https://github.com/dotnet/coreclr/labels/area-TieredCompilation), again with the goal of enabling TC by default. At this point, we are focussed less on further improvements to TC and more on the final ship configuration.\r\n\r\nRecently, we saw a report of [concerning performance with TC and AWS Lambda](https://twitter.com/zaccharles/status/1108182711573905408). We are working with both [Zac Charles](https://twitter.com/zaccharles) and [Norm Johanson](https://twitter.com/socketnorm) to better understand the results and try the same testing with more real-world Lambda applications.  Zac and Norm have been excellent to work with. Major kudos to Zac for all the leg-work he's done helping us! Note that the results in the blog post were based on a Lambda application that just calls ToUpper() on a string. It doesn't make sense to base our analysis solely on an application that small.\r\n\r\nWe have a conversation started with the Azure Functions team to see if similar benchmarks produce similar results in that environment. The Functions team told us that they tried TC with .NET Core 2.1 and opted not to enable it because they didn't see a benefit with their testing, however, they are about to start testing .NET Core 3.0. We will work with the Functions team to specifically look at the impact of TC on their performance benchmarks.\r\n\r\nWe're not making .NET Core product decisions exclusively for the serverless application type, however, the post that Zac wrote and other community feedback ([example](https://stackoverflow.com/questions/54353643/how-to-disable-the-coreclr-tiered-compilation)) made us ask a few questions:\r\n\r\n* Is TC a good feature to have enabled by default? Is it generally beneficial or does it only show benefits with certain types of applications?\r\n* Is TC bad for people benchmarking with .NET Core? Will they need to read documentation to benchmark .NET Core correctly, specifically to accomodate for TC?\r\n* Almost all of the TC investigations have been on web apps. What about WPF and Windows Forms client applications, which are new in 3.0? What about more sophisticated console apps like PowerShell? What about constrained devices like Raspberry Pi or Docker containers with <= 1 cpu allocated?\r\n\r\nThe rest of this doc details our plan for answering these questions, and to using performance data we generate to define a final configuration for TC for .NET Core 3.0.\r\n\r\n## Desired Outcomes\r\n\r\nFirst, we'll start with the characteristics we would want to see in order to make TC default.\r\n\r\n* No or limited regressions (<5% due to TC; 3.0 w/TC disabled is baseline); regressions could be: startup time, steady-state throughput, allocation rates, memory usage, ...\r\n* Significant improvements for some scenarios with a bias to steady state execution (for example, as measured by RPS for web apps)\r\n* Developers benchmarking .NET Core do not need to read documentation to get accurate results\r\n\r\n## Define Performance Baselines\r\n\r\n* **2.2 Customer default** -- R2R enabled, TC disabled\r\n* **2.2 TechEmpower configuration** -- R2R disabled, TC disabled\r\n\r\n## Measurement Modes\r\n\r\n* TC enabled (same as Preview 3 default)\r\n* TC enabled, QuickJit disabled (same as Preview 4 default)\r\n* TC disabled (Same as 2.2 default)\r\n* R2R disabled, TC disabled (as as 2.2 TechEmpower configuration)\r\n\r\n## Action Plan\r\n\r\nWe intend to make a decision on the .NET Core default mode for TC in May or June. We will use the following action plan. \r\n\r\nMeasure cold startup, warm startup, throughput and working set, in the defined measurement modes, for a broad set of applications:\r\n\r\n* UI client apps: WPF, Windows Forms, UWP\r\n* Console apps: Roslyn compiler (compiling roslyn), and PowerShell (pure startup and long-running script)\r\n* ASP.NET: TechEmpower and Music Store\r\n* Serverless: Azure Functions and AWS Lambda\r\n* PAAS: Azure websites\r\n\r\nNote: some performance metrics may not be critical/relevant for all application types.\r\n\r\nExecution plan:\r\n\r\n* Collect and publish performance data\r\n* Investigate anomalies\r\n* Consider experiments to improve results, and rinse and repeat, some of which will need to be postponed until a later release\r\n* Make changes in a preview and watch for feedback\r\n* Document the final decision with recommendations, as appropriate\r\n\r\nDesired community engagement:\r\n\r\n* Provide general feedback, perferably with data justifying viewpoints\r\n* Run performance tests and report results and any associated analysis (file issues on dotnet/coreclr repo)\r\n\r\n## Theories and Thoughts\r\n\r\nWe have developed to a few theories. They are not guiding the investigation, but are ideas that we want to prove or disprove.\r\n\r\n* The AWS Lambda throughput benchmarks are negatively impacted by Quick JIT. The Lamdba environment is very constrained, resulting in poor throughput for an extended time, until tier 1 code can be generated. For some applications running in such an environment, they may never hit optimal execution because they may not run long enough.\r\n* System.Private.Corelib.dll was moved from being compiled with fragile NGEN to ready to run format in .NET Core 3.0. We believe that some startup performance regressions are due to this change.\r\n\r\n## Key Resources\r\n\r\n* CoreCLR PR: https://github.com/dotnet/coreclr/pull/23599\r\n* SDK PR: https://github.com/dotnet/sdk/pull/3064\r\n","Url":"https://github.com/dotnet/coreclr/issues/24064","RelatedDescription":"Open issue \"Choosing the right defaults for Tiered Compilation\" (#24064)"},{"Id":"434359552","IsPullRequest":true,"CreatedAt":"2019-04-17T15:52:55","Actor":"MichalStrehovsky","Number":"24062","RawContent":null,"Title":"Look for IBC data outside Windows","State":"open","Body":"#23363 added a crossplat implementation of `GetWin32Resource`, but forgot to enable places that call it.\r\n\r\n~~There's also one caller in `zapheaders.cpp` to copy the file version, but the \"PE file\" crossgen generates for Linux is weird enough that standard tools have trouble locating the resource anyway.~~","Url":"https://github.com/dotnet/coreclr/pull/24062","RelatedDescription":"Open PR \"Look for IBC data outside Windows\" (#24062)"},{"Id":"434337107","IsPullRequest":false,"CreatedAt":"2019-04-17T15:10:00","Actor":"omajid","Number":"24061","RawContent":null,"Title":"Disallow using arrays with NewHolder","State":"open","Body":"I have recently found and fixed some [uses where `NewHolder` was being used with arrays instead of `NewArrayHolder`](https://github.com/dotnet/coreclr/pull/24017).\r\n\r\nI wonder if it would be possible to modify the `NewHolder` code so that it fails to compile examples like this:\r\n\r\n```\r\nNewHolder<BYTE> code(new BYTE[size]);  // Should fail\r\nNewHolder<BYTE> pNewSig = new BYTE[size];   // Should fail\r\n```\r\n\r\nThe [`static_assert`s](https://github.com/dotnet/coreclr/blob/df2f4c4feb273545e91fd8d7d170dc424b741f19/src/inc/holder.h#L992-L995) don't seem to be working for `BYTE` and other non-`char` array types. ","Url":"https://github.com/dotnet/coreclr/issues/24061","RelatedDescription":"Open issue \"Disallow using arrays with NewHolder\" (#24061)"},{"Id":"434281692","IsPullRequest":true,"CreatedAt":"2019-04-17T13:24:20","Actor":"dotnet-maestro-bot","Number":"24060","RawContent":null,"Title":"Update BuildTools, CoreClr to preview4-03917-01, preview5-27617-73, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24060","RelatedDescription":"Open PR \"Update BuildTools, CoreClr to preview4-03917-01, preview5-27617-73, respectively (master)\" (#24060)"},{"Id":"434265924","IsPullRequest":true,"CreatedAt":"2019-04-17T12:51:56","Actor":"dotnet-maestro[bot]","Number":"24059","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190417.01\r\n- **Date Produced**: 4/17/2019 8:48 AM\r\n- **Commit**: 3abca437fee294811fca2f81e9e5118a5b4c45fe\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27617-01\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24059","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#24059)"},{"Id":"434264244","IsPullRequest":true,"CreatedAt":"2019-04-17T12:48:15","Actor":"dotnet-maestro[bot]","Number":"24058","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190416.14\r\n- **Date Produced**: 4/17/2019 7:18 AM\r\n- **Commit**: f9f88bd7fd774ce433a764b6d388517c6460164a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19216.14\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview5.19216.14\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24058","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#24058)"},{"Id":"434254205","IsPullRequest":true,"CreatedAt":"2019-04-17T12:25:13","Actor":"dotnet-maestro[bot]","Number":"24057","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24057","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#24057)"},{"Id":"434242916","IsPullRequest":true,"CreatedAt":"2019-04-17T11:57:27","Actor":"jimdemis","Number":"24056","RawContent":null,"Title":"Added optional/default parameters for StreamWriter/StreamReader","State":"open","Body":"This resolves the CoreCLR side of [dotnet/corefx#8173](https://github.com/dotnet/corefx/issues/8173)","Url":"https://github.com/dotnet/coreclr/pull/24056","RelatedDescription":"Open PR \"Added optional/default parameters for StreamWriter/StreamReader\" (#24056)"},{"Id":"434094380","IsPullRequest":false,"CreatedAt":"2019-04-17T05:10:11","Actor":"dotnet-mc-bot","Number":"24055","RawContent":null,"Title":"Test failure: JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh` has failed.\n\nFailure Message:\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/JIT/SIMD/Reports/JIT.SIMD/Plane_r/Plane_r.output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/JIT/SIMD/Plane_r/IL:/root/helix/work/workitem/JIT/SIMD/Plane_r /in Plane_r.org /out Plane_r.exe\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nNative image Plane_r.exe generated successfully.\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun Plane_r.exe ''\nin ReleaseLock\nExpected: 100\nActual: 255\nEND EXECUTION - FAILED\nTest Harness Exitcode is : 1\nTo run the test:\n> set CORE_ROOT=/root/helix/work/correlation\n> /root/helix/work/workitem/JIT/SIMD/Plane_r/Plane_r.sh\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at JIT_SIMD._Plane_r_Plane_r_._Plane_r_Plane_r_sh() in /__w/2/s/bin/tests/Linux.arm64.Release/TestWrappers/JIT.SIMD/JIT.SIMD.XUnitWrapper.cs:line 3432\n```\n\nBuild : 3.0 - 20190416.72 (Ready-To-Run Tests)\nFailing configurations:\n- Alpine.38.Arm64\n  - arm64\n  - arm64\n- Ubuntu.1804.Arm64\n  - arm64\n  - arm64\n- Debian.9.Arm64\n  - arm64\n  - arm64\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190416.72/workItem/JIT/analysis/xunit/JIT_SIMD._Plane_r_Plane_r_~2F_Plane_r_Plane_r_sh","Url":"https://github.com/dotnet/coreclr/issues/24055","RelatedDescription":"Open issue \"Test failure: JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh\" (#24055)"},{"Id":"434070250","IsPullRequest":true,"CreatedAt":"2019-04-17T03:01:24","Actor":"stephentoub","Number":"24054","RawContent":null,"Title":"Nullable: System.Collections.Concurrent","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24054","RelatedDescription":"Open PR \"Nullable: System.Collections.Concurrent\" (#24054)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"434554135","IsPullRequest":true,"CreatedAt":"2019-04-18T03:24:04","Actor":"peterhuene","Number":"11188","RawContent":null,"Title":"Insert latest 2.1.6xx SDK.","State":"closed","Body":"Bump SDK version to `2.1.600-preview-64018-02`.\r\n","Url":"https://github.com/dotnet/cli/pull/11188","RelatedDescription":"Closed or merged PR \"Insert latest 2.1.6xx SDK.\" (#11188)"},{"Id":"434554490","IsPullRequest":true,"CreatedAt":"2019-04-18T02:34:15","Actor":"peterhuene","Number":"11189","RawContent":null,"Title":"Insert latest 2.2.2xx SDK.","State":"closed","Body":"Bump SDK version to `2.2.200-preview-64018-01`.","Url":"https://github.com/dotnet/cli/pull/11189","RelatedDescription":"Closed or merged PR \"Insert latest 2.2.2xx SDK.\" (#11189)"},{"Id":"434483914","IsPullRequest":true,"CreatedAt":"2019-04-17T23:05:41","Actor":"nguerrera","Number":"11187","RawContent":null,"Title":"Revert \"Update FSharp compiler to 10.4.3\" (2.1.7xx)","State":"closed","Body":"Reverts dotnet/cli#11181\r\n\r\nThe F# change was not approved to go into VS so must be reverted from CLI","Url":"https://github.com/dotnet/cli/pull/11187","RelatedDescription":"Closed or merged PR \"Revert \"Update FSharp compiler to 10.4.3\" (2.1.7xx)\" (#11187)"},{"Id":"434483431","IsPullRequest":true,"CreatedAt":"2019-04-17T22:34:15","Actor":"nguerrera","Number":"11186","RawContent":null,"Title":"Revert \"Update FSharp Compiler to 10.4.3\" (2.2.3xx)","State":"closed","Body":"Reverts dotnet/cli#11182\r\n\r\nThe F# change was not approved into VS, so removing it from CLI","Url":"https://github.com/dotnet/cli/pull/11186","RelatedDescription":"Closed or merged PR \"Revert \"Update FSharp Compiler to 10.4.3\" (2.2.3xx)\" (#11186)"},{"Id":"434035136","IsPullRequest":true,"CreatedAt":"2019-04-17T20:32:21","Actor":"wli3","Number":"11179","RawContent":null,"Title":"dotnet tool uninstall should find the first manifest file contain package id","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/11139  , a lot of file touched. But most of them are locs\r\n\r\nInstead of the first manifest file regardless. So, the behavior is aligned with tool update.\r\nExtract method ToolManifestFinderExtensions from tool update. And use them in both places.\r\n\r\nI changed the following to make it generic. Since the user just type the command, I don't think uninstall or update in the error message is significant.\r\n\r\n\"If you intended **to uninstall** on a global tool, use the `--global` option for the command.\" to \"If you intended **to perform an action** on a global tool, use the `--global` option for the command.\"","Url":"https://github.com/dotnet/cli/pull/11179","RelatedDescription":"Closed or merged PR \"dotnet tool uninstall should find the first manifest file contain package id\" (#11179)"},{"Id":"434438122","IsPullRequest":false,"CreatedAt":"2019-04-17T19:02:03","Actor":"wli3","Number":"11185","RawContent":null,"Title":"User facing string review","State":"open","Body":"https://github.com/dotnet/cli/pull/11179\r\nhttps://github.com/dotnet/cli/pull/11143\r\n\r\nHas not been review by PM","Url":"https://github.com/dotnet/cli/issues/11185","RelatedDescription":"Open issue \"User facing string review\" (#11185)"},{"Id":"434122933","IsPullRequest":true,"CreatedAt":"2019-04-17T16:11:17","Actor":"KevinRansom","Number":"11181","RawContent":null,"Title":"Update FSharp compiler to 10.4.3","State":"closed","Body":"Update FSharp compiler to 10.4.3","Url":"https://github.com/dotnet/cli/pull/11181","RelatedDescription":"Closed or merged PR \"Update FSharp compiler to 10.4.3\" (#11181)"},{"Id":"434136217","IsPullRequest":true,"CreatedAt":"2019-04-17T16:10:55","Actor":"KevinRansom","Number":"11182","RawContent":null,"Title":"Update FSharp Compiler to 10.4.3","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11182","RelatedDescription":"Closed or merged PR \"Update FSharp Compiler to 10.4.3\" (#11182)"},{"Id":"434250588","IsPullRequest":true,"CreatedAt":"2019-04-17T12:52:14","Actor":"dotnet-maestro[bot]","Number":"11183","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/16/2019 1:04 PM\r\n- **Commit**: 2426d6e864763c91faa0081fae898f71477f969f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11183","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11183)"},{"Id":"434258478","IsPullRequest":true,"CreatedAt":"2019-04-17T12:35:25","Actor":"dotnet-maestro[bot]","Number":"11184","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11184","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#11184)"},{"Id":"433774586","IsPullRequest":false,"CreatedAt":"2019-04-17T11:11:17","Actor":"PDostalek","Number":"11168","RawContent":null,"Title":"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"","State":"closed","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\n\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question to Core team.\r\n\r\nCould you help please? Thanks!**\r\n\r\nSource:\r\nRoll forward on no candidate framework (0=off, 1=roll minor, 2=roll major & minor).\r\n\r\nFile Name:\r\ndotnet\\commands\\dotnet-help\\xlf\\LocalizableStrings.xlf\r\n\r\nResource ID:\r\n0; \"RollForwardOnNoCandidateFxDefinition\"\r\n\r\nQuery:\r\nPlease define the meaning of \"no candidate framework\".","Url":"https://github.com/dotnet/cli/issues/11168","RelatedDescription":"Closed issue \"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"\" (#11168)"},{"Id":"434068186","IsPullRequest":true,"CreatedAt":"2019-04-17T03:40:47","Actor":"dotnet-maestro[bot]","Number":"11180","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11180","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11180)"},{"Id":"433960607","IsPullRequest":true,"CreatedAt":"2019-04-16T22:26:36","Actor":"nguerrera","Number":"11173","RawContent":null,"Title":"dotnet/sdk 2.1.700-preview-64015-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11173","RelatedDescription":"Closed or merged PR \"dotnet/sdk 2.1.700-preview-64015-02\" (#11173)"},{"Id":"434010689","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:52","Actor":"dotnet-bot","Number":"11178","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11178","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11178)"},{"Id":"434010674","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:49","Actor":"dotnet-bot","Number":"11177","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11177","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11177)"},{"Id":"434010646","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:44","Actor":"dotnet-bot","Number":"11176","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11176","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11176)"},{"Id":"434010630","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:42","Actor":"dotnet-bot","Number":"11175","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11175","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11175)"},{"Id":"434010613","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:39","Actor":"dotnet-bot","Number":"11174","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11174","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11174)"},{"Id":"433943551","IsPullRequest":true,"CreatedAt":"2019-04-16T21:44:37","Actor":"peterhuene","Number":"11172","RawContent":null,"Title":"Update branding to 2.2.204.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11172","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.204.\" (#11172)"},{"Id":"433492357","IsPullRequest":true,"CreatedAt":"2019-04-16T21:26:26","Actor":"nguerrera","Number":"11161","RawContent":null,"Title":"dotnet/sdk 2.2.300-preview-64015-01","State":"closed","Body":"Insert dotnet/sdk latest release/2.2.3xx, with nuget version matching latest in dotnet/cli release/2.2.3xx\r\n","Url":"https://github.com/dotnet/cli/pull/11161","RelatedDescription":"Closed or merged PR \"dotnet/sdk 2.2.300-preview-64015-01\" (#11161)"},{"Id":"433943349","IsPullRequest":true,"CreatedAt":"2019-04-16T21:15:30","Actor":"peterhuene","Number":"11171","RawContent":null,"Title":"Update branding to 2.2.107.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11171","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.107.\" (#11171)"},{"Id":"433943140","IsPullRequest":true,"CreatedAt":"2019-04-16T21:12:02","Actor":"peterhuene","Number":"11170","RawContent":null,"Title":"Update branding to 2.1.604.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11170","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.604.\" (#11170)"},{"Id":"433942911","IsPullRequest":true,"CreatedAt":"2019-04-16T20:59:50","Actor":"peterhuene","Number":"11169","RawContent":null,"Title":"Update branding to 2.1.507.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11169","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.507.\" (#11169)"},{"Id":"433458322","IsPullRequest":true,"CreatedAt":"2019-04-16T19:55:45","Actor":"nguerrera","Number":"11160","RawContent":null,"Title":"Roslyn 3.1.0-beta2-19211-01 (2.2.3xx)","State":"closed","Body":"Insert Roslyn matching 16.1 p2 into CLI 2.2.3xx\r\n","Url":"https://github.com/dotnet/cli/pull/11160","RelatedDescription":"Closed or merged PR \"Roslyn 3.1.0-beta2-19211-01 (2.2.3xx)\" (#11160)"},{"Id":"433654118","IsPullRequest":false,"CreatedAt":"2019-04-16T17:49:35","Actor":"chrisfcarroll","Number":"11163","RawContent":null,"Title":"dotnet pack for web projects not only does nothing, it gives no explanation as to why","State":"closed","Body":"## Steps to reproduce\r\n1. dotnet pack a web project. For instance, your deployment pipeline may go via a nuget feed.\r\n2. Note the complete absence of output **and** the complete absence of any explanation for the lack of output.\r\n3. Spend a couple of hours failing to find the warning – buried at the bottom of https://docs.microsoft.com/en-gb/dotnet/core/tools/dotnet-pack – that this won't work by design.\r\nhttps://github.com/dotnet/docs/issues/11847#issuecomment-483421470\r\n\r\nFor the love of all that is counter-intuitive, why would you invent this “feature”?\r\n\r\nthankyou for your kind consideration of this frustration :-)\r\n\r\n## Expected  behavior\r\nThat `dotnet pack` does the 'obvious' thing in all cases, i.e. packs the project. OR, explains that \"dotnet pack is inappropriate for a web project because _\"\r\n\r\n## Actual behavior\r\nNothing happens *and there is no explanation as to why*\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.105\r\n Commit:  7cecb35b92","Url":"https://github.com/dotnet/cli/issues/11163","RelatedDescription":"Closed issue \"dotnet pack for web projects not only does nothing, it gives no explanation as to why\" (#11163)"},{"Id":"433767575","IsPullRequest":false,"CreatedAt":"2019-04-16T13:01:44","Actor":"ViktorHofer","Number":"11167","RawContent":null,"Title":"dotnet tool restore is missing a --tool-path option to support CI helix scenarios","State":"open","Body":"We recently switched to .NET Core SDK 3.0.0-preview3 in **corefx** and want to make use of the new repo tools feature. As we test with helix we need to be able to restore the tools upfront **from the tool’s manifest**, archive them and submit the archive as a helix payload.\r\n\r\nThe dotnet-tools.json contains all the necessary information but I’m missing a `--tool-path` option in `dotnet tool restore`. If we can’t restore from the manifest to a certain location then this solution can’t be used which would be unfortunate.\r\n\r\ncc @ericstj @safern @wli3 ","Url":"https://github.com/dotnet/cli/issues/11167","RelatedDescription":"Open issue \"dotnet tool restore is missing a --tool-path option to support CI helix scenarios\" (#11167)"},{"Id":"433743378","IsPullRequest":true,"CreatedAt":"2019-04-16T12:06:19","Actor":"dotnet-maestro[bot]","Number":"11166","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190415.3\r\n- **Date Produced**: 4/16/2019 6:53 AM\r\n- **Commit**: 8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19215.3\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190415.3\r\n- **Date Produced**: 4/16/2019 6:53 AM\r\n- **Commit**: 8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19215.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11166","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#11166)"},{"Id":"433743215","IsPullRequest":true,"CreatedAt":"2019-04-16T12:05:55","Actor":"dotnet-maestro[bot]","Number":"11165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11165","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11165)"},{"Id":"433662786","IsPullRequest":false,"CreatedAt":"2019-04-16T09:00:12","Actor":"LightVolk","Number":"11164","RawContent":null,"Title":"Why visual studio publish empty app.runtimeconfig.json?","State":"open","Body":"Why visual studio publish empty app.runtimeconfig.json?\r\n\r\n## Steps to reproduce\r\n```\r\nPublish .net core app 2.2 project.\r\nProfile Settings:\r\n\r\nConfiguration: Release|x64\r\nTargetFramework: netcoreapp2.2\r\nDeployment Mode:Self-contained\r\nTargetRuntime:win-x64\r\n```\r\n\r\n## Expected  behavior\r\n\r\napp.runtimeconfig:\r\n\r\n`{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.2\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"2.2.0\"\r\n    }\r\n  }\r\n}`\r\n\r\n\r\n## Actual behavior\r\n```\r\n{\r\n  \"runtimeOptions\": {}\r\n}\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nЏ ЄҐв SDK ¤«п .NET Core (®ва ¦ ойЁ© «оЎ®© global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\n‘аҐ¤  ўлЇ®«­Ґ­Ёп:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n.csproj:\r\n\r\n   ```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <Import Project=\"../../../../.build/build.props\"></Import>\r\n\r\n  <PropertyGroup Label=\"Globals\">\r\n    <SccProjectName>SAK</SccProjectName>\r\n    <SccProvider>SAK</SccProvider>\r\n    <SccAuxPath>SAK</SccAuxPath>\r\n    <SccLocalPath>SAK</SccLocalPath>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <ApplicationIcon />\r\n    <StartupObject>MyService.Program</StartupObject>\r\n    <LangVersion>7.1</LangVersion>\r\n    <Description>MyService</Description>\r\n    <AssemblyName>MyService</AssemblyName>\r\n    <ApplicationIcon />\r\n    <FileVersion>1.0.0.$(BuildNumber)</FileVersion>\r\n    <AssemblyVersion>$(FileVersion)</AssemblyVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"System.ServiceProcess.ServiceController\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\My\\Monitel.My.csproj\" />\r\n  </ItemGroup>      \r\n</Project>\r\n```\r\n\r\n\r\nSo, if i change deploy to FrameworkDependent -it generated valid app.runtimeconfig.json.\r\n\r\nBut, if i deploy and run Self-Contained - it generated empty parameters and i can not run exe file!\r\nIt says, that needs `hostpolicy`  dll.Why?\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11164","RelatedDescription":"Open issue \"Why visual studio publish empty app.runtimeconfig.json?\" (#11164)"},{"Id":"433495962","IsPullRequest":false,"CreatedAt":"2019-04-15T21:57:37","Actor":"joshfree","Number":"11162","RawContent":null,"Title":"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'","State":"open","Body":"**_Moved from original issue by @jamesBrosnahan at  https://github.com/dotnet/core/issues/2587_**  :\r\n\r\n\r\n\r\nProblem encountered on https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/create\r\nOperating System: Linux Ubuntu 18.04 - x64\r\n\r\nProvide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant.\r\n\r\nTypo using command outputs excessive information:\r\ndotnet new consle -o myApp\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nNo templates matched the input template name: consle.\r\n\r\nTemplates                                         Short Name         Language          Tags                                 \r\n----------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console            [C#], F#, VB      Common/Console                       \r\nClass library                                     classlib           [C#], F#, VB      Common/Library                       \r\nUnit Test Project                                 mstest             [C#], F#, VB      Test/MSTest                          \r\nNUnit 3 Test Project                              nunit              [C#], F#, VB      Test/NUnit                           \r\nNUnit 3 Test Item                                 nunit-test         [C#], F#, VB      Test/NUnit                           \r\nxUnit Test Project                                xunit              [C#], F#, VB      Test/xUnit                           \r\nRazor Page                                        page               [C#]              Web/ASP.NET                          \r\nMVC ViewImports                                   viewimports        [C#]              Web/ASP.NET                          \r\nMVC ViewStart                                     viewstart          [C#]              Web/ASP.NET                          \r\nASP.NET Core Empty                                web                [C#], F#          Web/Empty                            \r\nASP.NET Core Web App (Model-View-Controller)      mvc                [C#], F#          Web/MVC                              \r\nASP.NET Core Web App                              webapp             [C#]              Web/MVC/Razor Pages                  \r\nASP.NET Core with Angular                         angular            [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js                        react              [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js and Redux              reactredux         [C#]              Web/MVC/SPA                          \r\nRazor Class Library                               razorclasslib      [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi             [C#], F#          Web/WebAPI                           \r\nglobal.json file                                  globaljson                           Config                               \r\nNuGet Config                                      nugetconfig                          Config                               \r\nWeb Config                                        webconfig                            Config                               \r\nSolution File                                     sln                                  Solution                             \r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new mstest \r\n    dotnet new --help\r\n```\r\nThe dotnet command should do error checking prior to outputting a welcome message and then use a 'Did you mean' algorithm to determine if the template in the command is a typo or has not been installed; then prompt the user with a group of candidate templates or offer to download templates from the .NET Foundation if available.","Url":"https://github.com/dotnet/cli/issues/11162","RelatedDescription":"Open issue \"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'\" (#11162)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-18T00:56:08","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"open","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Open PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-18T00:54:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"open","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Open PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-18T00:27:39","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"open","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Open PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"},{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-16T00:34:16","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"Please Make AsnReader And AnsWriter Public","State":"open","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Open issue \"Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-13T07:42:03","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"open","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Open issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"},{"Id":"432357589","IsPullRequest":false,"CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Number":"1138","RawContent":null,"Title":"Xml validate [ type is not declared ]","State":"open","Body":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```","Url":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Open issue \"Xml validate [ type is not declared ]\" (#1138)"},{"Id":"431985706","IsPullRequest":true,"CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Number":"1137","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1137)"},{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"429978073","IsPullRequest":true,"CreatedAt":"2019-04-09T16:30:37","Actor":"JohnTortugo","Number":"1126","RawContent":null,"Title":"Onboard on async publishing","State":"closed","Body":"Relates to: https://github.com/dotnet/arcade/issues/2442\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=144566\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4241","Url":"https://github.com/dotnet/standard/pull/1126","RelatedDescription":"Closed or merged PR \"Onboard on async publishing\" (#1126)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"},{"Id":"430411848","IsPullRequest":true,"CreatedAt":"2019-04-08T12:13:43","Actor":"dotnet-maestro[bot]","Number":"1130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19207.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1130)"},{"Id":"430137273","IsPullRequest":true,"CreatedAt":"2019-04-07T12:13:36","Actor":"dotnet-maestro[bot]","Number":"1129","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190406.5\r\n- **Date Produced**: 4/6/2019 5:35 PM\r\n- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19206.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1129)"},{"Id":"429990573","IsPullRequest":false,"CreatedAt":"2019-04-07T05:49:47","Actor":"benneyman","Number":"1127","RawContent":null,"Title":"[Help] Targeting netstandard2.0 for a class library","State":"closed","Body":"After a lot of googling I came to realize that my existing class library(net462) should be targeting netstandard2.0 to be able to reference into my react app (dotnet new react) which targets netcoreapp2.1.\r\n\r\nI am not sure how to make my class library to target netstandard2.0 from Visual Studio 2013. From the extensive googling I did I know we need VS 2017 (15.3) to do this. I do not have access to VS 2017.\r\n\r\nI feel there could be other ways of doing this without having to have VS2017 from the googling I did. But I can't any concrete solutions.\r\n\r\nCould you please guide me on how to target a class library to netstandard2.0 from Visual Studio 2013 or using CLI tools so that I will be able to add a project reference to my react project.","Url":"https://github.com/dotnet/standard/issues/1127","RelatedDescription":"Closed issue \"[Help] Targeting netstandard2.0 for a class library\" (#1127)"},{"Id":"430027157","IsPullRequest":true,"CreatedAt":"2019-04-06T12:13:34","Actor":"dotnet-maestro[bot]","Number":"1128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1128)"},{"Id":"429720581","IsPullRequest":true,"CreatedAt":"2019-04-05T12:11:02","Actor":"dotnet-maestro[bot]","Number":"1125","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1125","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1125)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"434585949","IsPullRequest":false,"CreatedAt":"2019-04-18T04:34:04","Actor":"ahsonkhan","Number":"36987","RawContent":null,"Title":"Refactor Utf8JsonWriter code to remove code duplication","State":"open","Body":"The Utf8JsonWriter DCR here: https://github.com/dotnet/corefx/pull/36961 introduced some code duplication which can be re-factored into helper methods to avoid duplication (for example writing property names, or using write literal helper for formatted numbers as well, etc.).","Url":"https://github.com/dotnet/corefx/issues/36987","RelatedDescription":"Open issue \"Refactor Utf8JsonWriter code to remove code duplication\" (#36987)"},{"Id":"434568595","IsPullRequest":true,"CreatedAt":"2019-04-18T04:28:41","Actor":"ahsonkhan","Number":"36985","RawContent":null,"Title":"[WIP]  Check if calls to Utf8Formatter.TryFormat float fail on x86 in CI","State":"closed","Body":"Can't get a local repro or get access to the failing machine so trying different things in CI.","Url":"https://github.com/dotnet/corefx/pull/36985","RelatedDescription":"Closed or merged PR \"[WIP]  Check if calls to Utf8Formatter.TryFormat float fail on x86 in CI\" (#36985)"},{"Id":"434578291","IsPullRequest":false,"CreatedAt":"2019-04-18T04:20:08","Actor":"ahsonkhan","Number":"36986","RawContent":null,"Title":"Float formatting writing in scientific notation on Windows x86 rather than standard format ('G')","State":"closed","Body":"Writing floats is failing **only on** `Windows.10.Amd64.ClientRS5.Open-x86-Release`, i.e. **Windows and x86**, where its writing the float in scientific notation rather than following the 'G':\r\n\r\nFor example check the following where I get an isolated repro: https://github.com/dotnet/corefx/pull/36985/commits/cef2e42b9c11cf3c28853540016c9f426c836b0b from https://github.com/dotnet/corefx/pull/36985\r\n\r\nThis came up in Utf8JsonWriter use case where the test is failing [WriteNumberValueSingle](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36961~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.66/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FWriteNumberValueSingle(formatted:%20False,%20skipValidation:%20False)):\r\n```text\r\nAssert.Equal() Failure\r\n            ↓ (pos 2)\r\nExpected: [12345678,12345678,12345678,12345678,123456···\r\nActual:   [1.234568E+07,1.234568E+07,1.234568E+07,1.2···\r\n            ↑ (pos 2)\r\n```\r\n\r\nSame issue with `12345680`\r\n\r\nTried the following:\r\n```C#\r\n        [Fact]\r\n        public void TestWritingFloat1()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345678, output, out int bytesWritten));\r\n            \r\n            string expectedStr = \"12345678\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        [Fact]\r\n        public void TestWritingFloat2()\r\n        {\r\n            var output = new byte[100];\r\n            Assert.True(WriteNumberValueMinimized((float)12345680, output, out int bytesWritten));\r\n\r\n            string expectedStr = \"12345680\";\r\n\r\n            string actualStr = Encoding.UTF8.GetString(output.AsSpan(0, bytesWritten).ToArray());\r\n\r\n            string message = $\"{bytesWritten}, {expectedStr.Length}, {actualStr.Length}, \";\r\n            if (expectedStr != actualStr)\r\n            {\r\n                int length = Math.Min(bytesWritten, expectedStr.Length);\r\n                for (int i = 0; i < length; i++)\r\n                {\r\n                    if (output[i] != (byte)expectedStr[i])\r\n                    {\r\n                        message += $\"{i}, {output[i]}, {(byte)expectedStr[i]},\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Assert.True(expectedStr == actualStr, message);\r\n            Assert.True(expectedStr != actualStr, message);\r\n        }\r\n\r\n        private bool WriteNumberValueMinimized(float value, byte[] output, out int bytesWritten)\r\n        {\r\n            return Utf8Formatter.TryFormat(value, output, out bytesWritten);\r\n        }\r\n```\r\n\r\n**Expected something like the following (since all bytes should match):** And we do get this behavior on other OSes and on Windows-x64.\r\n```text\r\nMessage :\r\n8, 8, 8, \r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in /Users/vsts/agent/2.149.2/work/1/s/src/System.Text.Json/tests/Utf8JsonWriterTests.cs:line 3013\r\n```\r\n\r\n[TestWritingFloat1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat1)\r\n\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 2978\r\n```\r\n\r\n[TestWritingFloat2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloat2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 8, 12, 1, 46, 50,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloat2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3006\r\n```\r\n\r\n[TestWritingFloatIBW1](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW1)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW1() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3051\r\n```\r\n\r\n[TestWritingFloatIBW2](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36985~2Fmerge/test~2Ffunctional~2Fcli~2F/20190417.73/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Tests.Utf8JsonWriterTests~2FTestWritingFloatIBW2)\r\n```text\r\nUnhandled Exception of Type Xunit.Sdk.TrueException\r\nMessage :\r\n12, 12, 12, 1, 46,6, 54,7, 56,\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at System.Text.Json.Tests.Utf8JsonWriterTests.TestWritingFloatIBW2() in D:\\a\\1\\s\\src\\System.Text.Json\\tests\\Utf8JsonWriterTests.cs:line 3098\r\n```\r\n\r\ncc @tannergooding, @jkotas, @GrabYourPitchforks ","Url":"https://github.com/dotnet/corefx/issues/36986","RelatedDescription":"Closed issue \"Float formatting writing in scientific notation on Windows x86 rather than standard format ('G')\" (#36986)"},{"Id":"434477020","IsPullRequest":true,"CreatedAt":"2019-04-18T03:33:24","Actor":"davidsh","Number":"36975","RawContent":null,"Title":"Fix ClientWebSocket closing handshake logic","State":"closed","Body":"An HttpListener websocket test was failing after the change from PR #36928. That PR made changes\r\nto tighten up the transition to the Closed state after the closing handshake had completed.\r\n\r\nThat PR missed some additional changes needed especially in cases where a server (such as loopback)\r\nsends the close frame almost concurrently with the client sending the close frame.\r\n\r\nThis PR fixes the close frame handshake logic and also makes some optimizations in cases where the\r\nwebsocket has already transitioned to the Aborted state during the closing handshake. In that case,\r\nthe websocket should not wait for a close frame to be received but should simply proceed to closing\r\nthe connection.\r\n\r\nFixes #36963","Url":"https://github.com/dotnet/corefx/pull/36975","RelatedDescription":"Closed or merged PR \"Fix ClientWebSocket closing handshake logic\" (#36975)"},{"Id":"434281718","IsPullRequest":false,"CreatedAt":"2019-04-18T03:33:23","Actor":"stephentoub","Number":"36963","RawContent":null,"Title":"Failing ManagedWebSocket assert breaking HttpListener tests","State":"closed","Body":"Due to https://github.com/dotnet/corefx/pull/36928.\r\n\r\n```\r\nAssertion Failed\r\nUnexpected state Closed.\r\n\r\n\r\n\r\n   at System.Net.WebSockets.ManagedWebSocket.CloseAsyncPrivate(WebSocketCloseStatus closeStatus, String statusDescription, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\Common\\src\\System\\Net\\WebSockets\\ManagedWebSocket.cs:line 1069\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 581\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 596\r\n\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 272\r\n\r\n   at System.Net.WebSockets.ManagedWebSocket.SendCloseFrameAsync(WebSocketCloseStatus closeStatus, String closeStatusDescription, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\Common\\src\\System\\Net\\WebSockets\\ManagedWebSocket.cs:line 1174\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 581\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 596\r\n\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 272\r\n\r\n   at System.Net.WebSockets.ManagedWebSocket.WaitForServerToCloseConnectionAsync(CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\Common\\src\\System\\Net\\WebSockets\\ManagedWebSocket.cs:line 871\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 581\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 596\r\n\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 161\r\n\r\n   at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\RawConnectionStream.cs:line 68\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 727\r\n\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 161\r\n\r\n   at System.Net.Http.HttpConnection.ReadAsync(Memory`1 destination) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnection.cs:line 1396\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 617\r\n\r\n   at System.Threading.ThreadPoolGlobals.<>c.<.cctor>b__5_0(Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ThreadPool.cs:line 46\r\n\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(Action`1 continuation, Object state, Boolean forceAsync, Boolean requiresExecutionContextFlow) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Tasks.cs:line 1048\r\n\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs _) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Tasks.cs:line 869\r\n\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32 bytesTransferred, SocketFlags flags) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 781\r\n\r\n   at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__177_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1254\r\n\r\n   at System.Threading.ThreadPoolBoundHandleOverlapped.CompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\ClrThreadPoolBoundHandleOverlapped.cs:line 51\r\n\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\Overlapped.cs:line 65\r\n```","Url":"https://github.com/dotnet/corefx/issues/36963","RelatedDescription":"Closed issue \"Failing ManagedWebSocket assert breaking HttpListener tests\" (#36963)"},{"Id":"434245233","IsPullRequest":true,"CreatedAt":"2019-04-18T02:51:01","Actor":"dotnet-maestro[bot]","Number":"36960","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19217.1\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19217.1\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.SourceRewriter** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36960","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#36960)"},{"Id":"434565785","IsPullRequest":true,"CreatedAt":"2019-04-18T02:45:28","Actor":"stephentoub","Number":"36984","RawContent":null,"Title":"Nullable: Most libraries that reference corelib","State":"open","Body":"Some of our corefx libraries implement some functionality and type-forward the rest to implementations in corelib.  For nullability annotations, we want to be able to annotate whole ref assemblies.  Since we're primarily annotating corelib right now, this annotates the bulk of the types in such partial assemblies (I believe the main one I'm missing here is System.Collections.)\r\n\r\nI've made this a draft PR, because there are almost certainly going to be a lot of new warnings once corefx consumes an updated coreclr with a lot more annotations than are currently in the one being used.","Url":"https://github.com/dotnet/corefx/pull/36984","RelatedDescription":"Open PR \"Nullable: Most libraries that reference corelib\" (#36984)"},{"Id":"434554302","IsPullRequest":false,"CreatedAt":"2019-04-18T01:44:48","Actor":"sundhaug92","Number":"36983","RawContent":null,"Title":"Add support for AES-GCM-SIV","State":"open","Body":"According to [@agl__](https://twitter.com/agl__/status/1118669601129189376), this would reduce the impact of nonce-reuse (referenced in https://github.com/dotnet/corefx/issues/7023#issuecomment-199605081), while still using hardware AES-GCM instructions.","Url":"https://github.com/dotnet/corefx/issues/36983","RelatedDescription":"Open issue \"Add support for AES-GCM-SIV\" (#36983)"},{"Id":"434553925","IsPullRequest":false,"CreatedAt":"2019-04-18T01:42:45","Actor":"tannergooding","Number":"36982","RawContent":null,"Title":"Math.Round(value, digits, mode) does not return the correct result","State":"open","Body":"The `Math.Round(value, digits, mode)` code returns a close, but not correct result most of the time.\r\n\r\nThe root problem is that the algorithm tries to follow normal mathematical rules to produce the result. However, due to the variable precision in IEEE floating-point numbers, this ultimately causes it to produce a close, but generally incorrect result most of the time and causes it to not accept inputs above a certain range. For example, you can't round `double.MaxValue` and the larger the input is, the more inaccurate the rounding will be.\r\n\r\nThese functions should be rewritten to be IEEE compliant and to accept any valid finite floating-point input.","Url":"https://github.com/dotnet/corefx/issues/36982","RelatedDescription":"Open issue \"Math.Round(value, digits, mode) does not return the correct result\" (#36982)"},{"Id":"434535170","IsPullRequest":true,"CreatedAt":"2019-04-18T01:11:06","Actor":"ericstj","Number":"36981","RawContent":null,"Title":"Fix SDK downgrading Platforms package","State":"closed","Body":"fixes #36980\r\n","Url":"https://github.com/dotnet/corefx/pull/36981","RelatedDescription":"Closed or merged PR \"Fix SDK downgrading Platforms package\" (#36981)"},{"Id":"434530046","IsPullRequest":false,"CreatedAt":"2019-04-18T01:11:06","Actor":"danmosemsft","Number":"36980","RawContent":null,"Title":"All packaging tests failing","State":"closed","Body":"Seems to have started yesterday, or late Monday.\r\n\r\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fpackaging~2F/build/20190416.1\r\nthrough today\r\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fpackaging~2F/build/20190417.6\r\n\r\nthere's some like\r\n```\r\n  A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n  Failed to download package 'runtime.win-x86.Microsoft.NETCore.App.3.0.0-preview5-27614-10' from 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/runtime.win-x86.microsoft.netcore.app/3.0.0-preview5-27614-10/runtime.win-x86.microsoft.netcore.app.3.0.0-preview5-27614-10.nupkg'.\r\n\r\n```\r\nbut there's also some like this (related?)\r\n```\r\nC:\\dotnetbuild\\work\\1d7d4ab2-d77a-4283-a513-58e70840c82f\\Work\\dd487873-0f74-404f-8a30-ee4c22b674d6\\Unzip\\netcoreapp3.0\\project.csproj : error NU1605: Detected package downgrade: Microsoft.NETCore.Platforms from 3.0.0-preview5.19216.1 to 3.0.0-preview3.19128.7. Reference the package directly from the project to select a different version. \r\nC:\\dotnetbuild\\work\\1d7d4ab2-d77a-4283-a513-58e70840c82f\\Work\\dd487873-0f74-404f-8a30-ee4c22b674d6\\Unzip\\netcoreapp3.0\\project.csproj : error NU1605:  project -> Microsoft.NETCore.Platforms.Future 3.0.0-preview5.19216.1 -> Microsoft.NETCore.Platforms (>= 3.0.0-preview5.19216.1) \r\nC:\\dotnetbuild\\work\\1d7d4ab2-d77a-4283-a513-58e70840c82f\\Work\\dd487873-0f74-404f-8a30-ee4c22b674d6\\Unzip\\netcoreapp3.0\\project.csproj : error NU1605:  project -> Microsoft.NETCore.Platforms (>= 3.0.0-preview3.19128.7)\r\n\r\n```\r\n\r\n@joperezr @ericstj ","Url":"https://github.com/dotnet/corefx/issues/36980","RelatedDescription":"Closed issue \"All packaging tests failing\" (#36980)"},{"Id":"434486422","IsPullRequest":true,"CreatedAt":"2019-04-18T00:48:25","Actor":"joperezr","Number":"36976","RawContent":null,"Title":"Manually updating dependencies in order to get the new coreclr packages.","State":"closed","Body":"FYI: @tarekgh @tannergooding since you both wanted a new version of coreclr ingested into corefx\r\n\r\nThis PR is manually updating our dependencies in order to bring some required changes from coreclr in. This PR is also doing the changes from #36927 per @tarekgh's request, which was doing an update the Index and Range interfaces and tests","Url":"https://github.com/dotnet/corefx/pull/36976","RelatedDescription":"Closed or merged PR \"Manually updating dependencies in order to get the new coreclr packages.\" (#36976)"},{"Id":"434524357","IsPullRequest":true,"CreatedAt":"2019-04-17T23:14:45","Actor":"GrabYourPitchforks","Number":"36978","RawContent":null,"Title":"[WIP] Remove legacy code from System.Text.Encodings.Web","State":"open","Body":"This is preparing the __System.Text.Encodings.Web__ project so that we can resolve https://github.com/dotnet/corefx/issues/34830 and https://github.com/dotnet/corefx/issues/33509.\r\n\r\nCurrently this PR does the following things:\r\n\r\n- Removes almost all _unsafe_ code from the implementations, relying wholly on `Rune` and `Span` as workhorse types.\r\n- Removes legacy APIs that don't make sense to carry forward and that we can't make work in the new world.\r\n- Rewrites the base type `TextEncoder` on top of only two abstract methods: does this scalar value have to be encoded, and if so what does the encoding look like? Anybody can write a `TextEncoder` instance by subclassing the type and overriding only those two methods.\r\n\r\nA future iteration will:\r\n\r\n- Improve the performance of these types, including vectorizing code where possible.\r\n- Add UTF-8 overloads, `Span`-based overloads, and `OperationStatus`-based overloads of the `Encode` routines.\r\n- **Move the type in-box so that it can be used by __System.Text.Json__.**\r\n- **Re-introduce _netstandard_ compatibility.**\r\n\r\n(Bolded items above are required before we can remove the WIP indicator.)\r\n\r\nThis PR in its current form is not attempting to optimize the performance of these routines. I'm concerned only with the API shape at the moment. Performance improvements can come in a future PR.\r\n\r\n__Note to reviewers:__ These APIs are __not__ part of net standard, and they're __not__ currently shipping in-box. Currently the only way to get this package is to perform a manual install from NuGet. (ASP.NET 2.x also includes the package in its project template.)","Url":"https://github.com/dotnet/corefx/pull/36978","RelatedDescription":"Open PR \"[WIP] Remove legacy code from System.Text.Encodings.Web\" (#36978)"},{"Id":"434515647","IsPullRequest":false,"CreatedAt":"2019-04-17T22:40:34","Actor":"merriemcgaw","Number":"36977","RawContent":null,"Title":"WinForms on .NET Core should support RESX file serialization and deserialization","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/issues/36977","RelatedDescription":"Closed issue \"WinForms on .NET Core should support RESX file serialization and deserialization\" (#36977)"},{"Id":"434425925","IsPullRequest":true,"CreatedAt":"2019-04-17T20:49:23","Actor":"steveharter","Number":"36972","RawContent":null,"Title":"Update third party notices to add Json.NET","State":"closed","Body":"First usage based on camel-casing code (https://github.com/dotnet/corefx/pull/36940)\r\n\r\ncc @JamesNK \r\n","Url":"https://github.com/dotnet/corefx/pull/36972","RelatedDescription":"Closed or merged PR \"Update third party notices to add Json.NET\" (#36972)"},{"Id":"434469760","IsPullRequest":false,"CreatedAt":"2019-04-17T20:23:50","Actor":"BrennanConroy","Number":"36974","RawContent":null,"Title":"We should base64 encode byte[] when writing Json","State":"open","Body":"When writing/serializing a `byte[]` to Json we were expecting to see a base64 encoded string.\r\n\r\nSimilarly when reading/deserializing, a base64 encoded string should be readable into a `byte[]`.","Url":"https://github.com/dotnet/corefx/issues/36974","RelatedDescription":"Open issue \"We should base64 encode byte[] when writing Json\" (#36974)"},{"Id":"434438265","IsPullRequest":false,"CreatedAt":"2019-04-17T19:02:26","Actor":"safern","Number":"36973","RawContent":null,"Title":"StringBuilder ChunkEnumerator.Current fails with NRE exception when MoveNext is not called.","State":"open","Body":"```cs\r\n        static void Main(string[] args)\r\n        {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.Insert(0, new char[] {'h', 'e', 'l', 'l', 'o'});\r\n            var enumerator = sb.GetChunks();\r\n            Console.WriteLine(enumerator.Current);\r\n        }\r\n```\r\n\r\nThis fails with a NRE. \r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Text.StringBuilder.ChunkEnumerator.get_Current()\r\n   at tmp2.Program.Main(String[] args) in C:\\repos\\tmp2\\Program.cs:line 13\r\n```\r\n\r\nIn order to avoid that I would have to call `MoveNext` before calling `Current` -- because of this, doing a foreach on the chunks will not fail.\r\n\r\ncc: @stephentoub @krwq @JeremyKuhne ","Url":"https://github.com/dotnet/corefx/issues/36973","RelatedDescription":"Open issue \"StringBuilder ChunkEnumerator.Current fails with NRE exception when MoveNext is not called.\" (#36973)"},{"Id":"434331326","IsPullRequest":false,"CreatedAt":"2019-04-17T18:00:28","Actor":"tannergooding","Number":"36966","RawContent":null,"Title":"GenerateReferenceSource Baseline is out of date","State":"closed","Body":"The current baseline for `/t:GenerateReferenceSource` appears to be fairly out of date.\r\n\r\nCurrently running it over the entire repo produces a number of diffs:\r\n[Baseline.patch.txt](https://github.com/dotnet/corefx/files/3090216/Baseline.patch.txt)\r\n\r\nSome of this is simple \"ordering\" issues and many of it is attributes that we say can be stripped. However, there are also a few APIs that are reported as not being exposed.\r\n\r\nThese should likely be reviewed and fixed-up as applicable.","Url":"https://github.com/dotnet/corefx/issues/36966","RelatedDescription":"Closed issue \"GenerateReferenceSource Baseline is out of date\" (#36966)"},{"Id":"434361421","IsPullRequest":false,"CreatedAt":"2019-04-17T17:46:08","Actor":"tannergooding","Number":"36967","RawContent":null,"Title":"Running GenerateReferenceSource fails against certain source projects.","State":"closed","Body":"Currently running `/t:GenerateReferenceSource` against the certain `src` projects in the repo causes the following failure:\r\n\r\n```\r\nUnable to resolve assembly 'Assembly(Name=System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)' referenced by '...'.\r\n```\r\n\r\nIs this expected? I see no such errors when running against the `ref` projects","Url":"https://github.com/dotnet/corefx/issues/36967","RelatedDescription":"Closed issue \"Running GenerateReferenceSource fails against certain source projects.\" (#36967)"},{"Id":"434399614","IsPullRequest":true,"CreatedAt":"2019-04-17T17:25:38","Actor":"idg10","Number":"36971","RawContent":null,"Title":"Support XmlKnownDtds in XmlPreloadedResolver","State":"open","Body":"The XmlPreloadedResolver class purports to provide certain well-known DTDs - its constructor accepts a value from the XmlKnownDtds enumeration, and if you specify either of the supported DTD sets (sXHTML 1.0, and RSS 0.91) it is meant to make the relevant DTDs available.\r\n\r\nIn desktop .NET, this works as advertised. In .NET Core, it does not, for the reasons described in https://github.com/dotnet/corefx/issues/36929\r\n\r\nThis was missed because there are no tests to verify that the XmlPreloadedResolver makes the relevant DTDs available when asked to. (In fact, the tests that existed seemed to be based on a misunderstanding of how this class works.) This adds tests that verify that the known DTDs are provided when requested. And it reinstates the relevant EmbeddedResource entries required to enable the functionality. (The code for this has been in .NET Core's XmlPreloadedResolver all along. It was only the absence of the necessary embedded resources preventing it from working.)","Url":"https://github.com/dotnet/corefx/pull/36971","RelatedDescription":"Open PR \"Support XmlKnownDtds in XmlPreloadedResolver\" (#36971)"},{"Id":"434396197","IsPullRequest":true,"CreatedAt":"2019-04-17T17:24:21","Actor":"Dotnet-GitSync-Bot","Number":"36970","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @tarekgh","Url":"https://github.com/dotnet/corefx/pull/36970","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#36970)"},{"Id":"434314997","IsPullRequest":true,"CreatedAt":"2019-04-17T17:07:52","Actor":"tannergooding","Number":"36965","RawContent":null,"Title":"Regenerating the System.Runtime.Intrinsics reference source","State":"closed","Body":"GenAPI was updated to handle this properly in https://github.com/dotnet/arcade/pull/2527","Url":"https://github.com/dotnet/corefx/pull/36965","RelatedDescription":"Closed or merged PR \"Regenerating the System.Runtime.Intrinsics reference source\" (#36965)"},{"Id":"434374758","IsPullRequest":false,"CreatedAt":"2019-04-17T16:26:08","Actor":"tierarzt24","Number":"36969","RawContent":null,"Title":"Add-Migration fail:System.IO.FileLoadException: Could not load file or assembly 'System.Diagnostics.DiagnosticSource, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'","State":"open","Body":"If we want to run the add-Migration Task in the Package Manager console.  Unfortunatelly we got the error below. We use .net core 2.2. SDK.  I do not understand why the system looks for Version 4.0.3.0. \r\nAnyone know why this error occurs?\r\n\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileLoadException: Could not load file or assembly 'System.Diagnostics.DiagnosticSource, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddCoreServices()\r\n   at Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache.ApplyServices(IDbContextOptions options, ServiceCollection services)\r\n   at Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache.<>c__DisplayClass4_0.<GetOrAdd>b__2(Int64 k)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache.GetOrAdd(IDbContextOptions options, Boolean providerRequired)\r\n   at Microsoft.EntityFrameworkCore.DbContext..ctor(DbContextOptions options)\r\n   at PimStar.Data.PimStarDbContext..ctor() in C:\\Users\\d.roeming\\Documents\\Visual Studio 2017\\vsts\\PimStar\\Libraries\\PimStar.Data\\PimStarDbContext.cs:line 22\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor)\r\n   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, Boolean nonPublic)\r\n   at System.Activator.CreateInstance(Type type)\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.<>c__DisplayClass12_3.<FindContextTypes>b__13()\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.CreateContext(Func`1 factory)\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.CreateContext(String contextType)\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)\r\nException has been thrown by the target of an invocation.","Url":"https://github.com/dotnet/corefx/issues/36969","RelatedDescription":"Open issue \"Add-Migration fail:System.IO.FileLoadException: Could not load file or assembly 'System.Diagnostics.DiagnosticSource, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\" (#36969)"},{"Id":"434374722","IsPullRequest":true,"CreatedAt":"2019-04-17T16:26:01","Actor":"wfurt","Number":"36968","RawContent":null,"Title":"allow Http2 loopback test be unencrypted","State":"open","Body":"This is follow-up on #36753\r\nThis change adds environmental variable to force HTTP2 loopback test to not use SSL even of platforms where ALPN is supported. This allows to develop and debug HTTP/2 tests easier. One can run  packet capture and  see all frames decoded in Wireshark. \r\n\r\nThis is not enabled by default and it is meant only for developers. \r\nNote that not all tests pass with this - updated generic and Http2 loopback tests work but not all tests are updated (yet?)","Url":"https://github.com/dotnet/corefx/pull/36968","RelatedDescription":"Open PR \"allow Http2 loopback test be unencrypted\" (#36968)"},{"Id":"434286378","IsPullRequest":true,"CreatedAt":"2019-04-17T15:15:41","Actor":"stephentoub","Number":"36964","RawContent":null,"Title":"Disable asserting HttpListener web socket test","State":"closed","Body":"https://github.com/dotnet/corefx/issues/36963\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/36964","RelatedDescription":"Closed or merged PR \"Disable asserting HttpListener web socket test\" (#36964)"},{"Id":"434264478","IsPullRequest":true,"CreatedAt":"2019-04-17T12:48:47","Actor":"MichalStrehovsky","Number":"36962","RawContent":null,"Title":"Remove `Partial` from `EnablePartialNgenOptimization`","State":"open","Body":"Ngen optimizations are controlled with two properties - one is EnableNgen, the other is ApplyNgen. We were already using the ApplyNgen property with value of `full` (as of #36450), so this was already doing full Ngen, but we still used EnablePartialNgen to control the EnableNgen property. It's a roundabout way to EnableNgen, but does the same thing. This pull request removes the indirection.","Url":"https://github.com/dotnet/corefx/pull/36962","RelatedDescription":"Open PR \"Remove `Partial` from `EnablePartialNgenOptimization`\" (#36962)"},{"Id":"434250522","IsPullRequest":true,"CreatedAt":"2019-04-17T12:16:41","Actor":"ahsonkhan","Number":"36961","RawContent":null,"Title":"Re-design Utf8JsonWriter as a regular class rather than a ref struct.","State":"open","Body":"The first commit (i.e. https://github.com/dotnet/corefx/commit/a19d268c17d25c1423cab68242bafa189c79352f - Add an in-box array-backed IBufferWriter<T>), fixes https://github.com/dotnet/corefx/issues/34894.\r\nRelated PR: https://github.com/dotnet/corefx/pull/35094\r\n\r\nThat commit can be reviewed independently of the `Utf8JsonWriter` changes but since there was a strong dependency between these components, I submitted them together.\r\n\r\nThe remaining commits update the `Utf8JsonWriter` design based on recent usability and reliability feedback: https://gist.github.com/ahsonkhan/f6f30656717548212693e5eaa49cece5\r\n\r\n**API Review Feedback TL;DR:**\r\n1) We should aim to provide built-in stream support and simplify its usage even more than proposed.\r\n2) The `Utf8JsonWriter` should implement `IDisposable` and `IAsyncDisposable` (on latest platform).\r\n3) `BytesWritten` should be renamed to `BytesPending`\r\n4) Auto-flush on dispose and remove `isFinalBlock` bool on flush (the user would need to validate correctness themselves).\r\n5) Add `Reset()` and `Reset(...)` overloads that allow re-using the `Utf8JsonWriter` instance.\r\n6) Remove `Clear()` and clear the memory field on flush to avoid forcing the caller to reset after flushing.\r\n7) Consider adding leaveOpen/dispose bools on ctor to close/dispose the stream on `Utf8JsonWriter.Dispose` (?).\r\n8) Keep the `JsonWriterOptions` a struct. It cannot be modified once passed in to the constructor.\r\n9) Internally create an `ArrayBufferWriter` to have the same code path for both `Stream` and `IBufferWriter` modes.\r\n\r\n**Left TODO:**\r\n- Remove duplicate code by refactoring common functionality: https://github.com/dotnet/corefx/issues/36987\r\n- Investigate writing large string values in 4 KB chunks within Utf8JsonWriter instead all at once: https://github.com/dotnet/corefx/issues/36958\r\n\r\nThis change also fixes https://github.com/dotnet/corefx/issues/35182\r\n\r\n**Note:** Fixed sized IBW without slack capacity are generally not supported since the writer tends to eagerly ask for space and an exact, fixed-sized IBW would fail the `GetSpan(minimumSize)` contract.\r\n\r\ncc @davidfowl, @KrzysztofCwalina, @stephentoub, @steveharter, @bartonjs, @layomia, @JeremyKuhne, @GrabYourPitchforks, @BrennanConroy, @rynowak, @pranavkm, @pakrym, @terrajobst, @glennc, @joshfree, @JamesNK ","Url":"https://github.com/dotnet/corefx/pull/36961","RelatedDescription":"Open PR \"Re-design Utf8JsonWriter as a regular class rather than a ref struct.\" (#36961)"},{"Id":"434244664","IsPullRequest":true,"CreatedAt":"2019-04-17T12:01:56","Actor":"jimdemis","Number":"36959","RawContent":null,"Title":"Added optional/default parameters for StreamWriter/StreamReader","State":"open","Body":"This resolves #8173\r\nThe CoreCLR side: [dotnet/coreclr#24056](https://github.com/dotnet/coreclr/pull/24056)","Url":"https://github.com/dotnet/corefx/pull/36959","RelatedDescription":"Open PR \"Added optional/default parameters for StreamWriter/StreamReader\" (#36959)"},{"Id":"434220714","IsPullRequest":false,"CreatedAt":"2019-04-17T10:59:06","Actor":"ahsonkhan","Number":"36958","RawContent":null,"Title":"Investigate writing large string values in 4 KB chunks within Utf8JsonWriter instead all at once","State":"open","Body":"Regardless of the mode (IBufferWriter or stream), consider writing JSON string values (whether UTF-16 or UTF-8) in chunks of fixed size (for example `4_096`). Currently, the writer pessimistically asks for as much space as could be required in the worst case, and tries to write the whole string in one shot. It would reduce allocation/GC pressure if we wrote in smaller chunks.\r\n\r\nFor the stream mode, we should also consider putting a size cap ~ 64k to avoid the LOH.\r\n\r\n**Note:** This only applies to JSON **string values**. Property names and other tokens (like numbers, literals, datetime/etc.) all tend to generally be small enough to not benefit from this optimization.\r\n\r\nFor example, something like the following, where we enter the \"slow/loop\" path for strings larger than 4K:\r\n```C#\r\nprivate void WriteStringMinimized(ReadOnlySpan<char> escapedValue)\r\n{\r\n    Debug.Assert(escapedValue.Length < (int.MaxValue / JsonConstants.MaxExpansionFactorWhileTranscoding) - 3);\r\n\r\n    if (escapedValue.Length > 4_000)\r\n    {\r\n        WriteStringMinimizedSlow(escapedValue);\r\n        return;\r\n    }\r\n\r\n    // Otherwise, fall down the normal/fast code path\r\n}\r\n\r\nprivate void WriteStringMinimizedSlow(ReadOnlySpan<char> escapedValue)\r\n{\r\n    Debug.Assert(escapedValue.Length > 4_000);\r\n    Debug.Assert(escapedValue.Length < (int.MaxValue / JsonConstants.MaxExpansionFactorWhileTranscoding) - 3);\r\n\r\n    if (_memory.Length - BytesPending < escapedValue.Length)\r\n    {\r\n        Grow(2);\r\n    }\r\n\r\n    Span<byte> output = _memory.Span;\r\n\r\n    if (_currentDepth < 0)\r\n    {\r\n        output[BytesPending++] = JsonConstants.ListSeparator;\r\n    }\r\n    output[BytesPending++] = JsonConstants.Quote;\r\n\r\n    TranscodeAndWriteLoop(escapedValue, output.Slice(BytesPending));\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nprivate void TranscodeAndWriteLoop(ReadOnlySpan<char> escapedPropertyName, Span<byte> output)\r\n{\r\n    ReadOnlySpan<byte> byteSpan = MemoryMarshal.AsBytes(escapedPropertyName);\r\n    int partialConsumed = 0;\r\n    while (true)\r\n    {\r\n        OperationStatus status = JsonWriterHelper.ToUtf8(byteSpan.Slice(partialConsumed), output, out int consumed, out int written);\r\n        BytesPending += written;\r\n        if (status == OperationStatus.Done)\r\n        {\r\n            break;\r\n        }\r\n        partialConsumed += consumed;\r\n        Span<byte> temp = GrowAndReturn();\r\n        output = temp;\r\n    }\r\n\r\n    if (output.Length <= BytesPending)\r\n    {\r\n        Span<byte> temp = GrowAndReturn();\r\n        output = temp;\r\n    }\r\n\r\n    output[BytesPending++] = JsonConstants.Quote;\r\n}\r\n\r\nprivate Span<byte> GrowAndReturn()\r\n{\r\n    FlushHelper();\r\n\r\n    if (_stream != null)\r\n    {\r\n        FlushHelperStream();\r\n        _memory = _output.GetMemory(DefaultGrowthSize);\r\n\r\n        Debug.Assert(_memory.Length >= DefaultGrowthSize);\r\n    }\r\n    else\r\n    {\r\n        _memory = _output.GetMemory(DefaultGrowthSize);\r\n\r\n        if (_memory.Length < DefaultGrowthSize)\r\n        {\r\n            ThrowHelper.ThrowArgumentException_NeedLargerSpan();\r\n        }\r\n    }\r\n\r\n    BytesCommitted += BytesPending;\r\n    BytesPending = 0;\r\n\r\n    return _memory.Span;\r\n}\r\n```\r\n\r\nSee related PR: https://github.com/dotnet/corefx/pull/36961\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36958","RelatedDescription":"Open issue \"Investigate writing large string values in 4 KB chunks within Utf8JsonWriter instead all at once\" (#36958)"},{"Id":"434529177","IsPullRequest":false,"CreatedAt":"2019-04-09T20:03:58","Actor":"upixsoul","Number":"36979","RawContent":null,"Title":"HttpWebRequest.ServicePoint.Certificates is null on .NET Core","State":"open","Body":"I have been doing some test migrating .NET Framework 4.6.2 apps to .NET Core 2. I noticed that this particular app, a monitoring http is not working fine with Net Core 2. Can you please help me to verify what is happening?\r\n\r\n```c#\r\nstatic void Main(string[] args)\r\n{\r\n    try\r\n    {\r\n        HttpWebRequest myhttpWebReqest = (HttpWebRequest)WebRequest.Create(\"https://www.google.com.mx/\");\r\n        HttpWebResponse myHttpWebResponse = (HttpWebResponse)myhttpWebReqest.GetResponse();\r\n        Console.WriteLine(myHttpWebResponse.StatusCode);\r\n        Console.WriteLine((int)myHttpWebResponse.StatusCode);\r\n        Console.WriteLine(myhttpWebReqest.ServicePoint.Certificate.GetEffectiveDateString());\r\n        Console.WriteLine(myhttpWebReqest.ServicePoint.Certificate.GetExpirationDateString());\r\n        Console.WriteLine(myhttpWebReqest.ServicePoint.Certificate.Issuer);\r\n        Console.WriteLine(myhttpWebReqest.ServicePoint.Certificate.Subject);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Console.WriteLine(ex.Message);\r\n        if(ex.InnerException !=null)\r\n        {\r\n            Console.WriteLine(ex.InnerException);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nin the .NET Framework 4.6.2 i see the certificate data, in the .NET Core 2 i see myhttpWebReqest.ServicePoint.Certificate null ... do you know why?\r\n\r\nyou can see the same question in stack overflow [here](https://stackoverflow.com/questions/55368470/why-certificates-are-null-using-net-core-2-but-it-works-just-fine-with-net-fra)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36979","RelatedDescription":"Open issue \"HttpWebRequest.ServicePoint.Certificates is null on .NET Core\" (#36979)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"434566580","IsPullRequest":true,"CreatedAt":"2019-04-18T02:49:56","Actor":"sharwell","Number":"35103","RawContent":null,"Title":"Revoke IVTs to dotnet/roslyn-analyzers","State":"open","Body":"Closes #35102","Url":"https://github.com/dotnet/roslyn/pull/35103","RelatedDescription":"Open PR \"Revoke IVTs to dotnet/roslyn-analyzers\" (#35103)"},{"Id":"434556721","IsPullRequest":false,"CreatedAt":"2019-04-18T01:57:45","Actor":"sharwell","Number":"35102","RawContent":null,"Title":"Revoke IVTs to unit tests in dotnet/roslyn-analyzers","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35102","RelatedDescription":"Open issue \"Revoke IVTs to unit tests in dotnet/roslyn-analyzers\" (#35102)"},{"Id":"434556593","IsPullRequest":false,"CreatedAt":"2019-04-18T01:57:07","Actor":"sharwell","Number":"35101","RawContent":null,"Title":"Migrate ALM IVTs to the External Access pattern","State":"open","Body":"Applies to **Microsoft.VisualStudio.Alm.Shared.CodeAnalysisClient**.","Url":"https://github.com/dotnet/roslyn/issues/35101","RelatedDescription":"Open issue \"Migrate ALM IVTs to the External Access pattern\" (#35101)"},{"Id":"434554857","IsPullRequest":false,"CreatedAt":"2019-04-18T01:47:56","Actor":"ivanbasov","Number":"35100","RawContent":null,"Title":"Semantic model returns a single candidate symbol for chained queries and generic vs non-generic overloads","State":"open","Body":"```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace ThenIncludeIntellisenseBug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var registrations = new List<Registration>().AsQueryable();\r\n            var reg = registrations.Include(r => r.Activities).ThenInclude(c => c.$$);\r\n        }\r\n    }\r\n\r\n    public class Registration\r\n    {\r\n        public ICollection<Activity> Activities { get; set; }\r\n    }\r\n\r\n    public class Activity\r\n    {\r\n        public Task Task { get; set; }\r\n    }\r\n\r\n    public class Task\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public interface IIncludableQueryable<out TEntity, out TProperty> : IQueryable<TEntity>\r\n    {\r\n    }\r\n\r\n    public static class EntityFrameworkQuerybleExtensions\r\n    {\r\n        public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(\r\n            this IQueryable<TEntity> source,\r\n            Expression<Func<TEntity, TProperty>> navigationPropertyPath)\r\n            where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n\r\n        public static IIncludableQueryable<Registration, Task> ThenInclude(\r\n            this IIncludableQueryable<Registration, ICollection<Activity>> source,\r\n            Func<Activity, Task> navigationPropertyPath)\r\n        {\r\n            return default(IIncludableQueryable<Registration, Task>);\r\n        }\r\n\r\n        public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(\r\n            this IIncludableQueryable<TEntity, TPreviousProperty> source,\r\n            Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n    }\r\n}\r\n```\r\n`c` before $$ can be either Activity or ICollection<Activity>. One can replace $$ with `Task `or with `First()`. Both are valid. However, intellisense is provided for `First() `and other collection methods. `Task `is not available in intellisense.\r\n\r\nThis happens because C# semantic model provides just a single candidate for the method symbol.","Url":"https://github.com/dotnet/roslyn/issues/35100","RelatedDescription":"Open issue \"Semantic model returns a single candidate symbol for chained queries and generic vs non-generic overloads\" (#35100)"},{"Id":"434549333","IsPullRequest":false,"CreatedAt":"2019-04-18T01:18:37","Actor":"sharwell","Number":"35099","RawContent":null,"Title":"Migrate Xamarin IVTs to the External Access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35099","RelatedDescription":"Open issue \"Migrate Xamarin IVTs to the External Access pattern\" (#35099)"},{"Id":"434549040","IsPullRequest":false,"CreatedAt":"2019-04-18T01:16:58","Actor":"sharwell","Number":"35098","RawContent":null,"Title":"Remove old Microsoft.VisualStudio.InteractiveServices project and IVTs","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35098","RelatedDescription":"Open issue \"Remove old Microsoft.VisualStudio.InteractiveServices project and IVTs\" (#35098)"},{"Id":"434546333","IsPullRequest":true,"CreatedAt":"2019-04-18T01:02:12","Actor":"jp2masa","Number":"35097","RawContent":null,"Title":"Use Machine.Arm64 instead of raw value","State":"open","Body":"## Changes\r\n- Use `Machine.Arm64` instead of raw value.\r\n\r\nThese cases were probably missed on #27023.","Url":"https://github.com/dotnet/roslyn/pull/35097","RelatedDescription":"Open PR \"Use Machine.Arm64 instead of raw value\" (#35097)"},{"Id":"434542745","IsPullRequest":false,"CreatedAt":"2019-04-18T00:42:49","Actor":"ivanbasov","Number":"35096","RawContent":null,"Title":"VisualBasic semantic model does not recognize overloads at chained queries","State":"open","Body":"```\r\nImports System.Linq.Expressions\r\n\r\nNamespace ThenIncludeIntellisenseBug\r\n\r\n    Class Program\r\n        Shared Sub Main(args As String())\r\n            Dim registrations = New List(Of Registration)().AsQueryable()\r\n            Dim reg = registrations.Include(Function(r) r.Activities).ThenInclude(Function(a, b, c) c.F)\r\n        End Sub\r\n    End Class\r\n\r\n    Friend Class Registration\r\n        Public Property Activities As ICollection(Of Activity)\r\n    End Class\r\n\r\n    Public Class Activity\r\n        Public Property Task As Task\r\n    End Class\r\n\r\n    Public Class Task\r\n        Public Property Name As String\r\n    End Class\r\n\r\n    Public Interface IIncludableQueryable(Of Out TEntity, Out TProperty)\r\n        Inherits IQueryable(Of TEntity)\r\n    End Interface\r\n\r\n    Public Module EntityFrameworkQuerybleExtensions\r\n        <System.Runtime.CompilerServices.Extension>\r\n        Public Function Include(Of TEntity, TProperty)(\r\n                                                      source As IQueryable(Of TEntity),\r\n                                                      navigationPropertyPath As Expression(Of Func(Of TEntity, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)\r\n            Return Nothing\r\n        End Function\r\n\r\n        <System.Runtime.CompilerServices.Extension>\r\n        Public Function ThenInclude(Of TEntity, TPreviousProperty, TProperty)(\r\n                                                                             source As IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty)),\r\n                                                                             navigationPropertyPath As Expression(Of Func(Of String, TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)\r\n            Return Nothing\r\n        End Function\r\n\r\n        <System.Runtime.CompilerServices.Extension>\r\n        Public Function ThenInclude(Of TEntity, TPreviousProperty, TProperty)(\r\n                                                                             source As IIncludableQueryable(Of TEntity, TPreviousProperty),\r\n                                                                             navigationPropertyPath As Expression(Of Func(Of String, String, TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)\r\n            Return Nothing\r\n        End Function\r\n\r\n    End Module\r\nEnd Namespace\r\n```\r\n\r\nVB displays the following diagnostic\r\n`BC36532\tNested function does not have the same signature as delegate 'Func(Of String, Activity, Object)'.\t`\r\n\r\nThen, if place caret after F and you type CTRL+J, it would provide completion for object not for ICollection<>.\r\n\r\nCompare with C#\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace ThenIncludeIntellisenseBug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var registrations = new List<Registration>().AsQueryable();\r\n            var reg = registrations.Include(r => r.Activities).ThenInclude((a, b, c) => c.F);\r\n        }\r\n    }\r\n\r\n    internal class Registration\r\n    {\r\n        public ICollection<Activity> Activities { get; set; }\r\n    }\r\n\r\n    public class Activity\r\n    {\r\n        public Task Task { get; set; }\r\n    }\r\n\r\n    public class Task\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public interface IIncludableQueryable<out TEntity, out TProperty> : IQueryable<TEntity>\r\n    {\r\n    }\r\n\r\n    public static class EntityFrameworkQuerybleExtensions\r\n    {\r\n        public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(\r\n            this IQueryable<TEntity> source,\r\n            Expression<Func<TEntity, TProperty>> navigationPropertyPath)\r\n            where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n\r\n        public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(\r\n            this IIncludableQueryable<TEntity, ICollection<TPreviousProperty>> source,\r\n            Expression<Func<string, TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n\r\n        public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(\r\n            this IIncludableQueryable<TEntity, TPreviousProperty> source,\r\n            Expression<Func<string, string, TPreviousProperty, TProperty>> navigationPropertyPath) where TEntity : class\r\n        {\r\n            return default(IIncludableQueryable<TEntity, TProperty>);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nC# provides \r\n`CS1061\t'ICollection<Activity>' does not contain a definition for 'F' and no accessible extension method 'F' accepting a first argument of type 'ICollection<Activity>' could be found (are you missing a using directive or an assembly reference?)`\r\nand it works properly with CTRL + J.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35096","RelatedDescription":"Open issue \"VisualBasic semantic model does not recognize overloads at chained queries\" (#35096)"},{"Id":"434539206","IsPullRequest":true,"CreatedAt":"2019-04-18T00:23:30","Actor":"ryzngard","Number":"35095","RawContent":null,"Title":"Add new ConversionKind to IsImplicitConversion test","State":"open","Body":"Fixes #34984 \r\n\r\n`UnsertConversionKind` was added by [this commit](https://github.com/dotnet/roslyn/commit/9160b423#diff-61c14d55196186c0f71024c92e5a382fR11) but the switch statement wasn't updated. ","Url":"https://github.com/dotnet/roslyn/pull/35095","RelatedDescription":"Open PR \"Add new ConversionKind to IsImplicitConversion test\" (#35095)"},{"Id":"434534573","IsPullRequest":true,"CreatedAt":"2019-04-18T00:01:26","Actor":"AlekseyTs","Number":"35094","RawContent":null,"Title":"Add unit-tests for fixed issues.","State":"open","Body":"Closes #33276.\r\nCloses #31676.","Url":"https://github.com/dotnet/roslyn/pull/35094","RelatedDescription":"Open PR \"Add unit-tests for fixed issues.\" (#35094)"},{"Id":"434534549","IsPullRequest":true,"CreatedAt":"2019-04-18T00:01:22","Actor":"333fred","Number":"35093","RawContent":null,"Title":"Merge master","State":"open","Body":"@dotnet/roslyn-compiler please review b53c63f, cleanup and fixes from the merge.","Url":"https://github.com/dotnet/roslyn/pull/35093","RelatedDescription":"Open PR \"Merge master\" (#35093)"},{"Id":"434534309","IsPullRequest":true,"CreatedAt":"2019-04-18T00:00:17","Actor":"dotnet-bot","Number":"35092","RawContent":null,"Title":"Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps\ngit reset --hard upstream/dev16.1-preview2-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35092","RelatedDescription":"Open PR \"Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps\" (#35092)"},{"Id":"434527758","IsPullRequest":false,"CreatedAt":"2019-04-17T23:29:06","Actor":"sharwell","Number":"35091","RawContent":null,"Title":"Verify removal of Microsoft.CodeAnalysis.Editor.UI.Wpf IVT","State":"open","Body":"I can't find any indication the IVT for **Microsoft.CodeAnalysis.Editor.UI.Wpf** was ever used. This IVT should be removed if not needed.","Url":"https://github.com/dotnet/roslyn/issues/35091","RelatedDescription":"Open issue \"Verify removal of Microsoft.CodeAnalysis.Editor.UI.Wpf IVT\" (#35091)"},{"Id":"434524028","IsPullRequest":false,"CreatedAt":"2019-04-17T23:13:24","Actor":"sharwell","Number":"35090","RawContent":null,"Title":"Verify removal of Scripting.Desktop IVT","State":"open","Body":"I can't find any indication that **Microsoft.CodeAnalysis.Scripting.Desktop** ever existed. If this is the case, we should remove the IVTs to it.","Url":"https://github.com/dotnet/roslyn/issues/35090","RelatedDescription":"Open issue \"Verify removal of Scripting.Desktop IVT\" (#35090)"},{"Id":"434523128","IsPullRequest":true,"CreatedAt":"2019-04-17T23:12:34","Actor":"dotnet-bot","Number":"35089","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35089","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#35089)"},{"Id":"434523099","IsPullRequest":true,"CreatedAt":"2019-04-17T23:09:39","Actor":"dotnet-bot","Number":"35088","RawContent":null,"Title":"Merge dev16.1-preview2-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35088","RelatedDescription":"Open PR \"Merge dev16.1-preview2-vs-deps to master-vs-deps\" (#35088)"},{"Id":"434523049","IsPullRequest":true,"CreatedAt":"2019-04-17T23:09:28","Actor":"dotnet-bot","Number":"35087","RawContent":null,"Title":"Merge dev16.0 to dev16.1-preview2","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.1-preview2.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.1-preview2\ngit reset --hard upstream/dev16.1-preview2\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.1-preview2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35087","RelatedDescription":"Open PR \"Merge dev16.0 to dev16.1-preview2\" (#35087)"},{"Id":"434522004","IsPullRequest":false,"CreatedAt":"2019-04-17T23:05:15","Actor":"sharwell","Number":"35086","RawContent":null,"Title":"Migrate CodeLens IVTs to the External Access pattern","State":"open","Body":"We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:\r\n\r\n* Microsoft.VisualStudio.CodeSense.ReferencesProvider\r\n* Microsoft.VisualStudio.CodeSense.Roslyn\r\n* Microsoft.VisualStudio.CodeSense.TestsProvider\r\n\r\nThese assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.","Url":"https://github.com/dotnet/roslyn/issues/35086","RelatedDescription":"Open issue \"Migrate CodeLens IVTs to the External Access pattern\" (#35086)"},{"Id":"434521461","IsPullRequest":false,"CreatedAt":"2019-04-17T23:02:51","Actor":"sharwell","Number":"35085","RawContent":null,"Title":"Migrate ExternalDependencyServices to the External Access pattern","State":"open","Body":"Covers **Microsoft.VisualStudio.LanguageServices.ExternalDependencyServices**.","Url":"https://github.com/dotnet/roslyn/issues/35085","RelatedDescription":"Open issue \"Migrate ExternalDependencyServices to the External Access pattern\" (#35085)"},{"Id":"434520749","IsPullRequest":false,"CreatedAt":"2019-04-17T22:59:45","Actor":"sharwell","Number":"35084","RawContent":null,"Title":"Migrate IntelliTrace IVTs to the External Access pattern","State":"open","Body":"We are planning to remove IVT access to dotnet/roslyn from the following assembly for 16.2 Preview 1:\r\n\r\n* Microsoft.VisualStudio.ProductionBreakpoints.CodeAnalysis\r\n\r\nThis assembly should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.","Url":"https://github.com/dotnet/roslyn/issues/35084","RelatedDescription":"Open issue \"Migrate IntelliTrace IVTs to the External Access pattern\" (#35084)"},{"Id":"434520708","IsPullRequest":false,"CreatedAt":"2019-04-17T22:59:36","Actor":"AlekseyTs","Number":"35083","RawContent":null,"Title":"SubstitutedMethodSymbol.Equals doesn't compare top level nullable annotations for type arguments","State":"open","Body":"```\r\n            // This checks if the type parameters on the method itself have been substituted in the same way.\r\n            int arity = this.Arity;\r\n            for (int i = 0; i < arity; i++)\r\n            {\r\n                // TODO: what about annotations\r\n                if (!TypeSymbol.Equals(this.TypeArgumentsWithAnnotations[i].Type, other.TypeArgumentsWithAnnotations[i].Type, TypeCompareKind.ConsiderEverything2))\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n```\r\n\r\nNote the ```TODO:``` comment","Url":"https://github.com/dotnet/roslyn/issues/35083","RelatedDescription":"Open issue \"SubstitutedMethodSymbol.Equals doesn't compare top level nullable annotations for type arguments\" (#35083)"},{"Id":"434515309","IsPullRequest":true,"CreatedAt":"2019-04-17T22:38:25","Actor":"genlu","Number":"35082","RawContent":null,"Title":"Add telemetry for import completion","State":"open","Body":"I have verified the telemetry change locally using telemetry monitor. Also include some changes to the tests. Retargeted this to master per offline discussion with @jinujoseph.\r\n\r\n@dpoeschl @heejaechang @CyrusNajmabadi @dotnet/roslyn-ide ","Url":"https://github.com/dotnet/roslyn/pull/35082","RelatedDescription":"Open PR \"Add telemetry for import completion\" (#35082)"},{"Id":"434514442","IsPullRequest":false,"CreatedAt":"2019-04-17T22:34:59","Actor":"sharwell","Number":"35081","RawContent":null,"Title":"Migrate internal testing IVTs to the External Access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35081","RelatedDescription":"Open issue \"Migrate internal testing IVTs to the External Access pattern\" (#35081)"},{"Id":"434512906","IsPullRequest":false,"CreatedAt":"2019-04-17T22:29:07","Actor":"sharwell","Number":"35080","RawContent":null,"Title":"Migrate legacy code analysis assemblies to the External Access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35080","RelatedDescription":"Open issue \"Migrate legacy code analysis assemblies to the External Access pattern\" (#35080)"},{"Id":"434511168","IsPullRequest":false,"CreatedAt":"2019-04-17T22:22:52","Actor":"sharwell","Number":"35079","RawContent":null,"Title":"Migrate Razor features to the External Access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35079","RelatedDescription":"Open issue \"Migrate Razor features to the External Access pattern\" (#35079)"},{"Id":"434509923","IsPullRequest":false,"CreatedAt":"2019-04-17T22:18:20","Actor":"sharwell","Number":"35078","RawContent":null,"Title":"Migrate unit testing features to External Access pattern","State":"open","Body":"We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:\r\n\r\n* Microsoft.CodeAnalysis.LiveUnitTesting.BuildManager\r\n* Microsoft.CodeAnalysis.LiveUnitTesting.BuildManager.UnitTests\r\n* Microsoft.CodeAnalysis.LiveUnitTesting.Orchestrator\r\n* Microsoft.CodeAnalysis.LiveUnitTesting.Orchestrator.UnitTests\r\n* Microsoft.CodeAnalysis.LiveUnitTesting.Test.Utilities\r\n* Microsoft.CodeAnalysis.UnitTesting.SourceBasedTestDiscovery\r\n* Microsoft.CodeAnalysis.UnitTesting.SourceBasedTestDiscovery.UnitTests\r\n* Microsoft.VisualStudio.LiveUnitTesting.IntegrationTests\r\n\r\nThese assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.","Url":"https://github.com/dotnet/roslyn/issues/35078","RelatedDescription":"Open issue \"Migrate unit testing features to External Access pattern\" (#35078)"},{"Id":"434506469","IsPullRequest":false,"CreatedAt":"2019-04-17T22:05:49","Actor":"sharwell","Number":"35077","RawContent":null,"Title":"Migrate TypeScript IVTs to the External Access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35077","RelatedDescription":"Open issue \"Migrate TypeScript IVTs to the External Access pattern\" (#35077)"},{"Id":"434505169","IsPullRequest":false,"CreatedAt":"2019-04-17T22:01:30","Actor":"sharwell","Number":"35076","RawContent":null,"Title":"Migrate F# IVTs to the external access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35076","RelatedDescription":"Open issue \"Migrate F# IVTs to the external access pattern\" (#35076)"},{"Id":"434504528","IsPullRequest":false,"CreatedAt":"2019-04-17T21:59:26","Actor":"AlekseyTs","Number":"35075","RawContent":null,"Title":"Incorrect result type is inferred for a conditional access when a type parameter is constrained to a `Nullable<T>` type","State":"open","Body":"```\r\nclass C<T>\r\n{\r\n    public virtual void M<U>(B x, U y) where U : T\r\n    {\r\n\r\n    }\r\n}\r\n\r\nclass B : C<int?>\r\n{\r\n    public override void M<U>(B x, U y)\r\n    {\r\n        var z = x?.Test(y);\r\n        z = null;\r\n    }\r\n\r\n    T Test<T>(T x) => throw null;\r\n}\r\n```\r\n\r\nObserved:\r\n```\r\nMicrosoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n[IL]: Error: [f:\\delete\\debug.dll : B::M[U]] Type load failed.\r\n1 Error(s) Verifying debug.dll\r\n```\r\n\r\nThe IL uses a ```Nullable<U>``` which is a nullable type:\r\n```\r\n.method public hidebysig virtual instance void \r\n        M<(valuetype [mscorlib]System.Nullable`1<int32>) U>(class B x,\r\n                                                            !!U y) cil managed\r\n{\r\n  // Code size       37 (0x25)\r\n  .maxstack  2\r\n  .locals init (valuetype [mscorlib]System.Nullable`1<!!U> V_0,\r\n           valuetype [mscorlib]System.Nullable`1<!!U> V_1)\r\n  IL_0000:  nop\r\n  IL_0001:  ldarg.1\r\n  IL_0002:  brtrue.s   IL_000f\r\n  IL_0004:  ldloca.s   V_1\r\n  IL_0006:  initobj    valuetype [mscorlib]System.Nullable`1<!!U>\r\n  IL_000c:  ldloc.1\r\n  IL_000d:  br.s       IL_001b\r\n  IL_000f:  ldarg.1\r\n  IL_0010:  ldarg.2\r\n  IL_0011:  call       instance !!0 B::Test<!!0>(!!0)\r\n  IL_0016:  newobj     instance void valuetype [mscorlib]System.Nullable`1<!!U>::.ctor(!0)\r\n  IL_001b:  stloc.0\r\n  IL_001c:  ldloca.s   V_0\r\n  IL_001e:  initobj    valuetype [mscorlib]System.Nullable`1<!!U>\r\n  IL_0024:  ret\r\n} // end of method B::M\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35075","RelatedDescription":"Open issue \"Incorrect result type is inferred for a conditional access when a type parameter is constrained to a `Nullable<T>` type\" (#35075)"},{"Id":"434503014","IsPullRequest":false,"CreatedAt":"2019-04-17T21:54:37","Actor":"sharwell","Number":"35074","RawContent":null,"Title":"Migrate Live Share IVTs to the external access pattern","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/35074","RelatedDescription":"Open issue \"Migrate Live Share IVTs to the external access pattern\" (#35074)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"434505045","IsPullRequest":true,"CreatedAt":"2019-04-17T22:01:09","Actor":"jkotas","Number":"7320","RawContent":null,"Title":"Update objwriter version","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7320","RelatedDescription":"Open PR \"Update objwriter version\" (#7320)"},{"Id":"434453402","IsPullRequest":true,"CreatedAt":"2019-04-17T19:42:09","Actor":"MichalStrehovsky","Number":"7319","RawContent":null,"Title":"Increase official build Linux job timeout","State":"closed","Body":"We need more time when building the object writer package. 120 is probably overboard (we timed out while copying artifacts around), but it matches the Windows job timeout.","Url":"https://github.com/dotnet/corert/pull/7319","RelatedDescription":"Closed or merged PR \"Increase official build Linux job timeout\" (#7319)"},{"Id":"434396249","IsPullRequest":true,"CreatedAt":"2019-04-17T18:29:23","Actor":"Dotnet-GitSync-Bot","Number":"7318","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @tarekgh","Url":"https://github.com/dotnet/corert/pull/7318","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7318)"},{"Id":"434362500","IsPullRequest":false,"CreatedAt":"2019-04-17T16:01:32","Actor":"NextTurn","Number":"7317","RawContent":null,"Title":"Unable to load DLL 'clrcompression.dll'","State":"closed","Body":"## Stack trace\r\n\r\n```\r\nUnhandled Exception: System.IO.Compression.ZLibException: The underlying compression routine could not be loaded correctly. ---> System.DllNotFoundException: Unable to load DLL 'clrcompression.dll': The specified module could not be found.\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0xef\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x4f\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvoke(InteropHelpers.MethodFixupCell*) + 0x3e\r\n   at Interop.zlib.InflateInit2_(ZLibNative.ZStream&, Int32) + 0x41\r\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32) + 0x40\r\n   at System.IO.Compression.ZLibNative.CreateZLibStreamForInflate(ZLibNative.ZLibStreamHandle&, Int32) + 0x4e\r\n   at System.IO.Compression.Inflater.InflateInit(Int32) + 0x45\r\n```\r\n\r\n## Command\r\n\r\n```\r\ndotnet publish -r win-x64\r\n```\r\n\r\n## Environment\r\n\r\n.NET Core 3.0 or 2.2\r\nWindows 10 1809 x64\r\n\r\nRuns fine with CoreCLR.","Url":"https://github.com/dotnet/corert/issues/7317","RelatedDescription":"Closed issue \"Unable to load DLL 'clrcompression.dll'\" (#7317)"},{"Id":"434280838","IsPullRequest":true,"CreatedAt":"2019-04-17T13:22:42","Actor":"tannergooding","Number":"7316","RawContent":null,"Title":"Updating the roslyn toolset to 3.1.0-beta3-19213-02","State":"open","Body":"CC. @jkotas \r\n\r\nThis brings in the latest nullability changes and the new `readonly members` feature, which will be needed for changes like https://github.com/dotnet/coreclr/pull/23827\r\n\r\nThe compiler version matches that in arcade and buildtools right now.","Url":"https://github.com/dotnet/corert/pull/7316","RelatedDescription":"Open PR \"Updating the roslyn toolset to 3.1.0-beta3-19213-02\" (#7316)"},{"Id":"433999560","IsPullRequest":true,"CreatedAt":"2019-04-16T22:34:23","Actor":"jkotas","Number":"7315","RawContent":null,"Title":"ObjWriter build fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7315","RelatedDescription":"Closed or merged PR \"ObjWriter build fixes\" (#7315)"},{"Id":"433323004","IsPullRequest":true,"CreatedAt":"2019-04-16T21:11:30","Actor":"trylek","Number":"7306","RawContent":null,"Title":"Smaller SuperIlc fixes for bugs I hit in local testing","State":"closed","Body":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Closed or merged PR \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306)"},{"Id":"433505434","IsPullRequest":true,"CreatedAt":"2019-04-16T17:40:15","Actor":"trylek","Number":"7308","RawContent":null,"Title":"Fixes for some of the remaining Pri#1 CPAOT compilation buckets","State":"closed","Body":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Closed or merged PR \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308)"},{"Id":"433850919","IsPullRequest":true,"CreatedAt":"2019-04-16T17:05:26","Actor":"jkotas","Number":"7314","RawContent":null,"Title":"Use CentOS docker image for official builds","State":"closed","Body":"The same one is used for CoreCLR official builds","Url":"https://github.com/dotnet/corert/pull/7314","RelatedDescription":"Closed or merged PR \"Use CentOS docker image for official builds\" (#7314)"},{"Id":"433794769","IsPullRequest":true,"CreatedAt":"2019-04-16T15:28:46","Actor":"Dotnet-GitSync-Bot","Number":"7313","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7313","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7313)"},{"Id":"433034057","IsPullRequest":true,"CreatedAt":"2019-04-16T14:05:34","Actor":"filipnavara","Number":"7299","RawContent":null,"Title":"Move EventSource to shared CoreLib partition","State":"closed","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/23925.","Url":"https://github.com/dotnet/corert/pull/7299","RelatedDescription":"Closed or merged PR \"Move EventSource to shared CoreLib partition\" (#7299)"},{"Id":"433552374","IsPullRequest":true,"CreatedAt":"2019-04-16T08:06:54","Actor":"Dotnet-GitSync-Bot","Number":"7310","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7310)"},{"Id":"433571783","IsPullRequest":true,"CreatedAt":"2019-04-16T07:09:59","Actor":"jkotas","Number":"7312","RawContent":null,"Title":"Add AdditionalBuildArgs option for the official build pipeline","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7312","RelatedDescription":"Closed or merged PR \"Add AdditionalBuildArgs option for the official build pipeline\" (#7312)"},{"Id":"433568931","IsPullRequest":true,"CreatedAt":"2019-04-16T07:08:27","Actor":"jkotas","Number":"7311","RawContent":null,"Title":"Add musl targets in packages","State":"closed","Body":"Contribute to #4552","Url":"https://github.com/dotnet/corert/pull/7311","RelatedDescription":"Closed or merged PR \"Add musl targets in packages\" (#7311)"},{"Id":"433521193","IsPullRequest":true,"CreatedAt":"2019-04-16T02:12:54","Actor":"Dotnet-GitSync-Bot","Number":"7309","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7309)"},{"Id":"433456685","IsPullRequest":false,"CreatedAt":"2019-04-15T20:08:37","Actor":"josephmoresena","Number":"7307","RawContent":null,"Title":"Compile Gui.cs example win-x64","State":"open","Body":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n","Url":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Open issue \"Compile Gui.cs example win-x64\" (#7307)"},{"Id":"433044565","IsPullRequest":false,"CreatedAt":"2019-04-15T12:48:38","Actor":"UNDEFINED-BEHAVIOR","Number":"7300","RawContent":null,"Title":"What is the correct system codepage for build.cmd script","State":"closed","Body":"![image](https://user-images.githubusercontent.com/8407331/56100592-a4028c00-5f55-11e9-9abd-3af4f5a5856e.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7300","RelatedDescription":"Closed issue \"What is the correct system codepage for build.cmd script\" (#7300)"},{"Id":"433259360","IsPullRequest":true,"CreatedAt":"2019-04-15T12:39:46","Actor":"MichalStrehovsky","Number":"7305","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7305)"},{"Id":"433156142","IsPullRequest":true,"CreatedAt":"2019-04-15T11:44:52","Actor":"MichalStrehovsky","Number":"7303","RawContent":null,"Title":"Remove problematic characters in eventtrace.cpp","State":"closed","Body":"The C++ compiler finds the typographic apostrophe disturbing.\r\n\r\n`warning C4828: The file contains a character starting at offset 0x103e5 that is illegal in the current source character set (codepage 65001).`","Url":"https://github.com/dotnet/corert/pull/7303","RelatedDescription":"Closed or merged PR \"Remove problematic characters in eventtrace.cpp\" (#7303)"},{"Id":"433157869","IsPullRequest":true,"CreatedAt":"2019-04-15T08:32:26","Actor":"MichalStrehovsky","Number":"7304","RawContent":null,"Title":"Add normalized equivalent of YieldProcessor","State":"open","Body":"Ports dotnet/coreclr#13670 to CoreRT.\r\n\r\nMarked as draft because I don't have good perf numbers yet (and this is not an area that I'm comfortable making changes in).","Url":"https://github.com/dotnet/corert/pull/7304","RelatedDescription":"Open PR \"Add normalized equivalent of YieldProcessor\" (#7304)"},{"Id":"433075833","IsPullRequest":true,"CreatedAt":"2019-04-15T04:09:51","Actor":"Dotnet-GitSync-Bot","Number":"7302","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7302","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7302)"},{"Id":"433060403","IsPullRequest":true,"CreatedAt":"2019-04-15T02:33:52","Actor":"Dotnet-GitSync-Bot","Number":"7301","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @razfriman","Url":"https://github.com/dotnet/corert/pull/7301","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7301)"},{"Id":"432982157","IsPullRequest":true,"CreatedAt":"2019-04-14T19:55:54","Actor":"MichalStrehovsky","Number":"7296","RawContent":null,"Title":"Group Task/Opcodes/Keywords in ClrThreadPoolEventSource","State":"closed","Body":"EventSource requires these specially named nested types.","Url":"https://github.com/dotnet/corert/pull/7296","RelatedDescription":"Closed or merged PR \"Group Task/Opcodes/Keywords in ClrThreadPoolEventSource\" (#7296)"},{"Id":"432982222","IsPullRequest":true,"CreatedAt":"2019-04-14T19:54:01","Actor":"MichalStrehovsky","Number":"7297","RawContent":null,"Title":"Add analysis of EventSource metadata","State":"closed","Body":"Event sources should not be blocked, so we need to poke a hole through blocking. On Project N, there's a separate IL2IL transform that deals with framework-provided event sources to sidestep this - I don't think we want to replicate that.\r\n\r\nThen we need to add special rule to make the compiler keep metadata for the magical nested types.","Url":"https://github.com/dotnet/corert/pull/7297","RelatedDescription":"Closed or merged PR \"Add analysis of EventSource metadata\" (#7297)"},{"Id":"432982311","IsPullRequest":true,"CreatedAt":"2019-04-14T19:53:04","Actor":"MichalStrehovsky","Number":"7298","RawContent":null,"Title":"Enhance analysis of reflection dependencies","State":"closed","Body":"EventSource reflects on method signatures that might refer to types we never heard about (they were never referenced from code in a way that would bring in the dependency). Bring the dependencies explicitly.","Url":"https://github.com/dotnet/corert/pull/7298","RelatedDescription":"Closed or merged PR \"Enhance analysis of reflection dependencies\" (#7298)"},{"Id":"432951950","IsPullRequest":true,"CreatedAt":"2019-04-14T12:21:57","Actor":"MichalStrehovsky","Number":"7295","RawContent":null,"Title":"Fix portable threadpool build on Windows","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7295","RelatedDescription":"Closed or merged PR \"Fix portable threadpool build on Windows\" (#7295)"},{"Id":"432932349","IsPullRequest":true,"CreatedAt":"2019-04-14T09:03:58","Actor":"Dotnet-GitSync-Bot","Number":"7294","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @filipnavara @sdmaclea @dotnet-maestro-bot","Url":"https://github.com/dotnet/corert/pull/7294","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7294)"},{"Id":"432900041","IsPullRequest":true,"CreatedAt":"2019-04-14T03:11:11","Actor":"MichalStrehovsky","Number":"7293","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7293","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7293)"},{"Id":"432899417","IsPullRequest":true,"CreatedAt":"2019-04-13T21:03:54","Actor":"dotnet-bot","Number":"7292","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7292","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7292)"},{"Id":"432839971","IsPullRequest":true,"CreatedAt":"2019-04-13T15:20:34","Actor":"MichalStrehovsky","Number":"7291","RawContent":null,"Title":"Delete ManualResetEventSlim.cs","State":"closed","Body":"We use the copy in the `shared` directory.","Url":"https://github.com/dotnet/corert/pull/7291","RelatedDescription":"Closed or merged PR \"Delete ManualResetEventSlim.cs\" (#7291)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"434558015","IsPullRequest":true,"CreatedAt":"2019-04-18T02:04:39","Actor":"dsplaisted","Number":"3137","RawContent":null,"Title":"Update NuGet","State":"open","Body":"Insert NuGet 5.1.0-rtm.5921\r\n\r\nSyncs with the version inserted to dotnet/toolset here: https://github.com/dotnet/toolset/pull/593","Url":"https://github.com/dotnet/sdk/pull/3137","RelatedDescription":"Open PR \"Update NuGet\" (#3137)"},{"Id":"434557343","IsPullRequest":true,"CreatedAt":"2019-04-18T02:00:56","Actor":"dsplaisted","Number":"3136","RawContent":null,"Title":"Allow disabling apphost","State":"open","Body":"Don't try to find apphost packs if UseAppHost is not true.\r\n\r\nThere was a regression in global tool installation caught by the GivenDotnetInstallTool.ItRunsWithTheSpecifiedVerbosity test in the cli repo.  This is a targeted change to enable fixing that (the dummy restore.proj will need to set UseAppHost to false too), in order to unblock https://github.com/dotnet/cli/pull/11166.\r\n\r\nThis is related to #3135, but this PR is a more surgical fix than the broader questions in that bug.","Url":"https://github.com/dotnet/sdk/pull/3136","RelatedDescription":"Open PR \"Allow disabling apphost\" (#3136)"},{"Id":"432300971","IsPullRequest":true,"CreatedAt":"2019-04-18T01:23:51","Actor":"nugetlurker","Number":"3117","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3117","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3117)"},{"Id":"432300957","IsPullRequest":true,"CreatedAt":"2019-04-18T01:23:26","Actor":"nugetlurker","Number":"3116","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3116","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3116)"},{"Id":"434534365","IsPullRequest":false,"CreatedAt":"2019-04-18T00:00:31","Actor":"dsplaisted","Number":"3135","RawContent":null,"Title":"AppHost selection doesn't work well with DisableImplicitFrameworkReferences or RuntimeFrameworkVersion","State":"open","Body":"There are a couple of issues with app host selection:\r\n\r\n- Some projects use `DisableImplicitFrameworkReferences` to disable any package references, downloads, etc. that aren't explicitly specified.  In some cases this is used for a \"restore-only\" project that simply downloads a package.  It would be expected that the `DisableImplicitFrameworkReferences` property would stop an AppHost pack from being downloaded, but currently it doesn't.  This can lead to problems with package downgrades, or where an app host can't be found for the specified RID.\r\n- `RuntimeFrameworkVersion` can be specified as metadata on a `FrameworkReference`.  However, there's no way to do the same thing for the AppHost pack (besides specifying the `RuntimeFrameworkVersion` property which applies to all shared frameworks.  This makes it difficult to consume a specific build of .NET Core.","Url":"https://github.com/dotnet/sdk/issues/3135","RelatedDescription":"Open issue \"AppHost selection doesn't work well with DisableImplicitFrameworkReferences or RuntimeFrameworkVersion\" (#3135)"},{"Id":"434531654","IsPullRequest":true,"CreatedAt":"2019-04-17T23:47:19","Actor":"fadimounir","Number":"3134","RawContent":null,"Title":"Rename properties and simplify R2R targets","State":"open","Body":"Rename properties as agreed (PublishReadyToRun, PublishReadyToRunEmitSymbols, PublishReadyToRunExclude)\r\n\r\nSimplify R2R creation logic: No need to split ResolvedFilesToPublish into PublishAlways and PreserveNewest lists.","Url":"https://github.com/dotnet/sdk/pull/3134","RelatedDescription":"Open PR \"Rename properties and simplify R2R targets\" (#3134)"},{"Id":"434529197","IsPullRequest":true,"CreatedAt":"2019-04-17T23:35:34","Actor":"sbomer","Number":"3133","RawContent":null,"Title":"Update sdk","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3133","RelatedDescription":"Open PR \"Update sdk\" (#3133)"},{"Id":"432729778","IsPullRequest":true,"CreatedAt":"2019-04-17T22:28:03","Actor":"fadimounir","Number":"3123","RawContent":null,"Title":"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios","State":"closed","Body":"Unsupported scenarios are:\r\n1) When a RID is not provided\r\n2) When publishing framework dependent apps (TEMP, until #3109 and #3110 are fixed)","Url":"https://github.com/dotnet/sdk/pull/3123","RelatedDescription":"Closed or merged PR \"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios\" (#3123)"},{"Id":"432722156","IsPullRequest":true,"CreatedAt":"2019-04-17T19:56:05","Actor":"fadimounir","Number":"3121","RawContent":null,"Title":"Couple of fixes and tweaks to the R2R creation logic","State":"closed","Body":"Changing crossgen commands to use response files.\r\nChanging /Platform_Assemblies_Paths to a set of /r arguments\r\nUsing resolved files list as assembly references to crossgen (temp hack until issue 3110 is fixed)","Url":"https://github.com/dotnet/sdk/pull/3121","RelatedDescription":"Closed or merged PR \"Couple of fixes and tweaks to the R2R creation logic\" (#3121)"},{"Id":"433742612","IsPullRequest":true,"CreatedAt":"2019-04-17T13:55:07","Actor":"dotnet-maestro[bot]","Number":"3130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19215.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3130)"},{"Id":"434176500","IsPullRequest":true,"CreatedAt":"2019-04-17T09:16:03","Actor":"swaroop-sridhar","Number":"3132","RawContent":null,"Title":"Publish to Single-File","State":"open","Body":"This change implements support for publishing apps to a [single file](https://github.com/dotnet/designs/blob/master/accepted/single-file/design.md).\r\n\r\n* ``dotnet publish /p:PublishSingleFile=true`` causes the contents of the \"original\" publish directory to a single file in the actual publish directory\r\n* Files marked with the meta-data ``<ExcludeFromSingleFile>false<ExcludeFromSingleFile>`` are left in the publish directory unbundled. This includes PDB files by default\r\n* PDB files can be bundled into the single file by setting ``/p:IncludeSymbolsInSingleFile=true``\r\n\r\nPublishing to a single file requires publishing wrt a RID using an apphost, because the generated file is the platform-specific AppHost executable with embedded dependencies.","Url":"https://github.com/dotnet/sdk/pull/3132","RelatedDescription":"Open PR \"Publish to Single-File\" (#3132)"},{"Id":"432723599","IsPullRequest":false,"CreatedAt":"2019-04-17T07:24:41","Actor":"JunTaoLuo","Number":"3122","RawContent":null,"Title":"Unable to resolve AppHost for the current runtime if it's not included in the SDK","State":"closed","Body":"I'm seeing broken behaviour when the app host is not bundled in the targeting pack of the SDK.\r\n\r\nI discovered this as part of our dependency update in https://github.com/aspnet/AspNetCore-Tooling/pull/409. When we first ingested the changes, we saw errors such like:\r\n```\r\n(AspNetCore-Tooling) C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents> dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreApp30PackageVersion=3.0.0-preview5-27608-16 /p:_RazorBuildServerPipeName=\"bc0e5740-2362-4e4c-8244-64c38154f0d7\" /t:Build /p:Configuration=Debug /p:_RazorForceBuildServer=true\r\nMicrosoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Microsoft.Common.CurrentVersion.targets(4552,5): error MSB3030: Could not copy the file \"C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\obj\\Debug\\netcoreapp3.0\\MvcWithComponents.exe\" because it was not found. [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\n```\r\nI have a binlog for the failing scenario:\r\n[msbuild.zip](https://github.com/dotnet/sdk/files/3074987/msbuild.zip)\r\n\r\nIt seems like the issue is that the app host package could not be found in \"\\.dotnet\\x64\\packs\\runtime.win-x64.Microsoft.NETCore.DotNetAppHost\" since the version of the runtime we reference is ahead of the the version that's included in the SDK. In this case, sdk\\3.0.100-preview4-011136 doesn't contain the targeting pack for runtime\\3.0.0-preview5-27608-16. However, using a newer runtime than what's included in the SDK is a core scenario that we depend on so how should this work?\r\n\r\nCan someone on the SDK team please advise on the expectation here and look through the binlog to see why the mechanism breaks in our scenario?\r\n\r\ncc @nguerrera @dsplaisted \r\n\r\ncc @dougbu @natemcmaster\r\n","Url":"https://github.com/dotnet/sdk/issues/3122","RelatedDescription":"Closed issue \"Unable to resolve AppHost for the current runtime if it's not included in the SDK\" (#3122)"},{"Id":"433940775","IsPullRequest":false,"CreatedAt":"2019-04-16T19:10:12","Actor":"KirillOsenkov","Number":"3131","RawContent":null,"Title":"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input","State":"open","Body":"See https://github.com/Microsoft/msbuild/issues/4313\r\n\r\nhttps://github.com/dotnet/sdk/blob/8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateSupportedRuntime.targets#L44\r\n\r\nWe should find another way to invalidate. I'm seeing RAR cache written to every time even during rebuilds where nothing has changed. This in turn triggers rebuild of WriteAppConfig, even though the app config is the same.","Url":"https://github.com/dotnet/sdk/issues/3131","RelatedDescription":"Open issue \"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input\" (#3131)"},{"Id":"431984959","IsPullRequest":true,"CreatedAt":"2019-04-16T05:37:10","Actor":"dotnet-bot","Number":"3113","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3113","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3113)"},{"Id":"431772059","IsPullRequest":true,"CreatedAt":"2019-04-16T03:37:40","Actor":"dsplaisted","Number":"3111","RawContent":null,"Title":"Use PackageDownload","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS).","Url":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Closed or merged PR \"Use PackageDownload\" (#3111)"},{"Id":"433471159","IsPullRequest":false,"CreatedAt":"2019-04-15T20:47:03","Actor":"ericstj","Number":"3129","RawContent":null,"Title":"SDK doesn't honor TargetingPackVersion on FrameworkReference","State":"open","Body":"SDK permits specifying TargetingPackVersion metdata on FrameworkReference:\r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L99-L103\r\n\r\nBut then it constructs the path to the targeting pack based on KnownFrameworkReference: \r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L112-L122\r\n\r\nAlso, is this really the way we should be specifying which framework to build against?  I had expected `RuntimeFrameworkVersion` to work, but it looks like that only controls the runtime and not ref-pack.\r\n\r\n/cc @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3129","RelatedDescription":"Open issue \"SDK doesn't honor TargetingPackVersion on FrameworkReference\" (#3129)"},{"Id":"433460479","IsPullRequest":false,"CreatedAt":"2019-04-15T20:18:34","Actor":"vidarw","Number":"3128","RawContent":null,"Title":"No package for Ubuntu 19.04 (Disco Dingo)","State":"open","Body":"Ubuntu is officially releasing version 19.04 (Disco Dingo) within a week.\r\nThere is currently no `dotnet-sdk-2.2` available for the newset version of Ubuntu in the Microsoft repository.\r\n\r\nSolution would be to add a disco compatible release package or as a temporary fix provide a standalone .deb package to install with `dpkg`.","Url":"https://github.com/dotnet/sdk/issues/3128","RelatedDescription":"Open issue \"No package for Ubuntu 19.04 (Disco Dingo)\" (#3128)"},{"Id":"433244399","IsPullRequest":true,"CreatedAt":"2019-04-15T19:21:53","Actor":"dotnet-maestro[bot]","Number":"3127","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3127","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3127)"},{"Id":"432532625","IsPullRequest":true,"CreatedAt":"2019-04-14T13:54:35","Actor":"dotnet-maestro[bot]","Number":"3118","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19211.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19212.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3118","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3118)"},{"Id":"431838901","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:41","Actor":"peterhuene","Number":"3112","RawContent":null,"Title":"Escape output item specs for ResolvePackageAssets task.","State":"closed","Body":"This commit fixes the ResolvePackageAssets task to escape the output\r\nitem specs.  This allows assets in packages to contain characters that\r\nmight get unescaped by MSBuild.\r\n\r\nFixes #3069.","Url":"https://github.com/dotnet/sdk/pull/3112","RelatedDescription":"Closed or merged PR \"Escape output item specs for ResolvePackageAssets task.\" (#3112)"},{"Id":"432140915","IsPullRequest":true,"CreatedAt":"2019-04-12T23:48:57","Actor":"johnbeisner","Number":"3114","RawContent":null,"Title":"[WIP] running perf tests and upload to benchview in Azure DevOps","State":"closed","Body":"First draft: running perf tests and upload to benchview in Azure DevOps","Url":"https://github.com/dotnet/sdk/pull/3114","RelatedDescription":"Closed or merged PR \"[WIP] running perf tests and upload to benchview in Azure DevOps\" (#3114)"},{"Id":"432691504","IsPullRequest":true,"CreatedAt":"2019-04-12T23:15:36","Actor":"dsplaisted","Number":"3120","RawContent":null,"Title":"Allow test tools to roll forward across major versions of .NET Core","State":"closed","Body":"Currently the dotnet tools which run our tests target .NET Core 2.1.  This updates them to allow roll-forward across major .NET Core versions, so that they can run on a 3.0 runtime if 2.x isn't installed.","Url":"https://github.com/dotnet/sdk/pull/3120","RelatedDescription":"Closed or merged PR \"Allow test tools to roll forward across major versions of .NET Core\" (#3120)"},{"Id":"432733384","IsPullRequest":true,"CreatedAt":"2019-04-12T20:30:59","Actor":"sbomer","Number":"3125","RawContent":null,"Title":"Add ILLink targets and tests","State":"open","Body":"This adds linker targets, mostly adapted from https://github.com/mono/linker/blob/9766e2b2406a3d44cbf05e49ab2bd19b535e3e5a/src/ILLink.Tasks/ILLink.Tasks.targets, to run the linker after `ComputeFilesToPublish`.\r\n\r\nA few things still need to change (but I wanted to get what I have so far out for review):\r\n- Change property names to agreed-upon strings\r\n- Update deps file generation in response to https://github.com/dotnet/sdk/pull/3086. I think this needs https://github.com/dotnet/sdk/pull/3113 or another update PR to be merged.\r\n- Update the linker:\r\n  - to include `UsingTask` for other tasks in the assembly (namely, `ComputeManagedAssemblies`)\r\n  - for `ReferencePath` support\r\n  - with a net472 build of the task dll\r\n\r\nWhen I run these tests locally with a recent version of the linker, the checks pass up to the deps file asserts.\r\n\r\n@nguerrera, @fadimounir, @swaroop-sridhar PTAL","Url":"https://github.com/dotnet/sdk/pull/3125","RelatedDescription":"Open PR \"Add ILLink targets and tests\" (#3125)"},{"Id":"432733028","IsPullRequest":false,"CreatedAt":"2019-04-12T20:29:52","Actor":"KathleenDollard","Number":"3124","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/sdk/issues/3124","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#3124)"},{"Id":"432641949","IsPullRequest":true,"CreatedAt":"2019-04-12T16:12:36","Actor":"chcosta","Number":"3119","RawContent":null,"Title":"/* Work in progress */ Test arcade changes","State":"open","Body":"Do not merge!\r\n\r\nPlaying around with some template changes to enable test run title for publishing test results.","Url":"https://github.com/dotnet/sdk/pull/3119","RelatedDescription":"Open PR \"/* Work in progress */ Test arcade changes\" (#3119)"},{"Id":"433231210","IsPullRequest":false,"CreatedAt":"2019-04-12T15:12:26","Actor":"cartermp","Number":"3126","RawContent":null,"Title":"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms","State":"open","Body":"Even if we have cool tooling that adds the appropriate stuff to a project file based on various actions in the IDE, there will still be users who manually edit their WinForms/WPF project files.\r\n\r\nWe should emit a warning under the following conditions:\r\n\r\n* `Microsoft.NET.Sdk.WindowsDesktop` is specified but there is no `UseWPF` or `UseWinForms`\r\n* `UseWPF` or `UseWinForms` is specified but the SDK attribute is not `Microsoft.NET.Sdk.WindowsDesktop`\r\n\r\nIn the first case, it would be great if the warning could say something to the effect of:\r\n\r\n\"Microsoft.NET.Sdk.WindowsDesktop is specified, but no corresponding UseWPF or UseWinForms property was found.\"\r\n\r\nIn the latter case, using WPF as an example, something to the effect of:\r\n\r\n\"UseWPF was specified but the SDK attribute is not Microsoft.NET.Sdk.WindowsDesktop\"\r\n\r\nNot sure if this is an SDK concern or not, but I figured I'd log it somewhere.","Url":"https://github.com/dotnet/sdk/issues/3126","RelatedDescription":"Open issue \"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms\" (#3126)"},{"Id":"432201230","IsPullRequest":false,"CreatedAt":"2019-04-11T19:21:25","Actor":"KathleenDollard","Number":"3115","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/sdk/issues/3115","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#3115)"},{"Id":"431235557","IsPullRequest":false,"CreatedAt":"2019-04-09T23:14:53","Actor":"nguerrera","Number":"3110","RawContent":null,"Title":"Resolve runtime pack assets for crossgen even if app is framework-dependent","State":"open","Body":"Crossgen operates on implementation assemblies only, even when passed as references to the compiler. To crossgen a framework-dependent app, we need all of the framework implementation assemblies to be passed to crossgen as references.\r\n\r\nNote that crossgen requires picking a RID. The app can be framework-dependent, but it must be RID specific. (Crossgen generates native code, which can't be rid-agnostic, obviously.) We are guaranteed to have downloaded the runtime packs, we just need to resolve the framework assemblies from it as though the app was self-contained, but without putting them in deps.json or copying them, etc.\r\n\r\nToday, crossgen tasks can find the base shared framework implementation assemblies next to it (it ships in the base runtime pack), but this doesn't work for the other frameworks like WindowsDesktop or ASP.NET. This also can't just blindly aggregate all the files in all the runtime packs, this list needs to account for conflict resolution (WindowsBase in WindowsDesktop wins over WindowsBase in NETCoreApp), etc.","Url":"https://github.com/dotnet/sdk/issues/3110","RelatedDescription":"Open issue \"Resolve runtime pack assets for crossgen even if app is framework-dependent\" (#3110)"},{"Id":"431234100","IsPullRequest":false,"CreatedAt":"2019-04-09T23:08:44","Actor":"nguerrera","Number":"3109","RawContent":null,"Title":"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker","State":"open","Body":"Today, crossgen (new ReadyToRun feature) operates over all files to publish and filters out what is not IL. We have decided that the compilation set should be restricted by default to the set of files that we deem are runtime managed assets and designate as such in the .deps.json.\r\n\r\nAs of now, there isn't an exact match for this list that is readily available. _ResolvedCopyLocalPublishAssets + IntermediateAssembly is close.\r\n\r\nI suspect that with #3080, this will be easier to do, but I didn't review in detail yet.\r\n\r\nWe will want to use the same set of runtime assemblies as candidates for the linker as crossgen. This is high priority as we are hoping to have both linker and crossgen feature-complete for Preview 5.","Url":"https://github.com/dotnet/sdk/issues/3109","RelatedDescription":"Open issue \"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker\" (#3109)"},{"Id":"431167464","IsPullRequest":true,"CreatedAt":"2019-04-09T20:08:25","Actor":"dsplaisted","Number":"3108","RawContent":null,"Title":"Fix conflicts between multiple uses of _PackageReferenceToAdd","State":"open","Body":"Fixes #3027","Url":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Open PR \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1118551190927622144","CreatedAt":"2019-04-17T16:26:00+00:00","UserScreenname":"dotnet","Text":"If you're enjoying the DevOps for https://t.co/iOiV9qNspl Developers series on @ch9 check out this FREE ebook from… https://t.co/IlN3xK8cpo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":16,"RawContent":null},{"Id":"1118529550902865924","CreatedAt":"2019-04-17T15:00:00+00:00","UserScreenname":"dotnet","Text":"In part 3 of DevOps For https://t.co/iOiV9r53NV Developers @AbelSquidHead\n&amp; @jeremylikness show us how to create a… https://t.co/s7eQpdTakW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":6,"RawContent":null},{"Id":"1118196772604530688","CreatedAt":"2019-04-16T16:57:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"1116672310809903105","CreatedAt":"2019-04-12T12:00:00+00:00","UserScreenname":"dotnet","Text":"The #OnDotNet show joined forces with @azureadvocates to bring you DevOps for https://t.co/iOiV9r53NV Developers!… https://t.co/eP7EZV54nW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1116372533907902465","CreatedAt":"2019-04-11T16:08:47+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/XI2YUBZA88","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null},{"Id":"1115373724868333570","CreatedAt":"2019-04-08T21:59:53+00:00","UserScreenname":"dotnet","Text":"On this week's @aspnet Community Standup, Glenn Condron (@condrong) takes Workers Everywhere!\n\nJoin us on Tuesday A… https://t.co/wo80u0zkOk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":13,"RawContent":null},{"Id":"1114554336577609729","CreatedAt":"2019-04-06T15:43:55+00:00","UserScreenname":"dotnet","Text":"Using Windows Installer XML (WiX)? Time to say congrats to @robmen,  @barnson and all the other contributors of… https://t.co/P1rw6S2wGf","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":60,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2019-04-18T05:30:29.0999741Z","RunDurationInMilliseconds":9413}