{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing SignalR (alpha) for ASP.NET Core 2.0","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official preview release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core... <a aria-label=\"read more about Announcing SignalR (alpha) for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T00:00:00","CommentsCount":45,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T00:00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null},{"Title":"WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication","PublishedOn":"2017-06-28T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the recent update to the WCF Service Reference tool in the VS Marketplace, support has been added for downloading metadata for a web service where the metadata exchange (MEX) endpoint has been secured with IIS authentication. The purpose of MEX endpoints is to allow clients to discover the service capabilities, including security aspects of... <a aria-label=\"read more about WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/","RawContent":null},{"Title":"Introducing ASP.NET Core 2.0 Preview 2","PublishedOn":"2017-06-28T00:00:00","CommentsCount":41,"FacebookCount":0,"Summary":"At Build 2017, we released an initial preview version of ASP.NET Core 2.0.  Over the last two months we have incorporated your feedback and added a number of new features.  We now have a Preview 2 version of the ASP.NET Core 2.0 framework and Visual Studio tools for you to try.  In this post, we... <a aria-label=\"read more about Introducing ASP.NET Core 2.0 Preview 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers","PublishedOn":"2017-05-10T00:00:00","CommentsCount":25,"FacebookCount":0,"Summary":"The ASP.NET team is pleased to share the first preview version of the ASP.NET Core 2.0 framework.  In this post, we’ll look at the new features and changes to the web framework that were announced at the Build 2017 keynote and sessions.  We will also look at some other updates that were published for ASP.NET... <a aria-label=\"read more about Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/","RawContent":null},{"Title":"Visual Studio 2017 Tools for Azure Functions","PublishedOn":"2017-05-10T00:00:00","CommentsCount":105,"FacebookCount":0,"Summary":"Visual Studio 2017 Tools for Azure Functions are now available as part of the Azure development workload starting in the Visual Studio 2017 15.3 release. These tools: Enable creating pre-compiled C# functions that bring better cold start performance than script based functions, and opens the entire eco-system of Visual Studio tools for class libraries including code... <a aria-label=\"read more about Visual Studio 2017 Tools for Azure Functions\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6651930247","Type":"IssuesEvent","CreatedAt":"2017-09-28T22:05:16","Actor":"louislewis2","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2218","RelatedDescription":"Opened issue \"Health Checks\" (#2218) at aspnet/Home","RelatedBody":"Hi, \r\n\r\nI am wondering what is happening / the current status of the health checks.\r\nThe code was here, then it moved to another repo. According to the docs,\r\nwe are meant to clone the repo, copy code into our projects to make use of it.\r\n\r\nThis is less than ideal, as a nuget package would most certainly be first prize.\r\nAlso no active development can be seen on that repository which is unnerving.\r\nIs it perhaps that their is no active development because its already perfect? If so,\r\nthen why cant a nuget package be released, even if it was a preview release?\r\n\r\nAlso if it is part of Asp.Net Core, why does the repo not live here with all the other ones?\r\n\r\nThe roadmap mentions this as part of 2.0 if I am not mistaken, so just wondering about that too. If it was missed and is going to form part of the 2.1 release, I am thinking that at least some work would have been on it by now, even if it was bringing the projects up to date with the latest released bits, the current host dependency is sitting at 1.0.2. There is also not much love given to pull requests, that do not seem all that complicated to provide an accept / reject answer on, I can of course be wrong. Its just how it looks when looking at the repo.\r\n\r\nJust a few questions for those who cannot copy source code of what may or may not be what is actually going to land. One can work with preview packages and feel slightly better about it, I think. So any insight or feedback will be greatly appreciated.\r\n\r\n\r\n"},{"Id":"6648981475","Type":"IssuesEvent","CreatedAt":"2017-09-28T11:28:39","Actor":"Joshlo","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2215","RelatedDescription":"Closed issue \"Response on created context keeps giving me NullStream\" (#2215) at aspnet/Home","RelatedBody":"I'm trying to write a middleware for batch requests i .net core 2.0.\r\nSo far the I have splitted the request, pipe each request on to the controllers.\r\nThe controllers return value, but for some reason the response on the created context that I parse to the controllers keeps giving me a NullStream in the body, so I think that there is something that I miss in my setup.\r\n\r\nThe code looks like this:\r\n\r\n    var json = await streamHelper.StreamToJson(context.Request.Body);\r\n\r\n    var requests = JsonConvert.DeserializeObject<IEnumerable<RequestModel>>(json);\r\n\r\n    var responseBody = new List<ResponseModel>();\r\n\r\n    foreach (var request in requests)\r\n    {\r\n        var newRequest = new HttpRequestFeature\r\n        {\r\n            Body = request.Body != null ? new MemoryStream(Encoding.ASCII.GetBytes(request.Body)) : null,\r\n            Headers = context.Request.Headers,\r\n            Method = request.Method,\r\n            Path = request.RelativeUrl,\r\n            PathBase = string.Empty,\r\n            Protocol = context.Request.Protocol,\r\n            Scheme = context.Request.Scheme,\r\n            QueryString = context.Request.QueryString.Value\r\n        };\r\n\r\n        var newRespone = new HttpResponseFeature();\r\n        var requestLifetimeFeature = new HttpRequestLifetimeFeature();\r\n\r\n        var features = CreateDefaultFeatures(context.Features);\r\n        features.Set<IHttpRequestFeature>(newRequest);\r\n        features.Set<IHttpResponseFeature>(newRespone);\r\n        features.Set<IHttpRequestLifetimeFeature>(requestLifetimeFeature);\r\n                    \r\n        var innerContext = _factory.Create(features);\r\n        await _next(innerContext);\r\n                    \r\n        var responseJson = await streamHelper.StreamToJson(innerContext.Response.Body);\r\n\r\nI'm not sure what it is I'm missing in the setup, since innerContext.Response.Body isn't set.\r\n\r\nOne of the endpoints that I use for testing and that gets hit looks like this\r\n\r\n    [Route(\"api/[controller]\")]\r\n    public class ValuesController : Controller\r\n    {\r\n        // GET api/values\r\n        [HttpGet]\r\n        public IEnumerable<string> Get()\r\n        {\r\n            return new string[] { \"value1\", \"value2\" };\r\n        }\r\n    }\r\n\r\nI have also played around with setting var newRespone = new HttpResponseFeature(); to var newRespone = new HttpResponseFeature{ Body = new MemoryStream() }; but then it's just empty"},{"Id":"6647721694","Type":"IssuesEvent","CreatedAt":"2017-09-28T06:12:06","Actor":"NTaylorMullen","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2216","RelatedDescription":"Closed issue \"Self Hosted ASP.NET Core 2.0: TagHelper doesnt work\" (#2216) at aspnet/Home","RelatedBody":"I have ASP.NET Core 2.0 website, which is hosted in a .NET Core console / service. I have implemented a easy custom TagHelper. The TagHelper works fine, when I started the ASP.NET Core website directly from VS2017. When i start the .NET Core console host, which has hosted the asp.net page, the tag helper doesnt work.\r\n\r\nI have try to register the TagHelper in the _ViewImports.cshtml and also directly in the view as self (Home/Index).\r\n\r\nMy custom TagHelper:\r\n```C#\r\n[HtmlTargetElement(\"time\")]\r\npublic class TimeTagHelper : TagHelper\r\n{\r\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\r\n    {\r\n        output.Content.SetHtmlContent($\"<h1>{DateTime.Now.ToShortTimeString()}</h1>\");\r\n    }\r\n}\r\n```\r\n_ViewImports.cshtml\r\n```C#\r\n@using SelfHosted.Website\r\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\r\n@addTagHelper SelfHosted.Website.TagHelpers.*, SelfHosted.Website\r\n```\r\nThe TimeTagHelper intellisense in VS2017 work fine: [TimeTagHelper in Index.cshtml](https://i.stack.imgur.com/LoyyQ.png)\r\n\r\nThe code is on [GitHub](https://github.com/roeb/DotNetCoreSamples). The TagHelper is implemented in SelfHosted.Website and used in /Home/Index. It works perfect when the SelfHosted.Website started directly. But it doesnt work, when i start the Website from SelfHostes.Console.\r\n\r\nAny ideas? :)\r\n\r\nThanks Robert"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6652711650","Type":"IssuesEvent","CreatedAt":"2017-09-29T03:30:27","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/965","RelatedDescription":"Closed issue \"Thounds of threads call System.Threading.WaitHandle.WaitOne\" (#965) at aspnet/SignalR","RelatedBody":"_From @anthonywanted on September 27, 2017 3:14_\n\nOur application running a signalR server and thrift server. While it runs 2 days or more, it use cpu 100% and threads count up to thounds, just suddenly. \r\nI dump a core dump, and run sos EEStack, thounds of threads stack looks like this\r\n![image](https://user-images.githubusercontent.com/26265122/30893942-66942e36-a373-11e7-80db-83aef70e0e2e.png)\r\n\r\nHere is the zabbix graphs\r\n![image](https://user-images.githubusercontent.com/26265122/30894354-e4bbbf84-a375-11e7-8bd6-f928eb3069c8.png)\r\n![image](https://user-images.githubusercontent.com/26265122/30894370-fae14f4a-a375-11e7-9ecb-a5dd4f719d9c.png)\r\n\r\n\r\n\r\nHere is the code, core dump is showing some problem in \r\n`cancelTokenSource.Token.WaitHandle.WaitOne();`\r\n\r\n    public class AccessServer\r\n    {\r\n        private ILogUtility logger = LogFactory.Create(typeof(AccessServer));\r\n\r\n        private CancellationTokenSource cancelTokenSource = new CancellationTokenSource();\r\n\r\n        protected IWebHost webHost;\r\n\r\n        public void Run()\r\n        {\r\n            try\r\n            {\r\n                var settings = ConfigurationUtility.GetSettings<Settings>(\"appsettings\");\r\n                var commonSettings = ConfigurationUtility.GetSettings<CommonSettings>(\"commonsettings\");\r\n                string serviceName = typeof(IAccessService).GetThriftServiceName();\r\n                int port = settings.ThriftPorts[serviceName];\r\n\r\n                StartupService.Current\r\n                .LoadAllAssemblyInBaseDirectory()\r\n                .UseAutofac()\r\n                .RegisterMapper()\r\n                .InitStartupTask()\r\n                .InitUpstreamMessageManager()\r\n                .Start();\r\n\r\n                webHost = new WebHostBuilder()\r\n                    .UseKestrel(o => { })\r\n                    .UseContentRoot(Directory.GetCurrentDirectory())\r\n                    .UseStartup<Startup>()\r\n                    .UseUrls(settings.LocalServer)\r\n                    .Build();\r\n\r\n                webHost.Start();\r\n                $\"SignalR running on {settings.LocalServer}\".WriteInfoLog();\r\n                StartupService.Current.StartThriftServices(commonSettings.LocalServerIP, port, cancelTokenSource,\r\n                   new List<(Type Type, string ServiceName, string ServiceNameConfig)>() { (typeof(IAccessService), $\"{serviceName}-{commonSettings.LocalServerIP.Replace(\".\", \"-\")}-{port}\", serviceName) });\r\n\r\n                cancelTokenSource.Token.WaitHandle.WaitOne();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                logger.Error($\"Access run error：{ex.Message}\", ex);\r\n            }\r\n        }\r\n    }\r\n\r\nenvironment is docker(17.06.0-ce, build 02c1d87) using dotnet image (dotnet:v1.1 runtime) running on centos 7.2(kernel 3.10.0-327.el7.x86_64)\r\n\n\n_Copied from original issue: dotnet/corefx#24278_"},{"Id":"6652358360","Type":"PullRequestEvent","CreatedAt":"2017-09-29T00:50:25","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/966","RelatedDescription":"Merged pull request \"Checking if window.document defined before trying to resolve url\" (#966) at aspnet/SignalR","RelatedBody":""},{"Id":"6652358342","Type":"PullRequestEvent","CreatedAt":"2017-09-29T00:50:25","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/948","RelatedDescription":"Merged pull request \"Replacing 8-byte-long length prefix with varint\" (#948) at aspnet/SignalR","RelatedBody":""},{"Id":"6652266804","Type":"IssuesEvent","CreatedAt":"2017-09-29T00:08:24","Actor":"OpenSpacesAndPlaces","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/967","RelatedDescription":"Opened issue \"Self-JS Client On Remote IIS\" (#967) at aspnet/SignalR","RelatedBody":"It's probably something dumb, but I've seem to hit some sort of strange block.\r\n\r\nCross Application:\r\nlocalhost C# client to localhost C# server - Good\r\nlocalhost C# to remote C# server - Good\r\n\r\nSelf-Host/View (e.g. I'm viewing the currently connected user list across all applications connected)\r\nlocalhost JS client to localhost C# server (self - view on localmachine)- Good\r\nremote JS client to remote C# server (self - view on server)- Good\r\n**remote JS client to remote C# server (self - view on another machine on the network)- Bad**\r\n\r\nHosting on IIS 7.5.\r\n\r\nThe part I'm not understanding is the the same code works in all cases except one.\r\n\r\nIn console I get like:\r\n\"Information: SSE connected to http://**mylocaldns**l/v1/sync?id=4abb1002-9f56-492d-9a8c-433a707b0a3a\"  signalr-client-1.0.0-alpha1-final.min.js:1:11373\r\nClosed  connections.js:44:3\r\nError: Error occurred\r\nStack trace:\r\nconnect/</c.onerror@http://**mylocaldns**/js/signalr/signalr-client-1.0.0-alpha1-final.min.js:1:14017\r\n  connections.js:45:9\r\nXML Parsing Error: syntax error\r\nLocation: http://**mylocaldns**/v1/sync?id=4abb1002-9f56-492d-9a8c-433a707b0a3a\r\nLine Number 1, Column 1:  sync:1:1\r\nError: Not Found\r\n\r\n200 for options to /v1/sync\r\n200 for get to /v1/sync?id=4abb1002-9f56-492d-9a8c-433a707b0a3a\r\n404 for post to /v1/sync?id=4abb1002-9f56-492d-9a8c-433a707b0a3a (sending {\"protocol\":\"json\"}\u001e)\r\n\r\nThen it's dead.\r\n\r\nThe code is pretty basic:\r\n\r\n```\r\n    var options = {\r\n        transport: signalR.TransportType.ServerSentEvents,\r\n        protocol: \"json\",\r\n        logging: signalR.LogLevel.Trace\r\n    };\r\n    var http = new signalR.HttpConnection('http://**mylocaldns**/v1/sync', options);\r\n    var connection = new signalR.HubConnection(http);\r\n...\r\n\r\n    connection.onClosed = (e) => {\r\n        console.log(\"Closed\");\r\n        console.log(e);\r\n    };\r\n\r\nconnection.start().then(() => {\r\n      //does stuff\r\n    });\r\n```\r\n\r\nAny help is appreciated - thanks!"},{"Id":"6651814975","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:33:58","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/966","RelatedDescription":"Opened pull request \"Checking if window.document defined before trying to resolve url\" (#966) at aspnet/SignalR","RelatedBody":""}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6652390976","Type":"IssuesEvent","CreatedAt":"2017-09-29T01:05:31","Actor":"tiayi","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6899","RelatedDescription":"Opened issue \"Different behavior of HttpContextAccessor between windows and Linux\" (#6899) at aspnet/Mvc","RelatedBody":"services.AddTransient<HttpContextAccessor>().AddScoped<INewBankCardOCRProvider>(provider =>\r\n            {\r\n                //### provider.GetRequiredService<HttpContextAccessor>().HttpContext Is Always Null On  Linux Docker microsoft/aspnetcore:2\r\n                var accessor = ActivatorUtilities.GetServiceOrCreateInstance<HttpContextAccessor>(provider);\r\n                var logger = provider.GetRequiredService<ILogger<Startup>>();\r\n                logger.LogWarning(\"accessor ==null ? \" + (accessor == null));\r\n                logger.LogWarning(\"accessor.HttpContext ==null ? \" + (accessor.HttpContext == null));\r\n                return ActivatorUtilities.CreateInstance<FakeOCR>(provider);\r\n}\r\n\r\nprovider.GetRequiredService<HttpContextAccessor>().HttpContext Is Always Null On  Linux Docker microsoft/aspnetcore:2\r\n\r\nWindows is Ok.\r\nDocker image microsoft/aspnetcore:2 is base on debian.\r\n"},{"Id":"6652232483","Type":"IssuesEvent","CreatedAt":"2017-09-28T23:53:20","Actor":"abatishchev","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6898","RelatedDescription":"Opened issue \"Is it possible to have multiple GETs that vary only by parameters in ASP.NET Core?\" (#6898) at aspnet/Mvc","RelatedBody":"I asked this question also on [Stack Overflow](https://stackoverflow.com/questions/46477959/is-it-possible-to-have-multiple-gets-that-vary-only-by-parameters-in-asp-net-cor).\r\n\r\nI want to build truly RESTful web service so don't want to leverage RPC-style, so have currently this:\r\n\r\n```csharp\r\npublic async Task<IActionResult> GetByParticipant(string participantId, string participantType, string programName)\r\n{\r\n}\r\n\r\npublic async Task<IActionResult> GetByProgram(string programName)\r\n{\r\n}\r\n```\r\nAnd I believe that would work in ASP.NET Web API. But I'm getting an exception:\r\n\r\n> AmbiguousActionException: Multiple actions matched. The following actions matched route data and had all constraints satisfied:\r\n\r\n>TermsController.GetByParticipant (ParticipantTerms.Api)\r\n\r\n>TermsController.GetByProgram (ParticipantTerms.Api)\r\n\r\nNeither of the attributes actually help:\r\n\r\n- `[HttpGet]`\r\n- `[ActionName]`\r\n- `[FromQuery]`"},{"Id":"6652133870","Type":"PullRequestEvent","CreatedAt":"2017-09-28T23:13:23","Actor":"mikeharder","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6897","RelatedDescription":"Opened pull request \"Simplify collection initialization\" (#6897) at aspnet/Mvc","RelatedBody":"- Addresses VS message \"IDE0028 Collection initialization can be simplified\""},{"Id":"6651953235","Type":"PullRequestEvent","CreatedAt":"2017-09-28T22:12:03","Actor":"jkotalik","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6896","RelatedDescription":"Opened pull request \"[WIP] Update readme with build information\" (#6896) at aspnet/Mvc","RelatedBody":"Part of updating the build information for each repo. This will eventually be added to all repos once a final format has been decided. "},{"Id":"6651701805","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:05:01","Actor":"jbagga","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6895","RelatedDescription":"Opened pull request \"Add EnableRangeProcessing\" (#6895) at aspnet/Mvc","RelatedBody":"Addresses #6780 \r\n\r\nEnsured that this change solves the multiple GET requests issue described in #6780.\r\n\r\n@Tratcher @rynowak "},{"Id":"6650064315","Type":"PullRequestEvent","CreatedAt":"2017-09-28T15:08:56","Actor":"SteveSandersonMS","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6894","RelatedDescription":"Opened pull request \"Update fsproj for FSharpWebSite. Fixes #6554\" (#6894) at aspnet/Mvc","RelatedBody":"Fix for #6554 \r\n\r\nCurrently this doesn't actually affect anything, because `FSharpWebSite.fsproj` is not included in the `.sln`, nor is it referenced from any other project. The functional tests for it were [deleted back in May](https://github.com/aspnet/Mvc/pull/6319/files#diff-21fce3789bdd5ad204ec410b088d7018) due to what looks like build system issues.\r\n\r\nEventually it would be best to reinstate the functional tests for our F# support but this can't be done at least until resolving https://github.com/aspnet/BuildTools/issues/414"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6650562668","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:45:54","Actor":"ajcvickers","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1447","RelatedDescription":"Opened issue \"Document how to customize the EF model\" (#1447) at aspnet/Identity","RelatedBody":"People often seem to run into issues when attempting to customize the entities in the Entity Framework model. It would be good to have documentation showing the general approach (i.e. talk about OnModelCreating, that the model needs to remain in a consistent state, etc) as well as common scenarios (adding a property, adding an FK, changing to use a composite key, etc.)\r\n"},{"Id":"6649054446","Type":"PullRequestEvent","CreatedAt":"2017-09-28T11:47:50","Actor":"svethors","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1446","RelatedDescription":"Opened pull request \"Recognize non-english character casing in PasswordValidator (#1445)\" (#1446) at aspnet/Identity","RelatedBody":""},{"Id":"6648571018","Type":"IssuesEvent","CreatedAt":"2017-09-28T09:48:24","Actor":"svethors","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1445","RelatedDescription":"Opened issue \"PasswordValidator.IsLower and .IsUpper only reconizing the english alphabet\" (#1445) at aspnet/Identity","RelatedBody":"When validation passwords and requiring either upper or lower case characters, non-english characters are not properly recognized as being upper or lower case. For example the Norwegian character 'Æ' is the upper case of 'æ', but will not be regarded as either, and so `PasswordOptions.RequireLowercase` = true will result in an error even if the lower case 'æ' is present in a password."},{"Id":"6647440255","Type":"IssuesEvent","CreatedAt":"2017-09-28T04:01:22","Actor":"mkArtak","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1444","RelatedDescription":"Opened issue \"Email confirmation token becomes invalid after redeployment\" (#1444) at aspnet/Identity","RelatedBody":"Hi.\r\n\r\nI have an asp.net core 2 web application which is hosted in Azure AppService.\r\nWhen a new user signs up the application sends an email confirmation request to the user (as an email), with a link in it for the user to click.\r\nThe link uses a token generated using the following method:\r\n`UserManager<TUser>.GenerateEmailConfirmationTokenAsync(TUser user)`\r\n\r\nWhen user clicks the link, the AccountController handles that request and tries to find the user given the email address and the token:\r\n`IdentityResult result = await this.userManager.ConfirmEmailAsync(user, code);`\r\n\r\nHowever, if after generating the code a new deployment had happened, the ConfirmEmailAsync method would not be able to find the user with that code, so the confirmation request results in an error.\r\n\r\n\r\nHere is the list of relevant packages my project references:\r\n```\r\n<PackageReference Include=\"AWSSDK.SimpleNotificationService\" Version=\"3.3.0.21\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0\" />\r\n```\r\n"},{"Id":"6646697459","Type":"IssuesEvent","CreatedAt":"2017-09-27T23:09:26","Actor":"natelaff","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1443","RelatedDescription":"Opened issue \"Issue with IdentityUserToken Id data type\" (#1443) at aspnet/Identity","RelatedBody":"Branching this into a new issue from https://github.com/aspnet/Identity/issues/1364 because I believe it's a bug and can reproduce it.\r\n\r\nI override my datatypes in Identity with Guid. Nothing fancy. But getting this as of upgrade to 2.0.\r\n\r\nArgumentException: The key value at position 0 of the call to 'DbSet<IdentityUserToken>.Find' was of type 'Guid', which does not match the property type of 'string'.\r\n\r\nBasically, start a new project with individual auth.\r\n\r\npublic class User : IdentityUser<Guid>\r\n{\r\n    public string MyProperty { get; set; }\r\n}\r\n\r\npublic class Role : IdentityRole<Guid>\r\n{\r\n    public string MyProperty { get; set; }\r\n}\r\n\r\n    protected override void OnModelCreating(ModelBuilder builder)\r\n    {\r\n        base.OnModelCreating(builder);\r\n\r\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\r\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(u => u.Id);\r\n        builder.Entity<IdentityUserClaim<Guid>>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\r\n        builder.Entity<IdentityUserLogin<Guid>>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\r\n        builder.Entity<IdentityUserRole<Guid>>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\r\n        builder.Entity<IdentityRoleClaim<Guid>>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\r\n        builder.Entity<IdentityUserToken<Guid>>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });\r\n    }\r\n\r\nNothing crazy happening here. Just making the key a Guid and renaming the tables.\r\nReplace appropriate methods to use that User/Role/Key type.\r\nRun, create a user, then go to Two Factor Auth page and you'll hit it on the call to _userManager.GetAuthenticatorKeyAsync(user)"},{"Id":"6645944701","Type":"PullRequestEvent","CreatedAt":"2017-09-27T19:54:48","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1436","RelatedDescription":"Closed pull request \"[Prototype] Add CookieAuthentication\" (#1436) at aspnet/Identity","RelatedBody":"Work for https://github.com/aspnet/Identity/issues/1409"},{"Id":"6640663082","Type":"PullRequestEvent","CreatedAt":"2017-09-26T21:01:00","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1442","RelatedDescription":"Opened pull request \"[WIP] Add Identity.SignIn[.Cookies]\" (#1442) at aspnet/Identity","RelatedBody":"Work for https://github.com/aspnet/Identity/issues/1409\r\n\r\n- Moves SignInManager into new Identity.SignIn package\r\n- Moves Identity auth cookie configuration into Identity.SignIn.Cookies\r\n- Main identity package depends on Identity.SignIn but not SignIn.Cookies since AddIdentity needs to continue to work as it did before\r\n\r\nNew startup code for refactored identity:\r\n\r\n```C#            services.AddIdentityCore<ApplicationUser>()\r\n                .AddRoles<IdentityRole>()\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddSignIn() // Adds SignInManager (works against IdentityConstant schemes)\r\n                .AddDefaultCookies() // Adds and configures default cookie auth\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nThoughts @ajcvickers @davidfowl @blowdart ?"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6652378687","Type":"PullRequestEvent","CreatedAt":"2017-09-29T00:59:58","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2071","RelatedDescription":"Closed pull request \"HTTP/2: close connection with COMPRESSION_ERROR on incomplete header block\" (#2071) at aspnet/KestrelHttpServer","RelatedBody":"http://httpwg.org/specs/rfc7540.html#rfc.section.4.3\r\n\r\n> A receiver MUST terminate the connection with a connection error (Section 5.4.1) of type COMPRESSION_ERROR if it does not decompress a header block."},{"Id":"6652074580","Type":"IssuesEvent","CreatedAt":"2017-09-28T22:51:20","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2086","RelatedDescription":"Opened issue \"Remove automatic Upgrade header logic from UpgradeAsync\" (#2086) at aspnet/KestrelHttpServer","RelatedBody":"https://github.com/aspnet/KestrelHttpServer/blob/a31d1e024ca86a4a9053e0be105fde17c5ccae10/src/Kestrel.Core/Internal/Http/Http1Connection.FeatureCollection.cs#L42-L50\r\nThis code copies the request Upgrade header to the response. However, the request Upgrade header is a list of suggestions, while the response is the ordered list of actually selected protocols. Setting any of these response headers is the caller's responsibility. The WebSocket middleware sets these.\r\nhttps://github.com/aspnet/WebSockets/blob/31c1e9d7d727fda23ae657cb3598c7c3f3950d15/src/Microsoft.AspNetCore.WebSockets/Internal/HandshakeHelpers.cs#L66-L75\r\n\r\nhttps://tools.ietf.org/html/rfc7230#section-6.7\r\n\r\nThis method is also missing a HasResponseStarted check. It will fail only when it tries to set the StatusCode."},{"Id":"6651645569","Type":"IssuesEvent","CreatedAt":"2017-09-28T20:52:08","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2085","RelatedDescription":"Opened issue \"Perf Regression: Merge code paths duplicated between HTTP/1.x and HTTP/2 implementations\" (#2085) at aspnet/KestrelHttpServer","RelatedBody":"\"Merge code paths duplicated between HTTP/1.x and HTTP/2 implementations\" (https://github.com/aspnet/KestrelHttpServer/issues/2017) seems to have caused a 5% regression in Plaintext on both Cloud and Physical hardware.  You can repro the regression by comparing branch `mikeharder/perf-test-before` to 1470ee0.\r\n\r\nHardware | mikeharder/perf-test-before | 1470ee0 | Ratio\r\n------------ | ------------- | ------------ | ------------\r\nCloud | 560k | 534k | 0.95\r\nPhysical | 1.30M | 1.22M | 0.94\r\n"},{"Id":"6645883095","Type":"PullRequestEvent","CreatedAt":"2017-09-27T19:40:18","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2084","RelatedDescription":"Opened pull request \"HPACK fixes and improvements\" (#2084) at aspnet/KestrelHttpServer","RelatedBody":"* Parse header field representations more accurately\r\n* Tests for all header field representations and dynamic table updates\r\n* Throw `HPackDecodingException` on invalid header index\r\n* Throw `HPackDecodingException` when attempting to resize the dynamic table to a size larger than the maximum allowed by server settings (in the SETTINGS frame sent as the server preface)\r\n* Refactorings"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6652652405","Type":"IssuesEvent","CreatedAt":"2017-09-29T03:02:39","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1705","RelatedDescription":"Opened issue \"Enable OOP functionality to use the 64bit host\" (#1705) at aspnet/Razor","RelatedBody":"From @heejaechang\r\n\r\nFor both LUT and Razor, can you guys add some *.json files on top of your existing json files with this modification.\r\n\r\nFor each your service file (*.servicehub.service.json), add another json file with 64 ending \r\nex, razorLanguageService64.servicehub.service.json for razorLanguageService.servicehub.service.json)\r\n\r\nwith this change\r\n\r\n  \"host\": \"desktopClr.x86\" => \"host\": \"desktopClr \"\r\n\"hostId\": \"RoslynCodeAnalysisService32\" => \"hostId\": \"RoslynCodeAnalysisService\"\r\n\r\nEverything else should be exactly same.\r\n\r\nAnd then add this new file (*64.servicehub.service.json) to all places where *.servicehub.service.json would be placed such as vsixmanifest\r\n\r\nFor Razor, that is all you need to do.\r\n\r\nI can change this (http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices.Razor.RemoteClient/RazorLangaugeServiceClient.cs,15) to pick up right json file from A/B testing in Roslyn side for you.\r\n\r\nFor LUT, you need to do the below as well.\r\n\r\nBasically, check some options and then choose between remoteBuildService or remoteBuildService64 \r\nEx) http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Remote/RemoteHostClientServiceFactory.RemoteHostClientService.cs,166"},{"Id":"6651710528","Type":"IssuesEvent","CreatedAt":"2017-09-28T21:07:08","Actor":"miloush","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1704","RelatedDescription":"Opened issue \"Autocompletion removes code and does not commit on space\" (#1704) at aspnet/Razor","RelatedBody":"VS 15.4.0 Preview 3\r\n\r\nCreate a default ASP.NET Core app, and make one of the cshtml files contain the following:\r\n\r\n```C#\r\n@if (Model.HasText)\r\n{\r\n\t@if (Model.Count < 1)\r\n\t{\r\n\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (Model.IsHappy)\r\n\t\t{\r\n\t\t\t<table>\r\n\t\t\t|\r\n\t\t\t</table>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t<table>\r\n\t\t\t@foreach (var group in Model.SadGroups)\r\n\t\t\t{\r\n\t\t\t\t<tr><td>@UnresolvedFunction()</td><td>@group.Key</td></tr>\r\n\t\t\t}\r\n\t\t\t</table>\r\n\t\t}\r\n\t}\r\n\r\n}\r\n```\r\n\r\nInside the first `<table>`, type `@fore` and hit space so that `@foreach` is committed.\r\n\r\nExpected:\r\n```C#\r\n...\r\n\t\tif (Model.IsHappy)\r\n\t\t{\r\n\t\t\t<table>\r\n\t\t\t@foreach |\r\n\t\t\t</table>\r\n\t\t}\r\n...\r\n```\r\n\r\nActual:\r\n```C#\r\n\t\tif (Model.IsHappy)\r\n\t\t{\r\n\t\t\t<table>\r\n\t\t\t@fore  |\r\n\t\t\t</table>\r\n\t\t\t<table>\r\n\t\t\t@foreach (var group in Model.SadGroups)\r\n\t\t\t{\r\n\t\t\t\t<tr><td>@UnresolvedFunction()</td><td>@group.Key</td></tr>\r\n\t\t\t}\r\n\t\t\t</table>\r\n\t\t}\r\n```\r\n"},{"Id":"6648033803","Type":"IssuesEvent","CreatedAt":"2017-09-28T07:46:46","Actor":"LyonBlecher","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1703","RelatedDescription":"Opened issue \"Allow taghelper rendering to span partial views\" (#1703) at aspnet/Razor","RelatedBody":"I have a tag helper markup like so\r\n\r\n</panel> \r\n<panel-row>\r\n            <label asp-for=\"ServerInitSettingsModel.ApplicationName\"></label>\r\n            <div>@(Model.ServerInitSettingsModel.ApplicationName)</div>\r\n        </panel-row>\r\n        @{\r\n            Html.RenderPartial(\"_CustomSettings\", Model.ServerInitSettingsModel.CustomSettings);\r\n        }\r\n        <panel-footer></panel-footer>\r\n    </panel>\r\nI would like to be able to inject a partial view with more rows based on custom settings, but the tag-helper markup in the partial is not recognized and therefore doesn't render correctly. The partial view is:\r\n\r\n@model Dictionary<string, string>\r\n\r\n@foreach (var custom in Model)\r\n{\r\n    <panel-row>\r\n        <label>@custom.Key</label>\r\n        <div>@custom.Value</div>\r\n    </panel-row>\r\n}"},{"Id":"6646741853","Type":"PullRequestEvent","CreatedAt":"2017-09-27T23:25:17","Actor":"natemcmaster","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1702","RelatedDescription":"Merged pull request \"Preserve the build number when building the VSIX\" (#1702) at aspnet/Razor","RelatedBody":"Changes \r\n - Pass $(BuildNumber) to msbuild.exe /t:Restore. I was hitting weird issues building this locally because nupkg version is determined by /t:Restore\r\n - Restore the VSIX project when executing `build /t:Restore`"},{"Id":"6646005554","Type":"IssuesEvent","CreatedAt":"2017-09-27T20:08:57","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1183","RelatedDescription":"Closed issue \"Add multi-targeting support to RazorTemplateEngineFactoryService\" (#1183) at aspnet/Razor","RelatedBody":"When we create a RazorTemplateEngine it should a version of the Razor codegeneration support that matches the project's dependencies. We have the ability to generate ASP.NET Core 1.X code for 1.X proejcts and ASP.NET Core 2.X code for 2.X projects. \r\n\r\nThis items tracks the following improvements:\r\n- Create a template engine with the appropriate version targeted when a new document is opened\r\n- Update the template engine with the appropriate version when project references change\r\n- Treat newest version as the 'fallback', if the version is unknown we just assume latest"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6644367490","Type":"IssuesEvent","CreatedAt":"2017-09-27T14:32:40","Actor":"joeaudette","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Opened issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868) at aspnet/Templates","RelatedBody":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217"},{"Id":"6561160159","Type":"IssuesEvent","CreatedAt":"2017-09-07T12:16:43","Actor":"SteveSandersonMS","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866) at aspnet/Templates","RelatedBody":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n"},{"Id":"6560156021","Type":"IssuesEvent","CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Opened issue \"Cannot force version of the template to install\" (#867) at aspnet/Templates","RelatedBody":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version"},{"Id":"6532477866","Type":"IssuesEvent","CreatedAt":"2017-08-30T23:19:06","Actor":"andyg8180","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Opened issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866) at aspnet/Templates","RelatedBody":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6635483866","Type":"IssuesEvent","CreatedAt":"2017-09-25T22:47:03","Actor":"mlorbetske","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/829","RelatedDescription":"Closed issue \"(package.json) Namespaced packages do not display version & details on hover-over\" (#829) at aspnet/Tooling","RelatedBody":"(latest) VStudio 2015 Update **3**\n\n![image](https://cloud.githubusercontent.com/assets/2574412/19649471/eadc6be0-99d3-11e6-9d8e-565003f9e2cd.png)\n\nWhen hovering over Namespaced packages (@whatever/), version numbers and details are labeled as \"Uknown\".\n\nAlso intellisense comes out as \"Unknown\" as well when typing in the version area to the right.\n![image](https://cloud.githubusercontent.com/assets/2574412/19649727/e3f93e56-99d4-11e6-81e8-a89cd21abeee.png)\n"},{"Id":"6626869082","Type":"IssuesEvent","CreatedAt":"2017-09-22T21:30:36","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/431","RelatedDescription":"Closed issue \"Having multiple sites with the same IIS Express launch url causes VS to launch the wrong site\" (#431) at aspnet/Tooling","RelatedBody":"The Security repo has three sample sites with the same launch url. (It needs to be the same because that url is registered with a remote auth server).  This can cause VS / IIS Express to launch the wrong site.\n"},{"Id":"6598999142","Type":"IssuesEvent","CreatedAt":"2017-09-16T14:09:01","Actor":"ctopher31","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059) at aspnet/Tooling","RelatedBody":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n"},{"Id":"6598993466","Type":"IssuesEvent","CreatedAt":"2017-09-16T14:04:41","Actor":"ctopher31","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Opened issue \"How do I make file nesting for js broken again. File nesting is really lame. I want my files structured the way I want them. If some lame ass wants nesting let it be an opt-in.\" (#1059) at aspnet/Tooling","RelatedBody":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n"},{"Id":"6588109038","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:50:29","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058) at aspnet/Tooling","RelatedBody":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6585749309","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:57:15","Actor":"davidfowl","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Closed issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6585739204","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:55:30","Actor":"jsdmitry","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Opened issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6504000070","Type":"IssuesEvent","CreatedAt":"2017-08-23T19:03:38","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/269","RelatedDescription":"Opened issue \"ExpandoObjectAdapter does not assume case insensitivity\" (#269) at aspnet/Announcements","RelatedBody":"When applying a json patch to `ExpandoObject`s, case insensitive search will not be used to match the path segment to the object's dictionary keys. Instead, the path segment will be resolved using the `NamingStrategy` defined in the `IContractResolver`.\r\n\r\nAddresses https://github.com/aspnet/JsonPatch/issues/102\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/103 for discussion\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":10,"RawContent":null},{"Id":"906146139933638658","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"aspnet","Text":"Getting Started with Windows Containers https://t.co/8twiZLlB5H","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":51,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-09-29T05:30:08.8833002Z","RunDurationInMilliseconds":7623}