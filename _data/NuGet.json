{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10742316661","Type":"PullRequestEvent","CreatedAt":"2019-10-29T22:15:06","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7663","RelatedDescription":"Opened pull request \"Add GitHubVulnerabilities2Db Job\" (#7663) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/nuget/nugetgallery/issues/7648\r\n\r\nThis PR adds the GitHubVulnerabilities2Db job itself, which primarily consists of querying GitHub's GraphQL API and then converting the response into our DB entities."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10744005637","Type":"IssuesEvent","CreatedAt":"2019-10-30T04:24:04","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8744","RelatedDescription":"Closed issue \"DependencyGraphSpec should have option to not clone PackageSpec items\" (#8744) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen profiling ways to make NuGet no-op restore faster, I noticed that the full `DependencyGraphSpec` is being rebuilt for each project with its closure.  In the process, the full `PackageSpec` object is being cloned.  This makes sense for some scenarios but in no-op restore it adds unnecessary allocations and slows things down.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Any\r\n\r\nNuGet version (x.x.x.xxx): Any\r\n\r\ndotnet.exe --version (if appropriate): Any\r\n\r\nVS version (if appropriate): Any\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Any\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a large DependencyGraphSpec with 700 projects\r\n\r\n2. For each project, call `WithProjectClosure()`\r\n\r\nProfiling shows a significant amount of work is being performed cloning the `PackageSpec` objects.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10743890302","Type":"IssuesEvent","CreatedAt":"2019-10-30T03:54:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6697","RelatedDescription":"Closed issue \"Wrong package dependency version If package dependency version is set to '*'\" (#6697) at NuGet/Home","RelatedBody":"_From @atanasa on March 19, 2018 15:28_\n\nIf package dependency version is set to '*', the version in the package spec is set to the version of the package instead of the dependency\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Build the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <Version>1.2.3</Version>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"EntityFramework\" Version=\"*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhere \"EntityFramework\" can be any other package (probably that is not part of the standard library).\r\n\r\n2. run `dotnet build`\r\n\r\n**Expected output:**\r\nA package of version 1.2.3 with a dependency to the package EntityFramework with it latest version (e.g. 6.2.0).\r\n\r\n**Actual output:**\r\nA package of version 1.2.3 with a dependency to the package EntityFramework with version 1.2.3:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>ClassLibrary1</id>\r\n    <version>1.2.3</version>\r\n    <authors>ClassLibrary1</authors>\r\n    <owners>ClassLibrary1</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"EntityFramework\" version=\"1.2.3\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"...\\ReproPackDepVersion\\ClassLibrary1\\bin\\Debug\\netstandard2.0\\ClassLibrary1.dll\" target=\"lib\\netstandard2.0\\ClassLibrary1.dll\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\n`dotnet -info`:\r\n```\r\n.NET Command Line Tools (2.1.101)\r\n\r\nProduct Information:\r\n Version:            2.1.101\r\n Commit SHA-1 hash:  6c22303bf0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.101\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```\n\n_Copied from original issue: dotnet/sdk#2062_"},{"Id":"10743890299","Type":"IssuesEvent","CreatedAt":"2019-10-30T03:54:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8073","RelatedDescription":"Closed issue \"Lock file is not honored in \"*\" scenarios \" (#8073) at NuGet/Home","RelatedBody":"Sample repo: https://github.com/NuGetPlay/TestLockFile\r\n\r\n## Steps:\r\n1. New project with `RestorePackagesWithLockFile` set\r\n2. Take a dependency on a package with ` * `\r\n3. Restore project\r\n   * The lock file will be generated with the highest version (say **1.0.0**) present on the package source(s).\r\n4. Add a newer version of the package (say **1.1.0**) to the repository (preferably local to avoid caching issues).\r\n5. Delete obj, bin folders. \r\n6. Restore again, OR\r\n7. Restore with `--locked-mode`\r\n\r\n## Expected\r\n* For 6, The restore should complete without modifying the lock file. Version **1.0.0** should be restored.\r\n* For 7, the same should happen as 6. Restore **should not** fail.\r\n\r\n## Actual\r\n* For 6,  restore overrites the lock file, bringing in the version **1.1.0**\r\n* For 7, restore **fails**.\r\n\r\n\r\n"},{"Id":"10743890297","Type":"IssuesEvent","CreatedAt":"2019-10-30T03:54:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8432","RelatedDescription":"Closed issue \"NuGet.exe does not resolve to the latest version of a package when using * in PackageReference (MSBuild/Dotnet/VS restore do)\" (#8432) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nPlease note this is the same issue described in #6640. But please do check the repro steps as it doesn't actually work. Unsure how it worked then.\r\n\r\n```\r\nIssue is if packagereference is set to \"*\" then it resolves to lowest available version and not highest one. In #6640 the discussion seems to suggest that highest version should be picked up.\r\n\r\nWhat is the recommended method to get packagereference to resolve to highest available version?\r\nThis is a very useful feature, say if we are doing integration testing with latest available package.\r\n```\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n`NuGet.exe`\r\n\r\nNuGet version (x.x.x.xxx):\r\n`5.0.2.5988`\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n`Win 10 Pro 1803`\r\n\r\nWorked before? If so, with which NuGet version:\r\nIt has been suggested in #6640 that it used to work. But it has never worked for me.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create an empty folder\r\n\r\n2. Add test.csproj using the xml below\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net45</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Selenium.WebDriver\" Version=\"*\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n3. To start from a clean state, from a prompt run\r\n`nuget locals all -clear`\r\n\r\n4. Do a nuget restore with detailed output\r\n`nuget restore -Verbosity detailed .\\test.csproj`\r\n\r\nSee that Selenium.WebDriver has resolved to 2.2.0 and not the latest available package version on nuget.org.\r\n`Acquired lock for the installation of Selenium.WebDriver 2.2.0`\r\n\r\nWhat is the recommended mechanism to be able to resolve to latest available package version using package reference?"},{"Id":"10743278246","Type":"IssuesEvent","CreatedAt":"2019-10-30T01:32:08","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8754","RelatedDescription":"Closed issue \"Increment version to 5.5\" (#8754) at NuGet/Home","RelatedBody":""},{"Id":"10742362164","Type":"IssuesEvent","CreatedAt":"2019-10-29T22:22:49","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7275","RelatedDescription":"Closed issue \"SDK resolver logs messages at the wrong verbosity\" (#7275) at NuGet/Home","RelatedBody":"Device flow information is logged with low verbosity and does not show up in the console using minimal verbosity.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): MSBuild.exe\r\n\r\nNuGet version 4.9.0.2:\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Reference an SDK that comes from a VSTS package feed\r\n\r\n2. Run MSBuild.exe /Verbosity:Minimal\r\n\r\nExpected: Device flow info is logged to the console\r\n\r\nActual: Device flow info is not logged and console appears to be hung\r\n\r\nWorkaround: Use /Verbosity:Detailed\r\n\r\n"},{"Id":"10742233837","Type":"IssuesEvent","CreatedAt":"2019-10-29T22:02:06","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8763","RelatedDescription":"Closed issue \"VisualStudio can't browse nightly .NET Core NuGet feed while it works perfectly in Rider\" (#8763) at NuGet/Home","RelatedBody":"## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new console application.\r\n2. Add a NuGet.Config file with the following content:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"dotnet-core\"\r\n         value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n3. Open it in Visual Studio and try to search for some NuGet packages.\r\n\r\nUsually, I have one of the three following outcomes:\r\na) VS shows the loading icon forever (I waited for several hours without any updates)\r\nb) VS crashes and restarts itself\r\nc) VS consumes 2.7GM memory, becomes almost unresponsible, and prints the following error: `[dotnet-core] Exception of type 'System.OutOfMemoryException' was thrown.` It looks like this:\r\n\r\n<img width=\"1827\" alt=\"2019-10-29_15-51-32\" src=\"https://user-images.githubusercontent.com/2259237/67769671-f294f500-fa65-11e9-81c0-29d0131a3a1f.png\">\r\n\r\nAt first, I thought that something is wrong with the feed. So, I decided to check how it works in [Rider](https://www.jetbrains.com/rider/):\r\n\r\n![2019-10-29_15-58-47](https://user-images.githubusercontent.com/2259237/67769935-6800c580-fa66-11e9-9c3b-9b7f0050d983.gif)\r\n\r\nAs you can see, it works perfectly (apart from the fact that Rider consumes several GB to keep the feed data).\r\n\r\nI guess, we have such a situation because Visual Studio is a 32-bit process and it has [RAM limitations](https://en.wikipedia.org/wiki/3_GB_barrier) and can't fetch all the data from this feed. In Rider, there is no such limitation because it's a 64-bit process.\r\n\r\nAlso, I tried to fetch the list of the packages with the help of [nuget.exe 5.3.1](https://dist.nuget.org/win-x86-commandline/v5.3.1/nuget.exe), but it displays this message:\r\n\r\n```\r\nÎ» nuget.exe list\r\nWARNING: This version of nuget.exe does not support listing packages from package source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json'.\r\nNo packages found.\r\n```\r\n\r\nDo you have any workaround that allows browsing \"huge\" NuGet feeds in Visual Studio? Is Rider the only way to browse such feeds for now?\r\n\r\n## Origin of the problem\r\n\r\nOriginally, I tried to work with Roslyn dev16.3 (you can download the source code from here: https://github.com/dotnet/roslyn/tree/release/dev16.3). It has the [following NuGet.Config](https://github.com/dotnet/roslyn/blob/release/dev16.3/NuGet.config) file:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"dotnet-core\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\r\n    <add key=\"system-commandline\" value=\"https://dotnet.myget.org/F/system-commandline/api/v3/index.json\" />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"myget-dotnet-coreclr\" value=\"https://dotnet.myget.org/F/dotnet-coreclr/api/v3/index.json\" />\r\n    <add key=\"myget-dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n    <add key=\"dotnet-corefxtestdata\" value=\"https://dotnet.myget.org/F/dotnet-corefxtestdata/api/v3/index.json\" />\r\n    <add key=\"dotnet-buildtools\" value=\"https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\" />\r\n    <add key=\"experimental-vs-packages\" value=\"https://dotnet.myget.org/F/experimental-vs-packages/api/v3/index.json\" />\r\n    <add key=\"symreader\" value=\"https://dotnet.myget.org/F/symreader/api/v3/index.json\" />\r\n    <add key=\"symreader-portable\" value=\"https://dotnet.myget.org/F/symreader-portable/api/v3/index.json\" />\r\n    <add key=\"symreader-converter\" value=\"https://dotnet.myget.org/F/symreader-converter/api/v3/index.json\" />\r\n    <add key=\"symreader-native\" value=\"https://dotnet.myget.org/F/symreader-native/api/v3/index.json\" />\r\n    <add key=\"metadata-tools\" value=\"https://dotnet.myget.org/F/metadata-tools/api/v3/index.json\" />\r\n    <add key=\"interactive-window\" value=\"https://dotnet.myget.org/F/interactive-window/api/v3/index.json\" />\r\n    <add key=\"roslyn-master-nightly\" value=\"https://dotnet.myget.org/F/roslyn-master-nightly/api/v3/index.json\" />\r\n    <add key=\"roslyn-tools\" value=\"https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json\" />\r\n    <add key=\"roslyn-analyzers\" value=\"https://dotnet.myget.org/F/roslyn-analyzers/api/v3/index.json\" />\r\n    <add key=\"roslyn\" value=\"https://dotnet.myget.org/F/roslyn/api/v3/index.json\" />\r\n    <add key=\"sourcelink\" value=\"https://dotnet.myget.org/F/sourcelink/api/v3/index.json\" />\r\n    <add key=\"vs-devcore\" value=\"https://myget.org/F/vs-devcore/api/v3/index.json\" />\r\n    <add key=\"vs-editor\" value=\"https://myget.org/F/vs-editor/api/v3/index.json\" />\r\n    <add key=\"roslyn_concord\" value=\"https://myget.org/F/roslyn_concord/api/v3/index.json\" />\r\n    <add key=\"vssdk\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vssdk/nuget/v3/index.json\" />\r\n    <add key=\"vs-impl\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-impl/nuget/v3/index.json\" />\r\n    <add key=\"system-commandline\" value=\"https://dotnet.myget.org/F/system-commandline/api/v3/index.json\" />\r\n    <add key=\"dotnet-coreclr\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-coreclr/index.json\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n\r\nIt contains 26 NuGet feeds, but it's almost impossible to browse even the first one in Visual Studio. \r\n\r\n## Details about Problem\r\n\r\nMy environment:\r\n\r\nMicrosoft Visual Studio Community 2019\r\nVersion 16.2.0\r\nVisualStudio.16.Release/16.2.0+29123.88\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nJetBrains Rider 2019.2.3\r\nBuild #RD-192.7317.11, built on October 16, 2019\r\n\r\nWindows 10.0.17763.805\r\n\r\nRepro solution: [NuGetProblem.zip](https://github.com/NuGet/Home/files/3783737/NuGetProblem.zip)\r\n"},{"Id":"10741762453","Type":"IssuesEvent","CreatedAt":"2019-10-29T20:56:17","Actor":"StephaneGraziano","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8768","RelatedDescription":"Opened issue \"PackageReference bug with Deployment Projects (MSI packager)\" (#8768) at NuGet/Home","RelatedBody":"0.Config :  VS 2017 V15.9.17 - MS Visual Studio Installer Projects 0.9.3\r\n\r\n1. Be sure you use **ProjectReference** with Nuget instead of packages.json (Tools->Options)\r\n2. Create a WPF project .net 4.6.1 and add **System.Runtime.CompilerServices.Unsafe** 4.6.0 via nuget\r\n3. Create Setup project (Visual Studio Installer)\r\n4. Add the WPF Output\r\n5. Compile the setup project and install it\r\n6. Open the System.Runtime.CompilerServices.Unsafe with ILSpy or Reflector\r\n7. It's the **reference lib**, not the lib (and if you used it in the WPF project, it will throw a BadFormatException)\r\n\r\nSo it's a bug => Please update the installer"},{"Id":"10740773620","Type":"IssuesEvent","CreatedAt":"2019-10-29T18:51:31","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8767","RelatedDescription":"Opened issue \"PMUI Ctrl+C fails to copy in 16.?.x but worked in 15.x.x\" (#8767) at NuGet/Home","RelatedBody":"Ctrl+C has been broken in certain scenarios in the PMUI.\r\n\r\nThe **Project** \"Manage NuGet Packages\" PMUI does not copy any text when using the Ctrl+C keystroke after selecting data from the description (date, package name, dependency name, version, etc). Right-click Copy does work.\r\n\r\n**Solution** \"Manage NuGet Packages\" PMUI works correctly and copies with Ctrl+C.\r\n\r\nVS2017 15.9.17 confirmed that it does work as expected.\r\n\r\nTested the following (broken):\r\n16.4.0 Preview 2.0\r\n16.4.0 Preview 3.0\r\n16.3.6\r\n\r\nWorked before? If so, with which NuGet version: Worked correctly on 15.9.17 (need to test <16.3.6)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Right click a project, click Manage NuGet Packages. \r\n\r\n2. Use any tab (Browse/installed/updates) and select a package.\r\n\r\n3. In the description (right pane), select some text such as the Version number of this package or the Description.\r\n\r\n4. Use Control + C keystroke on keyboard.\r\n\r\n5. Try pasting into Notepad, and you'll see that nothing was copied.\r\n\r\n6. Repeat step 3 and this time Right-click the selected text, and click \"Copy\".\r\n\r\n7. Repeat step 5 and you will see the text was copied as expected."},{"Id":"10740418951","Type":"IssuesEvent","CreatedAt":"2019-10-29T18:08:50","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8764","RelatedDescription":"Closed issue \"Fix xplat build/func test scripts\" (#8764) at NuGet/Home","RelatedBody":"The URL for dotnet-install.sh is now returning an HTTP redirect, which `curl` doesn't follow by default"},{"Id":"10739853247","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:05:15","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8735","RelatedDescription":"Closed issue \"DefaultFrameworkNameProvider is not thread-safe\" (#8735) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThe `DefaultFrameworkNameProvider` is not thread safe so if you're creating `NuGetFramework` objects in multiple threads, its instantiation can happen multiple times.  The class should use `Lazy<T>` instead of simple `null` checks.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): All\r\n\r\nNuGet version (x.x.x.xxx): Any\r\n\r\ndotnet.exe --version (if appropriate): Any\r\n\r\nVS version (if appropriate): Any\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Any\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. In multiple threads, parse a target framework via the `NuGetFramework` class.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10739537433","Type":"IssuesEvent","CreatedAt":"2019-10-29T16:31:48","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8766","RelatedDescription":"Opened issue \"Test: RestoreCommand_UnmatchedRefAndLibAssembliesAsync is flakey\" (#8766) at NuGet/Home","RelatedBody":"```\r\nNuGet.Protocol.Core.Types.FatalProtocolException : Failed to retrieve information about 'System.Runtime.WindowsRuntime' from remote source 'https://nuget.org/api/v2/FindPackagesById()?id='System.Runtime.WindowsRuntime'&semVerLevel=2.0.0'.\r\n---- System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n-------- System.Net.WebException : The underlying connection was closed: An unexpected error occurred on a send.\r\n------------ System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host.\r\n---------------- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host\r\n```\r\n"},{"Id":"10739525614","Type":"IssuesEvent","CreatedAt":"2019-10-29T16:30:35","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8765","RelatedDescription":"Opened issue \"Test: RestoreCommand_LockedLockFileWithOutOfDateProjectAsync is flakey\" (#8765) at NuGet/Home","RelatedBody":"```\r\nNuGet.Protocol.Core.Types.FatalProtocolException : Failed to retrieve information about 'System.Runtime' from remote source 'https://nuget.org/api/v2/FindPackagesById()?id='System.Runtime'&semVerLevel=2.0.0'.\r\n---- System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n-------- System.Net.WebException : The underlying connection was closed: An unexpected error occurred on a send.\r\n------------ System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host.\r\n---------------- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host\r\n```\r\n"},{"Id":"10738481437","Type":"IssuesEvent","CreatedAt":"2019-10-29T14:51:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8764","RelatedDescription":"Opened issue \"Fix xplat build/func test scripts\" (#8764) at NuGet/Home","RelatedBody":"The URL for dotnet-install.sh is now returning an HTTP redirect, which `curl` doesn't follow by default"},{"Id":"10737807472","Type":"IssuesEvent","CreatedAt":"2019-10-29T13:46:47","Actor":"AndreyAkinshin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8763","RelatedDescription":"Opened issue \"VisualStudio can't browse nightly .NET Core NuGet feed while it works perfect in Rider\" (#8763) at NuGet/Home","RelatedBody":"## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new console application.\r\n2. Add a NuGet.Config file with the following content:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"dotnet-core\"\r\n         value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n3. Open it in Visual Studio and try to search for some NuGet packages.\r\n\r\nUsually, I have one of the three following outcomes:\r\na) VS shows the loading icon forever (I waited for several hours without any updates)\r\nb) VS crashes and restarts itself\r\nc) VS consumes 2.7GM memory, becomes almost unresponsible, and prints the following error: `[dotnet-core] Exception of type 'System.OutOfMemoryException' was thrown.` It looks like this:\r\n\r\n<img width=\"1827\" alt=\"2019-10-29_15-51-32\" src=\"https://user-images.githubusercontent.com/2259237/67769671-f294f500-fa65-11e9-81c0-29d0131a3a1f.png\">\r\n\r\nAt first, I thought that something is wrong with the feed. So, I decided how it works in [Rider](https://www.jetbrains.com/rider/):\r\n\r\n![2019-10-29_15-58-47](https://user-images.githubusercontent.com/2259237/67769935-6800c580-fa66-11e9-9c3b-9b7f0050d983.gif)\r\n\r\nAs you can see, it works perfectly (apart from the fact that Rider consumes several GB to keep the feed data).\r\n\r\nI guess, we have such a situation because Visual Studio is a 32-bit process and it has [RAM limitations](https://en.wikipedia.org/wiki/3_GB_barrier) and can't fetch all the data from this feed. In Rider, there is no such limitation because it's a 64-bit process.\r\n\r\nAlso, I tried to fetch the list of the packages with the help of [nuget.exe 5.3.1](https://dist.nuget.org/win-x86-commandline/v5.3.1/nuget.exe), but it displays this message:\r\n\r\n```\r\nÎ» nuget.exe list\r\nWARNING: This version of nuget.exe does not support listing packages from package source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json'.\r\nNo packages found.\r\n```\r\n\r\nDo you have any workaround that allows browsing \"huge\" NuGet feeds in Visual Studio? Is Rider the only way to browse such feeds for now?\r\n\r\n## Origin of the problem\r\n\r\nOriginally, I tried to work with Roslyn dev16.3 (you can download the source code from here: https://github.com/dotnet/roslyn/tree/release/dev16.3). It has the [following NuGet.Config](https://github.com/dotnet/roslyn/blob/release/dev16.3/NuGet.config) file:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"dotnet-core\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\r\n    <add key=\"system-commandline\" value=\"https://dotnet.myget.org/F/system-commandline/api/v3/index.json\" />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"myget-dotnet-coreclr\" value=\"https://dotnet.myget.org/F/dotnet-coreclr/api/v3/index.json\" />\r\n    <add key=\"myget-dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n    <add key=\"dotnet-corefxtestdata\" value=\"https://dotnet.myget.org/F/dotnet-corefxtestdata/api/v3/index.json\" />\r\n    <add key=\"dotnet-buildtools\" value=\"https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\" />\r\n    <add key=\"experimental-vs-packages\" value=\"https://dotnet.myget.org/F/experimental-vs-packages/api/v3/index.json\" />\r\n    <add key=\"symreader\" value=\"https://dotnet.myget.org/F/symreader/api/v3/index.json\" />\r\n    <add key=\"symreader-portable\" value=\"https://dotnet.myget.org/F/symreader-portable/api/v3/index.json\" />\r\n    <add key=\"symreader-converter\" value=\"https://dotnet.myget.org/F/symreader-converter/api/v3/index.json\" />\r\n    <add key=\"symreader-native\" value=\"https://dotnet.myget.org/F/symreader-native/api/v3/index.json\" />\r\n    <add key=\"metadata-tools\" value=\"https://dotnet.myget.org/F/metadata-tools/api/v3/index.json\" />\r\n    <add key=\"interactive-window\" value=\"https://dotnet.myget.org/F/interactive-window/api/v3/index.json\" />\r\n    <add key=\"roslyn-master-nightly\" value=\"https://dotnet.myget.org/F/roslyn-master-nightly/api/v3/index.json\" />\r\n    <add key=\"roslyn-tools\" value=\"https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json\" />\r\n    <add key=\"roslyn-analyzers\" value=\"https://dotnet.myget.org/F/roslyn-analyzers/api/v3/index.json\" />\r\n    <add key=\"roslyn\" value=\"https://dotnet.myget.org/F/roslyn/api/v3/index.json\" />\r\n    <add key=\"sourcelink\" value=\"https://dotnet.myget.org/F/sourcelink/api/v3/index.json\" />\r\n    <add key=\"vs-devcore\" value=\"https://myget.org/F/vs-devcore/api/v3/index.json\" />\r\n    <add key=\"vs-editor\" value=\"https://myget.org/F/vs-editor/api/v3/index.json\" />\r\n    <add key=\"roslyn_concord\" value=\"https://myget.org/F/roslyn_concord/api/v3/index.json\" />\r\n    <add key=\"vssdk\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vssdk/nuget/v3/index.json\" />\r\n    <add key=\"vs-impl\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-impl/nuget/v3/index.json\" />\r\n    <add key=\"system-commandline\" value=\"https://dotnet.myget.org/F/system-commandline/api/v3/index.json\" />\r\n    <add key=\"dotnet-coreclr\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-coreclr/index.json\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n\r\nIt contains 26 NuGet feed, but it's almost impossible to browse even the first feed in Visual Studio. \r\n\r\n## Details about Problem\r\n\r\nMy environment:\r\n\r\nMicrosoft Visual Studio Community 2019\r\nVersion 16.2.0\r\nVisualStudio.16.Release/16.2.0+29123.88\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nJetBrains Rider 2019.2.3\r\nBuild #RD-192.7317.11, built on October 16, 2019\r\n\r\nWindows 10.0.17763.805\r\n\r\nRepro solution: [NuGetProblem.zip](https://github.com/NuGet/Home/files/3783737/NuGetProblem.zip)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"},{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-30T05:30:46.6741083Z","RunDurationInMilliseconds":3112}