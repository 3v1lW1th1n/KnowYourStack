{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 3.2.0 Released: Going Big with Little Things","PublishedOn":"2018-09-17T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms 3.2.0 continues the theme of previous releases to give you big wins by making little things much easier to do. The entire version 3 series has been about reducing the friction of doing...","Href":"https://blog.xamarin.com/xamarin-forms-3-2-0-released-going-big-with-little-things/","RawContent":null},{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null},{"Title":"Getting Started with Android Pie","PublishedOn":"2018-08-21T20:19:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Google recently released Android Pie for developers to enhance their apps and build new experiences with. Previously, Microsoft released an Android 9.0 Preview for Xamarin.Android and as of today, you...","Href":"https://blog.xamarin.com/android-pie-preview-getting-started/","RawContent":null},{"Title":"Exploring New iOS 12 ARKit Capabilities With Xamarin","PublishedOn":"2018-08-20T20:04:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s summertime, which for Xamarin developers means new iOS betas to explore and learn. ARKit, which debuted last year in iOS 11, has matured over the past year and in iOS 12 is much more...","Href":"https://blog.xamarin.com/exploring-new-ios-12-arkit-capabilities-with-xamarin/","RawContent":null},{"Title":"Attend A .NET Conf Event Near You!","PublishedOn":"2018-08-15T20:29:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you have not yet heard of the .NET Conf, it is a FREE, 3-day virtual developer event co-organized by the .NET community and Microsoft. There is a wide selection of live sessions with feature...","Href":"https://blog.xamarin.com/attend-a-net-conf-event-near-you/","RawContent":null},{"Title":"Preview: iOS 12 development with Xamarin","PublishedOn":"2018-08-10T16:30:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The latest Xamarin preview release supports Xcode 10 beta 5, which includes beta SDKs for iOS 12, macOS Mojave (10.14), watchOS 5, and tvOS 12. Get Started With New iOS 12 APIs Today: iOS 12 includes...","Href":"https://blog.xamarin.com/preview-ios-12-development-with-xamarin/","RawContent":null},{"Title":"Securing network traffic with TLS 1.2","PublishedOn":"2018-08-07T15:58:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Secure and encrypted network communications are a crucial part of mobile application development. Without some kind of security around the communication layer, it is trivial for a third party to...","Href":"https://blog.xamarin.com/securing-network-traffic-with-tls-1-2/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8286128128","Type":"PullRequestEvent","CreatedAt":"2018-09-19T02:54:33","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2196","RelatedDescription":"Opened pull request \"[tests] fix the Windows build for DSO tests\" (#2196) at xamarin/xamarin-android","RelatedBody":"Getting a compiler error on Windows for `obj\\Debug\\Config.cs`, the\r\ngenerated code is:\r\n\r\n    public static readonly string ZipAlignPath = Path.Combine (\"C:\\Users\\myuser\\android-toolchain\\sdk\", \"build-tools\", \"28.0.0\", \"zipalign.exe\");\r\n\r\nFixes include:\r\n- Use the `@` symbol before the base path in `Config.cs.in`\r\n- Use `Inputs` and `Outputs` on the `Prepare` target so it doesn't run\r\n  all the time\r\n- Fix the double slash, since `$(IntermediateOutputPath)` always has a\r\n  trailing slash after the core MSBuild targets are imported\r\n- Fixed a tab character"},{"Id":"8285970180","Type":"IssuesEvent","CreatedAt":"2018-09-19T02:01:05","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2195","RelatedDescription":"Opened issue \"[build] `msbuild /t:Prepare Xamarin.Android.sln` hits \"\"ResolveAndroidTooling\" task failed unexpectedly.\" with Visual Studio 2017 version 15.9 Preview if `$(AndroidToolchainDirectory)` doesn't already exist\" (#2195) at xamarin/xamarin-android","RelatedBody":"This is a new error that happens when running `msbuild /t:Prepare Xamarin.Android.sln` using Visual Studio 2017 version 15.9 Preview or higher (any version that includes https://github.com/xamarin/xamarin-android/commit/d73442ec4c661633023b88c9d058e0f2f2455aa4).\r\n\r\nThe error doesn't happen when building with Visual Studio 2017 version 15.8 because in that version `GetMaxInstalledApiLevel()` was directly part of a single large `ResolveSdkTask` where `$(AndroidSdkPath)` was [set to `MonoAndroidHelper.AndroidSdk.AndroidSdkPath`](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/src/Xamarin.Android.Build.Tasks/Tasks/ResolveSdksTask.cs#L83) (C:\\\\Program Files (x86)\\\\Android\\\\android-sdk in my test environment). Although `ResolveSdkTask` itself still uses `MonoAndroidHelper.AndroidSdk.AndroidSdkPath` in Visual Studio 2017 version 15.9 Preview, the new `ResolveAndroidTooling` task does *not* currently use `MonoAndroidHelper`, so `$(AndroidSdkPath)` stays set to `$(AndroidToolchainDirectory)` (C:\\\\src\\\\android-toolchain in my test environment). When [`GetMaxInstalledApiLevel()` calls `Directory.EnumerateDirectories()`](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs#L330) on the Android SDK in the program files directory, it works because that directory exists, but when it tries to enumerate C:\\\\src\\\\android-toolchain, it hits an error because that directory does not yet exist. (The next step of the build just after the NuGet packages are restored is [to set up that directory](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/build-tools/scripts/PrepareWindows.targets#L19-L24).)\r\n\r\n### Possible Fix\r\n\r\nOne possible way to resolve this issue is to have `ResolveAndroidTooling` use `MonoAndroidHelper.AndroidSdk.AndroidSdkPath`:\r\n\r\n```patch\r\ndiff --git a/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs b/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs\r\nindex a6b76204..9161bb99 100644\r\n--- a/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs\r\n+++ b/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs\r\n@@ -77,6 +77,9 @@ namespace Xamarin.Android.Tasks\r\n \r\n \t\tpublic override bool Execute ()\r\n \t\t{\r\n+\t\t\tAndroidNdkPath = MonoAndroidHelper.AndroidSdk.AndroidNdkPath;\r\n+\t\t\tAndroidSdkPath = MonoAndroidHelper.AndroidSdk.AndroidSdkPath;\r\n+\r\n \t\t\tstring toolsZipAlignPath = Path.Combine (AndroidSdkPath, \"tools\", ZipAlign);\r\n \t\t\tbool findZipAlign = (string.IsNullOrEmpty (ZipAlignPath) || !Directory.Exists (ZipAlignPath)) && !File.Exists (toolsZipAlignPath);\r\n \r\n```\r\n\r\nI tested this locally, and it worked as desired for this scenario. I believe this should be OK for end-user Xamarin.Android app builds too because it's just going back to how these paths were determined at this step in Visual Studio 2017 version 15.8.\r\n\r\n#### Other possibles approaches\r\n\r\nI initially tried moving [`<MSBuild Projects=\"$(MSBuildThisFileDirectory)..\\android-toolchain\\android-toolchain.csproj\" />`](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/build-tools/scripts/PrepareWindows.targets#L24) to happen *before* the NuGet restore commands, but that was unsuccessful due to missing dependencies. It might be possible to adjust android-toolchain.csproj and the other preparation steps so that android-toolchain.csproj can build before any `NuGet.exe restore` step (or more precisely, before any `NuGet.exe restore` on a project that imports Xamarin.Android.Common.targets), but I haven't experimented with that.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Install Visual Studio 2017 version 15.9 Preview 2 or higher with the **Mobile development with .NET** workload. Also select the following **Individual components**:\r\n\r\n    - .NET Framework 4 targeting pack\r\n    - .NET Framework 4.5 targeting pack\r\n    - .NET Framework 4.5.1 targeting pack\r\n    - .NET Framework 4.5.2 targeting pack\r\n    - .NET Framework 4.6 targeting pack\r\n    - .NET Framework 4.6.1 targeting pack\r\n    - .NET Framework 4.6.2 targeting pack\r\n\r\n2. `git clone https://github.com/xamarin/xamarin-android.git`\r\n\r\n3. Ensure that you do not yet have an android-toolchain directory from a previous `msbuild /t:Prepare Xamarin.Android.sln`. (Or rename the existing directory out of the way.)\r\n\r\n4. `msbuild Xamarin.Android.sln /t:Prepare`\r\n\r\n    If Visual Studio version 15.8 is *also* installed, then NuGet will default to using the MSBuild and Xamarin.Android.Common.targets file from that version, and the `/t:Prepare` target will *succeed*. In that case you can invoke NuGet directly instead, passing in the path to MSBuild from the Visual Studio preview version:\r\n\r\n    `.\\.nuget\\NuGet.exe restore .\\Xamarin.Android-Tests.sln -MSBuildPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\"`\r\n\r\n### Expected Behavior\r\n\r\nThe NuGet restore step succeeds.\r\n\r\n### Actual Behavior\r\n\r\nThe NuGet restore step fails for Xamarin.Android-Tests.sln at the point where `_SetLatestTargetFrameworkVersion` calls the new `ResolveAndroidTooling` task.\r\n\r\n```\r\n\"C:\\Users\\Windows User\\AppData\\Local\\Temp\\NuGetScratch\\uj5oucwn.yyt.nugetinputs.targets\" (GenerateRestoreGraphFile target) (1) ->\r\n\"C:\\src\\xamarin-android\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj\r\n\" (_GenerateProjectRestoreGraph target) (2:5) ->\r\n(_SetLatestTargetFrameworkVersion target) -> \r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(712,2): error MSB4018: The \r\n\"ResolveAndroidTooling\" task failed unexpectedly. [C:\\src\\xamarin-android\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(712,2): error MSB4018: \r\nSystem.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\src\\android-toolchain\\sdk\\platforms'. \r\n[C:\\src\\xamarin-android\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n```"},{"Id":"8285726176","Type":"PullRequestEvent","CreatedAt":"2018-09-19T00:36:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2184","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] skip _CleanIntermediateIfNuGetsChange on first build\" (#2184) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2183\r\nContext: https://github.com/xamarin/xamarin-android/issues/2177\r\nContext: https://github.com/xamarin/xamarin-android/pull/1878\r\nContext: http://work.devdiv.io/661455\r\n\r\nWe are seeing reports of issues related to VS for Mac displaying\r\n`Updating Android Resources...` in the title bar, and a build running\r\nat the same time.\r\n\r\nThis is effectively running two commands at the same time:\r\n\r\n    msbuild YourAndroid.csproj /t:UpdateAndroidResources\r\n    msbuild YourAndroid.csproj /t:Build\r\n\r\nIn the case such as #2183, we get the failure:\r\n\r\n    Task \"RemoveDirFixed\"\r\n        Xamarin.Android.Common.targets(3042,2): error : Directory /Users/builder/agent/_work/r1/a/XQA.VSMac/XQA.VisualStudioMac/TestResults/26ff4d25/TestAndroidEnableAOTEnterprise/Temp/DroidApp/DroidApp/obj/Release/lp/ is not empty\r\n\r\nIn this case, the error is coming from\r\n`_CleanIntermediateIfNuGetsChange`, which has an issue we can improve.\r\nThe target is *meant* to only run when NuGets change, but is currently\r\nrunning on a first build.\r\n\r\nIf we skip the call to `_CleanMonoAndroidIntermediateDir` if\r\n`$(_AndroidNuGetStampFile)` does not exist, then our\r\n`_CleanIntermediateIfNuGetsChange` target will only clean files in\r\nlater builds when NuGets change.\r\n\r\nI've not found anything we can do for the root cause of the VS for Mac\r\nissue, but this will at least help matters on the initial build."},{"Id":"8285726164","Type":"IssuesEvent","CreatedAt":"2018-09-19T00:36:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2183","RelatedDescription":"Closed issue \"Android project fails to build with error \"DroidApp/DroidApp/obj/Release/lp/ is not empty\"\" (#2183) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an Android project\r\n2. Select Release config\r\n3. Close and reopen the project\r\n4. When \"Updating Resources...\" is running, click on Build.\r\n\r\n[Project Bundle](http://xqa.blob.core.windows.net/gist/TestAndroidEnableAOTEnterprise-Bundle-bab1422e9a2b43a29ba0b20c138bf182.zip)\r\n\r\n### Expected Behavior\r\n\r\nProject builds without any issues\r\n\r\n### Actual Behavior\r\n\r\nSince \"Updating Resources...\" is already in progress, running Build at that time, fails the build with\r\n\r\n```\r\n [Line]: 3042\r\n [Description]: Directory /Users/builder/agent/_work/r1/a/XQA.VSMac/XQA.VisualStudioMac/TestResults/26ff4d25/\r\nTestAndroidEnableAOTEnterprise/Temp/DroidApp/DroidApp/obj/Release/lp/ is not empty\r\n [File]: Xamarin.Android.Common.targets\r\n [Project]: DroidApp\"\r\n```\r\n\r\n[Diagnostic Build Output](http://xqa.blob.core.windows.net/gist/log-462ea5d81f5b425fbb25de8542cb7ba4.txt)\r\n\r\n### Version Information\r\n\r\n[About VS for Mac](http://xqa.blob.core.windows.net/gist/log-e03bc0684cb64e2bbf31718810e0ebd6.txt)\r\n\r\n### Log File\r\n\r\n[VS Mac Ide.log](http://xqa.blob.core.windows.net/gist/TestAndroidEnableAOTEnterprise.Ide.log.180913032944-ab6b586ebc56455bbe838e1a6ea39f54.txt)\r\n\r\n[Screen Recording](http://xqa.blob.core.windows.net/video/macOsScreenRecord.mp4-ef47eaddd0584ec28dfca04d5585b1c3.mp4)\r\n"},{"Id":"8285506350","Type":"IssuesEvent","CreatedAt":"2018-09-18T23:22:54","Actor":"jgold6","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2194","RelatedDescription":"Closed issue \"WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY not found in any enum\" (#2194) at xamarin/xamarin-android","RelatedBody":"### Description\r\n\r\nI can't find [this constant](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY) bound anywhere in Mono.Android: https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY\r\n\r\nI would expect this in the WindowManagerFlags enum. I see in the [mappings](https://github.com/xamarin/xamarin-android/blob/f9a7cfc0da2f51b2c3006550fad2e25fbd23be5a/build-tools/enumification-helpers/enum-conversion-mappings.xml#L603) that only the values in WindowManager.LayoutParams that start with FLAG_ are being generated as enum values in  WindowManagerFlags, which makes sense. I do realize that WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY is not a specific bit flag but a combination of several bit flags for convenience, so it is easy enough to provide the constant value and cast it to WindowManagerFlags, but I would expect, also for convenience, for these convenience constants to be available in the WindowManagerFlags enum. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Try to port this line of Java Android code to Xamarin:\r\n    \r\n    getWindow().setFlags(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY);\r\n\r\n### Expected Behavior\r\nShould be able to do something in Xam.Android like:\r\n\r\n    Window.SetFlags(WindowManagerFlags.TypeApplicationOverlay);\r\n\r\n### Actual Behavior\r\n\r\nThere is no WindowManagerFlags.TypeApplicationOverlay enum value. Instead have to case the int constant to a WindowManagerFlags type, e.g.:\r\n\r\n    Window.SetFlags((WindowManagerFlags)2038);\r\n\r\nor \r\n\r\n    Window.SetFlags(\r\n        WindowManagerFlags.DimBehind | WindowManagerFlags.BlurBehind | WindowManagerFlags.NotTouchable | WindowManagerFlags.NotTouchModal | WindowManagerFlags.TouchableWhenWaking | WindowManagerFlags.KeepScreenOn | WindowManagerFlags.LayoutInScreen | WindowManagerFlags.LayoutNoLimits | WindowManagerFlags.Fullscreen,\r\n        WindowManagerFlags.DimBehind | WindowManagerFlags.BlurBehind | WindowManagerFlags.NotTouchable | WindowManagerFlags.NotTouchModal | WindowManagerFlags.TouchableWhenWaking | WindowManagerFlags.KeepScreenOn | WindowManagerFlags.LayoutInScreen | WindowManagerFlags.LayoutNoLimits | WindowManagerFlags.Fullscreen);\r\n\r\n\r\n### Version Information\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.5.4 (build 3)\r\nInstallation UUID: f86726f2-bd5d-4610-867e-44e82f306ca2\r\nRuntime:\r\n\tMono 5.12.0.301 (2018-02/4fe3280bba1) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 512000301\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.1\r\n\t1.0.4\r\n\t1.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.1\r\n\t1.0.0-preview2-003121\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.12.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.3\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.0.0.20 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/jongoldberger/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.1   (API level 16)\r\n\t\t4.2   (API level 17)\r\n\t\t4.3   (API level 18)\r\n\t\t4.4   (API level 19)\r\n\t\t5.0   (API level 21)\r\n\t\t5.1   (API level 22)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\t\t8.0   (API level 26)\r\n\t\t8.1   (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_161\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.6.0.14 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.14.0.14 (Visual Studio Enterprise)\r\nHash: 1a6e2786\r\nBranch: HEAD\r\nBuild date: 2018-08-28 00:12:06-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705040003\r\nGit revision: 6ae731889c896d6733efb8ff5117f5bf5b17b509\r\nBuild date: 2018-07-19 13:07:45-04\r\nXamarin addins: 417fed09624e1e1f76ab0a11e8b97ffd8bbf91e1\r\nBuild lane: monodevelop-lion-d15-7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.5\r\n\r\n\r\n"},{"Id":"8285259005","Type":"IssuesEvent","CreatedAt":"2018-09-18T22:14:48","Actor":"jgold6","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2194","RelatedDescription":"Opened issue \"WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY not found in any enum\" (#2194) at xamarin/xamarin-android","RelatedBody":"### Description\r\n\r\nI can't find [this constant](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY) bound anywhere in Mono.Android: https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY\r\n\r\nI would expect this in the WindowManagerFlags enum. I see in the [mappings](https://github.com/xamarin/xamarin-android/blob/f9a7cfc0da2f51b2c3006550fad2e25fbd23be5a/build-tools/enumification-helpers/enum-conversion-mappings.xml#L603) that only the values in WindowManager.LayoutParams that start with FLAG_ are being generated as enum values in  WindowManagerFlags, which makes sense. I do realize that WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY is not a specific bit flag but a combination of several bit flags for convenience, so it is easy enough to provide the constant value and cast it to WindowManagerFlags, but I would expect, also for convenience, for these convenience constants to be available in the WindowManagerFlags enum. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Try to port this line of Java Android code to Xamarin:\r\n    \r\n    getWindow().setFlags(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY);\r\n\r\n### Expected Behavior\r\nShould be able to do something in Xam.Android like:\r\n\r\n    Window.SetFlags(WindowManagerFlags.TypeApplicationOverlay);\r\n\r\n### Actual Behavior\r\n\r\nThere is no WindowManagerFlags.TypeApplicationOverlay enum value. Instead have to case the int constant to a WindowManagerFlags type, e.g.:\r\n\r\n    Window.SetFlags((WindowManagerFlags)2038);\r\n\r\nor \r\n\r\n    Window.SetFlags(\r\n        WindowManagerFlags.DimBehind | WindowManagerFlags.BlurBehind | WindowManagerFlags.NotTouchable | WindowManagerFlags.NotTouchModal | WindowManagerFlags.TouchableWhenWaking | WindowManagerFlags.KeepScreenOn | WindowManagerFlags.LayoutInScreen | WindowManagerFlags.LayoutNoLimits | WindowManagerFlags.Fullscreen,\r\n        WindowManagerFlags.DimBehind | WindowManagerFlags.BlurBehind | WindowManagerFlags.NotTouchable | WindowManagerFlags.NotTouchModal | WindowManagerFlags.TouchableWhenWaking | WindowManagerFlags.KeepScreenOn | WindowManagerFlags.LayoutInScreen | WindowManagerFlags.LayoutNoLimits | WindowManagerFlags.Fullscreen);\r\n\r\n\r\n### Version Information\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.5.4 (build 3)\r\nInstallation UUID: f86726f2-bd5d-4610-867e-44e82f306ca2\r\nRuntime:\r\n\tMono 5.12.0.301 (2018-02/4fe3280bba1) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 512000301\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.1\r\n\t1.0.4\r\n\t1.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.1\r\n\t1.0.0-preview2-003121\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.12.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.3\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.0.0.20 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/jongoldberger/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.1   (API level 16)\r\n\t\t4.2   (API level 17)\r\n\t\t4.3   (API level 18)\r\n\t\t4.4   (API level 19)\r\n\t\t5.0   (API level 21)\r\n\t\t5.1   (API level 22)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\t\t8.0   (API level 26)\r\n\t\t8.1   (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_161\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.6.0.14 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.14.0.14 (Visual Studio Enterprise)\r\nHash: 1a6e2786\r\nBranch: HEAD\r\nBuild date: 2018-08-28 00:12:06-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705040003\r\nGit revision: 6ae731889c896d6733efb8ff5117f5bf5b17b509\r\nBuild date: 2018-07-19 13:07:45-04\r\nXamarin addins: 417fed09624e1e1f76ab0a11e8b97ffd8bbf91e1\r\nBuild lane: monodevelop-lion-d15-7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.5\r\n\r\n\r\n"},{"Id":"8284270391","Type":"IssuesEvent","CreatedAt":"2018-09-18T18:59:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2193","RelatedDescription":"Opened issue \"DeleteBinObj bug with AndroidResource\" (#2193) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. `File | New Project | Android App (Xamarin) | Tabbed App`, set `Minimum Android Version` to `Android 5.0 (Lollipop)`\r\n2. Build\r\n3. Open `Resource\\layout\\activity_main.axml` (I used the ancient VS XML editor instead of the designer, to remove that from the equation)\r\n4. Add a new `TextView`\r\n5. Run via F5 or the Play button\r\n\r\nA crash at runtime is encountered:\r\n```\r\nUnhandled Exception:\r\n\r\nAndroid.Views.InflateException: Binary XML file line #1: Binary XML file line #1: Error inflating class android.support.design.widget.BottomNavigationView occurred\r\n```\r\n\r\nOn this line:\r\n```csharp\r\nSetContentView (Resource.Layout.activity_main);\r\n```\r\nMy `TextView` source is basically the default if dragged from the toolbox in the designer:\r\n```xml\r\n  <TextView\r\n      android:text=\"Text\"\r\n      android:layout_width=\"match_parent\"\r\n      android:layout_height=\"wrap_content\"\r\n      android:minWidth=\"25px\"\r\n      android:minHeight=\"25px\"\r\n      android:id=\"@+id/textView1\" />\r\n```\r\n\r\nOnce in this state, a `Rebuild` fixes the problem. You can deploy again to see the issue resolved.\r\n\r\n### Expected Behavior\r\n\r\nModifying a layout should not cause a runtime exception!\r\n\r\n### Actual Behavior\r\n\r\nModifying a layout causes runtime exception! `Rebuild` resolves the issue...\r\n\r\n### Version Information\r\n\r\nI have been able to repro this on VS 2017 15.8.4, and the build of Xamarin.Android we will be shipping with 15.9 P3.\r\n\r\n### Log File\r\n\r\nRelevant logs: [DeleteBinObj.zip](https://github.com/xamarin/xamarin-android/files/2394164/DeleteBinObj.zip)\r\n"},{"Id":"8284063649","Type":"PullRequestEvent","CreatedAt":"2018-09-18T18:21:55","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2191","RelatedDescription":"Merged pull request \"[monodroid] Fix monodroid_dylib_mono_init regression\" (#2191) at xamarin/xamarin-android","RelatedBody":"Recently\r\n(https://github.com/xamarin/xamarin-android/commit/95ca1025f0b7e678055ea922a4091b8b9710b18f)\r\nthe monodroid_dylib_mono_init signature changed, which caused issues\r\nin Java.Interop's [GC bridge](https://github.com/xamarin/java.interop/blob/master/src/java-interop/java-interop-gc-bridge-mono.c#L266).\r\n\r\nThe dylib-mono.h API should be considered public.\r\n\r\nIt is fixed by putting `monodroid_dylib_mono_init` back and\r\nintroducing new `monodroid_dylib_mono_init_with_handle` function to\r\ninit mono using the provided handle."},{"Id":"8282648272","Type":"PullRequestEvent","CreatedAt":"2018-09-18T14:30:59","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2192","RelatedDescription":"Opened pull request \"Make sure app bundle has soname set\" (#2192) at xamarin/xamarin-android","RelatedBody":"Android API23 and newer requires that any shared library used by an application\r\nwhich targets API23 or newer has its soname set in the ELF header or otherwise\r\nthe OS will refuse to load it:\r\n\r\n   09-18 08:07:27.687 10698 10698 W linker  : Warning: \"/data/app/Mono.Android_Tests-O9bT_-xHyd26brpmOI9RNg==/lib/x86/libmonodroid_bundle_app.so\" has no DT_SONAME (will use libmonodroid_bundle_app.so instead) and will not work when the app moves to API level 23 or later (https://android.googlesource.\r\ncom/platform/bionic/+/master/missing-soname-enforced-for-api-level-23) (allowing for now because this app's target API level is still 22) (TaskId:201)\r\n\r\nThis commit fixes the problem by passing `-soname libmonodroid_bundle_app.so` to\r\nthe linker when building the bundle."},{"Id":"8282277675","Type":"PullRequestEvent","CreatedAt":"2018-09-18T13:38:53","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2191","RelatedDescription":"Opened pull request \"[monodroid] Fix monodroid_dylib_mono_init regression\" (#2191) at xamarin/xamarin-android","RelatedBody":"Recently\r\n(https://github.com/xamarin/xamarin-android/commit/95ca1025f0b7e678055ea922a4091b8b9710b18f)\r\nthe monodroid_dylib_mono_init signature changed, which caused issues\r\nin Java.Interop's [GC bridge](https://github.com/xamarin/java.interop/blob/master/src/java-interop/java-interop-gc-bridge-mono.c#L266).\r\n\r\nThe dylib-mono.h API should be considered public.\r\n\r\nIt is fixed by putting `monodroid_dylib_mono_init` back and\r\nintroducing new `monodroid_dylib_mono_init_with_handle` function to\r\ninit mono using the provided handle."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8285255894","Type":"IssuesEvent","CreatedAt":"2018-09-18T22:14:03","Actor":"RadoslawKubas","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3824","RelatedDescription":"Opened issue \"Dynamic style not update layout after padding changed.\" (#3824) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nPadding property is changed in dynamic style but layout isn't invalidated. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Create basic ContentPage:\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:local=\"clr-namespace:Xamarin32DynamicResourceProblem\"\r\n             x:Class=\"Xamarin32DynamicResourceProblem.MainPage\"\r\n             Padding=\"50\">\r\n\r\n    <ContentPage.Resources>\r\n        <ResourceDictionary>\r\n\r\n            <Style x:Key=\"longStyle\" TargetType=\"ContentView\">\r\n                <Setter Property=\"Padding\" Value=\"100,0,0,0\"/>\r\n                <Setter Property=\"BackgroundColor\" Value=\"Red\"/>\r\n            </Style>\r\n\r\n            <Style x:Key=\"shortStyle\" TargetType=\"ContentView\">\r\n                <Setter Property=\"Padding\" Value=\"50,0,0,0\"/>\r\n                <Setter Property=\"BackgroundColor\" Value=\"Green\"/>\r\n            </Style>\r\n\r\n        </ResourceDictionary>\r\n    </ContentPage.Resources>\r\n\r\n    <StackLayout>\r\n\r\n        <ContentView Style=\"{DynamicResource paddingStyle}\">\r\n            <Label Text=\"TEST\"/>\r\n        </ContentView>\r\n\r\n        <Button Text=\"shortStyle\" Clicked=\"ApplyShortStyle\"/>\r\n        <Button Text=\"longStyle\" Clicked=\"ApplyLongStyle\"/>\r\n        \r\n    </StackLayout>\r\n\r\n</ContentPage>\r\n\r\n\r\n2. In code behind apply dynamic style:\r\n\r\n\r\n        private void ApplyLongStyle(object sender, EventArgs e)\r\n        {\r\n            Resources[\"paddingStyle\"] = Resources[\"longStyle\"];\r\n\r\n        }\r\n\r\n        private void ApplyShortStyle(object sender, EventArgs e)\r\n        {\r\n            Resources[\"paddingStyle\"] = Resources[\"shortStyle\"];\r\n        }\r\n\r\n3. Click one from buttons to apply new style.\r\n\r\n### Expected Behavior\r\n\r\nColor and padding is changed..\r\n\r\n### Actual Behavior\r\n\r\nOnly color is changed. Padding change is not visible until layout is invalidated (for example after device rotation)\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.839982\r\n- Last known good version: 3.1.0.697729\r\n- IDE: Microsoft Visual Studio Community 2017 Version 15.8.4\r\n- Platform Target Frameworks: \r\n  - iOS:  8.0\r\n  - Android: 8.1\r\n\r\n### Screenshots\r\nXamarin.Forms 3.1.0.697729\r\n![x31short](https://user-images.githubusercontent.com/30774825/45719028-5aa8b480-bb9f-11e8-8d93-ddc9e8fbc74c.png)\r\n![x31long](https://user-images.githubusercontent.com/30774825/45719034-61cfc280-bb9f-11e8-941f-0e9ea332b762.png)\r\n\r\nXamarin.Forms 3.2.0.839982\r\n![x32short](https://user-images.githubusercontent.com/30774825/45719058-70b67500-bb9f-11e8-84fd-2147e03aa0cc.png)\r\n![x32long](https://user-images.githubusercontent.com/30774825/45719063-73b16580-bb9f-11e8-9a74-64fbefd30886.png)\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/RadoslawKubas/Xamarin32DynamicResourceProblem"},{"Id":"8285045863","Type":"PullRequestEvent","CreatedAt":"2018-09-18T21:26:45","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3823","RelatedDescription":"Opened pull request \"[Core] Propagate BindingContext changes to TitleView\" (#3823) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nIf the BindingContext on the Page changes, the new BindingContext isn't propagated to the TitleView. These changes propagate that BindingContext to the TitleView in much the same way that it gets propagated to Menu Items\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #3596 \r\n- fixes #3763\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Testing Procedure ###\r\n-Run Issue3763 in the control gallery and the instructions will indicate what you should see\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8284725898","Type":"IssuesEvent","CreatedAt":"2018-09-18T20:25:41","Actor":"AtlasAF01","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3822","RelatedDescription":"Opened issue \"Not Fixed: Scrollview does not resize when ContentSize changes when inside a Detail page #1332\" (#3822) at xamarin/Xamarin.Forms","RelatedBody":"https://github.com/xamarin/Xamarin.Forms/issues/1332"},{"Id":"8283936787","Type":"PullRequestEvent","CreatedAt":"2018-09-18T17:58:56","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3793","RelatedDescription":null,"RelatedBody":"### Description of Change ###\r\n\r\nThere is precedent in Xamarin.Forms for allowing Android to temporarily \"resurrect\" an object in C# simply to call it's dispose methods. While I'm not entirely sure why this happens, its seems innocuous if all that happens is invocation of the dispose function which then does nothing. \r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #3603\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nAs described in resolved issue.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8283921980","Type":"PullRequestEvent","CreatedAt":"2018-09-18T17:56:19","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3793","RelatedDescription":"Closed pull request \"Fixes failed activation of ListViewAdapter when using nested ListViews and DataTemplateSelector\" (#3793) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThere is precedent in Xamarin.Forms for allowing Android to temporarily \"resurrect\" an object in C# simply to call it's dispose methods. While I'm not entirely sure why this happens, its seems innocuous if all that happens is invocation of the dispose function which then does nothing. \r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #3603\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nAs described in resolved issue.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8283482504","Type":"PullRequestEvent","CreatedAt":"2018-09-18T16:37:36","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3752","RelatedDescription":"Merged pull request \"WPF - Fix Local store not persistant when restarting App\" (#3752) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFix : Local store not persistant when restarting App in Xamarin Forms WPF\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #3541"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8286133101","Type":"IssuesEvent","CreatedAt":"2018-09-19T02:56:10","Actor":"EugeneUr","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4837","RelatedDescription":"Opened issue \"validateProposedFirstResponder:forEvent: is implemented as an extension method and cannot be overriden\" (#4837) at xamarin/xamarin-macios","RelatedBody":"Hello,\r\n\r\nWhen an NSTextField is added to an NSTableView it cannot become editable unless \r\nvalidateProposedFirstResponder:forEvent: returns true. In Cocoa, this is a method on the NSResponder class and can easily be overwritten. For some reason, this was implemented as an extension method in MacOS. Can you please move it to NSResponder and make it non static?\r\n\r\nThis is the continuation of the following two issues:\r\n1. https://forums.xamarin.com/discussion/30416/nsresponder-method-validateproposedfirstresponder-missing\r\n2. https://bugzilla.xamarin.com/show_bug.cgi?id=27466\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create an NSTableView with a single column and a single row.\r\n2. Create that one cell as an NSTextField and mark it editable.\r\n3.  Launch the project\r\n\r\n### Expected Behavior\r\n1. Double clicking on the TextField should allow it to be editable\r\n\r\n### Actual Behavior\r\n1. The field is not editable.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.6 (build 2190)\r\nInstallation UUID: 8e24116a-ded0-4a9b-a9ad-e5715268ec7a\r\nRuntime:\r\n\tMono 5.12.0.301 (2018-02/4fe3280bba1) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 512000301\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.12.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.3\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.0.0.18 (Visual Studio Community)\r\nAndroid SDK: /Users/evgenyuralsky/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.4   (API level 19)\r\n\t\t6.0   (API level 23)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 25.0.5\r\nSDK Build Tools Version: 25.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.6.0.13 (Visual Studio Community)\r\nHash: 373c313a\r\nBranch: \r\nBuild date: 2018-07-24 23:47:12-0400\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.14.0.13 (Visual Studio Community)\r\nHash: 373c313a\r\nBranch: HEAD\r\nBuild date: 2018-07-24 23:47:12-0400\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 706002190\r\nGit revision: 329690594b336b0b810b0399136d55eb54d292ec\r\nBuild date: 2018-08-20 12:03:11+00\r\nBuild branch: release-7.6\r\nXamarin extensions: 23b59d33e3e5e6b7efa0f6d2d699867ab5082527\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.5\r\n\r\n\r\n```\r\n\r\nThank you"},{"Id":"8284504164","Type":"PullRequestEvent","CreatedAt":"2018-09-18T19:44:20","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4836","RelatedDescription":"Opened pull request \"Bump for Xcode 10.1 beta 1\" (#4836) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8284310820","Type":"IssuesEvent","CreatedAt":"2018-09-18T19:06:57","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4835","RelatedDescription":"Opened issue \"[intro] Check for absence of `[NoX]` (Unavailable) in platform assemblies\" (#4835) at xamarin/xamarin-macios","RelatedBody":"The generator process `[NoX]`, like `[NoiOS]`, as an instruction not to generate bindings for a specific platform.\r\n\r\nHowever it can also be used outside the generator, which means the symbols will be part of the platform assembly. That can be a problem since that symbol might now work and could be prohibited.\r\n\r\nWe should add an introspection test to look for such symbols and report an error."},{"Id":"8284287365","Type":"PullRequestEvent","CreatedAt":"2018-09-18T19:02:22","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4834","RelatedDescription":"Opened pull request \"Merge branch 'xcode10' into d15-9\" (#4834) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8284064627","Type":"PullRequestEvent","CreatedAt":"2018-09-18T18:22:06","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4833","RelatedDescription":"Opened pull request \"Merge branch 'xcode10' into master\" (#4833) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8283276824","Type":"PullRequestEvent","CreatedAt":"2018-09-18T16:01:49","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4832","RelatedDescription":"Opened pull request \"[NSLayoutManager] Fix potential NRE in NSLayoutManager.GetGlyphs when one of the parameters is null\" (#4832) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":180,"FavoriteCount":98,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":44,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":41,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":78,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":177,"FavoriteCount":87,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":58,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":54,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null}]}},"RunOn":"2018-09-19T05:30:53.8766352Z","RunDurationInMilliseconds":3913}