{"Data":{"Issues":{"Issues":[{"Id":"316453438","IsPullRequest":false,"CreatedAt":"2018-04-21T02:17:36","Actor":"mellamokb","Number":"640","RawContent":null,"Title":"Render NRE exception with lambda","State":"open","Body":"Continuing with the same example page I'm testing with, the filter code is causing an exception to be logged to console when attempting to perform a search.\r\n\r\n```\r\n@using BlazorPlayground.Shared\r\n@using BlazorPlayground.Shared.Model\r\n@page \"/categories\"\r\n@inject HttpClient Http\r\n\r\n@if (categories == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <fieldset>\r\n        <legend>Search</legend>\r\n        <div class=\"form-horizontal\">\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"Namefilter\">Name</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"NameFilter\" name=\"NameFilter\" bind=\"@NameFilter\" /></div>\r\n            </div>\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"DescriptionFilter\">Description</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"DescriptionFilter\" name=\"DescriptionFilter\" bind=\"@DescriptionFilter\" /></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-offset-2\"><button>Search</button></div>\r\n    </fieldset>\r\n\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Description</th>\r\n                <th>Picture</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var category in GetCategories())\r\n            {\r\n                <tr>\r\n                    <td><b>@category.CategoryID</b></td>\r\n                    <td>@category.CategoryName</td>\r\n                    <td>@category.Description</td>\r\n                    <td><img src=\"@(string.Format(\"api/Category/Picture/{0}\", category.CategoryID))\" /></td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n\r\n    <p>NameFilter: @NameFilter</p>\r\n    <p>Description: @DescriptionFilter</p>\r\n    <p>Categories: @categories.Length</p>\r\n}\r\n\r\n@functions {\r\n    public string NameFilter { get; set; }\r\n    public string DescriptionFilter { get; set; }\r\n    public CategoryTransfer[] categories { get; set; }\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        categories = await Http.GetJsonAsync<CategoryTransfer[]>(\"/api/Category/All\");\r\n    }\r\n\r\n    protected IEnumerable<CategoryTransfer> GetCategories()\r\n    {\r\n        Console.WriteLine(\"GetCategories()\");\r\n        var result = categories.AsQueryable();\r\n        if (!string.IsNullOrWhiteSpace(NameFilter)) result = result.Where(x => x.CategoryName.IndexOf(NameFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        if (!string.IsNullOrWhiteSpace(DescriptionFilter)) result = result.Where(x => x.Description.IndexOf(DescriptionFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nWhen I attempt to run this code, it loads fine initially. However when I type in a filter and it runs `GetCategories` again with either Name or Description Filter populated, the following exception is logged to console.\r\n\r\n```\r\nUncaught Error: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeRunDelegateCtor (System.Type delegateType) <0x1badf88 + 0x00284> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.GetRunDelegateCtor (System.Type delegateType) <0x1ba79a8 + 0x00048> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) <0x1ba7820 + 0x0000e> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) <0x1ba6f20 + 0x00024> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () <0x1ba6db0 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile (System.Boolean preferInterpretation) <0x1f3a290 + 0x00018> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile () <0x1f3a258 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].GetEnumerator () <0x1d13a48 + 0x00030> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].System.Collections.Generic.IEnumerable<T>.GetEnumerator () <0x1d13438 + 0x00008> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at BlazorPlayground.Client.Pages.Categories.BuildRenderTree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1c97810 + 0x00988> in <f3511b7758e24314bdf26d3ca23eda2b>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d87d0 + 0x0006c> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d8378 + 0x00040> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19d59f0 + 0x00048> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e6c0 + 0x00068> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e558 + 0x00020> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (System.String eventDescriptorJson, System.String eventArgsJson) <0x1d1b798 + 0x0005a> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeRunDelegateCtor (System.Type delegateType) <0x1badf88 + 0x00284> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.GetRunDelegateCtor (System.Type delegateType) <0x1ba79a8 + 0x00048> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) <0x1ba7820 + 0x0000e> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) <0x1ba6f20 + 0x00024> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () <0x1ba6db0 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile (System.Boolean preferInterpretation) <0x1f3a290 + 0x00018> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile () <0x1f3a258 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].GetEnumerator () <0x1d13a48 + 0x00030> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].System.Collections.Generic.IEnumerable<T>.GetEnumerator () <0x1d13438 + 0x00008> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at BlazorPlayground.Client.Pages.Categories.BuildRenderTree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1c97810 + 0x00988> in <f3511b7758e24314bdf26d3ca23eda2b>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d87d0 + 0x0006c> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d8378 + 0x00040> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19d59f0 + 0x00048> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e6c0 + 0x00068> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e558 + 0x00020> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (System.String eventDescriptorJson, System.String eventArgsJson) <0x1d1b798 + 0x0005a> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n    at Object.callMethod (MonoPlatform.ts:70)\r\n    at raiseEvent (BrowserRenderer.ts:304)\r\n    at EventDelegator.onEvent (BrowserRenderer.ts:17)\r\n    at EventDelegator.onGlobalEvent (EventDelegator.ts:77)\r\n```\r\n\r\nI've also verified that this code works correctly if I put it in the Server-side in a controller and call it as an API, instead of embedded in a Razor page.  So the code should be functional.","Url":"https://github.com/aspnet/Blazor/issues/640","RelatedDescription":"Open issue \"Render NRE exception with lambda\" (#640)"},{"Id":"316452058","IsPullRequest":false,"CreatedAt":"2018-04-21T01:53:53","Actor":"mellamokb","Number":"639","RawContent":null,"Title":"Symbol rename text corruption and extension crash.","State":"open","Body":"If you attempt to do a symbol rename from a Razor page you get all sorts of strange results.  Here is the test page I am working on\r\n\r\n```\r\n@using BlazorPlayground.Shared\r\n@using BlazorPlayground.Shared.Model\r\n@page \"/categories\"\r\n@inject HttpClient Http\r\n\r\n@if (categories == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <fieldset>\r\n        <legend>Search</legend>\r\n        <div class=\"form-horizontal\">\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"Namefilter\">Name</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"NameFilter\" name=\"NameFilter\" bind=\"@NameFilter\" /></div>\r\n            </div>\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"DescriptionFilter\">Description</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"DescriptionFilter\" name=\"DescriptionFilter\" bind=\"@DescriptionFilter\" /></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-offset-2\"><button>Search</button></div>\r\n    </fieldset>\r\n\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Description</th>\r\n                <th>Picture</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var category in GetCategories())\r\n            {\r\n                <tr>\r\n                    <td><b>@category.CategoryID</b></td>\r\n                    <td>@category.CategoryName</td>\r\n                    <td>@category.Description</td>\r\n                    <td><img src=\"@(string.Format(\"api/Category/Picture/{0}\", category.CategoryID))\" /></td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n\r\n    <p>NameFilter: @NameFilter</p>\r\n    <p>Description: @DescriptionFilter</p>\r\n    <p>Categories: @categories.Length</p>\r\n}\r\n\r\n@functions {\r\n    public string NameFilter { get; set; }\r\n    public string DescriptionFilter { get; set; }\r\n    public CategoryTransfer[] categories { get; set; }\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        categories = await Http.GetJsonAsync<CategoryTransfer[]>(\"/api/Category/All\");\r\n    }\r\n\r\n    protected IEnumerable<CategoryTransfer> GetCategories()\r\n    {\r\n        Console.WriteLine(\"GetCategories()\");\r\n        var result = categories.AsQueryable();\r\n        if (!string.IsNullOrWhiteSpace(NameFilter)) result = result.Where(x => x.CategoryName.IndexOf(NameFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        if (!string.IsNullOrWhiteSpace(DescriptionFilter)) result = result.Where(x => x.Description.IndexOf(DescriptionFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nIf you attempt to rename one of the `categories` variable, it appears to work.  It correctly highlights all the references.  However as you type, the text gets corrupted, or it prevents you from typing, or sometimes you just get an outright extension crash.","Url":"https://github.com/aspnet/Blazor/issues/639","RelatedDescription":"Open issue \"Symbol rename text corruption and extension crash.\" (#639)"},{"Id":"316442062","IsPullRequest":false,"CreatedAt":"2018-04-21T00:13:30","Actor":"Andrzej-W","Number":"638","RawContent":null,"Title":"Should we use .NET Core 2.0 or 2.1 for Blazor app? Doc inconsistency?","State":"closed","Body":"On this page [https://blazor.net/docs/get-started.html](https://blazor.net/docs/get-started.html) it is written that we have to install .NET Core **2.1** Preview 2 SDK. Then in \"create your first project\" in step 2 it is written: Make sure .NET Core and ASP.NET Core **2.0** are selected at the top.","Url":"https://github.com/aspnet/Blazor/issues/638","RelatedDescription":"Closed issue \"Should we use .NET Core 2.0 or 2.1 for Blazor app? Doc inconsistency?\" (#638)"},{"Id":"316439440","IsPullRequest":false,"CreatedAt":"2018-04-20T23:34:59","Actor":"danroth27","Number":"637","RawContent":null,"Title":"Add instructions for using a nightly build of the Blazor Language Service VSIX","State":"closed","Body":"![image](https://user-images.githubusercontent.com/1874516/39077607-2729edb2-44b8-11e8-8798-701ba632fdd4.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/637","RelatedDescription":"Closed issue \"Add instructions for using a nightly build of the Blazor Language Service VSIX\" (#637)"},{"Id":"316390543","IsPullRequest":false,"CreatedAt":"2018-04-20T22:01:49","Actor":"mattfraley1","Number":"635","RawContent":null,"Title":"Getting started demo shows blank page","State":"closed","Body":"I have been following the [getting started article](http://blazor.net/docs/get-started.html), but when I run it, all I get is a blank page. I see the \"Loading...\" notice, then it goes away, but nothing else shows up.\r\n\r\nI have tried in IE, Edge, Firefox, Chrome etc. I have made sure I don't have any blocking like uBlock. When I look at the network traffic in developer tools, everything is downloading fine. I have tried running with, and without debugger. I have checked event logs, but don't see anything related. I have also tried the core hosted version.\r\n\r\nAlso note, that I installed all the items from the article this morning, so I have all the latest bits.\r\n\r\nIs there some way I can debug the issue or something else I should try?","Url":"https://github.com/aspnet/Blazor/issues/635","RelatedDescription":"Closed issue \"Getting started demo shows blank page\" (#635)"},{"Id":"316338702","IsPullRequest":true,"CreatedAt":"2018-04-20T21:49:13","Actor":"SteveSandersonMS","Number":"633","RawContent":null,"Title":"Fix diffing when \"bind\" is combined with conditional attribute. Fixes #624","State":"closed","Body":"The issue was that we were using incorrect logic to update the indices during the attribute diffing. The problem only manifests given a very specific diffing scenario because of a fluke in how the memory for a `RenderTreeFrame` is laid out.\r\n\r\nFortunately the fixed code is much simpler. And we get a minor perf boost for free.","Url":"https://github.com/aspnet/Blazor/pull/633","RelatedDescription":"Closed or merged PR \"Fix diffing when \"bind\" is combined with conditional attribute. Fixes #624\" (#633)"},{"Id":"316418690","IsPullRequest":true,"CreatedAt":"2018-04-20T21:35:00","Actor":"javiercn","Number":"636","RawContent":null,"Title":"[WIP] Routing cleanup and feedback","State":"open","Body":"Addresses feedback from https://github.com/aspnet/Blazor/pull/266:\r\n* Consider assemblies as candidates when any of their dependencies references the blazor assembly.\r\n* Provides an extensibility endpoint for implementing your own custom logic when subclassing the router component.\r\n* Makes RouteTable.Routes get only.\r\n* Removes the unnecessary page directive from the links component in the basic test app.\r\n* Caches route tables per entry assembly\r\n* Discovers routes with [Route] applied to a base class","Url":"https://github.com/aspnet/Blazor/pull/636","RelatedDescription":"Open PR \"[WIP] Routing cleanup and feedback\" (#636)"},{"Id":"316372369","IsPullRequest":false,"CreatedAt":"2018-04-20T18:54:38","Actor":"NeilMacMullen","Number":"634","RawContent":null,"Title":"HttpClient.PostJsonAsync appears not to fetch from http apis","State":"closed","Body":"Using Blazor 0.2.1 the following code fails to retrieve information:\r\n\r\n    var url = TrackService.ServiceUrl(TrackService.TsService.Echo);\r\n    var req = new EchoRequestDto {Echo = \"hello world\"};\r\n    var resp = await _httpClient.PostJsonAsync<EchoResponseDto>(url, req);\r\n\r\nwhen the url is http rather than https.  The same service (and dtos) can be used from a .net framework application using WebClient.  The code above does work for other services which are https.  Unfortunately I haven't yet found a service which can be tested over both http and https so don't have a direct comparison.  The error returned is....\r\n\r\n> \r\nSystem.Net.Http.HttpRequestException: TypeError: Failed to fetch. at Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler+<SendAsync>d__8.MoveNext () <0x1dede30 + 0x0039a> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 --- End of stack trace from previous location where exception was thrown --- at System.Net.Http.HttpClient+<SendAsyncWorker>d__47.MoveNext () <0x1ddb2a8 + 0x0017e> in <ddfe03af15f14d3e8b54c58c0b39de11>:0 --- End of stack trace from previous location where exception was thrown --- at Microsoft.AspNetCore.Blazor.HttpClientJsonExtensions+<SendJsonAsync>d__6`1[T].MoveNext () <0x1d7ab60 + 0x00100> in <8a8022566b074cca8a70e10050945cdd>:0 --- End of stack trace from previous location where exception was thrown --- at BlazorWeb.TestClass+<GetDevices>d__3.MoveNext () <0x1d70a98 + 0x00154> in <304208b16f254ea3b31504e888d5b249>:0 TypeError: Failed to fetch.\r\n","Url":"https://github.com/aspnet/Blazor/issues/634","RelatedDescription":"Closed issue \"HttpClient.PostJsonAsync appears not to fetch from http apis\" (#634)"},{"Id":"315664400","IsPullRequest":false,"CreatedAt":"2018-04-20T16:55:56","Actor":"masonwheeler","Number":"612","RawContent":null,"Title":"Visual Studio Publish command creates corrupt web.config when publishing to an Azure VM","State":"closed","Body":"Repro steps:\r\n\r\n1.  Set up an Azure VM running Windows (not an Azure web app instance--this might work as well, but this is the way I know will work)\r\n2. Configure IIS on the VM, including installing the rewrite module, and follow all other steps necessary to prepare it to receive web updates via Visual Studio's Publish command.  Also install the .Net Core Preview version Blazor needs.\r\n3. Create a Blazor project in Visual Studio.\r\n4. Use Visual Studio's Publish command to publish the Blazor project to your Azure VM\r\n5. Use your browser to attempt to access the Blazor project from your dev PC.\r\n\r\nExpected:  The project loads in your browser\r\nObserved: IIS 500 error page\r\n\r\nPublish is screwing up here, by publishing a web.config (or is it config.web?  I'm not at the relevant computer at the moment) file that tries to treat the Blazor project as an ASP.Net server project, rather than as static content that's intended to run in the browser.  (After deleting the relevant lines from the config file, I was able to get it working.)","Url":"https://github.com/aspnet/Blazor/issues/612","RelatedDescription":"Closed issue \"Visual Studio Publish command creates corrupt web.config when publishing to an Azure VM\" (#612)"},{"Id":"316107435","IsPullRequest":false,"CreatedAt":"2018-04-20T16:55:27","Actor":"mellamokb","Number":"624","RawContent":null,"Title":"Computed disabled attribute does not rerender.","State":"closed","Body":"I have tested a simple form concept.  There is a checkbox called \"Active\", which when you check the following fields become enabled.\r\n\r\n```\r\n    <div class=\"form-group row\">\r\n        <label class=\"form-check-label col-sm-4\" for=\"Active\">Is Active</label>\r\n        <div class=\"col-sm-8\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" name=\"Active\" id=\"Active\" bind=\"Active\" />\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label class=\"col-form-label col-sm-4\" for=\"Minimum\">% Minimum</label>\r\n        <div class=\"col-sm-8\">\r\n            <input class=\"form-control\" style=\"width:160px;\" type=\"text\" name=\"Minimum\" id=\"Minimum\" bind=\"MinimumStr\" disabled=\"@(!Active)\" />\r\n        </div>\r\n    </div>\r\n```\r\n\r\nHowever, the rendering of being disabled only works on initial load, based on the default checked status of Active checkbox.  When you check or uncheck the Active box, it doesn't update the disabled status of the Minimum textbox, even if you hook into the Active setter and manually call StateHasChanged().","Url":"https://github.com/aspnet/Blazor/issues/624","RelatedDescription":"Closed issue \"Computed disabled attribute does not rerender.\" (#624)"},{"Id":"316055243","IsPullRequest":false,"CreatedAt":"2018-04-20T16:54:49","Actor":"floreseken","Number":"623","RawContent":null,"Title":"Elegant way to wrap binding for unsupported type","State":"closed","Body":"I get it, this is work in progress. So this will be solved in future I guess:\r\n\r\n```\r\n<input bind=\"@Amount\" /><br/>\r\n\r\n@functions\r\n{\r\n    public decimal Amount { get; set; }\r\n}\r\n``` \r\n\r\nNow throws:\r\n\r\n`Error: System.ArgumentException: 'bind' does not accept values of type System.Decimal. To read and write this value type, wrap it in a property of type string with suitable getters and setters`\r\n\r\nSo I can make this work by adding this property (needs more failure checks, I know);\r\n\r\n```\r\n    public decimal Amount { get; set; }\r\n\r\n    [NotMapped]\r\n    public string AmountStr\r\n    {\r\n        get\r\n        {\r\n            return this.dec.ToString();\r\n        }\r\n        set\r\n        {\r\n            this.dec = Convert.ToDecimal(value);\r\n        }\r\n    }\r\n```\r\n\r\nAnd binding to AmountStr.\r\n\r\nBut if you are using (EF poco) objects this really pollutes my model classes.\r\nDoes anybody can suggest a elegant workaround for this?\r\n","Url":"https://github.com/aspnet/Blazor/issues/623","RelatedDescription":"Closed issue \"Elegant way to wrap binding for unsupported type\" (#623)"},{"Id":"316253803","IsPullRequest":false,"CreatedAt":"2018-04-20T16:51:34","Actor":"anirugu","Number":"631","RawContent":null,"Title":"I am looking for a way to set the custom route in blazor, please help","State":"closed","Body":"For example like a blog post, the URL will be goes something like this\r\n\r\nexample.com/1-testing.html\r\n\r\n1 IS ID and 'testing' is a slug. I check the issues in this repos but didn't find the code that can help me to do this. \r\n\r\nIs current version let me do this.  if yes, how I can try it.\r\n\r\nthanks","Url":"https://github.com/aspnet/Blazor/issues/631","RelatedDescription":"Closed issue \"I am looking for a way to set the custom route in blazor, please help\" (#631)"},{"Id":"316333989","IsPullRequest":false,"CreatedAt":"2018-04-20T16:34:39","Actor":"rmbar","Number":"632","RawContent":null,"Title":"Does Blazor (via Mono) JIT code to \"native\" webassembly?","State":"closed","Body":"Or will, for example, my method bodies always be interpreted at a higher language layer inside the runtime during execution?","Url":"https://github.com/aspnet/Blazor/issues/632","RelatedDescription":"Closed issue \"Does Blazor (via Mono) JIT code to \"native\" webassembly?\" (#632)"},{"Id":"316232986","IsPullRequest":true,"CreatedAt":"2018-04-20T11:35:33","Actor":"Daddoon","Number":"630","RawContent":null,"Title":"Added binding support on double/float/decimal","State":"open","Body":"Added binding support on double/float/decimal, by adding corresponding delegates for theses use case.\r\n\r\n**NOTE:** Binding parsed and showed value for decimal is correspond to current thread culture format (System.Threading.Thread.CurrentThread.CurrentCulture or System.Threading.Thread.CurrentThread.CurrentUICulture , doesn't have made deep test), so the ouput may be influenced and corresponding to culture requirement.\r\n\r\n**Suggestion:** What about  System.OverflowException ? Actually mocking the previous implementation (btw doing nothing specially).\r\n\r\nFix #623 ","Url":"https://github.com/aspnet/Blazor/pull/630","RelatedDescription":"Open PR \"Added binding support on double/float/decimal\" (#630)"},{"Id":"316228797","IsPullRequest":true,"CreatedAt":"2018-04-20T11:20:05","Actor":"Daddoon","Number":"629","RawContent":null,"Title":"Added VSIISExeLauncher autorebuild support.","State":"open","Body":"(Re-opened pull, as i branched correctly my code)\r\n\r\nAdded **VSIISExeLauncher** autorebuild support.\r\n\r\nWhen searching for devenv process in FindAncestorVSProcess method, if \"VSIISExeLauncher\" is found in the process tree, then we are likely in a debugable IIS hosted app.\r\n\r\nRetrieving the initial launcher to find the owningPid number, actually the current devenv instance.\r\n\r\nReturning devenv process if found and valid.\r\n\r\nThis behavior will fail of course if the current executing process lack of permissions, like not being in the administrator group.\r\n\r\nIn my case, added my current ApplicationPool in the Administrators group, then restarted IIS, was sufficient to allow to read devenv process.\r\n\r\nCorrect me if i'm wrong, but as the VSIISExeLauncher will be called only if launched from Visual Studio, this behavior should never happen in production.\r\n\r\n**NOTE**: FindIISHostedVSProcess is called within FindAncestorVSProcess **while** loop if its relevant, however if you prefer by design that this method is called after FindAncestorVSProcess in TryCreate (if relevant), i will change this.","Url":"https://github.com/aspnet/Blazor/pull/629","RelatedDescription":"Open PR \"Added VSIISExeLauncher autorebuild support.\" (#629)"},{"Id":"316136511","IsPullRequest":false,"CreatedAt":"2018-04-20T09:37:05","Actor":"mikoskinen","Number":"626","RawContent":null,"Title":"Rendering component through binding to div","State":"closed","Body":"Is there plans to extend binding support so that one could bind the whole component to a div element?  \r\n\r\nMeaning, one could define component like this:\r\n\r\n```\r\n@page \"/\"\r\n<h1>Hello, world!</h1>\r\nWelcome to your new app.\r\n<SurveyPrompt Title=\"How is Blazor working for you?\" />\r\n\r\n<div bind=@counter/>\r\n\r\n@functions {\r\n    Counter counter = new Counter();\r\n}\r\n```\r\nI think this could be solved without binding too, with something like:\r\n\r\n```\r\n@page \"/\"\r\n<h1>Hello, world!</h1>\r\nWelcome to your new app.\r\n<SurveyPrompt Title=\"How is Blazor working for you?\" />\r\n\r\n<div>\r\n@counter\r\n</div>\r\n\r\n@functions {\r\n    Counter counter = new Counter();\r\n}\r\n```\r\nCurrently this doesn't render the component, only its type name.\r\n\r\nOr maybe with a custom tag helper:\r\n\r\n```\r\n@page \"/\"\r\n<h1>Hello, world!</h1>\r\nWelcome to your new app.\r\n<SurveyPrompt Title=\"How is Blazor working for you?\" />\r\n\r\n<component bind=@counter/>\r\n\r\n@functions {\r\n    Counter counter = new Counter();\r\n}\r\n```\r\n\r\nThe idea here is that we could compose component (for example Shell) from multiple child components (News, Customers, Invoices) through DI / inject attribute. \r\n\r\nThis would also allow one to define some of the components singleton and inject them where needed.   ","Url":"https://github.com/aspnet/Blazor/issues/626","RelatedDescription":"Closed issue \"Rendering component through binding to div\" (#626)"},{"Id":"316169420","IsPullRequest":false,"CreatedAt":"2018-04-20T09:14:07","Actor":"grahamehorner","Number":"628","RawContent":null,"Title":"[feature request] binding model attribute validation","State":"closed","Body":"not sure if this on the backlog? developer experience;\r\n\r\nI'd like to be able to create a C# view models with model property validation annotation attributes, that are automatically applied to the DOM elements which bind to the model property in that the bound model property only gets updated on the lost focus event and if the property validation passed.\r\n ","Url":"https://github.com/aspnet/Blazor/issues/628","RelatedDescription":"Closed issue \"[feature request] binding model attribute validation\" (#628)"},{"Id":"316161831","IsPullRequest":false,"CreatedAt":"2018-04-20T08:01:57","Actor":"MihaMarkic","Number":"627","RawContent":null,"Title":"Packing javascript with a component","State":"closed","Body":"Is scenario where I'd create a component including its javascript counterpart and pack it into NuGet library supported?","Url":"https://github.com/aspnet/Blazor/issues/627","RelatedDescription":"Closed issue \"Packing javascript with a component\" (#627)"},{"Id":"316120236","IsPullRequest":false,"CreatedAt":"2018-04-20T04:02:26","Actor":"panesofglass","Number":"625","RawContent":null,"Title":"Blazor 0.2.0 applications fail to load in Safari on macOS","State":"open","Body":"### Environment:\r\n- macOS High Sierra 10.13.4 (17E199)\r\n- dotnet 2.1.300-preview2-008533\r\n- Blazor 0.2.0\r\n\r\n### Repro steps:\r\n1. Create a blazer stand-alone (or hosted) app from the latest templates\r\n2. Build with `dotnet build $project`\r\n3. Run with `dotnet run --project $project`\r\n\r\n### Expected:\r\nBlazor app runs in Safari as it did for the 0.1.0 runtime and templates\r\n\r\n### Actual\r\n- Safari attempts to load and fails with `This webpage was reloaded because a problem occurred.`\r\n- Safari attempts to reload.\r\n- Safari stops trying to reload after repeated failures.\r\n<img width=\"266\" alt=\"image\" src=\"https://user-images.githubusercontent.com/8803/39030186-b67c2e96-4425-11e8-89dd-64cf3b4158c0.png\">\r\n\r\n### Additional details:\r\n- I attempted to open the JavaScript Console to see what was happening, but the console is closed due to the errors.\r\n- I don't see any errors in the logs, just repeated requests for the same files with the expected HTTP `304` responses.","Url":"https://github.com/aspnet/Blazor/issues/625","RelatedDescription":"Open issue \"Blazor 0.2.0 applications fail to load in Safari on macOS\" (#625)"},{"Id":"315992875","IsPullRequest":true,"CreatedAt":"2018-04-19T23:06:33","Actor":"danroth27","Number":"621","RawContent":null,"Title":"Change blazorlib output type to Library","State":"closed","Body":"See https://github.com/aspnet/Blazor/issues/614#issuecomment-382567937","Url":"https://github.com/aspnet/Blazor/pull/621","RelatedDescription":"Closed or merged PR \"Change blazorlib output type to Library\" (#621)"},{"Id":"316036728","IsPullRequest":true,"CreatedAt":"2018-04-19T21:29:02","Actor":"SteveSandersonMS","Number":"622","RawContent":null,"Title":"Fake PR to run tests before release/0.2.1","State":"closed","Body":"This is not really a PR. I just want to run the tests on AppVeyor/Travis. Then I'll delete this.","Url":"https://github.com/aspnet/Blazor/pull/622","RelatedDescription":"Closed or merged PR \"Fake PR to run tests before release/0.2.1\" (#622)"},{"Id":"315670146","IsPullRequest":false,"CreatedAt":"2018-04-19T20:15:06","Actor":"humbersoft","Number":"613","RawContent":null,"Title":"Output Blazor version info in blazor.js or similar file","State":"closed","Body":"I don't think this is super important, but it would be nice to know what version of a Blazor my website is running by inspecting via view source code","Url":"https://github.com/aspnet/Blazor/issues/613","RelatedDescription":"Closed issue \"Output Blazor version info in blazor.js or similar file\" (#613)"},{"Id":"315959601","IsPullRequest":true,"CreatedAt":"2018-04-19T20:14:11","Actor":"rynowak","Number":"618","RawContent":null,"Title":"Fix #597 Allow multiple tokens in attributes","State":"closed","Body":"The issue here is that we were missing tests for the design time code\r\npath. We have tests that the bind-... cases work at runtime but were\r\nmissing coverage for the editor.\r\n\r\nI took the most relevant set of the tests for running bind-... code and\r\nadded them to the tests for codegen.","Url":"https://github.com/aspnet/Blazor/pull/618","RelatedDescription":"Closed or merged PR \"Fix #597 Allow multiple tokens in attributes\" (#618)"},{"Id":"315986933","IsPullRequest":false,"CreatedAt":"2018-04-19T20:13:00","Actor":"montyclt","Number":"620","RawContent":null,"Title":"[PROPOSAL] Use Razor directives as class attributes when using code-behind pattern.","State":"closed","Body":"Hello, I propose the use of razor directives as class annotations when using then code-behind pattern.\r\n\r\nAn example, turn the `@page \"/todo\"` directive into class attribute:\r\n\r\n```\r\n[Page(\"/todo\")]\r\nclass TodoPage\r\n{\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/620","RelatedDescription":"Closed issue \"[PROPOSAL] Use Razor directives as class attributes when using code-behind pattern.\" (#620)"},{"Id":"315962095","IsPullRequest":true,"CreatedAt":"2018-04-19T20:06:29","Actor":"SteveSandersonMS","Number":"619","RawContent":null,"Title":"Bootstrap 4 and new styling","State":"closed","Body":"This builds on @fabridamazio's work in #363\r\n\r\nI've reimplemented the layout and styling rules to make it look shinier and adapt to different size screens better. This PR also implements a working \"hamburger\" button for toggling the nav UI on mobile screens.","Url":"https://github.com/aspnet/Blazor/pull/619","RelatedDescription":"Closed or merged PR \"Bootstrap 4 and new styling\" (#619)"},{"Id":"315681931","IsPullRequest":false,"CreatedAt":"2018-04-19T19:35:46","Actor":"dotnetnoobie","Number":"614","RawContent":null,"Title":"BlazorLib - PackageReference 0.2.0-preview1-10195","State":"closed","Body":"Using **Blazor Language Services 15.7.10222** (0.2.0 preview version)\r\n\r\nWhen I make a Blazor **Reusable Component** I get old package references in the .csproj file\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <OutputType>library</OutputType>\r\n    <IsPackable>true</IsPackable>\r\n    <BlazorLinkOnBuild>false</BlazorLinkOnBuild>\r\n\r\n    <!-- This custom package feed is required only when using nightly builds of Blazor -->\r\n    <RestoreSources>https://dotnet.myget.org/F/blazor-dev/api/v3/index.json;$(RestoreSources)</RestoreSources>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- .js/.css files will be referenced via <script>/<link> tags; other content files will just be included in the app's 'dist' directory without any tags referencing them -->\r\n    <EmbeddedResource Include=\"content\\**\\*.js\" LogicalName=\"blazor:js:%(RecursiveDir)%(Filename)%(Extension)\" />\r\n    <EmbeddedResource Include=\"content\\**\\*.css\" LogicalName=\"blazor:css:%(RecursiveDir)%(Filename)%(Extension)\" />\r\n    <EmbeddedResource Include=\"content\\**\" Exclude=\"**\\*.js;**\\*.css\" LogicalName=\"blazor:file:%(RecursiveDir)%(Filename)%(Extension)\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.2.0-preview1-10195\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.2.0-preview1-10195\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe other thing I noticed is that the **OutputType** is set to **Library**\r\nbut if I look at the properties dialog in VS 2017 preview 3.0\r\nIt tells me I have an output type of **Windows Application** \r\n\r\n![untitled](https://user-images.githubusercontent.com/5423598/38963900-804ec482-43b7-11e8-8418-be74d5d6b6f8.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/614","RelatedDescription":"Closed issue \"BlazorLib - PackageReference 0.2.0-preview1-10195\" (#614)"},{"Id":"315959299","IsPullRequest":false,"CreatedAt":"2018-04-19T16:56:16","Actor":"michaelongithub","Number":"617","RawContent":null,"Title":"Blazor development depending on WebAssembly progress ?","State":"closed","Body":"Hi\r\nif one looks at http://webassembly.org/docs/future-features/ or https://wasm.news it is for the layman difficult to see, if there is real progress after mvp.\r\nSince I am not an expert in these matters at all I wonder:\r\nDoes the Blazor group know what the state of these developments is, maybe even contributing to it?\r\nIs future Blazor development or its finalisation as a real product dependent on wasm being developed further?\r\nHow do you assess the risk, if wasm stagnates or even looses general interest as a consequence of no visible further developement.\r\n\r\nVery interested to hear Your take on that. Even if I misjudge the situation completely.\r\nThanks for info\r\nCheers,Michael\r\n","Url":"https://github.com/aspnet/Blazor/issues/617","RelatedDescription":"Closed issue \"Blazor development depending on WebAssembly progress ?\" (#617)"},{"Id":"315912698","IsPullRequest":false,"CreatedAt":"2018-04-19T15:03:39","Actor":"floreseken","Number":"616","RawContent":null,"Title":"Components without ChildContent dont throw exception when used with contents if shown conditionally","State":"closed","Body":"Consider this component:\r\n\r\n```\r\n<div>\r\n    @Test\r\n</div>\r\n\r\n@functions\r\n{\r\n    public string Test { get; set; } = \"Testing\";\r\n\r\n}\r\n```\r\n\r\nWorks fine if you use it like this somewhere in a page:\r\n\r\n```\r\n<MyComponent></MyComponent>\r\n```\r\n\r\nBut if you (accidently) add content to it, like this:\r\n\r\n```\r\n<MyComponent>Do not do this</MyComponent>\r\n```\r\n\r\nIt will throw a nice exception, something like: 'Object of type 'Components.MyComponent' does not have a property matching the name 'ChildContent'. \r\n\r\nFine\r\n\r\nNow, when I want to show this component conditionally, like so:\r\n\r\n```\r\n@if (show)\r\n{\r\n    <MyComponent>Do not do this</MyComponent>\r\n}\r\n```\r\n\r\nAnd make a button to set 'show = true' then nothing happens. No component is shown which is maybe to be expected, but there is also no exception, which I do expect. \r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/616","RelatedDescription":"Closed issue \"Components without ChildContent dont throw exception when used with contents if shown conditionally\" (#616)"},{"Id":"315849162","IsPullRequest":false,"CreatedAt":"2018-04-19T12:24:09","Actor":"MihaMarkic","Number":"615","RawContent":null,"Title":"TypeError: assembly_load is not a function","State":"closed","Body":"Blazor 0.2.0\r\n\r\nI have the following javascript code where I'm looking for a static method in Program class.\r\n\r\n```\r\nconst assemblyName = \"BlazorWithSharpRedux\";\r\nconst namespace = \"BlazorWithSharpRedux\";\r\nconst typeName = \"Program\";\r\nconst methodName = \"ApplyReduxAction\";\r\n\r\nconst applyReduxAction = Blazor.platform.findMethod(\r\n    assemblyName,\r\n    namespace,\r\n    typeName,\r\n    methodName\r\n);\r\n```\r\n\r\nWhen I run Blazor 0.2.0 I get this error:\r\n\r\n> TypeError: assembly_load is not a function     MonoPlatform.ts:134:21\r\n> findAssembly      MonoPlatform.ts:134:21\r\n> findType       MonoPlatform.ts:147:28\r\n> findMethod        MonoPlatform.ts:160:31\r\n> <anonymous>\r\n\r\nThe script runs after these two:\r\n\r\n```\r\n<script src=\"css/bootstrap/bootstrap-native.min.js\"></script>\r\n<script type=\"blazor-boot\"></script>\r\n```\r\n\r\nAm I doing something wrong?","Url":"https://github.com/aspnet/Blazor/issues/615","RelatedDescription":"Closed issue \"TypeError: assembly_load is not a function\" (#615)"},{"Id":"315650209","IsPullRequest":false,"CreatedAt":"2018-04-18T21:33:14","Actor":"CraigSelbert","Number":"611","RawContent":null,"Title":"Can't change folder structure of Blazor (ASP.NET Cloud hosted) template","State":"open","Body":"I was playing around with the project structure and was seeing how far I could go before I broke it and that took no time at all.\r\n\r\nSo the default template produces a folder structure like \r\n```\r\nWebApplication1\r\n├── WebApplication.sln\r\n├── WebApplication1\r\n|   ├── WebApplication1.Client\r\n|   ├── WebApplication1.Server\r\n|   └── WebApplication1.Shared\r\n```\r\nI am trying to make the folder structure look like this\r\n```\r\nWebApplication1\r\n├── WebApplication.sln\r\n├── Client\r\n├── Server\r\n└── Shared\r\n```\r\nWhat I have ended up with is...\r\n```\r\nWebApplication1\r\n├── WebApplication.sln\r\n├── WebApplication.Client\r\n├── Server\r\n└── Shared\r\n```\r\nFor some weird reason when I try to change `WebApplication.Client` to just `Client` the client stops compiling. \r\n\r\nI can commit my code to GitHub with the before and after if you would like. I am guessing this is breaking some convention that I am not aware of and would love to know what that is. \r\n","Url":"https://github.com/aspnet/Blazor/issues/611","RelatedDescription":"Open issue \"Can't change folder structure of Blazor (ASP.NET Cloud hosted) template\" (#611)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-04-21T05:30:02.1840293Z","RunDurationInMilliseconds":931}