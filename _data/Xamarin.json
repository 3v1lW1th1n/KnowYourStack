{"Data":{"Blog":{"FeedItems":[{"Title":"The Xamarin Show: Getting Started with iOS Development in C#","PublishedOn":"2018-01-18T18:54:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re looking to get started with iOS development, there&#8217;s no better place to look than our amazing Xamarin.iOS documentation guides. They cover each and every topic that you can...","Href":"https://blog.xamarin.com/the-xamarin-show-getting-started-with-ios-development-in-c-sharp/","RawContent":null},{"Title":"The C# Developer’s Guide to Shipping Better Apps with Visual Studio App Center","PublishedOn":"2018-01-16T19:41:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At our annual Microsoft Connect event in November, we announced the General Availability of Visual Studio App Center, combining our best developer services, incuding Xamarin Test Cloud and HockeyApp,...","Href":"https://blog.xamarin.com/c-developers-guide-shipping-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Podcast: Android 8.1, Xamarin Device Manager, and Visual Studio versions 15.5 & 15.6","PublishedOn":"2018-01-12T20:59:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Android 8.1, the new Xamarin Device Manager Preview, what&#8217;s new for mobile developers in Visual Studio versions 15.5/15.6,...","Href":"https://blog.xamarin.com/podcast-android-8-1-xamarin-device-manager-visual-studio-versions-15-5-15-6/","RawContent":null},{"Title":"Xamarin.Android Now Double Stuffed with Oreo 8.1","PublishedOn":"2018-01-11T19:55:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Oreo 8.1 introduces new features, including Android Go, Neural Networks API, Autofill framework enhancements, SharedMemory API, and many more. We&#8217;re excited to announce Xamarin.Android...","Href":"https://blog.xamarin.com/xamarin-android-now-double-stuffed-with-oreo-8-1/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-11T14:55:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join Mark Smith, Director of Xamarin University, on Thursday, January 25 at 9 am PT / 12 pm ET / 5 pm GMT to learn how to automate your app development pipeline with Visual Studio App Center. You’ll...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Visual Studio 2017 Version 15.6 Preview Available Today!","PublishedOn":"2018-01-10T19:16:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last month, we released Visual Studio 2017 version 15.5, which came with awesome new features, including the iOS Remoted Simulator becoming available to all developers, live XAML previewing in Android...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-6-preview-available-today/","RawContent":null},{"Title":"Delivering Rich Media Experiences with the Xamarin.Forms Video Player","PublishedOn":"2018-01-09T18:42:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Adam Fisher. Adam is the founder of Octane Software, focused on the creation of consumer Internet products. You can find Adam on Twitter at @adamgfisher and on Github at...","Href":"https://blog.xamarin.com/delivering-rich-media-experiences-xamarin-forms-video-player/","RawContent":null},{"Title":"Colonial Life Drives Field Sales Productivity with .NET, Mobile, and DevOps","PublishedOn":"2018-01-05T19:59:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET community is millions of developers strong, with people around the world turning ideas into apps across web, mobile, desktop, and the newest connected device platforms. Colonial Life’s...","Href":"https://blog.xamarin.com/colonial-life-drives-field-sales-productivity-net-mobile-devops/","RawContent":null},{"Title":"CoreML Programming with Xamarin.Mac and F#","PublishedOn":"2018-01-04T18:08:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Xamarin technologies are most commonly used to develop mobile applications, Xamarin.Mac makes it easy to use your preferred .NET language to develop desktop Mac apps. There are many C#...","Href":"https://blog.xamarin.com/coreml-programming-xamarin-mac-f/","RawContent":null},{"Title":"Xamarin Developer Events This January","PublishedOn":"2018-01-03T19:10:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s only the beginning of the year, but there are already many opportunities to get out and start building on your mobile app development education! Network with local user groups to learn...","Href":"https://blog.xamarin.com/xamarin-developer-events-january/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7119175045","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:56:13","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1186","RelatedDescription":"Closed issue \"MonoTests.System.Reflection.Emit.SaveTest.Save test fails in Release configuration with BCL linking on\" (#1186) at xamarin/xamarin-android","RelatedBody":"A test from the Mono BCL test suite ([MonoTests.System.Reflection.Emit.SaveTest.Save](https://github.com/mono/mono/blob/master/mcs/class/corlib/Test/System.Reflection.Emit/SaveTest.cs#L321)) fails when the tests are built in Release mode with linking set to SdkOnly.\r\nIt seems that the linker somehow changes the order of interfaces in emitted code since turning BCL linking off makes the test work again. The test also works fine in Debug configuration (with the linker off)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Comment out [this line](https://github.com/xamarin/xamarin-android/blob/master/tests/BCL-Tests/Xamarin.Android.Bcl-Tests/nunit-excluded-tests.txt#L7)\r\n2. Run `make CONFIGURATION=Release run-apk-tests` from the top Xamarin.Android dir\r\n3. Wait patiently\r\n4. Find the failure in the NUnit tests result file (`TestResult-Xamarin.Android.Bcl_Tests.nunit-Release.xml` in the top Xamarin.Android directory)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nThe test should run fine with BCL linking on\r\n\r\n### Actual Behavior\r\nThe test fails when executed with BCL linking on\r\n\r\n### Version Information\r\nXamarin.Android/master (`c4e81655ac22b06806e732e9dd0bc729e8d2c1d7`)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Test failure\r\n```\r\nMESSAGE:\r\n  Expected: <iface1>\r\n  But was:  <System.IComparable>\r\n\r\n  +++++++++++++++++++\r\n  STACK TRACE:\r\n  at MonoTests.System.Reflection.Emit.SaveTest.CheckAssembly (System.Reflection.Assembly a) [0x000a0] in <1e30aff9165c427db5bedc42c5906861>:0 \r\n  at MonoTests.System.Reflection.Emit.SaveTest.Save () [0x00b6d] in <1e30aff9165c427db5bedc42c5906861>:0 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <0a3e31ed05774b07957e0b91c5cab789>:0\r\n```\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7119174224","Type":"PullRequestEvent","CreatedAt":"2018-01-18T19:56:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1204","RelatedDescription":"Merged pull request \"Bump mono to fix #1186\" (#1204) at xamarin/xamarin-android","RelatedBody":"And enable the SaveTest again for Release configuration."},{"Id":"7119105188","Type":"PullRequestEvent","CreatedAt":"2018-01-18T19:41:38","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1208","RelatedDescription":"Opened pull request \"[Tests] Make the HttpClientTest.TestEscapedURI test ignore timeout\" (#1208) at xamarin/xamarin-android","RelatedBody":"The server used in the test sometimes cannot be reached, there's no need to\r\ntreat it as a failure. Ignore the timeout with Assert.Ignore instead."},{"Id":"7119087177","Type":"PullRequestEvent","CreatedAt":"2018-01-18T19:37:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1195","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tools] Add $(AndroidSdkPlatformToolsVersion)\" (#1195) at xamarin/xamarin-android","RelatedBody":"Fixes #1165\r\n\r\nWe need to provide default values for `platform-tools` and\r\n`tools` so that our SDK Manager can correctly download\r\nthe required versions."},{"Id":"7119087169","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:37:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1165","RelatedDescription":"Closed issue \"Add $(AndroidSdkPlatformToolsVersion) MSBuild property, update $(AndroidSdkBuildToolsVersion)\" (#1165) at xamarin/xamarin-android","RelatedBody":"Add `$(AndroidSdkPlatformToolsVersion)` MSBuild property, update `$(AndroidSdkBuildToolsVersion)` to be consistent."},{"Id":"7118423873","Type":"PullRequestEvent","CreatedAt":"2018-01-18T17:19:47","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1207","RelatedDescription":"Opened pull request \"Bump to xamarin-android-api-compatibility/d15-6/9d71e200\" (#1207) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1089\r\nContext: https://github.com/xamarin/xamarin-android/pull/1078\r\nContext: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/823/\r\n\r\nCommit 8ff139f9 [broke][0] the [build][1], in a minor way:\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/824/console\r\n[1]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/824/\r\n\r\n\t# reading extras from: inter-api-extra-v2.3-v4.0.3.txt\r\n\tmono --debug /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/bin/BuildDebug/mono-api-html.exe \"inter-apis/v2.3/Mono.Android.xml\" \"inter-apis/v4.0.3/Mono.Android.xml\" --ignore-changes-parameter-names --ignore-changes-virtual --ignore-changes-property-setters --ignore-nonbreaking\r\n\t<h1>### API BREAK BETWEEN v2.3 and v4.0.3</h1>\r\n\t...\r\n\t<h2>Namespace Android.Text</h2>\r\n\t<!-- start type ClipboardManager --> <div>\r\n\t<h3>Type Changed: Android.Text.ClipboardManager</h3>\r\n\t<p>Modified properties:</p>\r\n\t<pre>\r\n\t<div data-is-breaking>\tpublic <span class='added added-breaking-inline'>abstract</span> bool HasText { get; }\r\n\t</div><div data-is-breaking>\tpublic <span class='added added-breaking-inline'>abstract</span> Java.Lang.ICharSequence TextFormatted { get; set; }\r\n\t</div></pre>\r\n\t...\r\n\r\nThese are \"acceptable\" API breakage for now, previously not reported\r\n[because the test was broken][6dfb]. The test was fixed on\r\nxamarin-android-api-compatibility/master, but we haven't been able to\r\nmerge to that commit yet (PR #1078).\r\n\r\n[6dfb]: https://github.com/xamarin/xamarin-android-api-compatibility/commit/6dfba92e571a7c03e2f925fd7aea1bfdb9d3f753\r\n\r\nUnfortunately, 8ff139f9 included a bump to\r\nxamarin-android-api-compatibility/master, thus introducing the\r\n\"UNSTABLE\" breakage that PR #1078 encountered.\r\n\r\nFor now -- until we can properly fix things -- bump to\r\nxamarin-android-api-compatibility/d15-6, which *lacks* the test fixes\r\non master, and thus will allow the API compatibility checks to pass."},{"Id":"7117650519","Type":"PullRequestEvent","CreatedAt":"2018-01-18T15:10:07","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1206","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Add Installer target Import.\" (#1206) at xamarin/xamarin-android","RelatedBody":"We need to add an additional conditional Import for the\r\nInstaller target. This will allow users to use the following\r\ntargets.\r\n\r\n\t`GetAndroidDependencies`\r\n\t`InstallAndroidDependencies`"},{"Id":"7117450588","Type":"IssuesEvent","CreatedAt":"2018-01-18T14:36:38","Actor":"Kelv","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1205","RelatedDescription":"Opened issue \"Cannot load Angular inside WebView Xamarin Forms - Android\" (#1205) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. === Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.3.3 (build 5)\r\nInstallation UUID: 46bb1ac3-9308-4466-8260-040c43d1551f\r\nRuntime:\r\n\tMono 5.4.1.7 (2017-06/e66d9abbb27) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 504010007\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.0/Sdks\r\nSDK Version: 2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.0\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.1 (13532)\r\nBuild 9B55\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.6.1.3 (Visual Studio Community)\r\nHash: f70a1348\r\nBranch: xcode9.2\r\nBuild date: 2017-12-18 14:47:16-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.1.3.0 (Visual Studio Community)\r\nAndroid SDK: /Users/kelvin a rodriguez/Library/Android/sdk\r\n\tSupported Android versions:\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.1\r\nSDK Build Tools Version: 27.0.0\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.3.2\r\nHash: 461f09a\r\nBranch: 1.3-release\r\nBuild date: Tue, 03 Oct 2017 18:26:57 GMT\r\nClient compatibility: 1\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.0.0.215 (Visual Studio Community)\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 703030005\r\nGit revision: b1c2982e201e71ef758866c9ade05f253a8c6f47\r\nBuild date: 2017-12-21 11:04:40-05\r\nXamarin addins: f397ddfbacfb39e60c9cc8d9e410f73faf8c2cbc\r\nBuild lane: monodevelop-lion-d15-5\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.2\r\nDarwin 17.3.0 Darwin Kernel Version 17.3.0\r\n    Thu Nov  9 18:09:22 PST 2017\r\n    root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n2. -->\r\n\r\n### Log File\r\n[AndroidProtocolHandler] Unable to open asset URL: file:///android_asset/%7B%7BsrcImage(currentImage.path)%7D%7D\r\n\r\nCannot use Angular inside WebView, in previous version it was possible\r\n\r\n<!--\r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7117312146","Type":"PullRequestEvent","CreatedAt":"2018-01-18T14:12:18","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1204","RelatedDescription":"Opened pull request \"Bump mono to fix #1186\" (#1204) at xamarin/xamarin-android","RelatedBody":"And enable the SaveTest again for Release configuration."},{"Id":"7115132903","Type":"PullRequestEvent","CreatedAt":"2018-01-18T05:04:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1203","RelatedDescription":"Merged pull request \"Bump to mono/2017-10/267896c4\" (#1203) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/issues/6383\r\nContext: https://github.com/mono/mono/issues/6414"},{"Id":"7114843026","Type":"PullRequestEvent","CreatedAt":"2018-01-18T03:05:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1203","RelatedDescription":"Opened pull request \"Bump to mono/2017-10/267896c4\" (#1203) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/issues/6383\r\nContext: https://github.com/mono/mono/issues/6414"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7120047842","Type":"PullRequestEvent","CreatedAt":"2018-01-18T23:09:38","Actor":"erdennis13","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1616","RelatedDescription":"Opened pull request \"Fix iOS Picker InputAccessoryView visibility in landscape\" (#1616) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nDescribe your changes here.\r\n\r\n### Bugs Fixed ###\r\n\r\nThis fixes Issue #1614 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nThe toolbar item (Done) will be visible while using a Picker, DatePicker or TimePicker on iOS 11 in landscape mode.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7119869088","Type":"IssuesEvent","CreatedAt":"2018-01-18T22:26:34","Actor":"j4m3z0r","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1615","RelatedDescription":"Opened issue \"Add NSCollectionView Equivalent\" (#1615) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nI think essentially all platforms now provide some equivalent of the NSCollectionView -- a grid of items (think photo thumbnails), and this is a pretty important control for all manner of apps. Charles Petzold's Xamarin.Forms book outlines a solution in [Chapter 26](https://xamarin.azureedge.net/developer/xamarin-forms-book/XamarinFormsBook-Ch26-Apr2016.pdf) using a custom layout called the WrapLayout, however this does not scale: apps really only remain responsive up to a couple hundred items at most.\r\n\r\nPer above, I believe essentially all of XF's targets now have some kind of system for rendering these large grids of cells in a performant manner -- typically by re-using cells and only drawing the cells that are visible. XF should provide an interface to these controls so that XF applications can have fast, large grids too. I believe something similar was done for ListViews.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create an XF application using the WrapLayout class described in the XF book.\r\n2. Load up 10,000 items into the WrapLayout\r\n3. Observe that it doesn't work (freeze, crash, etc, depending on your luck)\r\n\r\n### Expected Behavior\r\n\r\nGrids of items should be able to contain arbitrarily many items and should remain performant.\r\n\r\n### Actual Behavior\r\n\r\nThe solution recommended in the XF book does not work after more than a few hundred items.\r\n"},{"Id":"7119853403","Type":"IssuesEvent","CreatedAt":"2018-01-18T22:22:56","Actor":"erdennis13","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1614","RelatedDescription":"Opened issue \"iOS Picker, DatePicker & TimePicker hide InputAccessoryView when changing from Portrait to Landscape\" (#1614) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\niOS 11 introduced a change to the way the InputView and InputAccessoryView content is displayed. When a Toolbar is used as a InputAccessoryView, the Toolbar (and button) gets hidden in landscape mode. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a Picker, DatePicker or TimePicker to a ContentPage\r\n2. Click the Picker and wait for the keyboard to become visible.\r\n3. Change device orientation from Portrait to landscape. The Picker will hide the Toolbar and Done button.\r\n\r\n### Expected Behavior\r\n\r\nThe Toolbar should be visible above the picker for all device orientations.\r\n\r\n### Actual Behavior\r\n\r\nThe Toolbar is hidden behind the picker in landscape mode.\r\n\r\n### Basic Information\r\n\r\n- Last known good version: iOS 10\r\n- Platform Target Frameworks:\r\n  - iOS:  11\r\n- Nuget Packages: Xamarin.Forms 2.5.0.122203\r\n\r\n### Screenshots\r\n\r\n<img width=\"1118\" alt=\"screen shot 2018-01-18 at 4 11 47 pm\" src=\"https://user-images.githubusercontent.com/8703324/35124061-5238f1ce-fc6a-11e7-9e1c-0f814413baad.png\">\r\n\r\n### Reproduction Link\r\n\r\n[inputview.zip](https://github.com/xamarin/Xamarin.Forms/files/1644641/inputview.zip)\r\n"},{"Id":"7119816163","Type":"IssuesEvent","CreatedAt":"2018-01-18T22:14:16","Actor":"j4m3z0r","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1613","RelatedDescription":"Opened issue \"OpenGLView does not expose raw mouse / touch events\" (#1613) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nWhen building apps that use an OpenGLView to display 3D graphics, etc, the code producing those 3D graphics will typically have its own system for handling user interactions, which often won't map neatly to GestureRecognizers.\r\n\r\nPlease provide a way to get access to the raw mouse / touch events, so that these can be fed into the existing event handling code on 3D rendering engines.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Build an XF application with an OpenGLView, likely atop an existing game engine that already has touch / mouse handling\r\n2. Try to add a system to respond to user input by converting GestureRecognizer events into an approximation of the touch events that would have generated them\r\n3. Lament that there must be a better way\r\n\r\n### Expected Behavior\r\n\r\nFrictionless integration of rendering engine with existing touch / mouse handling code into an XF application.\r\n\r\n### Actual Behavior\r\n\r\nNo MouseDown, MouseUp, MouseDragged, etc, events on the OpenGLView."},{"Id":"7119759036","Type":"IssuesEvent","CreatedAt":"2018-01-18T22:01:35","Actor":"j4m3z0r","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1612","RelatedDescription":"Opened issue \"No way to do hardware accelerated graphics on UWP\" (#1612) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nAt present there is no way to do OpenGL or DirectX on Xamarin.Forms UWP applications, though there is on the various mobile platforms, and it looks like Xamarin.Forms.Mac has a WIP OpenGLView.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Try to create a Xamarin.Forms UWP application with hardware accelerated 3D graphics\r\n2. Fail.\r\n\r\n### Expected Behavior\r\n\r\nMy understanding is that UWP does not have native OpenGL, so I acknowledge that there is some subtlety as to the correct way to proceed. However, I would find either of the following to be something that I can work with:\r\n\r\n* Implement OpenGLView on UWP, using Microsoft's ANGLE port for UWP: https://github.com/Microsoft/angle -- this code is already on nuget [here](https://www.nuget.org/packages/ANGLE.WindowsStore). The benefit of this is that it would allow deployment to UWP systems without having to re-write the rendering layer. ANGLE powers WebGL on Windows platforms and has proven itself fairly robust there, so I don't foresee any substantial issues with compatibility to the GL API.\r\n* Implement a \"Direct3dView\" or similar for UWP only, which would allow 3D rendering using [SharpDX](http://sharpdx.org/). Having to maintain a separate rendering layer for UWP isn't ideal, but certainly a better option than just foregoing UWP altogether.\r\n\r\nI think for most purposes, it would suffice for this to provide the functionality of GLES3, or its DirectX equivalent. Given XF's positioning as a cross-platform solution, it's probably not necessary to support full desktop OpenGL -- the ES profiles will suffice.\r\n\r\n### Actual Behavior\r\n\r\nNo 3D graphics control is exposed by Xamarin.Forms.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: all\r\n- Last known good version: none.\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7119714441","Type":"IssuesEvent","CreatedAt":"2018-01-18T21:51:56","Actor":"jgold6","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1611","RelatedDescription":"Opened issue \"[iOS] When dynamically creating a container and putting the current page content into a child of the new container, current page controls become unresponive\" (#1611) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nFrom person who reported the issue to me:\r\n\"I was trying to dynamically create a grid and add the current content on the page inside the just created grid and then update the page content to be the grid.\r\nVisually it works fine, but if I try to interact with the controls, none of them are responsive to any click/touch\r\n\r\nHere is a sample code of what I am doing:\r\n\r\n    var grid = new Grid\r\n    {\r\n          RowSpacing = 0,\r\n          RowDefinitions =\r\n        {\r\n               new RowDefinition { Height= new GridLength (1, GridUnitType.Star) },\r\n               new RowDefinition { Height = new GridLength (1, GridUnitType.Auto) }\r\n        }\r\n    };\r\n \r\n     this.pageGridContent.Children.Add(this.Content, 0, 0);\r\n     this.pageGridContent.Children.Add(anotherControl, 0, 1);\r\n \r\n     this.Content = grid;\"\r\n\r\n## My findings\r\n\r\nI created a test project to reproduce the issue and I found that:\r\n1. This issue occurs if using a Grid or a StackLayout for the new container.\r\n2. Issue occurs only on iOS (does not occur on Android, and I did not test UWP)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open the attached test solution. \r\n2. Run on an iOS simulator (tested on iPhone 8 simulator running iOS 11.2)\r\n3. Click on the \"Put me in a new container XAML\" button. Note the \"New Button 1\" button is added to the bottom.\r\n4. Click on the \"Put me in a new container XAML\" button again.\r\n\r\n### Expected Behavior\r\nA \"New Button 2\" button should be added to the bottom. \r\n\r\n### Actual Behavior\r\nNothing happens. Click event handler is not fired.\r\n\r\n##Notes\r\nThese is some commenting in the test project that shows some things I tried to figure out what was going on. e.g. I tried with a stacklayout as well as a grid and got the same results. I also tried to see what happened if I did not re-use the initial StackLayout but created a new, identical (except for the button text) layout to add as a child to the new grid. The issue did not occur when doing this. To test, comment out line 54 in **TestGridInGridPage.xaml.cs\" and uncomment lines 57-60 and 72. \r\n\r\nAlso worth noting is that the latest newly created StackLayout with the \"New Button #\" always works, i.e. its click event handler is always fired... but any buttons that were in this.Content do not work and do not fire their click event handlers (in the sample all buttons fire the same event handler that creates the new grid and adds this.Content and the new StackLayout to the grid). \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122203\r\n- Last known good version: None\r\n- IDE: Visual Studio for Mac\r\n- Platform Target Frameworks: \r\n  - iOS:  11.2\r\n  - Android: 7.1\r\n  - UWP:  n/a\r\n- Android Support Library Version: 25.4.0.2\r\n- Nuget Packages: Nothing other than what X.Forms adds as dependencies.\r\n- Affected Devices: Tested on iOS Simulator iPhone 8 iOS 11.2\r\n[TestGridInGrid.zip](https://github.com/xamarin/Xamarin.Forms/files/1644578/TestGridInGrid.zip)\r\n\r\n\r\n\r\n\r\n"},{"Id":"7119679387","Type":"IssuesEvent","CreatedAt":"2018-01-18T21:44:02","Actor":"j4m3z0r","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1610","RelatedDescription":"Opened issue \"Picker only opens when clicking on the arrow, not anywhere else [Mac]\" (#1610) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nI have added a Picker to my Xamarin.Forms Mac application, and the only way to get it to open is to click on the small blue square at the right end of it. Clicking on the white region that contains the current selection will not open the Picker. I also can't see a method to have it open programmatically, so I can't solve this by triggering that method on a GestureRecognizer\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin.Forms Mac application with a Picker\r\n2. Click the white part of the picker where the text goes (not the blue box with the arrow)\r\n3. Observe that the picker does not drop down to reveal its contents.\r\n\r\n### Expected Behavior\r\n\r\nClicking anywhere on the picker should open it, so that it behaves the same as other Mac applications (the \"Rotation\" option in the display preferences on a Mac is a good example).\r\n\r\n### Actual Behavior\r\n\r\nClicking anywhere but the blue box does nothing.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms.2.5.0.121934\r\n- Last known good version: n/a\r\n- IDE: Rider\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Mac: Xamarin.Mac == 4.0.0.214.\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7119123827","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:45:21","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1597","RelatedDescription":"Closed issue \"[Proposal] Allow us to see UI test results when a PR is pushed\" (#1597) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nRunning UI tests on different devices, platforms, and API levels before submitting a PR is not possible for most of us, so we can't always know what existing tests we're breaking if any, and we rely on the team members telling us which tests are broken.\r\n\r\n![capture](https://user-images.githubusercontent.com/16855542/35061674-91e0cf10-fb87-11e7-8481-bd38acbb7aad.PNG)\r\n\r\nClicking on 'Details' shows a 401 page. Can the community have read access to UI test results? I'm not sure what information is available on the Details pages, but I assumed they would show the result for each test run.\r\n"},{"Id":"7119040913","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:28:04","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1545","RelatedDescription":"Closed issue \"iOS project PropertyGroup element references automatically removed\" (#1545) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nMSBuild PropertyGroup elements cannot be referenced within the `<AssemblyName>` element of a Xamarin Forms iOS .csproj file as the '$', '(' and ')' are automatically removed.\r\n\r\nThere appears to be some special processing that removes illegal characters from the assembly name when loading Xamarin Forms iOS projects. The merits of this are mentioned in a similar issue here: https://bugzilla.xamarin.com/show_bug.cgi?id=32414\r\n\r\nCan this illegal character processing be removed? Or, can this processing be postponed until after referenced PropertyGroup elements have been resolved within the `<AssemblyName>` element?\r\n\r\n### Steps to Reproduce\r\n\r\n1. Edit a Xamarin Forms iOS .csproj file by hand to reference a PropertyGroup element from within the `<AssemblyName>` element e.g. `<AssemblyName>MyProject$(Configuration)</AssemblyName>`\r\n2. Load a solution that contains this project\r\n\r\n### Expected Behavior\r\n1. The Xamarin Forms iOS .csproj file remains unchanged\r\n2. 'iOS Project -> Properties -> Application -> Assembly name' reflects the configuration that was loaded. In this case, for a Debug configuration the Assembly name should read 'MyProjectDebug' \r\n### Actual Behavior\r\n1. The Xamarin Forms iOS csproj file has the `<AssemblyName>` element updated to remove special characters e.g.  `<AssemblyName>MyProjectConfiguration</AssemblyName>`\r\n2. In the project properties, for a Debug configuration the Assembly name reads 'MyProjectConfiguration'\r\n\r\n### Basic Information\r\nXamarin.Forms   2.5.0.122203\r\n\r\nXamarin   4.8.0.757\r\nXamarin Designer   4.8.188\r\nXamarin.Android SDK   8.1.3.0\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2\r\n"},{"Id":"7119024612","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:24:41","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1606","RelatedDescription":"Closed issue \"WCF service integration does not work with Visual Studio 2017 15.5.4\" (#1606) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen you create a new Xamarin Project in Visual Studio 2017 using .Net Standard libraries, the access to a WCF web service does no longer work. Even the example project by Xamarin does produce the same issue.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download the Xamarin example: https://developer.xamarin.com/guides/xamarin-forms/cloud-services/consuming/wcf/\r\n2. Build with Visual Studio 2017 15.5.4\r\n3. Run Android App on a real device\r\n\r\n### Expected Behavior\r\nMethod call to web service works (method: SoapService.RefreshDataAsync)\r\n\r\n### Actual Behavior\r\nException: The message with Action '' cannot be processed at the receiver, due to a ContractFilter mismatch at the EndpointDispatcher. This may be because of either a contract mismatch (mismatched Actions between sender and receiver) or a binding/security mismatch between the sender and the receiver.  Check that sender and receiver have the same contract and the same binding (including security requirements, e.g. Message, Transport, None).\r\n\r\n### Basic Information\r\n\r\n- IDE: Visual Studio 2017 15.5.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  Not tested\r\n  - Android: Android SDK 7.1\r\n  - UWP:  Not tested\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Affected Devices: Samsung Galaxy Tab A (2016)\r\n\r\n"},{"Id":"7118990521","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:17:59","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1605","RelatedDescription":"Closed issue \"Failed to clone Xamarin.Forms repository\" (#1605) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThe submodule 'Xamarin.Forms.Build' cannot be cloned.\r\n\r\n### Steps to Reproduce\r\n\r\n1. git clone --recursive https://github.com/xamarin/Xamarin.Forms.git\r\n\r\n### Expected Behavior\r\n\r\nShould clone without errors.\r\n\r\n### Actual Behavior\r\n\r\nThe submodule repository is not found.\r\n\r\n```\r\nSubmodule 'Xamarin.Forms.Build' (https://github.com/xamarin/Xamarin.Forms.Build) registered for path 'Xamarin.Forms.Build'\r\nCloning into './github/xamarin/Xamarin.Forms/Xamarin.Forms.Build'...\r\nremote: Repository not found.\r\nfatal: repository 'https://github.com/xamarin/Xamarin.Forms.Build/' not found\r\nfatal: clone of 'https://github.com/xamarin/Xamarin.Forms.Build' into submodule path './github/xamarin/Xamarin.Forms/Xamarin.Forms.Build' failed\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7120639940","Type":"PullRequestEvent","CreatedAt":"2018-01-19T02:24:02","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3266","RelatedDescription":"Opened pull request \"[foundation] Add NSBundle.GetLocalizedString returning an NSString. Fixes #41292\" (#3266) at xamarin/xamarin-macios","RelatedBody":"The original, now obsoleted, `LocalizedString` API returned a .net\n`string` which does not work in most cases.\n\nDifferent versions of iOS seems to return different (public or internal)\nsubclasses of `NSString` that are understood by other API (like NSString\n`localizedStringWithFormat:`) for further customization.\n\nOur logic to convert NSString to string is correct but it cannot\nrecreate the custom, required subclass to continue the localization.\n\nSo the new API return an `NSString` publicly (which is actually a\nsubclass) that can do the required job.\n\nAdding a test in monotouch-test is presently blocked by #3265 [2]\n\n[1] https://bugzilla.xamarin.com/show_bug.cgi?id=41292\n[2] https://github.com/xamarin/xamarin-macios/issues/3265"},{"Id":"7120443178","Type":"IssuesEvent","CreatedAt":"2018-01-19T01:14:30","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3265","RelatedDescription":"Opened issue \"EntryPointNotFoundException: xamarin_localized_string_format_1\" (#3265) at xamarin/xamarin-macios","RelatedBody":"While looking at https://bugzilla.xamarin.com/show_bug.cgi?id=41292 it became apparent that our default simlauncher is missing some symbols (or the native linker removes them).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Add `NSString.LocalizedFormat(\"%@\", 1)` to any template;\r\n2. Run it on a simulator (with default)\r\n\r\n### Expected Behavior\r\n\r\n`1`\r\n\r\n### Actual Behavior\r\n\r\n```\r\nUnhandled Exception:\r\nSystem.EntryPointNotFoundException: xamarin_localized_string_format_1\r\n  at (wrapper managed-to-native) Foundation.NSString.xamarin_localized_string_format_1(intptr,intptr)\r\n  at Foundation.NSString.LocalizedFormat (Foundation.NSString format, Foundation.NSObject[] args) [0x00048] in /Users/poupou/git/master/xamarin-macios/src/Foundation/NSString.cs:246 \r\n  at Foundation.NSString.LocalizedFormat (Foundation.NSString format, System.Object[] args) [0x00028] in /Users/poupou/git/master/xamarin-macios/src/Foundation/NSString.cs:237 \r\n  at Foundation.NSString.LocalizedFormat (System.String format, System.Object[] args) [0x00007] in /Users/poupou/git/master/xamarin-macios/src/Foundation/NSString.cs:227 \r\n```\r\n\r\n### Environment\r\n\r\nmaster\r\n\r\n### Workaround\r\n\r\nEither enable the managed linker (linksdk) or add the `--nofastsim` to the **Additional touch arguments**"},{"Id":"7120219886","Type":"PullRequestEvent","CreatedAt":"2018-01-18T23:59:40","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3264","RelatedDescription":"Opened pull request \"[xharness] No need to try to run (or even show) non-executable projects.\" (#3264) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7120207206","Type":"PullRequestEvent","CreatedAt":"2018-01-18T23:55:22","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3263","RelatedDescription":"Opened pull request \"[xharness] Adjust colors a bit.\" (#3263) at xamarin/xamarin-macios","RelatedBody":"When determining the color for a collection of tests, first check if the\nexecution result is identical for all tests in the collection, in which case\njust use the corresponding color for a single test."},{"Id":"7120203354","Type":"IssuesEvent","CreatedAt":"2018-01-18T23:54:08","Actor":"timrisi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3252","RelatedDescription":"Closed issue \"\"Re-open\" Could not AOT the assembly System.Runtime.CompilerServices.Unsafe.dll (MT3001)\" (#3252) at xamarin/xamarin-macios","RelatedBody":"I wasn't able to re-open the issue, so creating a new one and referencing it from here:\r\n#3199 "},{"Id":"7120201543","Type":"IssuesEvent","CreatedAt":"2018-01-18T23:53:32","Actor":"timrisi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3199","RelatedDescription":"Reopened issue \"Could not AOT the assembly System.Runtime.CompilerServices.Unsafe.dll (MT3001)\" (#3199) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new Cross-Platform Xamarin.Forms .NET Standard 2.0 project in Visual Studio (i used 2017 PC).\r\n2. Open this project in Visual Studio for Mac.\r\n3. Add NuGet Microsoft.EntityFrameworkCore.Sqlite to the iOS project.\r\n4. Add the following for example to AppDelegate.cs in the iOS project:\r\n   var temp = Microsoft.EntityFrameworkCore.PropertyAccessMod.Field;\r\n5. Try to run this on an iPhone (which I believe requires some config, e.g. bundle identifier etc.)\r\n\r\n### Expected Behavior\r\nApp starting on device showing the default MainPage.\r\n\r\n### Actual Behavior\r\nError:\r\n\r\nCould not AOT the assembly '/Users/masystem/Dev/TestProjects/TestReproduceError/TestReproduceError/TestReproduceError.iOS/obj/iPhone/Debug/device-builds/iphone9.3-11.1.2/mtouch-cache/Build/System.Runtime.CompilerServices.Unsafe.dll' (MT3001)\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\nVisual Studio on PC\r\n```\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.1\r\nVisualStudio.15.Release/15.5.1+27130.2003\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00370-20004-56726-AA880\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00370-20004-56726-AA880\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00370-20004-56726-AA880\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31125.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.2.9000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Data Lake Tools for Visual Studio   2.2.9000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.2.9000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.2.9000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   1.8\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.2.9000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nWebJobs Tools v1.0.0   15.0.31201.0\r\nWebJobs Tools v1.0.0\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27128.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.753 (6575bd113)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.183 (2577c82ea)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.0.24 (HEAD/9cfa7836b)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\nVisual Studio on Mac\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.3.3 (build 5)\r\nInstallation UUID: 53fae928-0326-4001-840c-b7d7eff46e01\r\nRuntime:\r\nMono 5.4.1.7 (2017-06/e66d9abbb27) (64-bit)\r\nGTK+ 2.24.23 (Raleigh theme)\r\n\r\nPackage version: 504010007\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.0/Sdks\r\nSDK Version: 2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.0\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.1.3.0 (Visual Studio Community)\r\nAndroid SDK: /Users/masystem/Library/Developer/Xamarin/android-sdk-macosx\r\nSupported Android versions:\r\n7.1 (API level 25)\r\n8.0 (API level 26)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 25.0.5\r\nSDK Build Tools Version: 25.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.3.2\r\nHash: 461f09a\r\nBranch: 1.3-release\r\nBuild date: Tue, 03 Oct 2017 18:26:57 GMT\r\nClient compatibility: 1\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.6.1.3 (Visual Studio Community)\r\nHash: f70a1348\r\nBranch: xcode9.2\r\nBuild date: 2017-12-18 14:47:16-0500\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.0.0.215 (Visual Studio Community)\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 703030005\r\nGit revision: b1c2982e201e71ef758866c9ade05f253a8c6f47\r\nBuild date: 2017-12-21 11:04:40-05\r\nXamarin addins: f397ddfbacfb39e60c9cc8d9e410f73faf8c2cbc\r\nBuild lane: monodevelop-lion-d15-5\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.12.6\r\nDarwin 16.7.0 Darwin Kernel Version 16.7.0\r\n    Thu Jun 15 17:36:27 PDT 2017\r\n    root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n[build.txt](https://github.com/xamarin/xamarin-macios/files/1622512/build.txt)\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7119795974","Type":"PullRequestEvent","CreatedAt":"2018-01-18T22:09:46","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3261","RelatedDescription":"Merged pull request \"[msbuild] Fixed embedding of provisioning profiles for tvOS\" (#3261) at xamarin/xamarin-macios","RelatedBody":"Instead of hard-coding the platform as iOS for the EmbedMobileProvision\r\ntask, use the SdkPlatform to determine the appropriate platform to use\r\nin the MobileProvisionIndex query.\r\n\r\nThis is a follow-up fix with near identical changes to the\r\nCompileEntitlements fix for tvOS."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"954066862928793600","CreatedAt":"2018-01-18T19:04:00+00:00","UserScreenname":"xamarinhq","Text":"Check out the latest and greatest from @TheXamarinShow on getting started with iOS development in C# with #Xamarin: https://t.co/OpnYrTJhnw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"954040437962104832","CreatedAt":"2018-01-18T17:19:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/hJ3E8pPggV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":6,"RawContent":null},{"Id":"953670252793090049","CreatedAt":"2018-01-17T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Add sound to your #XamarinForms app with the open-source SimpleAudioPlayer #NuGet plugin: https://t.co/r8NSFRpl33 https://t.co/BbdcfvhwCa","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":32,"RawContent":null},{"Id":"953354972019732481","CreatedAt":"2018-01-16T19:55:12+00:00","UserScreenname":"xamarinhq","Text":"The #CSharp developer’s guide to shipping better apps with #VSAppCenter: https://t.co/jU0cnONnM8 https://t.co/yTZCnF9Yko","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":122,"FavoriteCount":65,"RawContent":null},{"Id":"953306603851218944","CreatedAt":"2018-01-16T16:43:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to make your #XamarinForms apps adaptive based on screen size, device type, and orientation: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":26,"RawContent":null},{"Id":"952935662407348230","CreatedAt":"2018-01-15T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use new project templates in #VisualStudio 2017 that enable you to use #dotNET Standard as a code shar… https://t.co/nRyxpQLx5D","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":25,"RawContent":null},{"Id":"952587115417821191","CreatedAt":"2018-01-14T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/WfBaPE3aMD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":27,"RawContent":null},{"Id":"952220954310127617","CreatedAt":"2018-01-13T16:49:01+00:00","UserScreenname":"xamarinhq","Text":"Build a simple #XamarinForms chat app that leverages and connects to an https://t.co/y9erV6ivVL Core #WebSocket:… https://t.co/olv2ycerlY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":182,"FavoriteCount":81,"RawContent":null},{"Id":"951923977278164992","CreatedAt":"2018-01-12T21:08:56+00:00","UserScreenname":"xamarinhq","Text":"Start your weekend on a high note with this week's episode of the @XamarinPodcast, covering Android 8.1, the new… https://t.co/nyDaQnMQOM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"951862087931789312","CreatedAt":"2018-01-12T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with Android Oreo Notification Channels: https://t.co/1XmtfYAaLv https://t.co/Drj1AHQYPg","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":12,"RawContent":null},{"Id":"951544245466423296","CreatedAt":"2018-01-11T20:00:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the exciting new features in Android Oreo 8.1 with updated support in #Xamarin.Android:… https://t.co/7RaFvwrg4V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":19,"RawContent":null},{"Id":"951505598268563456","CreatedAt":"2018-01-11T17:26:27+00:00","UserScreenname":"xamarinhq","Text":"Ready to start building better apps, faster? Learn how to get started with #VSAppCenter in our upcoming @XamarinU w… https://t.co/zkJdTZ6JTX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":31,"RawContent":null},{"Id":"951487872753946625","CreatedAt":"2018-01-11T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Simplified app signing with secure files in #VSTS: https://t.co/O5XooxuL40 https://t.co/TGqFOONLio","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":9,"RawContent":null},{"Id":"951172797337866240","CreatedAt":"2018-01-10T19:24:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio 2017 version 15.6 Preview is now available! Get started today: https://t.co/KG2CJ20AHH https://t.co/e5VR78hTLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":29,"RawContent":null},{"Id":"951133533246025738","CreatedAt":"2018-01-10T16:48:00+00:00","UserScreenname":"xamarinhq","Text":"Get the most out of Binding in #XamarinForms with this overview of the powerful features that you should be using: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":23,"RawContent":null},{"Id":"950803363595243521","CreatedAt":"2018-01-09T18:56:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to deliver rich media experiences with the #XamarinForms Video Player: https://t.co/ndy3yvDDNk https://t.co/V8JfqCj42s","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":40,"RawContent":null},{"Id":"950774673335341058","CreatedAt":"2018-01-09T17:02:01+00:00","UserScreenname":"xamarinhq","Text":"Add a little 3D to your #Xamarin iOS apps with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/G6BluXZvLM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"950410272363163649","CreatedAt":"2018-01-08T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add cross-platform charts to any app the easy way with #MicroCharts: https://t.co/VeqfS1vfIL https://t.co/k8IzINY3SW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":135,"FavoriteCount":65,"RawContent":null},{"Id":"950049897843105792","CreatedAt":"2018-01-07T17:02:01+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDfY3Ep https://t.co/6yNTVxdVbh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2018-01-19T05:30:38.0936119Z","RunDurationInMilliseconds":3789}