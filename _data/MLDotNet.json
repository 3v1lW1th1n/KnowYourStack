{"Data":{"GitHub":{"Issues":[{"Id":"412701209","IsPullRequest":true,"CreatedAt":"2019-02-21T01:05:47","Actor":"zeahmed","Number":"2675","RawContent":null,"Title":"Changed Ranker to Ranking in evaluation related files.","State":"open","Body":"This PR fixes https://github.com/dotnet/machinelearning/issues/2634\r\n\r\nSome of the EntryPoint names got changed. Reviewers' are requested to please verify consequences of changing EntryPoint names.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2675","RelatedDescription":"Open PR \"Changed Ranker to Ranking in evaluation related files.\" (#2675)"},{"Id":"412699653","IsPullRequest":true,"CreatedAt":"2019-02-21T00:58:27","Actor":"ganik","Number":"2674","RawContent":null,"Title":"Mark EntryPoints classes and APIs as internal","State":"open","Body":"fixes #2582 ","Url":"https://github.com/dotnet/machinelearning/pull/2674","RelatedDescription":"Open PR \"Mark EntryPoints classes and APIs as internal\" (#2674)"},{"Id":"412698292","IsPullRequest":true,"CreatedAt":"2019-02-21T00:52:43","Actor":"artidoro","Number":"2673","RawContent":null,"Title":"Explicit implementation for IsRowToRowMapper and GetRowToRowMapper","State":"open","Body":"Fixes #2540.\r\n\r\nAs explained in the issue I make the implementations of two methods of the`ITransformer` interface `IsRowToRowMapper` and `GetRowToRowMapper` explicit.\r\n\r\nIn a previous PR #2431 I made the implementation of `ICanSaveModel.Save` explicit. `Save` is part of `ITransformer` as it derives from `ICanSaveModel`. I found a few instances that have been changed since my last PR in the TimeSeries assembly and that still had a regular implementation for `Save. I made their implementation explicit in this PR as it is very similar in spirit.","Url":"https://github.com/dotnet/machinelearning/pull/2673","RelatedDescription":"Open PR \"Explicit implementation for IsRowToRowMapper and GetRowToRowMapper\" (#2673)"},{"Id":"412605340","IsPullRequest":true,"CreatedAt":"2019-02-20T23:29:21","Actor":"codemzs","Number":"2667","RawContent":null,"Title":"Microsoft.ML.Internal.Internallearn namespace requires certain internalization.","State":"closed","Body":"fixes #2590","Url":"https://github.com/dotnet/machinelearning/pull/2667","RelatedDescription":"Closed or merged PR \"Microsoft.ML.Internal.Internallearn namespace requires certain internalization.\" (#2667)"},{"Id":"412217403","IsPullRequest":true,"CreatedAt":"2019-02-20T23:14:41","Actor":"TomFinley","Number":"2649","RawContent":null,"Title":"Hide much of Microsoft.ML.Model namespace.","State":"closed","Body":"Fixes #2640. Per usual commits are logically ordered to reflect the natural order in which structures are internalized, etc.","Url":"https://github.com/dotnet/machinelearning/pull/2649","RelatedDescription":"Closed or merged PR \"Hide much of Microsoft.ML.Model namespace.\" (#2649)"},{"Id":"412670101","IsPullRequest":true,"CreatedAt":"2019-02-20T23:02:02","Actor":"zeahmed","Number":"2672","RawContent":null,"Title":"Internalization of TensorFlowUtils.cs and refactored TensorFlowCatalog.","State":"open","Body":"This PR fixes #2552 and also fixes #2572.\r\n\r\nThe discussion in these issues are taken as initial feedback to create this PR. The PR groups all the TensorFlow related operations into TensorFlowCatalog. This catalog now appears as a separate catalog in TransformsCatalog e.g. `ScoreTensorFlowModel` that appeared under `Transforms` catalog as\r\n\r\n``` csharp\r\nmlContext.Transforms.ScoreTensorFlowModel\r\n```\r\nnow appears under `TensorFlow` as \r\n``` csharp\r\nmlContext.Transforms.TensorFlow.ScoreTensorFlowModel\r\n```\r\nHow breaking is this change at this stage?\r\n\r\nAlso, the PR also include following methods in TensorFlow catalog. \r\n``` csharp\r\npublic static DataViewSchema GetModelSchema(this TransformsCatalog.TensorFlowTransforms catalog, string modelLocation)\r\n    => TensorFlowUtils.GetModelSchema(CatalogUtils.GetEnvironment(catalog), modelLocation);\r\n\r\npublic static IEnumerable<(string, string, DataViewType, string[])> GetModelNodes(this TransformsCatalog.TensorFlowTransforms catalog, string modelLocation)\r\n    => TensorFlowUtils.GetModelNodes(CatalogUtils.GetEnvironment(catalog), modelLocation);\r\n\r\npublic static TensorFlowModelInfo LoadTensorFlowModel(this TransformsCatalog.TensorFlowTransforms catalog, string modelLocation)\r\n    => TensorFlowUtils.LoadTensorFlowModel(CatalogUtils.GetEnvironment(catalog), modelLocation);\r\n```\r\nThere is also a suggestion to add these methods into `DataCatalog`. Feedback is requested in this regard.\r\n\r\nCC: @TomFinley, @yaeldekel, @rogancarr, @Ivanidzo4ka \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2672","RelatedDescription":"Open PR \"Internalization of TensorFlowUtils.cs and refactored TensorFlowCatalog.\" (#2672)"},{"Id":"412206123","IsPullRequest":true,"CreatedAt":"2019-02-20T21:40:10","Actor":"artidoro","Number":"2648","RawContent":null,"Title":"Microsoft.ML.Transforms assembly lockdown","State":"closed","Body":"Fixes #2282.\r\n\r\nThis is a pull request in the assembly public surface lockdown series.\r\nBesides internalization I also added some comments for public members. This is a relatively small PR as we have gone through the Transforms assembly many times already.\r\n\r\nI made the method `CheckInputColumn` in `OneToOneTransformerBase` BestFriend private protected instead of just protected.","Url":"https://github.com/dotnet/machinelearning/pull/2648","RelatedDescription":"Closed or merged PR \"Microsoft.ML.Transforms assembly lockdown\" (#2648)"},{"Id":"412640826","IsPullRequest":false,"CreatedAt":"2019-02-20T21:38:52","Actor":"codemzs","Number":"2671","RawContent":null,"Title":"TimeSeries should not be part of TransformsCatalog","State":"open","Body":"Currently time series estimators are part of TransformsCatalog but instead they should be in catalog that contains trainers.","Url":"https://github.com/dotnet/machinelearning/issues/2671","RelatedDescription":"Open issue \"TimeSeries should not be part of TransformsCatalog\" (#2671)"},{"Id":"412285447","IsPullRequest":true,"CreatedAt":"2019-02-20T21:38:00","Actor":"TomFinley","Number":"2651","RawContent":null,"Title":"Metadata utils internalization, migration of few useful methods","State":"closed","Body":"Fixes #2622 by limiting the public surface area of metadata/annotations conveniences to a few places.\r\n\r\nNote that that migrated methods are not exactly the same as the existing methods in the case of querying whether a key column type exists, since the existing methods predated the schema column type and therefore had some unnecessary parameters. Though I decided to expand it a bit so as to allow checks on whether other types of key values are present. Not sure if that's necessary or helpful.\r\n\r\nAlso internalized the rather innocuous but nonetheless probably unnecessary metadata builder extensions.\r\n\r\nCommits structured incrementally as usual for the small steps.","Url":"https://github.com/dotnet/machinelearning/pull/2651","RelatedDescription":"Closed or merged PR \"Metadata utils internalization, migration of few useful methods\" (#2651)"},{"Id":"412598310","IsPullRequest":true,"CreatedAt":"2019-02-20T21:37:15","Actor":"elbruno","Number":"2666","RawContent":null,"Title":"typo in comment: \"shoudl\" changed to \"should\"","State":"closed","Body":"typo in comment: shoudl changed to should\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2666","RelatedDescription":"Closed or merged PR \"typo in comment: \"shoudl\" changed to \"should\"\" (#2666)"},{"Id":"412622853","IsPullRequest":false,"CreatedAt":"2019-02-20T20:52:50","Actor":"eerhardt","Number":"2670","RawContent":null,"Title":"Add code analyzer support for CustomMapping","State":"open","Body":"See the conversation here:\r\n\r\nhttps://github.com/dotnet/machinelearning/pull/2569#discussion_r257425601\r\n\r\nIt is very easy to incorrectly write a custom mapping transformer. We should consider adding a code analyzer that ensures users do it correctly.\r\n\r\nOn the same lines, since we explicitly don't check any of our `Microsoft.ML` assemblies for custom mapping transformers, we should write an internal code analyzer that ensures we don't try to do that in our product.","Url":"https://github.com/dotnet/machinelearning/issues/2670","RelatedDescription":"Open issue \"Add code analyzer support for CustomMapping\" (#2670)"},{"Id":"412615656","IsPullRequest":false,"CreatedAt":"2019-02-20T20:33:42","Actor":"eerhardt","Number":"2669","RawContent":null,"Title":"Clean up Conversions TryParse code.","State":"open","Body":"Following the feedback [here](https://github.com/dotnet/machinelearning/pull/2611#issuecomment-465228468) and [here](https://github.com/dotnet/machinelearning/pull/2611#discussion_r258144599), we should do the following for the Conversions code:\r\n\r\n* Make `Convert` and `TryParse` consistently named. Either `Convert` and `TryConvert`. Or `Parse` and `TryParse`.\r\n* Clean up the `TryParse` methods so they call `GetValueOrDefault` and don't do unnecessary writes.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2669","RelatedDescription":"Open issue \"Clean up Conversions TryParse code.\" (#2669)"},{"Id":"412613469","IsPullRequest":false,"CreatedAt":"2019-02-20T20:27:51","Actor":"luisquintanilla","Number":"2668","RawContent":null,"Title":"Enable TextFeaturization Test","State":"open","Body":"Test was skipped in v0.10 but does not work in v0.10. \r\n\r\nIt passes on v0.11 preview. \r\n\r\nTest should be enabled. If it runs longer than expected, consider reducing data/sample size but test should not be skipped.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2668","RelatedDescription":"Open issue \"Enable TextFeaturization Test\" (#2668)"},{"Id":"412595432","IsPullRequest":true,"CreatedAt":"2019-02-20T19:41:04","Actor":"abgoswam","Number":"2665","RawContent":null,"Title":"[WIP] Fixing (weights , groupid) parameters in ML.NET Public API","State":"open","Body":"Fixes #2257, #2660 .  Also towards #2177 \r\n\r\nUsing ApiReview tool, went through the public surface area making the changes (as described in the issue)\r\n\r\n- This PR is for (weights , groupid) parameters. \r\n- The  (label, feature) parameter fixes will be in a follow up PR","Url":"https://github.com/dotnet/machinelearning/pull/2665","RelatedDescription":"Open PR \"[WIP] Fixing (weights , groupid) parameters in ML.NET Public API\" (#2665)"},{"Id":"412592475","IsPullRequest":true,"CreatedAt":"2019-02-20T19:33:48","Actor":"codemzs","Number":"2664","RawContent":null,"Title":"Upload code coverage files just once with test and prod flags.","State":"open","Body":"Just testing for now as per @sharwell 's recommendation.","Url":"https://github.com/dotnet/machinelearning/pull/2664","RelatedDescription":"Open PR \"Upload code coverage files just once with test and prod flags.\" (#2664)"},{"Id":"412530060","IsPullRequest":false,"CreatedAt":"2019-02-20T18:18:25","Actor":"darren-zdc","Number":"2656","RawContent":null,"Title":"Failed in using MultiClassClassification trainers other than StochasticDualCoordinateAscent with error \"System.ArgumentOutOfRangeException: 'Schema mismatch for label column '': expected Key<U4>, got R4\" ","State":"closed","Body":"### Issue\r\nI'm trying to use other MulticlassClassification trainers but never succeed. The only one succeeded is StochasticDualCoordinateAscent. If i change to LogisticRegression or NaiveBayes, there will always be a error \"System.ArgumentOutOfRangeException: 'Schema mismatch for label column '': expected Key<U4>, got R4\". \r\n\r\n`MultiData.cs`\r\n```\r\npublic class MultiData\r\n    {\r\n        [LoadColumn(0)]\r\n        public string DataValue { get; set; }\r\n        [LoadColumn(1)]\r\n        public float Label { get; set; }\r\n    }\r\n```\r\n\r\n`MultiDataPrediction.cs`\r\n```\r\npublic class MultiDataPrediction\r\n    {\r\n        public float[] Score { get; set; }\r\n    }\r\n```\r\n\r\n`BuildTrainEvaluateAndSaveModel() function`\r\n```\r\n            // STEP 1: Common data loading configuration\r\n            IDataView trainingDataView = mlContext.Data.ReadFromTextFile<MultiData>(TrainMultiDataPath1, hasHeader: false);\r\n            IDataView testDataView = mlContext.Data.ReadFromTextFile<MultiData>(TestMultiDataPath, hasHeader: false);\r\n\r\n            // STEP 2: Common data process configuration with pipeline data transformations          \r\n            var dataProcessPipeline = mlContext.Transforms.Text.FeaturizeText(outputColumnName: DefaultColumnNames.Features, inputColumnName: nameof(MultiData.DataValue))\r\n                .Append(mlContext.Transforms.Text.NormalizeText(\"NormalizedData\", nameof(MultiData.DataValue)))\r\n                .Append(mlContext.Transforms.Text.TokenizeCharacters(\"DataChars\", \"NormalizedData\"))\r\n                .Append(new NgramExtractingEstimator(mlContext, \"BagOfTrichar\", \"DataChars\",\r\n                            ngramLength: 3, weighting: NgramExtractingEstimator.WeightingCriteria.TfIdf));\r\n\r\n            // (OPTIONAL) Peek data (such as 2 records) in training DataView after applying the ProcessPipeline's transformations into \"Features\" \r\n            //ConsoleHelper.PeekDataViewInConsole<MultiData>(mlContext, trainingDataView, dataProcessPipeline, 2);\r\n            //ConsoleHelper.PeekVectorColumnDataInConsole(mlContext, DefaultColumnNames.Features, trainingDataView, dataProcessPipeline, 1);\r\n\r\n            // STEP 3: Set the training algorithm, then create and config the modelBuilder          \r\n            var trainer = mlContext.MulticlassClassification.Trainers.NaiveBayes(labelColumn: nameof(MultiData.Label), featureColumn: DefaultColumnNames.Features);\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n            // STEP 4: Train the model fitting to the DataSet\r\n            Console.WriteLine(\"=============== Training the model ===============\");\r\n            ITransformer trainedModel = trainingPipeline.Fit(trainingDataView);\r\n```\r\n\r\nRemark:\r\nEven I change the type of the MultiData.Label to UInt32 will not be working as well.\r\nWith Error, \"System.ArgumentOutOfRangeException: 'Schema mismatch for label column '': expected Key<U4>, got U4\"\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2656","RelatedDescription":"Closed issue \"Failed in using MultiClassClassification trainers other than StochasticDualCoordinateAscent with error \"System.ArgumentOutOfRangeException: 'Schema mismatch for label column '': expected Key<U4>, got R4\" \" (#2656)"},{"Id":"412557173","IsPullRequest":false,"CreatedAt":"2019-02-20T18:03:41","Actor":"Ivanidzo4ka","Number":"2663","RawContent":null,"Title":"SlotNames for TextLoader are lost","State":"open","Body":"Before refactoring if we had header in file and we read it we filled slot names metadata with values in that header for columns.\r\nThis way we can have mapping between field \"A\" in csv file and slot number 5 in feature vector.\r\n\r\nThis functionality is lost right now.\r\nMostly because we split functionality of schema construction which done without file and reading data from file with already defined schema.\r\nIf I have this header:\r\n`Label A B C D E F G ....`\r\nand this source code:\r\n```\r\n            var reader = mlContext.Data.CreateTextLoader(new Microsoft.ML.Data.TextLoader.Column[] { new Microsoft.ML.Data.TextLoader.Column(\"Label\", Microsoft.ML.Data.DataKind.R4, 0), new Microsoft.ML.Data.TextLoader.Column(\"Features\", Microsoft.ML.Data.DataKind.R4, 1, 100) },\r\n                hasHeader: true, separatorChar: ' ');\r\n            var data = reader.Read(\"data.txt\");\r\n```\r\nI expect Features column to have SlotNames metadata with values `A B C D E F G`, etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2663","RelatedDescription":"Open issue \"SlotNames for TextLoader are lost\" (#2663)"},{"Id":"412551487","IsPullRequest":false,"CreatedAt":"2019-02-20T17:49:20","Actor":"abgoswam","Number":"2662","RawContent":null,"Title":"Consistent ordering of  (feature, label, groupid, weight) parameters in ML.NET trainer estimators","State":"open","Body":"The public API of ML.NET should have a defined ordering for  \r\n- feature column name\r\n- label column name\r\n- weight column name\r\n- group id column name\r\n\r\nCurrently the trainer estimators in ML.NET  do not have a defined ordering for the above  parameters. We should address this as we finalize the API for V1.0\r\n\r\nHere is a proposal for **consistent** ordering of these parameters for the trainer estimators:\r\n\r\n1. unsupervised trainer estimators (e.g. KMeansPlusPlusTrainer) \r\n   (feature , weight)\r\n\r\n2. supervised trainer estimators: (e.g. LightGbmBinaryTrainer)\r\n   (label,  feature, weight)\r\n\r\n3. ranking trainer estimators: (e.g. LightGbmRankingTrainer)\r\n   (label, feature, groupid, weight)\r\n\r\nRelated to #2177, #2257, #2660\r\n\r\n@Ivanidzo4ka @sfilipi @rogancarr @TomFinley @glebuk \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2662","RelatedDescription":"Open issue \"Consistent ordering of  (feature, label, groupid, weight) parameters in ML.NET trainer estimators\" (#2662)"},{"Id":"412550745","IsPullRequest":true,"CreatedAt":"2019-02-20T17:47:24","Actor":"wschin","Number":"2661","RawContent":null,"Title":"[WIP] Internalize DataKind","State":"open","Body":"Fix #2583. In general, we don't want to see `DataKind` in any public area. Depending on the actual amount of works required, this PR might first address cases mentioned #2583 and then more PRs will be published later.\r\n\r\n- [x] TextLoader\r\n- [x] TypeConverting\r\n- [ ] Rest","Url":"https://github.com/dotnet/machinelearning/pull/2661","RelatedDescription":"Open PR \"[WIP] Internalize DataKind\" (#2661)"},{"Id":"412542449","IsPullRequest":false,"CreatedAt":"2019-02-20T17:27:07","Actor":"Ivanidzo4ka","Number":"2660","RawContent":null,"Title":"Rename GroupId column to RowGroup ","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/4a71e501f09846974e550f817f3f8f1243054c1b/src/Microsoft.ML.LightGBM/LightGbmCatalog.cs#L127\r\n\r\nConversation can be found here:\r\nhttps://github.com/dotnet/machinelearning/issues/2536","Url":"https://github.com/dotnet/machinelearning/issues/2660","RelatedDescription":"Open issue \"Rename GroupId column to RowGroup \" (#2660)"},{"Id":"412542306","IsPullRequest":false,"CreatedAt":"2019-02-20T17:26:45","Actor":"TomFinley","Number":"2659","RawContent":null,"Title":"What to do with IFourierDistributionSampler and friends","State":"open","Body":"This interface is related to random Fourier features projection. We may want this functionality as part of our public surface, but the specific API right now is still very command-line and entry-points centric. This should change.\r\n\r\nSomewhat similar in spirit to the problem of loss functions as discussed in #1973, and has many of the same problems, and should probably have a similar resolution to whatever we choose to do with loss functions.","Url":"https://github.com/dotnet/machinelearning/issues/2659","RelatedDescription":"Open issue \"What to do with IFourierDistributionSampler and friends\" (#2659)"},{"Id":"412533216","IsPullRequest":false,"CreatedAt":"2019-02-20T17:05:35","Actor":"klausmh","Number":"2658","RawContent":null,"Title":"Expose gain p-values in new RegressionTree interface","State":"open","Body":"For the new RegressionTree interface introduced with 0.11, can you also include gain p-values, gain, and \"previous leaf value\"?","Url":"https://github.com/dotnet/machinelearning/issues/2658","RelatedDescription":"Open issue \"Expose gain p-values in new RegressionTree interface\" (#2658)"},{"Id":"412532359","IsPullRequest":false,"CreatedAt":"2019-02-20T17:03:35","Actor":"eerhardt","Number":"2657","RawContent":null,"Title":"Enhance CustomMapping documentation","State":"open","Body":"See discussion https://github.com/dotnet/machinelearning/pull/2569#discussion_r257425931\r\n\r\n> this is definitely something we'll want to document very carefully. It is a bit odd, this pattern of mutable input as a return value. (I of course know exactly why we do it, but a user will not.)\r\n\r\nWe should ensure we explain (in the cookbook, docs.microsoft.com, or otherwise) how this pattern works, and give the reasons why we do it like this.\r\n\r\n/cc @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2657","RelatedDescription":"Open issue \"Enhance CustomMapping documentation\" (#2657)"},{"Id":"412525468","IsPullRequest":false,"CreatedAt":"2019-02-20T16:49:11","Actor":"JRAlexander","Number":"2655","RawContent":null,"Title":"Add AppendCacheCheckpoint large dataset usage warning to documentation","State":"open","Body":"https://github.com/dotnet/machinelearning-samples/blob/bfcd66167bb4518afb538661a97ad98c27685349/samples/csharp/getting-started/MulticlassClassification_Iris/IrisClassification/IrisClassificationConsoleApp/Program.cs#L50 has a warning: \n// Use in-memory cache for small/medium datasets to lower training time. \n// Do NOT use it (remove .AppendCacheCheckpoint()) when handling very large datasets. \n\nThis should be added to the documentation. \n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 2a03f5f8-1ce2-ae98-0f03-3a0cdfd2a208\n* Version Independent ID: 58d012b4-4275-8c95-1634-08f7f66cbafb\n* Content: [EstimatorChain&lt;TLastTransformer&gt;.AppendCacheCheckpoint(IHostEnvironment) Method (Microsoft.ML.Data)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.estimatorchain-1.appendcachecheckpoint?view=ml-dotnet#Microsoft_ML_Data_EstimatorChain_1_AppendCacheCheckpoint_Microsoft_ML_IHostEnvironment_)\n* Content Source: [dotnet/xml/Microsoft.ML.Data/EstimatorChain`1.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Data/EstimatorChain`1.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/2655","RelatedDescription":"Open issue \"Add AppendCacheCheckpoint large dataset usage warning to documentation\" (#2655)"},{"Id":"412415875","IsPullRequest":false,"CreatedAt":"2019-02-20T13:07:15","Actor":"PeterPann23","Number":"2654","RawContent":null,"Title":"Predicting an enum value is getting harder then expected","State":"open","Body":"### System information\r\n\r\n- **Windows 10 64 bit**:\r\n- **ml.net 0.10.0**: \r\n[Model.zip](https://github.com/dotnet/machinelearning/files/2884674/Model.zip)\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTrained a model from a text file that contains a integer for the values of an enum. The model contains a property named Label with a data type of uint \r\n\r\n- **What happened?**\r\nGot an error message generating prediction engine from model after it trained, the error:\r\nCould not apply a map over type 'U4' to column 'Label' since it has type 'Key<U4, 0-37>'\r\n\r\n   at Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Bind(IHostEnvironment env, Schema schema, TermMap unbound, ColInfo[] infos, Boolean[] textMetadata, Int32 iinfo)\r\n   at Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Mapper..ctor(ValueToKeyMappingTransformer parent, Schema inputSchema)\r\n   at Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.MakeRowMapper(Schema schema)\r\n   at Microsoft.ML.Data.RowToRowTransformerBase.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n- **What did you expect?**\r\nI would expect this to work. \r\n\r\n\r\n### Source code / logs\r\n```\r\nvar dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: DefaultColumnNames.Label, inputColumnName:nameof(MSBar2.Label))                                            \r\n                            .Append(mlContext.Transforms.Concatenate(DefaultColumnNames.Features, MSBar2.GetColumnNames(DataKind.R4)))\r\n                            ;\r\nvar trainer = mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(DefaultColumnNames.Label,DefaultColumnNames.Features);\r\nvar trainingPipeline = dataProcessPipeline.Append(trainer)\r\n                                          .Append(mlContext.Transforms.Conversion.MapKeyToValue(DefaultColumnNames.PredictedLabel));\r\nvar model = trainingPipeline.Fit(trainingDataView);\r\nvar engine= model.CreatePredictionEngine<MSBar2, TrendPrediction>(mlContext);\r\n```\r\nThe class TrendPrediction looks like this:\r\n```\r\npublic class TrendPrediction\r\n{\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"TrendPrediction\"/> class.\r\n        /// </summary>\r\n        public TrendPrediction()\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// The predicted labels\r\n        /// </summary>\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public uint PredictedLabels;\r\n\r\n        /// <summary>\r\n        /// The scores\r\n        /// </summary>\r\n        [ColumnName(\"Score\")]\r\n        public float[] Scores;\r\n}\r\n```\r\nI have decorated my Label property like this:\r\n```\r\n[ColumnName(\"Label\"), LoadColumn(0) , Column(\"0\", \"Label\"),KeyType(Count =38)]\r\npublic uint Label;\r\n```\r\n\r\n[Model.zip](https://github.com/dotnet/machinelearning/files/2884678/Model.zip)\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2654","RelatedDescription":"Open issue \"Predicting an enum value is getting harder then expected\" (#2654)"},{"Id":"412316489","IsPullRequest":false,"CreatedAt":"2019-02-20T09:06:14","Actor":"PeterPann23","Number":"2653","RawContent":null,"Title":"samples look to be repetitive","State":"open","Body":"Hi,\n\nI think that a Copy & Past issue duplicated the samples\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: b7238dac-834a-09ec-15e2-aa35ced93ffd\n* Version Independent ID: f7a23c72-3335-a0dc-2858-dbb88defa132\n* Content: [ConversionsExtensionsCatalog.ValueMap Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.conversionsextensionscatalog.valuemap?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML/ConversionsExtensionsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/ConversionsExtensionsCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/2653","RelatedDescription":"Open issue \"samples look to be repetitive\" (#2653)"},{"Id":"412285718","IsPullRequest":false,"CreatedAt":"2019-02-20T07:38:31","Actor":"najeeb-kazmi","Number":"2652","RawContent":null,"Title":"LightGbm ranking with Options does not set GroupId column even when specified in Options","State":"open","Body":"During the course of Fixing #2530 in PR #2650, I discovered that when creating a `LightGbmRankingTrainer` with `MLContext.Ranking.Trainers.LightGbm(Options options)`, the GroupId column is never set even though it is specified in the `Options`.\r\n\r\nDigging a bit deeper, I found that in [LightGbmTrainerBase.cs](https://github.com/dotnet/machinelearning/blob/4a71e501f09846974e550f817f3f8f1243054c1b/src/Microsoft.ML.LightGBM/LightGbmTrainerBase.cs#L91-L92) we have\r\n```csharp\r\n        private protected LightGbmTrainerBase(IHostEnvironment env, string name, Options options, SchemaShape.Column label)\r\n           : base(Contracts.CheckRef(env, nameof(env)).Register(name), TrainerUtils.MakeR4VecFeature(options.FeatureColumn), label, TrainerUtils.MakeR4ScalarWeightColumn(options.WeightColumn))\r\n```\r\n\r\nThis does not use options.GroupIdColumn to create a `SchemaShape.Column` for GroupId to pass to the base constructor `TrainerEstimatorBaseWithGroupId`. Neither is there a method in `TrainerUtils` to create such a `SchemaShape.Column` object from options.GroupIdColumn for Key types such as GroupId.\r\n\r\nRepro:\r\nRun the sample in `Microsoft.ML.Samples.Dynamic.LightGbmRankingWithOptions.Example()`.\r\n\r\nUnhandled Exception: System.ArgumentOutOfRangeException: Need a group column.\r\nParameter name: data\r\n   at Microsoft.ML.Contracts.CheckParam(IExceptionContext ctx, Boolean f, String paramName, String msg) in C:\\najeeb-kazmi\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs:line 543\r\n   at Microsoft.ML.LightGBM.LightGbmRankingTrainer.CheckDataValid(IChannel ch, RoleMappedData data) in C:\\najeeb-kazmi\\machinelearning\\src\\Microsoft.ML.LightGBM\\LightGbmRankingTrainer.cs:line 127\r\n   at Microsoft.ML.LightGBM.LightGbmTrainerBase`3.LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData) in C:\\najeeb-kazmi\\machinelearning\\src\\Microsoft.ML.LightGBM\\LightGbmTrainerBase.cs:line 313\r\n   at Microsoft.ML.LightGBM.LightGbmTrainerBase`3.TrainModelCore(TrainContext context) in C:\\najeeb-kazmi\\machinelearning\\src\\Microsoft.ML.LightGBM\\LightGbmTrainerBase.cs:line 113\r\n   at Microsoft.ML.Training.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor) in C:\\najeeb-kazmi\\machinelearning\\src\\Microsoft.ML.Data\\Training\\TrainerEstimatorBase.cs:line 148\r\n   at Microsoft.ML.Training.TrainerEstimatorBase`2.Fit(IDataView input) in C:\\najeeb-kazmi\\machinelearning\\src\\Microsoft.ML.Data\\Training\\TrainerEstimatorBase.cs:line 75\r\n   at Microsoft.ML.Samples.Dynamic.LightGbmRankingWithOptions.Example() in C:\\najeeb-kazmi\\machinelearning\\docs\\samples\\Microsoft.ML.Samples\\Dynamic\\Trainers\\Ranking\\LightGBMRankingWithOptions.cs:line 31\r\n   at Microsoft.ML.Samples.Program.Main(String[] args) in C:\\najeeb-kazmi\\machinelearning\\docs\\samples\\Microsoft.ML.Samples\\Program.cs:line 9\r\n\r\ncc: @abgoswam @zeahmed @TomFinley @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/2652","RelatedDescription":"Open issue \"LightGbm ranking with Options does not set GroupId column even when specified in Options\" (#2652)"},{"Id":"412280387","IsPullRequest":true,"CreatedAt":"2019-02-20T07:21:26","Actor":"najeeb-kazmi","Number":"2650","RawContent":null,"Title":"Adding a sample for LightGbm Ranking","State":"open","Body":"Fixes #2530 \r\nFixes #776\r\n\r\nAdding a sample for LightGbm ranking.","Url":"https://github.com/dotnet/machinelearning/pull/2650","RelatedDescription":"Open PR \"Adding a sample for LightGbm Ranking\" (#2650)"},{"Id":"412201203","IsPullRequest":true,"CreatedAt":"2019-02-20T01:26:52","Actor":"codemzs","Number":"2647","RawContent":null,"Title":"Increase build timeout for code coverage CI.","State":"open","Body":"Recently it seems the code coverage build times have increased, the exact reason is unclear but it could be because of added tests. Since code coverage CI does not interfere with the main CI so its ok to increase the build timeouts for code coverage CI to prevent build failures due to [timeouts.](https://dev.azure.com/dnceng/public/_build/results?buildId=100301)\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2647","RelatedDescription":"Open PR \"Increase build timeout for code coverage CI.\" (#2647)"},{"Id":"412195719","IsPullRequest":true,"CreatedAt":"2019-02-20T01:02:04","Actor":"rogancarr","Number":"2646","RawContent":null,"Title":"Adding functional tests for all training and evaluation tasks","State":"open","Body":"This PR adds functional tests for all training and evaluation tasks.\r\n\r\n* I can evaluate a model trained for any of my tasks on test data. The evaluation outputs metrics that are relevant to the task (e.g. AUC, accuracy, P/R, and F1 for binary classification)\r\n* I can get the data that will allow me to plot PR curves (blocked by #2645)\r\n\r\nFixes #2621","Url":"https://github.com/dotnet/machinelearning/pull/2646","RelatedDescription":"Open PR \"Adding functional tests for all training and evaluation tasks\" (#2646)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-21T05:30:54.9952094Z","RunDurationInMilliseconds":632}