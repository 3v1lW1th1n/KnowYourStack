{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are releasing the January 2018 Security and Quality Rollup. See .NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! for separately available reliability updates for the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7084017094","Type":"PullRequestEvent","CreatedAt":"2018-01-11T03:57:17","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15814","RelatedDescription":"Merged pull request \"Fix change to fgMorphBlockOperand\" (#15814) at dotnet/coreclr","RelatedBody":"My recent fix broke the `DYN_BLK` case. In addition to checking that types match, we *still* need to check that the sizes match.\r\n\r\nThis was caught by desktop testing. The test cases are somewhat complex, so I created a smaller repro."},{"Id":"7083929010","Type":"PullRequestEvent","CreatedAt":"2018-01-11T03:21:37","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15823","RelatedDescription":"Opened pull request \"Improve performance for Math.Abs\" (#15823) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/26253"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7084183322","Type":"IssuesEvent","CreatedAt":"2018-01-11T05:11:38","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8370","RelatedDescription":"Opened issue \"[tools] Add to bundledversions.props\" (#8370) at dotnet/cli","RelatedBody":"<NETCorePlatformsImplicitPackageVersion>2.0.1</NETCorePlatformsImplicitPackageVersion>\r\n\r\nhttps://github.com/dotnet/sdk/pull/1843/files#r160794715\r\nhttps://github.com/dotnet/sdk/pull/1843/files#r160809994\r\n\r\n"},{"Id":"7084016602","Type":"IssuesEvent","CreatedAt":"2018-01-11T03:57:05","Actor":"danroth27","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8369","RelatedDescription":"Opened issue \"Awkward message from CLI after successfully installing a global tool\" (#8369) at dotnet/cli","RelatedBody":"The message displayed by the CLI after installing a global tool is awkward and needs an editorial pass:\r\n\r\n```\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install tool dotnet-dev-certs --version 2.1.0-preview1-28051\r\n\r\nThe installation succeeded. If there is no other instruction. You can type the following command in shell directly to invoke: dotnet-dev-certs\r\n```\r\n\r\nIf there is no other instruction?\r\n"},{"Id":"7084011985","Type":"IssuesEvent","CreatedAt":"2018-01-11T03:55:06","Actor":"danroth27","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8368","RelatedDescription":"Opened issue \"Cannot run global tool after installing it, must open new command prompt\" (#8368) at dotnet/cli","RelatedBody":"After I have successfully installed a global tool I am not able to run it without opening a new command prompt:\r\n\r\n```\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install tool dotnet-dev-certs --version 2.1.0-preview1-28051\r\n\r\nThe installation succeeded. If there is no other instruction. You can type the following command in shell directly to invoke: dotnet-dev-certs\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet dev-certs -h\r\nNo executable found matching command \"dotnet-dev-certs\"\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet-dev-certs -h\r\n'dotnet-dev-certs' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet dev-certs\r\nNo executable found matching command \"dotnet-dev-certs\"\r\n```"},{"Id":"7083984785","Type":"IssuesEvent","CreatedAt":"2018-01-11T03:44:03","Actor":"danroth27","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8367","RelatedDescription":"Opened issue \"The dotnet install command help text is missing descriptions of options\" (#8367) at dotnet/cli","RelatedBody":"The `dotnet install` command help text is missing descriptions of its various options (although they do show up when you use `dotnet install` incorrectly):\r\n\r\n```\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install --help\r\nUsage: dotnet install [options] [command]\r\n\r\nOptions:\r\n  -h, --help   Show help information.\r\n\r\nCommands:\r\n  tool <packageId>   Install tool\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install tool dotnet-dev-certs -v 2.1.0-preview1-28042\r\nUnrecognized command or argument '-v'\r\nUnrecognized command or argument '2.1.0-preview1-28042'\r\nUsage: dotnet install tool [options] <packageId>\r\n\r\nArguments:\r\n  <packageId>   Package Id in NuGet\r\n\r\nOptions:\r\n  --version         Version of the package in NuGet\r\n  --configfile      NuGet configuration file\r\n  -f, --framework   Target framework to publish for. The target framework has to be specified in the project file.\r\n  -h, --help        Show help information.\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007925)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007925\r\n Commit SHA-1 hash:  ff4299241c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007925\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26110-02\r\n  Build    : 77152705cd56e7d89f52585959ec3559d91084c4\r\n```\r\n\r\n"},{"Id":"7083948699","Type":"IssuesEvent","CreatedAt":"2018-01-11T03:29:20","Actor":"danroth27","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8366","RelatedDescription":"Opened issue \"The dotnet install command missing from list of SDK commands in dotnet help text\" (#8366) at dotnet/cli","RelatedBody":"I don't see `dotnet install` listed in the list of SDK commands in the dotnet help text (although I can see the help text for the install command itself):\r\n\r\n```\r\nC:\\Users\\daroth\\Desktop\\test>dotnet help\r\n.NET Command Line Tools (2.2.0-preview1-007925)\r\nUsage: dotnet [runtime-options] [path-to-application]\r\nUsage: dotnet [sdk-options] [command] [arguments] [command-options]\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nSDK commands:\r\n  new              Initialize .NET projects.\r\n  restore          Restore dependencies specified in the .NET project.\r\n  run              Compiles and immediately executes a .NET project.\r\n  build            Builds a .NET project.\r\n  publish          Publishes a .NET project for deployment (including the runtime).\r\n  test             Runs unit tests using the test runner specified in the project.\r\n  pack             Creates a NuGet package.\r\n  migrate          Migrates a project.json based project to a msbuild based project.\r\n  clean            Clean build output(s).\r\n  sln              Modify solution (SLN) files.\r\n  add              Add reference to the project.\r\n  remove           Remove reference from the project.\r\n  list             List reference in the project.\r\n  nuget            Provides additional NuGet commands.\r\n  msbuild          Runs Microsoft Build Engine (MSBuild).\r\n  vstest           Runs Microsoft Test Execution Command Line Tool.\r\n  store            Stores the specified assemblies in the runtime store.\r\n  help             Show help.\r\n\r\nCommon options:\r\n  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\r\n  -h|--help             Show help.\r\n\r\nRun 'dotnet COMMAND --help' for more information on a command.\r\n\r\nsdk-options:\r\n  --version        Display .NET Core SDK version.\r\n  --info           Display .NET Core information.\r\n  --list-sdks      Display the installed SDKs.\r\n  --list-runtimes  Display the installed runtimes.\r\n  -d|--diagnostics Enable diagnostic output.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>    Path containing probing policy and assemblies to probe for.\r\n  --fx-version <version>            Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx Roll forward on no candidate shared framework is enabled.\r\n  --additional-deps <path>          Path to additional deps.json file.\r\n\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet install -h\r\nUsage: dotnet install [options] [command]\r\n\r\nOptions:\r\n  -h, --help   Show help information.\r\n\r\nCommands:\r\n  tool <packageId>   Install tool\r\n\r\nC:\\Users\\daroth\\Desktop\\test>dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007925)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007925\r\n Commit SHA-1 hash:  ff4299241c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007925\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26110-02\r\n  Build    : 77152705cd56e7d89f52585959ec3559d91084c4\r\n```\r\n\r\n"},{"Id":"7083707859","Type":"IssuesEvent","CreatedAt":"2018-01-11T01:57:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8365","RelatedDescription":"Opened issue \"[tools] Replace copy config file implementation for dotnet install tool my.tool --configfile \" (#8365) at dotnet/cli","RelatedBody":"Repalce https://github.com/dotnet/cli/blob/master/src/dotnet/ToolPackage/ToolPackageObtainer.cs#L71\r\n\r\nwith restore with package version = * \r\n\r\nand then add RestoreConfigFile property to temp project. So there is no need to copy config file"},{"Id":"7083411548","Type":"PullRequestEvent","CreatedAt":"2018-01-11T00:11:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8360","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26110-02 (master)\" (#8360) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7083312276","Type":"PullRequestEvent","CreatedAt":"2018-01-10T23:38:53","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8364","RelatedDescription":"Opened pull request \"WIP: Remove the 'fpm' test\" (#8364) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7083293411","Type":"PullRequestEvent","CreatedAt":"2018-01-10T23:32:55","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8361","RelatedDescription":"Merged pull request \"Ignore incoherent rpm dependency on dotnet-runtime when testing aspnetcore\" (#8361) at dotnet/cli","RelatedBody":"It looks like netci isn't configured correctly to actually run the TestSdkRpm target on PRs, but it fails on official builds.\r\n"},{"Id":"7083284590","Type":"IssuesEvent","CreatedAt":"2018-01-10T23:30:21","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8363","RelatedDescription":"Opened issue \"Creation of RPM packages should happen on CI runs\" (#8363) at dotnet/cli","RelatedBody":"The creation of RPM packages does not happen on Jenkins CI runs; it should so we can prevent build breaks in these method.\r\n\r\nhttps://github.com/dotnet/cli/blob/219801b15098566ced8dd787138a3d66e92565e0/build/package/Installer.RPM.targets#L202\r\n    <!-- Workaround for Jenkins machines that don't have the necessary packages https://github.com/dotnet/core-setup/issues/2260 -->\r\n    <Message Condition=\" '$(FPMPresent)' != 'True' \"\r\n             Text=\"FPM tool Not found, RPM packages will not be built.\"\r\n             Importance=\"High\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"TestSdkRpm\"\r\n          DependsOnTargets=\"RestoreTests\"\r\n          Condition=\" '$(IsRPMBasedDistro)' == 'True' and '$(FPMPresent)' == 'True' \"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7081339249","Type":"PullRequestEvent","CreatedAt":"2018-01-10T16:19:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/620","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02410-01 (master)\" (#620) at dotnet/standard","RelatedBody":""},{"Id":"7080349426","Type":"IssuesEvent","CreatedAt":"2018-01-10T13:12:15","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/615","RelatedDescription":"Closed issue \"Missing binary/namespace from NuGet package in .NET Standard 2.0 library\" (#615) at dotnet/standard","RelatedBody":"Hello, I'm writing a .NET Standard 2.0 library and I'm having issues with a NuGet package I'd like to use (https://www.nuget.org/packages/Alea/) which I think is only supported for PCL libraries right now, and was wondering if there was a workaround available.\r\n\r\nI can install the package just fine, but its assemblies aren't visible in the drop-down list of the dependencies, and I don't have any of the namespaces in the project:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/34453242-1c63ff6e-ed4f-11e7-9bc0-dd75319bff04.png)\r\n\r\nI tried to manually link the net45 binaries by modifying the .csproj file for the library, like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"Alea\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Alea.IL\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.IL.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Alea.Parallel\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.Parallel.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nAnd this actually works perfectly fine - I can use the library both from a .NET Core 2.0 application, and if I use it from a .NET Framework application (where those GPU libraries are originally supposed to work), I can also use the code from that package just fine.\r\n\r\nThe problem is that this workaround is only looking for the net45 binaries, and I'm not even sure they'd get installed in that path automatically regardless of the PC building the solution.\r\n\r\nMy question is:\r\n\r\n> Since the library itself works just fine in a .NET Standard 2.0 library, is there a way to make it so that these missing binaries are correctly linked/referenced and added to the project, so that their namespaces are available when coding in the project?\r\n\r\nSee the original Stack Overflow question here: https://stackoverflow.com/questions/48030077/alea-gpu-on-net-standard-2-0-will-this-workaround-work\r\n\r\nThank you for your help!\r\n\r\n**EDIT:** I did a couple tests installing the NuGet package ([here](https://www.nuget.org/packages/NeuralNetwork.NET/)) into a .NET Framework 4.7.1 console app, I've cleared the NuGet cache before that and everything works fine, the Alea package is correctly restored for the net45 platform, so those .dll are loaded successfully by the library (through those `HintPath`s above.\r\n\r\nThe problem with this is that I'm quite sure it wouldn't work when using Mono/Xamarin, as those paths are hardcoded as \"net45\", while on those frameworks that wouldn't be right.\r\nI can't use the `$(TargetFrameworkVersion)` macro, as that would just return \"netstandard2.0\", since that's the library framework.\r\n\r\n> Is there any workaround to at least have that `HintPath` trick work on different platforms/frameworks, so that even if the .dlls aren't automatically referenced by NuGet, they'll be found by the user application using the library?\r\n\r\n  "},{"Id":"7071488221","Type":"PullRequestEvent","CreatedAt":"2018-01-08T20:14:34","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02408-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7068857812","Type":"IssuesEvent","CreatedAt":"2018-01-08T10:21:16","Actor":"henkburgstra","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/619","RelatedDescription":"Closed issue \"\\\" (#619) at dotnet/standard","RelatedBody":""},{"Id":"7068855860","Type":"IssuesEvent","CreatedAt":"2018-01-08T10:20:47","Actor":"henkburgstra","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/619","RelatedDescription":"Opened issue \"\\\" (#619) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7084067977","Type":"PullRequestEvent","CreatedAt":"2018-01-11T04:19:43","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26255","RelatedDescription":"Merged pull request \"Disable GetApartmentState related tests for UAPAOT\" (#26255) at dotnet/corefx","RelatedBody":"Known existing issue.\r\n\r\n@Anipik note, UAPAOT tests currently do not run in CI, hence you did not see this."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7083943088","Type":"IssuesEvent","CreatedAt":"2018-01-11T03:27:09","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24113","RelatedDescription":"Closed issue \"Keyword \"when\" does not get completed in switch statement with patterns:\" (#24113) at dotnet/roslyn","RelatedBody":"I expect `when` to be offered as a completion at that position.\r\n\r\n```C#\r\n  switch (declarationStatement)\r\n                {\r\n                    case VariableDeclarationSyntax varDecl:\r\n                        return varDecl.Type;\r\n                    case ForEachStatementSyntax forEach:\r\n                        return forEach.Type;\r\n                    case DeclarationExpressionSyntax declExpr $$\r\n                }\r\n```"},{"Id":"7083942278","Type":"PullRequestEvent","CreatedAt":"2018-01-11T03:26:50","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24131","RelatedDescription":"Merged pull request \"Recommend \"when\" keyword after case-pattern-switch-label\" (#24131) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nType a switch/case with a pattern, such as `case DeclarationExpressionSyntax declExpr $$`. At this point, `when` should be offered as a completion.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/24113\r\n\r\n### Workarounds, if any\r\nType \"when\" manually.\r\n\r\n### Risk\r\n### Performance impact\r\nLow. The change only impacts the when keyword recommender and only adds a couple of kind checks on the syntax.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### How was the bug found?\r\nReported by me. Discovered by typing such code."},{"Id":"7083879287","Type":"PullRequestEvent","CreatedAt":"2018-01-11T03:02:22","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24139","RelatedDescription":"Closed pull request \"CS1628 error text mentions local functions\" (#24139) at dotnet/roslyn","RelatedBody":"Updated ERR_AnonDelegateCantUse error text to mention local functions. Also, a comment and a test were changed in order to keep them consistent.\r\n\r\nFixes #23386."},{"Id":"7083856583","Type":"PullRequestEvent","CreatedAt":"2018-01-11T02:53:33","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24165","RelatedDescription":"Opened pull request \"[WIP] Remove IVisualStudioWorkspaceHost and related interfaces\" (#24165) at dotnet/roslyn","RelatedBody":"* THIS CHANGE IS A WORK IN PROGRESS, DO NOT REVIEW *\r\n\r\nThis interface was originally introduced to support CodeLens, when\r\nwe needed the ability to create a Workspace that was out-of-proc but\r\nconnected to the in-process project system interfaces. This created\r\nthe abstraction of how we pushed updates to the workspace, and came\r\nwith the rule that the VisualStudioProjectTracker was unable to\r\never touch a workspace directly.\r\n\r\nToday, that's not how we build our out-of-proc components. We now\r\nhave an in-proc workspace, and we mirror that in-proc workspace\r\nvia a pull model to the out-of-process workspace. This meant that the\r\ninterface was nearly pointless, except it was being used for the\r\nout-of-proc workspace setup to mirror some persistence settings over.\r\nProviding a new interface to do that directly is simpler and also\r\nmuch cheaper, as it doesn't come with the overhead of pushing\r\nworkspace changes to the remote host that were being ignored.\r\n\r\nThis has the direct perf benefit of removing some delays around setting\r\nup the remote workspace since we're not computing useless data. It\r\nhas longer-term benefits to aid in further refactorings, as we now have\r\nworkspace updates going directly to the in-proc workspace, which\r\nwe can start to do in a free-threaded manner.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7083760185","Type":"PullRequestEvent","CreatedAt":"2018-01-11T02:16:42","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23749","RelatedDescription":"Merged pull request \"Change local function definite assignment\" (#23749) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nThe LDM has decided that the following rules should be in effect when\r\ncalculating definite assignment for local functions:\r\n\r\n  1. The entry point to a local function is always reachable.\r\n  2. Variables captured in local functions are definitely assigned if\r\n  they are definitely assigned in all branches into the local function.\r\n\r\nIt turns out these rules were almost exactly what the compiler already\r\nimplemented, but there was a bug in captured variable detection that\r\nmeant that variables captured in lambdas within local functions were\r\nsometimes not counted as captured. This change fixes the bug around\r\ncapturing, which should cause the compiler to conform to this\r\nspecification.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #17829\r\n\r\n### Workarounds, if any\r\n\r\nLanguage change. If new errors are reported due to the language change, the containing local function can simply be deleted since it must be unreachable for this code to run. In addition, a warning about an unused local function should already be produced, so diagnostics are already produced for this code.\r\n\r\n### Risk\r\n\r\nThis is a simple change to capturing, closer to a bug fix than a design change.\r\n\r\n### Performance impact\r\n\r\nLow. This is a change from a constant-time check to a linear check of containing symbols, but\r\nthe level of nesting of local functions should be small enough that performance should not\r\nmatter.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo, this is a design change/bug fix to something that has been present since VS2017 shipped.\r\n\r\n### Root cause analysis\r\n\r\nThis is a very subtle case that can only happen with a nested lambda inside a local function\r\nwhere that local function is unreachable.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n"},{"Id":"7083654230","Type":"PullRequestEvent","CreatedAt":"2018-01-11T01:37:29","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24164","RelatedDescription":"Opened pull request \"Block use of  explicit `in` arguments in dynamically dispatched expressions.\" (#24164) at dotnet/roslyn","RelatedBody":"Fixes:#22813\r\n\r\nExplicitly marking an argument as an `in` argument has effect on overload resolution and therefore such fact needs to be known to the dynamic binder to be able to make appropriate decisions. For the time being there is not way to pass this additional information.\r\nIt would require a small expansion of APIs used by `dynamic`. When we have such API, we should predicate the support for explicit `in` arguments in dynamic calls on the presence of such API (which we can probe for statically at compile time).\r\n\r\nFor now, in order to not perpetuate accidental and likely incorrect behavior we should block this scenario.\r\n\r\n### Customer scenario\r\n\r\nCustomer uses `in` arguments in dynamic calls. Compiler accepts such code, but the information about `in` modifier at the call site is not passed to the dynamic binder. \r\nAs a result code may fail at the run time or, worse, it may \"work\", but may dynamically resolve and call a wrong method.  \r\n\r\nIf such behavior is left as-is, it may become a compatibility burden to fix it later when we have means to communicate to the dynamic binder that missing piece of information.\r\n\r\n### Bugs this fixes\r\n\r\n#22813\r\n\r\n### Workarounds, if any\r\n\r\nThe user may just tolerate unexpected behavior. \r\nHowever not blocking this scenario now, will create compatibility burden in the future.\r\n\r\n### Risk\r\n\r\nRisk is low. \r\n\r\nThis change disables use of unexpected combination of features when it is not possible to guarantee that it works correctly.\r\n\r\nSuch step would be a compatibility concern if the scenario was old, but it was just introduced in the last point release so the possibility of the unintentional behavior being abused is still low (and we should block it while that chance is still low).\r\n\r\n### Performance impact\r\n\r\nLow. It is a simple modification to existing similar checks to reject one more scenario.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThe issue arises at intersection of fairly unrelated features - `in` parameters and `dynamic` binding. It was not understood in time that the features may interact.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n"},{"Id":"7083520210","Type":"IssuesEvent","CreatedAt":"2018-01-11T00:49:28","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24014","RelatedDescription":"Closed issue \"Incorrect arg prep emitted for `ref this` / `ref struct` call with `out` parameter\" (#24014) at dotnet/roslyn","RelatedBody":"csc: 2.6.0.62405 (4939752b)\r\ndotnet: 2.1.2\r\n\r\nExpected behaviour: code works and outputs 42/43/44\r\n\r\nAlternative acceptable behaviour: if the scenario is not allowed for some reason, a compiler error is generated and the code does not compile.\r\n\r\nActual behaviour: NRE due to invalid IL in call; problematic IL is shown with `<=====`\r\n\r\nWorkaround: use `return` (possibly with value-tuples) instead of `out`\r\n\r\n```\r\n#define VERBOSE // turns on pointer address outputs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\n\r\nstatic class PossibleCompilerBug\r\n{\r\n    ref struct MutableRefStruct\r\n    {\r\n        public MutableRefStruct(int foo) { _foo = foo; }\r\n        public int Foo => _foo;\r\n        private int _foo;\r\n        public void Incr() => _foo++;\r\n    }\r\n    [Conditional(\"VERBOSE\")]\r\n    unsafe static void ShowAddress(ref this MutableRefStruct val, string name,\r\n        [CallerMemberName] string caller = null)\r\n    {\r\n        fixed(void* ptr = &val)\r\n        {\r\n            var addr = new IntPtr(ptr).ToInt64();\r\n            Console.WriteLine($\"{caller}: {name}\\t0x{Convert.ToString(addr,16).PadLeft(8,'0')}\");\r\n        }\r\n    }\r\n    static void Example1(ref this MutableRefStruct val) // works fine\r\n    {\r\n        ShowAddress(ref val,nameof(val));\r\n        var localCopy = val; // snapshot for rollback (there are reasons)\r\n        ShowAddress(ref localCopy, nameof(localCopy));\r\n        localCopy.Incr();\r\n        val = localCopy; // ldarg0, ldloc0, stobj\r\n    }\r\n    static void Example2(ref this MutableRefStruct val, out int arg) // called incorrectly\r\n    {\r\n        ShowAddress(ref val, nameof(val));\r\n        var localCopy = val; // snapshot for rollback (there are reasons)\r\n        ShowAddress(ref localCopy, nameof(localCopy));\r\n        localCopy.Incr();\r\n        arg = localCopy.Foo;\r\n        val = localCopy; // ldarg0, ldloc0, stobj\r\n    }\r\n    static void Main()\r\n    {\r\n        var obj = new MutableRefStruct(42);\r\n        Console.WriteLine(obj.Foo); // expect 42, get 42\r\n\r\n        // ldloca.s struct2\r\n        // call void PossibleCompilerBug::Example1(valuetype PossibleCompilerBug / MutableRefStruct &)\r\n        obj.Example1();\r\n        Console.WriteLine(obj.Foo); // expect 43, get 43\r\n        \r\n        // ldloc.0 <=============== problem here; this should be ldloca[.s]\r\n        // ldloca.s num\r\n        // call void PossibleCompilerBug::Example2(valuetype PossibleCompilerBug / MutableRefStruct &, int32 &)\r\n        obj.Example2(out _); // boom!\r\n        Console.WriteLine(obj.Foo); // expect 44\r\n    }\r\n}\r\n```\r\n \r\nJust to be explicit, the locals table is:\r\n\r\n```\r\n    .locals init (\r\n           [0] valuetype PossibleJitBug/MutableRefStruct struct2,\r\n           [1] int32 num\r\n    )\r\n```\r\n\r\n(so `ldloc.0` is definitely not itself a `ref` address)\r\n\r\n \r\n  "},{"Id":"7083519574","Type":"IssuesEvent","CreatedAt":"2018-01-11T00:49:16","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23692","RelatedDescription":"Closed issue \"Passing this to an in parameter crashes\" (#23692) at dotnet/roslyn","RelatedBody":"\r\nOriginally filed by @ufcpp on #23636\r\n\r\n```csharp\r\nusing System;\r\n\r\nstatic class Ex\r\n{\r\n    public static void InMethod(in X arg) => Console.WriteLine(arg);\r\n}\r\n\r\nclass X\r\n{\r\n    public void M()\r\n    {\r\n        // pass `this` by in-parameter.\r\n        // `ldind.ref` is not emitted.\r\n        // As a result, ExecutionEngineException is thrown.\r\n        Ex.InMethod(this);\r\n    }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var x = new X();\r\n\r\n        // No problem\r\n        Ex.InMethod(x);\r\n\r\n        // throws ExecutionEngineException\r\n        x.M();\r\n    }\r\n}\r\n```"},{"Id":"7083518756","Type":"PullRequestEvent","CreatedAt":"2018-01-11T00:48:58","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24128","RelatedDescription":"Merged pull request \"The argument that stands for the receiver of a `ref` extension method must be always passed as `ref`\" (#24128) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nThere are couple of code patterns that could result in incorrect IL emitted.\r\nThe cause is the same - we are losing ref-ness of the argument and attempt to pass an argument by value when targeting a byref parameter.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/23692\r\nhttps://github.com/dotnet/roslyn/issues/24014\r\n\r\n### Workarounds, if any\r\n\r\nThere is no workaround. User needs to change the code to not be affected by the bugs.\r\n\r\n### Risk\r\n\r\nRisk is low since the scenarios are in specific combinations of features.\r\nOtherwise the behavior is correct and stays the same.\r\n\r\n### Performance impact\r\n\r\nLow perf impact because no extra allocations/no complexity changes.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nIn the past the refKind of the argument at the call site was not always used in emit. As a result, some scenarios where the argument refKind was not set/preserved correctly or mismatched could be tolerated. With introduction of `in` arguments, the code was refactored to rely on refKinds in more cases and scenarios where refKinds are incorrect caused these failures.\r\n\r\nAdditional asserts were added to detect cases when argument refKinds happen to be in  inconsistent state with the refKind of the target parameters when we reach Emit phase.\r\n\r\nSeveral benign (or lucky) cases of inconsistency were discovered via the asserts and fixed. \r\n(I.E. allowing occasional mismatch between `ref` and `out`, although not impacting IL right now, is unexpected and fragile since it may hide other bugs in lowering, fixed)\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n  "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7084096323","Type":"PullRequestEvent","CreatedAt":"2018-01-11T04:32:22","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5236","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5236) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7084078274","Type":"PullRequestEvent","CreatedAt":"2018-01-11T04:24:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5234","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5234) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7083816516","Type":"PullRequestEvent","CreatedAt":"2018-01-11T02:38:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5185","RelatedDescription":"Merged pull request \"Update the way metadata blobs get hooked up\" (#5185) at dotnet/corert","RelatedBody":"This is mostly a mechanical change: when MRT100.dll was brought up on Project X, a new property got added to metadata manager: `SupportsReflection`.\r\n\r\nAll the metadata blobs got always hooked up into the dependency graph, but `SupportsReflection` was used to skip emitting them (because MRT100.dll has a base class library that doesn't have fancy reflection or type loader anyway, so no point in emitting the blobs). Turns out this is kind of backwards: metadata managers have different needs when it comes to what blobs will be generated (as proven by the ugly `#if !CORERT` we had in MetadataManager.cs). Metadata manager should decide what blobs are needed. This commit makes the hookup behavior polymorphic.\r\n\r\nAfter I did that, this actually found places in the compiler that were still injecting blob-required dependencies into the graph that triggered generation of all sorts of garbage that we didn't need because we don't generate the blob (we probably still generated the unreferenced garbage in the obj file though).\r\n\r\nThe remaining places that call `SupportsReflection` serve as a pretty good marker for things we should probably move to metadata manager too (in the same fashion we moved the reflection dependencies)."},{"Id":"7083093837","Type":"IssuesEvent","CreatedAt":"2018-01-10T22:38:06","Actor":"jcouv","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5235","RelatedDescription":"Opened issue \"[ILVerify] Directory structure for splitting ILVerify into exe+dll\" (#5235) at dotnet/corert","RelatedBody":"I’m going to split ILVerify.exe into an exe and a dll containing the public APIs, as we discussed in https://github.com/dotnet/corert/pull/5186.\r\n\r\nCurrently, the directory structure is:\r\n```\r\nILVerify/\r\n              Src/ -> produces ILVerify.exe\r\n              Test/\r\n```\r\n\r\nI see two options: \r\n```\r\nILVerify/\r\n              Src/ -> produces ILVerify.exe\r\nILVerification/\r\n              Src/ -> produces new library\r\n              Test/\r\n```\r\nOR\r\n```\r\nILVerify/\r\n              Src/ -> produces ILVerify.exe\r\n              Lib/ -> produces new library (which I propose calling ILVerification.dll)\r\n              Test/\r\n```\r\n\r\nThe first option is more in-line with the organization of the repo, so I’m assuming that’s what you prefer. \r\nCan you confirm?\r\n\r\nDoes ILVerification.dll sound ok? (an alternative could be ILAnalysis.dll)\r\n\r\nTagging @jkotas @ArztSamuel @KrzysztofCwalina \r\n\r\n"},{"Id":"7082638713","Type":"PullRequestEvent","CreatedAt":"2018-01-10T20:51:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5186","RelatedDescription":"Merged pull request \"Add public API for ILVerify\" (#5186) at dotnet/corert","RelatedBody":"@ArztSamuel @jkotas @VSadov  Here is another stab at a public API for ILVerify.\r\nThe ILVerify program, the ILVerify tests and the Roslyn tests all rely on the same API, summarized below. There are two APIs that are internal and used by the ILVerify tests.\r\n```C#\r\nnamespace ILVerify\r\n{\r\n    public delegate bool ShouldVerifyMethod(string name);\r\n\r\n    public interface IResolver\r\n    {\r\n        PEReader Resolve(AssemblyName name);\r\n    }\r\n\r\n    public class Verifier\r\n    {\r\n        public ShouldVerifyMethod ShouldVerifyMethod { set; } // Used by ILVerify program to filter which methods should be verified vs. skipped\r\n        public Verifier(IResolver resolver);\r\n        internal Verifier(SimpleTypeSystemContext context); // Used by the ILVerify tests\r\n        public void SetSystemModuleName(AssemblyName name);\r\n        public VerificationResult Verify(AssemblyName moduleToVerify);\r\n    }\r\n\r\n    public class VerificationResult\r\n    {\r\n        public int NumErrors = 0;\r\n        public string Message = string.Empty;\r\n        internal IEnumerable<VerifierError> _errors; // Note: there may be fewer errors recorded here than counted in NumErrors, which also counts exceptions. Used by the ILVerify tests\r\n    }\r\n\r\n    public class VerifierException : Exception\r\n    {\r\n        public VerifierException(string message) : base(message)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote 1: there is auto-discovery feature for the system module. It is required for Roslyn tests which create their own core library, but the test framework doesn't know when that is the case. If this feature feels wrong, I can further explore a Roslyn-side solution.\r\n\r\nNote 2: the `SimpleTypeSystemContext` keeps a cache of `EcmaModule`s (`_modules`). That is currently keyed on simple name instead of full name. That's because I don't know how to get a full name from an `EcmaModule` or `MetadataReader` (see `CreateModule` method). Any tips?\r\n\r\nIf the API looks good, I will clean up this PR (removing strong name using Roslyn key, switch back to an exe).\r\n\r\nFixes https://github.com/dotnet/corert/issues/3734\r\n  "},{"Id":"7082638703","Type":"IssuesEvent","CreatedAt":"2018-01-10T20:51:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/3734","RelatedDescription":"Closed issue \"[ILVerify] Define and Implement a public API surface\" (#3734) at dotnet/corert","RelatedBody":"Currently basically everything is internal in ILVerify. \r\n\r\nHaving a public API surface is needed for at least two things:\r\n\r\n- Supporting a .dll flavor, so it can be embedded into any .NET application\r\n- Creating tests without exposing every internal data structure to the test code. (see https://github.com/dotnet/corert/pull/3725#discussion_r118855361) \r\n\r\nStep1: would be: let's discuss what we want to expose as public API \r\nStep2: implement it. I'm happy to do that. "},{"Id":"7082046792","Type":"PullRequestEvent","CreatedAt":"2018-01-10T18:41:26","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5234","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5234) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7081424072","Type":"PullRequestEvent","CreatedAt":"2018-01-10T16:34:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5233","RelatedDescription":"Merged pull request \"Update CoreCLR.issues.targets\" (#5233) at dotnet/corert","RelatedBody":"These two tests now succeed after David's a2f4510705d5d1ac395af8543d451be82068347c.\r\n\r\nThe remaining two are testing another known corner case.\r\n\r\n@dotnet-bot skip ci please"},{"Id":"7080871474","Type":"PullRequestEvent","CreatedAt":"2018-01-10T14:57:04","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5233","RelatedDescription":"Opened pull request \"Update CoreCLR.issues.targets\" (#5233) at dotnet/corert","RelatedBody":"These two tests now succeed after David's a2f4510705d5d1ac395af8543d451be82068347c.\r\n\r\nThe remaining two are testing another known corner case.\r\n\r\n@dotnet-bot skip ci please"},{"Id":"7077900154","Type":"PullRequestEvent","CreatedAt":"2018-01-10T00:19:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5232","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5232) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7077769510","Type":"PullRequestEvent","CreatedAt":"2018-01-09T23:34:00","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5232","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5232) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7078003161","Type":"PullRequestEvent","CreatedAt":"2018-01-10T00:58:27","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1851","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-rtm-4791 into sdk\" (#1851) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4791 into sdk release/2.1 branch"},{"Id":"7078001360","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:57:47","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1846","RelatedDescription":"Closed issue \"Calling publish for two TFM fails with 2.1\" (#1846) at dotnet/sdk","RelatedBody":"I guess when I've updated VisualStudio to 15.3, it also installed SDK 2.1. In any case, the two calls:\r\n\r\n```\r\nC:\\...\\dotnet.exe publish C:\\...\\My.csproj --configuration Debug --framework netstandard2.0\r\nC:\\...\\dotnet.exe publish C:\\...\\My.csproj --configuration Debug --framework net461\r\n```\r\n\r\nPreviously worked without any issues. The project was published for both frameworks correctly (MSBuild task library). But now, I get:\r\n\r\n>  C:\\Program Files\\dotnet\\sdk\\2.1.2\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"System.Net.Http\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"System.IO.Compression\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"System.Runtime.InteropServices.RuntimeInformation\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\nerror CS0433: The type 'SerializableAttribute' exists in both 'System.Runtime.Serialization.Formatters, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\nerror CS0433: The type 'NonSerializedAttribute' exists in both 'System.Runtime.Serialization.Formatters, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\n\r\nI guess this is because of some dependency issues. ~~When I'm cleaning the `obj` folder, I can correctly publish for `net461` again.~~ It's actually the ` bin` folder I have to delete, in order to make `dotnet publish` work.\r\n\r\nAdding `--force` doesn't solve anything. This is the most surprising thing actually. \r\n\r\n  "},{"Id":"7077957329","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:41:11","Actor":"tim241","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1850","RelatedDescription":"Opened issue \"[Arch Linux] The requested URL returned error: 40\" (#1850) at dotnet/sdk","RelatedBody":"Hello, when I execute the `build.sh`, the links\r\n`https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.5/dotnet-runtime-1.0.5-linux-x64.tar.gz` \r\n`https://dotnetcli.azureedge.net/dotnet/Runtime/1.1.2/dotnet-runtime-1.1.2-linux-x64.tar.gz`\r\nfrom the `artifacts/.dotnet/2.2.0-preview1-007849/dotnet-install.sh` script\r\naren't valid anymore, they return a `404` error\r\nfull output: [build.log](https://gist.github.com/853508eb9932ca0a0f5c9a9500c8b8b9)\r\nI don't know if this is a dotnet-sdk issue, but the error arrives when executing the `build.sh` script from this repo.\r\nI do know that it downloads [this](https://github.com/dotnet/sdk/blob/master/build/build.sh#L137) script from [here](https://github.com/dotnet/sdk/blob/master/build/build.sh#L142)."},{"Id":"7076950747","Type":"IssuesEvent","CreatedAt":"2018-01-09T20:08:00","Actor":"bording","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1849","RelatedDescription":"Opened issue \"Regression in template packages in 2.1.4 SDK\" (#1849) at dotnet/sdk","RelatedBody":"Doing a diff between the 2.13 and 2.14 SDK folders, I noticed that the 2.1.4 SDK appears to have included an older version of some template NuGet packages.\r\n\r\n2.1.3\r\n- microsoft.dotnet.common.itemtemplates.1.0.0-beta3-20171117-314.nupkg\r\n- microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta3-20171117-314.nupkg\r\n\r\n2.1.4\r\n- microsoft.dotnet.common.itemtemplates.1.0.0-beta3-20171110-312.nupkg\r\n- microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta3-20171110-312.nupkg\r\n\r\n\r\nI haven't cracked open the packages to see what might be different between them, bit it seemed odd for a newer SDK to be including older packages. Was this intentional?\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":12,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":27,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":54,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":73,"FavoriteCount":62,"RawContent":null},{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-01-11T05:30:20.2152215Z","RunDurationInMilliseconds":8049}