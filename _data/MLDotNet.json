{"Data":{"GitHub":{"Issues":[{"Id":"425719040","IsPullRequest":false,"CreatedAt":"2019-03-27T01:23:46","Actor":"glebuk","Number":"3103","RawContent":null,"Title":"Add baseline-based tests for all componets of ML.NET","State":"open","Body":"### Issue\r\nCurrently there are many components in ML.NET that do not have any kind of baseline tests.  We run risk of regressions as we don't have tests for some components that can detect performance degradation.\r\n\r\n### Required work\r\nHere are the following identified baselines that are completely missing, yet exist in prior internal versions.  The task is to port them to ML.NET:\r\n\r\n- BaselineNormalize\r\n\r\n- Anomaly\r\n- Evaluators\r\n- FastTreeRanking\r\n- FastTreeRegression\r\n- FastTreeTweedieRegression\r\n- ImageTests\r\n- KM\r\n- LDSVM\r\n- LightGBMRank\r\n- ModelExport\r\n- MultiClassNaiveBayes\r\n- OGD\r\n- PoissonRegression\r\n- RegressionGamTrainer\r\n- ResultProcessor\r\n- SDCAMC\r\n- SDCAR\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3103","RelatedDescription":"Open issue \"Add baseline-based tests for all componets of ML.NET\" (#3103)"},{"Id":"425690348","IsPullRequest":true,"CreatedAt":"2019-03-26T23:17:29","Actor":"wschin","Number":"3102","RawContent":null,"Title":"Add minor doc strings to some internal functions","State":"open","Body":"This PR adds some minor doc strings for devs who want to know more about matrix factorization.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3102","RelatedDescription":"Open PR \"Add minor doc strings to some internal functions\" (#3102)"},{"Id":"425676566","IsPullRequest":true,"CreatedAt":"2019-03-26T22:26:29","Actor":"Ivanidzo4ka","Number":"3101","RawContent":null,"Title":"Restore OVA ability to preserve key names on predicted label","State":"open","Body":"Fixes #3090.\r\nI found usage of slot names _slightly_ confusing. In same time we have `TrainingLabelValues` which should do the trick.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3101","RelatedDescription":"Open PR \"Restore OVA ability to preserve key names on predicted label\" (#3101)"},{"Id":"425654984","IsPullRequest":false,"CreatedAt":"2019-03-26T21:21:52","Actor":"singlis","Number":"3100","RawContent":null,"Title":"F# API Documentation Examples","State":"open","Body":"While our machinelearning-samples repo has F# samples, the ML.Net API documentation examples do not contain F# examples.\r\n\r\nThis is a work item to add F# examples to demonstrate API usage and to mirror what we have in C#.\r\n\r\nThings that need to be understood:\r\n1) Does our current documentation pipeline support another language (we support python and C#, can we add F# examples and have it work or is there some additional work that  needs to be done? If so, lets create an issue -- following up with @JRAlexander and @natke)\r\n\r\n2) If it is supported, is there a specific directory structure or other restrictions that need to be followed?\r\n\r\nIf there are sub-issues that need to be created, please use this as the global issue for tracking.\r\n\r\ncc @shmoradims, @sfilipi, @zeahmed, @rogancarr \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3100","RelatedDescription":"Open issue \"F# API Documentation Examples\" (#3100)"},{"Id":"425643573","IsPullRequest":true,"CreatedAt":"2019-03-26T20:53:03","Actor":"zeahmed","Number":"3099","RawContent":null,"Title":"Binary LR samples using T4 templates","State":"open","Body":"Related to #2522. The *.cs files are auto-generated. Please review the .tt and .ttinclude files.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3099","RelatedDescription":"Open PR \"Binary LR samples using T4 templates\" (#3099)"},{"Id":"425637108","IsPullRequest":false,"CreatedAt":"2019-03-26T20:37:24","Actor":"singlis","Number":"3098","RawContent":null,"Title":"Better documentation and discoverability around Append and Transfomer Scope","State":"open","Body":"As part of our public API, we support the ability to filter out parts of the estimator chain. The APIs that support this are not documented, nor do we provide any context in our Cookbooks. As we are doing an overall coverage of documentation/samples, I created this issue separately to ensure that it gets covered. Referencing from #3063, these are the two APIs that are used:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/db4ecc0135baffc8930201a85fb3e9a101cdfa46/src/Microsoft.ML.Data/DataLoadSave/EstimatorChain.cs#L87\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/db4ecc0135baffc8930201a85fb3e9a101cdfa46/src/Microsoft.ML.Data/DataLoadSave/TransformerChain.cs#L145\r\n\r\nIt would also be very useful to have more information about why you would want to filter as well as what scenarios we are trying to address.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3098","RelatedDescription":"Open issue \"Better documentation and discoverability around Append and Transfomer Scope\" (#3098)"},{"Id":"425627055","IsPullRequest":false,"CreatedAt":"2019-03-26T20:14:13","Actor":"CESARDELATORRE","Number":"3097","RawContent":null,"Title":"Data kind R4, R8, etc. were removed, but errors still show up with those internal types","State":"open","Body":"Data Kind 'R4', 'R8, 'etc. were removed in the new version. However trainer still validates against old type, which does not exist anymore \"externally\", for a user, so when getting errors it is very confusing.\r\n\r\nFor example:\r\n\r\n```\r\n   var trainData = mLContext.Data.LoadFromTextFile(path: trainDataPath,\r\n                     columns: new[]\r\n                     {\r\n                            new TextLoader.Column(nameof(InputData.PixelValues), DataKind.Double, 1, numSparseBits),\r\n                            new TextLoader.Column(\"Number\", DataKind.Int16, 0)\r\n                     },\r\n                     hasHeader: false,\r\n                     separatorChar: ','\r\n                     );\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1756871/54972539-4a2d2880-4f8c-11e9-8ba7-a9c73d328150.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3097","RelatedDescription":"Open issue \"Data kind R4, R8, etc. were removed, but errors still show up with those internal types\" (#3097)"},{"Id":"425604072","IsPullRequest":false,"CreatedAt":"2019-03-26T19:17:43","Actor":"TomFinley","Number":"3096","RawContent":null,"Title":"Code documentation: Improve IEstimator/ITransformer/IDataView XML and high level docs","State":"open","Body":"The central concept in the ML.NET API in the aftermath of #581 has become the `IEstimator`/`ITransformer`/`IDataView` triad, with the less essential but still important `IDataReader`/`IDataReaderEstimator`. That old issue, as you read it, defines a loose outline of what those now key interfaces should do, but in a somewhat vague and indefinite form, because it was not always obvious from the outset what would be correct or incorrect.\r\n\r\nYet, over the course of the last half-year or so as we pursued the practical work of making these structures and working with them, we've refined what was once indefinite to more definite statements, about what makes a correct vs. incorrect, what invariants we assume they do and do not apply.\r\n\r\nThis documentation will take, as far as I can tell, two forms. One is refinements on the XML documentation of the appropriate types themselves, to clarify the \"pointwise\" accuracy of the individual components. The second is a more general document describing how all those components work together, to give a broader context not just of what they must do (which mostly belongs in the pointwise XML documentation), but also *why* things are the way they are.\r\n\r\nTo give a simple example of this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/366332047340bdb12cf5fe2a11f9a6e257af9b84/src/Microsoft.ML.Core/Data/IEstimator.cs#L268-L278\r\n\r\nWe have here arguably the two most important methods in `ITransformer`. Now these two descriptions are not *wrong*, but they are lacking a critical bit of information, specifically: given an `IDataView data`, we have come to rely on the fact that `GetOutputSchema(data.Schema)` will return the \"same\" schema (not in the reference sense) as `Transform(data).Schema` would. That should be described.\r\n\r\nSpeaking to the second point, we should explain *why* this must be so, that is the correctness of our composability, chaining, or ability to extract useful attribute information has come to rely upon that.\r\n\r\nI sort of view the second part as a companion to, or even a successor to, the existing [IDataView implementation](https://github.com/dotnet/machinelearning/blob/366332047340bdb12cf5fe2a11f9a6e257af9b84/docs/code/IDataViewImplementation.md) document, except one that also treats on `IEstimator` and `ITransformer`. That document, like this proposed document, encapsulated information that *existed* in the form of PR comments and other discussions, but concentrating that documentation \"in one place\" has proven an enormous time saver over the years to be able to point to that document to explain why things must be so, rather than isolated harder-to-find parts of conversations.\r\n\r\nWhile it may be of use to end users (certainly if I am a user of an API, knowing what I can expect out of the key interfaces for a library is of some worth), the primary goal of the documentation is to ensure that, going forward, people \"do the right thing\" and have the right set of expectations.","Url":"https://github.com/dotnet/machinelearning/issues/3096","RelatedDescription":"Open issue \"Code documentation: Improve IEstimator/ITransformer/IDataView XML and high level docs\" (#3096)"},{"Id":"425603711","IsPullRequest":false,"CreatedAt":"2019-03-26T19:16:50","Actor":"TomFinley","Number":"3095","RawContent":null,"Title":"Code documentation: Updating existing code documents","State":"open","Body":"Many of the [documents describing the code and the principles that make it work](https://github.com/dotnet/machinelearning/tree/366332047340bdb12cf5fe2a11f9a6e257af9b84/docs/code) need to be updated. Sometimes this updating will take the form of just updating the type names (e.g., what we used to call `ColumnType` is not `DataViewType`, `ICursor` interface has been subsumed by the `RowCursor` abstract class), and sometimes will take the form of changing the content rather entirely (e.g., we used to consider throwing in cursors bad practice, now we need to explain why we changed our mind, also, we've restricted key-types so that they are explicitly enumerations over sets rather than trying to do a bunch of additional things we never once found useful).\r\n\r\nNote that this is distinct from #2054, which is more about user-facing documentation and samples. This is more about the documentation of the principles upon which our code relies.","Url":"https://github.com/dotnet/machinelearning/issues/3095","RelatedDescription":"Open issue \"Code documentation: Updating existing code documents\" (#3095)"},{"Id":"425259733","IsPullRequest":true,"CreatedAt":"2019-03-26T18:06:48","Actor":"shauheen","Number":"3091","RawContent":null,"Title":"Bump master to 1.1 and 0.13","State":"closed","Body":"This PR will update master version to 1.1 for stable projects and 0.13 for preview. (Creating as draft PR until 1.0 branch is created - no merge)","Url":"https://github.com/dotnet/machinelearning/pull/3091","RelatedDescription":"Closed or merged PR \"Bump master to 1.1 and 0.13\" (#3091)"},{"Id":"425537505","IsPullRequest":false,"CreatedAt":"2019-03-26T17:15:48","Actor":"prathyusha12345","Number":"3094","RawContent":null,"Title":" var idv = mlContext.Data.LoadFromEnumerable(data); is not working in v0.11","State":"closed","Body":"this statement is not working in v0.11. There is no LoadFromEnumerable() method available.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 476efb73-09c2-46dd-a567-91ad879bb3e7\n* Version Independent ID: 5dba3671-2591-409b-26b8-4abd8a5a3001\n* Content: [OnnxTransformer Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.onnxtransformer?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/OnnxTransformer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/OnnxTransformer.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3094","RelatedDescription":"Closed issue \" var idv = mlContext.Data.LoadFromEnumerable(data); is not working in v0.11\" (#3094)"},{"Id":"425366947","IsPullRequest":false,"CreatedAt":"2019-03-26T11:37:34","Actor":"1amirjalai","Number":"3093","RawContent":null,"Title":"out of memory exception","State":"open","Body":"I'm using fasttree to train my model but the program always crashes with the low on memory exception.\r\nI have an hp dl380 gen 8 with 64gig of ram and 2x 2620 xenon and windows server 2016.\r\nwhy the program crashes?\r\nshouldn't it handles low on memory?\r\nis there anything i can do so it limits memory usage?","Url":"https://github.com/dotnet/machinelearning/issues/3093","RelatedDescription":"Open issue \"out of memory exception\" (#3093)"},{"Id":"425269564","IsPullRequest":false,"CreatedAt":"2019-03-26T07:46:32","Actor":"IvanAntipov","Number":"3092","RawContent":null,"Title":"Lda bag of words export model","State":"open","Body":"I use LDA transformation from example\r\n\r\n```\r\nvar pipeline = \r\n  ml.Transforms.Text.ProduceWordBags(review).\r\n     Append(ml.Transforms.Text.LatentDirichletAllocation(review, ldaFeatures, numberOfTopics: 3));\r\n\r\nvar transformer = pipeline.Fit(trainData);\r\nvar transformed_data = transformer.Transform(trainData);\r\n\r\n```\r\n\r\nNow i try to visualize data with [pyLDAvis](https://github.com/bmabey/pyLDAvis) \r\n\r\nFor this task i need phi matrix, theta matrix, vocabulary, term_frequency.\r\n\r\nIt is possible to get theta matrix using documents transform, \r\nIt is possible to get phi matrix using, with SingleBox.GetModel internal method (using Reflection)\r\nIt din't managed to get the vocabulary.\r\n\r\nFor a moment it is to hard to export LDA related parameters from ml pipline.\r\n\r\nIf would be nice to be able to export complete set of related LDA parameters","Url":"https://github.com/dotnet/machinelearning/issues/3092","RelatedDescription":"Open issue \"Lda bag of words export model\" (#3092)"},{"Id":"425239903","IsPullRequest":false,"CreatedAt":"2019-03-26T05:56:38","Actor":"daholste","Number":"3090","RawContent":null,"Title":"Exception when converting PredictedLabel from Key To Value","State":"open","Body":"When trying to convert the output PredictedLabel from key back to value, the exception\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Metadata KeyValues does not exist\r\n  Source=Microsoft.ML.Core\r\n  StackTrace:\r\n   at Microsoft.ML.Runtime.Contracts.Check(IExceptionContext ctx, Boolean f, String msg) in C:\\MLDotNet2\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs:line 497\r\n```\r\nis thrown.\r\n\r\nCode to repro:\r\n```C#\r\nvar mlContext = new MLContext();\r\n\r\nvar textLoaderOptions = new TextLoader.Options()\r\n{\r\n\tColumns = new[]\r\n\t{\r\n\t\tnew TextLoader.Column(\"Label\", DataKind.Single, 0),\r\n\t\tnew TextLoader.Column(\"Row\", DataKind.Single, 1),\r\n\t\tnew TextLoader.Column(\"Column\", DataKind.Single, 2),\r\n\t},\r\n\tHasHeader = true,\r\n\tSeparators = new[] { '\\t' }\r\n};\r\nvar textLoader = mlContext.Data.CreateTextLoader(textLoaderOptions);\r\nvar data = textLoader.Load(@\"C:\\MLDotNet2\\test\\data\\trivial-train.tsv\");\r\n\r\nvar ap = mlContext.BinaryClassification.Trainers.AveragedPerceptron();\r\nvar ova = mlContext.MulticlassClassification.Trainers.OneVersusAll(ap);\r\n\r\nvar pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n\t.Append(mlContext.Transforms.Concatenate(\"Features\", \"Row\", \"Column\"))\r\n\t.Append(ova)\r\n\t.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\nvar model = pipeline.Fit(data);\r\n```\r\n\r\nReplace `C:\\MLDotNet2\\` with path to ML.NET repo on your local machine","Url":"https://github.com/dotnet/machinelearning/issues/3090","RelatedDescription":"Open issue \"Exception when converting PredictedLabel from Key To Value\" (#3090)"},{"Id":"425143498","IsPullRequest":true,"CreatedAt":"2019-03-26T03:50:52","Actor":"rogancarr","Number":"3086","RawContent":null,"Title":"Updating the ApplyOnnxModel transform to meet the API parameter ordering standards","State":"closed","Body":"This PR updates the `ApplyOnnxModel` transform to meet the API standards: Moving to `outputColumnName`, `inputColumnName`, `modelFile`.\r\n\r\nFixes #3082 ","Url":"https://github.com/dotnet/machinelearning/pull/3086","RelatedDescription":"Closed or merged PR \"Updating the ApplyOnnxModel transform to meet the API parameter ordering standards\" (#3086)"},{"Id":"425130591","IsPullRequest":false,"CreatedAt":"2019-03-26T03:50:52","Actor":"rogancarr","Number":"3082","RawContent":null,"Title":"ApplyOnnxModel API parameters are in the wrong order","State":"closed","Body":"The `ApplyOnnxModel` `Transformer` has a parameter order based on the `ONNX` model (see below) but as a `Transformer`, it should have parameters ordered to reflect the modification of the input `IDataView`.\r\n\r\nHere is the current API:\r\n```cs\r\npublic static OnnxScoringEstimator ApplyOnnxModel(this TransformsCatalog catalog,\r\n            string modelFile,\r\n            string outputColumnName,\r\n            string inputColumnName,\r\n            int? gpuDeviceId = null,\r\n            bool fallbackToCpu = false);\r\n```\r\n\r\nThis should be re-ordered to be:\r\n\r\n```cs\r\npublic static OnnxScoringEstimator ApplyOnnxModel(this TransformsCatalog catalog,\r\n            string outputColumnName,\r\n            string inputColumnName,\r\n            string modelFile,\r\n            int? gpuDeviceId = null,\r\n            bool fallbackToCpu = false);\r\n```\r\n\r\nRelated to #3079 ","Url":"https://github.com/dotnet/machinelearning/issues/3082","RelatedDescription":"Closed issue \"ApplyOnnxModel API parameters are in the wrong order\" (#3082)"},{"Id":"425158710","IsPullRequest":true,"CreatedAt":"2019-03-26T01:03:44","Actor":"codemzs","Number":"3088","RawContent":null,"Title":"API to return ColumnPairs for a OneToOneTransformer.","State":"closed","Body":"fixes #3087","Url":"https://github.com/dotnet/machinelearning/pull/3088","RelatedDescription":"Closed or merged PR \"API to return ColumnPairs for a OneToOneTransformer.\" (#3088)"},{"Id":"425158582","IsPullRequest":false,"CreatedAt":"2019-03-26T01:03:44","Actor":"codemzs","Number":"3087","RawContent":null,"Title":"API to return ColumnPairs for a transformer.","State":"closed","Body":"We need an API to return ColumnPairs for transformers descending from OneToOneTransformerBase. Create such an API in the experimental nuget.","Url":"https://github.com/dotnet/machinelearning/issues/3087","RelatedDescription":"Closed issue \"API to return ColumnPairs for a transformer.\" (#3087)"},{"Id":"425166679","IsPullRequest":false,"CreatedAt":"2019-03-25T23:58:26","Actor":"glebuk","Number":"3089","RawContent":null,"Title":"Model.ConvertToOnnx() fails for Classification pipelines if non-default Features column name is used","State":"open","Body":"The following code fails to convert to ONNX model:\r\n```csharp\r\n            var mlContext = new MLContext();\r\n            var data = mlContext.Data.LoadFromEnumerable<Observation>(Data);\r\n            var chain = mlContext.Transforms.Concatenate(\"FeatureVector\", \"Price\")\r\n                .Append(mlContext.BinaryClassification.Trainers.LogisticRegression(\r\n                    \"Label\", \"FeatureVector\"));\r\n\r\n            var transformer = chain.Fit(data);\r\n            using (var stream = File.Create(\"foo.onnx\"))\r\n                mlContext.Model.ConvertToOnnx(transformer, data, stream);\r\n```\r\n\r\nOn the other hand, if you rename \"FeatureVector\" to \"Features\" it works. \r\nThis happens for various learners and both binary and multiclass. for both calibrated and non-calibrated. This does NOT happen on regression","Url":"https://github.com/dotnet/machinelearning/issues/3089","RelatedDescription":"Open issue \"Model.ConvertToOnnx() fails for Classification pipelines if non-default Features column name is used\" (#3089)"},{"Id":"425139874","IsPullRequest":true,"CreatedAt":"2019-03-25T23:29:09","Actor":"rogancarr","Number":"3084","RawContent":null,"Title":"Fixing API call in LoadImages sample","State":"closed","Body":"The `LoadImages` sample had the wrong API call. This PR fixes it so that the sample runs correctly.\r\n\r\nFixes #3079 ","Url":"https://github.com/dotnet/machinelearning/pull/3084","RelatedDescription":"Closed or merged PR \"Fixing API call in LoadImages sample\" (#3084)"},{"Id":"425086785","IsPullRequest":false,"CreatedAt":"2019-03-25T23:29:09","Actor":"yaeldekel","Number":"3079","RawContent":null,"Title":"DnnFeaturizeImage sample doesn't match the signature in the current API","State":"closed","Body":"The API for `LoadImage` is\r\n\r\n```\r\nLoadImages(string outputColumnName, string imageFolder, string inputColumnName = null)\r\n```\r\n\r\nbut in the sample it is used like this:\r\n\r\n```\r\nmlContext.Transforms.LoadImages(imagesFolder, \"ImageObject\", \"ImagePath\")\r\n```\r\n\r\nOne of them should be fixed, not sure which one? @TomFinley , @artidoro , @wschin \r\nI kind of like the second option (the folder first, output and input column names together).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3079","RelatedDescription":"Closed issue \"DnnFeaturizeImage sample doesn't match the signature in the current API\" (#3079)"},{"Id":"425140985","IsPullRequest":true,"CreatedAt":"2019-03-25T23:10:01","Actor":"sfilipi","Number":"3085","RawContent":null,"Title":"fixing build warnings.","State":"closed","Body":"The use of the fields in the Hash sample introduced build warnings. \r\nChanging to properties to avoid warnings. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3085","RelatedDescription":"Closed or merged PR \"fixing build warnings.\" (#3085)"},{"Id":"425125712","IsPullRequest":false,"CreatedAt":"2019-03-25T22:22:24","Actor":"codemzs","Number":"3081","RawContent":null,"Title":"Move transform catalog extensions into its own class in experimental nuget.","State":"closed","Body":"Move transform catalog extensions into its own class in experimental nuget.","Url":"https://github.com/dotnet/machinelearning/issues/3081","RelatedDescription":"Closed issue \"Move transform catalog extensions into its own class in experimental nuget.\" (#3081)"},{"Id":"425125129","IsPullRequest":true,"CreatedAt":"2019-03-25T22:22:24","Actor":"codemzs","Number":"3080","RawContent":null,"Title":"Move transform catalog extensions into its own file and class in experimental nuget.","State":"closed","Body":"Transform catalog extension methods are misplaced in MlContextExtensions.cs file. They need to go in a file of its own.\r\n\r\nfixes #3081","Url":"https://github.com/dotnet/machinelearning/pull/3080","RelatedDescription":"Closed or merged PR \"Move transform catalog extensions into its own file and class in experimental nuget.\" (#3080)"},{"Id":"425135348","IsPullRequest":false,"CreatedAt":"2019-03-25T22:01:32","Actor":"daholste","Number":"3083","RawContent":null,"Title":"Cannot access leaf nodes of trained trees","State":"open","Body":"In this review https://github.com/dotnet/machinelearning/pull/2753, I notice the methods to traverse thru trained tree ensembles have been removed from the public API\r\n\r\n@wschin @TomFinley \r\n\r\nI understand the logic for removing.\r\n\r\nHowever, in our forked copy of SMAC, we require / have been using this functionality. Any advice on how to proceed?","Url":"https://github.com/dotnet/machinelearning/issues/3083","RelatedDescription":"Open issue \"Cannot access leaf nodes of trained trees\" (#3083)"},{"Id":"425075954","IsPullRequest":true,"CreatedAt":"2019-03-25T20:31:23","Actor":"TomFinley","Number":"3078","RawContent":null,"Title":"Internalize LpNorm column options.","State":"closed","Body":"Small refinement of the PR #2959. I noticed that a few of the `ColumnOptions` classes, including a base class, were still appearing in the public API. Also hide the `IReadOnlyList<...>` to access it through the columns as we do not want to do that per @Ivanidzo4ka.","Url":"https://github.com/dotnet/machinelearning/pull/3078","RelatedDescription":"Closed or merged PR \"Internalize LpNorm column options.\" (#3078)"},{"Id":"425024171","IsPullRequest":false,"CreatedAt":"2019-03-25T20:11:48","Actor":"jappenzeller","Number":"3077","RawContent":null,"Title":".NET Core OneHotEncoding Error","State":"closed","Body":"### System information\r\n.Net Core 2.1\r\nMicrosoft.ML v0.11.0\r\n\r\n### Issue\r\n\r\nOneHotEncoding that works in the non core version was fine.  Now I get a type error.\r\nPreview of the data seems correct.\r\n\r\n### Source code / logs\r\nRelevant code snippets and error message.\r\n\r\nLoader\r\nnew TextLoader.Column(\"RECORDTYPEID\",DataKind.String,3),\r\n\r\nPipeline\r\n.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"RECORDTYPEID\"))\r\n\r\n.Append(mlContext.Transforms.Concatenate(\"Features\",\r\n...\r\n\"RECORDTYPEID\",\r\n\r\nError Message on this line of code,\r\nvar model = pipeline.Fit(trainingDataView);\r\n\r\nSystem.InvalidOperationException: 'Column 'RECORDTYPEID' has values of R4which is not the same as earlier observed type of R8.'\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3077","RelatedDescription":"Closed issue \".NET Core OneHotEncoding Error\" (#3077)"},{"Id":"424809804","IsPullRequest":false,"CreatedAt":"2019-03-25T09:52:58","Actor":"matnatx","Number":"3076","RawContent":null,"Title":"Setting Epoch & Batch Size Hyper Parameters","State":"open","Body":"Hi,\r\n\r\nIs there a way to set Hyper Parameters such as EPOCH numbers and Batch Size for the LogisticRegression Trainer? What is the default if these aren't set?\r\n\r\nThanks!\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3076","RelatedDescription":"Open issue \"Setting Epoch & Batch Size Hyper Parameters\" (#3076)"},{"Id":"424770910","IsPullRequest":false,"CreatedAt":"2019-03-25T08:09:27","Actor":"1amirjalai","Number":"3075","RawContent":null,"Title":"Schema comprehension in ML.NET needs more detailed document","State":"open","Body":"Areas that need to be covered in schema comprehension in ML.NET\r\n\r\n\r\n1. LoadFromEnumerable is not covered very well. for example how should huge amount of data be read from elasticsearh or sql ? \r\n\r\n- should that huge amount be converted to csv and then read it from csv using textloader?\r\n- should all of that data be presented in the memory? for example write a code like this:\r\n```\r\n  var dataAsList = GetAllDataFromSQLAndPutItIntoAList();\r\n\r\n  var trainingDataView= mlContext.Data.LoadFromEnumerable<dataType>(dataAsList);\r\n\r\n  trainingDataView = mlContext.Data.Cache(trainingDataView);\r\n\r\n  var pipeline = mlContext.Transforms.CreatePipeLine();\r\n\r\n  ITransformer model = pipeline.Fit(trainingDataView);\r\n```\r\n[Microsoft doc](GetChurnInfo) has an sql example. should all the data be loaded into a list at GetChurnInfo()?\r\n\r\n```\r\n// Create a new context for ML.NET operations. It can be used for exception tracking and logging,\r\n// as a catalog of available operations and as the source of randomness.\r\nvar mlContext = new MLContext();\r\n\r\n// Step one: read the data as an IDataView.\r\n// Let's assume that 'GetChurnData()' fetches and returns the training data from somewhere.\r\nIEnumerable<CustomerChurnInfo> churnData = GetChurnInfo();\r\n\r\n// Turn the data into the ML.NET data view.\r\n// We can use CreateDataView or CreateStreamingDataView, depending on whether 'churnData' is an IList,\r\n// or merely an IEnumerable.\r\nvar trainData = mlContext.Data.LoadFromEnumerable(churnData);\r\n```\r\n\r\n- is there any solution for large amounts of data that are not in text file format?\r\n\r\n2. streaming data. as \r\n\r\n> CreateStreamingDataView \r\n\r\nis out dated so it should be replaced with new detail [here](https://github.com/dotnet/machinelearning/blob/master/docs/code/SchemaComprehension.md)","Url":"https://github.com/dotnet/machinelearning/issues/3075","RelatedDescription":"Open issue \"Schema comprehension in ML.NET needs more detailed document\" (#3075)"},{"Id":"424467598","IsPullRequest":true,"CreatedAt":"2019-03-23T06:00:42","Actor":"artidoro","Number":"3074","RawContent":null,"Title":"ITrivialEstimator (Approach 1)","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3074","RelatedDescription":"Closed or merged PR \"ITrivialEstimator (Approach 1)\" (#3074)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-27T05:30:33.4955594Z","RunDurationInMilliseconds":574}