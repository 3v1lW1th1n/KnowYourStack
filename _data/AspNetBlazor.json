{"Data":{"Issues":{"Issues":[{"Id":"316616223","IsPullRequest":false,"CreatedAt":"2018-04-22T21:46:00","Actor":"Andrzej-W","Number":"652","RawContent":null,"Title":"Obsolete <nobr> HTML element in Shared/SurveyPrompt.cshtml","State":"open","Body":"I'm using ASP.NET Core Blazor Language Services version 15.7.10242. I have created a new project: Blazor (ASP.NET Core Hosted). In SurveyPrompt.cshtml file I see `<nobr>` HTML element. According to this page [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr) it is obsolete. Recommended solution is `<span style=\"white-space: nowrap\">Long line with no breaks</span>`\r\n\r\nReal question is: do you really need this behaviour (nowrap)?","Url":"https://github.com/aspnet/Blazor/issues/652","RelatedDescription":"Open issue \"Obsolete <nobr> HTML element in Shared/SurveyPrompt.cshtml\" (#652)"},{"Id":"316608815","IsPullRequest":false,"CreatedAt":"2018-04-22T20:05:39","Actor":"thild","Number":"651","RawContent":null,"Title":"UI don't get updated on long run process","State":"open","Body":"I'm working on a graph search project coded in C# that uses cytoscape.js to render the graphs, paths, and highlighted nodes. I want to render the paths and highlight the nodes in a step-by-step fashion. When a node is visited, an event is raised from the lib and captured by a Blazor component that interop with cytoscape.js. However, apparently the UI thread is blocked until the end of the Blazor rendering cycle even calling StateHasChanged on every event. Can I call async methods from UI?\r\n\r\nThis is my run method on Index.cshtml.\r\n\r\n```\r\nvoid Run()\r\n{\r\n    Graph graph = GraphIO.Read(GraphFile);\r\n    var dijkstra = new Dijkstra(graph);\r\n    dijkstra.Visited = (key) => {\r\n        System.Threading.Thread.Sleep(1000);\r\n        Interop.MarkNode(key);\r\n        StateHasChanged();\r\n    };\r\n    var result = dijkstra.Process(0, 9); //result contains the shortest path\r\n    Result = result.ToString();\r\n    Interop.DrawPath(result);\r\n}\r\n\r\n```","Url":"https://github.com/aspnet/Blazor/issues/651","RelatedDescription":"Open issue \"UI don't get updated on long run process\" (#651)"},{"Id":"316595395","IsPullRequest":false,"CreatedAt":"2018-04-22T17:02:49","Actor":"chanan","Number":"650","RawContent":null,"Title":"Need the concept of react context","State":"open","Body":"I need to be able to send properties down to child components that the user of my library supplies. For example:\r\n```\r\n<Dropdown>\r\n        <DropdownToggle>Dropdown</DropdownToggle>\r\n        <DropdownMenu>\r\n            <DropdownItem Href=\"#\">Action</DropdownItem>\r\n        </DropdownMenu>\r\n</Dropdown>\r\n```\r\n\r\nIn this example, Dropdown holds a a variable IsOpen that needs to be passed down to DropdownToggle and DropdownMenu. In react this is done by setting context in Dropdown and having the child components read the context.\r\n\r\nIs there a current of passing down properties to child elements, or can a similar concept of context be added to Blazor?","Url":"https://github.com/aspnet/Blazor/issues/650","RelatedDescription":"Open issue \"Need the concept of react context\" (#650)"},{"Id":"316552973","IsPullRequest":false,"CreatedAt":"2018-04-22T14:38:00","Actor":"chanan","Number":"648","RawContent":null,"Title":"input tag doesnt allow ChildContent","State":"closed","Body":"This works:\r\n`<button onclick=\"@_onclick\" type=\"button\" class=\"@className\">@ChildContent</button>`\r\n\r\nThis does not:\r\n`<input onclick=\"@_onclick\" type=\"button\" class=\"@className\">@ChildContent</input>`\r\n\r\nThe error:\r\nFound a malformed 'input' tag helper. Tag helpers must have a start and end tag or be self closing.\r\n","Url":"https://github.com/aspnet/Blazor/issues/648","RelatedDescription":"Closed issue \"input tag doesnt allow ChildContent\" (#648)"},{"Id":"316568301","IsPullRequest":false,"CreatedAt":"2018-04-22T10:44:16","Actor":"montyclt","Number":"649","RawContent":null,"Title":"[PROPOSAL] Support DOM properties binding as HTML attribute.","State":"open","Body":"A DOM object has attributes (set by HTML attributes) and properties, set or get by dot notation in DOM object.\r\n\r\nAn example:\r\n\r\n```\r\n// HTML\r\n<input id=\"name\" value=\"Monty\" />\r\n\r\n// Assume I render the page and change the content of textbox from Monty by Anna.\r\n\r\n// JavaScript\r\nvar name = document.getElementById(\"name\");\r\n\r\nname.getAttribute(\"value\"); // Monty\r\nname.value; // Anna\r\n```\r\n\r\nAs see, the value of the attribute is not the same than the property.\r\n\r\nBecause the text of textbox rendered by `input` tag is in the property and not in the HTML attribute, if we bind the attribute and change the value of the bound field, nothing occurs in rendered textfield.\r\n\r\n```\r\n<input value\"@Name\" id=\"name\" />\r\n\r\n@functions\r\n{\r\n    public string Name = \"Monty\";\r\n}\r\n ```\r\nIf we use value instead of bind attribute, if `Name` field change, nothing is reflected in rendered textfield.\r\n\r\nI propose a syntax to bind field to DOM property.\r\n\r\nAn possible example:\r\n```\r\n<input $value=\"@Name\" />\r\n```\r\nThis syntax, bind `Name` field to DOM property instead of HTML attribute.\r\n\r\nWhy?\r\n\r\n- Consistency, instead of new attribute called `bind`, you know what is binding really.\r\n- Some webcomponents, use new properties, for example:\r\n```\r\n// HTML\r\n<my-calendar id=\"calendar\" />\r\n\r\n// JavaScript\r\nvar calendar = document.getElementById(\"calendar\");\r\ncalendar.day; // 13\r\ncalendar.month; //4\r\ncalendar.year; // 2017\r\ncalendar.value; // undefined\r\n```\r\n\r\nIn this case, I can't use `bind` attribute, but I can do:\r\n```\r\n<my-calendar $day=\"Day\" $month=\"Month\" $year=\"Year\" />\r\n\r\n@functions\r\n{\r\n    public int Day { get; set; }\r\n    public int Month { get; set; }\r\n    public int Year { get; set; }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/649","RelatedDescription":"Open issue \"[PROPOSAL] Support DOM properties binding as HTML attribute.\" (#649)"},{"Id":"316546361","IsPullRequest":false,"CreatedAt":"2018-04-22T03:49:07","Actor":"chanan","Number":"647","RawContent":null,"Title":"Can't name a tag the same name as an html element","State":"open","Body":"I created a Button component (upper case \"B\") and placed the following html in it:\r\n\r\n```html\r\n<button type=\"button\" class=\"btn btn-primary\">Primary</button>\r\n```\r\n\r\nPlaced the Button in a page: `<Button />`\r\n\r\nWhen the page was rendered I got an error that Button doesn't have a property named type. (first attribute in the button html above).\r\n\r\nWorkaround: renamed Button to something else.\r\n\r\nFix: Perhaps Blazor should only allow lower case html tags and upper case custom tags (like react)","Url":"https://github.com/aspnet/Blazor/issues/647","RelatedDescription":"Open issue \"Can't name a tag the same name as an html element\" (#647)"},{"Id":"316540267","IsPullRequest":false,"CreatedAt":"2018-04-22T01:32:31","Actor":"DanielProgrammer007","Number":"646","RawContent":null,"Title":"Instantiating/enumerating components","State":"open","Body":"Hi,\r\n\r\nCouple of questions:\r\n\r\n1. How can I instantiate a component at run-time and attach it to a container?\r\n\r\n2. Is there a way to list all components in a given container?\r\n\r\n3. I'm not sure I understand how components can interact with each other. I read the docs section on parent/child components, but how can two completely independent components talk to each other? A common scenario is when there are multiple components inside a TabPage component where a component inside tab A needs to notify a component in tab B about some change. Also, I'm assuming components can trigger their own events?\r\n\r\n4. I've noticed that the initial load takes a few seconds even on localhost, is this going to improve once the entire app is compiled directly to WASM? Is this something that you are actively working on? I don't think the initial load time matters that much for an SPA, but I'm looking at potentially integrating Blazor into my existing WebForms app. I think if users attempt to access a simple page (containing some Blazor components) that takes a few seconds to interpret, that could be a problem.\r\n\r\nAdmittedly I'm not too familiar with other SPA frameworks (React etc), so maybe questions 1-3 have obvious answers. I think it would be very beneficial if in the future releases (once Blazor somewhat matures) your team can provide guidance on how to tackle more complex UI cases, including best practices for creating custom reusable components (e.g. GridView, TreeView etc) - ideally, this would be packaged as a NuGet library of Microsoft's set of basic components.\r\n\r\nAnyway, this project is awesome!\r\n\r\nThank you,\r\nDaniel","Url":"https://github.com/aspnet/Blazor/issues/646","RelatedDescription":"Open issue \"Instantiating/enumerating components\" (#646)"},{"Id":"316525299","IsPullRequest":false,"CreatedAt":"2018-04-21T21:04:19","Actor":"discostu105","Number":"645","RawContent":null,"Title":"Reading local files","State":"open","Body":"Blazor newbie here.\r\n\r\nI'm trying to read files locally (browser-side) and do something with them in C#.\r\n\r\nI'm using the `<input type=\"file\" onchange=\"@OnChange\" />` tag. In my OnChange method I can only receive the filename, but cannot read it:\r\n```\r\n    void OnChange(UIEventArgs eventArgs) {\r\n        var changeEventArgs = (UIChangeEventArgs)eventArgs;\r\n        var filepath = changeEventArgs.Value.ToString();  // returns C:\\fakepath\\test.txt\r\n        data = System.IO.File.ReadAllText(filepath);   // System.IO.FileNotFoundException: Could not find file \"/C:\\fakepath\\test.txt\"\r\n    }\r\n```\r\n\r\nHow can I do this? An alternative would be to implement a javascript handler, then use [HTML5 File API](https://www.html5rocks.com/en/tutorials/file/dndfiles/) to read the file, then pass the raw bytes over to a C# method via custom C# binding. Would that be the way to go, or should this be easier?\r\n","Url":"https://github.com/aspnet/Blazor/issues/645","RelatedDescription":"Open issue \"Reading local files\" (#645)"},{"Id":"316524251","IsPullRequest":true,"CreatedAt":"2018-04-21T20:50:48","Actor":"RyoukoKonpaku","Number":"644","RawContent":null,"Title":"SimpleJson Add support for camelCase json to .NET and vice versa","State":"open","Body":"## What was added/changed\r\nAdded support for Deserializing JSON which has camel case properties which is common on many apis. This also adds support for Serializing .NET Objects to JSON that has camel case properties.\r\n\r\nAlso changed some Tests on JsonUtilTest to adhere to the changes and added some which covers the changes. Although I could not find a way to add a test that confirms that the default is ```CamelCase``` since the tests run isn't ordered.\r\n## Note\r\nThe setting can be set to either ```None``` or ```CamelCase``` via ```JsonUtil.SetParsingStrategy``` and the default value is ```CamelCase``` as discussed #627 at the end. Though it can be changed to ```None``` if not wanted.","Url":"https://github.com/aspnet/Blazor/pull/644","RelatedDescription":"Open PR \"SimpleJson Add support for camelCase json to .NET and vice versa\" (#644)"},{"Id":"316507952","IsPullRequest":false,"CreatedAt":"2018-04-21T17:16:42","Actor":"chanan","Number":"643","RawContent":null,"Title":"blazor-component in the DOM can interfere with CSS","State":"closed","Body":"Hi,\r\n\r\nI am creating a library of components for bootstrap 4 (a port of https://reactstrap.github.io/). I created components for Row and Col (which become <div class=\"row\"> and <div class=\"col\">). The problem is that Blazor adds tags around library components: <blazor-component> which interferes with bootstrap's css. \r\n\r\nReproduce:\r\n1. Follow the directions to create a BlazorApp with BlazorLib1. \r\n2. Follow the directions for adding Component1 to index.cshtml\r\n3. View the DOM for index,cshtml\r\n4. Note the blazor-component wrapping the html for Component1\r\n\r\nExpected Result:\r\nNo added elements should be added to the DOM wrapping the html for Component1","Url":"https://github.com/aspnet/Blazor/issues/643","RelatedDescription":"Closed issue \"blazor-component in the DOM can interfere with CSS\" (#643)"},{"Id":"316488100","IsPullRequest":false,"CreatedAt":"2018-04-21T14:01:05","Actor":"RyoukoKonpaku","Number":"642","RawContent":null,"Title":"Documentation for Custom Made Components","State":"closed","Body":"## Qol Feature Suggestion\r\nRight now adding documentation for components to show up on intellisense for Blazor is not possible as you cannot decorate the generated class with XML documentation comments. This is important for 3rd party component creators in the future so that users can at least lessen time reading documentation on another place (e.g. Website) and let the user know what does that component do. \r\n\r\nUsing ```@inherits``` directive only produces the documentation on the code-behind class as well, which strangely enough pop's up on the intellisense when you want to add components (This will probably be confusing to new users who would use 3rd party components that uses code behind).\r\n\r\nThis isn't really that important compared to other issues so I'd guess I'll leave this out here for tracking if it isn't tracked already.\r\n\r\n#### Sidenote\r\nDoes partial class support in the future solve this though?","Url":"https://github.com/aspnet/Blazor/issues/642","RelatedDescription":"Closed issue \"Documentation for Custom Made Components\" (#642)"},{"Id":"316484494","IsPullRequest":false,"CreatedAt":"2018-04-21T13:59:22","Actor":"aguacongas","Number":"641","RawContent":null,"Title":"JS->CS interop findassembly throw \"Uncaught TypeError: assembly_load is not a function\"","State":"closed","Body":"I defined this class in my project\r\n\r\n``` csharp\r\npublic static class OnKeyUp\r\n{\r\n    public static Action<string> Action { get; set; }\r\n    public static void Handler(string value)\r\n    {\r\n         Action?.Invoke(value);\r\n    }\r\n}\r\n```\r\nAnd this script in CSInterop.js referenced in index.html\r\n\r\n``` js\r\n    const assemblyName = 'AssemblyName';\r\n    const namespace = 'Namespace';\r\n    const typeName = 'OnKeyUp';\r\n    const methodName = 'Handler';\r\n\r\n    const onkeyupMethod = Blazor.platform.findMethod(\r\n        assemblyName,\r\n        namespace,\r\n        typeName,\r\n        methodName\r\n    );\r\n\r\n    function onKeyUp(element, evt) {\r\n        const value = Blazor.platform.toDotNetString(element.value)\r\n        Blazor.platform.callMethod(onkeyupMethod, null, [value]);\r\n    }\r\n```\r\nWhere *AssemblyName* and *Namespace* are replaced according to my project names.  \r\n\r\nWhen I try to use it in a components :  \r\n``` html\r\n<input class=\"form-control\" name=\"search\" value=@therm onkeyup=\"onKeyUp(this, event);\" />\r\n@functions {\r\n    string therm;\r\n\r\n    protected override void OnInit()\r\n    {\r\n        OnKeyUp.Action = value =>\r\n        {\r\n            therm = value;\r\n            Search(value);\r\n            StateHasChanged();\r\n        };\r\n    }\r\n}\r\n```\r\nConsole log error :  \r\n\r\n> Uncaught TypeError: assembly_load is not a function\r\n>     at findAssembly (MonoPlatform.ts:134)\r\n>     at findType (MonoPlatform.ts:147)\r\n>     at Object.findMethod (MonoPlatform.ts:160)\r\n>     at CSInterop.js:7\r\n>     at CSInterop.js:21\r\n> \r\n","Url":"https://github.com/aspnet/Blazor/issues/641","RelatedDescription":"Closed issue \"JS->CS interop findassembly throw \"Uncaught TypeError: assembly_load is not a function\"\" (#641)"},{"Id":"316452058","IsPullRequest":false,"CreatedAt":"2018-04-21T11:33:30","Actor":"mellamokb","Number":"639","RawContent":null,"Title":"Symbol rename text corruption and extension crash.","State":"closed","Body":"If you attempt to do a symbol rename from a Razor page you get all sorts of strange results.  Here is the test page I am working on\r\n\r\n```\r\n@using BlazorPlayground.Shared\r\n@using BlazorPlayground.Shared.Model\r\n@page \"/categories\"\r\n@inject HttpClient Http\r\n\r\n@if (categories == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <fieldset>\r\n        <legend>Search</legend>\r\n        <div class=\"form-horizontal\">\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"Namefilter\">Name</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"NameFilter\" name=\"NameFilter\" bind=\"@NameFilter\" /></div>\r\n            </div>\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"DescriptionFilter\">Description</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"DescriptionFilter\" name=\"DescriptionFilter\" bind=\"@DescriptionFilter\" /></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-offset-2\"><button>Search</button></div>\r\n    </fieldset>\r\n\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Description</th>\r\n                <th>Picture</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var category in GetCategories())\r\n            {\r\n                <tr>\r\n                    <td><b>@category.CategoryID</b></td>\r\n                    <td>@category.CategoryName</td>\r\n                    <td>@category.Description</td>\r\n                    <td><img src=\"@(string.Format(\"api/Category/Picture/{0}\", category.CategoryID))\" /></td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n\r\n    <p>NameFilter: @NameFilter</p>\r\n    <p>Description: @DescriptionFilter</p>\r\n    <p>Categories: @categories.Length</p>\r\n}\r\n\r\n@functions {\r\n    public string NameFilter { get; set; }\r\n    public string DescriptionFilter { get; set; }\r\n    public CategoryTransfer[] categories { get; set; }\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        categories = await Http.GetJsonAsync<CategoryTransfer[]>(\"/api/Category/All\");\r\n    }\r\n\r\n    protected IEnumerable<CategoryTransfer> GetCategories()\r\n    {\r\n        Console.WriteLine(\"GetCategories()\");\r\n        var result = categories.AsQueryable();\r\n        if (!string.IsNullOrWhiteSpace(NameFilter)) result = result.Where(x => x.CategoryName.IndexOf(NameFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        if (!string.IsNullOrWhiteSpace(DescriptionFilter)) result = result.Where(x => x.Description.IndexOf(DescriptionFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nIf you attempt to rename one of the `categories` variable, it appears to work.  It correctly highlights all the references.  However as you type, the text gets corrupted, or it prevents you from typing, or sometimes you just get an outright extension crash.","Url":"https://github.com/aspnet/Blazor/issues/639","RelatedDescription":"Closed issue \"Symbol rename text corruption and extension crash.\" (#639)"},{"Id":"316453438","IsPullRequest":false,"CreatedAt":"2018-04-21T02:17:36","Actor":"mellamokb","Number":"640","RawContent":null,"Title":"Render NRE exception with lambda","State":"open","Body":"Continuing with the same example page I'm testing with, the filter code is causing an exception to be logged to console when attempting to perform a search.\r\n\r\n```\r\n@using BlazorPlayground.Shared\r\n@using BlazorPlayground.Shared.Model\r\n@page \"/categories\"\r\n@inject HttpClient Http\r\n\r\n@if (categories == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <fieldset>\r\n        <legend>Search</legend>\r\n        <div class=\"form-horizontal\">\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"Namefilter\">Name</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"NameFilter\" name=\"NameFilter\" bind=\"@NameFilter\" /></div>\r\n            </div>\r\n            <div class=\"form-group-sm col-sm-6\">\r\n                <label class=\"control-label col-sm-4\" for=\"DescriptionFilter\">Description</label>\r\n                <div class=\"col-sm-8\"><input class=\"form-control\" type=\"text\" id=\"DescriptionFilter\" name=\"DescriptionFilter\" bind=\"@DescriptionFilter\" /></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-offset-2\"><button>Search</button></div>\r\n    </fieldset>\r\n\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Description</th>\r\n                <th>Picture</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @foreach (var category in GetCategories())\r\n            {\r\n                <tr>\r\n                    <td><b>@category.CategoryID</b></td>\r\n                    <td>@category.CategoryName</td>\r\n                    <td>@category.Description</td>\r\n                    <td><img src=\"@(string.Format(\"api/Category/Picture/{0}\", category.CategoryID))\" /></td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n\r\n    <p>NameFilter: @NameFilter</p>\r\n    <p>Description: @DescriptionFilter</p>\r\n    <p>Categories: @categories.Length</p>\r\n}\r\n\r\n@functions {\r\n    public string NameFilter { get; set; }\r\n    public string DescriptionFilter { get; set; }\r\n    public CategoryTransfer[] categories { get; set; }\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        categories = await Http.GetJsonAsync<CategoryTransfer[]>(\"/api/Category/All\");\r\n    }\r\n\r\n    protected IEnumerable<CategoryTransfer> GetCategories()\r\n    {\r\n        Console.WriteLine(\"GetCategories()\");\r\n        var result = categories.AsQueryable();\r\n        if (!string.IsNullOrWhiteSpace(NameFilter)) result = result.Where(x => x.CategoryName.IndexOf(NameFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        if (!string.IsNullOrWhiteSpace(DescriptionFilter)) result = result.Where(x => x.Description.IndexOf(DescriptionFilter.Trim(), StringComparison.InvariantCultureIgnoreCase) >= 0);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nWhen I attempt to run this code, it loads fine initially. However when I type in a filter and it runs `GetCategories` again with either Name or Description Filter populated, the following exception is logged to console.\r\n\r\n```\r\nUncaught Error: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeRunDelegateCtor (System.Type delegateType) <0x1badf88 + 0x00284> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.GetRunDelegateCtor (System.Type delegateType) <0x1ba79a8 + 0x00048> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) <0x1ba7820 + 0x0000e> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) <0x1ba6f20 + 0x00024> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () <0x1ba6db0 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile (System.Boolean preferInterpretation) <0x1f3a290 + 0x00018> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile () <0x1f3a258 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].GetEnumerator () <0x1d13a48 + 0x00030> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].System.Collections.Generic.IEnumerable<T>.GetEnumerator () <0x1d13438 + 0x00008> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at BlazorPlayground.Client.Pages.Categories.BuildRenderTree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1c97810 + 0x00988> in <f3511b7758e24314bdf26d3ca23eda2b>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d87d0 + 0x0006c> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d8378 + 0x00040> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19d59f0 + 0x00048> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e6c0 + 0x00068> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e558 + 0x00020> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (System.String eventDescriptorJson, System.String eventArgsJson) <0x1d1b798 + 0x0005a> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeRunDelegateCtor (System.Type delegateType) <0x1badf88 + 0x00284> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.GetRunDelegateCtor (System.Type delegateType) <0x1ba79a8 + 0x00048> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) <0x1ba7820 + 0x0000e> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) <0x1ba6f20 + 0x00024> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () <0x1ba6db0 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile (System.Boolean preferInterpretation) <0x1f3a290 + 0x00018> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.Expressions.Expression`1[TDelegate].Compile () <0x1f3a258 + 0x0000a> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].GetEnumerator () <0x1d13a48 + 0x00030> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at System.Linq.EnumerableQuery`1[T].System.Collections.Generic.IEnumerable<T>.GetEnumerator () <0x1d13438 + 0x00008> in <2f32b75d24f74a57ba299b78e971fb01>:0 \r\n  at BlazorPlayground.Client.Pages.Categories.BuildRenderTree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1c97810 + 0x00988> in <f3511b7758e24314bdf26d3ca23eda2b>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d87d0 + 0x0006c> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d8378 + 0x00040> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19d59f0 + 0x00048> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e6c0 + 0x00068> in <90a6a0a0a09d4efabdb98ab543854719>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f1e558 + 0x00020> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (System.String eventDescriptorJson, System.String eventArgsJson) <0x1d1b798 + 0x0005a> in <7bb47277895b48848360a8e56a0dcf02>:0 \r\n    at Object.callMethod (MonoPlatform.ts:70)\r\n    at raiseEvent (BrowserRenderer.ts:304)\r\n    at EventDelegator.onEvent (BrowserRenderer.ts:17)\r\n    at EventDelegator.onGlobalEvent (EventDelegator.ts:77)\r\n```\r\n\r\nI've also verified that this code works correctly if I put it in the Server-side in a controller and call it as an API, instead of embedded in a Razor page.  So the code should be functional.","Url":"https://github.com/aspnet/Blazor/issues/640","RelatedDescription":"Open issue \"Render NRE exception with lambda\" (#640)"},{"Id":"316442062","IsPullRequest":false,"CreatedAt":"2018-04-21T00:13:30","Actor":"Andrzej-W","Number":"638","RawContent":null,"Title":"Should we use .NET Core 2.0 or 2.1 for Blazor app? Doc inconsistency?","State":"closed","Body":"On this page [https://blazor.net/docs/get-started.html](https://blazor.net/docs/get-started.html) it is written that we have to install .NET Core **2.1** Preview 2 SDK. Then in \"create your first project\" in step 2 it is written: Make sure .NET Core and ASP.NET Core **2.0** are selected at the top.","Url":"https://github.com/aspnet/Blazor/issues/638","RelatedDescription":"Closed issue \"Should we use .NET Core 2.0 or 2.1 for Blazor app? Doc inconsistency?\" (#638)"},{"Id":"316439440","IsPullRequest":false,"CreatedAt":"2018-04-20T23:34:59","Actor":"danroth27","Number":"637","RawContent":null,"Title":"Add instructions for using a nightly build of the Blazor Language Service VSIX","State":"closed","Body":"![image](https://user-images.githubusercontent.com/1874516/39077607-2729edb2-44b8-11e8-8798-701ba632fdd4.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/637","RelatedDescription":"Closed issue \"Add instructions for using a nightly build of the Blazor Language Service VSIX\" (#637)"},{"Id":"316390543","IsPullRequest":false,"CreatedAt":"2018-04-20T22:01:49","Actor":"mattfraley1","Number":"635","RawContent":null,"Title":"Getting started demo shows blank page","State":"closed","Body":"I have been following the [getting started article](http://blazor.net/docs/get-started.html), but when I run it, all I get is a blank page. I see the \"Loading...\" notice, then it goes away, but nothing else shows up.\r\n\r\nI have tried in IE, Edge, Firefox, Chrome etc. I have made sure I don't have any blocking like uBlock. When I look at the network traffic in developer tools, everything is downloading fine. I have tried running with, and without debugger. I have checked event logs, but don't see anything related. I have also tried the core hosted version.\r\n\r\nAlso note, that I installed all the items from the article this morning, so I have all the latest bits.\r\n\r\nIs there some way I can debug the issue or something else I should try?","Url":"https://github.com/aspnet/Blazor/issues/635","RelatedDescription":"Closed issue \"Getting started demo shows blank page\" (#635)"},{"Id":"316338702","IsPullRequest":true,"CreatedAt":"2018-04-20T21:49:13","Actor":"SteveSandersonMS","Number":"633","RawContent":null,"Title":"Fix diffing when \"bind\" is combined with conditional attribute. Fixes #624","State":"closed","Body":"The issue was that we were using incorrect logic to update the indices during the attribute diffing. The problem only manifests given a very specific diffing scenario because of a fluke in how the memory for a `RenderTreeFrame` is laid out.\r\n\r\nFortunately the fixed code is much simpler. And we get a minor perf boost for free.","Url":"https://github.com/aspnet/Blazor/pull/633","RelatedDescription":"Closed or merged PR \"Fix diffing when \"bind\" is combined with conditional attribute. Fixes #624\" (#633)"},{"Id":"316418690","IsPullRequest":true,"CreatedAt":"2018-04-20T21:35:00","Actor":"javiercn","Number":"636","RawContent":null,"Title":"[WIP] Routing cleanup and feedback","State":"open","Body":"Addresses feedback from https://github.com/aspnet/Blazor/pull/266:\r\n* Consider assemblies as candidates when any of their dependencies references the blazor assembly.\r\n* Provides an extensibility endpoint for implementing your own custom logic when subclassing the router component.\r\n* Makes RouteTable.Routes get only.\r\n* Removes the unnecessary page directive from the links component in the basic test app.\r\n* Caches route tables per entry assembly\r\n* Discovers routes with [Route] applied to a base class","Url":"https://github.com/aspnet/Blazor/pull/636","RelatedDescription":"Open PR \"[WIP] Routing cleanup and feedback\" (#636)"},{"Id":"316372369","IsPullRequest":false,"CreatedAt":"2018-04-20T18:54:38","Actor":"NeilMacMullen","Number":"634","RawContent":null,"Title":"HttpClient.PostJsonAsync appears not to fetch from http apis","State":"closed","Body":"Using Blazor 0.2.1 the following code fails to retrieve information:\r\n\r\n    var url = TrackService.ServiceUrl(TrackService.TsService.Echo);\r\n    var req = new EchoRequestDto {Echo = \"hello world\"};\r\n    var resp = await _httpClient.PostJsonAsync<EchoResponseDto>(url, req);\r\n\r\nwhen the url is http rather than https.  The same service (and dtos) can be used from a .net framework application using WebClient.  The code above does work for other services which are https.  Unfortunately I haven't yet found a service which can be tested over both http and https so don't have a direct comparison.  The error returned is....\r\n\r\n> \r\nSystem.Net.Http.HttpRequestException: TypeError: Failed to fetch. at Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler+<SendAsync>d__8.MoveNext () <0x1dede30 + 0x0039a> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 --- End of stack trace from previous location where exception was thrown --- at System.Net.Http.HttpClient+<SendAsyncWorker>d__47.MoveNext () <0x1ddb2a8 + 0x0017e> in <ddfe03af15f14d3e8b54c58c0b39de11>:0 --- End of stack trace from previous location where exception was thrown --- at Microsoft.AspNetCore.Blazor.HttpClientJsonExtensions+<SendJsonAsync>d__6`1[T].MoveNext () <0x1d7ab60 + 0x00100> in <8a8022566b074cca8a70e10050945cdd>:0 --- End of stack trace from previous location where exception was thrown --- at BlazorWeb.TestClass+<GetDevices>d__3.MoveNext () <0x1d70a98 + 0x00154> in <304208b16f254ea3b31504e888d5b249>:0 TypeError: Failed to fetch.\r\n","Url":"https://github.com/aspnet/Blazor/issues/634","RelatedDescription":"Closed issue \"HttpClient.PostJsonAsync appears not to fetch from http apis\" (#634)"},{"Id":"316107435","IsPullRequest":false,"CreatedAt":"2018-04-20T16:55:27","Actor":"mellamokb","Number":"624","RawContent":null,"Title":"Computed disabled attribute does not rerender.","State":"closed","Body":"I have tested a simple form concept.  There is a checkbox called \"Active\", which when you check the following fields become enabled.\r\n\r\n```\r\n    <div class=\"form-group row\">\r\n        <label class=\"form-check-label col-sm-4\" for=\"Active\">Is Active</label>\r\n        <div class=\"col-sm-8\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" name=\"Active\" id=\"Active\" bind=\"Active\" />\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label class=\"col-form-label col-sm-4\" for=\"Minimum\">% Minimum</label>\r\n        <div class=\"col-sm-8\">\r\n            <input class=\"form-control\" style=\"width:160px;\" type=\"text\" name=\"Minimum\" id=\"Minimum\" bind=\"MinimumStr\" disabled=\"@(!Active)\" />\r\n        </div>\r\n    </div>\r\n```\r\n\r\nHowever, the rendering of being disabled only works on initial load, based on the default checked status of Active checkbox.  When you check or uncheck the Active box, it doesn't update the disabled status of the Minimum textbox, even if you hook into the Active setter and manually call StateHasChanged().","Url":"https://github.com/aspnet/Blazor/issues/624","RelatedDescription":"Closed issue \"Computed disabled attribute does not rerender.\" (#624)"},{"Id":"316055243","IsPullRequest":false,"CreatedAt":"2018-04-20T16:54:49","Actor":"floreseken","Number":"623","RawContent":null,"Title":"Elegant way to wrap binding for unsupported type","State":"closed","Body":"I get it, this is work in progress. So this will be solved in future I guess:\r\n\r\n```\r\n<input bind=\"@Amount\" /><br/>\r\n\r\n@functions\r\n{\r\n    public decimal Amount { get; set; }\r\n}\r\n``` \r\n\r\nNow throws:\r\n\r\n`Error: System.ArgumentException: 'bind' does not accept values of type System.Decimal. To read and write this value type, wrap it in a property of type string with suitable getters and setters`\r\n\r\nSo I can make this work by adding this property (needs more failure checks, I know);\r\n\r\n```\r\n    public decimal Amount { get; set; }\r\n\r\n    [NotMapped]\r\n    public string AmountStr\r\n    {\r\n        get\r\n        {\r\n            return this.dec.ToString();\r\n        }\r\n        set\r\n        {\r\n            this.dec = Convert.ToDecimal(value);\r\n        }\r\n    }\r\n```\r\n\r\nAnd binding to AmountStr.\r\n\r\nBut if you are using (EF poco) objects this really pollutes my model classes.\r\nDoes anybody can suggest a elegant workaround for this?\r\n","Url":"https://github.com/aspnet/Blazor/issues/623","RelatedDescription":"Closed issue \"Elegant way to wrap binding for unsupported type\" (#623)"},{"Id":"316253803","IsPullRequest":false,"CreatedAt":"2018-04-20T16:51:34","Actor":"anirugu","Number":"631","RawContent":null,"Title":"I am looking for a way to set the custom route in blazor, please help","State":"closed","Body":"For example like a blog post, the URL will be goes something like this\r\n\r\nexample.com/1-testing.html\r\n\r\n1 IS ID and 'testing' is a slug. I check the issues in this repos but didn't find the code that can help me to do this. \r\n\r\nIs current version let me do this.  if yes, how I can try it.\r\n\r\nthanks","Url":"https://github.com/aspnet/Blazor/issues/631","RelatedDescription":"Closed issue \"I am looking for a way to set the custom route in blazor, please help\" (#631)"},{"Id":"316333989","IsPullRequest":false,"CreatedAt":"2018-04-20T16:34:39","Actor":"rmbar","Number":"632","RawContent":null,"Title":"Does Blazor (via Mono) JIT code to \"native\" webassembly?","State":"closed","Body":"Or will, for example, my method bodies always be interpreted at a higher language layer inside the runtime during execution?","Url":"https://github.com/aspnet/Blazor/issues/632","RelatedDescription":"Closed issue \"Does Blazor (via Mono) JIT code to \"native\" webassembly?\" (#632)"},{"Id":"316232986","IsPullRequest":true,"CreatedAt":"2018-04-20T11:35:33","Actor":"Daddoon","Number":"630","RawContent":null,"Title":"Added binding support on double/float/decimal","State":"open","Body":"Added binding support on double/float/decimal, by adding corresponding delegates for theses use case.\r\n\r\n**NOTE:** Binding parsed and showed value for decimal is correspond to current thread culture format (System.Threading.Thread.CurrentThread.CurrentCulture or System.Threading.Thread.CurrentThread.CurrentUICulture , doesn't have made deep test), so the ouput may be influenced and corresponding to culture requirement.\r\n\r\n**Suggestion:** What about  System.OverflowException ? Actually mocking the previous implementation (btw doing nothing specially).\r\n\r\nFix #623 ","Url":"https://github.com/aspnet/Blazor/pull/630","RelatedDescription":"Open PR \"Added binding support on double/float/decimal\" (#630)"},{"Id":"316228797","IsPullRequest":true,"CreatedAt":"2018-04-20T11:20:05","Actor":"Daddoon","Number":"629","RawContent":null,"Title":"Added VSIISExeLauncher autorebuild support.","State":"open","Body":"(Re-opened pull, as i branched correctly my code)\r\n\r\nAdded **VSIISExeLauncher** autorebuild support.\r\n\r\nWhen searching for devenv process in FindAncestorVSProcess method, if \"VSIISExeLauncher\" is found in the process tree, then we are likely in a debugable IIS hosted app.\r\n\r\nRetrieving the initial launcher to find the owningPid number, actually the current devenv instance.\r\n\r\nReturning devenv process if found and valid.\r\n\r\nThis behavior will fail of course if the current executing process lack of permissions, like not being in the administrator group.\r\n\r\nIn my case, added my current ApplicationPool in the Administrators group, then restarted IIS, was sufficient to allow to read devenv process.\r\n\r\nCorrect me if i'm wrong, but as the VSIISExeLauncher will be called only if launched from Visual Studio, this behavior should never happen in production.\r\n\r\n**NOTE**: FindIISHostedVSProcess is called within FindAncestorVSProcess **while** loop if its relevant, however if you prefer by design that this method is called after FindAncestorVSProcess in TryCreate (if relevant), i will change this.","Url":"https://github.com/aspnet/Blazor/pull/629","RelatedDescription":"Open PR \"Added VSIISExeLauncher autorebuild support.\" (#629)"},{"Id":"316136511","IsPullRequest":false,"CreatedAt":"2018-04-20T09:37:05","Actor":"mikoskinen","Number":"626","RawContent":null,"Title":"Rendering component through binding to div","State":"closed","Body":"Is there plans to extend binding support so that one could bind the whole component to a div element?  \r\n\r\nMeaning, one could define component like this:\r\n\r\n```\r\n@page \"/\"\r\n<h1>Hello, world!</h1>\r\nWelcome to your new app.\r\n<SurveyPrompt Title=\"How is Blazor working for you?\" />\r\n\r\n<div bind=@counter/>\r\n\r\n@functions {\r\n    Counter counter = new Counter();\r\n}\r\n```\r\nI think this could be solved without binding too, with something like:\r\n\r\n```\r\n@page \"/\"\r\n<h1>Hello, world!</h1>\r\nWelcome to your new app.\r\n<SurveyPrompt Title=\"How is Blazor working for you?\" />\r\n\r\n<div>\r\n@counter\r\n</div>\r\n\r\n@functions {\r\n    Counter counter = new Counter();\r\n}\r\n```\r\nCurrently this doesn't render the component, only its type name.\r\n\r\nOr maybe with a custom tag helper:\r\n\r\n```\r\n@page \"/\"\r\n<h1>Hello, world!</h1>\r\nWelcome to your new app.\r\n<SurveyPrompt Title=\"How is Blazor working for you?\" />\r\n\r\n<component bind=@counter/>\r\n\r\n@functions {\r\n    Counter counter = new Counter();\r\n}\r\n```\r\n\r\nThe idea here is that we could compose component (for example Shell) from multiple child components (News, Customers, Invoices) through DI / inject attribute. \r\n\r\nThis would also allow one to define some of the components singleton and inject them where needed.   ","Url":"https://github.com/aspnet/Blazor/issues/626","RelatedDescription":"Closed issue \"Rendering component through binding to div\" (#626)"},{"Id":"316169420","IsPullRequest":false,"CreatedAt":"2018-04-20T09:14:07","Actor":"grahamehorner","Number":"628","RawContent":null,"Title":"[feature request] binding model attribute validation","State":"closed","Body":"not sure if this on the backlog? developer experience;\r\n\r\nI'd like to be able to create a C# view models with model property validation annotation attributes, that are automatically applied to the DOM elements which bind to the model property in that the bound model property only gets updated on the lost focus event and if the property validation passed.\r\n ","Url":"https://github.com/aspnet/Blazor/issues/628","RelatedDescription":"Closed issue \"[feature request] binding model attribute validation\" (#628)"},{"Id":"316161831","IsPullRequest":false,"CreatedAt":"2018-04-20T08:01:57","Actor":"MihaMarkic","Number":"627","RawContent":null,"Title":"Packing javascript with a component","State":"closed","Body":"Is scenario where I'd create a component including its javascript counterpart and pack it into NuGet library supported?","Url":"https://github.com/aspnet/Blazor/issues/627","RelatedDescription":"Closed issue \"Packing javascript with a component\" (#627)"},{"Id":"316120236","IsPullRequest":false,"CreatedAt":"2018-04-20T04:02:26","Actor":"panesofglass","Number":"625","RawContent":null,"Title":"Blazor 0.2.0 applications fail to load in Safari on macOS","State":"open","Body":"### Environment:\r\n- macOS High Sierra 10.13.4 (17E199)\r\n- dotnet 2.1.300-preview2-008533\r\n- Blazor 0.2.0\r\n\r\n### Repro steps:\r\n1. Create a blazer stand-alone (or hosted) app from the latest templates\r\n2. Build with `dotnet build $project`\r\n3. Run with `dotnet run --project $project`\r\n\r\n### Expected:\r\nBlazor app runs in Safari as it did for the 0.1.0 runtime and templates\r\n\r\n### Actual\r\n- Safari attempts to load and fails with `This webpage was reloaded because a problem occurred.`\r\n- Safari attempts to reload.\r\n- Safari stops trying to reload after repeated failures.\r\n<img width=\"266\" alt=\"image\" src=\"https://user-images.githubusercontent.com/8803/39030186-b67c2e96-4425-11e8-89dd-64cf3b4158c0.png\">\r\n\r\n### Additional details:\r\n- I attempted to open the JavaScript Console to see what was happening, but the console is closed due to the errors.\r\n- I don't see any errors in the logs, just repeated requests for the same files with the expected HTTP `304` responses.","Url":"https://github.com/aspnet/Blazor/issues/625","RelatedDescription":"Open issue \"Blazor 0.2.0 applications fail to load in Safari on macOS\" (#625)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-04-23T05:30:02.3785205Z","RunDurationInMilliseconds":1053}