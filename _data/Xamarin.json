{"Data":{"Blog":{"FeedItems":[{"Title":"Plugin and Permission Changes with iOS 11","PublishedOn":"2017-10-18T20:24:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>iOS 11 introduced some fun updates around permissions when accessing certain features on the device. I first noticed these changes when trying to access a user location with the Geolocator Plugin in a Xamarin.Forms application. To my surprise, nothing happened. Upon further investigation of the application&#8217;s Output, I noticed a message explaining exactly what I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/plugin-permission-changes-ios-11/\">Plugin and Permission Changes with iOS 11</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/plugin-permission-changes-ios-11/","RawContent":null},{"Title":"Adaptive UI with Xamarin.Forms","PublishedOn":"2017-10-16T20:58:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Xamarin.Forms has supported iOS, Android, and Windows for a long time. We&#8217;ve also added new platforms to keep up with the changing landscape, such as Tizen and macOS, with Linux and Windows WPF on the horizon. These platforms run on a wide variety of devices including phones, tablets, desktops, and TVs. This presents an interesting [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/adaptive-ui-xamarin-forms/\">Adaptive UI with Xamarin.Forms</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/adaptive-ui-xamarin-forms/","RawContent":null},{"Title":"Give the Visual Studio 2017 Version 15.5 Preview a Try!","PublishedOn":"2017-10-13T20:06:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>With Visual Studio 2017 version 15.4 now stable and sporting some awesome new features, such as Xamarin Live integration, Android Oreo / iOS 11 support, and a smarter, smaller installation, it&#8217;s time to turn our attention to the next version of Visual Studio 2017, version 15.5! This upcoming release is now available as a preview [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/\">Give the Visual Studio 2017 Version 15.5 Preview a Try!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/","RawContent":null},{"Title":"Bring 3D Models To Life in Augmented Reality with UrhoSharp","PublishedOn":"2017-10-12T19:28:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>UrhoSharp brings 3D to a variety of platforms and uses its own binary mdl format for model files. There are many sources for 3D models, including cgtrader and TurboSquid, and formats such as FBX, OBJ, DAE and BLEND. Urho3D provides tools like AssetImporter and the Urho3D Blender Add-in so you can use these models. In [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/\">Bring 3D Models To Life in Augmented Reality with UrhoSharp</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/","RawContent":null},{"Title":"Updating Xamarin.iOS Apps for the iPhone X","PublishedOn":"2017-10-11T18:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>There&#8217;s no doubt that one of the biggest announcements from Apple this year was the iPhone X. The new Super Retina display is edge-to-edge on the device, creating an immersive experience we had yet to see on iPhones. With the new screen changes on the iPhone X, developers may be asking themselves, &#8220;What do I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/\">Updating Xamarin.iOS Apps for the iPhone X</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/","RawContent":null},{"Title":"Build and Release Five-Star Apps Faster","PublishedOn":"2017-10-10T17:49:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The first step in the life of a mobile app is build automation, which builds the app and runs required tests to make sure the app follows required rules. Build automation is also the first step towards shipping high quality, five-star mobile apps. When building iOS and Android mobile applications, one of the main challenges [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/\">Build and Release Five-Star Apps Faster</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/","RawContent":null},{"Title":"Developing Real-Time Communication Apps with WebSocket","PublishedOn":"2017-10-09T21:17:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>WebSockets is a two-way communication protocol, or persistence communication channel over TCP connection, an extremely powerful protocol leveraged by numerous games, apps with chat functionality, and real-time apps such as stock tickers. In this blog post, we&#8217;ll discuss how to build a simple Xamarin chat room application that will leverage and connect to an ASP.NET [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/\">Developing Real-Time Communication Apps with WebSocket</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/","RawContent":null},{"Title":"DataBinding Power Moves You May Not Be Using (Yet)","PublishedOn":"2017-10-05T21:05:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>DataBinding is a fantastic feature that cleanly decouples your UI from the backing data models while providing the plumbing to move data back and forth as you need. But, are you getting the most out of the Binding features in Xamarin.Forms? Building on our previous Introduction to DataBinding and Advanced Data Binding posts, I’ll show [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/\">DataBinding Power Moves You May Not Be Using (Yet)</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/","RawContent":null},{"Title":"The Solar System with ARKit and F#","PublishedOn":"2017-10-04T21:09:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>A few years ago, my colleague Joel Martinez and I wrote a F# program we called “Oculus Thrift” that demonstrated iOS SceneKit in a Google Cardboard stereoscopic viewer. With the recent release of iOS 11, I wanted to see if we could do something similar with ARKit, Apple’s augmented-reality framework. It took just 8 lines [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/\">The Solar System with ARKit and F#</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/","RawContent":null},{"Title":"Microcharts: Elegant Cross-Platform Charts for Every App","PublishedOn":"2017-10-03T19:13:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>This is a guest post from Alo&#239;s Deniel. Alo&#239;s works at Orange Applications for Business as a Xamarin consultant. You can find him on Twitter at @aloisdeniel and on Github at @aloisdeniel. Displaying charts in mobile apps has always been a great way to offer users a clear overview of numerical data. In my time [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/\">Microcharts: Elegant Cross-Platform Charts for Every App</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6735094395","Type":"PullRequestEvent","CreatedAt":"2017-10-18T20:27:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/941","RelatedDescription":"Merged pull request \"[performance measurements] Fix result files location\" (#941) at xamarin/xamarin-android","RelatedBody":"Do not use `TestApk.ResultsPath` as base for performance measurements\r\nanymore - it has changed recently by https://github.com/xamarin/xamarin-android/commit/385699a58635d87a1cc65b60995d3420995f21d7. Instead\r\npass own results filename to the ProcessLogcatTiming and\r\nProcessPlotInput tasks.\r\n\r\nAlso added LabelSuffix parameter to the task, so that it is easier to\r\ncreate merged measurements. It comes handy as more tests are run in\r\nmultiple configurations now. It also simplifies the use of definitions\r\nfiles as we don't need one per configuration anymore."},{"Id":"6735028910","Type":"PullRequestEvent","CreatedAt":"2017-10-18T20:12:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/945","RelatedDescription":"Merged pull request \"Add explicit and implicit cast operators for unsigned integer types\" (#945) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59193\r\n\r\nJava does not include types to represent unsigned integers. This poses a problem\r\nwhen either porting code from Java to managed languages or when attempting to\r\ncast integer values between the Java and the managed land.\r\n\r\nThe issue described in the above bug could be fixed by adding appropriate\r\nimplicit and explicit operators to Java.Lang.Object in Xamarin.Android but that\r\nwould allow for behavior which may have adverse effects without any external\r\nsigns immediately visible to the developer.\r\n\r\nConsider a situation when a minimum signed 32-bit integer value returned by Java\r\ncode is cast to the managed `uint` type - we end up with the same value but with\r\ndifferent sign and no indication given that such a thing happened. We could\r\nup-cast the value to long but that changes the type of the result and is not\r\nadvisable, especially with implicit conversions. Also, even if the value was\r\nup-cast to a type with a larger value range this would have to stop with the\r\n64-bit integers since they can't be up-cast to any other primitive integer type.\r\n\r\nAny casts between signed and unsigned integer types should be a conscious and\r\nexplicit action, thus the double cast `(ulong)(long)value` is considered the\r\ncorrect behavior.\r\n\r\nFor those reasons we decided that the best action to to take is to actively\r\nprevent direct casts from/to a managed unsigned integer type to/from a signed\r\nJava integer type. This is implemented by way of adding a number of explicit and\r\nimplicit conversion operators to XA's Java.Lang.Object implementation that are\r\nmarked \"obsolete\" and being erroneous. This is done this way so that the code\r\nattempting to perform such conversions won't build because the compiler, seeing\r\nthe attribute, will signal an error and abort the build."},{"Id":"6734975861","Type":"PullRequestEvent","CreatedAt":"2017-10-18T20:00:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/942","RelatedDescription":"Merged pull request \"[xabuild] Copy `xabuild` to the output directory.\" (#942) at xamarin/xamarin-android","RelatedBody":"In order to get the tests running using xabuild on monodroid\r\nwe kinda need it in the output directory. This commit adds\r\nit as Content to the xabuild.csproj. It also updaes the Builder\r\nto look for `xabuild` in the output directory first and then\r\nfallback to `tools\\scripts`.\r\n"},{"Id":"6734934720","Type":"PullRequestEvent","CreatedAt":"2017-10-18T19:51:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/912","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tests] Reworks tests to use msbuild.\" (#912) at xamarin/xamarin-android","RelatedBody":"This commit reworks the tests to work on msbuild by default.\r\nxbuild is deprecated, so we should ensure that our system works\r\n100% on msbuild.\r\n\r\nSo allot of changes in the system here. The hightlights are\r\n\r\nWe have to NOT use `BuildingInsideVisualStudio` when building\r\nunder `msbuild`. Setting this property to `true` has a side effect\r\nof telling `msbuild` .. \"Dont bother to build ProjectReferences\".\r\nThis is because under VS that is something the IDE takes care of.\r\nIt turns out that the bug we had to do with `__NonExistantFile__`\r\ncausing the `csc` task to run ALL the time was fixed.\r\n\r\nAll of the `IsTargetSkipped` checks have been unified to call\r\n`IsTargetSkipped` method out BuildOutput. It has also been updated\r\nto include more target \"skipped\" formats which xbuild and msbuild\r\nsupports.\r\n\r\nThere is also a difference in behaviour between xbuild and msbuild.\r\nYou may well have noticed that ALL the tests that have had the\r\n\r\n\t\"debug\" -> \"release\"\r\n\r\nchanges (including the debugger attribute one) are around\r\n\r\n\t$(DebugType) == \"None\"\r\n\r\nUnder xbuild when $(DebugType) == \"None\" and $(DebugSymbols) == \"True\"\r\nwe end up with $(DebugType) == \"None\" and $(DebugSymbols) == \"True\".\r\nWhich results in a debug runtime and apk.\r\n\r\nHowever.... under msbuild when $(DebugType) == \"None\"\r\nand $(DebugSymbols) == \"True\" we end up with $(DebugType) == \"portable\"\r\nand $(DebugSymbols) == \"False\".. so we get a release runtime and apk.\r\n\r\nThis is because None is NOT a valid value for $(DebugType) in msbuild,\r\nso it resets BOTH $(DebugType) and $(DebugSymbols). So we have a\r\ndifference of behaviour between the two systems.\r\n\r\nSo in this commit we check for $(DebugType) == \"None\" and change it\r\nand $(DebugSymbols) to match the msbuild behaviour. This will probably\r\nbreak some QA tests.. but this is expected and the tests should be\r\nupdated to reflect this."},{"Id":"6734888599","Type":"PullRequestEvent","CreatedAt":"2017-10-18T19:41:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/946","RelatedDescription":"Merged pull request \"[build] setup a Prepare target for Xamarin.Android.sln\" (#946) at xamarin/xamarin-android","RelatedBody":"Context:\r\nhttps://stackoverflow.com/questions/17709873/how-can-i-invoke-my-msbuild-target-when-msbuild-exe-starts-and-when-it-ends\r\n\r\nThere is a convention where an MSBuild file named\r\n`Before.<SolutionName>.sln.targets` will get imported prior to a SLN\r\nfile getting built. This enables us to import `PrepareWindows.targets`\r\nand enable `msbuild Xamarin.Android.sln /t:Prepare` to work\r\nappropriately.\r\n\r\nmacOS/linux have remained unchanged, since `PrepareWindows.targets`\r\ncurrently only works for Windows. `make prepare` could be ported to\r\nMSBuild in the future.\r\n\r\n## Question\r\n\r\nDo we need to look into `make prepare` for the other platforms yet?\r\n\r\nIf `make prepare` was fully ported to MSBuild, you could run the same\r\ncommand to build on any platform:\r\n```\r\nmsbuild Xamarin.Android.sln /t:Prepare /t:Build\r\n```\r\nI tested, and `xbuild` looks like it supports the `Before.<SolutionName>.sln.targets`\r\nconvention."},{"Id":"6734877871","Type":"PullRequestEvent","CreatedAt":"2017-10-18T19:38:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/919","RelatedDescription":"Merged pull request \"[build] Bump mxe and add commit sha to AndroidMxeInstallPrefix\" (#919) at xamarin/xamarin-android","RelatedBody":"This ensures that we can revert mxe to an earlier version.\r\n\r\nBackground:\r\n\r\nThe current \"do we need to rebuild <dependency>\" is mostly \"forward-only\". It works properly if you bump forward in time, but if you go _backwards_, it won't rebuild because it's timestamp based.\r\n\r\nFor example: if we bump MXE, it'll rebuild the (cached!) MXE on the build server but if we find that MXE is broken and we need to revert... we can't because what we're reverting to is older than the bump!"},{"Id":"6734678853","Type":"PullRequestEvent","CreatedAt":"2017-10-18T18:54:02","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/946","RelatedDescription":"Opened pull request \"[build] setup a Prepare target for Xamarin.Android.sln\" (#946) at xamarin/xamarin-android","RelatedBody":"Context:\r\nhttps://stackoverflow.com/questions/17709873/how-can-i-invoke-my-msbuild-target-when-msbuild-exe-starts-and-when-it-ends\r\n\r\nThere is a convention where an MSBuild file named\r\n`Before.<SolutionName>.sln.targets` will get imported prior to a SLN\r\nfile getting built. This enables us to import `PrepareWindows.targets`\r\nand enable `msbuild Xamarin.Android.sln /t:Prepare` to work\r\nappropriately.\r\n\r\nmacOS/linux have remained unchanged, since `PrepareWindows.targets`\r\ncurrently only works for Windows. `make prepare` could be ported to\r\nMSBuild in the future.\r\n\r\n## Question\r\n\r\nDo we need to look into `make prepare` for the other platforms yet?\r\n\r\nIf `make prepare` was fully ported to MSBuild, you could run the same\r\ncommand to build on any platform:\r\n```\r\nmsbuild Xamarin.Android.sln /t:Prepare /t:Build\r\n```\r\nI tested, and `xbuild` looks like it supports the `Before.<SolutionName>.sln.targets`\r\nconvention."},{"Id":"6733712391","Type":"PullRequestEvent","CreatedAt":"2017-10-18T15:36:40","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/945","RelatedDescription":"Opened pull request \"Add explicit and implicit cast operators for unsigned integer types\" (#945) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59193\r\n\r\nJava does not include types to represent unsigned integers. This poses a problem\r\nwhen either porting code from Java to managed languages or when attempting to\r\ncast integer values between the Java and the managed land.\r\n\r\nThe issue described in the above bug could be fixed by adding appropriate\r\nimplicit and explicit operators to Java.Lang.Object in Xamarin.Android but that\r\nwould allow for behavior which may have adverse effects without any external\r\nsigns immediately visible to the developer.\r\n\r\nConsider a situation when a minimum signed 32-bit integer value returned by Java\r\ncode is cast to the managed `uint` type - we end up with the same value but with\r\ndifferent sign and no indication given that such a thing happened. We could\r\nup-cast the value to long but that changes the type of the result and is not\r\nadvisable, especially with implicit conversions. Also, even if the value was\r\nup-cast to a type with a larger value range this would have to stop with the\r\n64-bit integers since they can't be up-cast to any other primitive integer type.\r\n\r\nAny casts between signed and unsigned integer types should be a conscious and\r\nexplicit action, thus the double cast `(ulong)(long)value` is considered the\r\ncorrect behavior.\r\n\r\nFor those reasons we decided that the best action to to take is to actively\r\nprevent direct casts from/to a managed unsigned integer type to/from a signed\r\nJava integer type. This is implemented by way of adding a number of explicit and\r\nimplicit conversion operators to XA's Java.Lang.Object implementation that are\r\nmarked \"obsolete\" and being erroneous. This is done this way so that the code\r\nattempting to perform such conversions won't build because the compiler, seeing\r\nthe attribute, will signal an error and abort the build."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6735668875","Type":"PullRequestEvent","CreatedAt":"2017-10-18T22:53:57","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1206","RelatedDescription":"Merged pull request \"Stop forcing FormsTextBox content to ForegroundFocusBrush on UWP\" (#1206) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe FormsTextboxStyle control template was applying the FocusForegroundBrush property to the textbox's ContentElement even when the textbox was not focused.  This caused the incorrect text color to be applied to the textbox when focus was lost. In \"Light\" mode, this is mostly okay because the two color values are the same, but in \"Dark\" mode the focus color matches the textbox background, so the text disappears.\r\n\r\nThis change removes the incorrect value from the style and adds some logic to fix the original problem the incorrect style attempted to address.\r\n\r\nNo automated tests, because we don't have a way to check for text color changes. To test manually, change `RequestedTheme=\"Light\"` to `RequestedTheme=\"Dark\"` in Control Gallery and run it, then browse to the Entry Gallery.\r\n\r\nBefore the change:\r\n\r\n<img src=\"https://www.dropbox.com/s/m2rt8msmpxoscys/entry_phone_dark_before.gif?raw=1\" width=200/>\r\n\r\n<img src=\"https://www.dropbox.com/s/lx3aka2b9p0cvkk/entry_desktop_dark_before.gif?raw=1\" width=200/>\r\n\r\nAfter the change:\r\n\r\n<img src=\"https://www.dropbox.com/s/85hfowpyew1gn5g/entry_phone_dark_after.gif?raw=1\" width=200/>\r\n\r\n<img src=\"https://www.dropbox.com/s/gxyb1ox2u405kp6/entry_desktop_dark_after.gif?raw=1\" width=200/>\r\n\r\n### Bugs Fixed ###\r\n\r\n- [58145 – [UWP] Entry text not visible when using dark theme](https://bugzilla.xamarin.com/show_bug.cgi?id=58145)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6735359400","Type":"PullRequestEvent","CreatedAt":"2017-10-18T21:28:20","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1155","RelatedDescription":"Merged pull request \"[Android] Prevent ObjectDisposedExceptions in ListViews with Header/FooterTemplates\" (#1155) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nA continuation of #1063, this will do the same work for `HeaderTemplate` and `FooterTemplate`. Additionally, calling `RemoveAllViews` before calling `Dispose` is a terrible thing and leaves orphaned views behind. Also using a `_disposed` bool instead of checking for a non-null `HeaderView` just for added clarity and to prevent possible situations where everything may not be disposed.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [Bug 48998 - Back on NavigationPage causes System.ObjectDisposedException](https://bugzilla.xamarin.com/show_bug.cgi?id=48998)\r\n- [Bug 57910 - ObjectDisposedException in Xamarin.Forms.Platform.Android.Renderers.ProgressBarRenderer](https://bugzilla.xamarin.com/show_bug.cgi?id=57910)\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=45330\r\n\r\n### API Changes ###\r\n\r\nList all API changes here (or just put None), example:\r\n \r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6735554654","Type":"PullRequestEvent","CreatedAt":"2017-10-18T22:19:34","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2906","RelatedDescription":"Opened pull request \"[runtime] integrate mono 2017-10 (rebased)\" (#2906) at xamarin/xamarin-macios","RelatedBody":"either this PR or https://github.com/xamarin/xamarin-macios/pull/2905"},{"Id":"6735483114","Type":"PullRequestEvent","CreatedAt":"2017-10-18T21:59:40","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2905","RelatedDescription":"Opened pull request \"[runtime] integrate mono 2017-10\" (#2905) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6734515000","Type":"PullRequestEvent","CreatedAt":"2017-10-18T18:19:15","Actor":"Aguilex","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2898","RelatedDescription":"Merged pull request \"Bump mono to get fix for #59436.\" (#2898) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@06b96b294fe [llvm] Map byref types to the same type as the this argument so they are called using the same signature if the this argument is passed explicitly. Fixes #59436. (#5572)\n\nDiff: https://github.com/mono/mono/compare/38da0b3b4996357a7472e3202c575c9111469721...06b96b294fe5d9a20803fae8f42b42cea05d2bd0\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59436"},{"Id":"6732441283","Type":"PullRequestEvent","CreatedAt":"2017-10-18T11:31:27","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2903","RelatedDescription":"Merged pull request \"[xtro] Fix typo and unknown/wrong counting.\" (#2903) at xamarin/xamarin-macios","RelatedBody":"Fix typo and change how to count unknown/wrong API to not count when the\nMakefile is read ($(shell ...) - before executing the tests, and as such not\nfinding anything wrong), but instead when printing the count (using\nbackticks)."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"920749716610207745","CreatedAt":"2017-10-18T20:33:33+00:00","UserScreenname":"xamarinhq","Text":"Update your iOS apps to reflect plugin and permission changes in iOS 11: https://t.co/9DXby5Nxsn https://t.co/jFJho4InOr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":21,"RawContent":null},{"Id":"920684397212438529","CreatedAt":"2017-10-18T16:14:00+00:00","UserScreenname":"xamarinhq","Text":"Request reviews with iOS 10.3’s SKStoreReviewController: https://t.co/HgugUTrN81","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"920320046701989894","CreatedAt":"2017-10-17T16:06:12+00:00","UserScreenname":"xamarinhq","Text":"Try out updates to Xamarin Live, a new Mac connection workflow, and more in the Visual Studio 2017 15.5 Preview:… https://t.co/iB8bIZkhW1","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":73,"FavoriteCount":36,"RawContent":null},{"Id":"920032724999725056","CreatedAt":"2017-10-16T21:04:29+00:00","UserScreenname":"xamarinhq","Text":"Adaptive UI with #XamarinForms: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":98,"FavoriteCount":51,"RawContent":null},{"Id":"919958111670165505","CreatedAt":"2017-10-16T16:08:00+00:00","UserScreenname":"xamarinhq","Text":"Dive into the world of build configurations to see how they can improve your build times and productivity: https://t.co/KxvabUJIue","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":12,"RawContent":null},{"Id":"919747480769712128","CreatedAt":"2017-10-16T02:11:02+00:00","UserScreenname":"xamarinhq","Text":"Add “mobile developer” to your resume with @XamarinU, starting with a 30-day free trial: https://t.co/bVpjALvmoy https://t.co/fiA4quVFQb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":15,"RawContent":null},{"Id":"919305335759953927","CreatedAt":"2017-10-14T20:54:06+00:00","UserScreenname":"xamarinhq","Text":"Weekend project: add some new features to your #Xamarin Android apps with our Android Support Library v26 overview:… https://t.co/49gaLayBhU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"918566588483342336","CreatedAt":"2017-10-12T19:58:35+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/j4LE7PWPMd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":67,"FavoriteCount":33,"RawContent":null},{"Id":"918507552811487232","CreatedAt":"2017-10-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build better apps with @BritchDavid's eBook on \"Enterprise Application Patterns using #XamarinForms\": https://t.co/YryVqlrejk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":9,"RawContent":null},{"Id":"918186189634572288","CreatedAt":"2017-10-11T18:47:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/OmUwO59Fdx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":31,"RawContent":null},{"Id":"918142648204124160","CreatedAt":"2017-10-11T15:54:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays are a great way to learn how to build, test, &amp; connect native apps with #Xamarin! Find one near you: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":16,"RawContent":null},{"Id":"917846344714391552","CreatedAt":"2017-10-10T20:16:35+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build and release high quality, five-star apps faster using #VSMobileCenter: https://t.co/XHMCHeVNSB https://t.co/3hhv3CG6uh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":30,"RawContent":null},{"Id":"917779002781249539","CreatedAt":"2017-10-10T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to display data with #macOS Table Views: https://t.co/NHwCfrILH6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":12,"RawContent":null},{"Id":"917501676159893504","CreatedAt":"2017-10-09T21:27:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0FzGbu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":117,"FavoriteCount":65,"RawContent":null},{"Id":"917416111804702720","CreatedAt":"2017-10-09T15:47:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample app that spans devices and mobile platforms using Microsoft's Project Rome: https://t.co/SLeQw6q4YO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":20,"RawContent":null},{"Id":"917203711692337152","CreatedAt":"2017-10-09T01:43:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @nishanil shows you how to add #facetracking and live recognition to your Android app: https://t.co/5R7K2hNJXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":18,"RawContent":null},{"Id":"916789236879290370","CreatedAt":"2017-10-07T22:16:01+00:00","UserScreenname":"xamarinhq","Text":"Sign up for our FREE event in Denver (10/10) or McLean (10/12) where you'll learn how to build a #XamarinForms app:… https://t.co/frCmLy2kS5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"916409733246017536","CreatedAt":"2017-10-06T21:08:01+00:00","UserScreenname":"xamarinhq","Text":"Get excited! https://t.co/0m45zTRqFK","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":41,"FavoriteCount":19,"RawContent":null},{"Id":"916329451205595137","CreatedAt":"2017-10-06T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample enterprise app with the Microsoft Authentication Library and #MicrosoftGraph APIs: https://t.co/d9Rlu92TWT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"916052505406197760","CreatedAt":"2017-10-05T21:28:31+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":29,"RawContent":null}]}},"RunOn":"2017-10-19T05:30:38.3496228Z","RunDurationInMilliseconds":3611}