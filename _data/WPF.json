{"Data":{"GitHub":{"Issues":[{"Id":"449550392","IsPullRequest":false,"CreatedAt":"2019-05-29T01:22:30","Actor":"glent1","Number":"778","RawContent":null,"Title":"Any text based control makes WPF crash in preview 6","State":"closed","Body":"**Dotnet core Version:**   \r\n3.0.100-preview6-012099\r\n\r\n**Windows version:** \r\n1803 (OS Build 17134.648)\r\n\r\n**Does the bug reproduce also in WPF for .NET Framework 4.8?**\r\nUnknown, but so fundamental and trivial, it shouldn't matter\r\n\r\n**Problem description**  \r\nAny text based control makes WPF crash on startup\r\n\r\n**Actual Behaviour**\r\n\r\n System.TypeInitializationException\r\n  HResult=0x80131534\r\n  Message=The type initializer for 'System.Windows.Media.FontFamily' threw an exception.\r\n  Source=PresentationCore\r\n  StackTrace:\r\n   at System.Windows.Media.Typeface..ctor(FontFamily fontFamily, FontStyle style, FontWeight weight, FontStretch stretch)\r\n   at MS.Internal.Text.DynamicPropertyReader.GetTypeface(DependencyObject element)\r\n   at MS.Internal.Text.TextProperties.InitCommon(DependencyObject target)\r\n   at MS.Internal.Text.TextProperties..ctor(FrameworkElement target, Boolean isTypographyDefaultValue)\r\n   at System.Windows.Controls.TextBlock.GetLineProperties()\r\n   at System.Windows.Controls.TextBlock.EnsureTextBlockCache()\r\n   at System.Windows.Controls.TextBlock.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\n   at System.Windows.Controls.ContentPresenter.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Decorator.MeasureOverride(Size constraint)\r\n   at System.Windows.Documents.AdornerDecorator.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Border.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Window.MeasureOverrideHelper(Size constraint)\r\n   at System.Windows.Window.MeasureOverride(Size availableSize)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Interop.HwndSource.SetLayoutSize()\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Interop.HwndSource.set_RootVisual(Visual value)\r\n   at System.Windows.Window.SetRootVisual()\r\n   at System.Windows.Window.SetRootVisualAndUpdateSTC()\r\n   at System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)\r\n   at System.Windows.Window.CreateSourceWindow(Boolean duringShow)\r\n   at System.Windows.Window.CreateSourceWindowDuringShow()\r\n   at System.Windows.Window.SafeCreateWindowDuringShow()\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at wpfv6.App.Main()\r\n\r\nInner Exception 1:\r\nTypeInitializationException: The type initializer for 'MS.Internal.FontCache.DWriteFactory' threw an exception.\r\n\r\nInner Exception 2:\r\nInvalidCastException: Specified cast is not valid.\r\n\r\n \r\n**Expected behavior:**\r\n\r\nA WPF window with some text in it\r\n\r\n**Minimal repro:**\r\n \r\ndotnet new wpf\r\nAdd <TextBlock>T</TextBlock> to MainWindow.xaml grid\r\ndotnet run\r\n\r\nCheck eventvwr for exception text\r\n","Url":"https://github.com/dotnet/wpf/issues/778","RelatedDescription":"Closed issue \"Any text based control makes WPF crash in preview 6\" (#778)"},{"Id":"449528739","IsPullRequest":false,"CreatedAt":"2019-05-29T00:05:08","Actor":"vatsan-madhavan","Number":"777","RawContent":null,"Title":"Port code-generator for WindowsBase\\System\\Windows\\AccessibilitySwitches.cs ","State":"open","Body":"[`WindowsBase\\System\\Windows\\AccessibilitySwitches.cs`](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/AccessibilitySwitches.cs) is supposed to be generated using a T4 text template. \r\n\r\nThis T4 text template is not yet ported to [dotnet/wpf](https://github.com/dotnet/wpf). Port this before RTM => we'll need this for ongoing work, as well as for servicing. \r\n\r\n/cc @rladuca ","Url":"https://github.com/dotnet/wpf/issues/777","RelatedDescription":"Open issue \"Port code-generator for WindowsBase\\System\\Windows\\AccessibilitySwitches.cs \" (#777)"},{"Id":"449503787","IsPullRequest":true,"CreatedAt":"2019-05-28T22:22:33","Actor":"rladuca","Number":"776","RawContent":null,"Title":"Wrap COM objects coming out of Clipboard.GetDataObjectInternal.","State":"open","Body":"In the case where Clipboard objects are COM objects, this protects us from a System.InvalidOperationException from the marshaler when calling IDataObject.GetData(Type) due to Type not being marked with the COMVisibleAttribute.\r\n\r\nThis was already present in WPF on .NET Core 3 before and was accidentally dropped during a .NET Framework sync.\r\n\r\nFixes #735 ","Url":"https://github.com/dotnet/wpf/pull/776","RelatedDescription":"Open PR \"Wrap COM objects coming out of Clipboard.GetDataObjectInternal.\" (#776)"},{"Id":"449502151","IsPullRequest":false,"CreatedAt":"2019-05-28T22:17:00","Actor":"miguep","Number":"775","RawContent":null,"Title":"WPF apps crash when using clipboard APIs","State":"open","Body":"* .NET Core Version: 3.0.100-preview6-012099\r\n* Windows version: Win10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n \r\n **Problem description:**\r\n \r\nUsing some of the Clipboard APIs, throw exceptions and cause application crashes.\r\n\r\nE.g.\r\nClipboard.SetData(DataFormats.UnicodeText, \"abc\");\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nThrows an ExecutionEngineException.\r\n \r\n **Expected behavior:**\r\n\r\nsets the data to the clipboard without issue\r\n \r\n **Minimal repro:**\r\nClipboard.SetData(DataFormats.UnicodeText, \"abc\");","Url":"https://github.com/dotnet/wpf/issues/775","RelatedDescription":"Open issue \"WPF apps crash when using clipboard APIs\" (#775)"},{"Id":"449430690","IsPullRequest":true,"CreatedAt":"2019-05-28T20:05:46","Actor":"vatsan-madhavan","Number":"774","RawContent":null,"Title":"Adding a pinned version of S.Runtime.CompilerServices.Unsafe to PresentationBuildTasks.csproj","State":"closed","Body":"Fixes #773 \r\nAs a result of https://github.com/dotnet/corefx/issues/37943, we have a pinned version of System.Memory in PresentationBuildTasks.csproj.\r\n\r\nTurns out that System.Memory v4.5.2 has a dependency on S.Runtime.CompilerServices.Unsafe v4.5.2/AssemblyVersion=4.0.4.1. Pinning this also to PresentationBuildTasks.csproj.","Url":"https://github.com/dotnet/wpf/pull/774","RelatedDescription":"Closed or merged PR \"Adding a pinned version of S.Runtime.CompilerServices.Unsafe to PresentationBuildTasks.csproj\" (#774)"},{"Id":"449430168","IsPullRequest":false,"CreatedAt":"2019-05-28T20:05:46","Actor":"vatsan-madhavan","Number":"773","RawContent":null,"Title":"Builds fail due to missing System.Runtime.CompilerServices.Unsafe","State":"closed","Body":"WPF builds are failing when invoked under msbuild with the following error:\r\n\r\nhttps://dev.azure.com/dnceng/internal/_build%2Fresults?buildId=203305&_a=summary\r\n\r\n```\r\n.packages\\microsoft.net.sdk.windowsdesktop\\3.0.0-preview6.19274.6\\targets\\Microsoft.WinFX.targets(243,9): error MC1000: Unknown build error, 'Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.' \r\nCmd.exe exited with code '1'.\r\n```","Url":"https://github.com/dotnet/wpf/issues/773","RelatedDescription":"Closed issue \"Builds fail due to missing System.Runtime.CompilerServices.Unsafe\" (#773)"},{"Id":"449152988","IsPullRequest":false,"CreatedAt":"2019-05-28T17:17:43","Actor":"albahari","Number":"771","RawContent":null,"Title":"TypeInitializationException in System.Windows.Media.FontFamily","State":"closed","Body":"* .NET Core Version: 3.0.0preview6.19270.\r\n* Windows version: 10.0.17763.0\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\n\r\nI have a WPF app in beta that targets .NET Core 3. When some users run it, it crashes with a TypeInitializationException - The type initializer for 'System.Windows.Media.FontFamily' threw an exception. I've contacted one of the users who has tried it on another machine and got the same error.\r\n\r\nI've attached a full stack trace including IL offsets. \r\n[stacktrace.txt](https://github.com/dotnet/wpf/files/3226579/stacktrace.txt)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/771","RelatedDescription":"Closed issue \"TypeInitializationException in System.Windows.Media.FontFamily\" (#771)"},{"Id":"449370679","IsPullRequest":false,"CreatedAt":"2019-05-28T16:39:24","Actor":"grubioe","Number":"772","RawContent":null,"Title":"Most(All?) WPF controls have bad hit detection when hosted in a System aware Win32 window inside a PMA app","State":"open","Body":"Copied from internal VSO ID: 893156\r\n\r\nRepro Steps\r\n=================\r\n\r\n1. Have .NET 4.8, and 150% primary, 100% secondary.  (It should be noted that this bug seems to mostly impact high primary DPI with smaller secondary DPI. A small primary DPI with larger secondary DPI seems to behave almost perfectly, but still has some hit detection issues.)\r\n2. Launch repro proj exe on primary\r\n4. Move it to secondary\r\n5. Hover over various controls\r\n\r\n\r\n**Expected:**  Hit detection works correctly for all controls in all positions\r\n\r\n**Actual:**   Hit detection gets worse as you move further away from the top/left corner of the content\r\n\r\n**Specifically:**\r\n\r\n1) The top/left quadrant controls should all work normally\r\n\r\n2) The top/right quadrant should have issues when hovering on the right side controls only\r\n\r\n3) The bottom/left quadrant should have issues when hovering on the bottom half(-ish) controls only (some of the bottom radios start to have issues too)\r\n\r\n4) The bottom/right quadrant should have issues for all of the controls\r\n\r\n5) All combobox dropdowns have issues but the issues do get worse the further away from top/left you get (tracked by separate VSO bug #772815)","Url":"https://github.com/dotnet/wpf/issues/772","RelatedDescription":"Open issue \"Most(All?) WPF controls have bad hit detection when hosted in a System aware Win32 window inside a PMA app\" (#772)"},{"Id":"449014559","IsPullRequest":false,"CreatedAt":"2019-05-27T23:59:36","Actor":"Mrnikbobjeff","Number":"770","RawContent":null,"Title":"Reduce Heap allocations","State":"open","Body":"I have found several instances where we can eliminate heap allocations via simple changes such as iterating over an IList via for loop to avoid the boxing allocation for the enumerator or calling ToString on value types to be passed of to string formatting. On further investigation we are allocating a ton of method group to delegate conversions. From the C#  specification section 6.6, describing the run-time evaluation of a method group conversion:\r\nA new instance of the delegate type D is allocated. If there is not enough memory available to allocate the new instance, a System.OutOfMemoryException is thrown and no further steps are executed.\r\n\r\nThe section for anonymous function conversions (6.5.1) includes this:\r\n\r\nConversions of semantically identical anonymous functions with the same (possibly empty) set of captured outer variable instances to the same delegate types are permitted (but not required) to return the same delegate instance.\r\nAnd we have lots of places where these conversions happen. If wanted I would love to optimize these problems, the code will stay the same semantically but allocate less.","Url":"https://github.com/dotnet/wpf/issues/770","RelatedDescription":"Open issue \"Reduce Heap allocations\" (#770)"},{"Id":"448996408","IsPullRequest":false,"CreatedAt":"2019-05-27T21:38:43","Actor":"Mrnikbobjeff","Number":"769","RawContent":null,"Title":"Improve allocation with System.Buffers","State":"open","Body":"I mainly looked through windowbase and there are various array allocations to read stream or similar. Other small arrays are so small that they could be stackallocated as they are constant length. For a perfect example check CFStream. These allocations could be removed with System.Buffers which would not have a detrimental impact on anything as far as i can tell.\r\nI created a branch with the possible conversions in the WindowBase project. The improvements remove several immediate LOH allocations which stick around for a long time, in some instances I decided to leave the byte array allocation as the direct usage of these arrays required zeroed arrays. We could of course clear them after getting them from the ArrayPool, but then we would have to consider the tradeoff between allocation(cheap&fast) vs pool obtaining(cheap&fast) and zeroing the array (more expensive than allocation)","Url":"https://github.com/dotnet/wpf/issues/769","RelatedDescription":"Open issue \"Improve allocation with System.Buffers\" (#769)"},{"Id":"448933174","IsPullRequest":false,"CreatedAt":"2019-05-27T16:29:13","Actor":"Mrnikbobjeff","Number":"768","RawContent":null,"Title":"Improvements to Quaternion and other structs","State":"open","Body":"After looking over Quaternion I realised that it could heavily benefit from vectorization with new hardware intrinsics in .net core. I started on vectorizing some funcions there and have massive speedups measured in Benchmark.Net. Also, Why does Quaternion not implement IEquatable<Quaternion> as suggested per Microsoft struct guidelines? This enables EqualityComparer<T> to take a faster path, which improves creation time of HashSet<Quaternion> and similar. Finally, we could use the new HashCode.Combine<> in a lot of places, which would be superior to rolling out manual implementations for so many types. Finally, we could improve performance of GetHashCode in its current implementation by not calling the getter method for all properties and using the fields instead, as IsDistinguishedIdentity is already checked.","Url":"https://github.com/dotnet/wpf/issues/768","RelatedDescription":"Open issue \"Improvements to Quaternion and other structs\" (#768)"},{"Id":"448462879","IsPullRequest":true,"CreatedAt":"2019-05-25T13:17:34","Actor":"dotnet-maestro[bot]","Number":"767","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190524.12\r\n- **Date Produced**: 5/25/2019 3:55 AM\r\n- **Commit**: e91179b30f5e79f82d2ac96fa0ba73277bac8442\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview6.19274.12\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/767","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#767)"},{"Id":"448436620","IsPullRequest":true,"CreatedAt":"2019-05-25T08:07:43","Actor":"rusamentiaga","Number":"766","RawContent":null,"Title":"Fix indentation related issue","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/766","RelatedDescription":"Open PR \"Fix indentation related issue\" (#766)"},{"Id":"448282898","IsPullRequest":true,"CreatedAt":"2019-05-25T01:01:40","Actor":"vatsan-madhavan","Number":"760","RawContent":null,"Title":"Add missing CoherentParentDependency=Microsoft.NETCore.App for Microsoft.Private.Winforms","State":"closed","Body":"- Move `Microsoft.Private.Winforms` from `Product` to `Toolset` Dependency\r\n - Add `CoherentParentDependency=Microsoft.NETCore.App` \r\n- Note: Not adding a `CoherentParentDependency=Microsoft.NETCore.App` for `Microsoft.DotNet.Wpf.DncEng` - this is a cycle from dotnet-wpf-int => dotnet/wpf used for testing purposes only.","Url":"https://github.com/dotnet/wpf/pull/760","RelatedDescription":"Closed or merged PR \"Add missing CoherentParentDependency=Microsoft.NETCore.App for Microsoft.Private.Winforms\" (#760)"},{"Id":"448395541","IsPullRequest":false,"CreatedAt":"2019-05-25T00:56:48","Actor":"vatsan-madhavan","Number":"765","RawContent":null,"Title":"Theme assemblies cannot be referenced","State":"open","Body":"**Background:** \r\n\r\nWPF's theme assemblies (`PresentationFramework.Aero`, `PresentationFramework.Aero2`, `PresentationFramework.AeroLite`, `PresentationFramework.Classic`, `PresentationFramework.Luna` and `PresentationFramework.Royale`) expose the same types. \r\n\r\nFor e.g., [DataGridHeaderBorder](https://docs.microsoft.com/en-us/dotnet/api/microsoft.windows.themes.datagridheaderborder?view=netframework-4.8). \r\n\r\nThese assemblies can be used in two ways. \r\n\r\nTypically, they are used as resource assemblies. i.e., they are not referenced from the project, and instead, XAML resources within them are consumed  as resources using `<ResourceDictionary ..>`. When used this way, all of these assemblies can (and often are) used in to supply themes contextually (i.e., depending on the system theme, for e.g., or some other user preference). \r\n\r\nLess commonly, they are directly referenced and their types are either consumed in XAML or directly in code. When used this way, only one assembly can be referenced directly. If more than one assembly needs to be referenced, namespace aliasing has to be used. \r\n\r\n**Problem:** \r\n\r\nThe current SDK/FrameworkReference design in .NET Core _always_ enables references to each of these assemblies. This makes them virtually unusable. We need a better scheme/solution. \r\n\r\n**Related:**\r\n\r\n- #746 \r\n- https://github.com/dotnet/sdk/issues/3265\r\n- https://github.com/dotnet/sdk/pull/3259\r\n\r\n**Note:** \r\n\r\nPart of the solution [lies in the SDK](https://github.com/dotnet/sdk/issues/3265), and part of the solution would likely have to be implemented in `Microsoft.NET.Sdk.WindowsDesktop` targets.\r\n\r\n/cc @miguep, @rladuca ","Url":"https://github.com/dotnet/wpf/issues/765","RelatedDescription":"Open issue \"Theme assemblies cannot be referenced\" (#765)"},{"Id":"448391897","IsPullRequest":true,"CreatedAt":"2019-05-25T00:44:42","Actor":"vatsan-madhavan","Number":"764","RawContent":null,"Title":"Fix PBT build - workaround for corefx/37943","State":"closed","Body":"Workaround for https://github.com/dotnet/corefx/issues/37943 \r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/764","RelatedDescription":"Closed or merged PR \"Fix PBT build - workaround for corefx/37943\" (#764)"},{"Id":"448390901","IsPullRequest":false,"CreatedAt":"2019-05-25T00:12:28","Actor":"vatsan-madhavan","Number":"763","RawContent":null,"Title":"System.Reflection.MetadataLoadContext has an incoherent dependency on System.Memory -> causes build breaks in PresentationBuildTasks","State":"open","Body":"See https://github.com/dotnet/corefx/issues/37943 for context. \r\n\r\n- [x] Implement a workaround\r\n  - #764 \r\n- [ ] Wait for corefx to fix  https://github.com/dotnet/corefx/issues/37943\r\n- [ ] Undo the workaround ","Url":"https://github.com/dotnet/wpf/issues/763","RelatedDescription":"Open issue \"System.Reflection.MetadataLoadContext has an incoherent dependency on System.Memory -> causes build breaks in PresentationBuildTasks\" (#763)"},{"Id":"448318098","IsPullRequest":false,"CreatedAt":"2019-05-24T19:15:56","Actor":"vatsan-madhavan","Number":"762","RawContent":null,"Title":"Open Source BamlReflector tool ","State":"open","Body":"`BamlReflector` is a test tool used by the WPF team to decompile BAML to XAML. This issue tracks open-sourcing of this tools. \r\n\r\nIn the near term (.NET Core 3.x timeframe), we will not be able to develop a full-blown set of API's to provide this functionality (related: #445), but the sources for this tool should help anyone who would like to build their own decompilation functionality. ","Url":"https://github.com/dotnet/wpf/issues/762","RelatedDescription":"Open issue \"Open Source BamlReflector tool \" (#762)"},{"Id":"448285425","IsPullRequest":false,"CreatedAt":"2019-05-24T17:49:26","Actor":"vatsan-madhavan","Number":"761","RawContent":null,"Title":"eng\\Version.Details.xml is missing CoherentParentDependency attribute for some packages","State":"open","Body":"`eng\\Version.Details.xml` is missing `CoherentParentDependency` attribute for some packages (Winforms, Wpf.DncEng, Wpf.GitHub). \r\n\r\nThese should be added to ensure that DARC updates are coherent. \r\n\r\n- [x] Add dependencies to dotnet/wpf- \r\n- [ ] Flow changes from dotnet/wpf => dotnet-wpf-int\r\n- [ ] Add CoherentParentDependency attributes in dotnet-wpf-int","Url":"https://github.com/dotnet/wpf/issues/761","RelatedDescription":"Open issue \"eng\\Version.Details.xml is missing CoherentParentDependency attribute for some packages\" (#761)"},{"Id":"448264021","IsPullRequest":false,"CreatedAt":"2019-05-24T17:08:22","Actor":"vatsan-madhavan","Number":"759","RawContent":null,"Title":"test","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/759","RelatedDescription":"Closed issue \"test\" (#759)"},{"Id":"448247788","IsPullRequest":false,"CreatedAt":"2019-05-24T16:09:42","Actor":"tim-fernico","Number":"758","RawContent":null,"Title":"Cannot compile WPF with parameterized App constructor","State":"open","Body":"* .NET Core Version: 3.0 Preview5\r\n* Windows version: Windows 10 Pro (1903)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.7.2?: No\r\n\r\n **Problem description:**\r\nCannot compile WPF app with parameterized App constructor.  My App constructor is defined as\r\n```\r\n public App(object param1, ...)\r\n``` \r\n\r\n **Actual behavior:** \r\nBuild fails with following error:\r\n``` \r\n>obj\\Debug\\netcoreapp3.0\\App.g.cs(74,35,74,46): error CS7036: There is no argument given that corresponds to the required formal parameter 'param1' of 'App.App(object param1)'\r\n``` \r\nThis is due to the generated Main method in app.g.cs calling the App constructor without any parameters.\r\n\r\n **Expected behavior:**\r\nWith .NET 4.7, I specify that the App.xaml build action is 'Page' rather than 'Application definition' to make sure duplicate Main is not generated.  I cannot change the build action in a dot net 3.0 csproj as I get:\r\n\r\n    error NETSDK1022: Duplicate 'Compile' items were included.\r\n \r\n **Related discussion**\r\nhttps://github.com/dotnet/wpf/issues/192","Url":"https://github.com/dotnet/wpf/issues/758","RelatedDescription":"Open issue \"Cannot compile WPF with parameterized App constructor\" (#758)"},{"Id":"448158565","IsPullRequest":true,"CreatedAt":"2019-05-24T13:10:25","Actor":"dotnet-maestro[bot]","Number":"757","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190523.7\r\n- **Date Produced**: 5/23/2019 1:30 PM\r\n- **Commit**: 70fedf3368a36691118e0f1ebc565f222d0ca932\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview6.19273.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/757","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#757)"},{"Id":"448155081","IsPullRequest":false,"CreatedAt":"2019-05-24T12:52:37","Actor":"grubioe","Number":"756","RawContent":null,"Title":"[netcore3] AssemblyHelper depends on obsolete dlls to be loaded in order to load extensions","State":"open","Body":"Copied from VSO ID: 831354\r\nProblem:\r\n\r\n\\WindowsBase\\MS\\Internal\\AssemblyHelper.cs expects certain obsolete assemblies to be loaded (such as System.Data.dll) in order to load extension dlls.\r\n\r\nThis is a problem when someone uses types that used to be contained in these assemblies, as the extension functionality does not get loaded and the extension methods cannot be called. \r\n\r\nSteps to reproduce:\r\n\r\n1. Run DrtDataSrv \r\n2. Observe Exception:\r\nSystem.Exception: 'Assert failed: Target value has wrong value for target String, source SQLStruct, property SqlDouble Expected: null  Got:  [Suite: markup  Test: TestTargetNullValue\r\n]'\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/756","RelatedDescription":"Open issue \"[netcore3] AssemblyHelper depends on obsolete dlls to be loaded in order to load extensions\" (#756)"},{"Id":"448151838","IsPullRequest":true,"CreatedAt":"2019-05-24T12:45:44","Actor":"dotnet-maestro[bot]","Number":"755","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190523.08\r\n- **Date Produced**: 5/24/2019 4:52 AM\r\n- **Commit**: 20426e8c486d8715337cb6438ec70bc3619a514d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27723-08\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19273.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190524.03\r\n- **Date Produced**: 5/25/2019 5:20 AM\r\n- **Commit**: 4122653611ecb6e7f964af762b4280ba0e1421c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27724-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190524.03\r\n- **Date Produced**: 5/25/2019 5:20 AM\r\n- **Commit**: 4122653611ecb6e7f964af762b4280ba0e1421c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27724-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190524.03\r\n- **Date Produced**: 5/25/2019 5:20 AM\r\n- **Commit**: 4122653611ecb6e7f964af762b4280ba0e1421c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27724-03\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.5 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190527.02\r\n- **Date Produced**: 5/28/2019 4:18 AM\r\n- **Commit**: 61f83f1f764a8a2840a21779e386c2ad11fca75d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27727-02\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19274.8 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/755","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#755)"},{"Id":"448136516","IsPullRequest":true,"CreatedAt":"2019-05-24T12:18:58","Actor":"dotnet-maestro[bot]","Number":"754","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190523.11\r\n- **Date Produced**: 5/24/2019 5:52 AM\r\n- **Commit**: 02a90cc69d2d32bbde9e6e0e41186711c591de27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19273.11\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/754","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#754)"},{"Id":"448108984","IsPullRequest":true,"CreatedAt":"2019-05-24T10:58:26","Actor":"facebamm","Number":"753","RawContent":null,"Title":"Type equivalent performance","State":"open","Body":"## Output \r\n|  | sourceByte | sourceInt |\r\n| -- | -- | -- |\r\n| TypecastingPtrDesc | 350ms  | 600ms  | \r\n| PtrDesc | 290ms | 276ms |\r\n\r\n## Type equivalent performance test case \r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n        {\r\n            Array sourceByte = new Byte[] { 5, 6, 7 };\r\n            Array sourceInt = new int[] { 1, 2, 3 };\r\n            Stopwatch watch = new Stopwatch();\r\n\r\n            Console.WriteLine(\"## sourceByte ##\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                TypecastingPtrDesc(sourceByte);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"TypecastingPtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                PtrDesc((byte[])sourceByte);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"PtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n\r\n            Console.WriteLine(\"## sourceInt ##\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                TypecastingPtrDesc(sourceInt);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"TypecastingPtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n            watch.Restart();\r\n            for (int i = 0; i < 10_000_000; i++)\r\n            {\r\n                PtrDesc((int[])sourceInt);\r\n            }\r\n            watch.Stop();\r\n            Console.WriteLine($\"PtrDesc: {watch.Elapsed.Milliseconds}ms\");\r\n        }\r\n\r\n\r\n        private unsafe static void TypecastingPtrDesc(System.Array value)\r\n        {\r\n            switch (value)\r\n            {\r\n                case byte[] byteArray:\r\n                    fixed (void* valuePtr = byteArray)\r\n                    {\r\n                        for (int iElement = 0, nElement = byteArray.Length; iElement < nElement; iElement++)\r\n                        {\r\n                            *((int*)valuePtr + iElement) = iElement;\r\n                        }\r\n                    }\r\n                    break;\r\n                case int[] intArray:\r\n                    fixed (void* valuePtr = intArray)\r\n                    {\r\n                        for (int iElement = 0, nElement = intArray.Length; iElement < nElement; iElement++)\r\n                        {\r\n                            *((int*)valuePtr + iElement) = iElement;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        private unsafe static void PtrDesc<T>(T[] pixels) where T : unmanaged\r\n        {\r\n            fixed (void* pixelsPtr = pixels)\r\n            {\r\n                for (int iElement = 0, nElement = pixels.Length; iElement < nElement; iElement++)\r\n                {\r\n                    *((byte*) pixelsPtr + iElement) = (byte) iElement;\r\n                }\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/wpf/pull/753","RelatedDescription":"Open PR \"Type equivalent performance\" (#753)"},{"Id":"447971039","IsPullRequest":false,"CreatedAt":"2019-05-24T04:12:05","Actor":"dotMorten","Number":"752","RawContent":null,"Title":"Add implicit conversion between System.Drawing.Color and System.Windows.Media.Color","State":"open","Body":"Currently System.Windows.Media.Color is the color type used throughout WPF. This type however is not part of .NET Standard, which uses System.Drawing.Color instead.\r\n\r\nIt would be very useful that there's an implicit conversion between these two types, so that we can use either to bind in XAML or parse into for instance a color brush etc, so we can reuse these properties for various object models across multiple platforms.\r\n\r\nExample:\r\n```cs\r\npublic class MyViewModel\r\n{\r\n    public System.Drawing.Color Color { get; set; }\r\n}\r\n```\r\n```xml\r\n <Grid>\r\n   <Grid.DataContext>\r\n        <local:MyViewModel />\r\n   </Grid.DataContext>\r\n   <Ellipse Width=\"40\" Height=\"40\" Fill=\"{Binding Color}\" />\r\n</Grid>\r\n```\r\n\r\nThis currently produces a binding error like this:\r\n```\r\nSystem.Windows.Data Error: 1 : Cannot create default converter to perform 'one-way' conversions between types 'System.Drawing.Color' and 'System.Windows.Media.Brush'. Consider using Converter property of Binding. BindingExpression:Path=Color; DataItem='MyViewModel' (HashCode=64844482); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')\r\nSystem.Windows.Data Error: 5 : Value produced by BindingExpression is not valid for target property.; Value='Color [Red]' BindingExpression:Path=Color; DataItem='MyViewModel' (HashCode=64844482); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')\r\n```\r\n\r\nI added something similar to Xamarin.Forms as well https://github.com/xamarin/Xamarin.Forms/pull/1359\r\n(Also hoping we can add this to UWP too, so everyone plays nice with .NET Standard).\r\n\r\nImplementation suggestion:\r\n```cs\r\nnamespace System.Windows.Media\r\n{\r\n   public struct Color\r\n   {\r\n        public static implicit operator System.Drawing.Color(Color color) => \r\n            System.Drawing.Color.FromArgb(color.A, color.R, color.G, color.B);\r\n\r\n        public static implicit operator Color(System.Drawing.Color color) => \r\n            FromArgb(color.A, color.R, color.G, color.B);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/752","RelatedDescription":"Open issue \"Add implicit conversion between System.Drawing.Color and System.Windows.Media.Color\" (#752)"},{"Id":"447967656","IsPullRequest":false,"CreatedAt":"2019-05-24T03:54:48","Actor":"dotMorten","Number":"751","RawContent":null,"Title":"Cannot use local build of WPF in an application","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nWhen trying to use the locally built binaries using the approach [described here](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md#testing-api-changes), the application compiles and launches, but before any breakpoint is hit (even in App.Xaml.cs' constructor) the app terminates.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe app terminates with code -532462766 (0xe0434352) before even hitting the first line of code. EventViewer shows the following:\r\n```\r\nApplication: WpfTest.exe\r\nCoreCLR Version: 4.6.27622.75\r\n.NET Core Version: 3.0.0-preview5-27626-15\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.IO.FileNotFoundException: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n```\r\n PresentationFramework.dll is present in the output folder, and identical to the one built from the repo, so it appears it's looking for a different assembly (version doesn't match either).\r\n\r\n **Expected behavior:**\r\nApp launches\r\n \r\n **Minimal repro:**\r\nInstall latest .NET Core 3.0 SDK (Preview 5)\r\nThen from commandline:\r\n```\r\n  git clone https://github.com/dotnet/wpf \r\n  wpf\\restore.cmd\r\n  wpf\\build.cmd -pack\r\n  md WpfTest\r\n  cd WpfTest\r\n  dotnet new wpf\r\n```\r\nOpen the generated project and add the following (based on the dev doc, but note the doc left out the `\\Debug\\` part of the paths):\r\n```xml\r\n <PropertyGroup>\r\n     <!-- Change this value based on where your local repo is located -->\r\n     <WpfRepoRoot>..\\wpf</WpfRepoRoot>\r\n     <!-- Publishing a self-contained app ensures our binaries are used. -->\r\n     <SelfContained>true</SelfContained>\r\n    <!-- The runtime identifier needs to match the architecture you built WPF assemblies for. -->\r\n    <RuntimeIdentifier>win-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\ref\\netcoreapp3.0\\*.dll\" Private=\"false\" />\r\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\lib\\netcoreapp3.0\\*.dll\" />\r\n    <ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\Debug\\Microsoft.DotNet.Wpf.GitHub\\lib\\$(RuntimeIdentifier)\\*.dll\" />\r\n  </ItemGroup>\r\n```\r\n\r\nRun the app (it'll exit almost immediately). \r\n\r\nI also tried with the nightly build of the SDK, but `ReferenceCopyLocalPaths` because the version is newer than what you build locally (that's fixable, but then you also need to override you nuget package sources, and at that point you're back to the above problem)\r\n\r\n@stevenbrix [reported](https://twitter.com/steven_brix/status/1131695332511760384) he's also seeing the same behavior.","Url":"https://github.com/dotnet/wpf/issues/751","RelatedDescription":"Open issue \"Cannot use local build of WPF in an application\" (#751)"},{"Id":"447928060","IsPullRequest":true,"CreatedAt":"2019-05-24T00:27:41","Actor":"MattGal","Number":"750","RawContent":null,"Title":"Update to pool-provider sourced machines","State":"open","Body":"@vatsan-madhavan FYI","Url":"https://github.com/dotnet/wpf/pull/750","RelatedDescription":"Open PR \"Update to pool-provider sourced machines\" (#750)"},{"Id":"447914205","IsPullRequest":false,"CreatedAt":"2019-05-23T23:23:22","Actor":"vatsan-madhavan","Number":"749","RawContent":null,"Title":"GenerateTemplates target in PresentationFramework.csproj is flaky","State":"open","Body":"On local builds, `GenerateTemplates` target in `PresentationFramework.csproj` sometimes generates empty `$(IntermediateOutputPath)ColumnDefinition.cs` and `$(IntermediateOutputPath)RowDefinition.cs` files. \r\n\r\nThis leads to failures like the one reported in #748 \r\n\r\n```\r\n------ Build started: Project: PresentationFramework, Configuration: Debug Any CPU ------\r\nSystem\\Windows\\Controls\\Grid.cs(309,16,309,42): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(324,16,324,39): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3347,22,3347,48): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(3348,22,3348,45): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4151,21,4151,47): error CS0246: The type or namespace name 'ColumnDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nSystem\\Windows\\Controls\\Grid.cs(4152,21,4152,44): error CS0246: The type or namespace name 'RowDefinitionCollection' could not be found (are you missing a using directive or an assembly reference?)\r\nDone building project \"PresentationFramework.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/wpf/issues/749","RelatedDescription":"Open issue \"GenerateTemplates target in PresentationFramework.csproj is flaky\" (#749)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-29T05:30:48.5799949Z","RunDurationInMilliseconds":765}