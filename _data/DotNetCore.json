{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":16,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6676363452","Type":"IssuesEvent","CreatedAt":"2017-10-05T05:05:41","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14336","RelatedDescription":"Closed issue \"Optimization causing lots of corefx tests to fail\" (#14336) at dotnet/coreclr","RelatedBody":"Repro:\r\nCompile/run this in release against the latest coreclr:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        new ArraySegment<byte>(new byte[512], 512, 0);\r\n    }\r\n}\r\n```\r\nIt throws:\r\n```\r\nUnhandled Exception: System.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\r\n   at System.ThrowHelper.ThrowArraySegmentCtorValidationFailedExceptions(Array array, Int32 offset, Int32 count) in c:\\Users\\stoub\\Source\\Repos\\coreclr\\src\\mscorlib\\src\\System\\ThrowHelper.cs:line 264\r\n```\r\nbut should run successfully."},{"Id":"6676362832","Type":"PullRequestEvent","CreatedAt":"2017-10-05T05:05:22","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14337","RelatedDescription":"Opened pull request \"Fix new deadlock possibility in ReaderWriterLockSlim from a recent change\" (#14337) at dotnet/coreclr","RelatedBody":"Fixed the following scenario that would lead to deadlock (rare, but frequently reproducible if code is changed):\r\n- Thread T0 signals the write waiter event or the upgradeable read waiter event to wake a waiter\r\n- There are no threads waiting on the event, but T1 is in WaitOnEvent() after exiting the spin lock and before actually waiting on the event (that is, it's recorded that there is one waiter for the event). It remains in this region for a while, in the repro case it typically gets context-switched out.\r\n- T2 acquires the RW lock in some fashion that blocks T0 from acquiring the RW lock\r\n- T0 fails to acquire the RW lock enough times for it to enter WaitOnEvent for the same event as T1\r\n- T0 resets the event\r\n- T2 releases the RW lock and does not wake a waiter because the reset at the previous step lost a signal but _waiterStates was not updated to reflect that\r\n- T2 exits (or otherwise no longer attempts to acquire the RW lock), and there are no other threads spinning for the RW lock\r\n- T1 and other threads begin waiting on the event, but there's no longer any thread that would wake them"},{"Id":"6676361042","Type":"PullRequestEvent","CreatedAt":"2017-10-05T05:04:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14323","RelatedDescription":"Merged pull request \"Fix condition flags reuse optimization\" (#14323) at dotnet/coreclr","RelatedBody":"This optimization is not valid for unsigned LT/LE/GT/GE relops. Using the Carry flag this way indicates that the operation overflowed, not that the result is less than 0, that's impossible for unsigned integers.\r\n\r\nFixes #14321"},{"Id":"6676361035","Type":"IssuesEvent","CreatedAt":"2017-10-05T05:04:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14321","RelatedDescription":"Closed issue \"[RyuJIT] The \"reuse flags\" optimization handles compares incorrectly\" (#14321) at dotnet/coreclr","RelatedBody":"#14027 enabled all relops to reuse flags set by a previous ALU operation. This is incorrect for unsigned LT/LE/GT/GE relops:\r\n```C#\r\nstatic bool Test(uint x) => ((x - 42) < 0);\r\n```\r\nreturns `true` when `x` is 42 but it should always return `false`.\r\n\r\nGenerated code:\r\n```asm\r\n       83C1D6               add      ecx, -42\r\n       0F92C0               setb     al ; checking CF here tells you that an overflow occurred\r\n                                        ; not that the result is < 0, it never is\r\n       0FB6C0               movzx    rax, al\r\n```\r\n\r\nSame for ARM64:\r\n```asm\r\n        7100A800          subs    w0, w0, #42\r\n        9A9F27E0          cset    x0, lo\r\n```\r\n\r\nFor unsigned relops the optimization should be limited to EQ/NE. For others:\r\n* `x LT 0` - always false; the entire relop should be removed together with the subsequent SETCC/JCC but it's a rare case so it's not worth the trouble\r\n* `x LE 0` - equivalent to `x EQ 0`. Morph does this transform already.\r\n* `x GT 0` - equivalent to `x NE 0`. Morph handles this too.\r\n* `x GE 0` - always true; like `LT`, this should be removed but it's not worth the trouble."},{"Id":"6676299474","Type":"PullRequestEvent","CreatedAt":"2017-10-05T04:34:28","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14330","RelatedDescription":"Merged pull request \"fgDebugCheckFlags should use OperMayThrow for all nodes.\" (#14330) at dotnet/coreclr","RelatedBody":"This statement should be always true: `(int)tree->operMayThrow()  >= (tree->gtFlags | GTF_EXCEPT)` . It means if tree may throw, than it must be marked with `GTF_EXCEPT`.\r\n\r\nIt was not checked for leaf nodes in `fgDebugCheckFlags`, so when I enabled it, it showed that for `GT_CATCH_ARG` `operMayThrow` returns wrong result.\r\n\r\nWas found as part of my experiments with the fact, that `GTF_EXCEPT` values set in `impImportCall` are not used, because `morph` always rewrites it based on `operMayThrow`.\r\n\r\nMaybe we should do the same check with `OperRequiresAsgFlag`."},{"Id":"6676218151","Type":"IssuesEvent","CreatedAt":"2017-10-05T03:53:38","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14336","RelatedDescription":"Opened issue \"Optimization causing lots of corefx tests to fail\" (#14336) at dotnet/coreclr","RelatedBody":"Repro:\r\nCompile/run this in release against the latest coreclr:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        new ArraySegment<byte>(new byte[512], 512, 0);\r\n    }\r\n}\r\n```\r\nIt throws:\r\n```\r\nUnhandled Exception: System.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\r\n   at System.ThrowHelper.ThrowArraySegmentCtorValidationFailedExceptions(Array array, Int32 offset, Int32 count) in c:\\Users\\stoub\\Source\\Repos\\coreclr\\src\\mscorlib\\src\\System\\ThrowHelper.cs:line 264\r\n```\r\nbut should run successfully."},{"Id":"6676126168","Type":"IssuesEvent","CreatedAt":"2017-10-05T03:08:42","Actor":"kingces95","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14335","RelatedDescription":"Closed issue \"Cannot run test referencing System.Reflection.Emit.dll\" (#14335) at dotnet/coreclr","RelatedBody":"I am be able to build a test that references classes in `System.Reflection.Emit` so I expected I'd be able to run that test as well. What I actually find is that the metadata is available during the build but absent during the run. \r\n\r\nFollowing the documentation for building tests I find from the msbuild logs that the assembly referenced during a build is:\r\n\r\n>packages\\Microsoft.Private.CoreFx.NETCoreApp\\4.5.0-preview1-25712-02\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\r\n\r\nBut the assembly that is used during the run is the one that that ends up at:\r\n\r\n>bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\System.Reflection.Emit.dll\r\n\r\nAnd that assembly contains no metadata. I expected it to contain metadata to enable loading classes in the emit namespace."},{"Id":"6676078569","Type":"IssuesEvent","CreatedAt":"2017-10-05T02:45:56","Actor":"kingces95","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14335","RelatedDescription":"Opened issue \"Cannot create test referencing System.Reflection.Emit.dll\" (#14335) at dotnet/coreclr","RelatedBody":"I am be able to build a test that references classes in `System.Reflection.Emit` so I expected I'd be able to run that test as well. What I actually find is that the metadata is available during the build but absent during the run. \r\n\r\nFollowing the documentation for building and running tests I find that the assembly referenced during a build is:\r\n\r\n>packages\\Microsoft.Private.CoreFx.NETCoreApp\\4.5.0-preview1-25712-02\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\r\n\r\nBut the assembly that is used during the run is the one that that ends up at:\r\n\r\n>bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\System.Reflection.Emit.dll\r\n\r\nAnd that assembly contains no metadata. I expected it to contain metadata to enable loading classes in the emit namespace."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6675965149","Type":"IssuesEvent","CreatedAt":"2017-10-05T01:52:08","Actor":"asyncx","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7763","RelatedDescription":"Opened issue \"dotnet store command fails for linux-arm\" (#7763) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nCreate a `packages.csproj` file with the following content\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <ItemGroup>\r\n        <PackageReference Include=\"StackExchange.Redis\" Version=\"1.2.6\" />\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThen run `dotnet store` on the file like so\r\n\r\n```\r\ndotnet store --manifest packages.csproj --runtime linux-arm --framework netcoreapp2.0 --framework-version 2.0.0 --output my-store\r\n```\r\n\r\n## Expected  behavior\r\n\r\nCommand finishes successfully and the `my-store` folder is populated with the specified runtime assemblies and artifact file.\r\n\r\n## Actual behavior\r\n\r\nCommand produces the following output and no assemblies are saved to the folder\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /project/packages.csproj...\r\n  Generating MSBuild file /tmp/khpe4knh.jw2/Optimize/packages.csproj.nuget.g.props.\r\n  Generating MSBuild file /tmp/khpe4knh.jw2/Optimize/packages.csproj.nuget.g.targets.\r\n  Restore completed in 297.15 ms for /project/packages.csproj.\r\n  Restoring packages for /project/packages.csproj...\r\n  Generating MSBuild file /tmp/khpe4knh.jw2/StackExchange.Redis_1.2.6/packages.csproj.nuget.g.props.\r\n  Generating MSBuild file /tmp/khpe4knh.jw2/StackExchange.Redis_1.2.6/packages.csproj.nuget.g.targets.\r\n  Restore completed in 730.99 ms for /project/packages.csproj.\r\n  /bin/sh: 2: /tmp/tmpc98baf8529ab48c9888c9d15caef16d1.exec.cmd: /tmp/khpe4knh.jw2/Optimize/netcoreapp/crossgen: not found\r\n/usr/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.CrossGen.targets(155,5): error MSB3073: The command \"/tmp/khpe4knh.jw2/Optimize/netcoreapp/crossgen -readytorun -in /root/.nuget/packages/stackexchange.redis/1.2.6/lib/netstandard1.5/StackExchange.Redis.dll -out /tmp/khpe4knh.jw2/StackExchange.Redis_1.2.6/runtimopt/StackExchange.Redis.dll -jitpath /root/.nuget/packages/runtime.linux-arm.microsoft.netcore.app/2.0.0/runtimes/linux-arm/native/libclrjit.so -platform_assemblies_paths /tmp/khpe4knh.jw2/StackExchange.Redis_1.2.6/runtimeref:/tmp/khpe4knh.jw2/Optimize/netcoreapp\" exited with code 127. [/project/packages.csproj]\r\n  Files were composed in /project/my-store/arm/netcoreapp2.0/\r\n  The list of packages stored is in /project/my-store/arm/netcoreapp2.0/artifact.xml\r\n```\r\n\r\n## Environment data\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6675872079","Type":"PullRequestEvent","CreatedAt":"2017-10-05T01:09:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7762","RelatedDescription":"Opened pull request \"Merge release/15.5 into release/2.0.0\" (#7762) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"6675810688","Type":"IssuesEvent","CreatedAt":"2017-10-05T00:42:51","Actor":"cartermp","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7761","RelatedDescription":"Opened issue \"Merge latest F# bits in 15.5 branch\" (#7761) at dotnet/cli","RelatedBody":"This is a tracking bug.  @KevinRansom recently fixed a bug in assembly resolution which was resulting in a StackOverflow exception: https://github.com/Microsoft/visualfsharp/pull/3658\r\n\r\n\r\n\r\n\r\n"},{"Id":"6675598172","Type":"IssuesEvent","CreatedAt":"2017-10-04T23:18:12","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6723","RelatedDescription":"Closed issue \"Unable to find F# project in solution to restore\" (#6723) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\n{11:51}~/test ➭ dotnet new sln -n fsharpsolution\r\nContent generation time: 60.1264 ms\r\nThe template \"Solution File\" created successfully.\r\n{11:51}~/test ➭ dotnet new console -lang F# -n proj1\r\nContent generation time: 111.1087 ms\r\nThe template \"Console Application\" created successfully.\r\n{11:51}~/test ➭ dotnet sln add proj1/proj1.fsproj\r\nProject `proj1/proj1.fsproj` added to the solution.\r\n{11:51}~/test ➭ dotnet restore\r\n/opt/dotnet/sdk/1.0.4/NuGet.targets(97,5): warning : Unable to find a project to restore! [/home/cnikkel@fvscloud.com/test/fsharpsolution.sln]\r\n{11:52}~/test ➭ cat /etc/redhat-release && dotnet --version\r\nCentOS Linux release 7.2.1511 (Core)\r\n1.0.4\r\n```\r\nNOTE: Also tested using linux subsystem on windows 10 with Ubuntu 14.04.5 LTS and dotnet version 1.0.4 and got same results\r\n\r\n## Expected  behavior\r\n\r\nAll F# projects in solution should be able to restore and build.\r\n\r\n## Actual behavior\r\n\r\nNo F# projects are found in solution to restore.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n[cnikkel@syslog test]$ dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /opt/dotnet/sdk/1.0.4\r\n```AND```\r\n{11:57}~/test ➭ dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/1.0.4\r\n```\r\n\r\n\r\n"},{"Id":"6674950005","Type":"IssuesEvent","CreatedAt":"2017-10-04T20:26:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7760","RelatedDescription":"Closed issue \"dotnet new does not consider local nuget.config\" (#7760) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Configure some nuget sources in visual studio(2015,2017, no matter).\r\n2. Create an empty folder.\r\n3. Create nuget.config with a following content:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n    <config>\r\n    </config>\r\n    <packageSources>\r\n    <clear /> <!-- ensure only the sources defined below are used -->\r\n    <add key=\"nuget\" value=\"https://nuget.org/api/v2/\" />\r\n    </packageSources>\r\n</configuration>\r\n```\r\n\r\n\r\nAs we see, all other sources except nuget.org should be removed\r\n\r\n4. Run, for example , dotnet new -i \"giraffe-template::*\" in folder.\r\n5. See the message (something like this):\r\n\r\n  Retrying 'FindPackagesByIdAsyncCore' for source 'https://mysource/api/FindPackagesById()?id='giraffe-template''.\r\n  Response status code does not indicate success: 404 (Not Found).\r\n  \r\n## Expected  behavior\r\ndotnet new should consider package sources configured in local nuget.config\r\n\r\n\r\n## Actual behavior\r\n\r\ndotnet new ignores local nuget.config\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6674946333","Type":"PullRequestEvent","CreatedAt":"2017-10-04T20:25:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7757","RelatedDescription":"Merged pull request \"Moving the runtime version to 2.0.0 for the SDK.\" (#7757) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli \r\n\r\nThe 2.0.1 runtime we were referencing has not been release.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6674601934","Type":"PullRequestEvent","CreatedAt":"2017-10-04T19:06:28","Actor":"eerhardt","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/525","RelatedDescription":"Merged pull request \"[dev/release/2.0.0] Move web sources before potentially local sources\" (#525) at dotnet/standard","RelatedBody":"Followup to https://github.com/dotnet/standard/pull/523 (initial API implementation). Adds a workaround to a `--source` bug that I added to the CoreFX repo API PR discussed at https://github.com/dotnet/corefx/pull/24378#discussion_r142285244."},{"Id":"6670813476","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:27:22","Actor":"tmenier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/526","RelatedDescription":"Opened issue \"Did the term \"portable\" die with PCLs?\" (#526) at dotnet/standard","RelatedBody":"Not sure if this is a good place this question. I have a library that used to be a PCL and has since been updated to target .NET Standard. Should I no longer say the library is \"portable\"? Is there a replacement term I should use? \"Portable\" seems appropriate, yet the term seems to have died with PCLs and I'm not entirely sure why. Thanks!"},{"Id":"6668348275","Type":"PullRequestEvent","CreatedAt":"2017-10-03T15:30:58","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/525","RelatedDescription":"Opened pull request \"[dev/release/2.0.0] Move web sources before potentially local sources\" (#525) at dotnet/standard","RelatedBody":"Followup to https://github.com/dotnet/standard/pull/523 (initial API implementation). Adds a workaround to a `--source` bug that I added to the CoreFX repo API PR discussed at https://github.com/dotnet/corefx/pull/24378#discussion_r142285244."},{"Id":"6666299022","Type":"IssuesEvent","CreatedAt":"2017-10-03T07:37:10","Actor":"moh-hassan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/524","RelatedDescription":"Opened issue \"After the final release of .Net Standard 2.0 and .Net Core 2.0, what are the missing 43 API that not implemented in net461?\" (#524) at dotnet/standard","RelatedBody":"I read the discussion:\r\n[Understanding why there is no cleaner way than .NET Framework 4.6.1 supporting .NET Standard 2.0 #133](https://github.com/dotnet/standard/issues/133) and \r\n[What are the 43 APIs that are in .Net Standard 2.0 but not in .Net Framework 4.6.1?](https://stackoverflow.com/questions/43601101/what-are-the-43-apis-that-are-in-net-standard-2-0-but-not-in-net-framework-4-6)\r\nAnd find that these 43 API are not documented anywhere on the Internet, so I ask:\r\n\r\n- What are the missing 43 API that is not implemented in net461?\r\n- How to avoid their usage in net461 (before firing exceptions in unit test)?\r\n- Can we get a browser like [.NET API Browser](https://docs.microsoft.com/en-us/dotnet/api/) or tool in github  that mention frankly these API?\r\n- Can  multi target project (netstandard2,net461) protect against the usage of these 43 API?\r\n"},{"Id":"6664043234","Type":"PullRequestEvent","CreatedAt":"2017-10-02T18:39:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/523","RelatedDescription":"Merged pull request \"Add auto dependency flow repo API\" (#523) at dotnet/standard","RelatedBody":"Implement [auto dependency flow repo API](https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/auto-dependency-flow/api.md).\r\n\r\nThe new BuildTools package provides a common implementation for most of the args (https://github.com/dotnet/buildtools/pull/1707), but some changes are required:\r\n * The `dir.props` source changes are because BuildTools now provides a default value of `RestoreSources` based on repo API args. BuildTools also now automatically flows the property into the restore command."},{"Id":"6663597203","Type":"PullRequestEvent","CreatedAt":"2017-10-02T16:59:28","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/523","RelatedDescription":"Opened pull request \"Add auto dependency flow repo API\" (#523) at dotnet/standard","RelatedBody":"Implement [auto dependency flow repo API](https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/auto-dependency-flow/api.md).\r\n\r\nThe new BuildTools package provides a common implementation for most of the args (https://github.com/dotnet/buildtools/pull/1707), but some changes are required:\r\n * The `dir.props` source changes are because BuildTools now provides a default value of `RestoreSources` based on repo API args. BuildTools also now automatically flows the property into the restore command."},{"Id":"6662856018","Type":"IssuesEvent","CreatedAt":"2017-10-02T14:31:19","Actor":"mattkoch614","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/522","RelatedDescription":"Opened issue \"Creating a class library in 2.0 and referencing it from an SSIS script component/task\" (#522) at dotnet/standard","RelatedBody":"We have a set of SSIS packages that leverage script components and script tasks. These packages were written in Visual Studio 2012 and are deployed to a server that has the .NET framework 4.5 and SQL Server 2012 Standard installed.\r\n\r\nWhat we'd like to do is write some new class libraries using .NET Standard 2.0 and be able to reference them from the script components and tasks inside of our existing SSIS packages. The script components and tasks by default target the .NET Framework 4.0.  Is this possible?\r\n\r\nPreliminary testing of this scenario results in the script tasks throwing an error of ``'System.Obect' is not defined`` which leads me to believe there is some clashing going on with either the Visual Studio version or the .NET framework itself.\r\n\r\nAny help greatly appreciated. "},{"Id":"6659512216","Type":"IssuesEvent","CreatedAt":"2017-10-01T12:45:22","Actor":"jogibear9988","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/521","RelatedDescription":"Opened issue \"Error loading a WPF App (Net 4.6.2) referncing NetStandart 2.0 Dlls\" (#521) at dotnet/standard","RelatedBody":"I have a huge Solution wich using over 50 Assemblys. Some of them Target Netstandart 2.0, some older Versions.\r\n\r\nNow I have the following error during Startup:\r\n\r\nDie Datei oder Assembly \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" oder eine Abhängigkeit davon wurde nicht gefunden. Die gefundene Manifestdefinition der Assembly stimmt nicht mit dem Assemblyverweis überein. (Ausnahme von HRESULT: 0x80131040)\r\nDateiname: \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" ---> System.IO.FileLoadException: Die Datei oder Assembly \"System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" oder eine Abhängigkeit davon wurde nicht gefunden. Die gefundene Manifestdefinition der Assembly stimmt nicht mit dem Assemblyverweis überein. (Ausnahme von HRESULT: 0x80131040)\r\nDateiname: \"System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\n\r\nbut I have the Assembly Redirect:\r\n\r\n  <dependentAssembly>\r\n                <assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n                <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.1.1.0\" />\r\n            </dependentAssembly>\r\n\r\nIn my app.config! What can I do?"},{"Id":"6657495023","Type":"PullRequestEvent","CreatedAt":"2017-09-30T06:27:41","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/520","RelatedDescription":"Opened pull request \"Add more explicit instructions for installing Microsoft.Packaging.Tools.Trimming\" (#520) at dotnet/standard","RelatedBody":"Solves https://github.com/dotnet/standard/issues/518"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6676385633","Type":"IssuesEvent","CreatedAt":"2017-10-05T05:16:37","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24443","RelatedDescription":"Opened issue \"Please add Task continuation function with async await\" (#24443) at dotnet/corefx","RelatedBody":"`Task` class was made before async/await syntax so I understand why there are `ContinueWith` function exist. But now I think we should have the same function for async/await\r\n\r\nCurrently now I write extension method for it like this\r\n\r\n```C#\r\npublic static async Task<V> Then<T,V>(this Task<T> task,Func<T,V> func)\r\n{\r\n\treturn func(await task);\r\n}\r\n\r\npublic static async Task<V> ThenAsync<T,V>(this Task<T> task,Func<T,Task<V>> func)\r\n{\r\n\treturn await func(await task);\r\n}\r\n\r\n//usage\r\nTask<int> taskInt;\r\nvar result = await taskInt.Then(async(i) => await HttpGet(url + \"/\" + i));\r\n```\r\n\r\nI don't know what it should be named but please add this to BCL"},{"Id":"6676303068","Type":"PullRequestEvent","CreatedAt":"2017-10-05T04:36:21","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24434","RelatedDescription":"Merged pull request \"Add TextReader/Writer Memory-based virtuals\" (#24434) at dotnet/corefx","RelatedBody":"And override both the Span and Memory-based virtuals on StringReader and StringWriter.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/22410\r\nFixes https://github.com/dotnet/corefx/issues/22406\r\nFixes https://github.com/dotnet/corefx/issues/22411\r\n\r\ncc: @JeremyKuhne, @pjanotti, @KrzysztofCwalina, @ahsonkhan "},{"Id":"6676303062","Type":"IssuesEvent","CreatedAt":"2017-10-05T04:36:21","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/22411","RelatedDescription":"Closed issue \"Override new Span/Buffer-based APIs on StringWriter\" (#22411) at dotnet/corefx","RelatedBody":"Depends on #22406."},{"Id":"6676303060","Type":"IssuesEvent","CreatedAt":"2017-10-05T04:36:21","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/22410","RelatedDescription":"Closed issue \"Override new Span/Buffer-based APIs on StringReader\" (#22410) at dotnet/corefx","RelatedBody":"Depends on #22406."},{"Id":"6676303057","Type":"IssuesEvent","CreatedAt":"2017-10-05T04:36:20","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/22406","RelatedDescription":"Closed issue \"Add TextReader and TextWriter Span/Buffer-based APIs\" (#22406) at dotnet/corefx","RelatedBody":"Separated out of https://github.com/dotnet/corefx/issues/21281 for tracking purposes.\r\n\r\n- [x] Implement in System.Runtime.Extensions\r\n- [x] Expose from System.Runtime.Extensions contract\r\n- [x] Add tests to System.Runtime.Extensions.Tests\r\n\r\n```C#\r\nnamespace System.IO\r\n{\r\n    public class TextReader\r\n    {\r\n        public virtual int Read(Span<char> destination);\r\n        public virtual ValueTask<int> ReadAsync(Buffer<char> destination, CancellationToken cancellationToken = default(CancellationToken));\r\n        public virtual int ReadBlock(Span<char> destination);\r\n        public virtual ValueTask<int> ReadBlockAsync(Buffer<char> destination, CancellationToken cancellationToken = default(CancellationToken));\r\n        …\r\n    }\r\n\r\n    public class TextWriter\r\n    {\r\n        public virtual void Write(ReadOnlySpan<char> source);\r\n        public virtual Task WriteAsync(ReadOnlyBuffer<char> source, CancellationToken cancellationToken = default(CancellationToken));\r\n        public virtual void WriteLine(ReadOnlySpan<char> source);\r\n        public virtual Task WriteLineAsync(ReadOnlyBuffer<char> source, CancellationToken cancellationToken = default(CancellationToken));\r\n        …\r\n    }\r\n}\r\n```\r\nEDIT 7/25/2017: Updated with CancellationTokens per API review."},{"Id":"6676217680","Type":"PullRequestEvent","CreatedAt":"2017-10-05T03:53:23","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24437","RelatedDescription":"Merged pull request \"Unifying the style of property delcarations and fixing bracket indents.\" (#24437) at dotnet/corefx","RelatedBody":"Very small change set to unify the style of property declarations in the Console project. Also fixed some brackets that were nested too far to the right."},{"Id":"6676104119","Type":"IssuesEvent","CreatedAt":"2017-10-05T02:58:17","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24442","RelatedDescription":"Opened issue \"SocketTaskExtensions as instance methods\" (#24442) at dotnet/corefx","RelatedBody":"In #22608, we agreed to add two new async socket methods, ReceiveAsync and SendAsync, that work with Memory instead of ArraySegment.  The existing ArraySegment-based methods were added as extension methods, and thus we added the new methods as extensions, too.\r\n\r\nFeedback was provided that these would be better as instance methods.  However, we can't just add the new overloads as instance methods; we would also need to add the existing signatures as instance methods, effectively obsoleting the extensions.  That's because of the C# compiler binding works; once it finds an instance method of the right name, it'll no longer consider extension methods, and so the new methods as instance methods can result in compilation errors for existing uses of the existing extensions.\r\n\r\nSo, two choices:\r\n1. Leave the new methods as extensions.\r\n2. Make the new methods be instance methods, and also add corresponding instance methods for the existing extensions.\r\n\r\nWe need to make and address this for 2.1; otherwise we'll implicitly do (1), since that's what's in https://github.com/dotnet/corefx/pull/24431."},{"Id":"6676033267","Type":"IssuesEvent","CreatedAt":"2017-10-05T02:24:39","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24441","RelatedDescription":"Opened issue \"ArraySegment null check is throwing ArgumentNullException\" (#24441) at dotnet/corefx","RelatedBody":"@serkantkaraca reported this issue here: https://github.com/dotnet/core/issues/994\r\n\r\nSDK 2.0 breaks null check on type value contract for ArraySegment.\r\n\r\n            var arraySegment = new ArraySegment<byte>(new byte[10]);\r\n\r\n            // This throws as below. Should be False as per C# spec. Works on 4.6.2\r\n            var isNull = arraySegment == null;\r\n\r\nSystem.ArgumentNullException occurred\r\n  HResult=0x80004003\r\n  Message=Value cannot be null.\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n   at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n   at System.ArraySegment`1.op_Implicit(T[] array)\r\n   at ConsoleApp.Program.Main(String[] args) in \r\n\r\n\r\n"},{"Id":"6676018355","Type":"IssuesEvent","CreatedAt":"2017-10-05T02:17:22","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24440","RelatedDescription":"Opened issue \"DisplayFormatAttribute not used while rendering control\" (#24440) at dotnet/corefx","RelatedBody":"@johanskoldekrans opened this issue here: https://github.com/dotnet/core/issues/1000\r\n\r\nWe have two datecontrols (startdate and enddate) that we used the attribute DisplayFormatAttriute with a DataFormatString(\"{0:d}\") as well as ApplyFormatInEditMode = true. This was rendered as an input with type date in the past but now is rendered as a datetime-local input. So the user has to enter the time as well.\r\n\r\nCode from View:\r\n```\r\n<div class=\"form-group m-l-3\">\r\n                                <span>Från</span>\r\n                                <input asp-for=\"StartDate\" asp-format=\"{0:d}\" />\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <span>Till</span>\r\n                                <input asp-for=\"EndDate\" asp-format=\"{0:d}\" />\r\n                            </div>\r\n```\r\n\r\nCode From Class (ViewModel):\r\n```\r\n[Required]\r\n        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = \"{0:d}\")]\r\n        public DateTime StartDate { get; set; }\r\n\r\n        [Required]\r\n        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = \"{0:d}\")]\r\n        public DateTime EndDate { get; set; }\r\n```\r\n\r\nUsings in the ViewModel:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel.DataAnnotations;\r\n```\r\n\r\n\r\nHave you changed the behaviour for this?\r\n\r\nUsing:\r\nVS 2017 15.3.5\r\n.Net Core 2.0.0\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6676354289","Type":"IssuesEvent","CreatedAt":"2017-10-05T05:01:13","Actor":"ranuka2","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22537","RelatedDescription":"Opened issue \"Visual Studio crashed when compiling VB class library with Roslyn based extension\" (#22537) at dotnet/roslyn","RelatedBody":"**Version Used**: Microsoft.CondeAnalysis 1.3.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a VSIX (VB#) project in Visual Studio 2015 Update 3 with .Net framework 4.5\r\n2. Add Microsoft.CodeAnalysis library version 1.3.2 to VSIX project using NuGet\r\n3. Add menu command \"Compile\" to the VSIX project\r\n4. Add following code in menu command action\r\n\r\n```\r\nstring projectFilePath = @\"C:\\VBProj\\ClassLib.vbproj\";\r\nstring outputFilePath = @\"C:\\TargetFolder\\myDll.dll\";\r\nProject project = null;\r\n\r\nusing (var workspace = MSBuildWorkspace.Create())\r\n{\r\n\tproject = workspace.OpenProjectAsync(projectFilePath).Result;\r\n\tvar compilation = project.GetCompilationAsync().Result;\r\n\tvar compilationStatus = compilation.Emit(outputFilePath);\r\n\tbool isSuccess = compilationStatus.Success; \r\n}\r\n```\r\n5. Install the compiled extension (VSIX) in VS 2015 Update 3 and Invoke the \"Compile\" menu command\r\n\r\n**Expected Behavior**:\r\nRoslyn should be able to compile the project and emit output to target location.\r\n\r\n**Actual Behavior**:\r\nVisual Studio crashed with following trace log.\r\n\r\n> Faulting application name: devenv.exe, version: 14.0.25420.1, time stamp:\r\n> 0x57685d85\r\n> \r\n> Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000\r\n> \r\n> Exception code: 0x80131623\r\n> \r\n> Fault offset: 0x26a2ab86\r\n> \r\n> Faulting process id: 0x23d0\r\n> \r\n> Faulting application start time: 0x01d3363ac17ff278\r\n> \r\n> Faulting application path: [C:\\Program|file:///C:/Program] Files (x86)\\Microsoft Visual Studio\r\n> 14.0\\Common7\\IDE\\devenv.exe\r\n> \r\n> Faulting module path: unknown\r\n> \r\n> Report Id: xxxx-xxx-xxxx-xxxx-xxxxx\r\n> \r\n> \r\n> \r\n> Application: devenv.exe\r\n> \r\n> Framework Version: v4.0.30319\r\n> \r\n> Description: The application requested process termination through\r\n> System.Environment.FailFast(string message).\r\n> \r\n> Message: System.ArgumentException: An item with the same key has already\r\n> been added.\r\n> \r\n> at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n> \r\n> at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue\r\n> value, Boolean add)\r\n> \r\n> at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution.CompilationTracker.<\r\n> FinalizeCompilationAsync>d__29.MoveNext()\r\n> \r\n> Stack:\r\n> \r\n> at System.Environment.FailFast(System.String, System.Exception)\r\n> \r\n> at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n> \r\n> at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception,\r\n> System.Action`1<System.Exception>)\r\n> \r\n> at Microsoft.CodeAnalysis.ErrorReporting.FatalError.\r\n> ReportUnlessCanceled(System.Exception)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> FinalizeCompilationAsync>d__29.MoveNext()\r\n> \r\n> at System.ThrowHelper.ThrowArgumentException(System.ExceptionResource)\r\n> \r\n> at System.Collections.Generic.Dictionary`2[[System.__Canon, mscorlib,\r\n> Version=4.0.0.0, Culture=neutral, PublicKeyToken=\r\n> b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0,\r\n> Culture=neutral, PublicKeyToken=b77a5c561934e089]].Insert(System.__Canon,\r\n> System.__Canon, Boolean)\r\n> \r\n> at System.Collections.Generic.Dictionary`2[[System.__Canon, mscorlib,\r\n> Version=4.0.0.0, Culture=neutral, PublicKeyToken=\r\n> b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0,\r\n> Culture=neutral, PublicKeyToken=b77a5c561934e089]].Add(System.__Canon,\r\n> System.__Canon)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> FinalizeCompilationAsync>d__29.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.\r\n> Solution+CompilationTracker+<FinalizeCompilationAsync>d__29,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]](<FinalizeCompilationAsync>d__29 ByRef)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> FinalizeCompilationAsync(Microsoft.CodeAnalysis.Solution,\r\n> Microsoft.CodeAnalysis.Compilation, System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> BuildCompilationInfoFromScratchAsync>d__23.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.\r\n> Solution+CompilationTracker+<BuildCompilationInfoFromScratchAsync>d__23,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]](<BuildCompilationInfoFromScratchAsync>d__23\r\n> ByRef)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> BuildCompilationInfoFromScratchAsync(Microsoft.CodeAnalysis.Solution,\r\n> State, System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> BuildCompilationInfoAsync(Microsoft.CodeAnalysis.Solution, System.Threading.\r\n> CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> GetOrBuildCompilationInfoAsync>d__21.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.\r\n> Solution+CompilationTracker+<GetOrBuildCompilationInfoAsync>d__21,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]](<GetOrBuildCompilationInfoAsync>d__21\r\n> ByRef)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> GetOrBuildCompilationInfoAsync(Microsoft.CodeAnalysis.Solution, Boolean,\r\n> System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> GetCompilationAsync(Microsoft.CodeAnalysis.Solution, System.Threading.\r\n> CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> GetMetadataReferenceAsync>d__33.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon,\r\n> mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=\r\n> b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.\r\n> Solution+CompilationTracker+<GetMetadataReferenceAsync>d__33,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]](<GetMetadataReferenceAsync>d__33 ByRef)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> GetMetadataReferenceAsync(Microsoft.CodeAnalysis.Solution,\r\n> Microsoft.CodeAnalysis.ProjectState, Microsoft.CodeAnalysis.ProjectReference,\r\n> System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution.GetMetadataReferenceAsync(\r\n> Microsoft.CodeAnalysis.ProjectReference, Microsoft.CodeAnalysis.ProjectState,\r\n> System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> FinalizeCompilationAsync>d__29.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.\r\n> Solution+CompilationTracker+<FinalizeCompilationAsync>d__29,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]](<FinalizeCompilationAsync>d__29 ByRef)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> FinalizeCompilationAsync(Microsoft.CodeAnalysis.Solution,\r\n> Microsoft.CodeAnalysis.Compilation, System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> BuildCompilationInfoAsync(Microsoft.CodeAnalysis.Solution, System.Threading.\r\n> CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> GetOrBuildCompilationInfoAsync>d__21.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.Solution+CompilationTracker+CompilationInfo,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].Start[[Microsoft.CodeAnalysis.\r\n> Solution+CompilationTracker+<GetOrBuildCompilationInfoAsync>d__21,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]](<GetOrBuildCompilationInfoAsync>d__21\r\n> ByRef)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker.\r\n> GetOrBuildCompilationInfoAsync(Microsoft.CodeAnalysis.Solution, Boolean,\r\n> System.Threading.CancellationToken)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> GetMetadataOnlyImageReferenceAsync>d__35.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncMethodBuilderCore+\r\n> MoveNextRunner.InvokeMoveNext(System.Object)\r\n> \r\n> at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext,\r\n> System.Threading.ContextCallback, System.Object, Boolean)\r\n> \r\n> at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,\r\n> System.Threading.ContextCallback, System.Object, Boolean)\r\n> \r\n> at System.Runtime.CompilerServices.AsyncMethodBuilderCore+\r\n> MoveNextRunner.Run()\r\n> \r\n> at System.Threading.Tasks.AwaitTaskContinuation.\r\n> RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task\r\n> ByRef)\r\n> \r\n> at System.Threading.Tasks.Task.FinishContinuations()\r\n> \r\n> at System.Threading.Tasks.Task.FinishStageThree()\r\n> \r\n> at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.VersionStamp,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.\r\n> CodeAnalysis.VersionStamp)\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.VersionStamp, Microsoft.CodeAnalysis.Workspaces,\r\n> Version=1.3.1.0, Culture=neutral, PublicKeyToken=\r\n> 31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.VersionStamp)\r\n> \r\n> at Microsoft.CodeAnalysis.Solution+CompilationTracker+<\r\n> GetDependentSemanticVersionAsync>d__43.MoveNext()\r\n> \r\n> at System.Runtime.CompilerServices.AsyncMethodBuilderCore+\r\n> MoveNextRunner.InvokeMoveNext(System.Object)\r\n> \r\n> at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext,\r\n> System.Threading.ContextCallback, System.Object, Boolean)\r\n> \r\n> at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,\r\n> System.Threading.ContextCallback, System.Object, Boolean)\r\n> \r\n> at System.Runtime.CompilerServices.AsyncMethodBuilderCore+\r\n> MoveNextRunner.Run()\r\n> \r\n> at System.Threading.Tasks.AwaitTaskContinuation.\r\n> RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task\r\n> ByRef)\r\n> \r\n> at System.Threading.Tasks.Task.FinishContinuations()\r\n> \r\n> at System.Threading.Tasks.Task.FinishStageThree()\r\n> \r\n> at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.VersionStamp,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.\r\n> CodeAnalysis.VersionStamp)\r\n> \r\n> at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[\r\n> Microsoft.CodeAnalysis.VersionStamp, Microsoft.CodeAnalysis.Workspaces,\r\n> Version=1.3.1.0, Culture=neutral, PublicKeyToken=\r\n> 31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.VersionStamp)\r\n> \r\n> at Roslyn.Utilities.AsyncLazy`1+Request[[Microsoft.CodeAnalysis.VersionStamp,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].CompleteFromTaskSynchronously(\r\n> System.Threading.Tasks.Task`1<Microsoft.CodeAnalysis.VersionStamp>)\r\n> \r\n> at Roslyn.Utilities.AsyncLazy`1+Request[[Microsoft.CodeAnalysis.VersionStamp,\r\n> Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral,\r\n> PublicKeyToken=31bf3856ad364e35]].CompleteFromTaskSynchronouslyS\r\n> tub(System.Object)\r\n> \r\n> at System.Threading.Tasks.Task.InnerInvoke()\r\n> \r\n> at System.Threading.Tasks.Task.Execute()\r\n> \r\n> at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\r\n> \r\n> at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext,\r\n> System.Threading.ContextCallback, System.Object, Boolean)\r\n> \r\n> at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,\r\n> System.Threading.ContextCallback, System.Object, Boolean)\r\n> \r\n> at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task\r\n> ByRef)\r\n> \r\n> at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n> \r\n> at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.\r\n> ExecuteWorkItem()\r\n> \r\n> at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n> \r\n> at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n> "},{"Id":"6676198192","Type":"IssuesEvent","CreatedAt":"2017-10-05T03:43:23","Actor":"SergeyTeplyakov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22536","RelatedDescription":"Opened issue \"No warnings if the code is unreachable based on `o is var x` pattern\" (#22536) at dotnet/roslyn","RelatedBody":"**Version Used**:  Master (October 3)\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\npublic void Foo(object o) {\r\n        if (1 == 2) {\r\n            // Unreachable code detected\r\n            Console.WriteLine();\r\n        }\r\n        if (!(o is var x)) {\r\n            // No warnings\r\n            Console.WriteLine();\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nIn the second `if`-statement I would expect to see the 'Unreachable code detected' warning by the compiler.\r\n\r\n**Actual Behavior**:\r\nThere is the warning in the first `if`-statement but there is no warning in the second `if` statement.\r\n\r\nThe compiler knows that the code is unreachable and it removes the second if statement altogether (in Release mode).\r\n\r\nIs there any rationale behind that? Because from my perspective those two if statements are semantically equivalent and similar warning should be emitted."},{"Id":"6675954533","Type":"IssuesEvent","CreatedAt":"2017-10-05T01:47:25","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21879","RelatedDescription":"Closed issue \"VB: Can't use string comparison expressions for conditional breakpoints.\" (#21879) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio 2017 Community 15.3.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nCreate a VB console project and type in the following code:\r\n\r\n```vb\r\nModule Module1\r\n  Sub Main()\r\n    For Each s In {\"a\", \"b\", \"c\"}\r\n      Console.WriteLine(s)\r\n    Next\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nPut a breakpoint on `Console.WriteLine()` and set the conditional expression to `s = \"b\"`:\r\n\r\n![vs_conditional_breakpoint_withstr1](https://user-images.githubusercontent.com/20465797/29984055-36cb8828-8f61-11e7-8150-f41204bc206d.png)\r\n\r\nPress the Close button, then run the code. You get the following error message:\r\n\r\n![vs_conditional_breakpoint_withstr2](https://user-images.githubusercontent.com/20465797/29984086-6c130de4-8f61-11e7-981f-e63cd1befdc6.png)\r\n\r\n**Expected Behavior**:\r\n\r\nIt should be possible to use string comparison expressions like we can with any other kind of expression (e.g. the expression `s.Length = 1` works just fine because it is comparing two integers).\r\n\r\n**Actual Behavior**:\r\n\r\nAs shown above: we get an error message."},{"Id":"6675893798","Type":"IssuesEvent","CreatedAt":"2017-10-05T01:19:46","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22535","RelatedDescription":"Opened issue \"C# \"Prefer deconstructed variable declaration\" scenario is not working\" (#22535) at dotnet/roslyn","RelatedBody":"[View on Developer Community](https://developercommunity.visualstudio.com/content/problem/122815/c-prefer-deconstructed-variable-declaration-scenar.html)\r\nActual:\r\n1. I could not find the option in the Tools | Options dialog\r\n\r\n2. trying the steps in the scenario doesn't show the code action to deconstruct of tuple. "},{"Id":"6675825195","Type":"IssuesEvent","CreatedAt":"2017-10-05T00:49:17","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22503","RelatedDescription":"Closed issue \"Allow resizing the Attach to Process window\" (#22503) at dotnet/roslyn","RelatedBody":"For some reason, this window has a fixed size, which makes it inconvenient to look through a long list of processes.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/31150825-f83a0ba0-a849-11e7-9c63-ce13a16178e2.png)\r\n\r\nTagging @caslan @tmat \r\n"},{"Id":"6675704769","Type":"PullRequestEvent","CreatedAt":"2017-10-04T23:58:40","Actor":"KevinH-MS","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22519","RelatedDescription":"Merged pull request \"Update ibc training data...\" (#22519) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nRebuild time may be delayed due to JIT'ing\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_queries?id=457718&triage=true&_a=edit\r\n\r\n**Workarounds, if any**\r\n\r\nNone\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nDecreases image sizes and JIT time\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes\r\n\r\n**Root cause analysis:**\r\n\r\nInfrastructure issues have led to this not getting updated in a timely manner\r\n\r\n**How was the bug found?**\r\n\r\nRPS\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n"},{"Id":"6675704462","Type":"PullRequestEvent","CreatedAt":"2017-10-04T23:58:32","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22534","RelatedDescription":"Merged pull request \"Moving code into dev15.5-preview1\" (#22534) at dotnet/roslyn","RelatedBody":"One last fix..."},{"Id":"6675704136","Type":"PullRequestEvent","CreatedAt":"2017-10-04T23:58:24","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22534","RelatedDescription":"Opened pull request \"Moving code into dev15.5-preview1\" (#22534) at dotnet/roslyn","RelatedBody":"One last fix..."},{"Id":"6675700681","Type":"PullRequestEvent","CreatedAt":"2017-10-04T23:57:04","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22532","RelatedDescription":"Merged pull request \"disable CSharpIsAndCastCheckWithoutNameDiagnosticAnalyzer for preview 1\" (#22532) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nVS is unresponsive and hard to use\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/504602 (one of issue from this feedback \r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?id=504089&_a=edit&triage=true)\r\n\r\n**Workarounds, if any**\r\n\r\nno workaround\r\n\r\n**Risk**\r\n\r\nnone\r\n\r\n**Performance impact**\r\n\r\nwe are disabling an analyzer which we identified as costly one. this should improve perf.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nthe analyzer is calling one of expensive check repeatedly multiple times.\r\n\r\n**How was the bug found?**\r\n\r\nUser feedback and dogfooding."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6675755072","Type":"PullRequestEvent","CreatedAt":"2017-10-05T00:18:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4674","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4674) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6675748553","Type":"PullRequestEvent","CreatedAt":"2017-10-05T00:15:58","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4674","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4674) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6675368305","Type":"PullRequestEvent","CreatedAt":"2017-10-04T22:06:46","Actor":"janvorli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4637","RelatedDescription":"Merged pull request \"Enable x86 support for Unix\" (#4637) at dotnet/corert","RelatedBody":"Also enabled cross compilation of x86 binaries on x64 host.\r\n\r\nUbuntu Dockerfiles:\r\n\r\n<details>\r\n  <summary><b><ins>Baseline: x64 build on x64 host</ins></b></summary>\r\n\r\n```dockerfile\r\nFROM ubuntu\r\nRUN cat /etc/*-release\r\n\r\nRUN apt-get update\r\nRUN apt-get install -y \\\r\n        autoconf bash clang cmake gcc libtool curl \\\r\n        libunwind-dev llvm make openssl lldb git uuid-dev\r\n\r\nRUN git clone https://github.com/dotnet/corert -b master --single-branch\r\n\r\nWORKDIR /corert\r\n\r\nRUN ./build.sh          # or ./build.sh x64\r\n\r\n# usage:\r\n# create a file name `Dockerfile` in an empty directory and run:\r\n# docker build .\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary><b><ins>PR: x86 build on x86 host</ins></b></summary>\r\n\r\n```dockerfile\r\nFROM i386/ubuntu\r\nRUN cat /etc/*-release\r\n\r\nRUN apt-get update\r\nRUN apt-get install -y \\\r\n        autoconf bash clang cmake gcc libtool curl \\\r\n        libunwind-dev llvm make openssl lldb git uuid-dev \\\r\n        g++-multilib\r\n\r\nRUN git clone https://github.com/am11/corert -b linux-x86 --single-branch\r\n\r\nWORKDIR /corert\r\n\r\nRUN ./build.sh x86\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary><b><ins>PR: x86 build on x64 host</ins></b></summary>\r\n\r\n```dockerfile\r\nFROM ubuntu\r\nRUN cat /etc/*-release\r\n\r\nRUN apt-get update\r\nRUN apt-get install -y \\\r\n        bash clang cmake gcc libtool curl \\\r\n        libunwind-dev llvm make openssl lldb git uuid-dev \\\r\n        g++-multilib\r\n        \r\nRUN git clone https://github.com/am11/corert -b linux-x86 --single-branch\r\n\r\nWORKDIR /corert\r\n\r\nRUN ./build.sh x86\r\n```\r\n</details>\r\n<br />\r\n\r\nContributes to: #4589"},{"Id":"6673632661","Type":"PullRequestEvent","CreatedAt":"2017-10-04T15:39:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4673","RelatedDescription":"Merged pull request \"Move String.Searching.cs to shared CoreLib partition\" (#4673) at dotnet/corert","RelatedBody":""},{"Id":"6673012875","Type":"PullRequestEvent","CreatedAt":"2017-10-04T13:48:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4673","RelatedDescription":"Opened pull request \"Move String.Searching.cs to shared CoreLib partition\" (#4673) at dotnet/corert","RelatedBody":""},{"Id":"6672882465","Type":"PullRequestEvent","CreatedAt":"2017-10-04T13:23:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4395","RelatedDescription":"Merged pull request \"Improve performance of string.IndexOfCharArray\" (#4395) at dotnet/corert","RelatedBody":"`IndexOfCharArray` is the last holdout before the String.Searching.cs file is common between RT and CLR. While this PR is almost x2 what was there before it is still 15-20% short of the C++ CLR version.\r\n\r\nUnconfirmed, but this appears to be due to C++ use of `BTS` and `BT` instructions. `BT` looks like it could be generally useful to JIT? (cc @mikedn)\r\n\r\nAny other patterns that might help here that the JIT will recognise? (cc @jkotas @benaadams)\r\n\r\nNote the C# code also doesn't have the x86 performance penalty that the C++ version does (cc @davkean) so we really just need to catch up to x64.\r\n\r\n**Edit - Final Figures**\r\n_dotnet core 2.0 RTM_\r\nShort no-match 4% faster\r\nLong no-match 12% faster\r\nShort match 4% faster\r\nMapping false positives 42% faster\r\neg.\r\n```\r\npublic static char[] _array = new char[] { 'a', '\\xDE20', '\\xDE20', '\\xDE20', '\\xDE20', '\\xDE20', '\\xDE20', '\\xDE20', '\\xDE20' };\r\nprivate const string LongString = \"                                                                                                                                                                                                                                                                                                                                                                            \";\r\n```\r\n\r\n_x86 Framework_\r\nLong no-match 42% faster\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null},{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":19,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2017-10-05T05:30:18.0311889Z","RunDurationInMilliseconds":6588}