{"Data":{"GitHub":{"Issues":[{"Id":"567321279","IsPullRequest":false,"CreatedAt":"2020-02-19T05:12:23","Actor":"RussKie","Number":"2879","RawContent":null,"Title":"Run CI tests in x86 and x64","State":"open","Body":"Right now all our tests are run in \"Any CPU\" mode. However we have a number of interop API that are platform specific, and we are unable to test those.\r\n\r\nCI tests must run under x86 and x64. When time comes they will also must be run under arm64 as well.","Url":"https://github.com/dotnet/winforms/issues/2879","RelatedDescription":"Open issue \"Run CI tests in x86 and x64\" (#2879)"},{"Id":"567116986","IsPullRequest":true,"CreatedAt":"2020-02-19T05:06:20","Actor":"gpetrou","Number":"2876","RawContent":null,"Title":"Add GDTR enum to Interop ComCtl32","State":"closed","Body":"## Proposed changes\r\n\r\n- Add GDTR enum to Interop ComCtl32.\r\n- Remove GDTR constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2876)","Url":"https://github.com/dotnet/winforms/pull/2876","RelatedDescription":"Closed or merged PR \"Add GDTR enum to Interop ComCtl32\" (#2876)"},{"Id":"567288777","IsPullRequest":true,"CreatedAt":"2020-02-19T04:18:21","Actor":"RussKie","Number":"2878","RawContent":null,"Title":"Update branding","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2878)","Url":"https://github.com/dotnet/winforms/pull/2878","RelatedDescription":"Closed or merged PR \"Update branding\" (#2878)"},{"Id":"567281412","IsPullRequest":false,"CreatedAt":"2020-02-19T02:53:10","Actor":"Thea-Zhao","Number":"2877","RawContent":null,"Title":"Combobox list nodes do not show expanded when Inspect focus on the dropdown list value","State":"open","Body":"* .NET Core Version: .NET Core SDK 5.0.100-preview.1.20116.7 + the VSIX Inserted into Dev16 16.6.0 [29816.22.master]\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes \r\n\r\n**Problem description:**\r\n\r\nCombobox list nodes do not show expanded when Inspect focus on the dropdown list value\r\n\r\n**More Info:**\r\n1. This is not a regression issue, it's can reproduce in the .NET Framework project and Core 3.1 project.\r\n2. This issue can reproduce when the property values is ComboBox control in the PropertyGrid.\r\n3. This issue cannot reproduce by ComboBox control or the control type is ComboBox control in the DGV cell.\r\n\r\n**Minimal repro:**\r\n\r\n1. Run attached app.\r\n2. Open the inspect tool.\r\n3. Click the dropdown list after the property RightToLeftLayout, and select one node.\r\n4. Observer the inspect.\r\n[SeparateIssue.zip](https://github.com/dotnet/winforms/files/4222873/SeparateIssue.zip)\r\n\r\n**Actual behavior:**\r\nInspectÂ list node is not expanded.\r\n![Actual](https://user-images.githubusercontent.com/53589182/74797011-0071be80-527f-11ea-8314-a588ce2338f7.png)\r\n\r\n**Expected behavior:**\r\nInspect list node is expanded.\r\n![Expected](https://user-images.githubusercontent.com/53589182/74796909-c0124080-527e-11ea-8d83-5547594c0558.png)","Url":"https://github.com/dotnet/winforms/issues/2877","RelatedDescription":"Open issue \"Combobox list nodes do not show expanded when Inspect focus on the dropdown list value\" (#2877)"},{"Id":"566819527","IsPullRequest":false,"CreatedAt":"2020-02-19T02:45:50","Actor":"Marie-Shi","Number":"2872","RawContent":null,"Title":"An error dialog pops up after right click selected text","State":"closed","Body":"* .NET Core Version: \r\n.Net Core 3.1.200-preview-014986 from 3.1 Release branch + VISX inserted in the Dev16 16.6.0[29817.27.master]\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n1.\tThis issue can also reproduce with Framework project and WPF project.\r\n2.\tThis is a regression issue, it can reproduce from Dev16 16.0[29816.11.master] to latest master branch build, it cannot reproduce on release branch.\r\n\r\n**Steps to reproduce:**\r\n1.\tCreate a Winforms Core application.\r\n2.\tSelected \"InitializeComponent\" in Form1.cs, and right click it.\r\n\r\n**Actual behavior:**\r\nAn error dialog pops up after right click selected text. After clicking \"OK\" button, VS crash.\r\n![VS_crash_rightclick_selected_text](https://user-images.githubusercontent.com/45864017/74730547-4760b380-5281-11ea-9a28-75330cdf8d88.png)\r\n\r\n**Expected behavior:**\r\nThere is no error dialog pops up after right click selected text. The behavior should be like below:\r\n![VS_expected_rightclick_selected_text](https://user-images.githubusercontent.com/45864017/74731052-42503400-5282-11ea-90f0-d5cdf0836ddd.png)","Url":"https://github.com/dotnet/winforms/issues/2872","RelatedDescription":"Closed issue \"An error dialog pops up after right click selected text\" (#2872)"},{"Id":"567000599","IsPullRequest":true,"CreatedAt":"2020-02-18T16:13:26","Actor":"vladimir-krestov","Number":"2875","RawContent":null,"Title":"Adding PropertyGridViewAccessibleObject unit tests","State":"open","Body":"Fixes #1832\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests for PropertyGridViewAccessibleObject\r\n- Move PropertyGrid tests to PropertyGridAccessibleObjectTests class\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- SDK Version: 5.0.100-alpha1-016143\r\n- Microsoft Windows [Version 10.0.18363.592]\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2875)","Url":"https://github.com/dotnet/winforms/pull/2875","RelatedDescription":"Open PR \"Adding PropertyGridViewAccessibleObject unit tests\" (#2875)"},{"Id":"566886750","IsPullRequest":true,"CreatedAt":"2020-02-18T13:17:46","Actor":"hughbe","Number":"2874","RawContent":null,"Title":"Cleanup ToolStripItem","State":"open","Body":"## Proposed Changes\r\n- Cleanup ToolStripItem\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2874)","Url":"https://github.com/dotnet/winforms/pull/2874","RelatedDescription":"Open PR \"Cleanup ToolStripItem\" (#2874)"},{"Id":"566877811","IsPullRequest":true,"CreatedAt":"2020-02-18T13:16:42","Actor":"dotnet-maestro[bot]","Number":"2873","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200217.3\r\n- **Date Produced**: 2/17/2020 7:54 PM\r\n- **Commit**: bd2a2b09716ddb54cb1e40f087beaaeeef859118\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20117.3\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2873)","Url":"https://github.com/dotnet/winforms/pull/2873","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2873)"},{"Id":"566805857","IsPullRequest":true,"CreatedAt":"2020-02-18T10:47:15","Actor":"vladimir-krestov","Number":"2871","RawContent":null,"Title":"Adding unit tests for DataGridViewAccessibleObject","State":"open","Body":"Fixes #1833\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests\r\n- Fix IsReadOnly property for DataGridViewAccessibleObject and DataGridViewRowAccessibleObject\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- SDK Version: 5.0.100-alpha1-016143\r\n- Microsoft Windows [Version 10.0.18363.592]\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2871)","Url":"https://github.com/dotnet/winforms/pull/2871","RelatedDescription":"Open PR \"Adding unit tests for DataGridViewAccessibleObject\" (#2871)"},{"Id":"566771850","IsPullRequest":false,"CreatedAt":"2020-02-18T09:51:37","Actor":"M-Lipin","Number":"2870","RawContent":null,"Title":"AccessibleName default values for WinForms Controls","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nAt this moment there is a number of issues with Accessible name:\r\n- missing AccessibleName for some controls (for instance ComboBox or TextBox, which have empty accessible name)\r\n- duplication in the default Accessible name and Accessible control type localized name for other controls (like announcement \"Spinner spinner\" for Numeric UpDown control which has \"spinner\" accessible name and \"spinner\" localized control type)\r\n- indistinguishability of controls to visually impaired users when announced by Narrator (for instance two PropertyGrid controls have same \"PropertyGrid\" accessible name)\r\n\r\n**Considerations**\r\nThe question comes with the #2818 and #2820:\r\nThere is no requirement or an improvement. App developer is not blocked by the lack of accessible name here. The standard way to associate an accessible name with a control\r\n- is to place a label (a control with Text property) in front of this control in the tab order. Then AccessibleObject.Name will read it;\r\n- the next option for app developer is to actually set trackBar1.AccessibleName = \"descriptive name\".\r\nAs suggested in #2820 , accessible name is a synonym of ControlType. ControlType = Slider; AccessibleName = TrackBar. This is not helpful, as name should not contain ControlType.  We are providing Names for controls that are not exposed to the developer, trackBar does not fit this case. \r\n\r\nOn other hand app developer may forget to set AccessibleName or place a Label in front of a Control. In this case an app user must not suffer. Anyway, an app developer can set some accessible name as an empty string if it is necessary for him. The explanation can be found in #2382 \r\n\r\nThere are several issues with default accessible names that are synonymous to control types.\r\n1. It does not produce accessible applications by default. Consider the following UI:\r\n![image](https://user-images.githubusercontent.com/23213980/74722923-c5559800-524a-11ea-9cde-1dc568b24326.png)\r\nLooking at the image above, do you know what value to enter into this control? What will it be used for?\r\nIt seems that an AT user will not know what to do with control of type Spinner that is named \"Numeric\" because this name does not explain what value the number in the control represents.\r\n\r\nSuch a name does not solve the problem that Accessible Name property is designed to solve, it does not explain business logic behind this control. This solution will not improve applications of accessibility of the our framework.\r\n\r\n2. An application developer has a smaller chance to fix the above mentioned accessibility issue in this application because we suppressed AI error report.\r\nThe suggestion here is that this is an application developer responsibility to provide meaningful Accessible names and responsibility of AI tool to teach the developer how to write accessible applications. Role of the framework developer is to provide public API that allows app developer to set a meaningful accessible name. We provide hard-coded accessible names only for UI elements that don't expose public APIs to the app developers. \r\n\r\nApplication developers should to make applications accessible. We are not enforcing keyboard shortcuts or taborder either, because these depend on the business logic.\r\n\r\nTaking into account above considerations, we have two points here:\r\n- AccesibleName is for business naming which will provide the information about the business purpose of the control.\r\n- AccessibleControlType is for providing Framework control type.\r\n\r\nLike in the following example: 'Age NumericUpDown' \r\n-- where 'Age' is an AccessibleName which should be provided by application developer and is not Framework developer responsibility (it seems that by default an empty accessible name should be provided for both Numeric and Domain UpDown controls,)\r\n-- and 'NumericUpDown' is the localized control type that is the Framework developer responsibility as Framework developers provide the set of control types and thereby should provide localized accessible control types for each available control.\r\nSo it seems that we need to start the work here to ensure that WinForms controls API does not provide accessible names as these should be application-related business-specific accessible names and should not copy the control type name or its part to accessible name (keep it blank). And on the other hand Framework developers need to provide meaningful localized control types for all controls.  And the result of this work should be like this:\r\n\"\" TextBox\r\n\"\" CombBox\r\n\"\" Numeric UpDown\r\n\"\" Domain UpDown\r\n\"\" Property Grid\r\nand so on\r\nand application developers will implement accessible names in their application to have something like this:\r\n\"First name\" TextBox\r\n\"Occupation\" ComboBox\r\n\"Age\" Numeric UpDown\r\n\"Rating\" Domain UpDown\r\n\"Skills\" Property Grid\r\nand so on\r\n\r\n**Proposed changes and expected behavior:**\r\n- Need to show error by AI if application developer does not provide business specific accessible name. So we need to make Accessible names empty for the controls exposed to developers.\r\n- Accessible names of the controls which are not public should not be empty.\r\n\r\n**Minimal repro:**\r\n- Create the app with WinForms controls and ensure that by default Accessible names are empty and localized control types show the control type specific names.\r\n- Accessible names can be set via control API (AccessibleName property) or by adding the label before the control.\r\n- Control child elements should not have default accessible names or accessible names which contain control type names.","Url":"https://github.com/dotnet/winforms/issues/2870","RelatedDescription":"Open issue \"AccessibleName default values for WinForms Controls\" (#2870)"},{"Id":"566631748","IsPullRequest":true,"CreatedAt":"2020-02-18T04:03:35","Actor":"Tanya-Solyanik","Number":"2869","RawContent":null,"Title":"Read Name property instead of name field when serializing ColumnHeader.Name ","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2867 \r\n\r\n\r\n## Proposed changes\r\n\r\nThe `name` field is not set in this code, however it is read in ShouldSerializeName. Thus ShouldSerialize always returns `false` and ColumnHeader names are never serialized into `InitializeComponent` method. Thus `Name` property is always null at run time. However this property is used as a key  when accessing column display order. See issue for details. \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nlistView1.Columns.IndexOfKey(\"columnHeader1\") - always return `-1`\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-Winforms Core designer will be generating different code compared to the Framework designer.  \r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nUnit test\r\n \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2869)","Url":"https://github.com/dotnet/winforms/pull/2869","RelatedDescription":"Open PR \"Read Name property instead of name field when serializing ColumnHeader.Name \" (#2869)"},{"Id":"565785591","IsPullRequest":true,"CreatedAt":"2020-02-18T03:56:40","Actor":"gpetrou","Number":"2860","RawContent":null,"Title":"Add NIM enum to Interop Shell32","State":"closed","Body":"## Proposed changes\r\n\r\n- Add NIM enum to Interop Shell32.\r\n- Remove NIM constants and replace their usages with the above enum values.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2860)","Url":"https://github.com/dotnet/winforms/pull/2860","RelatedDescription":"Closed or merged PR \"Add NIM enum to Interop Shell32\" (#2860)"},{"Id":"566142956","IsPullRequest":false,"CreatedAt":"2020-02-18T03:48:42","Actor":"vsfeedback","Number":"2866","RawContent":null,"Title":"Problema com ListView","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/887266/problema-com-listview.html)._\n\n---\nBom dia Ã¡ todos, o que ocorre Ã© o seguinte, quando inserimos um controle **ListView em um Form VB**, acontece que eu declaro em **Design as colunas deste ListView e sempre coloco na propriedade (Name) das colunas** um nome realtivo Ã¡ esta coluna, atÃ© aÃ­ tudo bem em _Design_!\n\nMas o problema suge no momento em **ExecuÃ§Ã£o**, sendo que em execuÃ§Ã£o todas as propriedades (Name) das colunas se torna uma **string vazia**, entÃ£o o que acontece acredito seja um problema no VB, pois em **Design o mesmo mantÃ©m os campos das colunas da ListView (Name)** sÃ³ que em execuÃ§Ã£o perdemos estes campos!\n\nEntÃ£o fiz o teste de adicionar na programaÃ§Ã£o todos os campos das colunas (Name) e os mesmos colocando na programaÃ§Ã£o se mantÃ©m em todo o processo da execuÃ§Ã£o, entÃ£o vejo que o problema Ã© manter o mesmo que foi feito em Design tambÃ©m em execuÃ§Ã£o!\n\nEspero que tenham compreendido a minha explicaÃ§Ã£o e que isso realmente seja um porblema que possa ser corrigido em uma atualizaÃ§Ã£o futura!\n\nGrato,\nRenato\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/17/2020, 07:42 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Zheng Li [MSFT] on 1/19/2020, 10:15 AM: \n\n<p>Dear customer, thanks for your feedback.</p>\n<p>I canât repoduce the issue accordind to ypur description, Please see the reproduce  gif, and figure out if there have wrong steps. And could you please provide more info for us to investigate the issue in the future, such as your reproduce Video, or reproduce gif.</p>\n<p>In addtion, have you have the same experience in before, such VS 16.2, VS 2017. And if the issue also can reproduce on C# Windows Form Application.</p>\n<p>Repro Gif:</p><p><img src=\"https://developercommunity.visualstudio.com/storage/temp/114635-feedback.gif\">Thanks</p><p>\nZheng</p>\n\n#### Renato Maia on 1/23/2020, 00:52 AM: \n\nSee that the program is running without change and with its column names declared in the control, but as soon as it is executed, it no longer has this information! So I put the name of the columns in code and it doesn&#39;t lose in execution!\n#### Renato Maia on 1/21/2020, 07:16 PM: \n\nGood morning my friend, thanks for the feedback you gave and the work you had in making a GIF of the procedure, well what I can say you did correctly what is happening, but the problem is generated when the application is running , because when running these Listview columns (Name) are completely reset (string.empty), that is, you don&#39;t have any more information about them running, so you must insert them again in code, so the system keeps these columns (Name) in Listview! So I can use the columns .IndexOfKey, because I believe that you remember more (name) than Interger to return it!<br><br>* I using Google Translate for creat this text!\n#### Zheng Li [MSFT] on 1/22/2020, 11:00 AM: \n\n<p>Dear customer, thankk for your response.</p>\n<p>For the issue, could you please provide more details for use? such as your repro reproduce steps/Gif/Video etc.</p>\n<p>There have some confused that about the âThe issue generated when application is runingâ,whatâs meaning? itâs that calling the columns(Name) in running? how to implement it?</p>\n<p>Will be appreciate if you also can provide your project for us to investigate the issuein future?</p>\n<p>Thanks<br>\nZheng</p>\n\n#### Zheng Li [MSFT] on 2/5/2020, 04:25 PM: \n\n<p>Thanks for your response, Ciould you please provide reproduce steps &amp; project for us tp investigate the issue in tthe future.</p>\n<p>Thanks<br>\nZheng</p>\n\n#### Visual Studio Feedback System on 2/12/2020, 08:17 PM: \n\nWe will close this report in 14 days because we donât have enough information to investigate further. To keep the problem open, please provide the requested details.\n#### Renato Maia on 2/13/2020, 00:53 AM: \n\nHi friend, i send details of problem to user Zheng Li, no have more details with me! I send the video of project and see the problem!\n#### Zheng Li [MSFT] on 2/17/2020, 02:29 PM: \n\n<p>Dear customer, thanks for your help and details info.</p>\n<p>For the issue, we found the root cause is that Docs say that ColumnHeaderCollection.IndexOfKey uses <a target='_blank' href=\"http://ColumnHeader.Name\">ColumnHeader.Name</a> property as the key. However designer does not generate â<a target='_blank' href=\"http://columnHeader1.Name\">columnHeader1.Name</a> =âcolumnHeader1â; line in InitializeComponent in designer.cs. As a result, runtime does not have this value and uses an empty string as a key in the columns collection.</p>\n<p>And we provide the workaround for now, please refer it, and we are investigate it for now, will give you a response once have ny process.</p>\n<p><strong>Workaround</strong><br>\nSo when I do this:<br>\npublic Form1()<br>\n{<br>\nInitializeComponent();<br>\n<a target='_blank' href=\"http://columnHeader1.Name\">columnHeader1.Name</a> = âcolumnHeader1â;<br>\n<a target='_blank' href=\"http://columnHeader2.Name\">columnHeader2.Name</a> = âcolumnHeader2â;<br>\n}</p>\n<pre><code>    private void button1_Click(object sender, EventArgs e)\n    {\n        Text = &quot;IndexofKey &quot; + listView1.Columns.IndexOfKey(&quot;columnHeader1&quot;);\n    }\n</code></pre>\n<p>This code works as expected and returns 0.</p>\n<p>Thanks<br>\nZheng</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/2866","RelatedDescription":"Closed issue \"Problema com ListView\" (#2866)"},{"Id":"564897778","IsPullRequest":true,"CreatedAt":"2020-02-18T01:06:35","Actor":"hughbe","Number":"2854","RawContent":null,"Title":"Add DomainUpDown tests and remove dead code","State":"closed","Body":"## Proposed Changes\r\n- Add DomainUpDown tests and remove dead code\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2854)","Url":"https://github.com/dotnet/winforms/pull/2854","RelatedDescription":"Closed or merged PR \"Add DomainUpDown tests and remove dead code\" (#2854)"},{"Id":"565937449","IsPullRequest":true,"CreatedAt":"2020-02-18T01:03:49","Actor":"hughbe","Number":"2864","RawContent":null,"Title":"Cleanup UpDownBase","State":"closed","Body":"## Proposed Changes\r\n- Cleanup UpDownBase\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2864)","Url":"https://github.com/dotnet/winforms/pull/2864","RelatedDescription":"Closed or merged PR \"Cleanup UpDownBase\" (#2864)"},{"Id":"566284279","IsPullRequest":true,"CreatedAt":"2020-02-17T13:16:45","Actor":"dotnet-maestro[bot]","Number":"2868","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200216.1\r\n- **Date Produced**: 2/16/2020 2:07 PM\r\n- **Commit**: 2086e534f12e6116889ee480646ef54c1f781887\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20116.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2868)","Url":"https://github.com/dotnet/winforms/pull/2868","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2868)"},{"Id":"566143432","IsPullRequest":false,"CreatedAt":"2020-02-17T08:45:58","Actor":"vsfeedback","Number":"2867","RawContent":null,"Title":"`ListView.IndexOfKey()` returns incorrect value","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/887266/problema-com-listview.html)._\n\n---\nBom dia Ã¡ todos, o que ocorre Ã© o seguinte, quando inserimos um controle **ListView em um Form VB**, acontece que eu declaro em **Design as colunas deste ListView e sempre coloco na propriedade (Name) das colunas** um nome realtivo Ã¡ esta coluna, atÃ© aÃ­ tudo bem em _Design_!\n\nMas o problema suge no momento em **ExecuÃ§Ã£o**, sendo que em execuÃ§Ã£o todas as propriedades (Name) das colunas se torna uma **string vazia**, entÃ£o o que acontece acredito seja um problema no VB, pois em **Design o mesmo mantÃ©m os campos das colunas da ListView (Name)** sÃ³ que em execuÃ§Ã£o perdemos estes campos!\n\nEntÃ£o fiz o teste de adicionar na programaÃ§Ã£o todos os campos das colunas (Name) e os mesmos colocando na programaÃ§Ã£o se mantÃ©m em todo o processo da execuÃ§Ã£o, entÃ£o vejo que o problema Ã© manter o mesmo que foi feito em Design tambÃ©m em execuÃ§Ã£o!\n\nEspero que tenham compreendido a minha explicaÃ§Ã£o e que isso realmente seja um porblema que possa ser corrigido em uma atualizaÃ§Ã£o futura!\n\nGrato,\nRenato\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/17/2020, 07:42 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Zheng Li [MSFT] on 1/19/2020, 10:15 AM: \n\n<p>Dear customer, thanks for your feedback.</p>\n<p>I canât repoduce the issue accordind to ypur description, Please see the reproduce  gif, and figure out if there have wrong steps. And could you please provide more info for us to investigate the issue in the future, such as your reproduce Video, or reproduce gif.</p>\n<p>In addtion, have you have the same experience in before, such VS 16.2, VS 2017. And if the issue also can reproduce on C# Windows Form Application.</p>\n<p>Repro Gif:</p><p><img src=\"https://developercommunity.visualstudio.com/storage/temp/114635-feedback.gif\">Thanks</p><p>\nZheng</p>\n\n#### Renato Maia on 1/23/2020, 00:52 AM: \n\nSee that the program is running without change and with its column names declared in the control, but as soon as it is executed, it no longer has this information! So I put the name of the columns in code and it doesn&#39;t lose in execution!\n#### Renato Maia on 1/21/2020, 07:16 PM: \n\nGood morning my friend, thanks for the feedback you gave and the work you had in making a GIF of the procedure, well what I can say you did correctly what is happening, but the problem is generated when the application is running , because when running these Listview columns (Name) are completely reset (string.empty), that is, you don&#39;t have any more information about them running, so you must insert them again in code, so the system keeps these columns (Name) in Listview! So I can use the columns .IndexOfKey, because I believe that you remember more (name) than Interger to return it!<br><br>* I using Google Translate for creat this text!\n#### Zheng Li [MSFT] on 1/22/2020, 11:00 AM: \n\n<p>Dear customer, thankk for your response.</p>\n<p>For the issue, could you please provide more details for use? such as your repro reproduce steps/Gif/Video etc.</p>\n<p>There have some confused that about the âThe issue generated when application is runingâ,whatâs meaning? itâs that calling the columns(Name) in running? how to implement it?</p>\n<p>Will be appreciate if you also can provide your project for us to investigate the issuein future?</p>\n<p>Thanks<br>\nZheng</p>\n\n#### Zheng Li [MSFT] on 2/5/2020, 04:25 PM: \n\n<p>Thanks for your response, Ciould you please provide reproduce steps &amp; project for us tp investigate the issue in tthe future.</p>\n<p>Thanks<br>\nZheng</p>\n\n#### Visual Studio Feedback System on 2/12/2020, 08:17 PM: \n\nWe will close this report in 14 days because we donât have enough information to investigate further. To keep the problem open, please provide the requested details.\n#### Renato Maia on 2/13/2020, 00:53 AM: \n\nHi friend, i send details of problem to user Zheng Li, no have more details with me! I send the video of project and see the problem!\n#### Zheng Li [MSFT] on 2/17/2020, 02:29 PM: \n\n<p>Dear customer, thanks for your help and details info.</p>\n<p>For the issue, we found the root cause is that Docs say that ColumnHeaderCollection.IndexOfKey uses <a target='_blank' href=\"http://ColumnHeader.Name\">ColumnHeader.Name</a> property as the key. However designer does not generate â<a target='_blank' href=\"http://columnHeader1.Name\">columnHeader1.Name</a> =âcolumnHeader1â; line in InitializeComponent in designer.cs. As a result, runtime does not have this value and uses an empty string as a key in the columns collection.</p>\n<p>And we provide the workaround for now, please refer it, and we are investigate it for now, will give you a response once have ny process.</p>\n<p><strong>Workaround</strong><br>\nSo when I do this:<br>\npublic Form1()<br>\n{<br>\nInitializeComponent();<br>\n<a target='_blank' href=\"http://columnHeader1.Name\">columnHeader1.Name</a> = âcolumnHeader1â;<br>\n<a target='_blank' href=\"http://columnHeader2.Name\">columnHeader2.Name</a> = âcolumnHeader2â;<br>\n}</p>\n<pre><code>    private void button1_Click(object sender, EventArgs e)\n    {\n        Text = &quot;IndexofKey &quot; + listView1.Columns.IndexOfKey(&quot;columnHeader1&quot;);\n    }\n</code></pre>\n<p>This code works as expected and returns 0.</p>\n<p>Thanks<br>\nZheng</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/2867","RelatedDescription":"Open issue \"`ListView.IndexOfKey()` returns incorrect value\" (#2867)"},{"Id":"565947333","IsPullRequest":true,"CreatedAt":"2020-02-16T18:27:59","Actor":"hughbe","Number":"2865","RawContent":null,"Title":"Cleanup single line getters/setters","State":"open","Body":"## Proposed Changes\r\n- Cleanup single line getters/setters\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2865)","Url":"https://github.com/dotnet/winforms/pull/2865","RelatedDescription":"Open PR \"Cleanup single line getters/setters\" (#2865)"},{"Id":"565916059","IsPullRequest":false,"CreatedAt":"2020-02-16T14:43:28","Actor":"NikolaosWakem","Number":"2863","RawContent":null,"Title":"Application crash when using .ocx with events that have ref objects, works in Framework - System.Windows.Forms.AxHost","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.0 & 3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nUsing ActiveX .ocx  user control that has specifically not null, ref objects passed on events crashes entire application due to corrupt memory - Same code works in Framework\r\n\r\n**Expected behavior:**\r\n\r\nref object is not corrupt on return to OCX after calling event inside core application\r\n\r\n**Minimal repro:**\r\n```\r\nusing System;\r\nusing System.Windows.Forms;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        [STAThread]\r\n        static void Main(string[] args)\r\n        {\r\n            var c = new WindowsFormsControlLibrary1.UserControl1();\r\n            c.CreateControl();\r\n            c.TestEventByRef += C_TestEventByRef;\r\n            c.WithObjectByRefTestEvent();\r\n            c.Dispose();\r\n\r\n            var c2 = new AxAxolotl.AxTestControl();\r\n            c2.CreateControl();\r\n            c2.TestEventByRef += axTestControl1_TestEventByRef;\r\n            c2.WithObjectByRefTestEvent();\r\n            c2.Dispose();\r\n        }\r\n\r\n        private static void C_TestEventByRef(object sender, WindowsFormsControlLibrary1.TestEventByRefEventArgs e)\r\n        {\r\n            e.TestObject = new WindowsFormsControlLibrary1.TestObject { Text = \"Framework Out\" };\r\n        }\r\n\r\n        private static void axTestControl1_TestEventByRef(object sender, AxAxolotl.__TestControl_TestEventByRefEvent e)\r\n        {\r\n            MessageBox.Show(e.column.Text);\r\n\r\n            e.column = new Axolotl.CTestObject { Text = \"OCX Out\" };\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\nexample winforms control that works in framework and core\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Drawing;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\n\r\nnamespace WindowsFormsControlLibrary1\r\n{\r\n    public class TestEventByRefEventArgs : EventArgs\r\n    {\r\n        public TestObject TestObject { get; set; }\r\n    }\r\n\r\n    public partial class UserControl1 : UserControl\r\n    {\r\n        public event EventHandler<TestEventByRefEventArgs> TestEventByRef;\r\n\r\n        public UserControl1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        public void WithObjectByRefTestEvent()\r\n        {\r\n            var testObject = new TestObject { Text = \"In\" };\r\n\r\n            var testEventByRefEventArgs = new TestEventByRefEventArgs { TestObject = testObject };\r\n\r\n            TestEventByRef?.Invoke(this, testEventByRefEventArgs);\r\n\r\n            MessageBox.Show(testEventByRefEventArgs.TestObject.Text);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\nexample OCX (in VB6) control that works in framework by crashes in core\r\n\r\n```\r\nOption Explicit\r\n\r\nEvent TestEventByRef(ByRef Column As CTestObject)\r\n\r\nPublic Sub WithObjectByRefTestEvent()\r\n    Dim a As CTestObject\r\n    Set a = New CTestObject\r\n    a.Text = \"OCX In\"\r\n    RaiseEvent TestEventByRef(a)\r\n    MsgBox a.Text\r\nEnd Sub\r\n```\r\n\r\n\r\n// CTestObject.cls\r\n```\r\nOption Explicit\r\n\r\nPublic Text As String\r\n```\r\n\r\nHere is a repro in a zip\r\n\r\nhttps://axolotl.blob.core.windows.net/issue2863/Issue2863.zip\r\n\r\nyou have to first register the .ocx \"regsvr32 Issue2863\\VB6OCX\\Axolotl.TestControl.ocx\"\r\n\r\nthen run ConsoleApp1 (core) in debug with exceptions turned on.. (ConsoleApp2 is framework and works)\r\n\r\nIssue2863\\VB6OCX\\Axolotl.TestControl.ctl\r\n\r\nMsgBox a.Text <== a is corrupt\r\n\r\nException thrown at 0x11001F16 (Axolotl.TestControl.ocx) in ConsoleApp1.exe: 0xC0000005: Access violation reading location 0x00000000. occurred\r\n","Url":"https://github.com/dotnet/winforms/issues/2863","RelatedDescription":"Open issue \"Application crash when using .ocx with events that have ref objects, works in Framework - System.Windows.Forms.AxHost\" (#2863)"},{"Id":"565901666","IsPullRequest":true,"CreatedAt":"2020-02-16T13:16:40","Actor":"dotnet-maestro[bot]","Number":"2862","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200215.1\r\n- **Date Produced**: 2/15/2020 2:11 PM\r\n- **Commit**: e133be6cf759f6badf7bc4052118ad8197eb03bf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20115.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20115.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20115.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20115.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20115.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2862)","Url":"https://github.com/dotnet/winforms/pull/2862","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2862)"},{"Id":"565799397","IsPullRequest":false,"CreatedAt":"2020-02-15T19:45:01","Actor":"oswaldtech","Number":"2861","RawContent":null,"Title":"Add a generic host lifetime for Windows Forms","State":"open","Body":"Enterprise customers want to keep using Windows Forms, and we want to use the generic host.\r\n\r\nCan we add a feature to use the generic host with Windows Forms and use the lifetime of the start up form such as this library I created?\r\n\r\nhttps://github.com/oswald-technologies/WindowsFormsLifetime\r\n\r\nhttps://github.com/dotnet/extensions/issues/2949\r\n\r\n**Benefits this functionality will provide to Windows Forms customers.**\r\nThe main benefit: allows WinForms developers to easily utilize .NET Core's generic host and have the host gracefully shutdown when the start form is closed.\r\nThis in turn lets you use the default host builder in the same way it is used for ASP.NET Core applications.\r\nFurther, this allows the use of dependency injection, configuration, logging, and more in WinForms applications without manual setup.\r\n\r\n**What use cases it will enable, and where it may not be appropriate.**\r\nUse dependency injection, configuration, logging with WinForms (and a lot of other .NET Core extensions).\r\nRun background tasks in WinForms with `IHostedService`s.\r\nRun the GUI on a separate thread to increase performance.\r\n\r\n**Performance implications.**\r\nUsing a `WindowsFormsLifetime` should help increase performance because the WinForms GUI will by default, run on a separate thread. Typically now, you start with the default WinForms template, which runs everything on the GUI thread. I believe most people usually run with this instead of spawning other threads for work. Especially in the Enterprise realm, where we develop WinForms apps quickly for internal use only.\r\n\r\n**How it would coincide with the VS Designer, etc.**\r\nThis has a direct correlation with the VS Designer because it is intended to be used with Forms.\r\n\r\nMy suggestion is to have this be its own extension package, similar to:\r\nhttps://github.com/dotnet/extensions/tree/master/src/Hosting/WindowsServices","Url":"https://github.com/dotnet/winforms/issues/2861","RelatedDescription":"Open issue \"Add a generic host lifetime for Windows Forms\" (#2861)"},{"Id":"565779212","IsPullRequest":true,"CreatedAt":"2020-02-15T17:04:25","Actor":"jnm2","Number":"2859","RawContent":null,"Title":"[Reference] Add FileDialog.ClientGuid","State":"open","Body":"DO NOT MERGE\r\n\r\nReference implementation for proposal https://github.com/dotnet/winforms/issues/2858\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2859)","Url":"https://github.com/dotnet/winforms/pull/2859","RelatedDescription":"Open PR \"[Reference] Add FileDialog.ClientGuid\" (#2859)"},{"Id":"565778777","IsPullRequest":false,"CreatedAt":"2020-02-15T17:01:34","Actor":"jnm2","Number":"2858","RawContent":null,"Title":"Proposal to expose FileDialog.ClientGuid","State":"open","Body":"### What it is\r\n\r\nFrom docs: [`IFileDialog::SetClientGuid`](\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setclientguid) enables a calling application to associate a GUID with a dialog's persisted state. A dialog's state can include factors such as the last visited folder and the position and size of the dialog. Typically, this state is persisted based on the name of the executable file. By specifying a GUID, an application can have different persisted states for different versions of the dialog within the same application (for example, an import dialog and an open dialog).\r\n\r\nExposing `IFileDialog::SetClientGuid` is in line with one of the aims which the [contributing guide](https://github.com/dotnet/winforms/blob/master/Documentation/contributing.md) calls out for .NET 5.0 and beyond:\r\n\r\n> [U]pdate implementations to deliver all aspects of modern Windows UI, including missings properties or actions\r\n\r\n### API proposal\r\n\r\nDraft implementation: https://github.com/dotnet/winforms/pull/2859\r\n\r\n```diff\r\nnamespace System.Windows.Forms\r\n{\r\n    public abstract partial class FileDialog : CommonDialog\r\n    {\r\n        // Public instance properties\r\n        public bool AddExtension { get; set; }\r\n        public virtual bool CheckFileExists { get; set; }\r\n        public bool CheckPathExists { get; set; }\r\n+       public System.Guid? ClientGuid { get; set; }\r\n        public string DefaultExt { get; set; }\r\n        public bool DereferenceLinks { get; set; }\r\n        public string FileName { get; set; }\r\n        public string[] FileNames { get; }\r\n        public string Filter { get; set; }\r\n        public int FilterIndex { get; set; }\r\n        public string InitialDirectory { get; set; }\r\n        public bool RestoreDirectory { get; set; }\r\n        public bool ShowHelp { get; set; }\r\n        public bool SupportMultiDottedExtensions { get; set; }\r\n        public bool Title { get; set; }\r\n        public bool ValidateNames { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n### Lack of alternatives\r\n\r\nWe were recently in a situation where the use case fit the SetClientGuid concept perfectly. In our plugin for an application which is not published by us, our file dialogs needed to track and open to a last-used import directory without affecting the initial directory of the existing file dialogs across the base application. The base application doesn't set the initial directory when it shows a file dialog. Windows shares the state of all dialogs which have no client GUID across the whole app. The only way to keep our dialogs from overwriting the last-used directory for all the dialogs across the base application was to use SetClientGuid.\r\n\r\nBecause Windows Forms does not expose this capability, nor does it even provide a hook we could use to obtain the object instance to make COM calls on, I ended up taking a few hours and implementing our own file dialog library with a ClientGuid property.\r\n\r\nð If we were in a situation where we had control over the code in the base application that showed file dialogs, one alternative would be to save and restore FileDialog.InitialDirectory to two separate storage locations. This feels more like a hack than idiomatic use of the Windows file dialog feature.\r\n\r\n### Template questions\r\n\r\n> Will this feature affect UI controls?\r\n\r\n**Yes**, Windows saves and restores initial directory and dialog screen position with the application name as the key. This feature would enable opting in to using an arbitrary GUID as the key instead of the application name.\r\n\r\n> Will VS Designer need to support the feature? If yes, describe how you expect it to funÑtion.\r\n\r\n**No**, `[Browsable(false)]` should be fine. On the other hand, the property grid's default behavior for a property of type `System.Guid?` might be desirable. We could even be fancy and add an editor button that sets the property to `Guid.NewGuid()`.\r\n\r\n> What impact will it have on accessibility?\r\n\r\n**None.**\r\n\r\n> Will this feature need to be localized or be localizable?\r\n\r\nJust the SRDescriptionAttribute on the new property, I think? At runtime, **no**.","Url":"https://github.com/dotnet/winforms/issues/2858","RelatedDescription":"Open issue \"Proposal to expose FileDialog.ClientGuid\" (#2858)"},{"Id":"565745232","IsPullRequest":true,"CreatedAt":"2020-02-15T13:16:39","Actor":"dotnet-maestro[bot]","Number":"2857","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200214.5\r\n- **Date Produced**: 2/15/2020 3:39 AM\r\n- **Commit**: 16fbdca79f86f36434b80f2bb898861759ec754b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20114.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20114.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20114.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20114.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20114.5\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2857)","Url":"https://github.com/dotnet/winforms/pull/2857","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2857)"},{"Id":"565047535","IsPullRequest":false,"CreatedAt":"2020-02-14T01:25:35","Actor":"RussKie","Number":"2856","RawContent":null,"Title":"Flaky tests: `GroupBoxTests.GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected`","State":"open","Body":"\r\n**Problem description:**\r\n\r\n`GroupBoxTests.GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected` sporadically yet regularly fail in the internal CI\r\nE.g.:\r\n* https://dev.azure.com/dnceng/internal/_build/results?buildId=520646&view=results\r\n* https://dev.azure.com/dnceng/internal/_build/results?buildId=515654&view=results\r\n\r\nUpon re-run the test typically pass.\r\n\r\n```\r\nxUnit.net Console Runner v2.4.1 (64-bit .NET Core 5.0.0-alpha1.19514.1)\r\n  Discovering: System.Windows.Forms.Tests\r\n  Discovered:  System.Windows.Forms.Tests\r\n  Starting:    System.Windows.Forms.Tests\r\n    System.Windows.Forms.Tests.ApplicationTests.Application_VisualStyleState_Set_ReturnsExpected [SKIP]\r\n      Deadlock, see: https://github.com/dotnet/winforms/issues/2192\r\nUnhandled exception. Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n   at Xunit.Assert.Equal[T](T expected, T actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 25\r\n   at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithHandleWithVisualStyles_GetReturnsExpected>b__21_0(String valueString, String boolStrings, String intStrings) in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs:line 752\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 91\r\n    System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_SetWithHandleWithVisualStyles_GetReturnsExpected(valueParam: System, containerControlParam: True, ownerDrawParam: False, userMouseParam: False, expectedInvalidatedCallCountParam: 1, expectedCreatedCallCountParam: 1) [FAIL]\r\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Stack Trace:\r\n        \r\n        Child exception:\r\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n        Expected: 1\r\n        Actual:   0\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs(752,0): at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithHandleWithVisualStyles_GetReturnsExpected>b__21_0(String valueString, String boolStrings, String intStrings)\r\n        \r\n        Child process:\r\n          System.Windows.Forms.Tests, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 System.Windows.Forms.Tests.GroupBoxTests+<>c Void <GroupBox_FlatStyle_SetWithHandleWithVisualStyles_GetReturnsExpected>b__21_0(System.String, System.String, System.String)\r\n        \r\n        Child arguments:\r\n          System, True,False,False, 1,1\r\n        \r\nUnhandled exception. Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n   at Xunit.Assert.Equal[T](T expected, T actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 25\r\n   at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(String oldValueString, String valueString, String boolStrings, String intStrings) in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs:line 884\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 91\r\n    System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected(oldValueParam: Flat, valueParam: System, containerControlParam: True, ownerDrawParam: False, userMouseParam: False, expectedInvalidatedCallCountParam: 1, expectedCreatedCallCountParam: 1) [FAIL]\r\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Stack Trace:\r\n        \r\n        Child exception:\r\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n        Expected: 1\r\n        Actual:   0\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs(884,0): at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(String oldValueString, String valueString, String boolStrings, String intStrings)\r\n        \r\n        Child process:\r\n          System.Windows.Forms.Tests, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 System.Windows.Forms.Tests.GroupBoxTests+<>c Void <GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(System.String, System.String, System.String, System.String)\r\n        \r\n        Child arguments:\r\n          Flat, System, True,False,False, 1,1\r\n        \r\nUnhandled exception. Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n   at Xunit.Assert.Equal[T](T expected, T actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 25\r\n   at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(String oldValueString, String valueString, String boolStrings, String intStrings) in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs:line 884\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 91\r\n    System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected(oldValueParam: Popup, valueParam: System, containerControlParam: True, ownerDrawParam: False, userMouseParam: False, expectedInvalidatedCallCountParam: 1, expectedCreatedCallCountParam: 1) [FAIL]\r\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Stack Trace:\r\n        \r\n        Child exception:\r\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n        Expected: 1\r\n        Actual:   0\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs(884,0): at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(String oldValueString, String valueString, String boolStrings, String intStrings)\r\n        \r\n        Child process:\r\n          System.Windows.Forms.Tests, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 System.Windows.Forms.Tests.GroupBoxTests+<>c Void <GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(System.String, System.String, System.String, System.String)\r\n        \r\n        Child arguments:\r\n          Popup, System, True,False,False, 1,1\r\n        \r\nUnhandled exception. Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n   at Xunit.Assert.Equal[T](T expected, T actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 25\r\n   at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(String oldValueString, String valueString, String boolStrings, String intStrings) in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs:line 884\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 91\r\n    System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected(oldValueParam: Standard, valueParam: System, containerControlParam: True, ownerDrawParam: False, userMouseParam: False, expectedInvalidatedCallCountParam: 1, expectedCreatedCallCountParam: 1) [FAIL]\r\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Stack Trace:\r\n        \r\n        Child exception:\r\n          Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n        Expected: 1\r\n        Actual:   0\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/GroupBoxTests.cs(884,0): at System.Windows.Forms.Tests.GroupBoxTests.<>c.<GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(String oldValueString, String valueString, String boolStrings, String intStrings)\r\n        \r\n        Child process:\r\n          System.Windows.Forms.Tests, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 System.Windows.Forms.Tests.GroupBoxTests+<>c Void <GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected>b__23_0(System.String, System.String, System.String, System.String)\r\n        \r\n        Child arguments:\r\n          Standard, System, True,False,False, 1,1\r\n        \r\n  Finished:    System.Windows.Forms.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Windows.Forms.Tests  Total: 46240, Errors: 0, Failed: 4, Skipped: 1, Time: 90.474s\r\n=== COMMAND LINE ===\r\n\"F:\\workspace\\_work\\1\\s\\.dotnet\\dotnet.exe\" exec --depsfile \"F:\\workspace\\_work\\1\\s\\artifacts\\bin\\System.Windows.Forms.Tests\\Release\\netcoreapp5.0\\System.Windows.Forms.Tests.deps.json\" --runtimeconfig \"F:\\workspace\\_work\\1\\s\\artifacts\\bin\\System.Windows.Forms.Tests\\Release\\netcoreapp5.0\\System.Windows.Forms.Tests.runtimeconfig.json\"  \"F:\\workspace\\_work\\1\\s\\.packages\\xunit.runner.console/2.4.1/tools/netcoreapp2.0/xunit.console.dll\" \"F:\\workspace\\_work\\1\\s\\artifacts\\bin\\System.Windows.Forms.Tests\\Release\\netcoreapp5.0\\System.Windows.Forms.Tests.dll\" -noautoreporters -xml \"F:\\workspace\\_work\\1\\s\\artifacts\\TestResults\\Release\\System.Windows.Forms.Tests_netcoreapp5.0_x64.xml\" -html \"F:\\workspace\\_work\\1\\s\\artifacts\\TestResults\\Release\\System.Windows.Forms.Tests_netcoreapp5.0_x64.html\"  > \"F:\\workspace\\_work\\1\\s\\artifacts\\log\\Release\\System.Windows.Forms.Tests_netcoreapp5.0_x64.log\" 2>&1\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nTests pass.\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/2856","RelatedDescription":"Open issue \"Flaky tests: `GroupBoxTests.GroupBox_FlatStyle_SetWithCustomOldValueWithHandleWithVisualStyles_GetReturnsExpected`\" (#2856)"},{"Id":"565027058","IsPullRequest":true,"CreatedAt":"2020-02-14T00:38:38","Actor":"dotnet-maestro[bot]","Number":"2855","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: a2a5ea62-d9bf-419c-0c86-08d7315b512a\r\n- **Build**: 20200213.5\r\n- **Date Produced**: 2/13/2020 9:34 PM\r\n- **Commit**: 15f00efd583eab4372b2e9ca25bd80ace5b119ad\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.20113.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.20113.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.20113.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.20113.5\r\n\r\n[marker]: <> (End:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2855)","Url":"https://github.com/dotnet/winforms/pull/2855","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#2855)"},{"Id":"564532406","IsPullRequest":false,"CreatedAt":"2020-02-13T08:58:28","Actor":"M-Lipin","Number":"2853","RawContent":null,"Title":"Prevent throwing error on reset DataGridView current cell address while binding with DataSource","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\nThe issue is that in some circumstances there is an error when showing the DataGridView control that is already has a DataSource bound. On control show binding is reset which may lead to an error while resetting current cell to -1;-1 coordinates.\r\n\r\nAn error is shown on form opening / control showing:\r\n_\"Operation is not valid because it results in a reentrant call to the SetCurrentCellAddressCore function.\"_\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nStacktrace:\r\n```\r\nSystem.Windows.Forms!System.Windows.Forms.DataGridView.SetCurrentCellAddressCore in DataGridViewMethods.cs\r\nat System.Windows.Forms!System.Windows.Forms.DataGridView.set_CurrentCell in DataGridView.cs\r\nat System.Windows.Forms!System.Windows.Forms.DataGridView.OnBindingContextChanged in DataGridViewMethods.cs\r\nat System.Windows.Forms!System.Windows.Forms.Control.CreateControl in Control.cs\r\nat System.Windows.Forms!System.Windows.Forms.Control.WmShowWindow in Control.cs\r\nat System.Windows.Forms!System.Windows.Forms.Control.WndProc in Control.cs\r\nat System.Windows.Forms!System.Windows.Forms.DataGridView.WndProc in DataGridViewMethods.cs\r\n```\r\n\r\n**Expected behavior:**\r\nThere should be no error.\r\n\r\n**Minimal repro:**\r\nTo be found.","Url":"https://github.com/dotnet/winforms/issues/2853","RelatedDescription":"Open issue \"Prevent throwing error on reset DataGridView current cell address while binding with DataSource\" (#2853)"},{"Id":"564480804","IsPullRequest":false,"CreatedAt":"2020-02-13T08:03:19","Actor":"John-Qiao","Number":"2852","RawContent":null,"Title":"'StatusBar' class could not be found in System.Windows.Forms","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 5.0.100-preview.1.20112.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: No \r\n\r\n**Problem description:**\r\nCannot create the System.Windows.Forms.StatusBar class object in .NET Core 5.0 project.\r\n![StatusBar-5 0](https://user-images.githubusercontent.com/45864985/74408964-b0ef5500-4e70-11ea-8ee0-1f30406fd6ab.png)\r\n\r\n**More info:**\r\n1. This issue cannot repro in the latest NET Core 3.1 project.\r\n2. The System.Windows.Forms.StatusBarPanel class object cannot be created too.\r\n\r\n**Expected behavior:**\r\nCan create the System.Windows.Forms.StatusBar class object in .NET Core 5.0 project successfully.\r\n![StatusBar-3 1](https://user-images.githubusercontent.com/45864985/74408977-b9e02680-4e70-11ea-9b2b-39fbea868fd5.png)\r\n\r\n**Minimal repro:**\r\n1. Create a Winforms Core application.\r\n2. Open Form1.cs file and add the following code in Form1 class. \r\n        StatusBar ss = new StatusBar();\r\n3. Build the application.","Url":"https://github.com/dotnet/winforms/issues/2852","RelatedDescription":"Closed issue \"'StatusBar' class could not be found in System.Windows.Forms\" (#2852)"},{"Id":"564470482","IsPullRequest":true,"CreatedAt":"2020-02-13T06:32:47","Actor":"RussKie","Number":"2851","RawContent":null,"Title":"fix: `PrintDialog` not shown","State":"open","Body":"Resolves #2814\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- fix the interop imports\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- `PrintDialog` is now shown as expected\r\n- \r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2851)","Url":"https://github.com/dotnet/winforms/pull/2851","RelatedDescription":"Open PR \"fix: `PrintDialog` not shown\" (#2851)"},{"Id":"564430761","IsPullRequest":true,"CreatedAt":"2020-02-13T05:04:42","Actor":"gpetrou","Number":"2850","RawContent":null,"Title":"Move EndDialog to Interop User32","State":"closed","Body":"## Proposed changes\r\n\r\n- Move EndDialog to Interop User32.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2850)","Url":"https://github.com/dotnet/winforms/pull/2850","RelatedDescription":"Closed or merged PR \"Move EndDialog to Interop User32\" (#2850)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-19T05:30:56.7065632Z","RunDurationInMilliseconds":918}