{"Data":{"GitHub":{"Issues":[{"Id":"405988695","IsPullRequest":false,"CreatedAt":"2019-02-02T14:41:46","Actor":"PascalKoe","Number":"319","RawContent":null,"Title":"When stop hovering over control it's displayed incorrectly","State":"open","Body":"* .NET Core Version: 3.0.100-preview-010184\r\n* Windows version: Windows 10 Education 1809 Build 17763.253\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nHovering over Controls (sometimes) causes them to display incorrectly. Either they get mostly the background color or they have some sort of out of focus zoomed in effect.\r\nCouldn't reproduce it on a different Windows 10 Professional Version.\r\n \r\n **Actual behavior:**\r\nWhen control isn't inside of a group box and I hover over the control and then leave it it's displayed incorrectly. Controls that don't have a hover animation don't seem to be affected (disabled buttons or labels for example).\r\n \r\n **Expected behavior:**\r\n Display correctly.\r\n\r\n **Minimal repro:**\r\nAny application with the default controls will do as long as they have a hovering animation.\r\n```\r\n <Window x:Class=\"TestApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:TestApp\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height=\"9*\"/>\r\n            <RowDefinition Height=\"1*\"/>\r\n        </Grid.RowDefinitions>\r\n        <GroupBox Header=\"A simple GroupBox\" HorizontalAlignment=\"Left\" Margin=\"0,0,0,0\" VerticalAlignment=\"Top\" Grid.Row=\"0\">\r\n            <Button Content=\"I dont disappear\" FontSize=\"20\"/>\r\n        </GroupBox>\r\n        <Button Content=\"I disappear\" Grid.Row=\"1\" FontSize=\"20\"/>\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\n![Minimal Repo](https://user-images.githubusercontent.com/15944057/52165354-13f7c900-2700-11e9-9cf3-69fa404ac67f.png)\r\nBefore hovering over the lower button.\r\n\r\n![Minimal Repo after hover](https://user-images.githubusercontent.com/15944057/52165358-2b36b680-2700-11e9-8afe-807144fac711.png)\r\nAfter hovering and leaving the button. Hovering and leaving the upper button doesn't produce the same issue.\r\n\r\n![Option Menu of dnspy (64bit .NET Core WPF)](https://user-images.githubusercontent.com/15944057/52165299-21f91a00-26ff-11e9-9925-d28958d30036.png)\r\nScreenshot from [dnspy ](https://github.com/0xd4d/dnSpy)(.NET Core version). The messed up stuff should be a bunch of checkboxes.","Url":"https://github.com/dotnet/wpf/issues/319","RelatedDescription":"Open issue \"When stop hovering over control it's displayed incorrectly\" (#319)"},{"Id":"405981964","IsPullRequest":true,"CreatedAt":"2019-02-02T13:17:56","Actor":"dotnet-maestro[bot]","Number":"318","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19101.5\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19101.5\r\n- System.Windows.Extensions - 4.6.0-preview.19101.5\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19101.5\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19101.5\r\n- System.Security.AccessControl - 4.6.0-preview.19101.5\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19101.5\r\n- System.Security.Permissions - 4.6.0-preview.19101.5\r\n- System.Security.Principal.Windows - 4.6.0-preview.19101.5\r\n- System.Reflection.Emit - 4.6.0-preview.19101.5\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19101.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/318","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#318)"},{"Id":"405981111","IsPullRequest":true,"CreatedAt":"2019-02-02T13:07:17","Actor":"dotnet-maestro[bot]","Number":"317","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19101.16\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/317","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#317)"},{"Id":"405707496","IsPullRequest":false,"CreatedAt":"2019-02-01T13:43:56","Actor":"chenyj796","Number":"316","RawContent":null,"Title":"CommandParameter is null when call CanExecute method at first time","State":"open","Body":"* .NET Core Version: (3.0.0-preview-27122-01)\r\n* Windows version: (`windows 10`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.6.1?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nI have a TestCommand as below:\r\n```csharp\r\npublic class TestCommand : ICommand\r\n{\r\n    public event EventHandler CanExecuteChanged;\r\n\r\n    public bool CanExecute(object parameter)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    public void Execute(object parameter)\r\n    {\r\n    }\r\n}\r\n```\r\nand then I use it in a xaml file:\r\n```xml\r\n<Button Content=\"Test\" Command=\"{StaticResource testCommand}\" CommandParameter=\"abcdef\"/>\r\n```\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n At first time the CanExecute method is called, the parameter's value is nullã€‚\r\nIf I change the XAML property's order as below, the parameter's value is abcdef (that's ok):\r\n```xml\r\n<Button Content=\"Test\" CommandParameter=\"abcdef\" Command=\"{StaticResource testCommand}\"/>\r\n```\r\n **Expected behavior:**\r\n The parameter's value is not null at each time, regardless of the XAML order\r\n\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/316","RelatedDescription":"Open issue \"CommandParameter is null when call CanExecute method at first time\" (#316)"},{"Id":"405696441","IsPullRequest":true,"CreatedAt":"2019-02-01T13:18:43","Actor":"dotnet-maestro[bot]","Number":"315","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19081.4\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19081.4\r\n- System.Windows.Extensions - 4.6.0-preview.19081.4\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19081.4\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19081.4\r\n- System.Security.AccessControl - 4.6.0-preview.19081.4\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19081.4\r\n- System.Security.Permissions - 4.6.0-preview.19081.4\r\n- System.Security.Principal.Windows - 4.6.0-preview.19081.4\r\n- System.Reflection.Emit - 4.6.0-preview.19081.4\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19081.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/315","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#315)"},{"Id":"405692801","IsPullRequest":true,"CreatedAt":"2019-02-01T13:07:49","Actor":"dotnet-maestro[bot]","Number":"314","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19081.3\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/314","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#314)"},{"Id":"405645099","IsPullRequest":false,"CreatedAt":"2019-02-01T10:39:47","Actor":"geotinc","Number":"313","RawContent":null,"Title":"Start .net core WPF App with Administrator Privilege","State":"open","Body":"Is there a way to start the app in administrator ?\r\n\r\nI do the following in .net Framework\r\n`<requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\" />`\r\n\r\nThanks for reply","Url":"https://github.com/dotnet/wpf/issues/313","RelatedDescription":"Open issue \"Start .net core WPF App with Administrator Privilege\" (#313)"},{"Id":"405566241","IsPullRequest":false,"CreatedAt":"2019-02-01T06:12:08","Actor":"vsfeedback","Number":"312","RawContent":null,"Title":"OutOfMemoryException in XamlReader.Parse","State":"open","Body":"<p>The following line of code results in the parser getting stuck in a loop, adding simulated `EndMember` and `EndObject` nodes to a list until it eventually throws an `OutOfMemoryException`.</p><p></p><pre>XamlReader.Parse(&quot;&lt;DataTemplate xmlns=\\&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\\&quot;&gt;Invalid Markup&lt;/DataTemplate&gt;&quot;);</pre><pre>System.OutOfMemoryException : Array dimensions exceeded supported range.\n   at System.Collections.Generic.List`1.set_Capacity(Int32 value)\n   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)\n   at System.Collections.Generic.List`1.Add(T item)\n   at System.Xaml.XamlNodeList.Add(XamlNodeType nodeType, Object data)\n   at System.Xaml.DeferringWriter.WriteEndMember()\n   at System.Xaml.XamlObjectWriter.WriteEndMember()\n   at System.Xaml.XamlObjectWriter.Dispose(Boolean disposing)\n   at System.Xaml.XamlWriter.System.IDisposable.Dispose()\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, Boolean skipJournaledProperties, Uri baseUri)\n   at System.Windows.Markup.XamlReader.Load(XamlReader xamlReader, ParserContext parserContext)\n   at System.Windows.Markup.XamlReader.Load(XmlReader reader, ParserContext parserContext, XamlParseMode parseMode)\n   at System.Windows.Markup.XamlReader.Load(XmlReader reader)\n   at System.Windows.Markup.XamlReader.Parse(String xamlText)</pre><p></p><p>I understand that the xaml is invalid and would be perfectly happy if it threw a `XamlParseException`, but I think `OutOfMemoryException` is the wrong way to deal with this situation :)</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/439875/outofmemoryexception-in-xamlreaderparse.html\nVSTS ticketId: 781519_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/312","RelatedDescription":"Open issue \"OutOfMemoryException in XamlReader.Parse\" (#312)"},{"Id":"405240169","IsPullRequest":true,"CreatedAt":"2019-01-31T13:19:39","Actor":"dotnet-maestro[bot]","Number":"311","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19080.5\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19080.5\r\n- System.Windows.Extensions - 4.6.0-preview.19080.5\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19080.5\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19080.5\r\n- System.Security.AccessControl - 4.6.0-preview.19080.5\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19080.5\r\n- System.Security.Permissions - 4.6.0-preview.19080.5\r\n- System.Security.Principal.Windows - 4.6.0-preview.19080.5\r\n- System.Reflection.Emit - 4.6.0-preview.19080.5\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19080.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/311","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#311)"},{"Id":"405235744","IsPullRequest":true,"CreatedAt":"2019-01-31T13:07:56","Actor":"dotnet-maestro[bot]","Number":"310","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19080.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/310","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#310)"},{"Id":"405223719","IsPullRequest":true,"CreatedAt":"2019-01-31T12:30:21","Actor":"v-zbsail","Number":"309","RawContent":null,"Title":"LOC CHECKIN | dotnet/wpf master | 20190131","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/309","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/wpf master | 20190131\" (#309)"},{"Id":"405164219","IsPullRequest":false,"CreatedAt":"2019-01-31T09:55:46","Actor":"h82258652","Number":"308","RawContent":null,"Title":"Add CornerRadius property for all controls","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nIt is too complex to create a circle button now (need to rewrite the template), add ```CornerRadius``` property for all controls will easier to style.","Url":"https://github.com/dotnet/wpf/issues/308","RelatedDescription":"Open issue \"Add CornerRadius property for all controls\" (#308)"},{"Id":"405158440","IsPullRequest":false,"CreatedAt":"2019-01-31T09:41:38","Actor":"h82258652","Number":"307","RawContent":null,"Title":"Text selection for TextBlock","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nThis feature is already exist in UWP, can it port to WPF?","Url":"https://github.com/dotnet/wpf/issues/307","RelatedDescription":"Open issue \"Text selection for TextBlock\" (#307)"},{"Id":"405094430","IsPullRequest":true,"CreatedAt":"2019-01-31T06:02:22","Actor":"h82258652","Number":"306","RawContent":null,"Title":"MarkupExtension use interface instead of abstract class","State":"open","Body":"[issue](https://github.com/dotnet/wpf/issues/170)","Url":"https://github.com/dotnet/wpf/pull/306","RelatedDescription":"Open PR \"MarkupExtension use interface instead of abstract class\" (#306)"},{"Id":"405054074","IsPullRequest":true,"CreatedAt":"2019-01-31T02:35:55","Actor":"rladuca","Number":"305","RawContent":null,"Title":"Adding TestHost, test projects, and test documentation","State":"open","Body":"Adding System.Xaml unit test project for contributions\r\nAdding some test documentation\r\n\r\nFixes #304 ","Url":"https://github.com/dotnet/wpf/pull/305","RelatedDescription":"Open PR \"Adding TestHost, test projects, and test documentation\" (#305)"},{"Id":"405052154","IsPullRequest":false,"CreatedAt":"2019-01-31T02:26:37","Actor":"rladuca","Number":"304","RawContent":null,"Title":"Add TestHost, test documentation, and a project to contribute unit tests to","State":"open","Body":"In order to facilitate testing we need the following:\r\n\r\n- A TestHost to run tests against\r\n- A test project shell for tests to be added to\r\n- Documentation on all of the above (ongoing)\r\n\r\nThis is related to #180 and is part of that work (though more needs doing there)","Url":"https://github.com/dotnet/wpf/issues/304","RelatedDescription":"Open issue \"Add TestHost, test documentation, and a project to contribute unit tests to\" (#304)"},{"Id":"404904950","IsPullRequest":true,"CreatedAt":"2019-01-30T22:25:44","Actor":"qwell","Number":"303","RawContent":null,"Title":"Update version recommendations for Visual Studio and .NET Core SDK","State":"closed","Body":"Preview 2 of both has been made available.","Url":"https://github.com/dotnet/wpf/pull/303","RelatedDescription":"Closed or merged PR \"Update version recommendations for Visual Studio and .NET Core SDK\" (#303)"},{"Id":"404858709","IsPullRequest":false,"CreatedAt":"2019-01-30T16:38:39","Actor":"Markz878","Number":"302","RawContent":null,"Title":"Make it possible for WPF datagrid to bind to a 2D array","State":"open","Body":"Please make it possible for WPF datagrid to bind directly to a multidimensional 2D array of primitives. There are already some packages for this, but would be nice to get this obvious feature automatically.\r\n","Url":"https://github.com/dotnet/wpf/issues/302","RelatedDescription":"Open issue \"Make it possible for WPF datagrid to bind to a 2D array\" (#302)"},{"Id":"404761365","IsPullRequest":true,"CreatedAt":"2019-01-30T13:10:18","Actor":"dotnet-maestro[bot]","Number":"301","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19079.11\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19079.11\r\n- System.Windows.Extensions - 4.6.0-preview.19079.11\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19079.11\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19079.11\r\n- System.Security.AccessControl - 4.6.0-preview.19079.11\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19079.11\r\n- System.Security.Permissions - 4.6.0-preview.19079.11\r\n- System.Security.Principal.Windows - 4.6.0-preview.19079.11\r\n- System.Reflection.Emit - 4.6.0-preview.19079.11\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19079.11\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/301","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#301)"},{"Id":"404732355","IsPullRequest":false,"CreatedAt":"2019-01-30T11:44:50","Actor":"pcfulife","Number":"300","RawContent":null,"Title":"Could not edit settings file","State":"open","Body":"* .NET Core Version: 3.0.100-preview-010184\r\n* Windows version: 1809\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nCannot edit WPF settings file. \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nWhen I create WPF project (.NET Core 3.0) and create WPF setting file (Settings1.settings), an error message shows. (The reference \"System\" could not be added to the project. This wizard will continue to run, but the resulting project may not build properly.)\r\nThen, I cannot edit Settings1.settings by default editor. (Visual Studio hangs and shows \"Exception from HRESULT: 0x80004005 (E_FAIL), Failed to generate file: Unable to find a type of reference that is appropriate for this file: \"System\".) But, it can be edited by XML editor.\r\nBut, after I save Settings1.settings file with XML editor, I cannot access to namespace (WpfApp1.Properties.Settings). Because it doesn't generate Settings1.Designer.cs\r\nI confused that it is a bug of Visual Studio or .NET Core. But, when I create a project with same VS version and .NET Framework, it doesn't occur.\r\n\r\n **Expected behavior:**\r\n \r\n\r\n **Minimal repro:**\r\n Just create WPF project and in project configuration, make a default resource, right click on Properties in solution explorer, add new settings file.\r\n","Url":"https://github.com/dotnet/wpf/issues/300","RelatedDescription":"Open issue \"Could not edit settings file\" (#300)"},{"Id":"404242617","IsPullRequest":false,"CreatedAt":"2019-01-29T11:20:30","Actor":"pcfulife","Number":"299","RawContent":null,"Title":".NET Core 3.0 has no SplashScreen Build Action.","State":"open","Body":"In .NET Framework 4.7.2 with Visual Studio 2019 Preview 2. There is SplashScreen Build Action of image file. But, .NET Core 3.0 doesn't have SplashScreen Build Action.\r\n\r\nIf I type manually \"SplashScreen\", It shows an error. (SplashScreen is not supporting). Built-in SplashScreen is no more supported? Or, Work-in Progress?","Url":"https://github.com/dotnet/wpf/issues/299","RelatedDescription":"Open issue \".NET Core 3.0 has no SplashScreen Build Action.\" (#299)"},{"Id":"404194710","IsPullRequest":false,"CreatedAt":"2019-01-29T09:25:41","Actor":"walterlv","Number":"298","RawContent":null,"Title":"Creating multi-thread UI has a very very low probability to crash","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812 But not sure because we can't reproduce it\r\n* Windows version: Windows 10.0.17763.0\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nAn exception is thrown when multi-threaded UI is shown during the application startup and the application crashes. We created a solution to reproduce it but actually, we got the issue at #297 but still can't reproduce this one.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n```\r\nSystem.Windows.Markup.XamlParseException: Collection was modified; enumeration operation may not execute. ---> System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   åœ¨ System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n   åœ¨ System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   åœ¨ System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   åœ¨ System.Windows.Baml2006.WpfSharedBamlSchemaContext.GetKnownXamlType(Type type)\r\n   åœ¨ System.Windows.Baml2006.WpfSharedBamlSchemaContext.GetXamlType(Type type)\r\n   åœ¨ System.Windows.Baml2006.Baml2006SchemaContext.GetXamlType(Type type)\r\n   åœ¨ System.Xaml.XamlObjectWriter.GetXamlType(Type clrType)\r\n   åœ¨ System.Xaml.XamlObjectWriter.WriteEndMember()\r\n   åœ¨ System.Xaml.XamlWriter.WriteNode(XamlReader reader)\r\n   åœ¨ System.Windows.Markup.WpfXamlLoader.TransformNodes(XamlReader xamlReader, XamlObjectWriter xamlWriter, Boolean onlyLoadOneNode, Boolean skipJournaledProperties, Boolean shouldPassLineNumberInfo, IXamlLineInfo xamlLineInfo, IXamlLineInfoConsumer xamlLineInfoConsumer, XamlContextStack`1 stack, IStyleConnector styleConnector)\r\n   åœ¨ System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\r\n   --- End of inner exception stack trace ---\r\n   åœ¨ System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\r\n   åœ¨ System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\r\n   åœ¨ System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream)\r\n   åœ¨ System.Windows.Application.LoadComponent(Object component, Uri resourceLocator)\r\n```\r\n \r\n **Expected behavior:**\r\n \r\nDon't crash.\r\n\r\n **Minimal repro:**\r\n \r\nMaybe it is the same reproduction to #297 but we only receive these exceptions from our partners' PCs and we can't reproduce it in our PCs.\r\n","Url":"https://github.com/dotnet/wpf/issues/298","RelatedDescription":"Open issue \"Creating multi-thread UI has a very very low probability to crash\" (#298)"},{"Id":"404114395","IsPullRequest":false,"CreatedAt":"2019-01-29T04:10:38","Actor":"walterlv","Number":"297","RawContent":null,"Title":"Creating multi-thread UI has a low probability to crash","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10.0.18323 19H1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\n Necessary conditions:\r\n\r\n1. Create multiple WPF UI threads\r\n    - In fact, two are enough, one is the main UI thread with the App class we usually write; a background UI thread, for example, to display the UI thread that starts the splash screen.\r\n    - If you use two threads, you need a lot of repetitive trials to reproduce; and by creating more threads you can greatly improve the probability of a single recurrence\r\n2. These UI threads all display WPF windows\r\n3. This issue will occur in both WPF on .NET Core 3 and WPF on .NET Framework 4.8.\r\n\r\nphenomenon:\r\n\r\nÂ - An exception is thrown and the application crashes\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n ```\r\nException thrown: 'System.NullReferenceException' in WindowsBase.dll\r\nObject reference not set to an instance of an object.\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Packaging.PackagePart.CleanUpRequestedStreamsList()\r\n   at System.IO.Packaging.PackagePart.GetStream(FileMode mode, FileAccess access)\r\n   at System.Windows.Application.LoadComponent(Object component, Uri resourceLocator)\r\n   at Walterlv.Bugs.MultiThreadedUI.SplashWindow.InitializeComponent() in C:\\Users\\lvyi\\Desktop\\Walterlv.Bugs.MultiThreadedUI\\Walterlv.Bugs.MultiThreadedUI\\SplashWindow.xaml:line 1\r\n   at Walterlv.Bugs.MultiThreadedUI.SplashWindow..ctor() in C:\\Users\\lvyi\\Desktop\\Walterlv.Bugs.MultiThreadedUI\\Walterlv.Bugs.MultiThreadedUI\\SplashWindow.xaml.cs:line 24\r\n   at Walterlv.Bugs.MultiThreadedUI.Program.<>c__DisplayClass1_0.<RunSplashWindow>b__0() in C:\\Users\\lvyi\\Desktop\\Walterlv.Bugs.MultiThreadedUI\\Walterlv.Bugs.MultiThreadedUI\\Program.cs:line 33\r\n```\r\n\r\n![The exception caught in Visual Studio 2019](https://user-images.githubusercontent.com/9959623/51883630-bd685300-23be-11e9-9c71-a0a8d8d929e3.png)\r\n\r\n **Expected behavior:**\r\nDon't crash.\r\n \r\n **Minimal repro:**\r\n\r\n1. Create a new WPF project (either .NET Core 3 or .NET Framework 4.8)\r\n2. Keep the automatically generated `App` and `MainWindow` unchanged, we create a new window `SplashWindow`.\r\n3. Create a new `Program` class containing the Main function and set `Program` as the startup object (instead of `App`) in the project properties.\r\n\r\n![The project structure](https://user-images.githubusercontent.com/9959623/51883617-acb7dd00-23be-11e9-970d-d3581d5dab41.png)\r\n\r\nAll other files remain the same as the default code generated by Visual Studio, and the code of Program.cs is as follows:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Threading;\r\nusing System.Windows.Threading;\r\n\r\nnamespace Walterlv.Bugs.MultiThreadedUI\r\n{\r\n    public class Program\r\n    {\r\n        [STAThread]\r\n        private static void Main(string[] args)\r\n        {\r\n            for (var i = 0; i < 50; i++)\r\n            {\r\n                RunSplashWindow(i);\r\n            }\r\n\r\n            var app = new App();\r\n            app.InitializeComponent();\r\n            app.Run();\r\n        }\r\n\r\n        private static void RunSplashWindow(int index)\r\n        {\r\n            var thread = new Thread(() =>\r\n            {\r\n                var window = new SplashWindow\r\n                {\r\n                    Title = $\"SplashWindow {index.ToString().PadLeft(2, ' ')}\",\r\n                };\r\n                window.Show();\r\n                Dispatcher.Run();\r\n            })\r\n            {\r\n                IsBackground = true,\r\n            };\r\n            thread.SetApartmentState(ApartmentState.STA);\r\n            thread.Start();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRemarks: Even if you add this code just before the Splash Window creating, this exception still occurs.\r\n\r\n```csharp\r\nSynchronizationContext.SetSynchronizationContext(\r\n    new DispatcherSynchronizationContext(\r\n        Dispatcher.CurrentDispatcher));\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/297","RelatedDescription":"Open issue \"Creating multi-thread UI has a low probability to crash\" (#297)"},{"Id":"404050604","IsPullRequest":false,"CreatedAt":"2019-01-28T23:17:06","Actor":"dsplaisted","Number":"296","RawContent":null,"Title":"Runtime pack for Microsoft.WindowsDesktop.App should not include PDBs","State":"open","Body":"The \"runtime pack\" for Microsoft.WindowsDesktop.App\" currently includes .pdb files.  These should not be included in this package.","Url":"https://github.com/dotnet/wpf/issues/296","RelatedDescription":"Open issue \"Runtime pack for Microsoft.WindowsDesktop.App should not include PDBs\" (#296)"},{"Id":"403636538","IsPullRequest":false,"CreatedAt":"2019-01-28T03:22:04","Actor":"chenyj796","Number":"295","RawContent":null,"Title":"The GenerateAssemblyInformationalVersionAttribute Property in csproj file doestn't work","State":"open","Body":"* .NET Core Version: (3.0 Preview1)\r\n* Windows version: (`windows 10`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.6.1?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nI have an assembly attribute declaration as below:\r\n``` csharp\r\n[assembly: System.Reflection.AssemblyInformationVersion(\"some text\")]\r\n```\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n build failed for report repeated AssemblyInformationVersionAttribute\r\n\r\n **Expected behavior:**\r\n success since I added the property in csproj file\r\n``` csharp\r\n<GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>\r\n```\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/295","RelatedDescription":"Open issue \"The GenerateAssemblyInformationalVersionAttribute Property in csproj file doestn't work\" (#295)"},{"Id":"403580937","IsPullRequest":false,"CreatedAt":"2019-01-27T18:37:45","Actor":"MV10","Number":"294","RawContent":null,"Title":"WPF attributes coming to csproj or remain in AssemblyInfo?","State":"open","Body":"Now that .NET Core (or perhaps more correctly stated, MSBUILD?) is supposed use a hodgepodge of new csproj XML tags to create the assembly attributes we used to declare in AssemblyInfo.cs, what's the plan for WPF when it comes to things like `System.Windows.ThemeInfo` or the XML namespace attributes from `System.Windows.Markup`? Right now I'm having to create a my own Properties folder and AssemblyInfo.cs.\r\n\r\nAssuming WPF will follow the pattern of Even More Tags, will they be documented with the rest of csproj, or stashed away somewhere WPF-specific? (It looks like the current csproj docs are already missing a lot of tags, judging from the open issues list.)\r\n\r\nOr is it all still too early to say for sure?","Url":"https://github.com/dotnet/wpf/issues/294","RelatedDescription":"Open issue \"WPF attributes coming to csproj or remain in AssemblyInfo?\" (#294)"},{"Id":"402977910","IsPullRequest":false,"CreatedAt":"2019-01-25T02:22:55","Actor":"wyshmily","Number":"293","RawContent":null,"Title":"add character spacing support to Text element","State":"open","Body":"Is this hard?\r\nOr how can I achieve this by myself?","Url":"https://github.com/dotnet/wpf/issues/293","RelatedDescription":"Open issue \"add character spacing support to Text element\" (#293)"},{"Id":"402825942","IsPullRequest":false,"CreatedAt":"2019-01-24T17:53:12","Actor":"XianghanWang","Number":"292","RawContent":null,"Title":"image isn't rendered in wpf .net core project","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 19H1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nSteps to reproduce:\r\n1. Create new .net core WPF project\r\n2. Add image element and set source to one image file.\r\n3. F5\r\n\r\nActual: the image isn't rendered in UI. \r\n","Url":"https://github.com/dotnet/wpf/issues/292","RelatedDescription":"Open issue \"image isn't rendered in wpf .net core project\" (#292)"},{"Id":"402700687","IsPullRequest":true,"CreatedAt":"2019-01-24T13:18:00","Actor":"dotnet-maestro[bot]","Number":"291","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- System.CodeDom - 4.6.0-preview.19073.11\r\n- Microsoft.Win32.Registry - 4.6.0-preview.19073.11\r\n- System.Configuration.ConfigurationManager - 4.6.0-preview.19073.11\r\n- System.Reflection.TypeExtensions - 4.6.0-preview.19073.11\r\n- System.Security.AccessControl - 4.6.0-preview.19073.11\r\n- System.Security.Cryptography.Xml - 4.6.0-preview.19073.11\r\n- System.Security.Permissions - 4.6.0-preview.19073.11\r\n- System.Security.Principal.Windows - 4.6.0-preview.19073.11\r\n- System.Reflection.Emit - 4.6.0-preview.19073.11\r\n- System.Diagnostics.EventLog - 4.6.0-preview.19073.11\r\n- System.Windows.Extensions - 4.6.0-preview.19073.11\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/291","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#291)"},{"Id":"402697976","IsPullRequest":true,"CreatedAt":"2019-01-24T13:10:32","Actor":"dotnet-maestro[bot]","Number":"290","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/290","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#290)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-03T05:31:03.9688166Z","RunDurationInMilliseconds":720}