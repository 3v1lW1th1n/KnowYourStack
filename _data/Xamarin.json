{"Data":{"Blog":{"FeedItems":[{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null},{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many libraries developed using C or C++ which can be brought to bear when creating Xamarin-based mobile apps such as those leveraged by Microsoft’s Hyperlapse Mobile and Pix Camera in order...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null},{"Title":"Mobile & .NET Developer Community Events in February","PublishedOn":"2019-02-01T17:31:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Fall in love with building your next mobile application by networking with local user groups to learn about new and exciting releases, tooling, or updates with Xamarin and .NET related technologies!...","Href":"https://blog.xamarin.com/mobile-net-developer-community-events-in-february/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9159238711","Type":"PullRequestEvent","CreatedAt":"2019-03-01T01:36:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2754","RelatedDescription":"Merged pull request \"Avoid play store warnings when building libraries\" (#2754) at xamarin/xamarin-android","RelatedBody":"When you compile a library you might not want to target the latest SDK, as it could hose users targeting lower-end api-levels. However you currently get a warning that really only applies to applications, and not class libraries.\r\nThis PR skips the API Level check when the target isn't an application.\r\nAlso there were two near-identical warnings on the same check, so I consolidated those into a single warning (it looks like this was historical as updates vs new apps were on different timelines)\r\n\r\n@jonathanpeppers "},{"Id":"9158958592","Type":"PullRequestEvent","CreatedAt":"2019-03-01T00:21:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2772","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] make classes.zip optional for dexing\" (#2772) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid, we need to dex java libraries independently\r\nfor \"Enhanced Fast Deployment\". This means that in some cases, we\r\ndon't need to dex `classes.zip`.\r\n\r\nSo a few changes were needed:\r\n\r\n* `<D8/>` should not have the `ClassesZip` property marked as\r\n  `[Required]`.\r\n* `<CompileToDalvik/>` should take `ClassesZip` as an input and use it\r\n  if not blank. This is better than using:\r\n  `Path.Combine (ClassesOutputDirectory, \"..\", \"classes.zip\")`"},{"Id":"9158924080","Type":"PullRequestEvent","CreatedAt":"2019-03-01T00:12:30","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2771","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Handle bad `res` data.\" (#2771) at xamarin/xamarin-android","RelatedBody":"Some of the designer tests upstream are producing\r\nerrors such as\r\n\r\n\tThe \"CollectNonEmptyDirectories\" task failed unexpectedly.\r\n\terror MSB4018: System.IO.DirectoryNotFoundException: Could not find `res`\r\n\r\nWe should not be crashing out of the directory does\r\nnot exist. We should just skip it since this task is\r\ncalled `CollectNonEmptyDirectories`, and not existing\r\nmeans its empty."},{"Id":"9158916089","Type":"PullRequestEvent","CreatedAt":"2019-03-01T00:10:25","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2770","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Check for `_._` in the Nuget path.\" (#2770) at xamarin/xamarin-android","RelatedBody":"Context https://devdiv.visualstudio.com/DevDiv/_workitems/edit/679400\r\n\r\nWhen we try to resolve the `runtime` assembly we may well\r\nget a `_._` instead of the filename. This usually means\r\nthat the assembly will be provided by the framework. When\r\nthis happens we get the following error\r\n\r\n\t Error: Exception while loading assemblies: Java.Interop.Tools.Diagnostics.XamarinAndroidException: error XA0009: Error while loading assembly: /Users/tamasszadvari/.nuget/packages/system.runtime.loader/4.3.0/lib/MonoAndroid10/_._\r\n\r\nSo we should really be ignoring this particular senario."},{"Id":"9156471877","Type":"PullRequestEvent","CreatedAt":"2019-02-28T17:14:27","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2773","RelatedDescription":"Opened pull request \"[Mono.Android-Tests] Import additional tests\" (#2773) at xamarin/xamarin-android","RelatedBody":"Imports tests from https://github.com/xamarin/QualityAssurance/tree/b5e5c842b06dd88357443ceb5a4fa547b0943186/Automation/XARegressionTests.\r\n\r\nSome tests which represented duplicate coverage were ignored during this\r\nimport. There is however likely still _some_ level of duplication in the\r\nimported tests, but given how quickly they execute it didn't seem\r\nworthwhile to hunt down alternate coverage areas for every test.\r\n\r\nAdditional changes have been made to improve the ability to work with\r\nMono.Android-Test.csproj (and related projects) after opening\r\nXamarin.Android-Tests.sln in Visual Studio on macOS or Windows.\r\n\r\nThe new .png resources come from https://undraw.co/."},{"Id":"9156330919","Type":"PullRequestEvent","CreatedAt":"2019-02-28T16:55:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2772","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] make classes.zip optional for dexing\" (#2772) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid, we need to dex java libraries independently\r\nfor \"Enhanced Fast Deployment\". This means that in some cases, we\r\ndon't need to dex `classes.zip`.\r\n\r\nSo a few changes were needed:\r\n\r\n* `<D8/>` should not have the `ClassesZip` property marked as\r\n  `[Required]`.\r\n* `<CompileToDalvik/>` should take `ClassesZip` as an input and use it\r\n  if not blank. This is better than using:\r\n  `Path.Combine (ClassesOutputDirectory, \"..\", \"classes.zip\")`"},{"Id":"9155316660","Type":"PullRequestEvent","CreatedAt":"2019-02-28T14:48:29","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2771","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Handle bad `res` data.\" (#2771) at xamarin/xamarin-android","RelatedBody":"Some of the designer tests upstream are producing\r\nerrors such as\r\n\r\n\tThe \"CollectNonEmptyDirectories\" task failed unexpectedly.\r\n\terror MSB4018: System.IO.DirectoryNotFoundException: Could not find `res`\r\n\r\nWe should not be crashing out of the directory does\r\nnot exist. We should just skip it since this task is\r\ncalled `CollectNonEmptyDirectories`, and not existing\r\nmeans its empty."},{"Id":"9155127290","Type":"PullRequestEvent","CreatedAt":"2019-02-28T14:24:01","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2770","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Check for `_._` in the Nuget path.\" (#2770) at xamarin/xamarin-android","RelatedBody":"When we try to resolve the `runtime` assembly we may well\r\nget a `_._` instead of the filename. This usually means\r\nthat the assembly will be provided by the framework. When\r\nthis happens we get the following error\r\n\r\n\t Error: Exception while loading assemblies: Java.Interop.Tools.Diagnostics.XamarinAndroidException: error XA0009: Error while loading assembly: /Users/tamasszadvari/.nuget/packages/system.runtime.loader/4.3.0/lib/MonoAndroid10/_._\r\n\r\nSo we should really be ignoring this particular senario."},{"Id":"9151668890","Type":"PullRequestEvent","CreatedAt":"2019-02-28T03:33:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2758","RelatedDescription":"Merged pull request \"[build] Drop requirement for MXE\" (#2758) at xamarin/xamarin-android","RelatedBody":"MXE is a source-only distribution to build the MinGW Windows cross-compiler\r\non Unix systems, along with a number of libraries and tools. We use it to\r\nbuild both Mono and Xamarin.Android for Windows.\r\n\r\nThe problem with MXE is that its build process is very fragile and also takes\r\na lot of time to complete. Additional issue is that the version of GCC it\r\nbuilds is quite ancient (5.4 as opposed to the current 8.2) and does not support\r\nthe latest C and C++ standards which prevents us from using C++17 features in XA.\r\n\r\nHowever, [Homebrew][0] now has a formula to install the latest MinGW toolchain with\r\nGCC 8.2 which allows us to drop MXE. The downside of using this pre-packaged MinGW\r\n(a very insignificant one) is that it does not come with any extra libraries or\r\nsoftware prebuilt for Windows and our build requires `zlib` which was previously built\r\nas part of MXE. That downside is easily worked around, however - we simply use our\r\nown Homebrew tap which has a formula that installs the Win32/Win64 zlib binary.\r\n\r\nThis commit drops MXE dependency in Xamarin.Android *only* - it does *not* remove this\r\ndependency from Mono. Mono will now provision its own copy of MXE and use it to build.\r\nThis will change at some point when [this PR][1] makes its way into Mono and, subsequently,\r\nto Xamarin.Android.\r\n\r\nAll the libraries we build for Windows that require zlib will link a *static* version\r\nof the library instead of using the dynamic one. This is safer than using the DLL because\r\nwe control what version of zlib is used and we leave no potential for breakage should a\r\n3rd party replace/remove/etc zlib1.dll from the target system.\r\n\r\n[0]: https://brew.sh\r\n[1]: https://github.com/mono/mono/pull/12434"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9159957891","Type":"PullRequestEvent","CreatedAt":"2019-03-01T05:12:10","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5420","RelatedDescription":"Opened pull request \"Uwp restart uitests on crash\" (#5420) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nIf a UI Tests causes the UWP window to crash this will restart it when it tries to run the next test.\r\nCurrently if a tests fails all subsequent tests will just fail because the window is closed\r\n\r\n### Platforms Affected ### \r\n- UWP\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9159736135","Type":"IssuesEvent","CreatedAt":"2019-03-01T03:57:36","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5404","RelatedDescription":"Reopened issue \"XF 3.5 Android Crash in Release\" (#5404) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\nXF 3.4 works great for thousands of users. I can cause a crash every time after simply updating to  XF 3.5 Android when built in Release. How can I submit a private code example?\r\n\r\n### Description\r\nNeed to provide private build for Xamarin eyes only\r\n\r\n### Steps to Reproduce\r\n\r\n1. Upgrade to XF 3.5\r\n2. Build in RELEASE\r\n3. Most screens cause crash with \"activityStartTrigger: not whiteListed\"\r\n\r\n### Expected Behavior\r\nNot crash\r\n### Actual Behavior\r\nCrash - see logs\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: XF 3.4\r\n- IDE:\r\n- Platform Target Frameworks:  \r\n \r\n  - Android:  XF 3.5 with Android 28\r\n \r\n\r\n### Screenshots\r\n\r\n \r\n### Reproduction Link\r\n\r\n Attached Android Crash: \r\n[log.txt](https://github.com/xamarin/Xamarin.Forms/files/2911143/log.txt)\r\n\r\n"},{"Id":"9159583593","Type":"IssuesEvent","CreatedAt":"2019-03-01T03:12:07","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5404","RelatedDescription":"Closed issue \"XF 3.5 Android Crash in Release\" (#5404) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\nXF 3.4 works great for thousands of users. I can cause a crash every time after simply updating to  XF 3.5 Android when built in Release. How can I submit a private code example?\r\n\r\n### Description\r\nNeed to provide private build for Xamarin eyes only\r\n\r\n### Steps to Reproduce\r\n\r\n1. Upgrade to XF 3.5\r\n2. Build in RELEASE\r\n3. Most screens cause crash with \"activityStartTrigger: not whiteListed\"\r\n\r\n### Expected Behavior\r\nNot crash\r\n### Actual Behavior\r\nCrash - see logs\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: XF 3.4\r\n- IDE:\r\n- Platform Target Frameworks:  \r\n \r\n  - Android:  XF 3.5 with Android 28\r\n \r\n\r\n### Screenshots\r\n\r\n \r\n### Reproduction Link\r\n\r\n Attached Android Crash: \r\n[log.txt](https://github.com/xamarin/Xamarin.Forms/files/2911143/log.txt)\r\n\r\n"},{"Id":"9159373795","Type":"PullRequestEvent","CreatedAt":"2019-03-01T02:13:28","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5407","RelatedDescription":"Closed pull request \"Adds test covering case where markup extension throws an exception\" (#5407) at xamarin/Xamarin.Forms","RelatedBody":"When rendering in the previewer, this should be caught and passed to `ExceptionHandler`.\r\n\r\n@alanmcgovern FYI"},{"Id":"9159373781","Type":"IssuesEvent","CreatedAt":"2019-03-01T02:13:27","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5300","RelatedDescription":"Closed issue \"Referencing images which don't exist causes Forms to crash\" (#5300) at xamarin/Xamarin.Forms","RelatedBody":"Forms should be able to gracefully ignore missing images when doing design time rendering. Missing images could be as simple as a typo, or just an incomplete string.\r\n\r\nIn Android the null reference is because the 4 fields populated from the `ResourceManager.Init` call are null when in no-compile-rendering mode. We'd like this scenario to result in a no-op, instead of a crash, for now. We'll file a separate piece of work to make this scenario work as expected.\r\n\r\nFor iOS we already support loading images appropriately as forms uses NSBundle methods to locate the image, and we hook into those and provide the data. Therefore all we want iOS to do is not crash when the image doesn't exist.\r\n\r\nWe should review the rest of the codebase to ensure other places with similar behaviours are updated.\r\n\r\nSample xaml:\r\n```\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n\t\t\t xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n\t\t\t x:Class=\"TestFormsNoCompile2341.Views.ItemDetailPage\" \r\n\t\t\t Title=\"{Binding Title}\"\r\n\t\t\t BackgroundImage=\"tab_aabout.png\">\r\n```\r\n\r\nAndroid trace:\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object\r\nXamarin.Forms.Platform.Android.ResourceManager.GetId (System.Type type, System.String memberName)\r\nXamarin.Forms.Platform.Android.ResourceManager.IdFromTitle (System.String title, System.Type type)\r\nXamarin.Forms.Platform.Android.ResourceManager.GetDrawable (Android.Content.Context context, System.String name)\r\nXamarin.Forms.Platform.Android.PageRenderer.UpdateBackgroundImage (Xamarin.Forms.Page view)\r\nXamarin.Forms.Platform.Android.PageRenderer.OnElementChanged (Xamarin.Forms.Platform.Android.ElementChangedEventArgs`1[TElement] e)\r\nXamarin.Forms.Platform.Android.VisualElementRenderer`1[TElement].SetElement (TElement element)\r\nXamarin.Forms.Platform.Android.VisualElementRenderer`1[TElement].Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement (Xamarin.Forms.VisualElement element)\r\nXamarin.Forms.Platform.Android.Platform.CreateRenderer (Xamarin.Forms.VisualElement element, Android.Content.Context context)\r\nXamarin.Forms.Platform.Android.Platform.CreateRenderer (Xamarin.Forms.VisualElement element)\r\n<unknown method>\r\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)\r\n```\r\n\r\niOS trace:\r\n```\r\n[2019-02-18 15:37:35.2] ERROR: Runtime.MarshalManagedException\r\nSystem.Exception: Image: File 'tab_aabout.png' not found in app bundle\r\n  at Xamarin.Forms.Platform.iOS.PageRenderer.UpdateBackground () [0x00040] in <f74105cd77e44285b8db054857425927>:0 \r\n  at Xamarin.Forms.Platform.iOS.PageRenderer.ViewDidLoad () [0x0007c] in <f74105cd77e44285b8db054857425927>:0 \r\n```\n\n> VS bug [#795897](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/795897), VS bug [#795898](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/795898)"},{"Id":"9158942984","Type":"PullRequestEvent","CreatedAt":"2019-03-01T00:17:14","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5411","RelatedDescription":"Merged pull request \"[X] bubble markup exception to previewer\" (#5411) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n[X] bubble markup exception to previewer\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #5407\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard"},{"Id":"9158840201","Type":"PullRequestEvent","CreatedAt":"2019-02-28T23:52:11","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5419","RelatedDescription":"Opened pull request \"update readme to include vs for mac instructions\" (#5419) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nVS for Mac requires a little bit of coercing to work. This PR updates the readme to help people get started.\r\n\r\n### Issues Resolved ### \r\n- fixes #5409\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9159575633","Type":"IssuesEvent","CreatedAt":"2019-03-01T03:09:47","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5692","RelatedDescription":"Opened issue \"3rd party bindings and CMSampleBuffer usage in trampolines\" (#5692) at xamarin/xamarin-macios","RelatedBody":"## Description\r\n\r\nWe have a report that using `CMSampleBuffer` in delegates on 3rd party bindings throws the following error:\r\n\r\n> error CS1729: 'CMSampleBuffer' does not contain a constructor that takes 2 arguments\r\n\r\nBinding code:\r\n\r\n```csharp\r\n[BaseType (typeof (NSObject))]\r\ninterface Foo {\r\n\t[Export (\"enumerateSampleBuffers:\")]\r\n\tvoid Enumerate (Action<CMSampleBuffer, NSError> handler);\r\n}\r\n```\r\n\r\nThis happens because we are special casing `CMSampleBuffer` in our generator and we are manually calling the `.ctor(IntPtr, bool)`:\r\n\r\nhttps://github.com/xamarin/xamarin-macios/blob/507d37eef68f13aec954121a2d441702bf87864e/src/generator.cs#L1617-L1624\r\n\r\nBut the `.ctor(IntPtr, bool)` of `CMSampleBuffer` is` internal` so it cannot be used by 3rd party bindings this way:\r\n\r\nhttps://github.com/xamarin/xamarin-macios/blob/507d37eef68f13aec954121a2d441702bf87864e/src/CoreMedia/CMSampleBuffer.cs#L67-L74\r\n\r\n## Posible Solutions\r\n\r\n### Solution 1\r\n\r\nMake the generator use `Runtime.GetINativeObject<T> (IntPtr, bool)` but this adds some overhead other than simply using the `.ctor(IntPtr, bool)` and most scenarios where `CMSampleBuffer` is used require speed which leads into the next solution.\r\n\r\n### Solution 2\r\n\r\nTurn the `.ctor(IntPtr, bool)` of `CMSampleBuffer` visibility `public` but this can lead to potential incorrect usage.\r\n\r\n### Solution 3\r\n\r\nMake the generator aware of the 3rd party binding context and special case the the usage of `Runtime.GetINativeObject<T> (IntPtr, bool)` only for 3rd party bindings and keep the current behavior for our bindings.\r\n\r\n## Workaround\r\n\r\nBind the `CMSampleBuffer` as `IntPtr`:\r\n\r\n```csharp\r\n[BaseType (typeof (NSObject))]\r\ninterface Foo {\r\n\t[Export (\"enumerateSampleBuffers:\")]\r\n\tvoid Enumerate (Action<IntPtr, NSError> handler);\r\n}\r\n```\r\n\r\nThen in actual code usage code do:\r\n\r\n```csharp\r\nfoo.Enumerate ((sb, error) => {\r\n\tusing (var sampleBuffer = Runtime.GetINativeObject<CMSampleBuffer> (sb, false)) {\r\n\t\t// Do something...\r\n\t}\r\n});\r\n```"},{"Id":"9159283679","Type":"PullRequestEvent","CreatedAt":"2019-03-01T01:49:12","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5690","RelatedDescription":"Merged pull request \"[apidiff] Fix the comparison with the previous commit\" (#5690) at xamarin/xamarin-macios","RelatedBody":"The removal of the XML files broke the comparison with the previous\ncommit. It did NOT fail the original PR because the targets were\nin the previous commit.\n\nAnd it will fail this PR because the previous commit still does not\nhave the targets - but it _should_ be fine, once merged, for all\nfuture PR.\n\nFixes https://github.com/xamarin/maccore/issues/1452"},{"Id":"9158504323","Type":"IssuesEvent","CreatedAt":"2019-02-28T22:38:57","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5480","RelatedDescription":"Closed issue \"Xamarin.Mac Full needs to set new TFI to allow nuget targetting of Full\" (#5480) at xamarin/xamarin-macios","RelatedBody":"Today there are three [\"target frameworks\"](https://developer.xamarin.com/guides/mac/advanced_topics/target-framework/) that Xamarin.Mac can target. However, you can only target two of them in nuget packages. This causes libraries that want to support Full but need platform specific libraries\\native libraries significant pain.\r\n\r\nAfter the discussion [here](https://github.com/NuGet/NuGet.Client/pull/2572#issuecomment-456964130) and one with @mrward I believe the following are true:\r\n\r\n- Nuget needs a new Target Framework Identifier (TFI) set for Full projects instead of the current one to be able to to handle targettinging\r\n- However, we have many projects in the wild with existing tags.\r\n- A migration will be painful and likely \"not worth it\".\r\n\r\nAnd that the following plan is feasible:\r\n\r\n- When `UseXamMacFullFramework` is true [here](https://github.com/xamarin/xamarin-macios/blob/master/msbuild/Xamarin.Mac.Tasks/Xamarin.Mac.Common.props#L91) we can change the TargetFrameworkIdentifier at build time. \r\n- Then nuget should see the new TFI and use those bits, or fall back as described in the [PR](https://github.com/NuGet/NuGet.Client/pull/2572)\r\n\r\nThis change would add yet _another_ bit of complication to the already non-trivial target framework system, and the chance for regressions and complications is non-trivial. However, it is the only viable path forward to allow nuget targetting.\n\n> VS bug [#778613](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/778613), VS bug [#779016](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/779016)"},{"Id":"9158475512","Type":"PullRequestEvent","CreatedAt":"2019-02-28T22:33:26","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5654","RelatedDescription":"Merged pull request \"[mac][msbuild] Add MigrateToNewXMTFI to convert TFI to new Xamarin.Mac.NET (opt-in)\" (#5654) at xamarin/xamarin-macios","RelatedBody":"\r\n- https://github.com/xamarin/xamarin-macios/issues/5480\r\n- Related: https://github.com/NuGet/NuGet.Client/pull/2572\r\n\r\nTo allow nuget to target XM Full we need to have a unique TFI (TargetFrameworkIdentifier).\r\n\r\nHowever, that's a really scary change to force, so let's opt-in for now. You can set\r\n\r\n```\r\n<MigrateToNewXMTFI>true</MigrateToNewXMTFI>\r\n```\r\nin your project or\r\n\r\n```MigrateToNewXMTFI=true msbuild project.csproj```\r\n\r\nto try it out. \r\n\r\nWe can convert the opt-in to an opt-out with sufficient validation \\ releases."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":61,"FavoriteCount":17,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":30,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":20,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":25,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":111,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":24,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":17,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":36,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":66,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":28,"RawContent":null},{"Id":"1088179823762161664","CreatedAt":"2019-01-23T21:01:02+00:00","UserScreenname":"xamarinhq","Text":"Just released: #VS2019 Preview 2 which includes tons of improvements for mobile devs to make you more productive wh… https://t.co/j4LgiuYkgc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":156,"FavoriteCount":74,"RawContent":null}]}},"RunOn":"2019-03-01T05:30:50.6515467Z","RunDurationInMilliseconds":2293}