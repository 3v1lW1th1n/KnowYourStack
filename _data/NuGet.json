{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11763492601","Type":"PullRequestEvent","CreatedAt":"2020-03-14T07:32:26","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7870","RelatedDescription":"Opened pull request \"Optional configurable thread settings\" (#7870) at NuGet/NuGetGallery","RelatedBody":"Enables to set up thread pool in app service. Cloud service was set up through startup.ps1"},{"Id":"11759335605","Type":"IssuesEvent","CreatedAt":"2020-03-13T17:03:59","Actor":"j82w","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7869","RelatedDescription":"Opened issue \"NuGet.org package statistics not updating for over a week\" (#7869) at NuGet/NuGetGallery","RelatedBody":"### Bug description\r\nSeveral packages have been updated in the last 7 days, and the statistics are showing 0 downloads. The packages have been downloaded several times by multiple users.\r\n\r\n### Impacted packages\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\r\n\r\nhttps://www.nuget.org/packages/Swashbuckle.AspNetCore.Swagger/"},{"Id":"11759092752","Type":"IssuesEvent","CreatedAt":"2020-03-13T16:35:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7868","RelatedDescription":"Opened issue \"Some exceptions thrown in gallery cause 302 redirect instead of 500\" (#7868) at NuGet/NuGetGallery","RelatedBody":"This means that in Application Insights that request is considered `success = true` which messes up analytics. Really, this should be considered a failed request. Because we redirect to shared error page, we lose the context at this high level that an error occurred. You can tease it apart on a case-by-case basis by finding the subsequent URL that the customer hit and see that it was the error page. Also, you can see an exception thrown for the 302 request, but this is not ideal.\r\n\r\nI think we should change the code to just show the HTTP 500 error page inline, without a redirect."},{"Id":"11759006456","Type":"PullRequestEvent","CreatedAt":"2020-03-13T16:26:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7867","RelatedDescription":"Opened pull request \"Add KnownOperation telemetry and add more configuration to DI\" (#7867) at NuGet/NuGetGallery","RelatedBody":"This change has two main purposes:\r\n\r\n1. Add a `KnownOperation` custom dimension so that we can have a metric column with low cardinality that identifies the type of request. Current the `name` (or `operation_Name` in other tables) has extremely high cardinality because some request patterns end up putting the verbatim URL path there.\r\n1. Add more configuration types to the DI container so that closed-source/internal modules can get configuration from DI.\r\n   - Since Gallery does not use `IOptions` or `IConfigurationRoot`, we use the older abstraction in our codebase which is `IConfigurationFactory`. This has been around for a while and is based on `ComponentModel`.\r\n   - Update to new ServerCommon since I moved `StringArrayConverter` there. This allows closed-source implementations to also use `StringArrayConverter` in their own private configuration types.\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/3020"},{"Id":"11751038353","Type":"IssuesEvent","CreatedAt":"2020-03-12T19:57:52","Actor":"donnie-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7866","RelatedDescription":"Opened issue \"Latest version is not present using the NuGet API\" (#7866) at NuGet/NuGetGallery","RelatedBody":"@darmalovan commented on [Thu Mar 12 2020](https://github.com/NuGet/Home/issues/9291)\n\n## Details about Problem\r\n I'm seeing a discrepancy in getting the latest version of a package between the NuGet website and the NuGet API.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Going to the NuGet web site for the `EntityFrameworkCore.Relational` package https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Relational/\r\nthe latest version is `3.1.2`. \r\n\r\n2. Using the API https://api.nuget.org/v3/registration3/microsoft.entityframeworkcore.relational/index.json I am getting `3.1.1` as the latest version.\r\n\r\nI tried also to use the api.nuget.org/v3/registration3-gz-semver2 endpoint without any luck.\r\n\r\nThe search web site says `3.1.2` is the latest version:\r\n![image](https://user-images.githubusercontent.com/5316748/76555697-d50a7a00-64a0-11ea-8c79-01e7b5c367dc.png)\r\n\r\nWould love for any advice here :)\r\n\n\n---\n\n@donnie-msft commented on [Thu Mar 12 2020](https://github.com/NuGet/Home/issues/9291#issuecomment-598385470)\n\nHi! I'm sending this over to the Server team to take a look.\n\n"},{"Id":"11740095758","Type":"PullRequestEvent","CreatedAt":"2020-03-11T18:55:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7865","RelatedDescription":"Merged pull request \"Support KeyVault secrets in functional test configuration\" (#7865) at NuGet/NuGetGallery","RelatedBody":"Move to PackageReference and .NET 4.7.2\r\nProgress on https://github.com/NuGet/Engineering/issues/3060"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11768684134","Type":"IssuesEvent","CreatedAt":"2020-03-15T11:33:31","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9303","RelatedDescription":"Opened issue \"Test: using nuget.exe `msbuildversion` argument is flaky\" (#9303) at NuGet/Home","RelatedBody":"Tests that need multiple versions of Visual Studio installed, in order to test nuget.exe's `-msbuildversion` feature do not work on machines without the right versions of Visual Studio installed. So far, this has been the VSEng-MicroBuildSxS agent pool, however, the queue time of this pool has been increasing, slowing down builds. On the internal MicroBuild group, another team asked if new agents will be added and the response was that it's an old/uncommon pool, and they do not have plans to add more agents, asking that team to switch to the VS2017 or VS2019 pool instead.\r\n\r\nSo, in the long term we have to find a way to test nuget.exe's `-msbuildversion` feature without having multiple VS installations.\r\n\r\nThe tests affected are:\r\n`NuGet.CommandLine.Test.NuGetRestoreCommandTest.RestoreCommand_FromSolutionFileWithMsbuild12`\r\n`NuGet.CommandLine.Test.NuGetPackCommandTest.PackCommand_ReferencedProjectWithJsonFileWithMsbuild14`\r\n`NuGet.CommandLine.Test.NuGetPackCommandTest.PackCommand_ReferencedProjectWithNuspecFileWithMsbuild14`\r\n`NuGet.CommandLine.Test.NuGetPackCommandTest.PackCommand_WithMsBuild14`\r\n"},{"Id":"11767059625","Type":"IssuesEvent","CreatedAt":"2020-03-15T02:00:23","Actor":"moh-hassan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9302","RelatedDescription":"Opened issue \"Visual studio 2019 can not load local pdb file extracted from snupkg\" (#9302) at NuGet/Home","RelatedBody":"**Environment:**\r\nVisual studio 2019 v16.4.2\r\nconsole project in net461\r\nusing nuget from CI appveyor server loaded locally to my machine.\r\n\r\nI try to debug a console project using snupkg package locally in my machine for debugging locally.\r\n\r\nI downloaded both nuget package and snupkg package from CI Appveyor server to my machine from the artifact for test. (it's not published yet to nuget gallery)\r\n\r\nI unzipped the snupkg file (it's zip file) to c:\\folder1.\r\n\r\nI add the path in debug options of VS:\r\n\r\n`options->debug->symbols-> c:\\folder1\\lib\\net461\\mypakag.pdb`\r\n\r\nVisual studio 2019 v16.4.2 can not recognize the symbol pdb file and fire a message:\r\n\r\n>a matching symbol file was not found in this folder\r\n\r\nWhy Visual studio can not load the pdb file of the snupkg package? What I missed to do?\r\n\r\n**Note**: I used the same procedures before with the legacy pdb ` .symbol.nupkg` and it was working.\r\n"},{"Id":"11762145361","Type":"IssuesEvent","CreatedAt":"2020-03-14T00:06:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9301","RelatedDescription":"Opened issue \"Remove LSL related code\" (#9301) at NuGet/Home","RelatedBody":"Specifically https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.PackageManagement.VisualStudio/Services/DeferredProjectWorkspaceService.cs was deprecated starting with VS 2019. "},{"Id":"11761349137","Type":"IssuesEvent","CreatedAt":"2020-03-13T21:39:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9300","RelatedDescription":"Opened issue \"Static Graph restore won't warn for invalid projects\" (#9300) at NuGet/Home","RelatedBody":"Have a sln with 2 projects, one restoreable, the other without the NuGet.targets. \r\n\r\nRegular restore will warn https://github.com/NuGet/NuGet.Client/blob/b6ba5908951c172ed7df75e3074a7af409f743d7/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L282-L292, while static graph restore quietly skips the project. \r\n\r\ncc @jeffkl \r\n\r\nWe need to understand what we want the experience to be. "},{"Id":"11760721278","Type":"IssuesEvent","CreatedAt":"2020-03-13T20:12:21","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9299","RelatedDescription":"Opened issue \"Test: NuGet.Commands.Test.PushCommandTests.PushCommand_AbsolutePathSourceAsync is flaky\" (#9299) at NuGet/Home","RelatedBody":"Since moving to the AzDO hosted linux machines, many builds are timing out/hanging on Linux. Since enabling verbose test logging, NuGet.Commands.Test.PushCommandTests.PushCommand_AbsolutePathSourceAsync has appeared the highest number of times (almost, if not every timed out build)"},{"Id":"11759670483","Type":"IssuesEvent","CreatedAt":"2020-03-13T17:45:10","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5763","RelatedDescription":"Closed issue \"-source argument is being ignored when installing a local nuget package into a .net core project.\" (#5763) at NuGet/Home","RelatedBody":"Remove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (Package Manager Console):\r\n\r\nNuGet version (4.3.0.4339):\r\n\r\ndotnet.exe --version (if appropriate): .net core 1.1\r\n\r\nVS version (if appropriate): 15.3.0\r\n\r\nOS version (win10 v1703 (15063.540)):\r\n\r\nWorked before? If so, with which NuGet version: The version before the visual studio update that brought .net core 2.0.\r\n\r\n## Detailed repro steps so we can see the same problem\r\nThese steps assume that there is a .net core 1.1 project currently loaded in Visual studio 2017 with the update that brought .net core 2.0.\r\n\r\n1. Create a nuget package from a project (in my case a .net core class library targeting core 1.1 configured to output a nuget package).\r\n\r\n2. Do NOT upload this to any server, instead copy it to a local folder from which you will manually install this in a .net core project.\r\n\r\n3. In the project that gets the package installed use this command: \"Install-Package <the package id> -Source <the path to where to package is located>\". It fails with the message that it can't locate the source.\r\n\r\n4. Add that path to the NuGet package manager settings and install the package again using the same command.\r\n\r\n5. The installation will succeed and that path can be safely removed from the settings.\r\n\r\n6. Increase the version number of the package and build it again. But without adding the path to the settings.\r\n\r\n7. If you try to install the package now it will fail with the message that it can't find the path.\r\n\r\n8. Add that path to the settings and it will be able to install the package again until you remove it from the settings and increase the version number.\r\n\r\n## Suggested things\r\n\r\nIt looks like it is ignoring the -Source parameter.\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nRestoring packages for\r\n<path to csproj file>...\r\n  GET https://api.nuget.org/v3-flatcontainer/nugetpackage/index.json\r\n  GET https://nuget.renvl.nl/api/odata/FindPackagesById()?id='NuGetPackage'\r\n  OK https://nuget.renvl.nl/api/odata/FindPackagesById()?id='NuGetPackage' 70ms\r\n  NotFound https://api.nuget.org/v3-flatcontainer/nugetpackage/index.json 471ms\r\nInstall-Package : Unable to find package NuGetPackage. No packages exist with this id in source(s): C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder, Microsoft Visual Studio Offline Packages, nuget.org, RvlLibrary\r\nAt line:1 char:1\r\n+ Install-Package NuGetPackage -Source ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\nInstall-Package : Package restore failed. Rolling back package changes for 'Project'.\r\nAt line:1 char:1\r\n+ Install-Package NuGetPackage -Source ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n "},{"Id":"11758133401","Type":"IssuesEvent","CreatedAt":"2020-03-13T14:53:53","Actor":"tannergooding","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9298","RelatedDescription":"Opened issue \"/t:pack target doesn't include or have an option to include reference assemblies\" (#9298) at NuGet/Home","RelatedBody":"## Issue\r\n\r\nThe C# compiler has support for a special `-refout` switch and a `ProduceReferenceAssembly` project property which causes it to generate a reference assembly alongside the normal assembly output.\r\nNuGet likewise supports a `ref` folder where these types of reference assemblies can go and it will consume them if available. \r\nHowever, NuGet does not appear to currently have a mechanism to automatically include this output in the generated package.\r\n\r\n## Repro\r\n\r\n1. Create a new csproj\r\n2. Under the `TargetFramework` property add `<ProduceReferenceAssembly>true</ProduceReferenceAssembly>`\r\n3. Run `dotnet pack`\r\n4. Observe that the following files exist:\r\n  * `bin\\Debug\\<tfm>\\ClassLibrary1.dll`\r\n  * `bin\\Debug\\<tfm>\\ref\\ClassLibrary1.dll`\r\n  * `bin\\Debug\\ClassLibrary1.1.0.0.nupkg`\r\n5. Extract the nupkg to a local folder\r\n6. Observe that `<nupkg>\\lib\\<tfm>\\ClassLibrary1.dll` exists and corresponds to `bin\\Debug\\<tfm>\\ClassLibrary1.dll`\r\n7. Observe that `<nupkg>\\ref\\<tfm>\\ClassLibrary1.dll` does not exist\r\n\r\n## Expected Behavior\r\n\r\nIt is expected that the `ref` files do exist and correspond to the files produced by the compiler under `bin\\Debug\\<tfm>\\ref\\ClassLibrary1.dll`"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-03-16T05:30:41.5158521Z","RunDurationInMilliseconds":1655}