{"Data":{"Blog":{"FeedItems":[{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null},{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null},{"Title":"What’s New In the Xamarin Android Designer","PublishedOn":"2018-06-25T20:10:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Backed by your feedback, our team has been able to improve the Xamarin Android Designer significantly since it&#8217;s initial release a few years back. Now, we have a ton of new and exciting work...","Href":"https://blog.xamarin.com/future-xamarin-android-designer/","RawContent":null},{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7965796363","Type":"PullRequestEvent","CreatedAt":"2018-07-14T13:37:58","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1932","RelatedDescription":"Merged pull request \"[build] set VSIX compression level to Normal\" (#1932) at xamarin/xamarin-android","RelatedBody":"While generating a VSIX, I noticed this in the build log:\r\n\r\n    CreateVsixContainer:\r\n      Creating VSIX Container...\r\n      Creating the package with the following compression level. \"NotCompressed\".\r\n\r\nChanging the `ZipPackageCompressionLevel` property to `Normal`, seems\r\nto change the VSIX so it is properly compressed.\r\n\r\nThe file size goes from 584991368 bytes to 172998318 bytes.\r\n\r\nIt's worth doing this, just to make the download smaller in the OSS\r\nrepo. I need to do some further research and make sure the VSIX we are\r\nshipping commercially is compressed."},{"Id":"7965791662","Type":"PullRequestEvent","CreatedAt":"2018-07-14T13:34:18","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1955","RelatedDescription":"Merged pull request \"Add Linux Mint to the fold\" (#1955) at xamarin/xamarin-android","RelatedBody":"Add detection and preparation script for the Linux Mint distribution. Since Mint\r\nis based on Ubuntu, this patch reorganizes things a little bit to reuse as much\r\nof Ubuntu specific code as possible."},{"Id":"7963959563","Type":"PullRequestEvent","CreatedAt":"2018-07-13T19:31:32","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1963","RelatedDescription":"Opened pull request \"[Mono.Android-Tests] Ignore DotNetJavaNetworkIfaces test\" (#1963) at xamarin/xamarin-android","RelatedBody":"This test is failing rather consistently on many physical devices. See https://github.com/xamarin/xamarin-android/issues/1534 for more info."},{"Id":"7963321601","Type":"IssuesEvent","CreatedAt":"2018-07-13T17:09:05","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1962","RelatedDescription":"Opened issue \"UpdateAndroidResgen target is skipped on High Sierra after touching a resource file\" (#1962) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build project once.\r\n2. Touch the layout file associated with the main activity of the project.\r\n3. Build project again.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n_UpdateAndroidResgen runs again after a minor change to a resource file. I'm seeing this in d15-8 on Windows 10 and macOS sierra.\r\n\r\nSierra - _UpdateAndroidResgen runs (passed):\r\nhttp://xqa.blob.core.windows.net/gist/sierra-build-out-c16e2eb482834b98993ea94a141c8ed5.txt\r\n\r\n### Actual Behavior\r\n_UpdateAndroidResgen does not run after a minor change to a resource file. I'm only seeing this in High Sierra macOS environments, and it does seem to be a regression in d15-8.\r\n\r\nHigh Sierra - _UpdateAndroidResgen is skipped (failed):\r\nhttp://xqa.blob.core.windows.net/gist/log-53f53861e0864f38a84e2bb99262e833.txt\r\n\r\n### Version Information\r\nhttps://gist.github.com/pjcollins/700067943fa1b5778c2559aa9d208535\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7962918095","Type":"PullRequestEvent","CreatedAt":"2018-07-13T15:43:53","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1961","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] we should set TargetFrameworkMonikerAssemblyAttributesPath\" (#1961) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/Microsoft/msbuild/blob/b3f9eeab651c92bade6e4f64d11b59aa39e149cb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3305\r\nFixes: https://github.com/xamarin/xamarin-android/issues/1960\r\n\r\nWhile reviewing build logs, I have noticed something very odd if you\r\nare building for `TargetFrameworkVersion=v6.0` and it gets switched to\r\na different one such as `TargetFrameworkVersion=v9.0`.\r\n\r\nHere is the `GenerateTargetFrameworkMonikerAttribute` target from\r\n`Microsoft.Common.CurrentVersion.targets`:\r\n\r\n    WriteLinesToFile\r\n        Parameters\r\n            File = C:\\Users\\myuser\\AppData\\Local\\Temp\\MonoAndroid,Version=v6.0.AssemblyAttributes.cs\r\n            Lines\r\n                // <autogenerated />\r\n                using System;\r\n                using System.Reflection;\r\n                [assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\", FrameworkDisplayName = \"Xamarin.Android v9.0 Support\")]\r\n            Overwrite = True\r\n\r\nThis was *very* odd, since it was writing a file named\r\n`MonoAndroid,Version=v6.0.AssemblyAttributes.cs` but then writing\r\n`[assembly: TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\"]` into\r\nit!\r\n\r\nIt appears we are seeing MSBuild's implementation of how\r\n`[assembly: TargetFrameworkAttribute]` is added to a compiled assembly.\r\nIt writes to a temp file using the value from\r\n`$(TargetFrameworkMonikerAssemblyAttributesPath)`. We are not setting\r\nthis property in `Xamarin.Android.Common.targets` after modifying the\r\nvalue of `$(TargetFrameworkVersion)`.\r\n\r\nWhat could this break?\r\n\r\nConsider building multiple Xamarin.Android projects at the same time\r\nwith different `TargetFrameworkVersion` settings. The builds could\r\n\"step on each other\" and write an inappropriate value into the temp\r\nfile!\r\n\r\nIn fact, this did actually occur, see an example from kzu here:\r\nhttps://xamarinhq.slack.com/archives/C03CEGRUW/p1521475676000161\r\n\r\nI added some additional code in `Xamarin.Android.Common.targets` to\r\nset the `$(TargetFrameworkMonikerAssemblyAttributesPath)`\r\nappropriately, and added a test to check for the problem.\r\n\r\nI used the exact code from MSBuild, but we can do something else if\r\nthere is a better option:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/b3f9eeab651c92bade6e4f64d11b59aa39e149cb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3305"},{"Id":"7962900800","Type":"IssuesEvent","CreatedAt":"2018-07-13T15:40:35","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1960","RelatedDescription":"Opened issue \"Incorrect $(TargetFrameworkMonikerAssemblyAttributesPath) behavior for MSBuild\" (#1960) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nWhile reviewing build logs, I have noticed something very odd if you\r\nare building for `TargetFrameworkVersion=v6.0` and it gets switched to\r\na different one such as `TargetFrameworkVersion=v9.0`.\r\n\r\nHere is the `GenerateTargetFrameworkMonikerAttribute` target from\r\n`Microsoft.Common.CurrentVersion.targets`:\r\n\r\n    WriteLinesToFile\r\n        Parameters\r\n            File = C:\\Users\\myuser\\AppData\\Local\\Temp\\MonoAndroid,Version=v6.0.AssemblyAttributes.cs\r\n            Lines\r\n                // <autogenerated />\r\n                using System;\r\n                using System.Reflection;\r\n                [assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\", FrameworkDisplayName = \"Xamarin.Android v9.0 Support\")]\r\n            Overwrite = True\r\n\r\nThis was *very* odd, since it was writing a file named\r\n`MonoAndroid,Version=v6.0.AssemblyAttributes.cs` but then writing\r\n`[assembly: TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\"]` into\r\nit!\r\n\r\nIt appears we are seeing MSBuild's implementation of how\r\n`[assembly: TargetFrameworkAttribute]` is added to a compiled assembly.\r\nIt writes to a temp file using the value from\r\n`$(TargetFrameworkMonikerAssemblyAttributesPath)`. We are not setting\r\nthis property in `Xamarin.Android.Common.targets` after modifying the\r\nvalue of `$(TargetFrameworkVersion)`.\r\n\r\n### Expected Behavior\r\n\r\nWe shouldn't be writing incorrect `TargetFrameworkVersion` values into `$(Temp)\\MonoAndroid,Version=*.AssemblyAttributes.cs` files.\r\n\r\n### Actual Behavior\r\n\r\nWe are writing incorrect `TargetFrameworkVersion` values into `$(Temp)\\MonoAndroid,Version=*.AssemblyAttributes.cs` files.\r\n\r\n### Version Information\r\n\r\nxamarin-android/master"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7966836077","Type":"IssuesEvent","CreatedAt":"2018-07-15T05:26:17","Actor":"mzhukovs","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3310","RelatedDescription":"Opened issue \"iOS Button Released event not fired if Release occurs outside of Button's Layout\" (#3310) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nIf you attach a Release event to a button in Xamarin Forms you'll notice that it won't get fired when running on iOS if you press the button, maintain your press and move your finger off of the button and then release.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  In any XF project, add a button to your XAML with x:Name=\"Btn\"\r\n2. In code-behind, add:\r\nBtn.Pressed += (sender, e) => { Btn.BackgroundColor = Color.LightSeaGreen; };\r\nBtn.Released+= (sender, e) => { Btn.BackgroundColor = Color.Orange; };\r\n3. Run on iOS simulator/device and press the button, maintain your press and move your finger off of the button and then release\r\n\r\n### Expected Behavior\r\nReleased event would fire and change the button background color to Orange\r\n\r\n### Actual Behavior\r\nReleased event does NOT fire and button background color remains LightSeaGreen that was set by the Pressed event.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: latest\r\n- Last known good version: n/a\r\n- IDE: VS2017 Enterprise latest\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS: 11.4\r\n- Nuget Packages: irrelevant\r\n- Affected Devices: all\r\n"},{"Id":"7966668179","Type":"IssuesEvent","CreatedAt":"2018-07-15T02:15:38","Actor":"kpespisa","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3226","RelatedDescription":"Closed issue \"Exception has been thrown by the target of an invocation when building with Xaml compilation enabled and setting Margin property on FlexLayout\" (#3226) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nException has been thrown by the target of an invocation when building with XamlC compilation enabled and setting Margin property on FlexLayout\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin Forms project\r\n2. Create a content page or view using XAML\r\n3. Include a FlexLayout \r\n4. Set the Margin Property of that FlexLayout\r\n5. Enable Xaml Compilation [assembly: XamlCompilation(XamlCompilationOptions.Compile)]\r\n\r\n### Expected Behavior\r\nMargin values are respected. \r\n\r\n### Actual Behavior\r\nError mentioned above \r\n\r\n### Basic Information\r\nIn the Visual Studio Xaml Preview the margin works fine. This also works fine when building without Xaml compilation.\r\n\r\n- Version with issue:\r\n- Last known good version: Unknown\r\n- IDE: Visual Studio Mac\r\n- Platform Target Frameworks: Xamarin.Forms 3.0 and 3.1\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please u\r\n[FlexLayoutDemos.zip](https://github.com/xamarin/Xamarin.Forms/files/2168281/FlexLayoutDemos.zip)\r\n\r\npload or provide a link to a reproduction case -->\r\n"},{"Id":"7966104522","Type":"IssuesEvent","CreatedAt":"2018-07-14T17:34:01","Actor":"VladislavAntonyuk","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3309","RelatedDescription":"Opened issue \"NotImplementedException on WPF\" (#3309) at xamarin/Xamarin.Forms","RelatedBody":"When executing Clear and Remove methods on ObservableCollection the exception is thrown: 'System.NotImplementedException' in Xamarin.Forms.Core.dll.\r\nBut if I cover it with try catch the result of the operation is correct.\r\n\r\nTested on\r\nXamarin latest 3.1 version\r\nPlatform WPF"},{"Id":"7965934126","Type":"IssuesEvent","CreatedAt":"2018-07-14T15:23:52","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3305","RelatedDescription":"Closed issue \"PushModalAsync ignores NavigationPage on UWP\" (#3305) at xamarin/Xamarin.Forms","RelatedBody":"On UWP, when a modal page is invoked like this:\r\n\r\n``` c#\r\nsourcePage.Navigation.PushModalAsync(new NavigationPage(modalRoot));\r\n```\r\n\r\nThe resulting page does not use the navigation page. There is no title and the toolbar is not shown.\r\n\r\nXamarin.Forms 3.1.0.637273"},{"Id":"7965897868","Type":"IssuesEvent","CreatedAt":"2018-07-14T14:56:40","Actor":"breyed","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3308","RelatedDescription":"Opened issue \"Button does not recalculate width on WPF\" (#3308) at xamarin/Xamarin.Forms","RelatedBody":"On WPF, after a Button has been displayed, if you change its Text, its width doesn't change. This can cause the new text to be clipped.\r\n\r\nXamarin.Forms 3.1.0.637273"},{"Id":"7965856173","Type":"IssuesEvent","CreatedAt":"2018-07-14T14:24:46","Actor":"breyed","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3307","RelatedDescription":"Opened issue \"Scroll bar overlaps content in WPF\" (#3307) at xamarin/Xamarin.Forms","RelatedBody":"On WPF, a ScrollView always displays a vertical scroll bar if the content exceeds the ScrollView's height, regardless of `VerticalScrollBarVisibility`. The scroll bar overlaps the ScrollView's content. This overlap would be acceptable if the scroll bar were visible only temporarily, but it's permanent, which means the user never sees the content underneath.\r\n\r\nXamarin.Forms 3.1.0.637273"},{"Id":"7965829299","Type":"IssuesEvent","CreatedAt":"2018-07-14T14:03:34","Actor":"breyed","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3306","RelatedDescription":"Opened issue \"TimePicker with short time pattern shows verbose time\" (#3306) at xamarin/Xamarin.Forms","RelatedBody":"On WPF, if you set `TimePicker.Format` to \"t\" ([short time](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#ShortTime)), and click in the TimePicker, text like `08:37:20.0544050` appears. Instead, the TimePicker should display a time like the output of `DateTime.Now.ToString(\"t\")`, e.g. `8:47 AM`.\r\n\r\nXamarin.Forms 3.1.0.637273"},{"Id":"7965743572","Type":"IssuesEvent","CreatedAt":"2018-07-14T12:55:22","Actor":"breyed","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3305","RelatedDescription":"Opened issue \"PushModalAsync ignores NavigationPage on UWP\" (#3305) at xamarin/Xamarin.Forms","RelatedBody":"On UWP, when a modal page is invoked like this:\r\n\r\n``` c#\r\nsourcePage.Navigation.PushModalAsync(new NavigationPage(modalRoot));\r\n```\r\n\r\nThe resulting page does not use the navigation page. There is no title and the toolbar is not shown.\r\n\r\nXamarin.Forms 3.1.0.637273"},{"Id":"7965662596","Type":"IssuesEvent","CreatedAt":"2018-07-14T11:46:43","Actor":"anirudhagupta","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3304","RelatedDescription":"Closed issue \"My CPU sing me a song when when I worked on Xamarin.forms project.\" (#3304) at xamarin/Xamarin.Forms","RelatedBody":""},{"Id":"7965643213","Type":"IssuesEvent","CreatedAt":"2018-07-14T11:28:43","Actor":"anirudhagupta","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3304","RelatedDescription":"Opened issue \"My CPU sing me a song when when I worked on Xamarin.forms project.\" (#3304) at xamarin/Xamarin.Forms","RelatedBody":"In my last night dream, I was working at Microsoft HQ, I was next cabin to Satya Nadella sir. This is for few days Like Google make new employee nooglers I see something there for me.\r\n\r\nAs we moving to AI, ML, Intel, and Microsoft sign a deal that Microsoft will use a single processor in the cloud, This is will save energy and make the world greener, For example, If you have a high-end processor and you are using Notepad, you may waste the power.\r\n\r\nSo I got a machine to work. I was so happy that my machine is processor-less (Processor is in Azure). I work happily and go home. Next day I come and start working on Xamarin Project.\r\n\r\nWe were having a security that if someone uses the too much processing and computing, computer play a song, like (TADA in XP), (Kalimba in Windows 7). We have a bunch of songs, AI, ML does found the pattern and play the song.\r\n\r\nIf you have used too much processor already and still consuming the next song will be from Skrillex's album.\r\n\r\nI worked and the My computer was playing the song because I compiling my project every time (since I can't use edit and continue, I need to compile again for make changes).\r\n\r\nSuddenly Satya Nadealla sir yell at me, \"Hey Anirudha, What's going on, Look like you are consuming too much processing\".\r\n\r\nI told him \"Sir, I am using Xamarin to make an app in C#\".\r\nSatya Nadella says, \"OK, But why your PC was so silent yesterday\".\r\nI told him \"I was using Flutter, All my code was done Hot reload, I didn't need to re-compile my code again for reflecting changes in flutter\".\r\nSatya Nadella sir say \"Cool\".\r\n\r\nThey meet with everyone working on Xamarin. I can see people's face & hear the voice. I hear people saying \"This is going to be a major drawback with our whole mobile ecosystem, Everyone is using Phone in the pocket and not the heavy desktop so we need to take care of mobile thing first.\".\r\n\r\nThe 1st person says \"Let's focus on the problem and find solutions\".\r\n 2nd person say \"I have a list of the problem which should be a big trouble when someone uses Xamarin\", \r\n\r\nS N \"Can you tell us the issues from your report\".\r\n2nd Person, \"Yes, Sure, \"\r\n\r\n1. Using Xamarin consume a lot of CPU. Compare to Flutter, a lot more.\r\n2. Hot reload is really missing in xamarin.forms (every post on internet say (even xamarin university) that if you want data entry app use Xamarin.forms otherwise use xamarin.android Hot reload is first missing feature here. The immediate window doesn't play well, everything is going very well troublesome sometimes. developers took days for fix things that is easily fixed in time in other platforms.\r\n\r\nS N \"How we are going to solve these issues ?\"\r\n\r\n2nd person \"If hot reload is not going to be implemented soon, we will be left in the race of cross-platform\". React native developer work without Android SDK or (Mac device to compile) and able to make a wonderful app. Flutter developer makes an app with a great performance and look, We should do something with Xamarin on Hot reload. \r\nS N \"Ok, Put Hot reload in Backlog, Leave everything, this should be our first priority, Anyone has any more idea and issues\".\r\n\r\nEveryone has issues and ideas that I read  on xamarin.forums, One guys complain that some post  in xamarin.forms forums never get a single response when they goes out of scope. I was later invited to the same meet.\r\n\r\nI was astonished when I see the screen, They point my Xamarin.forms post that I made in may 2018, it's have no response. I think in my mind, \"Everyone read everything\".\r\n\r\nSN  \"Ok, This issues is noted , What else we are going to do to make xamarin better.\"  \r\nI answer \"everything in xamarin is best , it's just not smooth, Like Flutter and React native, the developer doesn't get the speed.  Xamarin should do something to make the process more easier.\"\r\n\r\nAt the end of meeting I wake up in morning.  It was a good experience to meet people in my dream (no kidding), One thing that amazes me the most is if my dream come true, you all guys are going to have a computing power coming from Azure, and it's have security to alert the developer by playing music (machine using too much computing power)"},{"Id":"7965323423","Type":"IssuesEvent","CreatedAt":"2018-07-14T06:37:15","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3303","RelatedDescription":"Closed issue \"XF Android Button Rendering On Press is Malfunctioning\" (#3303) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nCreating a basic, customized pill button in Xamarin Forms where I supply a fade to color animation on the button's Pressed event results in a strange, mini version of the button appearing in the upper left corner of its layout on Android as well as its fill being darker than intended (see screenshots below). I tried to remedy by supplying a CustomRenderer that sets StateListAnimator to null and it made no difference. Also out of random desperation tried to enable the experimental fast renderers and that too of course did not help.\r\n\r\nPlease advise on a quick fix, or if this is indeed a bug that I must wait to get addressed. Thank you.\r\n\r\n### Steps to Reproduce\r\n\r\nMy setup aside, here's the min steps to see this issue in action:\r\n1.  Create new Xamarin Forms project targeting Android\r\n2.  Add the following XAML to the main page:\r\n```\r\n    <ContentPage.Resources>\r\n        <ResourceDictionary>\r\n            <Style\r\n                x:Key=\"PillButtonStyle\"\r\n                TargetType=\"{x:Type Button}\">\r\n                <Setter\r\n                    Property=\"BackgroundColor\"\r\n                    Value=\"Transparent\" />\r\n                <Setter\r\n                    Property=\"TextColor\"\r\n                    Value=\"LimeGreen\" />\r\n                <Setter\r\n                    Property=\"BorderColor\"\r\n                    Value=\"LimeGreen\" />\r\n                <Setter\r\n                    Property=\"BorderWidth\"\r\n                    Value=\"2\" />\r\n                <Setter\r\n                    Property=\"CornerRadius\"\r\n                    Value=\"30\" />\r\n            </Style>\r\n        </ResourceDictionary>\r\n    </ContentPage.Resources>\r\n    <StackLayout\r\n        HorizontalOptions=\"CenterAndExpand\"\r\n        VerticalOptions=\"CenterAndExpand\">\r\n        <Button\r\n            x:Name=\"btn\"\r\n            Style=\"{x:StaticResource PillButtonStyle}\"\r\n            Text=\"Test\" />\r\n    </StackLayout>\r\n```\r\n3. Add this to the code-behind:\r\n`btn.Pressed += (sender, e) => { btn.BackgroundColor = Color.LightSeaGreen; };`\r\n\r\n4. Run on device/emulator, and press down on the button for a couple of seconds to see that the mini button phenomenon occurs in the upper left of its layout. While still pressing, move your finger (or cursor in emulator :) ) off the button, it will show the proper visual state.\r\n\r\n### Expected Behavior\r\n\r\nNo weird mini button fading in and out on press. And no \"mask\" distorting the fill color from what was set in the code.\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.637273\r\n- Last known good version: n/a\r\n- IDE: VS2017 Enterprise 15.7.5\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n\r\n- Android Support Library Version: v27.0.2.1\r\n- Nuget Packages: Irrelevant\r\n- Affected Devices: All Real and Emulated\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/13161978/42721336-ad74a484-876b-11e8-9b72-c152c9de1384.png)\r\n\r\n"},{"Id":"7965292117","Type":"IssuesEvent","CreatedAt":"2018-07-14T06:07:44","Actor":"mzhukovs","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3303","RelatedDescription":"Opened issue \"XF Android Button Rendering On Press is Malfunctioning\" (#3303) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nCreating a basic, customized pill button in Xamarin Forms where I supply a fade to color animation on the button's Pressed event results in a strange, mini version of the button appearing in the upper left corner of its layout on Android as well as its fill being darker than intended (see screenshots below). I tried to remedy by supplying a CustomRenderer that sets StateListAnimator to null and it made no difference. Also out of random desperation tried to enable the experimental fast renderers and that too of course did not help.\r\n\r\nPlease advise on a quick fix, or if this is indeed a bug that I must wait to get addressed. Thank you.\r\n\r\n### Steps to Reproduce\r\n\r\nMy setup aside, here's the min steps to see this issue in action:\r\n1.  Create new Xamarin Forms project targeting Android\r\n2.  Add the following XAML to the main page:\r\n```\r\n    <ContentPage.Resources>\r\n        <ResourceDictionary>\r\n            <Style\r\n                x:Key=\"PillButtonStyle\"\r\n                TargetType=\"{x:Type Button}\">\r\n                <Setter\r\n                    Property=\"BackgroundColor\"\r\n                    Value=\"Transparent\" />\r\n                <Setter\r\n                    Property=\"TextColor\"\r\n                    Value=\"LimeGreen\" />\r\n                <Setter\r\n                    Property=\"BorderColor\"\r\n                    Value=\"LimeGreen\" />\r\n                <Setter\r\n                    Property=\"BorderWidth\"\r\n                    Value=\"2\" />\r\n                <Setter\r\n                    Property=\"CornerRadius\"\r\n                    Value=\"30\" />\r\n            </Style>\r\n        </ResourceDictionary>\r\n    </ContentPage.Resources>\r\n    <StackLayout\r\n        HorizontalOptions=\"CenterAndExpand\"\r\n        VerticalOptions=\"CenterAndExpand\">\r\n        <Button\r\n            x:Name=\"btn\"\r\n            Style=\"{x:StaticResource PillButtonStyle}\"\r\n            Text=\"Test\" />\r\n    </StackLayout>\r\n```\r\n3. Add this to the code-behind:\r\n`btn.Pressed += (sender, e) => { btn.BackgroundColor = Color.LightSeaGreen; };`\r\n\r\n4. Run on device/emulator, and press down on the button for a couple of seconds to see that the mini button phenomenon occurs in the upper left of its layout. While still pressing, move your finger (or cursor in emulator :) ) off the button, it will show the proper visual state.\r\n\r\n### Expected Behavior\r\n\r\nNo weird mini button fading in and out on press. And no \"mask\" distorting the fill color from what was set in the code.\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.637273\r\n- Last known good version: n/a\r\n- IDE: VS2017 Enterprise 15.7.5\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n\r\n- Android Support Library Version: v27.0.2.1\r\n- Nuget Packages: Irrelevant\r\n- Affected Devices: All Real and Emulated\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/13161978/42721336-ad74a484-876b-11e8-9b72-c152c9de1384.png)\r\n\r\n"},{"Id":"7965261102","Type":"IssuesEvent","CreatedAt":"2018-07-14T05:38:34","Actor":"suriyakalidoss","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3302","RelatedDescription":"Opened issue \"Ambiguous exception occurs while accessing the derived class property \" (#3302) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description\r\n    Unable to access the derived class new instance property(MyProperty1) while using the same property name in both base class and derived class.Please refer the below code snippet\r\n  public class BaseClass\r\n    {\r\n        List<string> myMessage = new List<string>();\r\n        public List<**string**> **MyProperty1**\r\n        {\r\n            get\r\n            {\r\n                return myMessage;\r\n            }\r\n            set\r\n            {\r\n                myMessage = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class DerivedClass : BaseClass\r\n    {\r\n        List<double> myMessage = new List<double>();\r\n//Here property is created using same name with newly created instance with list as double but unable to access\r\n        public new List<double> MyProperty1\r\n        {\r\n            get\r\n            {\r\n                return myMessage;\r\n            }\r\n            set\r\n            {\r\n                myMessage = value;\r\n            }\r\n        }\r\n        \r\n    }\r\n class TestClass\r\n    {\r\n        static void Main()\r\n        {\r\n               \r\n\r\n                Type myType = typeof(DerivedClass);\r\n                PropertyInfo myStringProperties1 = myType.GetProperty(\"MyProperty1\");\r\n//Unable to access the derived class property ambiguios exception occurs\r\n\r\n          \r\n        }\r\n    }\r\n### Steps to Reproduce\r\n\r\n1. Run the attached sample \r\n2. Access the derived class property\r\n3. Ambiguios exception occurs\r\n\r\n### Expected Behavior\r\nAmbiguos exception should not occurs\r\n### Actual Behavior\r\nAmbiguos exception occurs while acessing  derived class same name newly created instance property\r\n### Basic Information\r\n Issue occurs in simple sample\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/31415578/42721271-a41dc2aa-8755-11e8-892e-11a302160a01.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\n[Sample.zip](https://github.com/xamarin/Xamarin.Forms/files/2194676/Sample.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7965098263","Type":"PullRequestEvent","CreatedAt":"2018-07-14T03:01:27","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4444","RelatedDescription":"Opened pull request \"[PDFkit] Fix kPDFDestinationUnspecifiedValue availability\" (#4444) at xamarin/xamarin-macios","RelatedBody":"This used to be a calculated macro and got promoted to a field\r\nin macOS 10.13. This will fix intro in older macOS versions."},{"Id":"7965052451","Type":"PullRequestEvent","CreatedAt":"2018-07-14T02:21:17","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4423","RelatedDescription":"Merged pull request \"[PassKit] Added support for Xcode 10 up to beta 3.\" (#4423) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7965050907","Type":"PullRequestEvent","CreatedAt":"2018-07-14T02:19:58","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4443","RelatedDescription":"Merged pull request \"[WebKit] Update bindings to Xcode 10 Beta 1, Nothing on beta 2 or 3\" (#4443) at xamarin/xamarin-macios","RelatedBody":"Allso adds UIKit UIWebView deprecations"},{"Id":"7964439468","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:29:07","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4443","RelatedDescription":"Opened pull request \"[WebKit] Update bindings to Xcode 10 Beta 1, Nothing on beta 2 or 3\" (#4443) at xamarin/xamarin-macios","RelatedBody":"Allso adds UIKit UIWebView deprecations"},{"Id":"7964385990","Type":"IssuesEvent","CreatedAt":"2018-07-13T21:14:29","Actor":"marek-safar","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4175","RelatedDescription":"Closed issue \"Internal consistency error, please file a bug (http://bugzilla.xamarin.com). Additional data: found managed object 0x126028ea8=0x7fb3f9052880 (Linker.Sealer.Unsealable) in native object 0x60c000223540 (AppDelegate).\" (#4175) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significally more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. apply patch https://gist.github.com/marek-safar/e564ad5efdbe66387ae53b17ddea86a6\r\n2. make run-ios-sim64-linkall\r\n3. \r\n\r\n### Expected Behavior\r\n\r\nNo crash\r\n\r\n### Actual Behavior\r\n\r\n```\r\n2018-06-03 09:24:06.089 link all[65308:6402124] Xamarin.iOS: Internal consistency error, please file a bug (http://bugzilla.xamarin.com). Additional data: found managed object 0x126028ea8=0x7fb3f9052880 (Linker.Sealer.Unsealable) in native object 0x60c000223540 (AppDelegate).\r\n2018-06-03 09:24:06.091 link all[65308:6402124] critical: Stacktrace:\r\n\r\n2018-06-03 09:24:06.091 link all[65308:6402124] critical:   at <unknown> <0xffffffff>\r\n2018-06-03 09:24:06.091 link all[65308:6402124] critical:   at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain (int,string[],intptr,intptr) [0x0005c] in <fada7c48e0ed4641aa34baffb2274fed>:0\r\n2018-06-03 09:24:06.092 link all[65308:6402124] critical:   at UIKit.UIApplication.Main (string[],intptr,intptr) [0x00005] in /Users/marek/git/xamarin/xamarin-macios/src/UIKit/UIApplication.cs:79\r\n2018-06-03 09:24:06.092 link all[65308:6402124] critical:   at UIKit.UIApplication.Main (string[],string,string) [0x0002c] in /Users/marek/git/xamarin/xamarin-macios/src/UIKit/UIApplication.cs:63\r\n2018-06-03 09:24:06.092 link all[65308:6402124] critical:   at LinkAll.Application.Main (string[]) [0x00001] in /Users/marek/git/xamarin/xamarin-macios/tests/linker/ios/link all/Main.cs:19\r\n2018-06-03 09:24:06.093 link all[65308:6402124] critical:   at (wrapper runtime-invoke) <Module>.runtime_invoke_void_object (object,intptr,intptr,intptr) [0x00051] in <dec08c9bb76c4510a20ddda25bf09b70>:0\r\n2018-06-03 09:24:06.093 link all[65308:6402124] critical:\r\nNative stacktrace:\r\n\r\n2018-06-03 09:24:06.149 link all[65308:6402124] critical: \t0   link all                            0x000000010c577394 mono_handle_native_crash + 244\r\n2018-06-03 09:24:06.149 link all[65308:6402124] critical: \t1   libsystem_platform.dylib            0x000000011448ff5a _sigtramp + 26\r\n2018-06-03 09:24:06.149 link all[65308:6402124] critical: \t2   ???                                 0x000000000000ffff 0x0 + 65535\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t3   libsystem_c.dylib                   0x00000001140c5c97 abort + 127\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t4   link all                            0x000000010c74e5c9 xamarin_assertion_message + 425\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t5   link all                            0x000000010c74e405 xamarin_get_managed_object_for_ptr_fast + 213\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t6   link all                            0x000000010c49ce43 _ZL30native_to_managed_trampoline_5P11objc_objectP13objc_selectorPP11_MonoMethodP13UIApplicationP12NSDictionaryj + 291\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t7   link all                            0x000000010c49cd08 -[AppDelegate application:didFinishLaunchingWithOptions:] + 72\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t8   UIKit                               0x000000010e0f775b -[UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:] + 278\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t9   UIKit                               0x000000010e0f91d2 -[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] + 4123\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t10  UIKit                               0x000000010e0fe62b -[UIApplication _runWithMainScene:transitionContext:completion:] + 1677\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t11  UIKit                               0x000000010e4c0e4a __111-[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:]_block_invoke + 866\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t12  UIKit                               0x000000010e893909 +[_UICanvas _enqueuePostSettingUpdateTransactionBlock:] + 153\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t13  UIKit                               0x000000010e4c0a86 -[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:] + 236\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t14  UIKit                               0x000000010e4c12a7 -[__UICanvasLifecycleMonitor_Compatability activateEventsOnly:withContext:completion:] + 675\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t15  UIKit                               0x000000010ee324d4 __82-[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:]_block_invoke + 299\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t16  UIKit                               0x000000010ee3236e -[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:] + 433\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t17  UIKit                               0x000000010eb1662d __125-[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + 221\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t18  UIKit                               0x000000010ed11387 _performActionsWithDelayForTransitionContext + 100\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t19  UIKit                               0x000000010eb164f7 -[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + 223\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t20  UIKit                               0x000000010e892fb0 -[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + 392\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t21  UIKit                               0x000000010e0fcf0c -[UIApplication workspace:didCreateScene:withTransitionContext:completion:] + 515\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t22  UIKit                               0x000000010e6cfa97 -[UIApplicationSceneClientAgent scene:didInitializeWithEvent:completion:] + 361\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t23  FrontBoardServices                  0x00000001178042f3 -[FBSSceneImpl _didCreateWithTransitionContext:completion:] + 331\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t24  FrontBoardServices                  0x000000011780ccfa __56-[FBSWorkspace client:handleCreateScene:withCompletion:]_block_invoke_2 + 225\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t25  libdispatch.dylib                   0x0000000113f85779 _dispatch_client_callout + 8\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t26  libdispatch.dylib                   0x0000000113f8a931 _dispatch_block_invoke_direct + 317\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t27  FrontBoardServices                  0x0000000117838470 __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 24\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t28  FrontBoardServices                  0x000000011783812e -[FBSSerialQueue _performNext] + 439\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t29  FrontBoardServices                  0x000000011783868e -[FBSSerialQueue _performNextFromRunLoopSource] + 45\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t30  CoreFoundation                      0x0000000110f70bb1 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t31  CoreFoundation                      0x0000000110f554af __CFRunLoopDoSources0 + 271\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t32  CoreFoundation                      0x0000000110f54a6f __CFRunLoopRun + 1263\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t33  CoreFoundation                      0x0000000110f5430b CFRunLoopRunSpecific + 635\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t34  GraphicsServices                    0x000000011648aa73 GSEventRunModal + 62\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t35  UIKit                               0x000000010e1000b7 UIApplicationMain + 159\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t36  ???                                 0x00000001273975e9 0x0 + 4953044457\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t37  ???                                 0x0000000127397483 0x0 + 4953044099\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t38  link all                            0x000000010c589654 mono_jit_runtime_invoke + 1428\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t39  link all                            0x000000010c66f0df mono_runtime_invoke_checked + 127\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t40  link all                            0x000000010c6746fe mono_runtime_exec_main_checked + 110\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t41  link all                            0x000000010c4f6439 mono_jit_exec + 297\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t42  link all                            0x000000010c75e4e6 xamarin_main + 2726\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t43  link all                            0x000000010c4aed70 main + 80\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t44  libdyld.dylib                       0x0000000113ffa955 start + 1\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t45  ???                                 0x0000000000000009 0x0 + 9\r\n2018-06-03 09:24:06.158 link all[65308:6402124] critical:\r\n=================================================================\r\nGot a SIGABRT while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries\r\nused by your application.\r\n=================================================================\r\n```\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7963886467","Type":"PullRequestEvent","CreatedAt":"2018-07-13T19:14:07","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4439","RelatedDescription":"Merged pull request \"[PDFKit] Update bindings to Xcode 10 Beta 1, 2 & 3\" (#4439) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":39,"FavoriteCount":21,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":91,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":31,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":62,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":21,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":66,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":21,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2018-07-15T05:30:55.9077809Z","RunDurationInMilliseconds":3987}