{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11781150535","Type":"PullRequestEvent","CreatedAt":"2020-03-16T21:41:44","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7872","RelatedDescription":"Opened pull request \"Lazy DbContext initialization in OData controllers\" (#7872) at NuGet/NuGetGallery","RelatedBody":"Since we do the hijacking for great deal of OData requests we get, having DB contexts injected into OData controllers creates unnecessary connections that are likely to be unused.\r\n\r\nThis change postpones the context initialization until the moment we know for sure we are going to query the DB.\r\n\r\nWe have some issues with reporting the DB related perf counters from the app service, so verification was done by collecting profiler traces from different versions of the service."},{"Id":"11781063540","Type":"PullRequestEvent","CreatedAt":"2020-03-16T21:28:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7867","RelatedDescription":"Merged pull request \"Add KnownOperation telemetry and add more configuration to DI\" (#7867) at NuGet/NuGetGallery","RelatedBody":"This change has two main purposes:\r\n\r\n1. Add a `KnownOperation` custom dimension so that we can have a metric column with low cardinality that identifies the type of request. Current the `name` (or `operation_Name` in other tables) has extremely high cardinality because some request patterns end up putting the verbatim URL path there.\r\n1. Add more configuration types to the DI container so that closed-source/internal modules can get configuration from DI.\r\n   - Since Gallery does not use `IOptions` or `IConfigurationRoot`, we use the older abstraction in our codebase which is `IConfigurationFactory`. This has been around for a while and is based on `ComponentModel`.\r\n   - Update to new ServerCommon since I moved `StringArrayConverter` there. This allows closed-source implementations to also use `StringArrayConverter` in their own private configuration types.\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/3020"},{"Id":"11776680648","Type":"IssuesEvent","CreatedAt":"2020-03-16T13:39:55","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7871","RelatedDescription":"Opened issue \"[Search]Catalog2AzureSearch can possibly fail on merge\" (#7871) at NuGet/NuGetGallery","RelatedBody":"When updating a document with change type UpdateVersionList, we update the document with a Merge operation.\r\n\r\nThere appear to be cases where the document that we attempt to merge may not exist in the index.\r\nThe root cause of this needs to be investigated further, but the attempt to update the non-existent document will cause the job to fail."},{"Id":"11763492601","Type":"PullRequestEvent","CreatedAt":"2020-03-14T07:32:26","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7870","RelatedDescription":"Opened pull request \"Optional configurable thread settings\" (#7870) at NuGet/NuGetGallery","RelatedBody":"Enables to set up thread pool in app service. Cloud service was set up through startup.ps1"},{"Id":"11759335605","Type":"IssuesEvent","CreatedAt":"2020-03-13T17:03:59","Actor":"j82w","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7869","RelatedDescription":"Opened issue \"NuGet.org package statistics not updating for over a week\" (#7869) at NuGet/NuGetGallery","RelatedBody":"### Bug description\r\nSeveral packages have been updated in the last 7 days, and the statistics are showing 0 downloads. The packages have been downloaded several times by multiple users.\r\n\r\n### Impacted packages\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\r\n\r\nhttps://www.nuget.org/packages/Swashbuckle.AspNetCore.Swagger/"},{"Id":"11759092752","Type":"IssuesEvent","CreatedAt":"2020-03-13T16:35:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7868","RelatedDescription":"Opened issue \"Some exceptions thrown in gallery cause 302 redirect instead of 500\" (#7868) at NuGet/NuGetGallery","RelatedBody":"This means that in Application Insights that request is considered `success = true` which messes up analytics. Really, this should be considered a failed request. Because we redirect to shared error page, we lose the context at this high level that an error occurred. You can tease it apart on a case-by-case basis by finding the subsequent URL that the customer hit and see that it was the error page. Also, you can see an exception thrown for the 302 request, but this is not ideal.\r\n\r\nI think we should change the code to just show the HTTP 500 error page inline, without a redirect."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11781722951","Type":"IssuesEvent","CreatedAt":"2020-03-16T23:20:12","Actor":"MSLukeWest","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9310","RelatedDescription":"Opened issue \"PackageReferences put ref instead of lib assemblies in the BuiltProjectOutputGroupDependencies output group used by VS installer projects\" (#9310) at NuGet/Home","RelatedBody":"NuGet product used: VS UI\r\n\r\nNuGet version: 5.6.0.6489\r\n\r\nVS version (if appropriate): 16.5\r\n\r\nOS version: 19h1\r\n\r\nWorked before? If so, with which NuGet version: Never worked with PackageRef, still works with Package.json\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1)\tCreate a .NET framework C# console app\r\n2)\tManage Nuget packages, add latest System.ValueTuple (4.5.0)\r\n3)\tRight click on packages.config in SE, select \"Migrate packages.config to PackageReference …\" (Note: No repro if you use packages.config)\r\n4)\tAdd a setup project that references the primary output of the console app and build (Requires VS extension: https://marketplace.visualstudio.com/items?itemName=visualstudioclient.MicrosoftVisualStudio2017InstallerProjects)\r\n5)\tInstall the generated msi\r\n\r\nExpected: It installs the System.ValueTuple assembly from the “lib” directory\r\nActual: It installs the assembly from the “ref” directory, causing runtime failures\r\n\r\nThe output group BuiltProjectOutputGroupDependencies is incorrectly populated when using a package reference to consume nuget packages that have both ref and lib versions of their assemblies.  Some inital inspection of the build logs shows that with packages.config the lib version is added to the \"Reference\" item group, which eventually makes its way into a ReferencePath item, which gets added to BuiltProjectOutputGroupDependencies.\r\n\r\nWith PackageReference, ResolveNuGetPackageAssets adds:\r\n- lib to ReferenceCopyLocalPaths\r\n- ref to Reference\r\n\r\nSo even though the lib version makes it to the bin folder through ReferenceCopyLocalPaths, the ref version is what gets added to BuiltProjectOutputGroupDependencies.\r\n\r\nThis has been reported by a few different customers, here’s a link to one of the feedback tickets: https://developercommunity.visualstudio.com/content/problem/810090/visual-studio-installer-projects-extensions-incorr.html.  As we mentioned in that ticket, there’s a couple potential workarounds, but neither of them are very reliable.\r\n\r\n"},{"Id":"11781495660","Type":"IssuesEvent","CreatedAt":"2020-03-16T22:38:05","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9309","RelatedDescription":"Opened issue \"bless nuget.exe 5.5.0 and publish packages to nuget.org\" (#9309) at NuGet/Home","RelatedBody":"- [] Change the link https://dist.nuget.org/win-x86-commandline/latest/nuget.exe to point to 5.5.0\r\n- [] Push packages to nuget.org"},{"Id":"11780771151","Type":"IssuesEvent","CreatedAt":"2020-03-16T20:49:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9308","RelatedDescription":"Opened issue \"Add the restore service functionality for online environments \" (#9308) at NuGet/Home","RelatedBody":"Specifically related to https://github.com/NuGet/Home/issues/9162. \r\n\r\nThe \"execution\" of the context menu click. "},{"Id":"11780728402","Type":"IssuesEvent","CreatedAt":"2020-03-16T20:43:27","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9306","RelatedDescription":"Closed issue \"I get build error NU5012 and I'm not sure why, for sure not becouse my project does not build\" (#9306) at NuGet/Home","RelatedBody":"I have a project that I would like to have a nuget package for. The project builds and targets several frameworks. As the nuget package should include dependent files I thought I'd make a .nuspec file\r\n\r\nwhen I run the package build I get an error:\r\n![image](https://user-images.githubusercontent.com/44400822/76531905-2b15f800-6476-11ea-9343-3f980692202b.png)\r\n\r\nMakes no sense as clearly the project builds, a Package deploy from VS works fine. \r\n\r\nWhy is this error and how to I get my dependent files (not nuget) in the solution?"},{"Id":"11780365997","Type":"IssuesEvent","CreatedAt":"2020-03-16T19:55:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9288","RelatedDescription":"Closed issue \"RestoreOperationLogger has unnecessary thread affinity\" (#9288) at NuGet/Home","RelatedBody":"With https://github.com/NuGet/NuGet.Client/commit/ef53f3fe5f590e30283b625f698a90f25245c1c3 merged, there's now a bunch of RestoreOperationLogger stuff that has unnecessary thread affinity. \r\n\r\nCleaning these up could improve the responsiveness when dealing with heavy logging (think large solutions)."},{"Id":"11779590545","Type":"IssuesEvent","CreatedAt":"2020-03-16T18:19:09","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9307","RelatedDescription":"Opened issue \"Review Accessiblity Issue\" (#9307) at NuGet/Home","RelatedBody":"Link: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994460/"},{"Id":"11779519356","Type":"IssuesEvent","CreatedAt":"2020-03-16T18:10:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9298","RelatedDescription":"Closed issue \"/t:pack target doesn't include or have an option to include reference assemblies\" (#9298) at NuGet/Home","RelatedBody":"## Issue\r\n\r\nThe C# compiler has support for a special `-refout` switch and a `ProduceReferenceAssembly` project property which causes it to generate a reference assembly alongside the normal assembly output.\r\nNuGet likewise supports a `ref` folder where these types of reference assemblies can go and it will consume them if available. \r\nHowever, NuGet does not appear to currently have a mechanism to automatically include this output in the generated package.\r\n\r\n## Repro\r\n\r\n1. Create a new csproj\r\n2. Under the `TargetFramework` property add `<ProduceReferenceAssembly>true</ProduceReferenceAssembly>`\r\n3. Run `dotnet pack`\r\n4. Observe that the following files exist:\r\n    * `bin\\Debug\\<tfm>\\ClassLibrary1.dll`\r\n    * `bin\\Debug\\<tfm>\\ref\\ClassLibrary1.dll`\r\n    * `bin\\Debug\\ClassLibrary1.1.0.0.nupkg`\r\n5. Extract the nupkg to a local folder\r\n6. Observe that `<nupkg>\\lib\\<tfm>\\ClassLibrary1.dll` exists and corresponds to `bin\\Debug\\<tfm>\\ClassLibrary1.dll`\r\n7. Observe that `<nupkg>\\ref\\<tfm>\\ClassLibrary1.dll` does not exist\r\n\r\n## Expected Behavior\r\n\r\nIt is expected that the `ref` files do exist and correspond to the files produced by the compiler under `bin\\Debug\\<tfm>\\ref\\ClassLibrary1.dll`"},{"Id":"11779406334","Type":"IssuesEvent","CreatedAt":"2020-03-16T17:57:54","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8890","RelatedDescription":"Closed issue \"Constant \"loading..\" on installed tab, and \"searching <term>..\" on updates tab\" (#8890) at NuGet/Home","RelatedBody":"#### Repro steps:\r\n1. Open NuGet PAckage Manager on VS and Install a package to a project\r\n2. Go to Browse, Installed and Updates tabs one after another\r\n3. Go to Browse tab, search for a partial package ID term\r\n4. Repeat Step 2\r\n5. Keep repeating step 2,3,4 with different search terms and blanks\r\n\r\n#### Expected:\r\nImmediate results or no results on each tab\r\n\r\n#### Actual\r\nOn installed tab:\r\n![installed-tab-loading](https://user-images.githubusercontent.com/14800916/70415823-6259b080-1a12-11ea-803f-c5acb66abc48.gif)\r\n\r\n![installed-tab-loading](https://user-images.githubusercontent.com/14800916/70415834-6a195500-1a12-11ea-8462-79ae63ba5676.png)\r\n\r\nOn updates tab:\r\n![updates-tab-searching](https://user-images.githubusercontent.com/14800916/70416007-df852580-1a12-11ea-8448-744600add3cc.gif)\r\n\r\n![updates-tab-searching](https://user-images.githubusercontent.com/14800916/70416041-f0359b80-1a12-11ea-8af0-adece36b26e6.png)\r\n\r\nNote: Only default sources were enabled:\r\n\r\n\r\n![default-sources-enabled](https://user-images.githubusercontent.com/14800916/70415810-5b32a280-1a12-11ea-87d1-13c97dfc090a.png)\r\n"},{"Id":"11779323826","Type":"IssuesEvent","CreatedAt":"2020-03-16T17:48:31","Actor":"PeterPann23","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9306","RelatedDescription":"Opened issue \"I get build error NU5012 and I'm not sure why, for sure not becouse my project does not build\" (#9306) at NuGet/Home","RelatedBody":"I have a project that I would like to have a nuget package for. The project builds and targets several frameworks. As the nuget package should include dependent files I thought I'd make a .nuspec file\r\n\r\nwhen I run the package build I get an error:\r\n![image](https://user-images.githubusercontent.com/44400822/76531905-2b15f800-6476-11ea-9343-3f980692202b.png)\r\n\r\nMakes no sense as clearly the project builds, a Package deploy from VS works fine. \r\n\r\nWhy is this error and how to I get my dependent files (not nuget) in the solution?"},{"Id":"11779289720","Type":"IssuesEvent","CreatedAt":"2020-03-16T17:44:44","Actor":"SowmyaDantuluri","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9305","RelatedDescription":"Opened issue \"Fakes assembly is not generating with PackageReference\" (#9305) at NuGet/Home","RelatedBody":"I have created one nuget package. Name of that nuget package is MyFirstOne. Inside that package one dll is there named abc.dll\r\n\r\nI have created 2 WPF projects. One with packages.config(WPFPackageConfigProject) and the other one with PackageReference((WPFPackageReferenceProject).\r\n\r\nI have added MyFirstOne package to both projects. I tried to create fakes assembly for that in WPFPackageConfigProject. Fakes assembly created successfully. I tried to create fakes assembly in WPFPackageReferenceProject. Fakes assembly didn't created. It failed stating that Fakes doesnot support this assembly.\r\n\r\nNow I renamed my nuget package to abc. Which means both package and dll names are same. Now I referred this in both projects. Now fakes assembly is created fine in both projects.\r\n\r\nIs there any issue with PackageReference to create fakes assembly? When my package name and dll name are different it is failing to create fakes assembly with package reference.\r\n![FakesIssue](https://user-images.githubusercontent.com/49900591/76591825-759b8100-6517-11ea-8f53-e2f5f4d7f8ee.PNG)\r\n"},{"Id":"11779136511","Type":"IssuesEvent","CreatedAt":"2020-03-16T17:27:52","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9242","RelatedDescription":"Closed issue \"Package Manager UI for VSO prototype\" (#9242) at NuGet/Home","RelatedBody":"Continuation of https://github.com/nuget/home/issues/9162"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-03-17T05:30:42.7335193Z","RunDurationInMilliseconds":1700}