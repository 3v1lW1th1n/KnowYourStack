{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7497688976","Type":"IssuesEvent","CreatedAt":"2018-04-08T22:13:05","Actor":"IndreamLuo","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3036","RelatedDescription":"Opened issue \"Generic Types Should Be Able to Be Depended and Injected by Implementation Factory repo:DependencyInjection\" (#3036) at aspnet/Home","RelatedBody":"https://github.com/aspnet/DependencyInjection/blob/4708d11dfe2a3df540578f026fc14d11a4f9ef48/src/DI/ServiceLookup/CallSiteFactory.cs#L36\r\n\r\nAlso refer to: [https://github.com/aspnet/DependencyInjection/issues/634](url)\r\n\r\nWhere:\r\n``` \r\nif (implementationTypeInfo == null || !implementationTypeInfo.IsGenericTypeDefinition)\r\n{\r\n    throw new ArgumentException(\r\n    Resources.FormatOpenGenericServiceRequiresOpenGenericImplementation(descriptor.ServiceType),\r\n                            nameof(descriptors));\r\n}\r\n\r\nif (implementationTypeInfo.IsAbstract || implementationTypeInfo.IsInterface)\r\n{\r\n    throw new ArgumentException(Resources.FormatTypeCannotBeActivated(descriptor.ImplementationType, descriptor.ServiceType));\r\n}\r\n```\r\nWhen there's generic type dependency with no concrete generic type injection but instance factory it'll throw the exception. Should be changed to like:\r\n```\r\nif ((implementationTypeInfo == null || !implementationTypeInfo.IsGenericTypeDefinition) **&& descriptor.ImplementationFactoryWithType == null**)\r\n{\r\n    throw new ArgumentException(\r\n    Resources.FormatOpenGenericServiceRequiresOpenGenericImplementation(descriptor.ServiceType),\r\n                            nameof(descriptors));\r\n}\r\n**else** if (implementationTypeInfo.IsAbstract || implementationTypeInfo.IsInterface)\r\n{\r\nthrow new ArgumentException(\r\n                            Resources.FormatTypeCannotBeActivated(descriptor.ImplementationType, descriptor.ServiceType));\r\n}\r\n```\r\nIn the case of using factory declaration of dependency as will be throwing exception \"An unhandled exception of type 'System.ArgumentException' occurred in Microsoft.Extensions.DependencyInjection.dll: 'Open generic service type '[name of the type]' requires registering an open generic implementation type.'\" in building web host which should be right in where new service descriptor is being added:\r\n```\r\npublic class Startup\r\n{\r\n... ...\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        ... ...\r\n        services.Add[lifecycle type](myGenericType, provider => myFactory.GetInstance(myGenericType));\r\n        ... ...\r\n    }\r\n}\r\n```\r\nAnd a new method should be provided as:\r\n```\r\nservices.Add[lifecycle type](myGenericType, (provider, requiringType) => myFactory.GetInstance(requiringType));\r\n```\r\nAnd FactoryCallSite should be extended or new type of IServiceCallSite for factory with requiring type provided in invoking should be implemented."},{"Id":"7493685188","Type":"IssuesEvent","CreatedAt":"2018-04-06T23:54:43","Actor":"mrlife","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3035","RelatedDescription":"Opened issue \"macOS support for 2.1.0-preview1-final?\" (#3035) at aspnet/Home","RelatedBody":"Using the latest beta release of Visual Studio for Mac, [which should have support for 2.1](https://blogs.msdn.microsoft.com/visualstudio/2018/03/21/visual-studio-for-mac-version-7-5-preview-1/).\r\n\r\n<img width=\"230\" alt=\"screen shot 2018-04-06 at 7 48 38 pm\" src=\"https://user-images.githubusercontent.com/213164/38448646-c63860c2-39d3-11e8-8827-0dc7399e6469.png\">\r\n\r\nI installed 2.1 preview using the link on the [announcement blog post](https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-now-available/).\r\n\r\n> $ dotnet --version\r\n> 2.1.300-preview1-008174\r\n\r\nFollowed the steps from the announcement blog post linked above and restarted my computer.\r\n\r\nI'm seeing this in the project options:\r\n\r\n<img width=\"524\" alt=\"screen shot 2018-04-06 at 7 37 13 pm\" src=\"https://user-images.githubusercontent.com/213164/38448661-f3056b86-39d3-11e8-9bbc-f1cd44277e79.png\">\r\n\r\nFor step 9 in the announcement blog post, is this checkbox in another location in Visual Studio for Mac?\r\n> 9: Open the “Debug” tab and in the IIS Express profile, check the “Enable SSL” checkbox and save the changes\r\n\r\nI attempted to run the project from CLI and it says it's running, but going to localhost:5000 shows it's not really running.\r\n\r\nPlease let me know if I am missing something or if this should be posted somewhere else."},{"Id":"7493373588","Type":"IssuesEvent","CreatedAt":"2018-04-06T21:58:59","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3034","RelatedDescription":"Opened issue \"Flaky test: System_NoKeysDirectoryProvided_UsesDefaultKeysDirectory\" (#3034) at aspnet/Home","RelatedBody":"This test [fails](http://aspnetci/viewLog.html?buildId=442272&tab=buildResultsDiv&buildTypeId=XPlat_Windows_Win10Universe#testNameId1329483692832033125) sometimes with the following error:\r\n\r\n```\r\nSystem.IO.IOException : Cannot create 'C:\\Users\\asplab\\AppData\\Local\\ASP.NET\\DataProtection-Keys' because a file or directory with the same name already exists.\r\n   at System.IO.Directory.Move(String sourceDirName, String destDirName)\r\n   at Microsoft.AspNetCore.DataProtection.DataProtectionProviderTests.System_NoKeysDirectoryProvided_UsesDefaultKeysDirectory() in C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\DataProtection\\test\\Microsoft.AspNetCore.DataProtection.Extensions.Test\\DataProtectionProviderTests.cs:line 89\r\n======= Failed test run #2 ==========\r\nSystem.IO.IOException : Cannot create 'C:\\Users\\asplab\\AppData\\Local\\ASP.NET\\DataProtection-KeysTemp' because a file or directory with the same name already exists.\r\n   at System.IO.Directory.Move(String sourceDirName, String destDirName)\r\n   at Microsoft.AspNetCore.DataProtection.DataProtectionProviderTests.System_NoKeysDirectoryProvided_UsesDefaultKeysDirectory() in C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\DataProtection\\test\\Microsoft.AspNetCore.DataProtection.Extensions.Test\\DataProtectionProviderTests.cs:line 55\r\n```\r\n\r\nFuture instances of this failure can be tracked [here](http://aspnetci/project.html?projectId=XPlat&buildTypeId=&tab=testDetails&testNameId=1329483692832033125&order=TEST_STATUS_DESC&branch_XPlat=__all_branches__&itemsCount=50)."},{"Id":"7493270003","Type":"IssuesEvent","CreatedAt":"2018-04-06T21:29:41","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2774","RelatedDescription":"Closed issue \"Mvc.UseStaticFiles() will not serve files that are symbolic links; yielding empty files instead.\" (#2774) at aspnet/Home","RelatedBody":"Mvc.UseStaticFiles() will not serve files that are symbolic links; yielding empty files instead.\r\n\r\nReason: (new FileInfo(path)).Length does the wrong thing for what we are trying to do.\r\n\r\nhttps://github.com/aspnet/FileSystem/blob/dev/src/FS.Physical/PhysicalFileInfo.cs:\r\n\r\n    System.IO.FileInfo _info;\r\n\r\n    public long Length => _info.Length;\r\n\r\nNope. That's not going to work.\r\n\r\nDue to lack of an appropriate API, the only way to get the length is to open the file, seek to the end, and read the position."},{"Id":"7493261969","Type":"IssuesEvent","CreatedAt":"2018-04-06T21:27:34","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2532","RelatedDescription":"Closed issue \"CompositeFileProvider should implement IDisposable\" (#2532) at aspnet/Home","RelatedBody":"_From @jiatao99 on Wednesday, December 13, 2017 8:20:12 AM_\r\n\r\n1. I implement my own IFileProvider (like Zip)  and implement IDisposable\r\n2. I add my provider into CompositeFileProvider\r\n3. I add CompositeFileProvider into ServiceCollection \r\n\r\nResult:  my provider will not be disposed properly\r\n\r\nCompositeFileProvider should implement IDisposable and dispose inner providers.\r\n\r\n\r\n_Copied from original issue: aspnet/FileSystem#307_"},{"Id":"7493258902","Type":"IssuesEvent","CreatedAt":"2018-04-06T21:26:44","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2533","RelatedDescription":"Closed issue \"PhysicalDirectoryInfo.PhysicalPath should return relative path\" (#2533) at aspnet/Home","RelatedBody":"_From @jiatao99 on Wednesday, December 13, 2017 7:55:14 AM_\r\n\r\nCall provider.GetDirectoryContents(\"\") might return a PhysicalDirectoryInfo. From there, I should be able to call the provider.GetDirectoryContents(dir.PhysicalPath) to retrieve the directory content from sub folder. However, the PhysicalDirectoryInfo.PhysicalPath returns the absolute path.\r\n\r\nSince PhysicalFileProvider only take relative path, I have no easy way to recursively list all the directory contents in the file system. \r\n\r\nIn my opinion, both PhysicalDirectoryInfo and PhysicalFileInfo should always return relative path (to provider) to follow the design pattern\r\n\r\n_Copied from original issue: aspnet/FileSystem#306_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7498417896","Type":"IssuesEvent","CreatedAt":"2018-04-09T04:28:19","Actor":"robrohan","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1910","RelatedDescription":"Opened issue \"Trying to get SignalR to build\" (#1910) at aspnet/SignalR","RelatedBody":"Hi there,\r\n\r\nI couldn't find a nuget package for SignalR Core - if there is one, please point me in the right direction and that'll solve this issue.  \r\n\r\nI am trying to compile SignalR Core to use the library in another project.  Basically like the _Samples_ directory, but it is own solution referencing SignalR Core from our nuget server. \r\n\r\nIt is not compiling from the command line.  It's dying on a particular library \"Microsoft.NET.Sdk.Web\"\r\n\r\nI have (on windows):\r\n* Installed VSStudio 2017 Preview\r\n* Installed the Preview SDK:\r\n```.NET Core SDK (reflecting any global.json):                                                                     \r\n Version:   2.1.300-preview3-008443                                                                             \r\n Commit:    1e2e8138b9                                                                                          \r\n                                                                                                                \r\nRuntime Environment:                                                                                            \r\n OS Name:     Windows                                                                                           \r\n OS Version:  10.0.16299                                                                                        \r\n OS Platform: Windows                                                                                           \r\n RID:         win10-x64                                                                                         \r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview3-008443\\                                              \r\n                                                                                                                \r\nHost (useful for support):                                                                                      \r\n  Version: 2.1.0-preview3-26404-01                                                                              \r\n  Commit:  1b1a652c15                                                                                           \r\n                                                                                                                \r\n.NET Core SDKs installed:                                                                                       \r\n  2.1.300-preview3-008443 [C:\\Program Files\\dotnet\\sdk]                                                         \r\n                                                                                                                \r\n.NET Core runtimes installed:                                                                                   \r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30431 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]       \r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30431 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]       \r\n  Microsoft.NETCore.App 2.1.0-preview3-26404-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]```\r\n* Have node 8+ installed\r\n```\r\nPS C:\\Projects\\SignalR> node --version\r\nv8.11.1\r\n```\r\n* Set `MSBuildSdksPath` `C:\\Program Files\\dotnet\\sdk\\2.1.300-preview3-008443\\`\r\n* Set `PATH` `C:\\Users\\Rob Rohan\\.dotnet\\tools; C:\\Program Files\\dotnet; C:\\Program Files (x86)\\dotnet`\r\n\r\nFrom this state I can build and run everything from Visual Studio Preview just fine.  However, if I run from the shell I get the following error:\r\n\r\n```\r\nPS C:\\Projects\\SignalR> .\\build.cmd                                                                                                                                   \r\nUsing KoreBuild 2.1.0-preview3-17002                                                                                                                                  \r\nWARNING: dotnet found on the system PATH is 'C:\\Program Files\\dotnet\\dotnet.exe' but KoreBuild will use 'C:\\Users\\Rob Rohan\\.dotnet\\x64\\dotnet.exe'.                  \r\nWARNING: Adding 'C:\\Users\\Rob Rohan\\.dotnet\\x64' to system PATH permanently may be required for applications like Visual Studio or VS Code to work correctly.         \r\nAdding C:\\Users\\Rob Rohan\\.dotnet\\x64 to PATH                                                                                                                         \r\n.NET Core runtime 2.0.5 is already installed. Skipping installation.                                                                                                  \r\n.NET Core SDK 2.1.300-preview2-008367 is already installed. Skipping installation.                                                                                    \r\n>>> dotnet.exe msbuild @C:\\Projects\\SignalR\\artifacts\\logs\\msbuild.rsp @C:\\Projects\\SignalR\\artifacts\\logs\\msbuild.logger.rsp                                         \r\n  Installing .NET Core Runtime (x64) 2.0.0                                                                                                                            \r\n  Installing .NET Core Runtime (x64) 2.0.0                                                                                                                            \r\n  Installing .NET Core Runtime (x64) 2.1.0-preview3-26331-01                                                                                                          \r\n  Using NodeJS 8.11.1 from C:\\Program Files\\nodejs\\node.exe                                                                                                           \r\nC:\\Projects\\SignalR\\samples\\SignalRSamples\\SignalRSamples.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.                       \r\nC:\\Projects\\SignalR\\src\\Microsoft.AspNetCore.SignalR.Core\\Microsoft.AspNetCore.SignalR.Core.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be\r\n found.                                                                                                                                                               \r\nC:\\Projects\\SignalR\\src\\Microsoft.AspNetCore.SignalR.Redis\\Microsoft.AspNetCore.SignalR.Redis.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not \r\nbe found.                                                                                                                                                             \r\nC:\\Projects\\SignalR\\samples\\ChatSample\\ChatSample.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.  \r\n...                             \r\n```\r\nOur build server is running windows so I'd need the command line to build if we are going to try to use SignalR.  Any suggestions?\r\n\r\n\r\n(FYI On Mac it's just the opposite - the command line works, but the VS Studio doesn't)\r\n```\r\nSignalR (dev)}> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview3-008443\r\n Commit:    1e2e8138b9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300-preview3-008443/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview3-26406-06\r\n  Commit:  213c19510e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.103 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-preview3-008443 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30431 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30431 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26404-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26406-06 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nSignalR (dev)}> node --version\r\nv8.9.4\r\n```\r\n\r\nHappy to update the \"how to compile page\" if I can get this sorted.\r\n"},{"Id":"7497889453","Type":"PullRequestEvent","CreatedAt":"2018-04-09T00:31:15","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1904","RelatedDescription":"Merged pull request \" Minor DefaultHubLifetimeManager improvements\" (#1904) at aspnet/SignalR","RelatedBody":""},{"Id":"7497773590","Type":"PullRequestEvent","CreatedAt":"2018-04-08T23:11:18","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1907","RelatedDescription":"Merged pull request \"Make MemoryBufferWriter a Stream\" (#1907) at aspnet/SignalR","RelatedBody":"- Get rid of LimitArrayPoolWriteStream and use MemoryBufferWriter in its place in the MessagePackProtocol implementation.\r\n- Added tests for MemoryPoolBufferWriter and fixed a bug in CopyToAsync\r\n- Added CopyTo(`IBufferWriter<byte>`)\r\n- Changed MemoryBufferWriter to fill the underlying arrays that back segments, the segment size is now a minimum.\r\n\r\n## Latest Results\r\n\r\n```\r\n                Method |          Input | HubProtocol |        Mean |      Error |     StdDev |        Op/s |  Gen 0 | Allocated |\r\n---------------------- |--------------- |------------ |------------:|-----------:|-----------:|------------:|-------:|----------:|\r\n    WriteSingleMessage |   FewArguments |     MsgPack |  1,353.7 ns |  19.034 ns |  17.804 ns |   738,701.2 | 0.0134 |     472 B |\r\n OldWriteSingleMessage |   FewArguments |     MsgPack |  1,278.2 ns |  19.146 ns |  16.973 ns |   782,370.4 | 0.0153 |     520 B |\r\n    WriteSingleMessage | LargeArguments |     MsgPack | 17,249.9 ns | 108.451 ns |  96.139 ns |    57,971.5 | 2.0447 |   61848 B |\r\n OldWriteSingleMessage | LargeArguments |     MsgPack | 16,273.1 ns | 185.642 ns | 164.566 ns |    61,450.9 | 2.0447 |   61896 B |\r\n    WriteSingleMessage |  ManyArguments |     MsgPack |  2,494.1 ns |  29.492 ns |  26.144 ns |   400,941.9 | 0.0229 |     744 B |\r\n OldWriteSingleMessage |  ManyArguments |     MsgPack |  2,407.0 ns |  30.682 ns |  27.199 ns |   415,459.0 | 0.0229 |     792 B |\r\n    WriteSingleMessage |    NoArguments |     MsgPack |    552.6 ns |   6.188 ns |   5.485 ns | 1,809,472.5 | 0.0067 |     224 B |\r\n OldWriteSingleMessage |    NoArguments |     MsgPack |    536.0 ns |   6.296 ns |   5.581 ns | 1,865,671.5 | 0.0086 |     272 B |\r\n```\r\n\r\n## Broadcast json, 1000 connections\r\n\r\n\r\n## Before\r\n```\r\n            Method | Connections | Protocol |     Mean |     Error |    StdDev |   Median |  Op/s |  Gen 0 | Allocated |\r\n--------------- |------------ |--------- |---------:|----------:|----------:|---------:|------:|-------:|----------:|\r\n SendAsyncGroup |        1000 |     json | 1.618 ms | 0.0337 ms | 0.0839 ms | 1.586 ms | 618.1 | 1.9531 |  97.78 KB |\r\n   SendAsyncAll |        1000 |     json | 1.465 ms | 0.0117 ms | 0.0109 ms | 1.463 ms | 682.8 | 1.9531 |  65.72 KB |\r\n```\r\n\r\n## After\r\n\r\n```\r\n         Method | Connections | Protocol |     Mean |     Error |    StdDev |  Op/s |  Gen 0 | Allocated |\r\n--------------- |------------ |--------- |---------:|----------:|----------:|------:|-------:|----------:|\r\n SendAsyncGroup |        1000 |     json | 1.541 ms | 0.0153 ms | 0.0143 ms | 648.8 | 1.9531 |  98.67 KB |\r\n   SendAsyncAll |        1000 |     json | 1.502 ms | 0.0176 ms | 0.0147 ms | 666.0 | 1.9531 |  77.62 KB |\r\n```\r\n\r\n## Previous runs\r\n\r\n## Before\r\n\r\n```\r\n             Method |          Input | HubProtocol |        Mean |      Error |     StdDev |        Op/s |  Gen 0 | Allocated |\r\n------------------- |--------------- |------------ |------------:|-----------:|-----------:|------------:|-------:|----------:|\r\n WriteSingleMessage |   FewArguments |     MsgPack |  1,347.5 ns |  25.898 ns |  24.225 ns |   742,109.1 | 0.0153 |     520 B |\r\n WriteSingleMessage | LargeArguments |     MsgPack | 17,434.4 ns | 342.015 ns | 432.539 ns |    57,357.9 | 2.0447 |   61896 B |\r\n WriteSingleMessage |  ManyArguments |     MsgPack |  2,488.1 ns |  42.467 ns |  39.724 ns |   401,920.6 | 0.0229 |     792 B |\r\n WriteSingleMessage |    NoArguments |     MsgPack |    548.6 ns |   5.932 ns |   5.549 ns | 1,822,692.4 | 0.0086 |     272 B |\r\n```\r\n\r\n## After\r\n\r\n```\r\n             Method |          Input | HubProtocol |        Mean |      Error |     StdDev |        Op/s |  Gen 0 | Allocated |\r\n------------------- |--------------- |------------ |------------:|-----------:|-----------:|------------:|-------:|----------:|\r\n WriteSingleMessage |   FewArguments |     MsgPack |  1,627.8 ns |  25.531 ns |  23.882 ns |   614,328.8 | 0.0134 |     472 B |\r\n WriteSingleMessage | LargeArguments |     MsgPack | 20,891.9 ns | 302.379 ns | 268.051 ns |    47,865.4 | 2.0752 |   61848 B |\r\n WriteSingleMessage |  ManyArguments |     MsgPack |  3,008.5 ns |  39.299 ns |  34.837 ns |   332,394.7 | 0.0229 |     744 B |\r\n WriteSingleMessage |    NoArguments |     MsgPack |    732.9 ns |   8.135 ns |   7.609 ns | 1,364,499.2 | 0.0067 |     224 B |\r\n```\r\n\r\nIt's slower and allocates a little bit less. Going to profile it. Small note, we don't get the benefit of the thread static caching in this test because `WriteToArray` already passes in a `MemoryPoolBufferWriter` to the MessagePackProtocol.\r\n\r\nLooks like Write and WriteByte are just generally slower:\r\n\r\n![image](https://user-images.githubusercontent.com/95136/38467802-7b20f3b8-3af2-11e8-979d-07cbf0496c4f.png)\r\n\r\n## Old:\r\n\r\n![image](https://user-images.githubusercontent.com/95136/38467884-0ee874ea-3af3-11e8-94f8-d2102b67408c.png)\r\n\r\n## New:\r\n\r\n![image](https://user-images.githubusercontent.com/95136/38467880-070c28fc-3af3-11e8-9e52-a6740152570b.png)\r\n\r\n## Code\r\n\r\n```C#\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        int messages = 100000;\r\n        Console.WriteLine($\"Waiting to serialize {messages} hub messages\");\r\n        Console.ReadLine();\r\n\r\n        var hubMessage = new InvocationMessage(target: \"Target\", argumentBindingException: null);\r\n        var hubProtocol = new MessagePackHubProtocol();\r\n\r\n        for (int i = 0; i < messages; i++)\r\n        {\r\n            byte[] buffer = hubProtocol.WriteToArray(hubMessage);\r\n        }\r\n\r\n        Console.WriteLine(\"Done\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\n\r\n## After optimizations\r\n\r\n```\r\n             Method |          Input | HubProtocol |        Mean |     Error |    StdDev |        Op/s |  Gen 0 | Allocated |\r\n------------------- |--------------- |------------ |------------:|----------:|----------:|------------:|-------:|----------:|\r\n WriteSingleMessage |   FewArguments |     MsgPack |  1,423.3 ns |  30.92 ns |  54.16 ns |   702,612.5 | 0.0134 |     472 B |\r\n WriteSingleMessage | LargeArguments |     MsgPack | 18,500.8 ns | 359.45 ns | 318.64 ns |    54,051.8 | 2.0447 |   61848 B |\r\n WriteSingleMessage |  ManyArguments |     MsgPack |  2,607.8 ns |  51.76 ns |  53.16 ns |   383,471.4 | 0.0229 |     744 B |\r\n WriteSingleMessage |    NoArguments |     MsgPack |    582.0 ns |  11.67 ns |  20.13 ns | 1,718,105.7 | 0.0067 |     224 B |\r\n```"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7498516449","Type":"IssuesEvent","CreatedAt":"2018-04-09T05:12:45","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7617","RelatedDescription":"Opened issue \"MVC.Testing incompatible with conventional routing in current MVC apps\" (#7617) at aspnet/Mvc","RelatedBody":"See also #7615. This issue appears unrelated though the scenarios are similar. In particular, this one is about conventional routing rather than redoing pre-compilation (and failing).\r\n## Repro Steps\r\nThe following is similar to the [Preview 1 functional testing instructions](https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/) but done In Visual Studio using Preview 2 bits:\r\n1. Create new ASP.NET Core Web Application\r\n    - Later steps make more sense if \"Create directory for solution\" is enabled\r\n2. Choose Web Application (Model-View-Controller) i.e. an MVC app (not Razor) and your favourite authentication scheme\r\n3. Hit F5 or Ctrl-F5 to confirm app works fine\r\n4. Add an xUnit Test Project (.NET Core) to the solution\r\n5. Edit test project file to bump up the target framework: `<TargetFramework>netcoreapp2.1</TargetFramework>`\r\n    - current Microsoft.AspNetCore.App package used in web application project is not compatible with a lower TFM\r\n6. Add a reference from the test project to the web application project\r\n7. Use Manage NuGet Packages to add a Microsoft.AspNetCore.Mvc.Testing package dependency to the test project\r\n    - choose same version e.g. `2.1.0-preview2-30552` as Microsoft.AspNetCore.App package in the web application project\r\n8. Edit UnitTest1 to perform a simple test:\r\n    ``` c#\r\n    using System.Net;\r\n    using System.Net.Http;\r\n    using System.Threading.Tasks;\r\n    using Microsoft.AspNetCore.Mvc.Testing;\r\n    using RazorApp1;\r\n    using Xunit;\r\n\r\n    namespace FunctionalTest\r\n    {\r\n        public class UnitTest1 : IClassFixture<WebApplicationFactory<Startup>>\r\n        {\r\n            private readonly HttpClient _client;\r\n\r\n            public UnitTest1(WebApplicationFactory<Startup> factory)\r\n            {\r\n                _client = factory.CreateDefaultClient();\r\n            }\r\n\r\n            [Fact]\r\n            public async Task Test1()\r\n            {\r\n                // Arrange & Act\r\n                var response = await _client.GetAsync(\"https://localhost/\");\r\n\r\n                // Assert\r\n                Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n            }\r\n        }\r\n    }\r\n    ```\r\n    - use \"http://localhost\" if you chose _not_ to include HTTPS support when creating the web application project\r\n9. Use Test Explorer to Run All tests\r\n\r\n### Expected\r\nThe one test succeeds.\r\n### Actual\r\nTest fails because the site returns a 404 status code.\r\n\r\n## Versions\r\nMicrosoft Visual Studio Enterprise 2017: `15.7.0 Preview 3.0 [27604.0.d15.7]`\r\n.NET Core SDK: `2.1.300-preview2-008523`\r\nMicrosoft.NETCore.App: `2.1.0-preview2-26403-06`\r\nMicrosoft.AspNetCore.App: `2.1.0-preview2-30552`\r\nMicrosoft.AspNetCore.Mvc.Testing: `2.1.0-preview2-30552`"},{"Id":"7498301939","Type":"IssuesEvent","CreatedAt":"2018-04-09T03:37:42","Actor":"ericwj","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7616","RelatedDescription":"Opened issue \"TempData doesn't work in the presence of a cookie consent policy\" (#7616) at aspnet/Mvc","RelatedBody":"By default, the template used by `dotnet new web` for example sets up the `CookiePolicyOptions` to always require consent:\r\n\r\n```CS\r\nservices.Configure<CookiePolicyOptions>(options => {\r\n\t// This lambda determines whether user consent for non-essential cookies is needed\r\n\t// for a given request.\r\n\toptions.CheckConsentNeeded = context => true;\r\n\toptions.MinimumSameSitePolicy = SameSiteMode.None;\r\n});\r\n```\r\n\r\nThe temp data cookie written by [CookieTempDataProvider](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/CookieTempDataProvider.cs#L103) is not marked as essential, meaning that no temp data cookie is written if the user has not given consent. However, temp data imho almost exclusively deals with the kind of cookies for which consent is never needed. In the first place because it is quite hard to make them survive very long.\r\n\r\nThe behavior described can afaik only be modified site-wide by marking the temp data cookie as essential, using for example the following code in `Startup.cs`:\r\n\r\n```CS\r\npublic void ConfigureServices(IServiceCollection services) {\r\n\tservices.Configure<CookieTempDataProviderOptions>(options => {\r\n\t\toptions.Cookie.IsEssential = true;\r\n\t});\r\n\t...\r\n}\r\n```\r\n\r\nWithout it, no temp data cookie is ever written for as long as there is no consent cookie (yet). This makes for a poor experience for pages that require a bit of temp data to work, even if these uses are well within the uses for which consent is never needed.\r\n\r\nI think the temp data cookie should be marked essential by default or in the templates.\r\n\r\n`CookieTempDataProvider` does not allow to provide a distinction in any way between essential and non-essential data on a case-by-case basis. This is probably the real issue here if it is considered inappropriate to mark all temp data cookies essential without exception. I wouldn't mind."},{"Id":"7497567032","Type":"IssuesEvent","CreatedAt":"2018-04-08T20:56:55","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7615","RelatedDescription":"Opened issue \"Mvc.Testing incompatible with current Razor application\" (#7615) at aspnet/Mvc","RelatedBody":"## Repro Steps\r\nThe following is similar to the [Preview 1 functional testing instructions](https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/) but done In Visual Studio using Preview 2 bits:\r\n1. Create new ASP.NET Core Web Application\r\n    - Later steps make more sense if \"Create directory for solution\" is enabled\r\n2. Choose Web Application i.e. a Razor app and your favourite authentication scheme\r\n3. Hit F5 or Ctrl-F5 to confirm app works fine\r\n4. Add an xUnit Test Project (.NET Core) to the solution\r\n5. Edit test project file to bump up the target framework: `<TargetFramework>netcoreapp2.1</TargetFramework>`\r\n    - current Microsoft.AspNetCore.App package used in web application project is not compatible with a lower TFM\r\n6. Add a reference from the test project to the web application project\r\n7. Use Manage NuGet Packages to add a Microsoft.AspNetCore.Mvc.Testing package dependency to the test project\r\n    - choose same version e.g. `2.1.0-preview2-30552` as Microsoft.AspNetCore.App package in the web application project\r\n8. Edit UnitTest1 to perform a simple test:\r\n    ``` c#\r\n    using System.Net;\r\n    using System.Net.Http;\r\n    using System.Threading.Tasks;\r\n    using Microsoft.AspNetCore.Mvc.Testing;\r\n    using RazorApp1;\r\n    using Xunit;\r\n\r\n    namespace FunctionalTest\r\n    {\r\n        public class UnitTest1 : IClassFixture<WebApplicationFactory<Startup>>\r\n        {\r\n            private readonly HttpClient _client;\r\n\r\n            public UnitTest1(WebApplicationFactory<Startup> factory)\r\n            {\r\n                _client = factory.CreateDefaultClient();\r\n            }\r\n\r\n            [Fact]\r\n            public async Task Test1()\r\n            {\r\n                // Arrange & Act\r\n                var response = await _client.GetAsync(\"https://localhost/\");\r\n\r\n                // Assert\r\n                Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n            }\r\n        }\r\n    }\r\n    ```\r\n    - use \"http://localhost\" if you chose _not_ to include HTTPS support when creating the web application project\r\n9. Use Test Explorer to Run All tests\r\n\r\n### Expected\r\nThe one test succeeds.\r\n### Actual\r\nTest fails, apparently due to a failed attempt to re-compile the Index.cshtml Razor page. Note the test project's bin includes the {app}.Views.dll assembly.\r\n```\r\n...\r\nResult StackTrace:\t\r\nat Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String generatedCode)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.RazorPages.Internal.DefaultPageLoader.Load(PageActionDescriptor actionDescriptor)\r\n   at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvokerProvider.OnProvidersExecuting(ActionInvokerProviderContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ActionInvokerFactory.CreateInvoker(ActionContext actionContext)\r\n   at Microsoft.AspNetCore.Mvc.Internal.MvcAttributeRouteHandler.<>c__DisplayClass12_0.<RouteAsync>b__0(HttpContext c)\r\n...\r\nResult Message:\t\r\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException : One or more compilation failures occurred:\r\numzefeie.bog(4,41): error CS0234: The type or namespace name 'Razor' does not exist in the namespace 'Microsoft.AspNetCore' (are you missing an assembly reference?)\r\numzefeie.bog(5,44): error CS0234: The type or namespace name 'RazorPages' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\r\numzefeie.bog(4,82): error CS0518: Predefined type 'System.Type' is not defined or imported\r\numzefeie.bog(4,119): error CS0518: Predefined type 'System.String' is not defined or imported\r\numzefeie.bog(4,142): error CS0518: Predefined type 'System.String' is not defined or imported\r\numzefeie.bog(5,89): error CS0518: Predefined type 'System.String' is not defined or imported\r\n...\r\n```\r\n\r\n## Suspects\r\nThe attempt to re-compile a Razor page and its failure are likely separate problems. Probably have an incompatibility between the MSBuild pre-compilation approach and the MSBuild side of the Testing package.\r\n\r\n## Versions\r\nMicrosoft Visual Studio Enterprise 2017: `15.7.0 Preview 3.0 [27604.0.d15.7]`\r\n.NET Core SDK: `2.1.300-preview2-008523`\r\nMicrosoft.NETCore.App: `2.1.0-preview2-26403-06`\r\nMicrosoft.AspNetCore.App: `2.1.0-preview2-30552`\r\nMicrosoft.AspNetCore.Mvc.Testing: `2.1.0-preview2-30552`"},{"Id":"7496150038","Type":"PullRequestEvent","CreatedAt":"2018-04-08T06:10:45","Actor":"flash2048","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7614","RelatedDescription":"Opened pull request \"Corrects spelling of some comments\" (#7614) at aspnet/Mvc","RelatedBody":"Corrects spelling of some comments"},{"Id":"7496123838","Type":"IssuesEvent","CreatedAt":"2018-04-08T05:50:58","Actor":"tidyui","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7613","RelatedDescription":"Opened issue \"Razor Pages looses query param \"page\"\" (#7613) at aspnet/Mvc","RelatedBody":"First off, this seems **extremely odd**, but I can reproduce it over and over and I can't get around it. My page is getting a bunch of query parameters, everything is working except **one** which never gets any value. This param is named `page`, and is simple passed in as paging to a blog archive.\r\n\r\nI've just taken out the piece not working into a simple test page and the error is the same:\r\n\r\n    @page\r\n    @model TestModel\r\n    @functions {\r\n        public class TestModel : PageModel\r\n        {\r\n            public string Id { get; set; }\r\n            public int? Page { get; set; }\r\n            public int? Year { get; set; }\r\n\r\n            public void OnGet(string id, int? page = null, int? year = null)\r\n            {\r\n                Id = id;\r\n                Page = page;\r\n                Year = year;\r\n            }\r\n        }   \r\n    }\r\n\r\n    <div class=\"container\">\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-sm-10\">\r\n                Id: @Model.Id<br>\r\n                Page: @Model.Page<br>\r\n                Year: @Model.Year\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nRequesting the page with the following shows no input for the parameter page when rendered.\r\n\r\n    GET localhost:5000/test?id=1234&page=5&year=2018\r\n\r\n**However**, if I just change the name of the param from `page` to `pagenum` it starts to work. This is however not possible for me as the parameter is given to me from middleware which is not in my application. \r\n\r\n    @page\r\n    @model TestModel\r\n    @functions {\r\n        public class TestModel : PageModel\r\n        {\r\n            public string Id { get; set; }\r\n            public int? Page { get; set; }\r\n            public int? Year { get; set; }\r\n\r\n            public void OnGet(string id, int? pagenum = null, int? year = null)\r\n            {\r\n                Id = id;\r\n                Page = pagenum;\r\n                Year = year;\r\n            }\r\n        }   \r\n    }\r\n\r\n    <div class=\"container\">\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-sm-10\">\r\n                Id: @Model.Id<br>\r\n                Page: @Model.Page<br>\r\n                Year: @Model.Year\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nNow, executing the following request shows data for all params:\r\n\r\n    GET localhost:5000/test?id=1234&pagenum=5&year=2018\r\n\r\nAs there's no difference between the two except the name of the querystring param, I'm starting to wonder what's going on in the background :)\r\n\r\nRegards"},{"Id":"7494399310","Type":"IssuesEvent","CreatedAt":"2018-04-07T09:11:38","Actor":"JerryBian","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7612","RelatedDescription":"Opened issue \"fail to apply Guid route constraint?\" (#7612) at aspnet/Mvc","RelatedBody":"I am not quite sure whether I did it wrong. From [doc](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/routing#route-constraint-reference) it seems following is valid for routing, but when I tried to access it always return 404.\r\n\r\n```\r\n[Route(\"/test/{id:guid}\")]\r\npublic IActionResult Test([FromRoute]Guid id)\r\n{\r\n    Trace.TraceInformation(id.ToString());\r\n    return Ok();\r\n}\r\n```\r\n\r\ne.g. http://localhost:63950/test/826510d7-00b7-42cc-aeea-6f455f19ec4b\r\n\r\nDo I need to setup somewhere to enable Guid support for routing? Thanks."},{"Id":"7494351185","Type":"IssuesEvent","CreatedAt":"2018-04-07T08:32:48","Actor":"j0nimost","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7611","RelatedDescription":"Opened issue \"Encrypt the Secrets.JSON \" (#7611) at aspnet/Mvc","RelatedBody":"Recently as i was working on a team project I saw a developer store encryption Keys in the Secrets.Json for sure this is not advisable but according to him storing the Key inside a class then pushing the code to a version control accessible to other team members was worse. Obviously this meant he had to access the Secrets.JSON at all times be it in Production or Development environments. I would be nice to have the Secrets.JSON encrypted and Partially accessible that is only certain Json Objects are accessible at run time in regardless of the environment. "},{"Id":"7493500736","Type":"IssuesEvent","CreatedAt":"2018-04-06T22:39:27","Actor":"PaulParker","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7610","RelatedDescription":"Opened issue \"Custom error page for exceptions in .cshtml view files\" (#7610) at aspnet/Mvc","RelatedBody":"We're using `UseStatusCodePagesWithReExecute()` successfully to send users to our custom error page on exceptions in controllers, but for errors in razor/cshtml views `UseStatusCodePagesWithReExecute()` doesn't seem to do anything.\r\n\r\nIs there a way to send users to our error page if the exception originates in a view?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7492778643","Type":"IssuesEvent","CreatedAt":"2018-04-06T19:31:43","Actor":"ivanstamenic","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1740","RelatedDescription":"Opened issue \"RoleManager.CreateAsync throw an Exception when role with the same name already exists.\" (#1740) at aspnet/Identity","RelatedBody":"When role with the same name already exists _RoleManager.CreateAsync_ throw an Exception \"Object reference not set to an instance of an object.\"."},{"Id":"7489319127","Type":"IssuesEvent","CreatedAt":"2018-04-06T07:09:37","Actor":"maxwang","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1739","RelatedDescription":"Opened issue \"Cookie is broken when there are too many permission for a user. \" (#1739) at aspnet/Identity","RelatedBody":"Dear Sir/Madam,\r\n\r\nWe use Asp.Net Identity framework as our ACL and wrote some custom code to fit our requirement.  The framework works fine. We use Claims-based authorisation. \r\n\r\nWe found a very strange issue today. There is a user who belongs many roles which have lots of permission claims. And this use keep getting:\r\n\r\n \"HTTP Error 400. The size of the request headers is too long.\" error. \r\n\r\nAnd I checked and found there are some ASP.Net core identity cookies as attached image:\r\n\r\n![img_04042018_090514_0](https://user-images.githubusercontent.com/716782/38407080-6edc3942-39bb-11e8-819f-f43c2bb9272a.png)\r\n\r\nI manually removed cookie and that user could work for a while. And I also found this only happens after second AJAX call (not cross domain AJAX call).\r\n\r\nAfter I remove this user from some roles and only keep one or two roles for him, everything works perfectly.\r\n\r\nMy development environment is .Net Core 1.1. \r\n\r\nDoes anyone have some idea on this issue?\r\n\r\nThanks.\r\n\r\nRegards,\r\nMax\r\n"},{"Id":"7488380870","Type":"IssuesEvent","CreatedAt":"2018-04-06T00:53:37","Actor":"mderriey","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1738","RelatedDescription":"Opened issue \"Would it be possible to separate the Compat DbContext and CookieInterop classes in separate NuGet packages?\" (#1738) at aspnet/Identity","RelatedBody":"Hi there :wave:,\r\n\r\nWe have an existing EF6-, Identity v2-based solution that targets .NET 4.5.1.\r\n\r\nWe want to create a new ASP.NET Core 2.0 application that targets the same database.\r\nSince ASP.NET Core only supports Identity v3, it means the schema needs to be updated.\r\n\r\nThis is where the `Microsoft.AspNet.Identity.AspNetCoreCompat` comes into play.\r\nFrom what I understand, this package allows an application based on Identity v2 to be compatible with the Identity v3 schema. This is done by using the classes in that package.\r\n\r\nNow, in our case, since we want to keep the Identity v2 bits running as-is, we're not interested in sharing cookies between the v2 and v3 app. Still, the package comes with the OWIN-compatible secure data format that allows it to decrypt cookies issues with the new .NET Core DataProtection stack.\r\n\r\nThis has two implications for us:\r\n\r\n - The need to upgrade every single project that uses the ASP.NET Identity v2 to .NET 4.6.1 to be able to install the NuGet package\r\n - Since it depends on the new DataProtection stack and the OWIN-interop, it installs 27 dependent packages that we don't use\r\n\r\nIs there a possibility to separate these two capabilities in separate NuGet packages?\r\n"},{"Id":"7488264414","Type":"IssuesEvent","CreatedAt":"2018-04-06T00:08:03","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1737","RelatedDescription":"Opened issue \"[Preview2-Validation] Pages under Account/Manage loose the 'Title' information from ViewData\" (#1737) at aspnet/Identity","RelatedBody":"For example, when we go to `Manage` page, we should see the title of the html page to be like `Profile - <application-name>` but we only get ` - <application-name>`.\r\n\r\n@pranavkm and I debugged through this and think that the cause of this issue could be with how Identity UI uses a model type(abstract) on the view versus the actual type(implementation). Following line of code is a suspect:\r\nhttps://github.com/aspnet/Mvc/commit/7127bb5dbbb07eb325a2852ac9a91be0cf443205#diff-0901f55a5e636aeef89b9663dafcb625R171"},{"Id":"7487312237","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:02:18","Actor":"dougbu","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1736","RelatedDescription":"Opened issue \"/Identity/Account/ResetPassword page is not reachable when auth required globally\" (#1736) at aspnet/Identity","RelatedBody":"Looks like at least one page was missed when fixing #1617 \r\n## Repro steps\r\n1. `dotnet new mvc --name netcoreIndividualAuth --auth Individual --use-local-db` (doubt `--use-local-db` is mandatory)\r\n2. `cd netcoreIndividualAuth`\r\n3. Open project in Visual Studio\r\n4. Edit `Startup.ConfigureServices(...)` to require an authenticated user globally i.e. change `services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);` to\r\n  ``` c#\r\n  services\r\n      .AddMvc(configuration =>\r\n      {\r\n          var policy = new AuthorizationPolicyBuilder()\r\n              .RequireAuthenticatedUser()\r\n              .Build();\r\n          configuration.Filters.Add(new AuthorizeFilter(policy));\r\n      })\r\n      .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\r\n  ```\r\n\r\n5. Start app in the debugger\r\n6. Ensure debug option \"Enable Just My Code\" is disabled and \"Microsoft Symbol Servers\" are enabled under \"Symbols\"\r\n7. Set C# function breakpoint at `Microsoft.AspNetCore.Identity.UI.Services.EmailSender.SendEmailAsync` \r\n8. In browser, register a new user\r\n9. In debugger, copy the URL in the `htmlMessage` parameter\r\n10. In browser, head to the copied URL but change `&amp;code` to `&code`\r\n11. In browser, log out, click on \"Forgot your password\", then enter the new user's email and click Submit\r\n12. In debugger, copy the URL in the `htmlMessage` parameter\r\n13. In browser, head to the copied URL\r\n\r\n### Expected\r\n- Land on /Identity/Account/ForgotPasswordConfirmation page after step 11\r\n- Land on /Identity/Account/ResetPassword page after step 13\r\n### Actual\r\nRedirected to the login page again in both cases i.e. both page models lack `[AllowAnonymous]` though the lack in /Identity/Account/ResetPassword is more troublesome.\r\n\r\n----\r\nThis is a small part of #1617 which does not work end-to-end. Found while verifying (aspnet/Release#263) with the 2.1.300-preview2-008523 SDK and Microsoft.AspNetCore.Identity.UI 2.1.0-preview2-30552."},{"Id":"7482980019","Type":"IssuesEvent","CreatedAt":"2018-04-05T05:13:01","Actor":"DamianEdwards","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1735","RelatedDescription":"Opened issue \"Localize the default UI\" (#1735) at aspnet/Identity","RelatedBody":"Now that we have Identity UI in a library, we should consider having it use `IViewLocalizer` and `IStringLocalizer` to support localization of the various strings. I think it might be possible to just wrap all strings with calls to these interfaces, but **not** provide any resources, but rather have them picked up via the app if they're provided and configured correctly (we added features in 2.0 if I recall to enable this scenario)."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7495832518","Type":"PullRequestEvent","CreatedAt":"2018-04-08T01:56:00","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2472","RelatedDescription":"Merged pull request \"Remove IConnection\" (#2472) at aspnet/KestrelHttpServer","RelatedBody":"ConnectionContext is now the exchange type on the client and server.\r\n\r\nSee @pakrym I told you it would go away 😜 "},{"Id":"7495769317","Type":"PullRequestEvent","CreatedAt":"2018-04-08T01:05:56","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2472","RelatedDescription":"Opened pull request \"Remove IConnection\" (#2472) at aspnet/KestrelHttpServer","RelatedBody":"ConnectionContext is now the exchange type on the client and server"},{"Id":"7493427851","Type":"PullRequestEvent","CreatedAt":"2018-04-06T22:15:13","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2471","RelatedDescription":"Opened pull request \"Skip flaky tests\" (#2471) at aspnet/KestrelHttpServer","RelatedBody":"Skip tests from #2434 and #2464."},{"Id":"7493032038","Type":"IssuesEvent","CreatedAt":"2018-04-06T20:30:18","Actor":"joshmackey","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2470","RelatedDescription":"Opened issue \"1000ms delay when only IPv4 address is used when specifying ListenOptions for Kestrel.\" (#2470) at aspnet/KestrelHttpServer","RelatedBody":"I've noticed that http requests to Kestrel take at least 1000ms if only a IPv4 endpoint is bound to. If a request normally takes 15ms, it will take 1015ms instead.\r\n\r\nIf you use `UseKestrel()` on its own, it automatically listens to the localhost IPv4 and IPv6 addresses. If you manually specify addresses using `KestrelServerOptions` but only specify a single `Listen` with an IPv4, then you see the bug. If you add a second endpoint that uses IPv6, the bug goes away.\r\n\r\n\r\nUsing a default ASP.NET Core 2 template from VS 2017:\r\n\r\nNo bug\r\n```\r\n.UseKestrel((options) =>\r\n            {\r\n                options.Listen(IPAddress.Loopback, 5000);\r\n                options.Listen(IPAddress.IPv6Loopback, 5000);\r\n            })\r\n```\r\n\r\nBug\r\n```\r\n.UseKestrel((options) =>\r\n            {\r\n                options.Listen(IPAddress.Loopback, 5000);\r\n            })\r\n```\r\n"},{"Id":"7492414240","Type":"IssuesEvent","CreatedAt":"2018-04-06T18:13:46","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2469","RelatedDescription":"Opened issue \"Flaky test: RejectsConnectionsWhenLimitReached\" (#2469) at aspnet/KestrelHttpServer","RelatedBody":"This test fails with the following error:\r\n```\r\nSystem.TimeoutException : The operation at /_/test/shared/TestConnection.cs:129 timed out after reaching the limit of 60000ms.\r\n   at Microsoft.AspNetCore.Testing.TaskExtensions.<TimeoutAfter>d__0`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.TestConnection.<Receive>d__21.MoveNext() in /_/test/shared/TestConnection.cs:line 131\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ConnectionLimitTests.<RejectsConnectionsWhenLimitReached>d__2.MoveNext() in /_/test/Kestrel.FunctionalTests/ConnectionLimitTests.cs:line 113\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nThis is part of an overall issue whose members can all be viewed [here](http://aspnetci/httpAuth/app/rest/builds?locator=tag:timeout,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags))."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7498123485","Type":"IssuesEvent","CreatedAt":"2018-04-09T02:24:23","Actor":"ocdi","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2247","RelatedDescription":"Opened issue \"View Compilation build error in VS15.7 due to missing references\" (#2247) at aspnet/Razor","RelatedBody":"I have a solution with a large number of projects that I am porting to MvcCore. In this solution I have a number of class libraries that contains views. I was using RazorGenerator.MsBuild in the MVC5 days and some view engine hackery to get the main web project to do what you are enabling in 2.1.\r\n\r\nI've been trying out the view precompilation using the 2.1.0-preview1, and I'm using VS 15.7 preview 2.\r\n\r\nI got the code to the point where it compiles. From the command line invoking dotnet build and dotnet run I haven't had any issues, it is working well.\r\n\r\nThe issue I am having is building within Visual Studio I am getting build failures on incremental builds due to missing project references being added to the csc command line. This may not strictly be a View Compilation bug, but I am not sure what else to check.\r\n\r\nI've installed the Project System extension and looked at the build log. It appears that the ResolveProjectReferences isn't being called to populate these dll's and then has the build failure.\r\n\r\nThis only seems to be affecting projects containing views where I have enabled the RazorSdk and and RazorCompileOnBuild=true settings. The csc command does appear to be including PackageReferences.\r\n\r\nStrangely according to the Build Logging it is when building the main project that has references to the class libraries, that it is failing.\r\n\r\nI've managed to reproduce this in a clean class library project. What I did was create a new project on the 2.0 templates, upgraded to 2.1 and created a class library for the views. I've created a common class library and moved the Web models to the Common library. Then I've moved the Account views into the View library. This is referenced from the web project. It seemed to work OK for a single project, however when duplicating the class library I get the same build error in my full solution.\r\n\r\nSometimes it is a bit hard to trigger the bug. The build output looks like this\r\n```\r\nError occurred while restoring NuGet packages: Object reference not set to an instance of an object.\r\n1>------ Build started: Project: ViewClass, Configuration: Debug Any CPU ------\r\n1>ViewClass -> C:\\dev\\BugReport\\ViewClass\\bin\\Debug\\netstandard2.0\\ViewClass.dll\r\n1>ViewClass -> C:\\dev\\BugReport\\ViewClass\\bin\\Debug\\netstandard2.0\\ViewClass.PrecompiledViews.dll\r\n2>------ Build started: Project: BugReport, Configuration: Debug Any CPU ------\r\n2>Class1.cs(1,7,1,17): error CS0246: The type or namespace name 'CommonCode' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Class1.cs(12,30,12,39): error CS0246: The type or namespace name 'SomeClass' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Class1.cs(14,30,14,34): error CS0115: 'SomeOther.Test()': no suitable method found to override\r\n2>Done building project \"ViewClassSecond.csproj\" -- FAILED.\r\n2>Class1.cs(1,7,1,17): error CS0246: The type or namespace name 'CommonCode' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Class1.cs(12,30,12,39): error CS0246: The type or namespace name 'SomeClass' could not be found (are you missing a using directive or an assembly reference?)\r\n2>Class1.cs(14,30,14,34): error CS0115: 'SomeOther.Test()': no suitable method found to override\r\n2>Done building project \"ViewClassThird.csproj\" -- FAILED.\r\n========== Build: 1 succeeded, 1 failed, 3 up-to-date, 0 skipped ==========\r\n```\r\nI've attached the binlog and this is the screenshot. It appears that the project is pulling in the dependency, trying to build the class libraries and this is the scenario it is failing.\r\n\r\n![image](https://user-images.githubusercontent.com/2775804/38476352-a39f899a-3bf0-11e8-91d0-ae16331504d4.png)\r\n\r\n[BugReport_Debug_AnyCPU_Build_2018-04-09T12_20_01.9597168+10_00.binlog.zip](https://github.com/aspnet/Razor/files/1888268/BugReport_Debug_AnyCPU_Build_2018-04-09T12_20_01.9597168.10_00.binlog.zip)\r\n\r\nI'll upload the solution that I managed to reproduce to a new git repo."},{"Id":"7493344010","Type":"IssuesEvent","CreatedAt":"2018-04-06T21:50:26","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2246","RelatedDescription":"Opened issue \"dotnet build includes a refs directory containing all binaries from the shared fx\" (#2246) at aspnet/Razor","RelatedBody":"1. `dotnet new mvc`\r\n2. `dotnet build`\r\n\r\nThere's a refs directory in the `bin\\debug\\netcoreapp2.1` directory containing a slew of files from `Microsoft.NETCore.App` and `Microsoft.AspNetCore.App`."},{"Id":"7492249076","Type":"IssuesEvent","CreatedAt":"2018-04-06T17:38:02","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2245","RelatedDescription":"Closed issue \"extra space when using condition in Razor.\" (#2245) at aspnet/Razor","RelatedBody":"I have this code in my layout file\r\n```\r\n @if (condition1)\r\n    {\r\n        <link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css\" rel=\"stylesheet\" />\r\n    }\r\n    else\r\n    {\r\n        <style>\r\n           // my extra css\r\n        </style>\r\n    }\r\n```\r\nThis thing render with a extra indent. The indent is used for Visual studio format. So in case I have 17 line. Line inside this condition rendered with a extra indent. Is this could be fixed.\r\n\r\nThanks"},{"Id":"7490081599","Type":"IssuesEvent","CreatedAt":"2018-04-06T10:08:55","Actor":"anirugu","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2245","RelatedDescription":"Opened issue \"extra space when using condition in Razor.\" (#2245) at aspnet/Razor","RelatedBody":"I have this code in my layout file\r\n\r\n @if (condition1)\r\n    {\r\n        <link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css\" rel=\"stylesheet\" />\r\n    }\r\n    else\r\n    {\r\n        <style>\r\n           // my extra css\r\n        </style>\r\n    }\r\n\r\nThis thing render with a extra indent. The indent is used for Visual studio format. So in case I have 17 line. Line inside this condition rendered with a extra indent. Is this could be fixed.\r\n\r\nThanks"},{"Id":"7487958066","Type":"PullRequestEvent","CreatedAt":"2018-04-05T22:27:06","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2244","RelatedDescription":"Merged pull request \"Add experimental flag to un-special-case data-\" (#2244) at aspnet/Razor","RelatedBody":"This change allows blazor to opt into treating data- attributes the same\r\nway as normal attributes in the parser."},{"Id":"7487956782","Type":"PullRequestEvent","CreatedAt":"2018-04-05T22:26:44","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2242","RelatedDescription":"Merged pull request \"Add support for type parameters to class nodes\" (#2242) at aspnet/Razor","RelatedBody":"This change will allow someone extending Razor to use generic type\r\nparameters in generated classes.\r\n\r\nThere's no user-level extensibility provided here yet, as in there is no\r\nlanguage support for adding type parameters."},{"Id":"7487904451","Type":"IssuesEvent","CreatedAt":"2018-04-05T22:12:18","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2119","RelatedDescription":"Closed issue \"Razor Sdk: Require docs on various available settings and instructions for users to use the Sdk in a class library\" (#2119) at aspnet/Razor","RelatedBody":"We need some documentation for various settings for the Sdk. In addition, the fwlink https://go.microsoft.com/fwlink/?linkid=868374 needs to include details on how to get the right set of additional references to use the Sdk\r\n\r\n### Wiring up the Sdk\r\n* [ ] RazorCompileOnBuild\r\n* [ ] RazorCompileOnPublish\r\n\r\n### Inputs and outputs\r\n* [ ] EnableDefaultContentItems \r\n* [ ] EnableDefaultRazorGenerateItems\r\n* [ ] GenerateRazorTargetAssemblyInfo\r\n* [ ] EnableDefaultRazorTargetAssemblyInfoAttributes\r\n* [ ] RazorGenerate\r\n* [ ] RazorCompile\r\n* [ ] RazorAssemblyAttribute\r\n* [ ] RazorTargetName\r\n* [ ] RazorOutputPath\r\n* [ ] CopyRazorGenerateFilesToPublishDirectory\r\n* [ ] CopyRefAssembliesToPublishDirectory\r\n* [ ] IncludeRazorContentInPack\r\n* [ ] EmbedRazorGenerateSources\r\n\r\n### Sdk lifecycle targets and properties\r\n* [ ] RazorGenerate\r\n* [ ] RazorCompile\r\n* [ ] RazorCompileToolset\r\n* [ ] UseRazorBuildServer\r\n* [ ] CustomBeforeRazorSdkTargets \\ CustomAfterRazorSdkTargets"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":15,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":98,"FavoriteCount":55,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":159,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2018-04-09T05:30:10.6442663Z","RunDurationInMilliseconds":9077}