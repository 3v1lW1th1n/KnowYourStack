{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7889307332","Type":"IssuesEvent","CreatedAt":"2018-06-28T03:16:34","Actor":"aishiguro","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18682","RelatedDescription":"Opened issue \"ASP.NET Core application terminates with Segmentation fault on ARM.\" (#18682) at dotnet/coreclr","RelatedBody":"I've published my ASP.NET Core application with `-c release -r linux-arm` option.\r\nMy application is running on Linux (Debian 9) in Docker (version 18.05.0-ce, build f150324) on ARM (Cavium ThunderX (2x) Armv8).\r\nThis application works as ASP.NET Core SignalR hub and handles many requests from SignalR clients. However, sometimes dies and outputs core dump file.\r\n\r\nI've read this issue and tried .NET Core 2.1, but the application still dies.\r\n\r\n[Segmentation fault during GC when running on ARM](https://github.com/dotnet/coreclr/issues/13500)\r\n\r\nFollowing is output of gdb from the core dump file:\r\n\r\n`Program terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0xf6d40716 in VirtualCallStubManager::ResolveWorker(StubCallSite*, Object**, DispatchToken, VirtualCallStubManager::StubKind) ()\r\n   from /root/rm/publish/libcoreclr.so\r\n[Current thread is 1 (Thread 0xa1dff450 (LWP 37946))]\r\n(gdb) where\r\n#0  0xf6d40716 in VirtualCallStubManager::ResolveWorker(StubCallSite*, Object**, DispatchToken, VirtualCallStubManager::StubKind) ()\r\n   from /root/rm/publish/libcoreclr.so\r\n#1  0xf6e41478 in ExternalMethodFixupWorker ()\r\n   from /root/rm/publish/libcoreclr.so\r\n#2  0xf6de42e2 in DelayLoad_MethodCall_FakeProlog ()\r\n   from /root/rm/publish/libcoreclr.so\r\n#3  0xbf0b5bb6 in ?? ()\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n`"},{"Id":"7889254873","Type":"PullRequestEvent","CreatedAt":"2018-06-28T02:55:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18423","RelatedDescription":"Closed pull request \"Add public implementation FrameworkEventSourceSupport\" (#18423) at dotnet/coreclr","RelatedBody":"Add class FrameworkEventSourceSupport for S.P.WindowsRuntime to use.\r\n\r\ncorefx PR:https://github.com/dotnet/corefx/pull/30297"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7888673141","Type":"PullRequestEvent","CreatedAt":"2018-06-27T23:14:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9565","RelatedDescription":"Merged pull request \"Merge dev/repo-refactoring into master\" (#9565) at dotnet/cli","RelatedBody":"This was a clean merge.\r\n\r\nWe will also need to update the build defs for cli and core-sdk."},{"Id":"7888397949","Type":"PullRequestEvent","CreatedAt":"2018-06-27T21:55:33","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9467","RelatedDescription":"Merged pull request \"Add a restore and add pkg commands interactive flag\" (#9467) at dotnet/cli","RelatedBody":"This change is dependent on https://github.com/NuGet/NuGet.Client/pull/2288. \r\nIdeally it should be merged when an insertion that contains the above PR happens. \r\n\r\nFixes https://github.com/NuGet/Home/issues/7017\r\n\r\nPart of https://github.com/NuGet/Home/issues/6642. \r\n\r\nPer https://github.com/NuGet/Home/wiki/NuGet-cross-plat-authentication-plugin, we agreed to use the\r\n`--interactive` option in the dotnet restore and add package ref commands to allow the action to be blocked. \r\n\r\nLet me know if I should be targetting a different branch. The change should make it 2.1.4xx in the end. \r\n\r\n//cc\r\n@livarcocc @nguerrera @dsplaisted @peterhuene @wli3 "},{"Id":"7888334227","Type":"IssuesEvent","CreatedAt":"2018-06-27T21:40:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9456","RelatedDescription":"Closed issue \"v2.1.300 Release: Running build.sh produces .NETCore.App framework with \"rtm\" in version string\" (#9456) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n**On Ubuntu 14.04**\r\n1. Checkout this repo at tag `v2.1.300`\r\n2. Run `./build.sh /t:Compile`\r\n3. Open `shared/Microsoft.NETCore.App` directory from build output (see: https://buildpacks.cloudfoundry.org/dependencies/dotnet/dotnet.2.1.300.linux-amd64-07a2e2b2.tar.xz)\r\n\r\n## Expected  behavior\r\n\r\nWe see a folder named `2.1.0`, and can restore/publish/run applications against framework 2.1.0.\r\n\r\n## Actual behavior\r\n\r\nWe see a folder named `2.1.0-rtm-26515-03`. This doesn't seem to be the case when following the steps for installing (vs building from source): https://www.microsoft.com/net/download/linux-package-manager/ubuntu14-04/sdk-current\r\n\r\nSupplying this value in the `.csproj` produces the following warning:\r\n\r\n```\r\nwarning NU1603: simple_brats depends on Microsoft.NETCore.App (>= 2.1.0-rtm-26515-03) but Microsoft.NETCore.App 2.1.0-rtm-26515-03 was not found. An approximate best match of Microsoft.NETCore.App 2.1.0 was resolved.\r\n```\r\n \r\n## Other information\r\n\r\n* We've tried simply renaming the directory to `2.1.0` just after building, but this causes downstream failures when trying to restore/publish/run. It seems that the `rtm` version number is \"baked in\" elsewhere.\r\n* What DOES work is symlinking instead of renaming, so both directories exist.\r\n* Supplying a `*.runtimeconfig.json` with the `rtm` version number referenced seems to alleviate the issue, but unfortunately is not an option for us.\r\n* For reference, the app that is being deployed can be found here: https://github.com/cloudfoundry/dotnet-core-buildpack/tree/develop/fixtures/simple_brats (replacing the template variables with `netcoreapp2.1`, `2.1.300`, and `2.1.0-rtm-26515-03` where appropriate).\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7886233864","Type":"IssuesEvent","CreatedAt":"2018-06-27T14:42:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9569","RelatedDescription":"Closed issue \"dotnet pack includes all dependencies even if specific TargetFramework is given\" (#9569) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nAfter upgrading to dotnet sdk 2.1.300 using dotnet pack for specific TargetFramework includes also dependencies from the other TargetFrameworks.\r\n\r\nThats my csproj\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <VersionPrefix>1.0.3</VersionPrefix>\r\n    <TargetFrameworks>netstandard1.6;netstandard1.5</TargetFrameworks>\r\n    <AssemblyName>In.Dto</AssemblyName>\r\n    <PackageId>In.Dto</PackageId>\r\n    <NetStandardImplicitPackageVersion>1.6.1</NetStandardImplicitPackageVersion>\r\n    <PackageTargetFallback Condition=\" '$(TargetFramework)' == 'netstandard1.6' \">$(PackageTargetFallback);dnxcore50</PackageTargetFallback>\r\n    <PackageTargetFallback Condition=\" '$(TargetFramework)' == 'netstandard1.5' \">$(PackageTargetFallback);dnxcore50;portable-net45+win8</PackageTargetFallback>\r\n    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>\r\n    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>\r\n    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>\r\n    <Version>1.0.3</Version>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.6' \">\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Features\" Version=\"1.1.2\" />\r\n    <ProjectReference Include=\"..\\In.Shared\\In.Shared.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netstandard1.5' \">\r\n    <DefineConstants>$(DefineConstants);MOBILE</DefineConstants>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.5' \">\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"PropertyChanged.Fody\" Version=\"2.1.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nPreviously with .net sdk 2.0 when running\r\n```\r\ndotnet pack --no-build  /p:TargetFrameworks=netstandard1.5 /p:P\r\nackageVersion=1.0.36\r\n```\r\n\r\n![snap1](https://user-images.githubusercontent.com/847472/41970038-077d64b4-7a12-11e8-9359-dff108a618f9.png)\r\n\r\nafter installing .net sdk 2.1 i am getting all dependencies\r\n![snap2](https://user-images.githubusercontent.com/847472/41970084-2d22af44-7a12-11e8-8ff5-796bbd66ec32.png)\r\n\r\n## Expected  behavior\r\nproduced nupkg should include dependencies for specific TargetFramework\r\n\r\n## Actual behavior\r\n\r\nproduced nupkg includes dependencies from all TargetFrameworks\r\n## Environment data\r\n```\r\ndotnet --version\r\n2.1.300\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7885022457","Type":"IssuesEvent","CreatedAt":"2018-06-27T11:01:21","Actor":"xalikoutis","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9569","RelatedDescription":"Opened issue \"dotnet pack includes all dependencies even if specific TargetFramework is given\" (#9569) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nAfter upgrading to dotnet sdk 2.1.300 using dotnet pack for specific TargetFrameworks includes all dependencies including other TargetFrameworks.\r\n\r\nThats my csproj\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <VersionPrefix>1.0.3</VersionPrefix>\r\n    <TargetFrameworks>netstandard1.6;netstandard1.5</TargetFrameworks>\r\n    <AssemblyName>In.Dto</AssemblyName>\r\n    <PackageId>In.Dto</PackageId>\r\n    <NetStandardImplicitPackageVersion>1.6.1</NetStandardImplicitPackageVersion>\r\n    <PackageTargetFallback Condition=\" '$(TargetFramework)' == 'netstandard1.6' \">$(PackageTargetFallback);dnxcore50</PackageTargetFallback>\r\n    <PackageTargetFallback Condition=\" '$(TargetFramework)' == 'netstandard1.5' \">$(PackageTargetFallback);dnxcore50;portable-net45+win8</PackageTargetFallback>\r\n    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>\r\n    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>\r\n    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>\r\n    <Version>1.0.3</Version>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.6' \">\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Features\" Version=\"1.1.2\" />\r\n    <ProjectReference Include=\"..\\In.Shared\\In.Shared.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netstandard1.5' \">\r\n    <DefineConstants>$(DefineConstants);MOBILE</DefineConstants>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.5' \">\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"PropertyChanged.Fody\" Version=\"2.1.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nPreviously with .net sdk 2.0 when running\r\n```\r\ndotnet pack --no-build --no-dependencies /p:TargetFrameworks=netstandard1.5 /p:P\r\nackageVersion=1.0.36\r\n```\r\n\r\n![snap1](https://user-images.githubusercontent.com/847472/41970038-077d64b4-7a12-11e8-9359-dff108a618f9.png)\r\n\r\nafter installing .net sdk 2.1 i am getting\r\n![snap2](https://user-images.githubusercontent.com/847472/41970084-2d22af44-7a12-11e8-8ff5-796bbd66ec32.png)\r\n\r\n## Expected  behavior\r\nproduced nupkg should include dependencies for specific TargetFramework\r\n\r\n## Actual behavior\r\n\r\nproduced nupkg includes dependencies from all TargetFrameworks\r\n## Environment data\r\n```\r\ndotnet --version\r\n2.1.300\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7882914635","Type":"PullRequestEvent","CreatedAt":"2018-06-27T01:36:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9568","RelatedDescription":"Merged pull request \"Update SDK to 2.1.400-preview-63027-01\" (#9568) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7889254458","Type":"IssuesEvent","CreatedAt":"2018-06-28T02:55:37","Actor":"yuessir","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/784","RelatedDescription":"Closed issue \"netstandard2.0.3 library project is not compatible with netcoreapp2.1 core proj?\" (#784) at dotnet/standard","RelatedBody":"Hi all \r\nI have two projects:\r\nProject FoundationA.Lib e : .Net Standard project.\r\nProject FoundationB.Lib e : .Net Core 2.1 project.\r\n\r\nAs FoundationA.Lib reference to  FoundationB.Lib  and\r\nI got the error like following: \r\n\"Project FoundationA.Lib is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project FoundationB.Lib supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\"\r\n\r\nIs it normal? or what details do I have to pay attention to?\r\nThanks.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7887859303","Type":"PullRequestEvent","CreatedAt":"2018-06-27T19:58:17","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/785","RelatedDescription":"Opened pull request \"WIP: Add planning for .NET Standard vNext\" (#785) at dotnet/standard","RelatedBody":"Preparing the planing documents. Not ready for review yet."},{"Id":"7880568064","Type":"IssuesEvent","CreatedAt":"2018-06-26T16:17:18","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/779","RelatedDescription":"Closed issue \"netstandard equivalent of Environment.UserName on Linux\" (#779) at dotnet/standard","RelatedBody":"Environment.UserName documentation in netstandard says \" Gets the user name of the person who is currently logged on to the Windows operating system.\"\r\n\r\nWhat is its equivalent for netstandard on linux? Does the same property work on Linux as well?"},{"Id":"7879886077","Type":"IssuesEvent","CreatedAt":"2018-06-26T14:32:14","Actor":"yuessir","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/784","RelatedDescription":"Opened issue \"netstandard2.0.3 library project is not compatible with netcoreapp2.0 core proj?\" (#784) at dotnet/standard","RelatedBody":"Hi all \r\nI have two projects:\r\nProject FoundationA.Lib e : .Net Standard project.\r\nProject FoundationB.Lib e : .Net Core 2.1 project.\r\n\r\nAs FoundationA.Lib reference to  FoundationB.Lib  and\r\nI got the error like following: \r\n\"Project FoundationA.Lib is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project FoundationB.Lib supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\"\r\n\r\nIs it normal? or what details do I have to pay attention to?\r\nThanks.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7877227494","Type":"IssuesEvent","CreatedAt":"2018-06-26T06:04:01","Actor":"TheRealMal","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/783","RelatedDescription":"Opened issue \"System.Numerics missing Vector2 and others\" (#783) at dotnet/standard","RelatedBody":"![missing-vector2](https://user-images.githubusercontent.com/28099273/41891784-ca8148c0-78e3-11e8-88cd-3db4e7454bb2.png)\r\n\r\nI'm trying to move library code from \"Framework\" to \"Standard 2.0/Core 2.1\" so that I can then reference the standard/core dll from the remaining legacy framework programs. Overall that process, despite all the marketing material available, has been a confusing mess of opaque terms and broken dreams.\r\n\r\nIn any event, I believe everything I have read (per the .NET implementation support table) indicates that the current Standard version and Core version should work together without issue. Yet the above pictured problem has added another layer of aggravation. I have looked, without success, to find a way to marry this dependency error.\r\n\r\nPossibly related to #250.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7889515860","Type":"PullRequestEvent","CreatedAt":"2018-06-28T04:44:39","Actor":"fiigii","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30719","RelatedDescription":"Opened pull request \"Fix Aes and Ssse3.Shuffle intrinsic APIs\" (#30719) at dotnet/corefx","RelatedBody":"@stephentoub "},{"Id":"7889511766","Type":"IssuesEvent","CreatedAt":"2018-06-28T04:42:51","Actor":"SteveL-MSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30718","RelatedDescription":"Opened issue \"UseShellExecute on macOS passes Arguments to `open` instead of specified `filename`\" (#30718) at dotnet/corefx","RelatedBody":"Using PSCore6:\r\n\r\n```powershell\r\n$si = [System.Diagnostics.ProcessStartInfo]::new()\r\n$si.UseShellExecute = $true\r\n$si.FileName = \"pwsh\"\r\n$si.Arguments = \"-c 1+1;read-host\"\r\n[System.Diagnostics.Process]::Start($si)\r\n```\r\n\r\nExpected:\r\n\r\nStart new instance of PowerShell outputting answer of `2` and waiting for `Enter`, then exit.\r\n\r\nActual:\r\n\r\nHelp for `open` command is displayed since `-c` is not valid.\r\n\r\nWhen using `open`, arguments to the executable are passed as `--args <arguments>`\r\n\r\nThe above script works as expected on Windows."},{"Id":"7889402925","Type":"PullRequestEvent","CreatedAt":"2018-06-28T03:54:52","Actor":"tgiphil","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30717","RelatedDescription":"Opened pull request \"Changed internal value to readonly for primitive types\" (#30717) at dotnet/corefx","RelatedBody":"See PR in CoreCLR: https://github.com/dotnet/coreclr/pull/18645"},{"Id":"7889358030","Type":"PullRequestEvent","CreatedAt":"2018-06-28T03:36:27","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30716","RelatedDescription":"Opened pull request \"Fix compilation for deprecated API on macOS Mojave preview\" (#30716) at dotnet/corefx","RelatedBody":"Fixes: #30599 \r\n\r\ncc: @danmosemsft @bartonjs "},{"Id":"7889324954","Type":"PullRequestEvent","CreatedAt":"2018-06-28T03:23:37","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/30704","RelatedDescription":"Closed pull request \"Fix Aes and Ssse3.Shuffle intrinsic APIs\" (#30704) at dotnet/corefx","RelatedBody":"Match the CoreCLR changes https://github.com/dotnet/corefx/pull/30700 https://github.com/dotnet/coreclr/pull/18663\r\n\r\n@jkotas @eerhardt "},{"Id":"7889322181","Type":"PullRequestEvent","CreatedAt":"2018-06-28T03:22:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30715","RelatedDescription":"Opened pull request \"Disable Tizen leg on PRs\" (#30715) at dotnet/corefx","RelatedBody":"It's failing with an updated coreclr:\r\nhttps://github.com/dotnet/corefx/pull/30662#issuecomment-400695140\r\n\r\ncc: @weshaggard, @gbalykov, @mmitche "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7889478891","Type":"IssuesEvent","CreatedAt":"2018-06-28T04:28:05","Actor":"yaakov-h","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28175","RelatedDescription":"Opened issue \"IDE0039 'Use local function' suggestion breaks code.\" (#28175) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Enterprise 2017 Preview\r\nVersion 15.8.0 Preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Write the following code:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace IDE0039\r\n{\r\n    public class IDE0039\r\n    {\r\n        void Foo<T1, T2, T3>(Action<T1, T2, T3> func) { }\r\n\r\n        public void InvokeFoo()\r\n        {\r\n            Action<object, string, int> func = (o, s, i) => { };\r\n            Foo(func);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n2. Invoke the IDE0039 code-fix on line 11\r\n\r\n**Expected Behavior**:\r\n\r\nResulting code is valid C# and still compiles.\r\n\r\n**Actual Behavior**:\r\n\r\nError CS0411: The type arguments for method 'IDE0039.Foo<T1, T2, T3>(Action<T1, T2, T3>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.\r\n\r\nTransformed code:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace IDE0039\r\n{\r\n    public class IDE0039\r\n    {\r\n        void Foo<T1, T2, T3>(Action<T1, T2, T3> func) { }\r\n\r\n        public void InvokeFoo()\r\n        {\r\n            void func(object o, string s, int i) { }\r\n            Foo(func);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n"},{"Id":"7889338350","Type":"IssuesEvent","CreatedAt":"2018-06-28T03:28:54","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28174","RelatedDescription":"Opened issue \"VBCSCompiler is still being treated as critical process\" (#28174) at dotnet/roslyn","RelatedBody":"According to https://github.com/dotnet/roslyn/issues/24610 and https://developercommunity.visualstudio.com/content/problem/164302/visual-studio-updates-should-not-hang-on-vbcscompi.html, vbcscompiler should not be treated as critical process. But testing on the latest internal build of 15.8, it still is.\r\n\r\n**Version Used**: \r\nSetup: 1.17.1250.618\r\nVS: Version 15.8.0 Preview 4.0 [27821.3001.d15.8stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New Console App (.NET Framework)\r\n2. Build\r\n3. Close VS\r\n4. Open Visual Studio Installer\r\n5. In the same instance as above, modify installation by unchecking/checking an option feature and choose Install\r\n\r\n**Expected Behavior**:\r\nInstall to proceed without prompts\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/42011508-0d93e4d4-7ad7-11e8-99de-01e480e498a9.png)\r\n"},{"Id":"7888947493","Type":"IssuesEvent","CreatedAt":"2018-06-28T00:56:00","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28170","RelatedDescription":"Closed issue \"Executing \"Console.Read();\" in the interactive window hangs\" (#28170) at dotnet/roslyn","RelatedBody":"**Steps to Reproduce**:\r\n\r\n1. open C# interactive window\r\n2. type `Console.Read();`\r\n3. press enter\r\n\r\n**Expected Behavior**:\r\n?\r\n\r\n**Actual Behavior**:\r\nThe interactive window becomes unresponsive.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7888951540","Type":"PullRequestEvent","CreatedAt":"2018-06-28T00:57:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6027","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6027) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7888766909","Type":"PullRequestEvent","CreatedAt":"2018-06-27T23:46:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6027","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6027) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7888760149","Type":"PullRequestEvent","CreatedAt":"2018-06-27T23:44:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6026","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6026) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tgiphil @tgiphil @Anipik"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7888573520","Type":"IssuesEvent","CreatedAt":"2018-06-27T22:43:21","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2275","RelatedDescription":"Closed issue \"Update default package version for .NET Core 2.1 once the RTM package has shipped\" (#2275) at dotnet/sdk","RelatedBody":"Once there is a 2.1.0 version of the Microsoft.NETCore.App package available, we need to update the [sdk logic](https://github.com/dotnet/sdk/blob/dc8eef4824cbc6ba23f51f8d09bb8af6d51a517b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L107-L116) that selects the package version to use.  Otherwise, when 2.1.1 ships, framework-dependent apps would roll forward to 2.1.1.\r\n\r\nWhile we're add it, we should add test coverage that we get the right package version when targeting .NET Core 2.1.\r\n\r\n- [x] https://github.com/dotnet/sdk/pull/2298\r\n- [x] test it manually when there is a build out.\r\n- [x] Add test to CLI that will catch portable not move forward that is similar to dotnet/cli#8919\r\n- [x] CLI sets UseBundledVersionAsDefaultVersion based on patch version == 0 and is preview == true\r\n- [x] Change SDK to use (4)"},{"Id":"7888572998","Type":"PullRequestEvent","CreatedAt":"2018-06-27T22:43:10","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2365","RelatedDescription":"Merged pull request \"Use UseBundledNETCoreAppPackageVersionAsDefaultNetCorePatchVersion\" (#2365) at dotnet/sdk","RelatedBody":"the last part of https://github.com/dotnet/sdk/issues/2275"},{"Id":"7886283120","Type":"IssuesEvent","CreatedAt":"2018-06-27T14:50:38","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2368","RelatedDescription":"Closed issue \"2.1.301: SDK/Runtime Mismatch In Targets\" (#2368) at dotnet/sdk","RelatedBody":"## Steps to reproduce\r\na) Installed SDK 2.1.301\r\nb) Open minimal project, .csproj is:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1.1</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nc) Build (`dotnet build`)\r\n\r\n## Expected  behavior\r\nThe project should build without error.\r\n\r\n## Actual behavior\r\nBuild error: \r\n_Microsoft.NET.TargetFrameworkInference.targets(137, 5): [null] The current .NET SDK does not support targeting .NET Core 2.1.1.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.1._\r\n\r\nIn C:\\Program Files\\dotnet\\sdk\\2.1.301\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets, line 130 states:  `<NETCoreAppMaximumVersion>2.1</NETCoreAppMaximumVersion>`\r\n\r\nIf I hack this value to 2.1.1 the project builds.\r\n\r\nNB, I also have similar issue with an aspnet project (targetframework netcoreapp2.1.1) with the sdk: \r\n\r\n_Microsoft.AspNetCore.App.targets(14, 5): [null] This version of Microsoft.AspNetCore.App is only compatible with the netcoreapp2.1 target framework. Please target netcoreapp2.1 or choose a version of Microsoft.AspNetCore.App compatible with netcoreapp2.1.1_\r\n\r\nIn C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.app\\2.1.1\\build\\netcoreapp2.1\\Microsoft.AspNetCore.App.targets the error condition is:\r\n```\r\n<Target Name=\"EnsureTFMCompatibility\" BeforeTargets=\"_CheckForInvalidConfigurationAndPlatform\">\r\n    <Error\r\n      Text=\"This version of Microsoft.AspNetCore.App is only compatible with the netcoreapp2.1 target framework. Please target netcoreapp2.1 or choose a version of Microsoft.AspNetCore.App compatible with $(TargetFramework).\"\r\n      Condition=\"'$(TargetFramework)' != 'netcoreapp2.1'\"/>\r\n  </Target>\r\n```\r\nagain, I think this should be 2.1.1?\r\n\r\n## Environment data\r\ndotnet --info output from proj dir:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]"},{"Id":"7885800498","Type":"IssuesEvent","CreatedAt":"2018-06-27T13:32:32","Actor":"paulquinn","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2368","RelatedDescription":"Opened issue \"2.1.1: SDK/Runtime Mismatch In Targets\" (#2368) at dotnet/sdk","RelatedBody":"## Steps to reproduce\r\na) Installed SDK 2.1.301\r\nb) Open minimal project, .csproj is:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1.1</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nc) Build (`dotnet build`)\r\n\r\n## Expected  behavior\r\nThe project should build without error.\r\n\r\n## Actual behavior\r\nBuild error: \r\n_Microsoft.NET.TargetFrameworkInference.targets(137, 5): [null] The current .NET SDK does not support targeting .NET Core 2.1.1.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.1._\r\n\r\nIn C:\\Program Files\\dotnet\\sdk\\2.1.301\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets, line 130 states:  `<NETCoreAppMaximumVersion>2.1</NETCoreAppMaximumVersion>`\r\n\r\nIf I hack this value to 2.1.1 the project builds.\r\n\r\nNB, I also have similar issue with an aspnet project (targetframework netcoreapp2.1.1) with the sdk: \r\n\r\n_Microsoft.AspNetCore.App.targets(14, 5): [null] This version of Microsoft.AspNetCore.App is only compatible with the netcoreapp2.1 target framework. Please target netcoreapp2.1 or choose a version of Microsoft.AspNetCore.App compatible with netcoreapp2.1.1_\r\n\r\nIn C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.app\\2.1.1\\build\\netcoreapp2.1\\Microsoft.AspNetCore.App.targets the error condition is:\r\n```\r\n<Target Name=\"EnsureTFMCompatibility\" BeforeTargets=\"_CheckForInvalidConfigurationAndPlatform\">\r\n    <Error\r\n      Text=\"This version of Microsoft.AspNetCore.App is only compatible with the netcoreapp2.1 target framework. Please target netcoreapp2.1 or choose a version of Microsoft.AspNetCore.App compatible with $(TargetFramework).\"\r\n      Condition=\"'$(TargetFramework)' != 'netcoreapp2.1'\"/>\r\n  </Target>\r\n```\r\n- again, I think this should be 2.1.1?\r\n\r\n## Environment data\r\ndotnet --info output from proj dir:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]"},{"Id":"7883039566","Type":"PullRequestEvent","CreatedAt":"2018-06-27T02:22:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2367","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to master\" (#2367) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7882705674","Type":"PullRequestEvent","CreatedAt":"2018-06-27T00:15:01","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2336","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.8.0-preview3.5278 into sdk\" (#2336) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview3.5278 into sdk release/2.1.4xx branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1010269960948465665","CreatedAt":"2018-06-22T21:15:03+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 End of Life Extended to October 1, 2018 https://t.co/KQAlfqjfGv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":51,"FavoriteCount":51,"RawContent":null},{"Id":"1010268594725269504","CreatedAt":"2018-06-22T21:09:37+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 June Update https://t.co/GJkOJkg0zJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":85,"RawContent":null},{"Id":"1010144767924154368","CreatedAt":"2018-06-22T12:57:34+00:00","UserScreenname":"dotnet","Text":"It's #fsharp Friday on Fritz and Friends with our friend @csharpfritz  -- tune in today and learn about… https://t.co/tBMBYu7qnC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"1009783192751099904","CreatedAt":"2018-06-21T13:00:48+00:00","UserScreenname":"dotnet","Text":"These two are always great to learn from separately, and today they're working together.  You won't want to miss… https://t.co/DhpOULOjfn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"1009514602428710912","CreatedAt":"2018-06-20T19:13:31+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 will reach End of Life on September 1, 2018 https://t.co/5PoTWEAQgt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":269,"FavoriteCount":305,"RawContent":null},{"Id":"1009477602791133186","CreatedAt":"2018-06-20T16:46:30+00:00","UserScreenname":"dotnet","Text":"Call for papers now open for #dotnetconf virtual event in September! Present to our worldwide community. No travel… https://t.co/KraqcAKxAo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":356,"FavoriteCount":255,"RawContent":null},{"Id":"1009207915775811584","CreatedAt":"2018-06-19T22:54:51+00:00","UserScreenname":"dotnet","Text":"The RyuJIT transition is complete! https://t.co/JhkSV0Aybh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":322,"FavoriteCount":171,"RawContent":null}]}},"RunOn":"2018-06-28T05:30:33.8461185Z","RunDurationInMilliseconds":7804}