{"Data":{"GitHub":{"Issues":[{"Id":"391431729","IsPullRequest":false,"CreatedAt":"2018-12-16T03:28:13","Actor":"a44281071","Number":"176","RawContent":null,"Title":"LinearGradientBrush in Multi-language text element bug.","State":"open","Body":"```xaml\r\n  <Window.Resources>\r\n    <LinearGradientBrush x:Key=\"brush1\" StartPoint=\"0,0.5\" EndPoint=\"1,0.5\">\r\n      <GradientStop Offset=\"0\" Color=\"Red\" />\r\n      <GradientStop Offset=\"1\" Color=\"blue\" />\r\n    </LinearGradientBrush>\r\n  </Window.Resources> \r\n  <TextBlock Foreground=\"{StaticResource brush1}\" Text=\"我是abcdefg文本わたしは\" /> \r\n```\r\nDisplay result in view ↓ (bad):\r\n![bad image](https://social.msdn.microsoft.com/Forums/getfile/1370019)\r\nThis is default font (MS YaHei) in zh-cn OS. ","Url":"https://github.com/dotnet/wpf/issues/176","RelatedDescription":"Open issue \"LinearGradientBrush in Multi-language text element bug.\" (#176)"},{"Id":"391376543","IsPullRequest":true,"CreatedAt":"2018-12-15T13:08:33","Actor":"dotnet-maestro[bot]","Number":"175","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/175","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#175)"},{"Id":"391334197","IsPullRequest":false,"CreatedAt":"2018-12-15T02:08:28","Actor":"lindexi","Number":"174","RawContent":null,"Title":"We can change the dispatcher in dependency property recursively.","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nSometime, we may write the code cross thread to improve performance. But we are hard to share the dependency property to other thread.\r\n\r\nAs we know the DependencyObject is inherited from DispatcherObject in WPF. And the WPF use DispatcherObject.CheckAccess to check the calling thread and the creating thread. Some of the dependency property will call the DispatcherObject.DetachFromDispatcher to set their dispatcher to null to share the dependency property to other threads.\r\n\r\nBut I need to change all of the DependencyObject in a control that I want to share it with other threads. I hope we can use some method like Freeze to freeze some control to share it with other threads. Or we can set the dispatcher in dependency property recursively.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/174","RelatedDescription":"Open issue \"We can change the dispatcher in dependency property recursively.\" (#174)"},{"Id":"391322913","IsPullRequest":true,"CreatedAt":"2018-12-15T00:30:01","Actor":"walterlv","Number":"173","RawContent":null,"Title":"Use nameof keyword instead of hard coded parameter names","State":"open","Body":"It's better for method refactoring.","Url":"https://github.com/dotnet/wpf/pull/173","RelatedDescription":"Open PR \"Use nameof keyword instead of hard coded parameter names\" (#173)"},{"Id":"391293884","IsPullRequest":true,"CreatedAt":"2018-12-14T22:09:56","Actor":"rladuca","Number":"172","RawContent":null,"Title":"Enabling XLIFF generation","State":"closed","Body":"Generates XLIFF files via a copy of the Arcade localization targets that doesn't require IsShipping to be true.\r\nFixes #171 ","Url":"https://github.com/dotnet/wpf/pull/172","RelatedDescription":"Closed or merged PR \"Enabling XLIFF generation\" (#172)"},{"Id":"391293508","IsPullRequest":false,"CreatedAt":"2018-12-14T22:09:56","Actor":"rladuca","Number":"171","RawContent":null,"Title":"Start generating XLIFF data from System.Xaml","State":"closed","Body":"We are not currently setup to generate XLIFF data.\r\n\r\nWe need to configure the repo to do so as a first step in the localization pipeline.","Url":"https://github.com/dotnet/wpf/issues/171","RelatedDescription":"Closed issue \"Start generating XLIFF data from System.Xaml\" (#171)"},{"Id":"391148006","IsPullRequest":false,"CreatedAt":"2018-12-14T15:10:07","Actor":"YannikZ12","Number":"170","RawContent":null,"Title":"Make MarkupExtension an interface","State":"open","Body":"I believe that making MarkupExtension an interface enables developers to work with (Static/Dynamic)Resources more flexibly. In my case it has hurt the creation of ResourceDictionaries with simple types like Double (e.g. font sizes or the like) or fonts in general. \r\n\r\nThe implementation of the class is already really close to that of an interface so it should not be too much work to make the change.\r\n\r\nExample:\r\n```\r\n<TypeOfIMarkupExtension x:Key=\"GlobalFontSize\" Value=\"{Binding BindingToMyClass}\"/>\r\n\r\n<TextBlock FontSize=\"{StaticResource GlobalFontSize}\"/>\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/170","RelatedDescription":"Open issue \"Make MarkupExtension an interface\" (#170)"},{"Id":"391103096","IsPullRequest":true,"CreatedAt":"2018-12-14T13:08:57","Actor":"dotnet-maestro[bot]","Number":"169","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/169","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#169)"},{"Id":"390844871","IsPullRequest":false,"CreatedAt":"2018-12-13T20:22:50","Actor":"legistek","Number":"168","RawContent":null,"Title":"Thread Safe DependencyProperty Setting/Getting","State":"open","Body":"I'm gonna say at the outset I don't pretend to know all the reasons why setting  `DependencyProperty`s is not threadsafe (in other words, they always must be set on the UI thread), but I do know that it can be a gigantic pain to build responsive multithreaded UIs while dealing with this issue .This is particularly true in the MVVM pattern where we have `DependencyProperty`'s data bound to view model properties, and we would like to change those view model properties in worker threads.\r\n\r\nI do realize one major problem is that you can't have properties that might affect layout / measure being changed by other threads during the layout pass, and using thread locking to prevent this would mean that worker threads could get blocked by UI updates, which tends to defeat the purpose of multithreading. \r\n\r\nOne possibility, however, might be to allow the `SetValue` (or more frequently binding source property updates) to succeed when triggered in a worker thread, but internally to use the dispatcher to handle the property change. _Basically do transparently what we now have to do manually._ Until the dispatcher gets to the actual change there would be a slight disconnect between what the viewmodel thinks the value is and what the UI thinks it is, but again we have to deal with this now when using the dispatcher (i.e. we don't know when the effect of property changes will actually propagate to the UI if they occur on a worker thread). \r\n\r\nI could easily be overlooking other difficulties, as well as other possible solutions. Either way I didn't see this among any of the issues opened since the open source announcement and thought I'd raise it to for discussion.","Url":"https://github.com/dotnet/wpf/issues/168","RelatedDescription":"Open issue \"Thread Safe DependencyProperty Setting/Getting\" (#168)"},{"Id":"390799366","IsPullRequest":false,"CreatedAt":"2018-12-13T18:14:35","Actor":"l0hn","Number":"167","RawContent":null,"Title":"Core 3.0 WPF module not found crash for non-Win10 machines","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n3.0 Preview1\r\n* Windows version: (`winver`)\r\n6.2 (Build 9200)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nNo\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n Attempting to run a .net core 3.0 WPF app (the default hello .net core app) on any Windows version other than Windows 10 causes a crash with the error \"module not found\" (c06d007e). Guessing this is due to attempting to use one of the newer dpi awareness methods that were added in win10 but not entirely sure.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nCrash dump output:\r\n```\r\n0:007> !analyze -v\r\n*******************************************************************************\r\n*                                                                             *\r\n*                        Exception Analysis                                   *\r\n*                                                                             *\r\n*******************************************************************************\r\n\r\n*** WARNING: Unable to verify checksum for wpfgfx_cor3.dll\r\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for wpfgfx_cor3.dll - \r\n*** WARNING: Unable to verify checksum for coretest.exe\r\nGetUrlPageData2 (WinHttp) failed: 12002.\r\n\r\nKEY_VALUES_STRING: 1\r\n\r\n\r\nSTACKHASH_ANALYSIS: 1\r\n\r\nTIMELINE_ANALYSIS: 1\r\n\r\nTimeline: !analyze.Start\r\n    Name: <blank>\r\n    Time: 2018-12-13T15:31:00.140Z\r\n    Diff: 1708140 mSec\r\n\r\nTimeline: Dump.Current\r\n    Name: <blank>\r\n    Time: 2018-12-13T15:02:32.0Z\r\n    Diff: 0 mSec\r\n\r\nTimeline: Process.Start\r\n    Name: <blank>\r\n    Time: 2018-12-13T15:02:25.0Z\r\n    Diff: 7000 mSec\r\n\r\nTimeline: OS.Boot\r\n    Name: <blank>\r\n    Time: 2018-12-13T12:45:50.0Z\r\n    Diff: 8202000 mSec\r\n\r\n\r\nDUMP_CLASS: 2\r\n\r\nDUMP_QUALIFIER: 400\r\n\r\nCONTEXT:  (.ecxr)\r\nrax=00000025c6741c00 rbx=0000000000000000 rcx=0000000000000000\r\nrdx=0000000000000000 rsi=000007f8451fdb8c rdi=0000000000000000\r\nrip=000007f8540f89cc rsp=00000025e27adcf0 rbp=00000025e27ade48\r\n r8=00000025e3082960  r9=0000000000000000 r10=0000000000000000\r\nr11=000007f7ee5cf000 r12=000007f845227000 r13=000007f8451fdc98\r\nr14=000007f845209cd0 r15=0000000000000000\r\niopl=0         nv up ei pl nz na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206\r\nKERNELBASE!RaiseException+0x68:\r\n000007f8`540f89cc 488b8c24c0000000 mov     rcx,qword ptr [rsp+0C0h] ss:00000025`e27addb0=0000e6ffe326b63d\r\nResetting default scope\r\n\r\nFAULTING_IP: \r\nKERNELBASE!RaiseException+68\r\n000007f8`540f89cc 488b8c24c0000000 mov     rcx,qword ptr [rsp+0C0h]\r\n\r\nEXCEPTION_RECORD:  (.exr -1)\r\nExceptionAddress: 000007f8540f89cc (KERNELBASE!RaiseException+0x0000000000000068)\r\n   ExceptionCode: c06d007e\r\n  ExceptionFlags: 00000000\r\nNumberParameters: 1\r\n   Parameter[0]: 00000025e27addf0\r\n\r\nERROR_CODE: (NTSTATUS) 0xc06d007e - <Unable to get error code text>\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xc06d007e - <Unable to get error code text>\r\n\r\nEXCEPTION_CODE_STR:  c06d007e\r\n\r\nEXCEPTION_PARAMETER1:  00000025e27addf0\r\n\r\nWATSON_BKT_PROCSTAMP:  5bf60478\r\n\r\nWATSON_BKT_PROCVER:  1.0.0.0\r\n\r\nPROCESS_VER_PRODUCT:  coretest\r\n\r\nWATSON_BKT_MODULE:  KERNELBASE.dll\r\n\r\nWATSON_BKT_MODSTAMP:  5010ab2d\r\n\r\nWATSON_BKT_MODOFFSET:  189cc\r\n\r\nWATSON_BKT_MODVER:  6.2.9200.16384\r\n\r\nMODULE_VER_PRODUCT:  Microsoft® Windows® Operating System\r\n\r\nBUILD_VERSION_STRING:  6.2.9200.16384 (win8_rtm.120725-1247)\r\n\r\nMODLIST_WITH_TSCHKSUM_HASH:  2ab97307aab086ad6476e028060b7abe8bf6c20d\r\n\r\nMODLIST_SHA1_HASH:  fa2433f03f4ae8073e25bf736d39b590969c12da\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nPROCESS_BAM_CURRENT_THROTTLED: 0\r\n\r\nPROCESS_BAM_PREVIOUS_THROTTLED: 0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nPRODUCT_TYPE:  1\r\n\r\nSUITE_MASK:  272\r\n\r\nDUMP_FLAGS:  c07\r\n\r\nDUMP_TYPE:  3\r\n\r\nPROCESS_NAME:  unknown\r\n\r\nANALYSIS_SESSION_TIME:  12-13-2018 15:31:00.0140\r\n\r\nANALYSIS_VERSION: 10.0.17763.1 amd64fre\r\n\r\nMANAGED_CODE: 1\r\n\r\nMANAGED_ENGINE_MODULE:  coreclr\r\n\r\nMANAGED_ANALYSIS_PROVIDER:  SOS\r\n\r\nTHREAD_ATTRIBUTES: \r\nOS_LOCALE:  ENG\r\n\r\nBUGCHECK_STR:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH\r\n\r\nDEFAULT_BUCKET_ID:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH\r\n\r\nPRIMARY_PROBLEM_CLASS:  APPLICATION_FAULT\r\n\r\nPROBLEM_CLASSES: \r\n\r\n    ID:     [0n320]\r\n    Type:   [APPLICATION_FAULT]\r\n    Class:  Primary\r\n    Scope:  DEFAULT_BUCKET_ID (Failure Bucket ID prefix)\r\n            BUCKET_ID\r\n    Name:   Add\r\n    Data:   Omit\r\n    PID:    [Unspecified]\r\n    TID:    [Unspecified]\r\n    Frame:  [0]\r\n\r\n    ID:     [0n121]\r\n    Type:   [CLRSETUP_MSCORLIBMISMATCH]\r\n    Class:  Addendum\r\n    Scope:  DEFAULT_BUCKET_ID (Failure Bucket ID prefix)\r\n            BUCKET_ID\r\n    Name:   Add\r\n    Data:   Omit\r\n    PID:    [0x8e4]\r\n    TID:    [0x13a8]\r\n    Frame:  [Unspecified]\r\n\r\nLAST_CONTROL_TRANSFER:  from 000007f84515cc37 to 000007f8540f89cc\r\n\r\nSTACK_TEXT:  \r\n00000025`e27adcf0 000007f8`4515cc37 : 00000000`00000008 000007f8`570465c2 00000025`c6610000 00000000`00000030 : KERNELBASE!RaiseException+0x68\r\n00000025`e27addd0 000007f8`4515c5d0 : 00000025`00000000 000007f8`4507132e 00000025`e27addf0 00000000`00000000 : wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+0x5c67\r\n00000025`e27ade90 000007f8`45070ca0 : 00000025`e3635f20 00000000`00000984 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+0x5600\r\n00000025`e27adf00 000007f8`4506d617 : 68636574`0a0a2f2f 30542065`7571696e 00000000`00000000 00000000`00000000 : wpfgfx_cor3!SetDpiAwarenessForDisplayModeText+0x5eaa0\r\n00000025`e27ae070 000007f8`450727ad : 00000000`00000000 000007f8`45087bd3 ffffffff`fffffffe 00000025`e27ae330 : wpfgfx_cor3!SetDpiAwarenessForDisplayModeText+0x5b417\r\n00000025`e27ae1d0 000007f8`4509031c : 00000000`00000000 000007f8`45085b73 0000b1f8`4ac001fe 00000025`4ac001fe : wpfgfx_cor3!SetDpiAwarenessForDisplayModeText+0x605ad\r\n00000025`e27ae260 000007f8`450a3714 : 00000000`00000000 00000000`00000000 00000025`e1f34648 00000025`e27ae430 : wpfgfx_cor3!MILAddRef+0x501c\r\n00000025`e27ae2b0 000007f8`4509a7c2 : 00000000`00000000 00000025`e1f34648 00000000`00000000 0000001f`00000001 : wpfgfx_cor3!MILAddRef+0x18414\r\n00000025`e27ae2e0 000007f8`450923a9 : 00000025`e27ae430 00000025`e27ae7a8 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MILAddRef+0xf4c2\r\n00000025`e27ae3e0 000007f8`450922b8 : 00000000`3f800000 00000000`00000000 3f800000`00000000 00000000`00000000 : wpfgfx_cor3!MILAddRef+0x70a9\r\n00000025`e27ae8f0 000007f8`45092a76 : 00000000`00000000 00000025`e27aeac8 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MILAddRef+0x6fb8\r\n00000025`e27ae940 000007f8`45092607 : 00000000`00000000 00000025`e36219a0 00000000`00000000 00000025`e36219a0 : wpfgfx_cor3!MILAddRef+0x7776\r\n00000025`e27aedd0 000007f8`45092d1b : 00000025`e1f56be8 00000000`00000000 00000025`e35367e8 00000025`e22cfe20 : wpfgfx_cor3!MILAddRef+0x7307\r\n00000025`e27af000 000007f8`45092eec : 00000025`e27af200 000007f8`450a86a9 00000025`c6740000 00000000`00000070 : wpfgfx_cor3!MILAddRef+0x7a1b\r\n00000025`e27af0e0 000007f8`45154c28 : 00000000`00000c40 00000000`00000000 00000000`00000002 0000b1f8`076a5394 : wpfgfx_cor3!MILAddRef+0x7bec\r\n00000025`e27af130 000007f8`450a6c0b : 000007f8`5161a810 00000025`e1f34ed0 00000000`00000000 00000025`e1f34e40 : wpfgfx_cor3!MilUtility_ArcToBezier+0xb8f8\r\n00000025`e27af180 000007f8`45112587 : 00000000`00000000 000007f8`00000000 00000000`00000000 00000000`0000000f : wpfgfx_cor3!MILAddRef+0x1b90b\r\n00000025`e27af320 000007f8`4511234d : 00000000`00000000 00000025`e3536730 00000025`e27af4c0 00000025`e27af4c0 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x49517\r\n00000025`e27af3a0 000007f8`451119c3 : 00000000`00000000 00000025`e348f3d0 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x492dd\r\n00000025`e27af470 000007f8`450f8f78 : 00000000`00000000 00000000`00000000 00000000`00000000 3f800000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x48953\r\n00000025`e27af5c0 000007f8`450f6216 : 00000000`00000000 00000025`e3536a88 00000000`00000000 00000025`e22c90f0 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x2ff08\r\n00000025`e27af720 000007f8`45117983 : 00000000`00000000 00000000`00000000 00000025`e27af819 00000025`e22c9094 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x2d1a6\r\n00000025`e27af750 000007f8`45122b0b : 00000025`e22c8ce0 00000000`00000000 00000000`00000000 00000025`e1f34ed0 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4e913\r\n00000025`e27af880 000007f8`45116992 : 00000025`e3536730 00000025`e3536730 00000025`e3536cc0 00000025`e3536730 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x59a9b\r\n00000025`e27af8f0 000007f8`45118deb : 00000000`00000000 00000000`00000000 00000000`00000000 00000025`e3536730 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4d922\r\n00000025`e27af9e0 000007f8`4511be2e : 00000000`00000001 00000025`e27afb28 00000000`00000000 00000025`e27afb30 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4fd7b\r\n00000025`e27afad0 000007f8`4511a3ef : 00000000`00000001 000007f8`45106e79 00000000`00000000 000007f8`4511c02f : wpfgfx_cor3!MilContent_DetachFromHwnd+0x52dbe\r\n00000025`e27afb80 000007f8`45109908 : 00000025`e1f40940 00000000`00000000 00000025`e27afce0 00000000`00000001 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x5137f\r\n00000025`e27afbf0 000007f8`45109769 : 00000000`00000000 00000000`00000001 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x40898\r\n00000025`e27afc20 000007f8`4510988a : 00000025`e07ed400 00000000`00000000 00000025`e1f40950 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x406f9\r\n00000025`e27afcb0 000007f8`450ca06e : 00000000`00000000 00000025`e1f40950 00000025`e1f10710 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4081a\r\n00000025`e27afce0 000007f8`450ca1ef : 00000000`00000000 00000025`e1f10710 00000025`e1f10710 00000025`e1f10710 : wpfgfx_cor3!MilContent_DetachFromHwnd+0xffe\r\n00000025`e27afd20 000007f8`450c9ef3 : 00000025`e1f40950 00000000`00000000 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x117f\r\n00000025`e27afd50 000007f8`54e5167e : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0xe83\r\n00000025`e27afd80 000007f8`5704c3f1 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x1a\r\n00000025`e27afdb0 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x1d\r\n\r\n\r\nTHREAD_SHA1_HASH_MOD_FUNC:  155fa38cf2af6205707181a85399980804e5e87c\r\n\r\nTHREAD_SHA1_HASH_MOD_FUNC_OFFSET:  0be82d0ecab0a42fb0219d2636ae21eaeddd07f8\r\n\r\nTHREAD_SHA1_HASH_MOD:  f35638c1728aa06cea589bedc3c2b7e3cd3558df\r\n\r\nFOLLOWUP_IP: \r\nwpfgfx_cor3!MilVisualTarget_DetachFromHwnd+5c67\r\n000007f8`4515cc37 488b45e0        mov     rax,qword ptr [rbp-20h]\r\n\r\nFAULT_INSTR_CODE:  e0458b48\r\n\r\nSYMBOL_STACK_INDEX:  1\r\n\r\nSYMBOL_NAME:  wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+5c67\r\n\r\nFOLLOWUP_NAME:  MachineOwner\r\n\r\nMODULE_NAME: wpfgfx_cor3\r\n\r\nIMAGE_NAME:  wpfgfx_cor3.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  5bff0a8c\r\n\r\nSTACK_COMMAND:  ~7s ; .ecxr ; kb\r\n\r\nBUCKET_ID:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH_wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+5c67\r\n\r\nFAILURE_EXCEPTION_CODE:  c06d007e\r\n\r\nFAILURE_IMAGE_NAME:  wpfgfx_cor3.dll\r\n\r\nBUCKET_ID_IMAGE_STR:  wpfgfx_cor3.dll\r\n\r\nFAILURE_MODULE_NAME:  wpfgfx_cor3\r\n\r\nBUCKET_ID_MODULE_STR:  wpfgfx_cor3\r\n\r\nFAILURE_FUNCTION_NAME:  MilVisualTarget_DetachFromHwnd\r\n\r\nBUCKET_ID_FUNCTION_STR:  MilVisualTarget_DetachFromHwnd\r\n\r\nBUCKET_ID_OFFSET:  5c67\r\n\r\nBUCKET_ID_MODTIMEDATESTAMP:  5bff0a8c\r\n\r\nBUCKET_ID_MODCHECKSUM:  0\r\n\r\nBUCKET_ID_MODVER_STR:  4.8.27128.4\r\n\r\nBUCKET_ID_PREFIX_STR:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH_\r\n\r\nFAILURE_PROBLEM_CLASS:  APPLICATION_FAULT\r\n\r\nFAILURE_SYMBOL_NAME:  wpfgfx_cor3.dll!MilVisualTarget_DetachFromHwnd\r\n\r\nFAILURE_BUCKET_ID:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH_c06d007e_wpfgfx_cor3.dll!MilVisualTarget_DetachFromHwnd\r\n\r\nWATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/unknown/1.0.0.0/5bf60478/KERNELBASE.dll/6.2.9200.16384/5010ab2d/c06d007e/000189cc.htm?Retriage=1\r\n\r\nTARGET_TIME:  2018-12-13T15:02:32.000Z\r\n\r\nOSBUILD:  9200\r\n\r\nOSSERVICEPACK:  16384\r\n\r\nSERVICEPACK_NUMBER: 0\r\n\r\nOS_REVISION: 0\r\n\r\nOSPLATFORM_TYPE:  x64\r\n\r\nOSNAME:  Windows 8\r\n\r\nOSEDITION:  Windows 8 WinNt SingleUserTS\r\n\r\nUSER_LCID:  0\r\n\r\nOSBUILD_TIMESTAMP:  2012-07-26 03:15:22\r\n\r\nBUILDDATESTAMP_STR:  120725-1247\r\n\r\nBUILDLAB_STR:  win8_rtm\r\n\r\nBUILDOSVER_STR:  6.2.9200.16384\r\n\r\nANALYSIS_SESSION_ELAPSED_TIME:  207a5\r\n\r\nANALYSIS_SOURCE:  UM\r\n\r\nFAILURE_ID_HASH_STRING:  um:application_fault_clrsetup_mscorlibmismatch_c06d007e_wpfgfx_cor3.dll!milvisualtarget_detachfromhwnd\r\n\r\nFAILURE_ID_HASH:  {c0d657cb-3086-b0b0-d86b-9d8f9df5dcfb}\r\n```\r\n **Expected behavior:**\r\nNot crash \r\n\r\n **Minimal repro:**\r\n This can be reproduced using any WPF .net core project ,the simplest way is to:\r\n```\r\ndotnet new wpf\r\ndotnet publish -c release -r win-x64\r\n```\r\nThen attempt to run the published app on any version of windows lower than win10. (making sure vc140 is installed on the target machine or copy the vc140 redist dlls to the publish folder)\r\n","Url":"https://github.com/dotnet/wpf/issues/167","RelatedDescription":"Open issue \"Core 3.0 WPF module not found crash for non-Win10 machines\" (#167)"},{"Id":"389950526","IsPullRequest":false,"CreatedAt":"2018-12-13T18:12:37","Actor":"ccifra","Number":"156","RawContent":null,"Title":"x:Reference does not seem to be supported","State":"closed","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: 10.0.18298\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nWe are using x:Reference in some of the XAML that we are trying to port from .NET Framework WPF to .NET Core WPF and when building under .NET Core we a build error:\r\n\r\n```\r\nerror MC3074: The tag 'Reference' does not exist in XML namespace  'http://schemas.microsoft.com/winfx/2006/xaml'.\r\n ```\r\nWe are using X:Reference to set a converter parameter from a ControlTemplate like this:\r\n\r\n``` XML\r\nValue=\"{Binding SelectedColor, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RedToColorConverter}, ConverterParameter={x:Reference PART_HexInput}}\"\r\n```\r\n\r\n **Expected behavior:**\r\n x:Reference should be a supported construct\r\n\r\n **Minimal repro:**\r\nI can create one if needed \r\n","Url":"https://github.com/dotnet/wpf/issues/156","RelatedDescription":"Closed issue \"x:Reference does not seem to be supported\" (#156)"},{"Id":"390793366","IsPullRequest":false,"CreatedAt":"2018-12-13T17:58:33","Actor":"stevenbrix","Number":"166","RawContent":null,"Title":"Grid improvements","State":"open","Body":"Specifying Grid/ColumnDefinitions in markup is tedious. Avalonia came up with a really nice syntax that lets you specify them like this:\r\n\r\n```\r\n<Grid ColumnDefintions = \"Auto,*,*\" RowDefinitions=\"Auto,*,*\" >\r\n   ...\r\n</Grid>\r\n```\r\n\r\nInstead of the old syntax:\r\n```\r\n<Grid>\r\n   <Grid.ColumnDefinitions>\r\n     <ColumnDefintion Width=\"Auto\"/>\r\n     <ColumnDefintion Width=\"*\"/>\r\n     <ColumnDefintion Width=\"*\"/>\r\n   </Grid.ColumnDefinitions>\r\n   <Grid.RowDefinitions>\r\n     <RowDefinition Height=\"Auto\"/>\r\n     <RowDefinition Height=\"*\"/>\r\n     <RowDefinition Height=\"*\"/>\r\n   </Grid.RowDefinitions>\r\n…\r\n</Grid>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/166","RelatedDescription":"Open issue \"Grid improvements\" (#166)"},{"Id":"390722482","IsPullRequest":false,"CreatedAt":"2018-12-13T15:11:32","Actor":"danielmeza","Number":"165","RawContent":null,"Title":"Global namespace definition","State":"open","Body":"It will be grate if we can define namespaces to be used across all views like in Razor with the _ViewImports.cshtml\r\n","Url":"https://github.com/dotnet/wpf/issues/165","RelatedDescription":"Open issue \"Global namespace definition\" (#165)"},{"Id":"390669670","IsPullRequest":true,"CreatedAt":"2018-12-13T13:08:55","Actor":"dotnet-maestro[bot]","Number":"164","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/164","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#164)"},{"Id":"390216875","IsPullRequest":true,"CreatedAt":"2018-12-12T13:14:22","Actor":"dotnet-maestro[bot]","Number":"163","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/163","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#163)"},{"Id":"390122077","IsPullRequest":false,"CreatedAt":"2018-12-12T08:50:38","Actor":"hez2010","Number":"162","RawContent":null,"Title":"Add F# support for WPF","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nCurrent there's no official F# support for WPF.\r\nxaml files were compiled to *.g.cs which can not be compiled with F# code together.\r\n\r\nPlease bring F# support to WPF, thanks!","Url":"https://github.com/dotnet/wpf/issues/162","RelatedDescription":"Open issue \"Add F# support for WPF\" (#162)"},{"Id":"390087434","IsPullRequest":false,"CreatedAt":"2018-12-12T06:48:33","Actor":"trodent83","Number":"161","RawContent":null,"Title":"DataTemplateSelector retriggering","State":"open","Body":"Currently there is no way to start the template selection process of DataTemplateSelector without removing it from the Control and reapplying it.\r\n\r\nIn some cases (if we have complex template selection mechanism) the simple Property Based template selection of the DataTemplate doesn't quite cut it, and because there is no retriggering of the datatemplate selection in the datatemplateselector it is not really usable it it's current form.","Url":"https://github.com/dotnet/wpf/issues/161","RelatedDescription":"Open issue \"DataTemplateSelector retriggering\" (#161)"},{"Id":"390084703","IsPullRequest":false,"CreatedAt":"2018-12-12T06:36:35","Actor":"Genteure","Number":"160","RawContent":null,"Title":"Improve I18N support","State":"open","Body":"- The [Globalization and Localization Guide](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/globalization-and-localization) is too confusing. After reading mutiple times, I still don't understand what exactly should I do.\r\n- The link to the tool \"LocBaml\" was dead. `archive.msdn.microsoft.com` doesn't even point to a IP address.\r\n- As stated on [this page](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-localize-an-application): _The LocBaml tool is not a production-ready application._ We should have a production-ready localization solution ready to use, you can't expect everyone make their own tools.\r\n\r\nIf I misunderstood something please point me to the right direction, thank you.","Url":"https://github.com/dotnet/wpf/issues/160","RelatedDescription":"Open issue \"Improve I18N support\" (#160)"},{"Id":"390084341","IsPullRequest":false,"CreatedAt":"2018-12-12T06:35:12","Actor":"trodent83","Number":"159","RawContent":null,"Title":"Better collection syncronization","State":"open","Body":"It would help quite alot if there would be the possibility to automatically use the Collection syncronization in the standard bindings, because the currently provided EnableCollectionSynchronization method on the BindingOperations class is quite suboptimal.\r\n\r\nIt makes not much sense that the binding handles internal the UI syncronization for normal object, but for Collections the Collection changes are not handled.\r\n\r\nMy suggessions would be to either:\r\n1. Use an extra property in the bindings which would then make the Syncroot of the Collections as lock object.\r\n2. Create a special \"Multibinding\" where the syncroot object could be set through a secondary binding.\r\n\r\nI personally would prefer the second solution (may be mixed with the first), because it would help a lot during development process of multi threaded applications.","Url":"https://github.com/dotnet/wpf/issues/159","RelatedDescription":"Open issue \"Better collection syncronization\" (#159)"},{"Id":"390081072","IsPullRequest":false,"CreatedAt":"2018-12-12T06:20:25","Actor":"trodent83","Number":"158","RawContent":null,"Title":"Default converter for Multibinding","State":"open","Body":"Currently there is no Default converter for the multibinding, make it nessasary to create one every time.\r\nThis is often quite repetative.","Url":"https://github.com/dotnet/wpf/issues/158","RelatedDescription":"Open issue \"Default converter for Multibinding\" (#158)"},{"Id":"390080662","IsPullRequest":false,"CreatedAt":"2018-12-12T06:18:37","Actor":"trodent83","Number":"157","RawContent":null,"Title":"Collapsable Grid Columns and Rows","State":"open","Body":"Hi,\r\n\r\nCurrently there is no way to set the visibility of a hole column or a row. (or atleast not without a Workaround)\r\n\r\nThis would be more then desirable.","Url":"https://github.com/dotnet/wpf/issues/157","RelatedDescription":"Open issue \"Collapsable Grid Columns and Rows\" (#157)"},{"Id":"389928881","IsPullRequest":false,"CreatedAt":"2018-12-11T20:16:35","Actor":"elite-works","Number":"155","RawContent":null,"Title":" XAML Behaviors SDK","State":"closed","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10 version 1809 build 17134.441\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Don't Know\r\n\r\n **Problem description:**\r\nThe XAML behaviors is not supported/implemented in .NET Core 3.0.100-preview-009812, either by reference to \"Microsoft.Expression.Interactions\" and \"System.Windows.Interactivity\"\r\n<pre>\r\nxmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\r\nxmlns:ie=\"http://schemas.microsoft.com/expression/2010/interactions\"\r\n</pre>\r\nOr by \"Microsoft.Xaml.Behaviors.Wpf\" NuGet package (v1.0.1), and referencing \"Microsoft.Xaml.Behaviors\"\r\n<pre>\r\nxmlns:i=\"http://schemas.microsoft.com/xaml/behaviors\"\r\n</pre>\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n Using the first method results in the below error:\r\n<code>\r\n___error MC3074:___ The tag 'LaunchUriOrFileAction' does not exist in XML namespace 'http://schemas.microsoft.com/expression/2010/interactivity'.\r\n</code>\r\n\r\nAnd the second method result is:\r\n<code>\r\n___warning NU1701:___ Package 'Microsoft.Xaml.Behaviors.Wpf 1.0.1' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETCoreApp,Version=v3.0'. This package may not be fully compatible with your project.\r\n</code>\r\n\r\n **Expected behavior:**\r\n Ability to use XAML behaviors, like the simple one below:\r\n\r\n```xml\r\n        <Button Content=\"Click Me!\" >\r\n            <i:Interaction.Triggers>\r\n                <i:EventTrigger EventName=\"Click\">\r\n                    <i:LaunchUriOrFileAction Path=\"https://github.com/dotnet/wpf/\" />\r\n                </i:EventTrigger>\r\n            </i:Interaction.Triggers>\r\n        </Button>\r\n```\r\n\r\n\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/155","RelatedDescription":"Closed issue \" XAML Behaviors SDK\" (#155)"},{"Id":"389875776","IsPullRequest":false,"CreatedAt":"2018-12-11T18:32:51","Actor":"livarcocc","Number":"154","RawContent":null,"Title":"CS0118 if folder name ends with \"Application\"","State":"closed","Body":"@taori commented on [Sat Dec 08 2018](https://github.com/dotnet/cli/issues/10454)\n\n## Steps to reproduce\r\n- create folder like Company.Desktop.Application\r\n- enter folder\r\n- dotnet new wpf\r\n- dotnet run\r\n\r\n## Expected  behavior\r\nApplication runs\r\n\r\n## Actual behavior\r\nApplication can't compile because of CS0118\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ndotnet --info\r\n\r\nMicrosoft Windows [Version 6.3.9600]\r\n(c) 2013 Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n---\n\n@livarcocc commented on [Sun Dec 09 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445560538)\n\ncc @jaredpar \n\n---\n\n@jaredpar commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445908513)\n\n@taori can you post the error message please + the source for the main file? \r\n\r\nGuessing what is happening here is the namespace being generated here is `Company.Desktop.Application` and the code spit attempts to use a type named `Application` from the framework in the code spit. Essentially:\r\n\r\n``` csharp\r\nvar x = new Application();\r\n```\r\n\r\nThat would result in that particular error.\r\n\r\nIf I'm right that's really an issue for templates to solve. The compiler is behaving properly. But I think we'll either be faced with a choice of:\r\n\r\n1. Keep the templates simple and with standard C# code spit\r\n1. Make the templates resilient to issues like this by doing using aliases and lots of `::global` qualifiers. \r\n\r\n\n\n---\n\n@taori commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445940191)\n\n@jaredpar \r\n\r\n##generated app.xaml.cs\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Configuration;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\n\r\nnamespace test.Application\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for App.xaml\r\n    /// </summary>\r\n    public partial class App : Application\r\n    {\r\n    }\r\n}\r\n\r\n```\r\n\r\n`::global` seems like a great idea to solve it. \n\n---\n\n@jaredpar commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-445985641)\n\n@taori thanks for providing the source there. \r\n\r\n> ::global seems like a great idea to solve it.\r\n\r\nThat will be up to the template owners to decide. I'm not sure what repository they live in (@livarcocc ?). \r\n\r\nMy 2 cents: there will always be a way to break templates. There needs to be a balance between robustness and simplicity. My gut is to vote against anything that has `::global` in it on the basis it's probably a tad too far on the robust side of templates. \n\n---\n\n@taori commented on [Mon Dec 10 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-446023200)\n\n> \r\n> \r\n> @taori thanks for providing the source there.\r\n> \r\n> > ::global seems like a great idea to solve it.\r\n> \r\n> That will be up to the template owners to decide. I'm not sure what repository they live in (@livarcocc ?).\r\n> \r\n> My 2 cents: there will always be a way to break templates. There needs to be a balance between robustness and simplicity. My gut is to vote against anything that has `::global` in it on the basis it's probably a tad too far on the robust side of templates.\r\n\r\nYeah. That level of robustness is overkill indeed. I am sure anyone would figure out how to fix it, since the diagnostic points it out just fine. Just thought it might be interesting if this is a case which can happen but was overlooked until now.\n\n---\n\n@livarcocc commented on [Tue Dec 11 2018](https://github.com/dotnet/cli/issues/10454#issuecomment-446291414)\n\nMoving this issue to the wpf repo. They can decide to change the template there. Though, I also vote for simplicity here.\n\n","Url":"https://github.com/dotnet/wpf/issues/154","RelatedDescription":"Closed issue \"CS0118 if folder name ends with \"Application\"\" (#154)"},{"Id":"389754587","IsPullRequest":true,"CreatedAt":"2018-12-11T13:09:04","Actor":"dotnet-maestro[bot]","Number":"153","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/153","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#153)"},{"Id":"389659693","IsPullRequest":false,"CreatedAt":"2018-12-11T09:07:33","Actor":"pavelovcharov","Number":"152","RawContent":null,"Title":"WPF and Win32 interop: 'Airspace' issue","State":"open","Body":"If you've ever had to host any WinForms forms inside a WPF project, you might know about the 'Airspace' problem. Basically, the WinForms control must always be on top. It would be great if you consider to solve the 'Airspace' issue\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/wpf-and-win32-interoperation\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/technology-regions-overview","Url":"https://github.com/dotnet/wpf/issues/152","RelatedDescription":"Open issue \"WPF and Win32 interop: 'Airspace' issue\" (#152)"},{"Id":"389613803","IsPullRequest":false,"CreatedAt":"2018-12-11T06:24:35","Actor":"trodent83","Number":"151","RawContent":null,"Title":"Params support for custom markups","State":"open","Body":"If we create a custom Markup currently it is not possible to create a params Array as input parameter, this is sometimes quite troublesome.","Url":"https://github.com/dotnet/wpf/issues/151","RelatedDescription":"Open issue \"Params support for custom markups\" (#151)"},{"Id":"389612479","IsPullRequest":false,"CreatedAt":"2018-12-11T06:18:32","Actor":"trodent83","Number":"150","RawContent":null,"Title":"DockPanel LastChildFill doesn't consider visibility of control","State":"open","Body":"The dockpanel doesn't checks if the last Control in it's list is Visible, Hiden, or Collapsed, and always reserves the remaining place for it.\r\nThis if the Control is collapsed doesn't really make sence.\r\n\r\nIt would be good if the place calculation of the panel would also consider the visibility property of the Control.\r\n","Url":"https://github.com/dotnet/wpf/issues/150","RelatedDescription":"Open issue \"DockPanel LastChildFill doesn't consider visibility of control\" (#150)"},{"Id":"389610095","IsPullRequest":false,"CreatedAt":"2018-12-11T06:07:15","Actor":"trodent83","Number":"149","RawContent":null,"Title":"Correcting the readonly dependency property bug","State":"open","Body":"Now that the WPF will be open source it would be nice if the bug that readonly dependency properties cannot binded with OneWayToSource binding would be corrected. \r\nAs this is quite bothering somethime.","Url":"https://github.com/dotnet/wpf/issues/149","RelatedDescription":"Open issue \"Correcting the readonly dependency property bug\" (#149)"},{"Id":"389500205","IsPullRequest":false,"CreatedAt":"2018-12-10T21:46:04","Actor":"bitbonk","Number":"148","RawContent":null,"Title":"make behaviors usable in styles","State":"open","Body":"In the past there has been a lot of confusion and frustration about the fact that behaviors cannot be used in styles. \n\nNow that WPF is open source, I‘d like to suggest that we get rid of this odd limitation.\n\nBeing able to use behaviors in styles would be very helpful.","Url":"https://github.com/dotnet/wpf/issues/148","RelatedDescription":"Open issue \"make behaviors usable in styles\" (#148)"},{"Id":"389465276","IsPullRequest":true,"CreatedAt":"2018-12-10T20:36:33","Actor":"rladuca","Number":"147","RawContent":null,"Title":"Updating roadmap","State":"closed","Body":"Adding components that have not yet been published in their priority order.","Url":"https://github.com/dotnet/wpf/pull/147","RelatedDescription":"Closed or merged PR \"Updating roadmap\" (#147)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-16T05:31:11.2387893Z","RunDurationInMilliseconds":958}