{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7381909677","Type":"IssuesEvent","CreatedAt":"2018-03-15T01:32:18","Actor":"FabioMorcillo","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2959","RelatedDescription":"Opened issue \"Service Scoped but need force new\" (#2959) at aspnet/Home","RelatedBody":"In application after some problems, i need service created Scoped, dispose the current injected instance object with new, how i can do it ?"},{"Id":"7377997112","Type":"IssuesEvent","CreatedAt":"2018-03-14T12:31:20","Actor":"smartcodinghub","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2958","RelatedDescription":"Opened issue \"ResponseCaching with authorize\" (#2958) at aspnet/Home","RelatedBody":"Hi,\r\n\r\nI'm trying to implement ResponseCaching but all my request are Authenticated. My exact needs are to cache all GET request varying on all the query (with *) and on the Authorization header.\r\n\r\nI don't find a way to do this and the official page that you can't cache requests with the Authorization header. \r\n\r\nSince near all the applications needs some kind of authentication, I can't find a way to not support this. It can even validate the authorization but returning the cached result instead of calculating it."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7382508206","Type":"PullRequestEvent","CreatedAt":"2018-03-15T05:21:16","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1606","RelatedDescription":"Opened pull request \"Create connectionIds using HMAC\" (#1606) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1523"},{"Id":"7382308690","Type":"PullRequestEvent","CreatedAt":"2018-03-15T03:57:41","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1604","RelatedDescription":"Merged pull request \"ConnectionMetadata is now ConnectionItems\" (#1604) at aspnet/SignalR","RelatedBody":"Reacting to https://github.com/aspnet/KestrelHttpServer/pull/2395"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7381817702","Type":"IssuesEvent","CreatedAt":"2018-03-15T00:57:54","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7438","RelatedDescription":"Reopened issue \"Razor Pages responding to all HTTP verbs\" (#7438) at aspnet/Mvc","RelatedBody":"I've been noticing some exceptions being logged on a Razor Pages application. The exceptions looked to be random, and were logged on pages that are incredibly simple and always worked perfectly when tested in a browser.\r\n\r\nEventually I tracked the errors down to when pages are requested with `HEAD` or `OPTIONS` HTTP verbs. The exceptions are thrown as the view is executed, because the page's `OnGet()` has not prepared the view model and it is in an uninitialised state.\r\n\r\nSome quick testing on an MVC project shows that things just seem to work as expected out of the box. If the action is decorated with any standard HTTP verbs (`[HttpGet]`, `[HttpPost]`) then a `HEAD` or `OPTIONS` request returns a 404 status response, which makes good sense. If there are no HTTP verb attributes present then a `HEAD` or `OPTIONS` request returns an empty 200 status response, which again seems fine.\r\n\r\nIs there a suggested best practice for dealing with the above with Razor Pages?"},{"Id":"7381573803","Type":"PullRequestEvent","CreatedAt":"2018-03-14T23:33:19","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7480","RelatedDescription":"Merged pull request \"Enable RazorCompileOnBuild of test website\" (#7480) at aspnet/Mvc","RelatedBody":"#2150\r\n\r\nThe latest build of Razor contains the TagHelper serialization fix which should fix this issue."},{"Id":"7381441599","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:53:27","Actor":"ryanbrandenburg","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7481","RelatedDescription":"Opened pull request \"Create or update baselines to match 2.0\" (#7481) at aspnet/Mvc","RelatedBody":null},{"Id":"7381413843","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:45:54","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7480","RelatedDescription":"Opened pull request \"Enable RazorCompileOnBuild of test website\" (#7480) at aspnet/Mvc","RelatedBody":"#2150\r\n\r\nThe latest build of Razor contains the TagHelper serialization fix which should fix this issue."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7381472898","Type":"IssuesEvent","CreatedAt":"2018-03-14T23:02:21","Actor":"Gengadook","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1682","RelatedDescription":"Opened issue \"Allow specifying the default authorization scheme on a controller action without the authorize attribute\" (#1682) at aspnet/Identity","RelatedBody":"This would be useful in the situation where I have some api controllers hosted within an MVC app that already uses a default cookies authorization scheme. In this scenario, the api controllers would use a JWT Bearer token for auth rather than the default cookie scheme used by the rest of the web app.\r\n\r\nNormally the way to do this would be to decorate the controller or action with [Authorize(AuthenticationSchemes=\"Bearer\")]. \r\nHowever, say I wish to allow anonymous requests to the api action method and return a specific result based on User.Identity.IsAuthenticated as in the example below. \r\n\r\n\r\n```\r\n[HttpGet(\"\")]\r\npublic IActionResult GetApiAction(){\r\n    if(User.Identity.IsAuthenticated){\r\n        // result for authenticated users\r\n        return Ok(...);\r\n    }else{\r\n        // result for unauthenticated users\r\n        return Ok(...);\r\n    }\r\n} \r\n```\r\n\r\nIn this scenario, the authentication scheme cannot be applied to the controller action anymore and it defaults back to cookie auth rather than populating the UserPrincipal when a valid JWT token is supplied in the request.\r\n\r\nI feel it would be more flexible to allow the scheme to be added via its own attribute similar to [AuthenticationSchemes(Schemes=\"...\")] rather than being coupled to the [Authorize] attribute directly."},{"Id":"7381440379","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:53:06","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1681","RelatedDescription":"Opened pull request \"Create or update baselines to match 2.0\" (#1681) at aspnet/Identity","RelatedBody":null},{"Id":"7381324135","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:22:12","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1680","RelatedDescription":"Opened pull request \"Use ApplicationPartFactory and Sdk features in IdentityUI\" (#1680) at aspnet/Identity","RelatedBody":""},{"Id":"7379474533","Type":"IssuesEvent","CreatedAt":"2018-03-14T16:25:17","Actor":"PinpointTownes","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1679","RelatedDescription":"Opened issue \"Consider allowing using entities that don't derive from ApplicationUser with the default UI\" (#1679) at aspnet/Identity","RelatedBody":"> The decision was made for 2.0 templates to start using the properties on IdentityUser directly instead going thru the user manager for things like user.Id for some of the exception messages. That binds the views to IdentityUser. I did bring this up at the time the change was made so it was intentional, You can ask @DamianEdwards / @danroth27 to consider revisit that decision\r\n\r\nSo... @DamianEdwards @danroth27 please reconsider this decision :sweat_smile: "},{"Id":"7374911663","Type":"PullRequestEvent","CreatedAt":"2018-03-13T21:57:33","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1678","RelatedDescription":"Opened pull request \"Skip flaky tests\" (#1678) at aspnet/Identity","RelatedBody":""},{"Id":"7374391010","Type":"IssuesEvent","CreatedAt":"2018-03-13T20:12:12","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1409","RelatedDescription":"Closed issue \"Refactor AddIdentity splitting out Authentication from core identity\" (#1409) at aspnet/Identity","RelatedBody":"ASP.NET Identity is a library, and should not have such an opinion and side-effect on a hosting application. By setting the default signin scheme to external, you're making assumptions about the hosting application. If the hosting app wants to use external cookies, then it should do that configuration itself. \r\n\r\nI understand why it was added in here -- it makes the templates easier. But it's a bad library design choice (especially since the behavior is not relied upon anywhere in the ASP.NET Identity library itself). You might have an app that uses some NuGet library with a transitive dependency on ASP.NET Identity and it'd be incredibly confusing to have this behavioral change in the hosting app as a result of just adding a library."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7382305786","Type":"PullRequestEvent","CreatedAt":"2018-03-15T03:56:32","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2395","RelatedDescription":"Merged pull request \"Items is now a first class property on ConnectionContext\" (#2395) at aspnet/KestrelHttpServer","RelatedBody":"- Make Items a mandatory top level feature on ConnectionContext\r\n- IConnectionItemsFeature is now a requirement for transport layers (SignalR's http transports will implement this as well).\r\n- TransportConnection will lazily manifest ConnectionItems on first access. This should avoid allocations since Kestrel isn't using this today.\r\n\r\nThis replaces https://github.com/aspnet/KestrelHttpServer/pull/2394 because I need to produce packages (had to change the branch name)"},{"Id":"7381923034","Type":"PullRequestEvent","CreatedAt":"2018-03-15T01:37:22","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2397","RelatedDescription":"Opened pull request \"Revert \"Handle posting to the libuv thread after StopAsync (#2388)\"\" (#2397) at aspnet/KestrelHttpServer","RelatedBody":"This reverts commit 572627e88ce4db2ca2b3f18a200d5ff2a73fdead.\r\n\r\nTurns out this regresses performance ð .  I'll have to catch on Abort...."},{"Id":"7381440891","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:53:14","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2396","RelatedDescription":"Opened pull request \"Create or update baselines to match 2.0\" (#2396) at aspnet/KestrelHttpServer","RelatedBody":null},{"Id":"7381295921","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:15:19","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2035","RelatedDescription":"Closed issue \"Response.OnCompleted not fired AFTER the Response is sent\" (#2035) at aspnet/KestrelHttpServer","RelatedBody":"_From @JeanCollas on August 28, 2017 0:8_\n\nUsing ASP.NET Core 2.0\r\nA simple code like this shows the issue:\r\n\r\n    public async Task<IActionResult> TestOnComplete()\r\n    {\r\n            Response.OnCompleted(async () =>\r\n            {\r\n                throw new Exception();\r\n            });\r\n    }\r\n\r\n\r\nResponse.OnCompleted is said to be invoked after the response is sent to the user, so the user should already have got the answer, whatever happens there.\r\n\r\nhttps://github.com/aspnet/HttpAbstractions/blob/master/src/Microsoft.AspNetCore.Http.Abstractions/HttpResponse.cs#L75\r\n\r\n>         /// <summary>\r\n>         /// Adds a delegate to be invoked after the response has finished being sent to the client.\r\n>         /// </summary>\r\n>         /// <param name=\"callback\">The delegate to invoke.</param>\r\n>         /// <param name=\"state\">A state object to capture and pass back to the delegate.</param>\r\n>         public abstract void OnCompleted(Func<object, Task> callback, object state);\r\n\r\n\r\nBut this breaks the response. You can also set a breakpoint on the OnComplete action, the user will wait for the response until the breakpoint is passed.\r\n\r\nThis means that the OnCompleted is fired before the response is actually sent.\n\n_Copied from original issue: aspnet/Home#2170_"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7381699261","Type":"PullRequestEvent","CreatedAt":"2018-03-15T00:15:09","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2165","RelatedDescription":"Opened pull request \"Display errors from build server as part of MsBuild output\" (#2165) at aspnet/Razor","RelatedBody":"Fixed a few things with Razor MsBuild tasks and its logging,\r\n- When we get a `CompletedServerResponse` from the build server,  we should **not** fallback to cli execution. This is what [Roslyn](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/MSBuildTask/ManagedCompiler.cs#L605) does.\r\n- Capturing `Out` and `Error` from the server separately. This helps with displaying just the error from the server without all the other noise.\r\n- Setting the `Out` and `Error` property wasn't actually working because it was creating a new instance of `CommandLineApplication` for each command. Added a way to percolate it through.\r\n- Added a test"},{"Id":"7381580081","Type":"IssuesEvent","CreatedAt":"2018-03-14T23:35:14","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2150","RelatedDescription":"Closed issue \"RazorSdk does not like ViewComponentTagHelpers\" (#2150) at aspnet/Razor","RelatedBody":"```\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\netcoreapp2.0\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(39,25): error CS0400: The type or namespace name '__Generated__GenericViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\netcoreapp2.0\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(41,25): error CS0400: The type or namespace name '__Generated__DanViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\netcoreapp2.0\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(43,25): error CS0400: The type or namespace name '__Generated__CopyrightViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\netcoreapp2.1\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(39,25): error CS0400: The type or namespace name '__Generated__GenericViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\netcoreapp2.1\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(41,25): error CS0400: The type or namespace name '__Generated__DanViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\netcoreapp2.1\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(43,25): error CS0400: The type or namespace name '__Generated__CopyrightViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\net461\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(39,25): error CS0400: The type or namespace name '__Generated__GenericViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\net461\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(41,25): error CS0400: The type or namespace name '__Generated__DanViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n[11:59:00] Mvc | C:\\b\\w\\7471ab17b6f47b37\\modules\\Mvc\\test\\WebSites\\TagHelpersWebSite\\obj\\Release\\net461\\Razor\\Views\\Home\\ViewComponentTagHelpers.cs(43,25): error CS0400: The type or namespace name '__Generated__CopyrightViewComponentTagHelper' could not be found in the global namespace (are you missing an assembly reference?)\r\n```"},{"Id":"7381442361","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:53:40","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2163","RelatedDescription":"Opened pull request \"Create or update baselines to match 2.0\" (#2163) at aspnet/Razor","RelatedBody":null}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7373364495","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:04:24","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_"},{"Id":"7352155171","Type":"IssuesEvent","CreatedAt":"2018-03-08T19:37:26","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/199","RelatedDescription":"Closed issue \"ASP.NET/EF Core feeds renamed and moved to dotnet.myget.org\" (#199) at aspnet/Announcements","RelatedBody":"The ASP.NET and EF Core MyGet feeds have moved from www.myget.org to dotnet.myget.org. There are automatic redirects from the old feeds to the new feeds so no _immediate_ change is needed. If you use the nightly feeds for packages, please move to the new feeds ASAP. The redirects will be available for at least a few weeks.\n\n| https://www.myget.org/f/ (Before) | https://dotnet.myget.org/f/ (After) |\n| --- | --- |\n| aspnetvnext | aspnetcore-dev |\n| aspnetrelease | aspnetcore-release |\n| aspnetmaster | aspnetcore-master |\n| aspnetcidev | aspnetcore-ci-dev |\n| aspnetcirelease | aspnetcore-ci-release |\n\nPlease use https://github.com/aspnet/Home/issues/1708 for further discussion.\n"},{"Id":"7340008772","Type":"IssuesEvent","CreatedAt":"2018-03-06T20:07:16","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Opened issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292) at aspnet/Announcements","RelatedBody":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":4,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"963559608869568512","CreatedAt":"2018-02-13T23:44:47+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2018-03-15T05:30:10.6410767Z","RunDurationInMilliseconds":8880}