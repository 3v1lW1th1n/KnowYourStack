{"Data":{"GitHub":{"Issues":[{"Id":"531595384","IsPullRequest":true,"CreatedAt":"2019-12-02T23:01:18","Actor":"SamBent","Number":"2271","RawContent":null,"Title":"TreeView scroll hang","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nCertain scrolling operations cause TreeView to hang.  There are two causes:\r\n  1. Floating-point catastrophic cancellation while detecting an element’s position within the viewport\r\n  2. Inappropriate “offset replacement” when filling the “before” cache.   (Internal concepts, I’d need a whiteboard to explain fully.)\r\n\r\nCustomer Impact \r\n\r\nHang. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.7 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #1962\r\nWPF TreeView, virtualization, scroll, freeze ","Url":"https://github.com/dotnet/wpf/pull/2271","RelatedDescription":"Open PR \"TreeView scroll hang\" (#2271)"},{"Id":"531587559","IsPullRequest":true,"CreatedAt":"2019-12-02T22:44:36","Actor":"SamBent","Number":"2270","RawContent":null,"Title":"SharedSizeGroup loop","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nAfter every layout pass, a SharedSizeGroup re-evaluates its  shared size and updates the state of its constituent ColumnDefinitions.  The  goal is to mark the \"long-pole\" definitions (the largest ones in the group), and  to identify Grids that need to be remeasured.  The logic for this is flawed in  several ways;  both goals can fail in either direction (false positive or false  negative).   These flaws usually result in redundant layout work - the Grids get  measured twice, with the mistakes in the second pass cancelling those in in the  first - but correct layout results.  But in some cases they lead to an infinite  cycle of re-layout;  the app hangs.   In the customer's scenario this happens  when  \r\na. the Grids are within the scope of a ScrollViewer with  VerticalScrollbarVisibility=\"Auto\"  \r\nb. there are more than 157 Grids (the  threshold for coalescing pending measure tasks into one task at the root)   \r\nc. the minimum width of a non-long-pole Grid increases, away from the shared column\r\n\r\nCustomer Impact \r\n\r\nHang. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.5.2 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #2222\r\nHang during layout when using SharedSizeGroup","Url":"https://github.com/dotnet/wpf/pull/2270","RelatedDescription":"Open PR \"SharedSizeGroup loop\" (#2270)"},{"Id":"531506248","IsPullRequest":true,"CreatedAt":"2019-12-02T20:02:45","Actor":"SamBent","Number":"2269","RawContent":null,"Title":"Ribbon focus war","State":"open","Body":"Ask Mode Template:  \r\n\r\nDescription \r\n\r\nAn app that programmatically disables a RibbonMenuButton and replaces its  menu items with new ones can cause a focus war leading to infinite recursion and  StackOverflow.  This can happen if the user presses the toggle button (which  opens the menu dropdown) and drags the mouse over the dropdown, and the  programmatic disable/replace occurs before the user releases the mouse  button.\r\n\r\nCustomer Impact \r\n\r\nCrash. \r\n\r\nRegression \r\n\r\nNo.   (Port of servicing fix for .NET 4.7 - 4.8)\r\n\r\nRisk \r\n\r\nLow \r\n\r\nFixes #2220\r\nStackOverflow due to focus war in RibbonMenuButton","Url":"https://github.com/dotnet/wpf/pull/2269","RelatedDescription":"Open PR \"Ribbon focus war\" (#2269)"},{"Id":"529981218","IsPullRequest":false,"CreatedAt":"2019-12-02T16:52:13","Actor":"getandplay","Number":"2258","RawContent":null,"Title":".Net Core 3.0 WPF Resource doesn't work in project","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n  > **.Net Core 3.0  netcoreapp3.0**\r\n* Windows version: (`winver`)\r\n   > **win10**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n  > **The bug can reproduce in WPF .Net Core but it works fine in .NET Framework 4.7**\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).\r\n> No, I think it is .Net Core Bug\r\n \r\n **Problem description:**\r\n > In my solution there are three projects all base on .Net Core 3.0.\r\n    - WpfApp1(exe project)\r\n    - WpfLibrary1\r\n    - Wpf.app.test\r\n    And I add an image as **Resource** in Wps.app.test (I have set the image's build action to Resource), then in WpfLibrary1 I add a ResourceDictionary ,\r\n``` xml\r\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n\r\n    <BitmapImage x:Key=\"Hello\" UriSource=\"pack://application:,,,/Wpf.app.test;component/calendar.png\"/>\r\n    \r\n</ResourceDictionary>\r\n```\r\nIn WpfApp1 I use this BitmapImage in my xaml\r\n```xml\r\n <Window.Resources>\r\n        <ResourceDictionary>\r\n            <ResourceDictionary.MergedDictionaries>\r\n                <ResourceDictionary Source=\"pack://application:,,,/WpfLibrary1;component/Test/Dictionary1.xaml\"/>\r\n            </ResourceDictionary.MergedDictionaries>\r\n        </ResourceDictionary>\r\n    </Window.Resources>\r\n    <Grid>\r\n        <!--It works Fine-->\r\n        <!--It will throw Exception, but .Net FrameWork works fine-->\r\n        <Image Width=\"200\" Height=\"200\" Source=\"{StaticResource Hello}\" HorizontalAlignment=\"Right\"/>\r\n    </Grid>\r\n```\r\nwhen I run WpfApp1 I got an error:\r\n![image](https://user-images.githubusercontent.com/3829760/69818350-2fb5e980-11c2-11ea-89f7-dc8a4e54ee0f.png)\r\nAnd we decompile the Wpf.app.test.dll found that there is no Image in the Dll. ( I have set image's build action to **Resource** )\r\nThe Wpf.app.test.project code\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"calendar.png\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Resource Include=\"calendar.png\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nThe Decompile result:\r\n![image](https://user-images.githubusercontent.com/3829760/69818783-25481f80-11c3-11ea-9f8c-e7373edd2cc9.png)\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n > Throw an exception: System.Windows.Markup.XamlParseException: ''Initialization of 'System.Windows.Media.Imaging.BitmapImage' threw an exception.' Line number '4' and line position '32'.'\r\n>Inner Exception\r\n>IOException: Cannot locate resource 'calendar.png'.\r\n\r\n **Expected behaviour:**\r\n> No Error, No exception\r\n \r\n **Minimal repro:**\r\nHere is the demo for this bug\r\n[WpfApp1.zip](https://github.com/dotnet/wpf/files/3902314/WpfApp1.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/2258","RelatedDescription":"Closed issue \".Net Core 3.0 WPF Resource doesn't work in project\" (#2258)"},{"Id":"531123162","IsPullRequest":true,"CreatedAt":"2019-12-02T13:40:25","Actor":"dotnet-maestro[bot]","Number":"2268","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191201.9\r\n- **Date Produced**: 12/1/2019 11:58 PM\r\n- **Commit**: 5f6057269b70d3d4eaaea18816b555bcab729d50\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19601.9\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2268","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2268)"},{"Id":"530777435","IsPullRequest":false,"CreatedAt":"2019-12-01T18:56:41","Actor":"keelerjr12","Number":"2267","RawContent":null,"Title":"Clearing Bound ObservableCollection causes System.InvalidOperationException: 'Added item does not appear at given index '0'.'","State":"open","Body":"When calling ObservableCollection.Clear() and then re-loading (i.e. adding) items back into ObservableCollection, a System.InvalidOperationException:  'Added item does not appear at given index '0'.' gets thrown. I have provided a snippet of my code below. I have indicated where the issue is.\r\n\r\n```\r\n        private void TransactionCreated(object? sender, EventArgs e)\r\n        {\r\n            if (!(sender is TransactionRowViewModel row))\r\n                return;\r\n\r\n            if (row.Account == null)\r\n                    return;\r\n\r\n            var id = _transactionService.Create(row.Date, row.Account.Id, _accountId, row.Value, row.Description);\r\n            row.TransactionId = id;\r\n\r\n            //Transactions = new ObservableCollection<TransactionRowViewModel>();\r\n            Transactions.Clear();\r\n            LoadTransactions(); \r\n\r\n            // ISSUE: After TransactionCreated returns, exception is thrown!\r\n        }\r\n```\r\n\r\nAnd here is the stack trace:\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Added item does not appear at given index '0'.\r\n   at System.Windows.Data.ListCollectionView.AdjustBefore(NotifyCollectionChangedAction action, Object item, Int32 index)\r\n   at System.Windows.Data.ListCollectionView.CommitNew()\r\n   at System.Windows.Controls.ItemCollection.System.ComponentModel.IEditableCollectionView.CommitNew()\r\n   at System.Windows.Controls.DataGrid.CommitRowItem()\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(ExecutedRoutedEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandBinding.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandManager.FindCommandBinding(Object sender, RoutedEventArgs e, ICommand command, Boolean execute)\r\n   at System.Windows.Input.CommandManager.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.UIElement.OnExecutedThunk(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.RoutedCommand.ExecuteImpl(Object parameter, IInputElement target, Boolean userInitiated)\r\n   at System.Windows.Input.RoutedCommand.Execute(Object parameter, IInputElement target)\r\n   at System.Windows.Controls.DataGrid.EndEdit(RoutedCommand command, DataGridCell cellContainer, DataGridEditingUnit editingUnit, Boolean exitEditMode)\r\n   at System.Windows.Controls.DataGrid.CommitAnyEdit()\r\n   at System.Windows.Controls.DataGrid.OnEnterKeyDown(KeyEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnKeyDown(KeyEventArgs e)\r\n   at System.Windows.UIElement.OnKeyDownThunk(Object sender, KeyEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawKeyboardActions actions, Int32 scanCode, Boolean isExtendedKey, Boolean isSystemKey, Int32 virtualKey)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.ProcessKeyAction(MSG& msg, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.CriticalTranslateAccelerator(MSG& msg, ModifierKeys modifiers)\r\n   at System.Windows.Interop.HwndSource.OnPreprocessMessage(Object param)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at System.Windows.Interop.HwndSource.OnPreprocessMessageThunk(MSG& msg, Boolean& handled)\r\n   at System.Windows.Interop.ComponentDispatcherThread.RaiseThreadMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n```","Url":"https://github.com/dotnet/wpf/issues/2267","RelatedDescription":"Open issue \"Clearing Bound ObservableCollection causes System.InvalidOperationException: 'Added item does not appear at given index '0'.'\" (#2267)"},{"Id":"530776700","IsPullRequest":true,"CreatedAt":"2019-12-01T18:52:43","Actor":"dotnet-maestro[bot]","Number":"2266","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.13\r\n- **Date Produced**: 11/28/2019 1:16 AM\r\n- **Commit**: 258bdd135d0e159a301545d53bc1c0ffb438d54c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19577.13\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2266","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2266)"},{"Id":"530776625","IsPullRequest":true,"CreatedAt":"2019-12-01T18:52:33","Actor":"dotnet-maestro[bot]","Number":"2265","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.10\r\n- **Date Produced**: 12/1/2019 6:16 PM\r\n- **Commit**: 076a69fb42b53fca7cd245ecf7c779496a79f59e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-servicing.19577.10\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2265","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#2265)"},{"Id":"530730419","IsPullRequest":true,"CreatedAt":"2019-12-01T13:38:48","Actor":"dotnet-maestro[bot]","Number":"2264","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191130.4\r\n- **Date Produced**: 12/1/2019 12:45 AM\r\n- **Commit**: 4684574d2f9c317ea56158a5c0cac4620a9b1c8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19580.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2264","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2264)"},{"Id":"530578052","IsPullRequest":true,"CreatedAt":"2019-11-30T13:39:15","Actor":"dotnet-maestro[bot]","Number":"2263","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191129.4\r\n- **Date Produced**: 11/30/2019 12:39 AM\r\n- **Commit**: d24ce78d4c3b592af0426bb229f78a89671ac32f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19579.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2263","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2263)"},{"Id":"530534848","IsPullRequest":false,"CreatedAt":"2019-11-30T05:23:24","Actor":"angtianqiang","Number":"2262","RawContent":null,"Title":"Very strange problem ClientContext data loss","State":"open","Body":"  I tested a very strange question\r\n\r\nI tested a very strange question\r\nRunning environment: WPF netcore3.0 csla5.0.1\r\nProblem description: set the ClientContext value in the WPF start window and read it as null, while it can be read normally in the non-wpf main window. This problem has not occurred before with WPF (net4.0)+csla4.7.2, can you help to see what is going on\r\n\r\nTest code:\r\n\r\n  public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            Csla.ApplicationContext.ClientContext[\"a\"] = \"test\";\r\n        }\r\n\r\n        private void Button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            var aa = Csla.ApplicationContext.ClientContext[\"a\"];\r\n            //   aa = null;\r\n            //This is in the main window and reads null\r\n        }\r\n\r\n       \r\n    }\r\n\r\n\r\n\r\n public partial class Window1 : Window\r\n    {\r\n        public Window1()\r\n        {\r\n            InitializeComponent();\r\n            Csla.ApplicationContext.ClientContext[\"b\"] = \"test\";\r\n        }\r\n\r\n        private void Button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            var bb = Csla.ApplicationContext.ClientContext[\"b\"];\r\n            //  bb = test\"\r\n            //This is the non-wpf main window and can be read normally\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/2262","RelatedDescription":"Open issue \"Very strange problem ClientContext data loss\" (#2262)"},{"Id":"530373844","IsPullRequest":false,"CreatedAt":"2019-11-29T14:28:37","Actor":"soeron","Number":"2261","RawContent":null,"Title":"DataGridCell.DataGridOwner accessibility","State":"open","Body":"Currently the property [DataGridOwner](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/DataGridCell.cs#L1034) is marked as internal, which is coming from full framework like this. But there are many situations where the cell may need access to its owning data grid. A simple example is the VerticalContentAlignment property of the datagrid which does nothing and is not respected in any way with the current templates in the .NET framework which is ported line by line for now. There are many other use cases where accessing the owning data grid is needed. Grid wide attached properties etc.\r\nOther elements of the datagrid like rows, columns have this property and it is still internal. Please make it public. I can't see a reason to leave it internal.","Url":"https://github.com/dotnet/wpf/issues/2261","RelatedDescription":"Open issue \"DataGridCell.DataGridOwner accessibility\" (#2261)"},{"Id":"530343152","IsPullRequest":true,"CreatedAt":"2019-11-29T13:39:19","Actor":"dotnet-maestro[bot]","Number":"2260","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191128.4\r\n- **Date Produced**: 11/28/2019 10:54 PM\r\n- **Commit**: 9f998e22f7867d1b5765c9539270b9f393d7f005\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19578.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2260","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2260)"},{"Id":"530068935","IsPullRequest":false,"CreatedAt":"2019-11-28T20:33:20","Actor":"vatsan-madhavan","Number":"2259","RawContent":null,"Title":"STATUS_ILLEGAL_INSTRUCTION exception in win-x86 wpfgfx_cor3.dll running on x64 Win Server 2012 R2","State":"open","Body":"Hi I have the same issue \r\n\r\nProblem signature:\r\n  Problem Event Name:\tAPPCRASH\r\n  Application Name:\tRocketM.exe\r\n  Application Version:\t2.0.0.0\r\n  Application Timestamp:\t5d7bb0cb\r\n  Fault Module Name:\twpfgfx_cor3.dll\r\n  Fault Module Version:\t4.800.19.46238\r\n  Fault Module Timestamp:\t5d7ab8ec\r\n  Exception Code:\tc000001d\r\n  Exception Offset:\t00158e19\r\n  OS Version:\t6.3.9600.2.0.0.272.7\r\n  Locale ID:\t5129\r\n  Additional Information 1:\t5861\r\n  Additional Information 2:\t5861822e1919d7c014bbb064c64908b2\r\n  Additional Information 3:\t6fbe\r\n  Additional Information 4:\t6fbe6bde2701766d81cbca0597a5fa35\r\n\r\nRead our privacy statement online:\r\n  http://go.microsoft.com/fwlink/?linkid=280262\r\n\r\nIf the online privacy statement is not available, please read our privacy statement offline:\r\n  C:\\Windows\\system32\\en-US\\erofflps.txt\r\n\r\nOS is \r\n\r\n![image](https://user-images.githubusercontent.com/4112014/69830042-9f41dc80-1287-11ea-8ca4-7b2be7c17e8d.png)\r\n\r\napp is x86\r\n\r\n_Originally posted by @thudugala in https://github.com/dotnet/wpf/issues/2057#issuecomment-559595015_","Url":"https://github.com/dotnet/wpf/issues/2259","RelatedDescription":"Open issue \"STATUS_ILLEGAL_INSTRUCTION exception in win-x86 wpfgfx_cor3.dll running on x64 Win Server 2012 R2\" (#2259)"},{"Id":"529908399","IsPullRequest":true,"CreatedAt":"2019-11-28T13:29:23","Actor":"dotnet-maestro[bot]","Number":"2257","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191127.16\r\n- **Date Produced**: 11/27/2019 11:14 PM\r\n- **Commit**: c2650e0f5c9279314309e44f4f42d7baf6323b99\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19577.16\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2257","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2257)"},{"Id":"529781187","IsPullRequest":false,"CreatedAt":"2019-11-28T09:08:48","Actor":"VBAndCs","Number":"2256","RawContent":null,"Title":"Support DataAnnotations and TagHelpers in WPF","State":"open","Body":"I suggest that you allow using the attributes defined in System.ComponentModel.DataAnnotations with any property in a wpf project, like ASP.NET does. For example:\r\n```C#\r\n[Required]\r\n[MinLength(2)]\r\n[MaxLength(12)]\r\npublic string FirstName { get; set; }\r\n ```\r\nASP.NET generates server side validation code for these attributes (beside the client side validation scripts), so, I think you can make WPF borrow the class that generates the server side code to achieve this. Note: There are some attributes used with tag helpers to affect the UI such as DisplayAttribute. I think XAML should also add the tag helpers concept too. I find it easier and shorter than the currently used data binding.\r\n","Url":"https://github.com/dotnet/wpf/issues/2256","RelatedDescription":"Open issue \"Support DataAnnotations and TagHelpers in WPF\" (#2256)"},{"Id":"529657891","IsPullRequest":false,"CreatedAt":"2019-11-28T02:25:48","Actor":"Kybs0","Number":"2255","RawContent":null,"Title":"After Modified screen dpi，Unloaded/Loaded is trigged unexpectedly","State":"open","Body":"When I modify the system dpi in screen setting, a userControl in window raises unload event, as more amazing unload event of window that contains the userControl is not triggered.\r\n\r\nAs all I known, loaded/unloaded can be triggered by these cases:\r\nFrameworkElement raises loaded/unloaded when it's added/removed to visual tree. \r\nTabControl selection change from tab A to tab B, raise A'UnLoaded and B'Loaded\r\nExpander、MenuItem and so on...All these cases, emmm.. seems like loaded/unloaded event raises just as element or it's parent leave from or add to wpf visual tree.\r\n\r\nBut, How Unloaded/Loaded can be raised by changing screen dpi ?\r\nFor testing, I create a window, then create and add a simple UserControl named A in window xaml, continue to create and add UserControl named B in A xaml. After window is showed in screen, modify screen dpi from 100% to 150%, UserControl A raise unloaded event, then UserControl B raise unloaded. As joking, window itself has no unloaded.\r\nunloaded event stack:\r\n![image](https://user-images.githubusercontent.com/21971433/69771912-65aa9c00-11c9-11ea-814a-1ac46f301e04.png)\r\nAs additional, before modify dpi setting, drag window and move near the taskbar, the issue occurs more probabily~\r\n![image](https://user-images.githubusercontent.com/21971433/69771084-7e658280-11c6-11ea-9b98-3ccb08e42356.png)\r\n\r\nMore details please see my blog https://www.cnblogs.com/kybs0/p/11943313.html\r\nExpecting you advise for this bug~\r\n","Url":"https://github.com/dotnet/wpf/issues/2255","RelatedDescription":"Open issue \"After Modified screen dpi，Unloaded/Loaded is trigged unexpectedly\" (#2255)"},{"Id":"529635809","IsPullRequest":true,"CreatedAt":"2019-11-28T01:30:59","Actor":"dotnet-maestro[bot]","Number":"2254","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e226e5ed-6125-48cb-94d5-08d690bc143a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:e226e5ed-6125-48cb-94d5-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2254","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#2254)"},{"Id":"529633523","IsPullRequest":true,"CreatedAt":"2019-11-28T01:01:30","Actor":"dotnet-maestro[bot]","Number":"2253","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2253","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#2253)"},{"Id":"529619918","IsPullRequest":true,"CreatedAt":"2019-11-27T23:43:23","Actor":"vatsan-madhavan","Number":"2252","RawContent":null,"Title":"Improve `HWND` validity testing in `HwndHost` ","State":"open","Body":"Fixes #2239 \r\n\r\n`s/_hwnd.Handle/Handle` in a few places, notably in in a check in `BuildOrReparentWindow`\r\n\r\n--\r\n\r\nThe key change is in `BuildOrReparentWindow `where an additional check for  `IsWindow()` is desirable; without this check, non-`NULL` yet invalid `HWND`'s are able to make their way into the \"reparent under a `SystemResources` managed message-only `HWND`\" logic, which in turn tries to query other characteristics of the (invalid) `HWND`. \r\n\r\nOne of these steps eventually fails, and WPF decides that the failure is sufficiently bad and crashes (this happens in `MS.Internal.DpiUtil.HwndDpiInfo.NearestMonitorInfoFromWindow(IntPtr hwnd)`).\r\n\r\nAlso changing `_hwnd.Handle` to `Handle` in a few other places where additional check for `HWND` validity seems valuable.\r\n\r\n/cc @teh173 \r\n\r\n[NearestMonitorDpiCrash.zip](https://github.com/dotnet/wpf/files/3899149/NearestMonitorDpiCrash.zip)","Url":"https://github.com/dotnet/wpf/pull/2252","RelatedDescription":"Open PR \"Improve `HWND` validity testing in `HwndHost` \" (#2252)"},{"Id":"529518554","IsPullRequest":true,"CreatedAt":"2019-11-27T18:49:09","Actor":"mmitche","Number":"2251","RawContent":null,"Title":"Add internal ci triggers and clean  up trigger list","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/2251","RelatedDescription":"Closed or merged PR \"Add internal ci triggers and clean  up trigger list\" (#2251)"},{"Id":"529511645","IsPullRequest":true,"CreatedAt":"2019-11-27T18:40:25","Actor":"dotnet-maestro[bot]","Number":"2250","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 6:09 PM\r\n- **Commit**: ace27af05350ce947fee65a54d24b0007ce2c8a2\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-servicing.19577.5\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2250","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#2250)"},{"Id":"529492946","IsPullRequest":true,"CreatedAt":"2019-11-27T18:20:44","Actor":"dotnet-maestro[bot]","Number":"2248","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191127.4\r\n- **Date Produced**: 11/27/2019 5:31 PM\r\n- **Commit**: ec7144e9e1b54a651fda52339298873607d4baca\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19577.4\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2248","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2248)"},{"Id":"529496349","IsPullRequest":false,"CreatedAt":"2019-11-27T17:53:29","Actor":"nsivov","Number":"2249","RawContent":null,"Title":"[DirectWriteForwarder] Unmanaged object leak","State":"open","Body":"There seems to be a leak of a file loader object here:\r\n \r\nhttps://github.com/dotnet/wpf/blob/3fd5b221be5bf8f83e46e19a858c365e03b3dd3f/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/DWriteWrapper/FontFile.cpp#L75-L81\r\n'fontFileLoader' is never released.\r\n\r\n[edit/@vatsan-madhavan]: replacing quoted inline code with link to code. ","Url":"https://github.com/dotnet/wpf/issues/2249","RelatedDescription":"Open issue \"[DirectWriteForwarder] Unmanaged object leak\" (#2249)"},{"Id":"529341004","IsPullRequest":true,"CreatedAt":"2019-11-27T13:28:50","Actor":"dotnet-maestro[bot]","Number":"2247","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191126.11\r\n- **Date Produced**: 11/27/2019 3:41 AM\r\n- **Commit**: 4ee3acb445805e934e69ea104214aebdb526fd8b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19576.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2247","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2247)"},{"Id":"529056472","IsPullRequest":false,"CreatedAt":"2019-11-27T01:12:45","Actor":"SamBent","Number":"2246","RawContent":null,"Title":"Animating an inherited property doesn't work (sometimes)","State":"open","Body":"* .NET Core Version: any\r\n* Windows version: any\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes.  Repros in 4.0+ (regression from 3.5)\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)?  no\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/master/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:** Animating an inherited property doesn't work in some cases.  It works if the host element has had an inherited property set directly, even one different from the one being animated.  It (sometimes) works if a second inherited property is already being animated.  Sometimes it doesn't work until you do some other action, after which it works.  In other cases, it may not work at all.  There is no simple pattern.\r\n\r\nThe attached repro declares a style for TextBlock that contains triggers to animate its Foreground and LineHeight properties (both are inheritable).  It displays four instances of TextBlock using the style, but with different initial settings for the properties.  Each comes with buttons to activate the two triggers.  All four should work the same way, but the repro illustrates that they depend on outside factors or previous behavior.  (The repro demonstrates four interesting cases, but it doesn't illustrate all the bizarre ways this can fail.)\r\n\r\n **Expected behavior:** The \"Trigger FG\" button animates the TextBlock's Foreground, causing its text to turn red.\r\n  \r\n **Actual behavior:** The \"No Inheritance\" and \"Inherit Foreground\" instances don't work initially, but start working after you click the \"Trigger LH\" button.  The \"Inherit LineHeight\" instance doesn't work at all.  The \"Set LineHeight\" instance works correctly.\r\n \r\n **Minimal repro:**\r\n[Repro.zip](https://github.com/dotnet/wpf/files/3894605/Repro.zip)\r\n\r\n**Remarks:** This bug is responsible for the failure of some test cases in .NET 4.0+, including one that recently arose while testing an unrelated servicing fix.  The test cases aren't testing this scenario directly, but they make runtime choices that occasionally stumble across the bug.  For a while it appeared that the failure happened only on Win8.1 + .NET 4.7.2 (and only when no debugger was attached), but it turns out that the OS, .NET version, debugger, etc. all influence the runtime choices, and only rarely produce a failing case.","Url":"https://github.com/dotnet/wpf/issues/2246","RelatedDescription":"Open issue \"Animating an inherited property doesn't work (sometimes)\" (#2246)"},{"Id":"528973882","IsPullRequest":true,"CreatedAt":"2019-11-27T01:06:24","Actor":"mcavigelli","Number":"2245","RawContent":null,"Title":"Typos and formatting","State":"closed","Body":"Two small changes in the documentation of a control and of a guideline.","Url":"https://github.com/dotnet/wpf/pull/2245","RelatedDescription":"Closed or merged PR \"Typos and formatting\" (#2245)"},{"Id":"528951395","IsPullRequest":true,"CreatedAt":"2019-11-26T20:35:27","Actor":"dotnet-maestro[bot]","Number":"2244","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191126.3\r\n- **Date Produced**: 11/26/2019 8:08 PM\r\n- **Commit**: 2204c3f17bea70ee01be3b450f6b84158a80c154\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19576.3\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2244","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2244)"},{"Id":"528719046","IsPullRequest":true,"CreatedAt":"2019-11-26T13:28:39","Actor":"dotnet-maestro[bot]","Number":"2243","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191125.5\r\n- **Date Produced**: 11/26/2019 12:31 AM\r\n- **Commit**: 1db4999af635f205da0e17e1a3b7ba38b8bea5c0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19575.5\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2243)"},{"Id":"528709652","IsPullRequest":false,"CreatedAt":"2019-11-26T13:00:47","Actor":"Asser82","Number":"2242","RawContent":null,"Title":"Window overflows to second screen after it is snapped to desktop top","State":"open","Body":"Hi there,\r\n\r\nI am using a Window with a custom WindowChrome. This caused many bugs over the last year. The initial bug was, that when the window is maximized the window size is calculated bigger than the screen, so that part of the window content is clipped at the edges.\r\n\r\nTo overcome this I added a margin between the window and its content, when the window is maximized. After that I had problems with wrong window size calculations with undocked task bars, multiple monitors and different dpi scalings. After several iterations I resolved such issues by handling WM_GETMINMAXINFO. \r\n\r\nNow a new bug arrived, that says that a black border is visible on the second screen, when the window is maximized by snapping it to the top of the first screen. The border does not appear when I maximize the window by double clicking the caption or by pressing the maximize button. Is this a bug? If not, is there a way to detect that a window is maximized through snapping, to handle it differently? \r\n\r\nThanks,\r\nArthur","Url":"https://github.com/dotnet/wpf/issues/2242","RelatedDescription":"Open issue \"Window overflows to second screen after it is snapped to desktop top\" (#2242)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-03T05:30:57.2765144Z","RunDurationInMilliseconds":718}