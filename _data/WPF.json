{"Data":{"GitHub":{"Issues":[{"Id":"484907538","IsPullRequest":true,"CreatedAt":"2019-08-26T00:18:56","Actor":"vatsan-madhavan","Number":"1720","RawContent":null,"Title":"Update private C++ tools version to 0.0.0.8","State":"closed","Body":"Addresses #634 \r\n\r\nThese updated C++ tools address the last of dangling type-refs in DirectWriteForwarder and System.Printing. \r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1720","RelatedDescription":"Closed or merged PR \"Update private C++ tools version to 0.0.0.8\" (#1720)"},{"Id":"484955030","IsPullRequest":true,"CreatedAt":"2019-08-25T18:16:01","Actor":"dotnet-maestro[bot]","Number":"1724","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190825.3\r\n- **Date Produced**: 8/25/2019 5:05 PM\r\n- **Commit**: 8e7273ca6d0a4ec65773fd391be8d2b38042dedb\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19425.3\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 3.0.0-rc1-19425-03 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1724","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1724)"},{"Id":"484930940","IsPullRequest":true,"CreatedAt":"2019-08-25T14:36:35","Actor":"dotnet-maestro[bot]","Number":"1723","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190825.2\r\n- **Date Produced**: 8/25/2019 12:54 PM\r\n- **Commit**: b23d645cd13ed3a9dfcdba83d250554d183a52bd\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19425.2\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1723","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1723)"},{"Id":"484913938","IsPullRequest":false,"CreatedAt":"2019-08-25T10:14:05","Actor":"miloush","Number":"1722","RawContent":null,"Title":"RibbonWindow Min/Max/Close buttons not working","State":"open","Body":"16.3.0 Preview 2.0, 18956.rs_prerelease\r\nReproduces on .NET Framework 4.8.03921.\r\n\r\n1. Create a new project\r\n2. Add reference to System.Windows.Controls.Ribbon\r\n3. Change the root element from `Window` to `RibbonWindow` and code-behind class accordingly\r\n4. Run\r\n\r\nExpected: To be able to minimize/maximize/close the window using the system buttons in the non-client area.\r\n\r\nActual: The buttons respond to hover, but not to mouse down. Nothing happens when clicked. The window gets maximized/restored when any of the buttons are double-clicked as if double-clicking on the window title.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1722","RelatedDescription":"Open issue \"RibbonWindow Min/Max/Close buttons not working\" (#1722)"},{"Id":"484286773","IsPullRequest":true,"CreatedAt":"2019-08-25T09:15:22","Actor":"vatsan-madhavan","Number":"1707","RawContent":null,"Title":"Fixes problems in WindowsDesktop SDK due to _TargetFrameworkVersionWithoutV being undefined sometimes","State":"closed","Body":"Addresses https://github.com/dotnet/wpf/issues/1651 - Invalid comparison in MSBuild's ignore-conditions mode in outer build of multitargeted project\r\n\r\nThis change ensures that the WindowsDesktop SDK never deals with undefined numeric values related to TFM.\r\n\r\nThis solution leverages the fact that `Items` are evaluated after `Properties` by MSBuild. See [Comparing properties and items](https://docs.microsoft.com/en-us/visualstudio/msbuild/comparing-properties-and-items?view=vs-2019)\r\n\r\n`_TargetFrameworkVersionValue` - a new Property which is defined for exclusive use within the WindowsDesktop SDK, and which is intended to act as a proxy for `_TargetFrameworkVersionWithoutV` - is defined in `Microsoft.NET.Sdk.WindowsDesktop.targets` _after_ `TargetFrameworkVersionWithoutV` is guaranteed to be defined by `Microsoft.NET.Sdk.targets`. \r\n\r\nEven here, we ensure that a fallback default (`0.0`) is provided - guaranteeing that `_TargetFrameworkVersionValue` will always be numeric. \r\n\r\nWhen the `Condition`s in the various `Items` in `Microsoft.NET.WindowsDesktop.props` are evaluated (which will happen strictly after all `Properties` are evaluated - whether they appear in `.props` or `.targets`), `_TargetFrameworkVersionValue` would have been (a) well-defined and (b) guaranteed to be a numeric value. This would in turn guarantee that errors of the kind `\"A numeric comparison was attempted on \"$(_TargetFrameworkVersionValue)\" that evaluates to \"\" instead of a number,\"` will no longer appear in outer-builds or in any other context. \r\n\r\nPS: This is a fix for a regression introduced by https://github.com/dotnet/wpf/pull/1027 (which shipped in Preview 6) as part of a set of fixes for improving multi-targeting experience, improved warnings and error messages during build, and improvements to project-system integration. \r\n","Url":"https://github.com/dotnet/wpf/pull/1707","RelatedDescription":"Closed or merged PR \"Fixes problems in WindowsDesktop SDK due to _TargetFrameworkVersionWithoutV being undefined sometimes\" (#1707)"},{"Id":"484908152","IsPullRequest":true,"CreatedAt":"2019-08-25T09:04:21","Actor":"vatsan-madhavan","Number":"1721","RawContent":null,"Title":"Update private C++ tools version to 0.0.0.8 (release/3.0)","State":"open","Body":"Addresses #634\r\n\r\nThese updated C++ tools address the last of dangling type-refs in DirectWriteForwarder and System.Printing.","Url":"https://github.com/dotnet/wpf/pull/1721","RelatedDescription":"Open PR \"Update private C++ tools version to 0.0.0.8 (release/3.0)\" (#1721)"},{"Id":"484749638","IsPullRequest":true,"CreatedAt":"2019-08-25T06:30:33","Actor":"vatsan-madhavan","Number":"1712","RawContent":null,"Title":"Adds missing Version resource to C++ binaries, and fixes PresentationCore.dll's missing Version resource","State":"closed","Body":"Fixes #1711 \r\n\r\n- PresentationCore was losing its auto-generated manifest during the ILDASM/ILASM round-tripping. This is fixed easily by including the `.res` file in ILASM task. \r\n- For C++ binaries, a new version resource is added and included in builds. \r\n\r\nThis change needs to be merged into dotnet/wpf, and then flowed into dotnet-wpf-int, in order to fix WpfGfx, PenImc, and PresentationNative. (See [dotnet-wpf-int PR](https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/2801?_a=overview))\r\n\r\n/cc @rladuca , @fabiant3 , @ryalanms , @leculver ","Url":"https://github.com/dotnet/wpf/pull/1712","RelatedDescription":"Closed or merged PR \"Adds missing Version resource to C++ binaries, and fixes PresentationCore.dll's missing Version resource\" (#1712)"},{"Id":"484816460","IsPullRequest":true,"CreatedAt":"2019-08-24T14:36:37","Actor":"dotnet-maestro[bot]","Number":"1719","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190824.2\r\n- **Date Produced**: 8/24/2019 12:56 PM\r\n- **Commit**: 462b52b7bce8cce9f40382866fdf87b162393afa\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19424.2\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1719","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1719)"},{"Id":"484803284","IsPullRequest":false,"CreatedAt":"2019-08-24T10:31:04","Actor":"TFTomSun","Number":"1718","RawContent":null,"Title":".NET Core 3 Preview 8 WPF Build error on custom BaseIntermediateOutputPath ","State":"open","Body":"* .NET Core Version: 3.0 Preview 8\r\n* Windows version: Windows 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n \r\n **Problem description:**\r\n I set the BaseIntermediateOutputPath to >$(OutputRootDirectory)obj\\$(Configuration)\\$(MSBuildProjectName)\\\r\nwhere OutputRootDirectory is a shared Output path of many projects\r\nIt is set via a build sdk that is included in the Directory.Build.props and Directory.Build.targets files in the root of my repository.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n When I build the project I get alot of build errors for xaml files, for example:\r\n>D:\\Git\\Collaboration\\Net\\Framework\\_out\\obj\\Debug\\Siemens.Collaboration.Net.Presentation\\netcoreapp3.0\\Controls\\AvalonDockApplicationControl.g.cs(54,18,54,62): error CS1504: Source file 'Controls\\AvalonDockApplicationControl.xaml' could not be opened -- Could not find file.\r\n\r\nIt seems like the line information generated in to the g.cs files don't honor the the changed BaseIntermediateOutputPath setting.\r\n\r\n\r\n **Expected behavior:**\r\nThe build just runs fine \r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1718","RelatedDescription":"Open issue \".NET Core 3 Preview 8 WPF Build error on custom BaseIntermediateOutputPath \" (#1718)"},{"Id":"484772919","IsPullRequest":true,"CreatedAt":"2019-08-24T03:27:08","Actor":"arpitmathur","Number":"1717","RawContent":null,"Title":"Enabling keyboard focus for page control buttons and zoom buttons on FlowDocumentPageViewer toolbar","State":"open","Body":"This change enables a user to keyboard focus on the page navigation controls and on the zoom controls in the toolbar in FlowDocumentPageViewer.\r\n\r\nFixes #1471 ","Url":"https://github.com/dotnet/wpf/pull/1717","RelatedDescription":"Open PR \"Enabling keyboard focus for page control buttons and zoom buttons on FlowDocumentPageViewer toolbar\" (#1717)"},{"Id":"484771882","IsPullRequest":true,"CreatedAt":"2019-08-24T03:13:20","Actor":"arpitmathur","Number":"1716","RawContent":null,"Title":"Enabling keyboard focus for page control buttons and zoom buttons on the FlowDocumentPageViewer toolbar","State":"open","Body":"[release/3.0 version of #1717]\r\n\r\nThis change enables a user to keyboard focus on the page navigation controls and on the zoom controls in the toolbar in FlowDocumentPageViewer.\r\n\r\nFixes #1471 ","Url":"https://github.com/dotnet/wpf/pull/1716","RelatedDescription":"Open PR \"Enabling keyboard focus for page control buttons and zoom buttons on the FlowDocumentPageViewer toolbar\" (#1716)"},{"Id":"484757950","IsPullRequest":true,"CreatedAt":"2019-08-24T00:55:48","Actor":"dotnet-maestro[bot]","Number":"1715","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190823.4\r\n- **Date Produced**: 8/24/2019 12:16 AM\r\n- **Commit**: ff7015f045cb1daf43ccd6106c28a5d306ee1581\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19423.4\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 3.0.0-rc1-19423-11 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1715","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1715)"},{"Id":"484757012","IsPullRequest":true,"CreatedAt":"2019-08-24T00:28:20","Actor":"vatsan-madhavan","Number":"1714","RawContent":null,"Title":"Adds missing Version resource to C++ binaries, and fixes PresentationCore.dll's missing Version resource","State":"open","Body":"[release/3.0 version of #1712]\r\n\r\nFixes #1711 \r\n\r\n- PresentationCore was losing its auto-generated manifest during the ILDASM/ILASM round-tripping. This is fixed easily by including the `.res` file in ILASM task. \r\n- For C++ binaries, a new version resource is added and included in builds. \r\n\r\nThis change needs to be merged into dotnet/wpf, and then flowed into dotnet-wpf-int, in order to fix WpfGfx, PenImc, and PresentationNative. (See [dotnet-wpf-int PR](https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/2802?_a=overview))\r\n\r\n/cc @rladuca , @fabiant3 , @ryalanms , @leculver, @marklio ","Url":"https://github.com/dotnet/wpf/pull/1714","RelatedDescription":"Open PR \"Adds missing Version resource to C++ binaries, and fixes PresentationCore.dll's missing Version resource\" (#1714)"},{"Id":"484756134","IsPullRequest":true,"CreatedAt":"2019-08-24T00:21:49","Actor":"vatsan-madhavan","Number":"1713","RawContent":null,"Title":"Fixes problems in WindowsDesktop SDK due to _TargetFrameworkVersionWithoutV being undefined sometimes","State":"open","Body":"[release/3.0 version of #1707] \r\n\r\nAddresses https://github.com/dotnet/wpf/issues/1651 - Invalid comparison in MSBuild's ignore-conditions mode in outer build of multitargeted project\r\n\r\nThis change ensures that the WindowsDesktop SDK never deals with undefined numeric values related to TFM.\r\n\r\nThis solution leverages the fact that `Items` are evaluated after `Properties` by MSBuild. See [Comparing properties and items](https://docs.microsoft.com/en-us/visualstudio/msbuild/comparing-properties-and-items?view=vs-2019)\r\n\r\n`_TargetFrameworkVersionValue` - a new Property which is defined for exclusive use within the WindowsDesktop SDK, and which is intended to act as a proxy for `_TargetFrameworkVersionWithoutV` - is defined in `Microsoft.NET.Sdk.WindowsDesktop.targets` _after_ `TargetFrameworkVersionWithoutV` is guaranteed to be defined by `Microsoft.NET.Sdk.targets`. \r\n\r\nEven here, we ensure that a fallback default (`0.0`) is provided - guaranteeing that `_TargetFrameworkVersionValue` will always be numeric. \r\n\r\nWhen the `Condition`s in the various `Items` in `Microsoft.NET.WindowsDesktop.props` are evaluated (which will happen strictly after all `Properties` are evaluated - whether they appear in `.props` or `.targets`), `_TargetFrameworkVersionValue` would have been (a) well-defined and (b) guaranteed to be a numeric value. This would in turn guarantee that errors of the kind `\"A numeric comparison was attempted on \"$(_TargetFrameworkVersionValue)\" that evaluates to \"\" instead of a number,\"` will no longer appear in outer-builds or in any other context. \r\n\r\nPS: This is a fix for a regression introduced by https://github.com/dotnet/wpf/pull/1027 (which shipped in Preview 6) as part of a set of fixes for improving multi-targeting experience, improved warnings and error messages during build, and improvements to project-system integration. \r\n","Url":"https://github.com/dotnet/wpf/pull/1713","RelatedDescription":"Open PR \"Fixes problems in WindowsDesktop SDK due to _TargetFrameworkVersionWithoutV being undefined sometimes\" (#1713)"},{"Id":"484749085","IsPullRequest":false,"CreatedAt":"2019-08-23T23:35:27","Actor":"vatsan-madhavan","Number":"1711","RawContent":null,"Title":"Some .NET Core WPF assemblies are missing Version information in PE header - breaks Watson/Telemetry bucketing","State":"open","Body":"Related to #784 \r\n\r\nSeveral WPF assemblies are missing Version resource in the PE header. This will prevent Watson (Microsoft's internal Telemetry system that tracks crashes) from being able to bucketize them by version. \r\n\r\nThe affected binaries are \r\n\r\n- All C++ binaries:\r\n  - DirectWriteForwarer\r\n  - S.Printing\r\n  - wpfgfx_cor3\r\n  - PenImc_cor3\r\n  - PresentationNative_Cor3\r\n- PresentationCore\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1711","RelatedDescription":"Open issue \"Some .NET Core WPF assemblies are missing Version information in PE header - breaks Watson/Telemetry bucketing\" (#1711)"},{"Id":"484719670","IsPullRequest":true,"CreatedAt":"2019-08-23T21:55:51","Actor":"dotnet-maestro[bot]","Number":"1710","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190823.3\r\n- **Date Produced**: 8/23/2019 9:10 PM\r\n- **Commit**: 339b8d57f0173c8fff2f3ddb6f0316470341aaea\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19423.3\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-rc1-19422-14 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-rc1.19420.10 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-rc1.19422.4 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19422.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19422.4 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1710","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1710)"},{"Id":"484529676","IsPullRequest":true,"CreatedAt":"2019-08-23T14:56:46","Actor":"dotnet-maestro[bot]","Number":"1709","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190823.2\r\n- **Date Produced**: 8/23/2019 1:01 PM\r\n- **Commit**: ddf07ce845f3570bd4999f58f7ec05825bbcf5ca\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19423.2\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1709","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1709)"},{"Id":"484325571","IsPullRequest":false,"CreatedAt":"2019-08-23T04:34:26","Actor":"betam4x","Number":"1708","RawContent":null,"Title":"WPF with .NET Core 3.0","State":"open","Body":"I tried out the latest version of VS 2019 and .NET Core 3.0 earlier with WPF, I believe .NET Core was preview 8.  I am running the latest version of Windows 10.  I have 2 4K monitors, and though WPF (and UWP) scaled fine when using the .NET framework, a new project I started with .NET core had completely broken HiDPI scaling under .NET Core.  I'm not sure where to report this.  It acted like I was still using a 96 dpi monitor, even though it's 144dpi with scaling (and 163dpi without).  I had just worked on another project prior to installing everything, and HiDPI scaling was working fine.  It was only when I tried .NET Core that things broke.","Url":"https://github.com/dotnet/wpf/issues/1708","RelatedDescription":"Open issue \"WPF with .NET Core 3.0\" (#1708)"},{"Id":"483782125","IsPullRequest":false,"CreatedAt":"2019-08-22T23:33:33","Actor":"vatsan-madhavan","Number":"1696","RawContent":null,"Title":"Triage and fix Policheck issues reported for managed assemblies","State":"closed","Body":"Triage and fix (where appropriate0 Policheck issues reported for managed assemblies \r\n\r\nBug query [internal link](https://devdiv.visualstudio.com/DevDiv/_queries?tempQueryId=81dc8da9-2a4a-42d7-8a60-b587fe29e0f6)","Url":"https://github.com/dotnet/wpf/issues/1696","RelatedDescription":"Closed issue \"Triage and fix Policheck issues reported for managed assemblies\" (#1696)"},{"Id":"484230762","IsPullRequest":true,"CreatedAt":"2019-08-22T23:32:18","Actor":"stevenbrix","Number":"1705","RawContent":null,"Title":"Fix issues flagged by Policheck","State":"closed","Body":"## Description \r\nFixes policheck bugs assigned to us via the SDL build step. There were a lot more issues identified, but only these 5 issues were actually relevant and worth fixing. The other issues aren't actually offensive or used in the incorrect context.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/969303/\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/969349/\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/969362/\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/969298/\r\n\r\n## Customer Impact \r\nPotentially offensive terms\r\n\r\n## Regression \r\n\r\nNo\r\n\r\n## Risk \r\n\r\nNone. Only affects comments\r\n\r\nFixes https://github.com/dotnet/wpf/issues/1696","Url":"https://github.com/dotnet/wpf/pull/1705","RelatedDescription":"Closed or merged PR \"Fix issues flagged by Policheck\" (#1705)"},{"Id":"484244107","IsPullRequest":false,"CreatedAt":"2019-08-22T22:24:00","Actor":"vsfeedback","Number":"1706","RawContent":null,"Title":"IMultiValueConverter receives {DisconnectedItem} with .NET Framework 4.8, KB4486153","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/697476/imultivalueconverter-receives-disconnecteditem-wit.html)._\n\n---\n<p>We detected a possible regression, as customers with an updated Windows Version to 1903 (to be exact, it is the recent Windows-Update, which installs .NET Framework 4.8, <strong>KB4486153</strong>) are experiencing a crash (InvalidCastException in on of our MultiValueConverter).</p><p>We've got a WPF-Binding-Scenario where we use a MultiValueConverter in a DataGrid in a WPF-UserControl, which is embedded in a WinForm.</p><p>The ViewModel - which is bound to the dataGrid - clears all used BindingLists when disposing.<br><em>B</em><em>efore KB4486153</em>, the bindingList.Clear() didnt trigger the multivalueconverter to convert anything.<br><em>After KB4486153,</em> the bindingList.Clear() triggers the mutivalueconverter with one parameter to be of type {DisconnectedItem} (in my case, it is the Item Property, which is bound to DataGridRow).</p><p>This is suprising, because as one of the changelog-items in .NET Framework 4.8 was as followed:</p><p><em>&quot;Fixed an issue involving bindings with DataContext explicitly on the binding path. When DataContext changes to {DisconnectedItem}, the binding should not pass that value to user code like converters, property-change handlers, etc. [801039, PresentationFramework.dll, Bug, Build:3761]&quot;</em> .</p><p><strong>**EDIT**:</strong></p><p>Just found out that this line is the problem in .NET 4.8. The Converter is called with {DisconnectedItem} if the bound item is getting removed, if the the problematic binding is specified as followed:</p><pre>&lt;Binding RelativeSource=&quot;{RelativeSource Mode=FindAncestor, AncestorType=DataGridRow, AncestorLevel=1}&quot; Path=&quot;Item&quot; /&gt;\n</pre><p>If i change it to:</p><pre>&lt;Binding Path=&quot;.&quot; /&gt;\n</pre><p>it works perfectly, even if we remove the item (or clearing the bindinglist) - the converter does not crash (or does not getting called).</p><p>But as this worked before 4.8 with a RelativeSource binding, this regression still should be checked.</p><p>I finally managed to create a small RePro which crashes with 4.8 (containing KB4486153) and does not Crash with 4.7.2 or earlier. Please have a look at it:<a href=\"https://developercommunity.visualstudio.com/storage/attachments/88541-disconnectedobject-repro.zip\">disconnectedobject-repro.zip</a></p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/19/2019, 00:49 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 8/22/2019, 01:53 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1706","RelatedDescription":"Open issue \"IMultiValueConverter receives {DisconnectedItem} with .NET Framework 4.8, KB4486153\" (#1706)"},{"Id":"484228547","IsPullRequest":true,"CreatedAt":"2019-08-22T22:01:03","Actor":"dotnet-maestro[bot]","Number":"1704","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190822.3\r\n- **Date Produced**: 8/22/2019 7:17 PM\r\n- **Commit**: e2161d0176596afcf2144993784dcca5a6181f7f\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19422.3\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1704","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1704)"},{"Id":"484226559","IsPullRequest":true,"CreatedAt":"2019-08-22T22:00:46","Actor":"stevenbrix","Number":"1703","RawContent":null,"Title":"making small fixes for sdl violations","State":"closed","Body":"Fixes the following AzDO issues related to SDL violations\r\n\r\n- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/969303/\r\n- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/969349/\r\n- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/969362/\r\n- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/969298/","Url":"https://github.com/dotnet/wpf/pull/1703","RelatedDescription":"Closed or merged PR \"making small fixes for sdl violations\" (#1703)"},{"Id":"483781281","IsPullRequest":false,"CreatedAt":"2019-08-22T20:00:13","Actor":"vatsan-madhavan","Number":"1695","RawContent":null,"Title":"Fix PenImc and PresentationNative Policheck Issues","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/1695","RelatedDescription":"Closed issue \"Fix PenImc and PresentationNative Policheck Issues\" (#1695)"},{"Id":"483996242","IsPullRequest":true,"CreatedAt":"2019-08-22T14:31:10","Actor":"dotnet-maestro[bot]","Number":"1701","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190822.2\r\n- **Date Produced**: 8/22/2019 1:03 PM\r\n- **Commit**: 9c4e4307f1de07a16c2e5b8be48745d3f420875d\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-rc1.19422.2\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1701","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1701)"},{"Id":"484010988","IsPullRequest":false,"CreatedAt":"2019-08-22T13:57:01","Actor":"Simon-IT","Number":"1702","RawContent":null,"Title":"How to debug a WPF applications ?","State":"open","Body":"Hi,\r\nI've follow all the instructions from the developer-guide.md files. All is compiled well, but I cannot configure VS to debug a WPF application, because it doesn't take the pdb files compiled by the build.cmd. Can you help me ?","Url":"https://github.com/dotnet/wpf/issues/1702","RelatedDescription":"Open issue \"How to debug a WPF applications ?\" (#1702)"},{"Id":"483910029","IsPullRequest":false,"CreatedAt":"2019-08-22T10:34:20","Actor":"vitek-karas","Number":"1700","RawContent":null,"Title":"Xaml parser doesn't work with AssemblyLoadContext","State":"open","Body":"Trying to load XAML into non-default `AssemblyLoadContext` can lead to very confusing errors. The underlying problem is that XAML parser is not aware of assembly load contexts. The parser itself typically runs in the `Default` load context, but it may be triggered to load XAML into a custom (secondary) load context. In that case all assembly resolution should happen via the secondary load context.\r\n\r\nIn order to make this easier .NET Core 3.0 introduced the \"contextual reflection\" concept, which can switch all reflection based APIs to use the secondary load context. More details about contextual reflection can be found in [AssemblyLoadContext.ContextualReflection.md](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/AssemblyLoadContext.ContextualReflection.md).\r\n\r\nThat fixes all cases where the XAML parser uses reflection APIs like `Assembly.GetType` and similar. Unfortunately the XAML parser implements its own assembly resolution logic in some cases. This logic was copied from the .NET Framework version of WPF and it still relies AppDomains, GAC and so on - it is not aware of `AssemblyLoadContext`. This logic can break the correct behavior: Among other things it walks all assemblies loaded into the current AppDomain (so all assemblies in the process, as .NET Core has only one AppDomain) and using custom logic resolves assembly against that list. If there are two assemblies of the same (or similar) names in that list, it will basically randomly pick the first one it finds. The code which does that is here: https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/SafeSecurityHelper.cs#L133\r\n\r\nAssembly load contexts are typically used to implement plugin architecture. To provide good levels of isolation for each plugin, every plugin is loaded into its own load context. This can very easily lead to cases where each plugin has its own version of a certain dependency. But the above mentioned code ignores the isolation of load contexts, and will resolve assembly globally - leading to cases where the plugins will get the wrong version of dependency used.\r\n\r\nA sample repro app is here: https://github.com/vitek-karas/WPFPluginLoadProblem  \r\nThis app shows the problem with a typical plugin architecture (host app loading two plugins, each using XAML parser to load some XAML).\r\n\r\nOriginally this problem was found trying to implement tests on WPF, using ALC to provide isolation of WPF itself. The repro of that case is here: https://github.com/nick-beer/ALC-XAML-LOAD-BUG  \r\nThis repro boils down to the same underlying problem.\r\n\r\n/cc @nick-beer","Url":"https://github.com/dotnet/wpf/issues/1700","RelatedDescription":"Open issue \"Xaml parser doesn't work with AssemblyLoadContext\" (#1700)"},{"Id":"483842207","IsPullRequest":false,"CreatedAt":"2019-08-22T08:23:23","Actor":"weltkante","Number":"1699","RawContent":null,"Title":"Regression in application template, generic.xaml doesn't work out of the box","State":"open","Body":"* .NET Core Version: latest nightly (5.0.0-alpha1.19415.3)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nCreating a new WPF application for .NET Core the `generic.xaml` does not work out of the box when added manually (e.g. copy pasted from an existing project), it used to work on Desktop. It does work when using \"new item\" templates but since adding custom controls is just inheriting from a framework class it is often done without using the \"new item\" template and instead just writing code.\r\n \r\n **Actual behavior:**\r\nCreating a new application with the WPF for .NET Core template does not add a ThemeInfo attribute, I need to add a CustomControl template to get the attribute. This is a regression from Desktop Framework template behavior.\r\n\r\n **Expected behavior:**\r\nThe WPF for .NET Core application template should already add the ThemeInfo attribute.\r\n \r\n **Minimal repro:**\r\n* create a new WPF application for .NET Core\r\n* manually add code for a Custom Control and generic.xaml\r\n","Url":"https://github.com/dotnet/wpf/issues/1699","RelatedDescription":"Open issue \"Regression in application template, generic.xaml doesn't work out of the box\" (#1699)"},{"Id":"483783871","IsPullRequest":false,"CreatedAt":"2019-08-22T06:09:24","Actor":"vatsan-madhavan","Number":"1697","RawContent":null,"Title":"Fix Policheck issues in WPF Build props/targets","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/1697","RelatedDescription":"Closed issue \"Fix Policheck issues in WPF Build props/targets\" (#1697)"},{"Id":"483785971","IsPullRequest":false,"CreatedAt":"2019-08-22T05:59:10","Actor":"MilosAuder","Number":"1698","RawContent":null,"Title":"When IsInactiveSelectionHighlightEnabled is turned on, then scrolling has visual defect","State":"open","Body":"* .NET Version: 4.5.1\r\n* Windows version: 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Don't know\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nSee title. Visual defect is that characters look different than they should - some are gray (like highlighted), some are not - see attached picture.\r\n \r\n **Expected behavior:**\r\nThere are no strange visual effects and all characters look the same.\r\n \r\n **Minimal repro:**\r\nSetup: I have _RichTextBox_ with _IsInactiveSelectionHighlightEnabled = true_. Inside is a longer text that needs scrollbar.\r\n\r\n1. Select all text.\r\n2. Click outside text box to lose focus.\r\n3. Text is still highlighted as expected with light gray.\r\n4. When scrolling text box there is strange visual defect, some characters are light gray as they should be, but some characters are not and are black.\r\n\r\nStackOverflow links with similar problem: \r\n[StackOverflow1](https://stackoverflow.com/questions/34248394/wpf-bug-in-flowdocumentscrollviewer-isinactiveselectionhighlightenabled)\r\n[StackOverflow2](https://stackoverflow.com/questions/54973499/in-a-wpf-textbox-why-does-an-inactive-selection-appear-incorrectly-when-scrolli)\r\n\r\nScreenshot: ![fed-bug](https://user-images.githubusercontent.com/45784262/63489526-a8febb80-c4b2-11e9-8c88-aca0756bd169.png) \r\n","Url":"https://github.com/dotnet/wpf/issues/1698","RelatedDescription":"Open issue \"When IsInactiveSelectionHighlightEnabled is turned on, then scrolling has visual defect\" (#1698)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-26T05:30:52.5575684Z","RunDurationInMilliseconds":807}