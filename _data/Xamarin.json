{"Data":{"Blog":{"FeedItems":[{"Title":"The New & Improved Xamarin Developers YouTube Channel!","PublishedOn":"2019-04-18T18:13:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are so excited to re-launch our Xamarin Developers YouTube channel! Here you will find fresh content on building amazing mobile apps directly from the Xamarin team here at Microsoft.\nThe post The...","Href":"https://devblogs.microsoft.com/xamarin/new-xamarin-developers-youtube-channel/","RawContent":null},{"Title":"Getting Ready for macOS’s Hardened Runtime and Notary","PublishedOn":"2019-04-15T16:11:14+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"With macOS Mojave, Apple introduced support for Hardened Runtime and Notary service. These two services are designed to improve application security on macOS.\nThe post Getting Ready for macOS’s...","Href":"https://devblogs.microsoft.com/xamarin/macos-hardened-runtime-notary/","RawContent":null},{"Title":"Xamarin Podcast: Visual Studio 2019 is released!","PublishedOn":"2019-04-12T17:14:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in Xamarin and cloud development.\nPodcast Highlights\nVisual Studio 2019 has been released and is...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-visual-studio-2019-is-released/","RawContent":null},{"Title":"Sharing Files & Email Attachments with Xamarin.Essentials Preview Features","PublishedOn":"2019-04-10T19:15:56+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In the recent release of Xamarin.Essentials (1.1.0), we introduced several new stable features including detect shake, browser customization, and a plethora of platform helpers.\nThe post Sharing Files...","Href":"https://devblogs.microsoft.com/xamarin/sharing-files-attachments-xamarin-essentials/","RawContent":null},{"Title":"Getting Started With WorkManager","PublishedOn":"2019-04-08T18:12:29+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"If you need to schedule a background task on Android, you&#8217;re probably familiar with all of the various ways to accomplish this such as:\nGoogle Cloud Messaging\nFirebase Cloud...","Href":"https://devblogs.microsoft.com/xamarin/getting-started-workmanager/","RawContent":null},{"Title":"Visual Challenge Conquered!","PublishedOn":"2019-04-03T19:03:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Visual Challenge Conquered! appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/visual-challenge-conquered/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2019","PublishedOn":"2019-04-02T19:56:18+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The post What&#8217;s New for Xamarin Developers in Visual Studio 2019 appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-visual-studio-2019/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in April","PublishedOn":"2019-04-01T19:05:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Xamarin and .NET Developer Events in April appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-and-net-developer-events-in-april/","RawContent":null},{"Title":"GlideX For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The post GlideX For Fast Images on Android appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The post Introducing the Xamarin.iOS Interpreter appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/introducing-xamarin-ios-interpreter/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9472829580","Type":"IssuesEvent","CreatedAt":"2019-04-18T22:42:32","Actor":"codecore","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3005","RelatedDescription":"Opened issue \"Runtime calls endSession() without first calling beginSession()\" (#3005) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n1.  Run Xamarin.UITest in AppCenter. Not restricted to a specific device, or OS version. Observed on Google Pixel 2, Moto G6, Huawei Nexus 6P, and others.\r\njava.lang.IllegalStateException: Attempted to endSession() without preceding matching call to beginSession().\r\n\r\n[AndroidAppCenterStackTrace.txt](https://github.com/xamarin/xamarin-android/files/3096364/AndroidAppCenterStackTrace.txt)\r\n\r\n### Expected Behavior\r\n   Test run flawlessly\r\n### Actual Behavior\r\n  App is unloaded, screenshot is the android 'desktop'. Logfile contains a stacktrace.\r\n### Version Information\r\nHuewei Nexus 6P Android 8.1.0\r\n### Log File\r\nhttps://github.com/xamarin/xamarin-android/files/3096364/AndroidAppCenterStackTrace.txt"},{"Id":"9472531752","Type":"PullRequestEvent","CreatedAt":"2019-04-18T21:35:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2997","RelatedDescription":"Merged pull request \"Update emulator to version 28.0.25\" (#2997) at xamarin/xamarin-android","RelatedBody":"This version supports running in headless mode which may be useful for our CI\r\nservers when running unit tests."},{"Id":"9471983104","Type":"PullRequestEvent","CreatedAt":"2019-04-18T19:55:50","Actor":"mjbond-msft","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3004","RelatedDescription":"Opened pull request \"[build] Commercial build support for pipeline builds\" (#3004) at xamarin/xamarin-android","RelatedBody":"Perform appropriate build stages when the pipeline is signaled to perform a commercial build"},{"Id":"9471304666","Type":"PullRequestEvent","CreatedAt":"2019-04-18T18:01:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3003","RelatedDescription":"Merged pull request \"[mono-runtimes] Fix the timestamps on the mono bundle.\" (#3003) at xamarin/xamarin-android","RelatedBody":"We had a weird bunch of test failures on one\r\nof the PR's which bump mono. Many of the\r\nMSBuild tests were failing becuase targets\r\nwere running when they shouldn't. Looking\r\nat the logs we saw\r\n\r\n\tInput file \"/Users/builder/jenkins/workspace/xamarin-android-pr-pipeline-release/xamarin-android/bin/Release/lib/xamarin.android/xbuild-frameworks/MonoAndroid/v1.0/Facades/Microsoft.Win32.Primitives.dll\" is newer than output file \"obj/Debug/UnnamedProject.dll\".\r\n\r\nWhen ment the `Microsoft.Win32.Primitives.dll` assembly\r\nsomehow was `newer` than a file we just build...\r\nFurther investigation into the mono bundle resulted in\r\n\r\n\t unzip -l android-release-Darwin-cf880be66a2d1cc8ca34e345114a7f420b7b86ea.zip | grep Microsoft.Win32\r\n\t\t4608  04-17-2019 08:54   android-bcl/monodroid/Facades/Microsoft.Win32.Primitives.dll\r\n\r\nSo this file was created on `04-17-2019 08:54`. However the\r\nunit test build log had\r\n\r\n\tBuild started 4/16/2019 7:50:57 PM.\r\n\r\nSo the mono bundle had different timestamps. This is\r\nprobably down to something weird on the bots.\r\nSo in order to try to fix this we shall `Touch` the\r\nfiles we get from the bundle to make sure they have\r\nthe current date."},{"Id":"9471125048","Type":"PullRequestEvent","CreatedAt":"2019-04-18T17:31:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3002","RelatedDescription":"Merged pull request \"[tests] Move Install and InstantRun tests to MSBuildDeviceIntegration\" (#3002) at xamarin/xamarin-android","RelatedBody":"Both the InstallTests and InstantRunTest need a device to work. So they should be in the `MSBuildDeviceIntegration` test project rather than in the main Xamarin.Android.Build.Tests"},{"Id":"9469777990","Type":"PullRequestEvent","CreatedAt":"2019-04-18T14:19:19","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3003","RelatedDescription":"Opened pull request \"[mono-runtimes] Fix the timestamps on the mono bundle.\" (#3003) at xamarin/xamarin-android","RelatedBody":"We had a weird bunch of test failures on one\r\nof the PR's which bump mono. Many of the\r\nMSBuild tests were failing becuase targets\r\nwere running when they shouldn't. Looking\r\nat the logs we saw\r\n\r\n\tInput file \"/Users/builder/jenkins/workspace/xamarin-android-pr-pipeline-release/xamarin-android/bin/Release/lib/xamarin.android/xbuild-frameworks/MonoAndroid/v1.0/Facades/Microsoft.Win32.Primitives.dll\" is newer than output file \"obj/Debug/UnnamedProject.dll\".\r\n\r\nWhen ment the `Microsoft.Win32.Primitives.dll` assembly\r\nsomehow was `newer` than a file we just build...\r\nFurther investigation into the mono bundle resulted in\r\n\r\n\t unzip -l android-release-Darwin-cf880be66a2d1cc8ca34e345114a7f420b7b86ea.zip | grep Microsoft.Win32\r\n\t\t4608  04-17-2019 08:54   android-bcl/monodroid/Facades/Microsoft.Win32.Primitives.dll\r\n\r\nSo this file was created on `04-17-2019 08:54`. However the\r\nunit test build log had\r\n\r\n\tBuild started 4/16/2019 7:50:57 PM.\r\n\r\nSo the mono bundle had different timestamps. This is\r\nprobably down to something weird on the bots.\r\nSo in order to try to fix this we shall `Touch` the\r\nfiles we get from the bundle to make sure they have\r\nthe current date."},{"Id":"9469012020","Type":"PullRequestEvent","CreatedAt":"2019-04-18T12:34:31","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3002","RelatedDescription":"Opened pull request \"[tests] Move Install and InstantRun tests to MSBuildDeviceIntegration\" (#3002) at xamarin/xamarin-android","RelatedBody":"Both the InstallTests and InstantRunTest need a device to work. So they should be in the `MSBuildDeviceIntegration` test project rather than in the main Xamarin.Android.Build.Tests"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9473580509","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:43:27","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5953","RelatedDescription":"Closed issue \"[Bug] Thicccness is spelled incorrectly in Xamarin.Core.Thickness\" (#5953) at xamarin/Xamarin.Forms","RelatedBody":"Please correct."},{"Id":"9473563407","Type":"IssuesEvent","CreatedAt":"2019-04-19T02:37:44","Actor":"MhAllan","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5958","RelatedDescription":"Opened issue \"MasterDetails UWP Navigation back loses the menu\" (#5958) at xamarin/Xamarin.Forms","RelatedBody":"### Steps to Reproduce\r\n\r\n- Create master detail project\r\n- Click item on the menu to set Details to NavigationPage\r\n- Push a new page on the stack\r\n- Click back arrow (The menu button disappears)\r\n\r\n### Expected Behavior\r\nGoing back to NavigationPage previous page and keeping the menu button\r\n\r\n### Actual Behavior\r\nGoes back to NavigationPage previous page but the menu button disappears\r\n\r\n### Basic Information\r\n\r\nVS 2019, Xamarin Forms 3.6.0.264807\r\n"},{"Id":"9473436866","Type":"PullRequestEvent","CreatedAt":"2019-04-19T01:55:26","Actor":"slakul","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5957","RelatedDescription":"Opened pull request \"[macOS] fix layout problems after the parent height change\" (#5957) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n<!-- Describe your changes here. -->\r\nThe coordinate system in macOS is different than in Xamarin.Forms - the point (X=0, Y=0) is located in the left bottom corner. This fix resolves the problem of moving up the child control when the height of the parent is changed, but size and location of the child is the same. It was necessary to add new properties described below to be able to monitor parent height change.\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #5890 \r\n- fixes #4854\r\n\r\n### API Changes ###\r\n\r\nAdded in Xamarin.Forms.VisualElement:\r\n - public static readonly BindableProperty ParentHeightProperty\r\n - double ParentHeight\r\n - static bool IsMacOsPlatform\r\n\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- macOS\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nChild controls should not move as described in the resolved issues.\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\nManual tests included in Xamarin.Forms.Controls.Issues:\r\n- Issue4854\r\n- Issue5890\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"9472775583","Type":"IssuesEvent","CreatedAt":"2019-04-18T22:29:06","Actor":"SuperCorks","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5956","RelatedDescription":"Opened issue \"CSS defined in App does not affect TitleView [Bug] \" (#5956) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nStyles defined in a CSS file and added to the `App`'s resource dictionary don't get applies to `TitleView` content.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a simple css file (e.g. `#ViewTitle { color: white; }`\r\n2. Add it to the `App`'s resources.\r\n2. Add a `TitleView` to a page.\r\n3. Style its content with the css.\r\n\r\n### Expected Behavior\r\nThe style in the css should apply to the elements of the title view.\r\n\r\n### Actual Behavior\r\nIt don't\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.x\r\n\r\n### Reproduction Link\r\nHere is a simple project:\r\n[App1.zip (sorry no sln)](https://github.com/xamarin/Xamarin.Forms/files/3096351/App1.zip)\r\n\r\n"},{"Id":"9472765383","Type":"PullRequestEvent","CreatedAt":"2019-04-18T22:26:33","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5955","RelatedDescription":"Opened pull request \"first set of changes to stop exceptions in previewer with Shell\" (#5955) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n<!-- Describe your changes here. -->\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9472262778","Type":"PullRequestEvent","CreatedAt":"2019-04-18T20:45:20","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5954","RelatedDescription":"Opened pull request \"fix infinite loops and remove public apis\" (#5954) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n- removed GoToPart from the IShellController code parts because there isn't any platform code that uses them so it's not useful at this point\r\n- added an exception if someone tries to do a relative route to a shell section as this behavior hasn't been implemented yet so I don't want the behavior to change once we make it so relative routes push to a stack. I also added an internal overload to turn this on for unit tests so unit tests can continue unhindered with validating behavior\r\n- I fixed  the logic when you use an absolute route to navigation via <routename> / <page>. It was causing an  infinite loop\r\n- removed getroutekeys and a few additional classes added in pre9 that will become exposed later down the road\r\n\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\n Removed:\r\n - Routing.GetRouteKeys\r\n- class NavigationRequest\r\n- GotoPart from the IShellController classes as the platforms don't use these methods so they don't need to be apart of the controllers\r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n\r\n### Testing Procedure ###\r\n- there are unit tests\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9471437523","Type":"IssuesEvent","CreatedAt":"2019-04-18T18:23:50","Actor":"PotatosAreDelicious","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5953","RelatedDescription":"Opened issue \"[Bug] Thicccness is spelled incorrectly in Xamarin.Core.Thickness\" (#5953) at xamarin/Xamarin.Forms","RelatedBody":"Please correct."},{"Id":"9470894057","Type":"PullRequestEvent","CreatedAt":"2019-04-18T16:53:19","Actor":"codemillmatt","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5952","RelatedDescription":"Opened pull request \"Fixes #5951\" (#5952) at xamarin/Xamarin.Forms","RelatedBody":"Added a null check in iOS ShadowEffect OnDetached"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9472400136","Type":"IssuesEvent","CreatedAt":"2019-04-18T21:10:08","Actor":"jamesmontemagno","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5917","RelatedDescription":"Opened issue \"AppContext.TargetFrameworkName is null\" (#5917) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Run any app and check AppContext\r\n2. TargetFrameworkName are null\r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nShould have the targetframeworkname specified\r\n\r\n### Actual Behavior\r\nare null\r\n\r\n### Version Information\r\n\r\n"},{"Id":"9471978267","Type":"IssuesEvent","CreatedAt":"2019-04-18T19:55:01","Actor":"dansiegel","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5916","RelatedDescription":"Opened issue \"[Feature Request] Add support for Attributes to build Info.plist\" (#5916) at xamarin/xamarin-macios","RelatedBody":"### Description\r\n\r\nIn Xamarin Android we have a number of really helpful attributes that can generally replace the need for creating complex Android Manifests. Some examples would include the UsesPermissionAttribute, IntentFilterAttribute, ApplicationAttribute, ActivityAttribute, etc. It's about high time that this sort of attribute love made it's way to iOS where we could start decorating our code with attributes that the build targets could then use to generate the full Info.plist or even to update the Entitilements.plist.\r\n\r\n### Example Use Case\r\n\r\nA common use case for this would be when using App Center Distribution. Assuming a full CI/CD pipeline here I might have my app split up 3 times in App Center for Dev, Stage and Production. This means for each environment I've got a unique App Secret for App Center. What's more is I might want to use Distribution for Dev and Stage but not Production. If we look at the [App Center Distribution docs](https://docs.microsoft.com/en-us/appcenter/sdk/distribute/xamarin#23-for-ios-only-modify-your-infoplist) we'll see that we need to add a CFBundleURLSchemes in the CFBundleURLTypes:\r\n\r\n```xml\r\n<key>CFBundleURLTypes</key>\r\n  <array>\r\n      <dict>\r\n          <key>CFBundleURLSchemes</key>\r\n          <array>\r\n              <string>appcenter-${APP_SECRET}</string>\r\n          </array>\r\n      </dict>\r\n  </array>\r\n```\r\n\r\nAs an attribute this might look something like:\r\n\r\n```cs\r\n[assembly: CFBundleUrlType(Schemes = new[] { \"appcenter-{app_secret}\" })]\r\n```\r\n\r\nOr really for best practices it would probably look more like:\r\n\r\n```cs\r\n[assembly: CFBundleUrlType(Schemes = new[] { Constants.AppCenterScheme })]\r\n```\r\n\r\nThe benefit here is that we can rely on processes we're probably are already using to inject things like the App Center secret at build time rather than having to deal with the nightmare of trying to make sure it doesn't get checked into source control and then writing a bunch of special build scripts to go and do regex replacements of some token in the Info.plist.\r\n\r\n### Proposed Attributes\r\n\r\n```cs\r\npublic enum BundleUrlTypeRole\r\n{\r\n    None,\r\n    Editor,\r\n    Viewer\r\n}\r\n\r\npublic class CFBundleUrlTypeAttribute : Attribute\r\n{\r\n    public BundleUrlTypeRole Role { get; set; }\r\n    public string Name { get; set; }\r\n    public string[] Schemes { get; set; }\r\n    public string Icon { get; set; }\r\n}\r\n\r\npublic class UIApplicationAttribute : Attribute\r\n{\r\n    public string Name { get; set; } // AwesomeApp\r\n    public string DisplayName { get; set; } // Awesome App\r\n    public string Identifier { get; set; }  // com.contoso.awesomeapp\r\n    public string MinimumOSVersion { get; set; } // 10.0\r\n    public string Version { get; set; } // 1.0.0.1234\r\n    public string ShortVersion { get; set; } // 1.0\r\n    public string[] Fonts { get; set; } \r\n    public bool AutoLoadFonts { get; set; } // if true add any ttf/otf that is a BundleResource\r\n}\r\n\r\npublic static class PrivacyUsage\r\n{\r\n    public const string Camera = nameof(Camera);\r\n    public const string Contacts = nameof(Contacts);\r\n    public const string Health = nameof(Health);\r\n    public const string LocationAlways = nameof(LocationAlways);\r\n    public const string Location = nameof(Location);\r\n    public const string LocationWhenInUse = nameof(LocationWhenInUse);\r\n    // etc...\r\n}\r\n\r\npublic class PrivacyAttribute : Attribute\r\n{\r\n    public PrivatcyAttribute(string permission, string description) { }\r\n\r\n    public string Permission { get; } // i.e. Camera\r\n    public string Description { get; }  // We want to take fun photos of your dinner for Instagram\r\n}\r\n\r\npublic enum ApsEnvironment\r\n{\r\n    Development,\r\n    Production\r\n}\r\n\r\npublic class PushNotificationAttribute : Attribute\r\n{\r\n    public PushNotificationAttribute(ApsEnvironment environment) { }\r\n    public ApsEnvironment Environment { get; }\r\n}\r\n\r\n// Assumed to be enabled if the attribute exists\r\npublic class DataProtectionAttribute : Attribute\r\n{\r\n}\r\n\r\npublic class KeychainAttribute : Attribute\r\n{\r\n    public KeychainAttribute(string[] groups) { }\r\n    public string[] Groups { get; }\r\n}\r\n\r\npublic class AssociatedDomainsAttribute\r\n : Attribute\r\n{\r\n    public AssociatedDomainsAttribute\r\n(string[] domains) { }\r\n    public string[] Domains { get; }\r\n}\r\n\r\npublic class AppGroupsAttribute : Attribute\r\n{\r\n    public AppGroupsAttribute (string[] domains) { }\r\n    public string[] Domains { get; }\r\n}\r\n```\r\n\r\n### Putting it all together\r\n\r\nTo put this all together you might have something like the following to handle the above Use case in which you have an app with 3 environments Dev, Stage, & Production:\r\n\r\n```cs\r\n// Properties like the Version, Min OS Version would not be touched in the \r\n// Info.plist because they are not set here.\r\n#if STAGE\r\n[assembly: UIApplication(\r\n  Name = \"AwesomeAppStage\",\r\n  DisplayName = \"Awesome App (Stage)\",\r\n  Identifier = \"com.contoso.awesomeapp-stage\",\r\n  AutoLoadFonts = true\r\n)]\r\n#elif STORE\r\n[assembly: UIApplication(\r\n  Name = \"AwesomeApp\",\r\n  DisplayName = \"Awesome App\",\r\n  Identifier = \"com.contoso.awesomeapp\",\r\n  AutoLoadFonts = true\r\n)]\r\n#else\r\n[assembly: UIApplication(\r\n  Name = \"AwesomeAppDev\",\r\n  DisplayName = \"Awesome App (Dev)\",\r\n  Identifier = \"com.contoso.awesomeapp-dev\",\r\n  AutoLoadFonts = true\r\n)]\r\n#endif\r\n\r\n#if STORE\r\n[assembly: PushNotification(ApsEnvironment.Production)]\r\n#else\r\n[assembly: PushNotification(ApsEnvironment.Development)]\r\n[assembly: CFBundleUrlType(Schemes = new[] { Constants.AppCenterScheme })]\r\n#endif\r\n\r\n[assembly: DataProtection]\r\n[assembly: Keychain(new[] { \"com.contoso.awesomeapp\" })]\r\n\r\n[assembly: Privacy(PrivacyUsage.Camera, \"We need to scan a barcode\")]\r\n[assembly: Privacy(PrivacyUsage.Location, \"We track your movements and report them to your boss\")]\r\n```\r\n\r\nAt build time there should be a build task that transforms both the Info.plist and Entitlements.plist based on these attributes so that you are in essence updating your plist from code and without the need for crazy build scripts."},{"Id":"9470108160","Type":"PullRequestEvent","CreatedAt":"2019-04-18T15:00:35","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5915","RelatedDescription":"Opened pull request \"Remove private API\" (#5915) at xamarin/xamarin-macios","RelatedBody":"https://github.com/xamarin/xamarin-macios/issues/5913"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1118990448654200832","CreatedAt":"2019-04-18T21:31:27+00:00","UserScreenname":"xamarinhq","Text":"Find fresh content on building amazing mobile apps directly from the Xamarin team @ Microsoft.\n\nIntroducing the New… https://t.co/S4JC1oCDJU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":22,"RawContent":null},{"Id":"1117944446899896322","CreatedAt":"2019-04-16T00:15:01+00:00","UserScreenname":"xamarinhq","Text":"We're getting ready for macOS’s Hardened Runtime and Notary. Learn how to get started; from configuring your entitl… https://t.co/p4W2CszalI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"1116762533346652160","CreatedAt":"2019-04-12T17:58:31+00:00","UserScreenname":"xamarinhq","Text":"There’re tons in store for you in the latest podcast... @codemillmatt and @JamesMontemagno rundown the new features… https://t.co/1TlcD9N8yV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":36,"FavoriteCount":18,"RawContent":null},{"Id":"1115620503232962560","CreatedAt":"2019-04-09T14:20:29+00:00","UserScreenname":"xamarinhq","Text":"Under the Hood: Take an inside look at #DevOps at Microsoft, in this webinar with @abelsquidhead and @Applitools on… https://t.co/qgf7T5OPvM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":38,"FavoriteCount":23,"RawContent":null},{"Id":"1115323538091720704","CreatedAt":"2019-04-08T18:40:27+00:00","UserScreenname":"xamarinhq","Text":"Say 'Hello' to WorkManager - a library that makes it easy to schedule deferrable, asynchronous tasks even if the ap… https://t.co/xOYvf5E0K0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":106,"FavoriteCount":46,"RawContent":null},{"Id":"1113833658920472576","CreatedAt":"2019-04-04T16:00:12+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1113554700702449664","CreatedAt":"2019-04-03T21:31:44+00:00","UserScreenname":"xamarinhq","Text":"Last week we issued a challenge to the Xamarin community to use the new Material Design controls with Visual by rep… https://t.co/JpaGEihELG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":147,"FavoriteCount":54,"RawContent":null},{"Id":"1113137014768066560","CreatedAt":"2019-04-02T17:52:00+00:00","UserScreenname":"xamarinhq","Text":"News from the #VisualStudio 2019 Launch Event. See what’s new for #Xamarin Developers in #VS2019,… https://t.co/ylrA7eBnQ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":146,"FavoriteCount":72,"RawContent":null},{"Id":"1112804184166944768","CreatedAt":"2019-04-01T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Learn about the new, exciting releases and tooling to help jumpstart your next mobile development project.\n\nJoin us… https://t.co/4AhXCdCrB0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":27,"FavoriteCount":13,"RawContent":null},{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":25,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":37,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":96,"FavoriteCount":44,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":68,"FavoriteCount":29,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":26,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":120,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":97,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":41,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null}]}},"RunOn":"2019-04-19T05:30:51.4361425Z","RunDurationInMilliseconds":2332}