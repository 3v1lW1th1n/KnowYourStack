{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10487921365","Type":"PullRequestEvent","CreatedAt":"2019-09-25T00:33:00","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7580","RelatedDescription":"Opened pull request \"Warn owners when ReadMe contains images that would be rewritten\" (#7580) at NuGet/NuGetGallery","RelatedBody":"We introduced a change that causes http images in readme files to be rewritten using https.\r\n\r\nThis change alerts an owner when their documentation contains an image that causes this to happen, both at edit time, and on package details page.\r\n\r\nIntroduces compound return type from readme service."},{"Id":"10487900769","Type":"IssuesEvent","CreatedAt":"2019-09-25T00:27:33","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7033","RelatedDescription":"Closed issue \"Deleted users are locked out from site until their session token expires\" (#7033) at NuGet/NuGetGallery","RelatedBody":"1. Log into account A.\r\n2. Delete account A **without logging out**\r\n    - Have a site admin delete you\r\n    - Delete the account from the DB\r\n3. Attempt to browse the gallery.\r\n\r\nAny request that loads the current user (`GetCurrentUser`) will throw at https://github.com/NuGet/NuGetGallery/blob/master/src/NuGetGallery/ExtensionMethods.cs#L481"},{"Id":"10487503322","Type":"IssuesEvent","CreatedAt":"2019-09-24T22:51:57","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7579","RelatedDescription":"Opened issue \"[Gravatar] Remove unused \"UnsecureGravatarUrl\"\" (#7579) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nThe Gallery supports creating HTTP links to Gravatar (see [this](https://github.com/NuGet/NuGetGallery/blob/2733e38f4d8e15020855dc99047d77647e7d33e4/src/NuGetGallery/Helpers/GravatarHelper.cs#L17)). This is unused by NuGet.org and has little value for customers. Consider removing this code path.\r\n\r\nSee https://github.com/NuGet/NuGetGallery/pull/7572#discussion_r327848017 for more context.\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10487390125","Type":"IssuesEvent","CreatedAt":"2019-09-24T22:27:54","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8626","RelatedDescription":"Opened issue \"Set private key of an X509Certificate2 certificate failed on netcore\" (#8626) at NuGet/Home","RelatedBody":"We have some broken tests after enabling signing/verification tests on netcore3.0.\r\nThose tests failed when we tried to set the private key of an X509Certificate2 certificate with following exception:\r\n System.PlatformNotSupportedException : Operation is not supported on this platform.\r\n\r\nThe [document ](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.privatekey?view=netcore-3.0)shows that it's not supported in netcore3.0.\r\n\r\nWe should use the workaround mentioned in this dotnet/corefx issue : https://github.com/dotnet/corefx/issues/14284#issuecomment-293637756"},{"Id":"10486816902","Type":"IssuesEvent","CreatedAt":"2019-09-24T20:52:43","Actor":"jmyersmsft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8625","RelatedDescription":"Opened issue \"\"Log\" plugin-request should never fault\" (#8625) at NuGet/Home","RelatedBody":"While helping a customer with another issue, I noticed that sometimes Log requests are returning a fault complaining about some MSBuild problem.\r\n\r\nAll I have from the NuGet side in the credential provider log is \"MSB0001: Internal MSBuild Error: ContextID 5 should have been in the ID-to-project file mapping but wasn't!\"\r\n\r\nI think log requests should swallow exceptions (perhaps logging them to NuGet's output). The failure is unlikely to be the plugin's fault, the plugin probably can't do anything about it (if it even actively observes the result of a log request -- our plugins just fire-and-forget), plugins can provide other mechanisms for reliable logging, and the fault message can cause things to start canceling."},{"Id":"10483316834","Type":"IssuesEvent","CreatedAt":"2019-09-24T13:50:34","Actor":"tugrulelmas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8624","RelatedDescription":"Opened issue \"Automatically reinstall packages during build in Visual Studio\" (#8624) at NuGet/Home","RelatedBody":"There is a huge monolithic application on which 400 developers actively work. It's an ASP.NET Web Application project and it has 35 modules and 1 `.sln` file. Each module has 5 class library projects and is located under its folder. Modules depend on each other via project references. I have to say that there is a dependency hell that makes development difficult.\r\n\r\nNow, I'm replacing these project references with nuget references and am creating nuget package for every projects and `.sln` file for every module so that developers can focus on their modules and work on small projects instead of a huge monolithic. My aim is to increase dependency between modules with using messaging queue or streaming in the future. In that scenario I'll remove nuget references from projects but, I can't say when it'll be possible.\r\n\r\nAnyway, I'm creating 5 nuget packages for one module and install these packages to ASP.NET Web Application project. After every commit, I create a new version of nuget packages with commit id like `1.0.0-beta.1871248`. It seems that I'll be in trouble with this versioning, because I want every module and web application project to work with latest versions of other modules. In order to do that, developers need to update nuget packages in Visual Studio Package Manager. And right there I have to say that there is a version hell :) To solve this problem, I've decided to create nuget packages with only one specific version like `1.0.0-beta` and [reinstall ](https://docs.microsoft.com/en-us/nuget/consume-packages/reinstalling-and-updating-packages) every packages during build from Visual Studio but there is no easy way to achieve this.\r\n \r\nIt seems that [Package restore in Visual Studio](https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore#enable-and-disable-package-restore-in-visual-studio) does not use MSBuild targets. It would be easier if there were some MSBuild targets for that purpose, I could override one of them and just delete packages folder before restoring. So, here is my workaround:\r\n\r\nI've disabled automatically check for missing packages during build in Visual Studio with adding `automatic` key to `NuGet.Config` to avoid double installation.\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org-proxy\" value=\"http://internal-nexus/repository/nuget.org-proxy/\" />\r\n    <add key=\"nuget-hosted\" value=\"http://internal-nexus/repository/nuget-hosted/\" />\r\n    <add key=\"automatic\" value=\"False\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <add key=\"nuget.org\" value=\"true\" />\r\n    <add key=\"Microsoft and .NET\" value=\"true\" />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n\r\nI've added new target to `.csproj` file to delete packages folder and reinstall packages. I'm doing this for only debug mode because my CI/CD pipeline never gets packages folder from source control. \r\n\r\n```\r\n<Target Name=\"DeletePackagesFolderTarget\" BeforeTargets=\"Build\" Condition=\"'$(Configuration)' == 'Debug'\">\r\n  <Exec Command=\"rd /s /q $(SolutionDir)\\packages\" />\r\n  <Exec Command=\"$(SolutionDir)\\nuget\\nuget.exe restore $(SolutionPath)\" />\r\n</Target>\r\n```\r\n\r\nIt would be great if I could make it happen by just adding a key to `NuGet.Config`. It would be perfect if I could set it for one package source.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console):\r\n\r\nNuGet version (x.x.x.xxx): 4.9.2.5706\r\n\r\nVS version (if appropriate): Enterprise 2017 Version 15.9.14\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1703\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n"},{"Id":"10479708232","Type":"IssuesEvent","CreatedAt":"2019-09-24T05:20:48","Actor":"djee-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8623","RelatedDescription":"Opened issue \"Guide for packaging C# library using P/Invoke to per-architecture and/or per-platform C++ native DLLs\" (#8623) at NuGet/Home","RelatedBody":"I am trying to make a NuGet package deploying a C# .NET Standard 2.0 library which does P/Invoke calls into a platform-dependent C++ library, which must therefore also be deployed, but is obviously architecture-dependent (x86, x64, ARM, ARM64), as well as platform-dependent (Desktop (Win32) vs. UWP).\r\n\r\nI read most documentations on docs.microsoft.com, issues on this GitHub and others, SO issues, etc. and it is still very unclear how to do this. Information is sparse, sometimes contradictory, and the lack of details on some concepts like TFMs makes the task nearly impossible. This whole thing could really use some detailed documenting and samples.\r\n\r\nIn no particular order:\r\n\r\n## Target frameworks\r\n\r\n- https://docs.microsoft.com/en-us/nuget/reference/target-frameworks has a long list of supported frameworks, but `native` is not included, as reported in NuGet/docs.microsoft.com-nuget#1480. However https://devblogs.microsoft.com/nuget/native-support/ clearly states that:\r\n  > When targeting native projects, a new target framework name is now recognized: **native**.\r\n\r\n- This page lists `netcore` as a framework with versions like `5.0`. But .NET Core is just releasing its 3.0 this week. So clearly there is no relation between the two, but there is not a word on it.\r\n\r\n- This page also casually mentions the TFM `win10`:\r\n  > win10 (not supported by Windows 10 Platform)\r\n\r\n  There is no explanation on what `win10` is (is this Desktop, as opposed to UWP?) nor why `win10` would not be supported on Windows 10 despite the name clearly saying otherwise.\r\n\r\n## Package structure\r\n\r\n- https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package goes into details about the NuGet package structure, but does not mention anything about native DLLs.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder should be used to put the native DLLs, but https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package says it is only for `.targets` and `.props` files.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder respects target frameworks, but does that mean that `build/native/x86/my.dll` vs. `build/native/x64/my.dll` works? Or should architecture-specific native DLLs be put in `runtimes/`?\r\n\r\n- Does NuGet support Desktop (Win32) and UWP inside the same package? I could not find any documentation about that. I tried using `runtimes\\win10-x86\\native\\my.dll` for the Desktop variant, and `runtimes\\win10-x86\\lib\\uap10.0\\my.dll` for the UWP variant of the native DLL, but I get an error _error APPX1101: Payload contains two or more files with the same destination path_. Why is that? Those are different frameworks, why is NuGet trying to import both files into a UWP project?\r\n\r\n## P/Invoke\r\n\r\nIt seems many people have problem with deploying architecture-specific native DLLs. A quick search on nuget.org shows that [packages like Microsoft.Net.Native.Compiler have many \"runtime\" variants](https://www.nuget.org/packages/runtime.win10-x64.Microsoft.Net.Native.Compiler/2.2.7-rel-27913-00) starting with _e.g._ a `runtime.win10-x64.` prefix, but it doesn't seem there is documentation about this approach.\r\n\r\nhttps://github.com/Mizux/dotnet-native attempts to provide an example using [the undocumented `runtime.json`](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) used by CoreFX, but looking at the example it seems that for each native DLL variant, a specific .NET Standard 2.0 wrapper assembly is needed, instead of using a single one with multiple native DLLs. This sounds very cumbersome, is that the only option?\r\n\r\nRelated to that, if it is possible to use a single .NET Standard 2.0 assembly, then how to deploy the correct native DLL? With a .NET Core 3.0 sample app, it seems that currently NuGet copies the entire `runtimes/` folder inside the `bin/` folder of the app, instead of only the appropriate native DLL. This results in multiple copies, and of course the wrong DLL path which prevents `DllImport` from finding the native DLL.\r\n\r\n## Other issues\r\n\r\nThere are many other logged issues that seem partially related:\r\n- #6645 mentions that\r\n  >  runtimes/{rid}/native does not work with netfx\r\n\r\n  but there is no context about where that comes from. And it suggests putting native DLLs in `lib/` which is reserved for assemblies, so doesn't seem to be a correct solution.\r\n- #6648 closed as duplicate, although the context is not clear (what kind of app / platform is this about?)\r\n- #3931 seems to be somewhat related, but uses `project.json` (?)\r\n- #2350 asks about the P/Invoke and packaging issue, but was closed without answer.\r\n- #6846 touches on the deploy problem when consuming the package\r\n- #8573, #8435, #1221, #5606, ... I didn't read all of them, there are too many.\r\n- Several issues mention https://stackoverflow.com/questions/49162127/how-to-include-native-assets-in-nuget-on-multiple-platforms-only-64-bit but this seems to be only a subset of the issues, it is not clear how this scales to multiple architectures AND multiple platforms at the same time. It also seems to suggest multiple assemblies are needed.\r\n- The road of the [`AssemblyLoadContext`](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md) seems to be a runtime solution to a packaging problem, and really not a path I want to get onto.\r\n"},{"Id":"10479694292","Type":"IssuesEvent","CreatedAt":"2019-09-24T05:17:27","Actor":"Falconne","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8622","RelatedDescription":"Opened issue \"\"nuget.exe list\" filtering on search terms no longer works\" (#8622) at NuGet/Home","RelatedBody":"`nuget list [search terms]` functionality allows searching for NuGet packages from the command line. This worked well upto 5.0.2, but in the version after that the list method ignores the search terms and will go on to list every single package in every package source.\r\n\r\n## Details about Problem\r\n\r\nProduct: NuGet.exe\r\n\r\nNuGet version: 5.3.0\r\n\r\nOS version: Windows 10\r\n\r\nWorked before? If so, with which NuGet version:\r\nYes, last worked in v5.0.2.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. `nuget.exe list Microsoft.Extensions.Configuration.Json`\r\n\r\n2. With v5.0.2 that will return immediately with about a dozen hits on the given package name. With any later version, this will list every package in the public repo, ignoring the search term.\r\n\r\n"},{"Id":"10478640738","Type":"IssuesEvent","CreatedAt":"2019-09-24T00:54:34","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8621","RelatedDescription":"Opened issue \"Provide a tooltip on the Yellow Exclamation on Nuget References aka the yellow pain in the stomach\" (#8621) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/732731/provide-a-tooltip-on-the-yellow-exclamation-on-nug.html)._\n\n---\nProvide a tooltip / dialog on the Yellow Exclamation on Nuget References why this appears.\n\nProvide any/more information why this /!\\ Yellow Exclamation is shown ,\nso I can guess if I care or not - old cache information, reload solution, csproj stetting are worng, ... what ever.\nNow it'S a wild guess why this happens.\n\nThe situation with all the TargetFrameWork, RuntimeFrameworkVersion, ... differences with visual studio, msbuild core, msbuild framework, ... is IMHO not easy.\n\ntxs Flori\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/16/2019, 00:32 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-25T05:30:46.8153864Z","RunDurationInMilliseconds":3195}