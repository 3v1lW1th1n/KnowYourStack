{"Data":{"GitHub":{"Issues":[{"Id":"560104789","IsPullRequest":true,"CreatedAt":"2020-02-05T02:55:37","Actor":"dotnet-maestro[bot]","Number":"2501","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200204.4\r\n- **Date Produced**: 2/5/2020 2:19 AM\r\n- **Commit**: bca48d0ce040ceaf0bee1d72c225269218095ebc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-preview.1.20104.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2501","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2501)"},{"Id":"560100912","IsPullRequest":true,"CreatedAt":"2020-02-05T02:35:36","Actor":"dotnet-maestro[bot]","Number":"2500","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200204.3\r\n- **Date Produced**: 2/5/2020 2:05 AM\r\n- **Commit**: 0e543f7b4a3313d807e6cce34717f9031c0aaf25\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-preview.1.20104.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2500","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2500)"},{"Id":"560070887","IsPullRequest":true,"CreatedAt":"2020-02-05T01:30:52","Actor":"dotnet-maestro[bot]","Number":"2499","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200204.2\r\n- **Date Produced**: 2/5/2020 12:04 AM\r\n- **Commit**: 2bd77827f9376c4bd790d91a36c4f7c1740491ab\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-preview.1.20104.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2499","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2499)"},{"Id":"560037904","IsPullRequest":true,"CreatedAt":"2020-02-05T00:34:40","Actor":"rladuca","Number":"2498","RawContent":null,"Title":"Branding updates","State":"closed","Body":"Updating to Preview branding","Url":"https://github.com/dotnet/wpf/pull/2498","RelatedDescription":"Closed or merged PR \"Branding updates\" (#2498)"},{"Id":"559999897","IsPullRequest":true,"CreatedAt":"2020-02-04T22:05:39","Actor":"dotnet-maestro[bot]","Number":"2497","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200204.1\r\n- **Date Produced**: 2/4/2020 9:17 PM\r\n- **Commit**: f50a5d7c4a72dfdadb3e6495ccafc81706a8c066\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha.1.20104.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2497","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2497)"},{"Id":"559913961","IsPullRequest":false,"CreatedAt":"2020-02-04T18:56:49","Actor":"kaanlab","Number":"2496","RawContent":null,"Title":"Calendar. DisplayMode=\"Year\" blank","State":"open","Body":"* .NET Core Version: 3.1.100\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:** Calendar is displayed as an empty square on the Form when you choose DisplayMode=\"Year\" in the calendar settings\r\n \r\n **Minimal repro:** `<Calendar DisplayMode=\"Year\" />`\r\n","Url":"https://github.com/dotnet/wpf/issues/2496","RelatedDescription":"Open issue \"Calendar. DisplayMode=\"Year\" blank\" (#2496)"},{"Id":"559715688","IsPullRequest":true,"CreatedAt":"2020-02-04T13:31:28","Actor":"dotnet-maestro[bot]","Number":"2495","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200203.7\r\n- **Date Produced**: 2/4/2020 12:28 AM\r\n- **Commit**: 4f58d59655f362e7618181c5ae22338be390aeaf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.20103.7\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2495","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2495)"},{"Id":"559705469","IsPullRequest":true,"CreatedAt":"2020-02-04T13:17:45","Actor":"dotnet-maestro[bot]","Number":"2494","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3a1d3bb6-c64d-406d-e8f4-08d648cf64cb\r\n- **Build**: 20200203.5\r\n- **Date Produced**: 2/4/2020 3:04 AM\r\n- **Commit**: 27c8467294a4e64ac6642b4c12ca63495ff126c8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.20103.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20103.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.20103.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.20103.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20103.5\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2494","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2494)"},{"Id":"554465266","IsPullRequest":true,"CreatedAt":"2020-02-03T22:01:54","Actor":"dotnet-maestro[bot]","Number":"2479","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200203.2\r\n- **Date Produced**: 2/3/2020 8:36 PM\r\n- **Commit**: 6c0fa6a2e4895290817916cc6dc5ba1429cd0725\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.20103.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2479","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2479)"},{"Id":"554734647","IsPullRequest":true,"CreatedAt":"2020-02-03T21:54:31","Actor":"dotnet-maestro[bot]","Number":"2481","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200123.8\r\n- **Date Produced**: 1/23/2020 6:12 PM\r\n- **Commit**: 0c83101dfa63c4b2db0725245d207ce3bdd12b30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.20073.8\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2481","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2481)"},{"Id":"554741237","IsPullRequest":true,"CreatedAt":"2020-02-03T21:30:13","Actor":"dotnet-maestro[bot]","Number":"2482","RawContent":null,"Title":"[master] Update dependencies to ensure coherency","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2482","RelatedDescription":"Closed or merged PR \"[master] Update dependencies to ensure coherency\" (#2482)"},{"Id":"554724093","IsPullRequest":true,"CreatedAt":"2020-02-03T20:03:38","Actor":"dotnet-maestro[bot]","Number":"2480","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3a1d3bb6-c64d-406d-e8f4-08d648cf64cb\r\n- **Build**: 20200201.2\r\n- **Date Produced**: 2/1/2020 11:43 PM\r\n- **Commit**: 779323758d3e8aa7e4ee3dc2619d57e696078089\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.20101.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20101.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.20101.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.20101.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20101.2\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19512.1 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2480)"},{"Id":"558017525","IsPullRequest":false,"CreatedAt":"2020-02-01T11:38:40","Actor":"snikeguo","Number":"2488","RawContent":null,"Title":"suggest： script Language support","State":"closed","Body":"Suggest:\r\nMany people think that XAML is too verbose and inflexible （http://paulstovell.com/blog/six-years-of-wpf      china web site :https://www.zhihu.com/question/44666716  ）. Can you add a new \"UI language\" like QML (or TypeScript)?\r\nE.g:\r\nNow has a textblock, name = tb1\r\n1. His text propertyis: \"abcdegf:\" + scrollBar1.Value.toString ()\r\n2. His width property is: if tb1.text == \"abcdegf: 53\", his width is 30\r\nelse his width is 100.\r\n\r\nXAML:\r\n<TextBlock x:Name=\"tb1\"  Text=\"{Binding ElementName=scrollBar1, Path=Value，Convert=......}\"  width={Binding .......}/>\r\n\r\n\r\nQML or  other script:\r\nTextBlock\r\n{\r\n   name:tb1\r\n   text: “abcdegf :”+scrollBar1.Value.toString()\r\n   width:\r\n   {\r\n      if(tb1.Text==\"abcdegf: 53\")\r\n        return 30;\r\n      else\r\n        return 100;\r\n    }\r\n}\r\n---------------end--------\r\ntext: “abcdegf :”+scrollBar1.Value.toString()\r\nIt will generate C # code:  create a Binding instance that contains an anonymous method.like:\r\ntb1.SetValue ( TextBlock.TextProperty,   Binding(()=>\r\n{\r\n  “abcdegf :”+scrollBar1.Value.toString()\r\n});\r\n----------------------------\r\n width:\r\n   {\r\n      if(tb1.Text==\"abcdegf: 53\")\r\n        return 30;\r\n      else\r\n        return 100;\r\n    }\r\n\r\n  tb1.SetValue ( TextBlock.WidthProperty,   Binding(()=>\r\n{\r\n  “abcdegf :”+scrollBar1.Value.toString()\r\n});\r\n\r\n\r\nlike  this.......\r\n---------------------\r\nqml doc:   https://doc.qt.io/qt-5/qtqml-syntax-propertybinding.html\r\n","Url":"https://github.com/dotnet/wpf/issues/2488","RelatedDescription":"Closed issue \"suggest： script Language support\" (#2488)"},{"Id":"558475765","IsPullRequest":false,"CreatedAt":"2020-02-01T04:12:24","Actor":"ssc19940105","Number":"2493","RawContent":null,"Title":"The .Net Core WPF program UI errors","State":"open","Body":"* .NET Core Version: 3.1.1\r\n* Windows version: 10.0.18363\r\n*Graphics card:Geforce RTX 2070\r\n*Graphics driver:441.87\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?:No\r\n* Is this bug related specifically to tooling in Visual Studio ?:Xaml Designer\r\nThe .Net Core WPF program UI may display errors on some computers. UI elements disappear and are replaced by gray blocks.\r\n","Url":"https://github.com/dotnet/wpf/issues/2493","RelatedDescription":"Open issue \"The .Net Core WPF program UI errors\" (#2493)"},{"Id":"558391253","IsPullRequest":false,"CreatedAt":"2020-01-31T21:50:16","Actor":"vsfeedback","Number":"2492","RawContent":null,"Title":"Compilation error MC3064 when importing internal user control from signed class library","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/887201/compilation-error-mc3064-when-importing-internal-u.html)._\n\n---\nThe Wpf project fails to compile with the  error MC3064 when importing signed user control if its visibility set to internal.\n\nNote: The imported library has appropriate directive [InternalsVisibleTo()].\n\nSame control compiles without problem if library is not strongly signed (check attached project to reproduce problem).\n\nThe attached project WpfClientApp will not compile with error:\n1&gt;------ Build started: Project: WpfClientApp, Configuration: Debug Any CPU ------\n1&gt;C:\\Users\\aza\\source\\repos\\WpfClientApp\\MainWindow.xaml(12,10): error MC3064: Only public or internal classes can be used within markup. 'ButtonControl' type is not public or internal.\n\nIf you remove signing of the assembly and the application (Project properties-&gt;Signing tab-&gt;uncheck  &quot;Sign the assembly&quot; and remove PublicKey parameter from the ControlsLibrary\\Properties\\AssemblyInfo.cs), project will compile and run successfully.\n\nThis makes it impossible to distincts controls for public and internal use in the community controls library.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/16/2020, 07:04 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### azatvornitskiy on 1/19/2020, 11:35 PM: \n\nThank you, will be witing.\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/2492","RelatedDescription":"Open issue \"Compilation error MC3064 when importing internal user control from signed class library\" (#2492)"},{"Id":"558390742","IsPullRequest":false,"CreatedAt":"2020-01-31T21:49:07","Actor":"vsfeedback","Number":"2491","RawContent":null,"Title":"Touch bug/issue with ShowDialog and TextBox","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/890778/touch-bugissue-with-showdialog-and-textbox.html)._\n\n---\n<p>Hello I'm developing a WPF application to be used with touch devices (Running Win 10 full).</p> <p>There is one scenario where the touch stops responding as expected. <br>If I have a TextBox and open a dialog (ShowDialog()) then the dialog won't handle any touch and will ignore the user:</p><p>A) 1 touch ignored - if using single touch driver.</p> <p>B) 10 touches ignored - if using multi touch driver.</p> <p>And after that it starts responding normally again.</p> <p>I have attached a video show casing this issue and also a test project so you can easily replicate (using Windows Simulator w/ touch or a touch monitor)<br>In the video you can see that when opening the dialog through a button it responds as expected but if opened through a TextBox it will then have a touch issue.</p> <p><a href=\"https://developercommunityapi.westus.cloudapp.azure.com/storage/attachments/114846-textbox-showdialog-touch-issue.mp4\">textbox-showdialog-touch-issue.mp4</a></p><p><a href=\"https://developercommunity.visualstudio.com/storage/attachments/114847-ms-wpf-testtouchdialogs.zip\">ms-wpf-testtouchdialogs.zip</a></p><p></p><p>The code being used is just this:</p><pre>        private void TextBox_PreviewMouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)\n        {\n            // This cause touch issues within the dialog.\n            // (1 touch ignored w/ single touch monitor/driver - 10 touches ignored w/ multi touch monitor/driver)\n            new DialogWindow(). ShowDialog();\n        }\n\nprivate void Button_Click(object sender, RoutedEventArgs e)\n        {\n            new DialogWindow(). ShowDialog();\n        }\n\n</pre><p></p><p>Windows 10<br>VS 2019<br>.NET 4.6.1 (but it was also tested with 4.8, exactly same issue)</p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/20/2020, 06:41 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 1/30/2020, 01:12 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/2491","RelatedDescription":"Open issue \"Touch bug/issue with ShowDialog and TextBox\" (#2491)"},{"Id":"558389007","IsPullRequest":false,"CreatedAt":"2020-01-31T21:45:12","Actor":"pjchristmas","Number":"2490","RawContent":null,"Title":"WPF Tree View Freeze / Hang","State":"open","Body":"* .NET Framework 4.8 with [latest patch](https://support.microsoft.com/en-us/help/4534130/kb4534130-cumulative-update-for-net-framework) that claimed to fix similar sounding bug.\r\n* Windows version: (`winver`): Win10 1803\r\n\r\n **Problem description:**\r\n Identical to issue [1962](https://github.com/dotnet/wpf/issues/1962)\r\nbut not fixed by [update listed there](https://support.microsoft.com/en-us/help/4534130/kb4534130-cumulative-update-for-net-framework).\r\nWe have a virtualized Tree View with up to 30k items. Going to the bottom and scrolling up 51 times (or using scroll wheel) will cause it to freeze. If I leave it up for an hour it will usually come back(or maybe it's just logging out and back in that kicks it out of the layout loop)\r\nWe've tried changing the virtualization settings (ScrollUnit, VirtualizationCacheLength, VirtualizationCacheLengthUnit and VirtualizationMode.Recycling) but none had any effect.\r\n\r\n **Minimal repro:**\r\nAttached app, just modified the one from previous posting and added reproducing data.\r\n[HangTest.zip](https://github.com/dotnet/wpf/files/4154025/HangTest.zip)\r\n\r\nLooking for a hero @SamBent ","Url":"https://github.com/dotnet/wpf/issues/2490","RelatedDescription":"Open issue \"WPF Tree View Freeze / Hang\" (#2490)"},{"Id":"558150009","IsPullRequest":false,"CreatedAt":"2020-01-31T14:02:13","Actor":"mgnsm","Number":"2489","RawContent":null,"Title":"Cannot set PrincipalPolicy","State":"open","Body":".NET Core Version: 3.1.101\r\nWindows version: 16299.1625\r\nReproducible in .NET Framework 4.8?: No.\r\n\r\nCalling `AppDomain.CurrentDomain.SetPrincipalPolicy` to specify a principal policy of `PrincipalPolicy.UnauthenticatedPrincipal` doesn't seem to work.\r\n\r\nIf I create a new WPF application using the default `WPF App (.NET Core)` template in Visual Studio 2019 16.4.3 and implement the `App.xaml.cs` class like this:\r\n\r\n    public partial class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.UnauthenticatedPrincipal);\r\n            Debug.Assert(Thread.CurrentPrincipal != null); //works\r\n            Debug.Assert(Thread.CurrentPrincipal.GetType() == typeof(GenericPrincipal)); //works\r\n        }\r\n    }\r\n\r\n...and the `MainWindow.xaml.cs` class like this:\r\n\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            Debug.Assert(Thread.CurrentPrincipal != null); //fails\r\n        }\r\n    }\r\n\r\n...the assert in the window unexpectedly fails. \r\n\r\nHow do I properly specify a principal policy and set the `Thread.CurrentPrincipal` property in a WPF application running on .NET Core?","Url":"https://github.com/dotnet/wpf/issues/2489","RelatedDescription":"Open issue \"Cannot set PrincipalPolicy\" (#2489)"},{"Id":"554776099","IsPullRequest":false,"CreatedAt":"2020-01-30T23:08:32","Actor":"ASuurkuusk","Number":"2483","RawContent":null,"Title":"Fails to build .NET Core WPF app using x86 \"dotnet build \"","State":"closed","Body":"* .NET Core Version: 3.1.101\r\n* Windows version: 10.0.18362\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n\r\n **Problem description:**\r\n\r\nI'm not able to build a .NET Core WPF app from the command line using the x86 version of dotnet.exe. It seems like the \"Program files (x86)\" text gets expanded to \"Program Files %28x86%29\" when used as the AssemblyFile argument to UsingTask in \"Microsoft.WinFX.targets\".\r\n\r\nI assume this can be caused by a bug in \"dotnet build\", rather than WPF.\r\n \r\n **Actual behavior:**\r\n\r\n`\"c:\\Program Files (x86)\\dotnet\\dotnet.exe\" build` prints error:\r\n\r\n> C:\\Program Files (x86)\\dotnet\\sdk\\3.1.101\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\targets\\Microsoft.WinFX.targets(228,9): error MSB4062: The \"Microsoft.Build.Tasks.Windows.MarkupCompilePass1\" task could not be loaded from the assembly C:\\Program Files %28x86%29\\dotnet\\sdk\\3.1.101\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\netcoreapp2.1\\PresentationBuildTasks.dll. Could not load file or assembly 'C:\\Program Files %28x86%29\\dotnet\\sdk\\3.1.101\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\netcoreapp2.1\\PresentationBuildTasks.dll'. The system cannot find the path specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\Sci\\Tests\\DotnetWpfTest\\DotnetWpfTest.csproj]\r\n\r\n \r\n **Expected behavior:**\r\n\r\nIt should be possible to  build a simple WPF app using both x86 and x64 .NET Core.\r\n\r\n **Minimal repro:**\r\n\r\nRun this in a command prompt with both .NET Core 3.1 SDK (x64) and .NET Core Core 3.1 (x86) installed:\r\n\r\n    md DotnetWpfTest2\r\n    cd DotnetWpfTest2\r\n    dotnet new wpf\r\n\r\n    REM dotnet build will work\r\n    dotnet build\r\n\r\n    REM '\"c:\\Program Files (x86)\\dotnet\\dotnet.exe\" build' causes error \r\n    \"c:\\Program Files (x86)\\dotnet\\dotnet.exe\" build\r\n\r\n\r\n\r\n\r\n    \r\n","Url":"https://github.com/dotnet/wpf/issues/2483","RelatedDescription":"Closed issue \"Fails to build .NET Core WPF app using x86 \"dotnet build \"\" (#2483)"},{"Id":"557807694","IsPullRequest":true,"CreatedAt":"2020-01-30T22:58:56","Actor":"vatsan-madhavan","Number":"2487","RawContent":null,"Title":"[release/3.1] Unescape PresentationBuildTasks.dll paths containing special characters","State":"open","Body":"Fixes #2415 \r\n\r\n### Description \r\n\r\n.NET Core 3.1 SDK installed in paths containing special characters like `'(` fails to build WPF projects. This affects the default WOW64 installation - i.e., x86 MSI installation on x64 system, that typically installs under `%SystemDrive%\\Program Files (x86)\\dotnet`\r\n\r\nThe builds fail with the following error: \r\n\r\n```\r\nc:\\Program Files (x86)\\dotnet\\sdk\\3.1.101\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\targets\\Microsoft.WinFX.targets(225,9): \r\nerror MSB4062: The \"Microsoft.Build.Tasks.Windows.MarkupCompilePass1\" task could not be loaded from\r\nthe assembly c:\\Program Files %28x86%29\\dotnet\\sdk\\3.1.101\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\netcoreapp2.1\\PresentationBuildTasks.dll. \r\nCould not load file or assembly 'c:\\Program Files %28x86%29\\dotnet\\sdk\\3.1.101\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\netcoreapp2.1\\PresentationBuildTasks.dll'.\r\nThe system cannot find the path specified. Confirm that the <UsingTask> declaration is correct, that the assembly\r\nand all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. \r\n```\r\n\r\nWhen the SDK is installed in a path containing special characters, for e.g., under `C:\\Program Files (x86)\\dotnet` (the special characters here being `{'(', ')'}`), calling an MSBuild property function like `$([System.IO.Path]::GetFullPath())` on `$(MSBuildThisFileDirectory)` will result in MSBuild escaping any special characters that are returned.\r\n\r\nNow, this is what the [documentation ](https://docs.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2019)says about using property functions:\r\n\r\n>String values returned from property functions have[ special characters](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-special-characters?view=vs-2019) escaped. If you want the value to be treated as though it was put directly in the project file, use `$([MSBuild]::Unescape())` to unescape the special characters.\r\n>...\r\n>In static property functions, you can use any static method or property of these system classes:\r\n> ```\r\n> System.Byte\r\n>...\r\n> System.IO.Path\r\n>...\r\n> Microsoft.Build.Utilities.ToolLocationHelper\r\n> ```\r\n\r\nWhen such an escaping happens, characters like `(` get translated to`%28` etc. When `UsingTask` encounters a value of `$(_PresentationBuildTasksAssembly)` containing encoded characters, it fails.\r\n\r\nWe must unescape these characters by calling `$([MSBuild]::Unescape())` to ensure that `UsingTask` will not fail.\r\n\r\n### Customer Impact \r\n\r\nDevelopers who install x86 SDK on x64 OS are not able to build WPF apps using 3.1.x SDK. \r\n\r\n### Regression \r\n\r\nThis was a regression introduced by #2075, [[release/3.1] Use correct PresentationBuildTasks.dll for VS and MSBuild builds](#2075). \r\n\r\nWe did not catch this during development and testing early on since testing was done using SDK's installed under `%appdata%`, `%temp%` etc., which typically didn't have special characters that are escaped by MSBuild. \r\n\r\nWe are still trying to understand how we failed to catch this in end-to-end testing. The current theory is that the x86 SDK was likely tested directly on an x86 OS installation where this problem would not have manifested itself (since the default install location would have been `%SystemDrive%\\Program Files`, and would not have involved WOW64). \r\n\r\nWe are taking steps to ensure that this scenario is covered in testing. \r\n\r\n### Risk \r\n\r\nLow. \r\n\r\n- The change is being tested by building a corpus of WPF applications on different configurations (x86 SDK on x86 OS, x86 SDK on x64 OS, x64 SDK on x64 OS) x (simple installation path, installation paths with special chars). \r\n- The fix is simple and easy to review for correctness. ","Url":"https://github.com/dotnet/wpf/pull/2487","RelatedDescription":"Open PR \"[release/3.1] Unescape PresentationBuildTasks.dll paths containing special characters\" (#2487)"},{"Id":"557251557","IsPullRequest":false,"CreatedAt":"2020-01-30T03:56:40","Actor":"uecasm","Number":"2486","RawContent":null,"Title":"GetDpiAwarenessCompatibleNotificationWindow exception in Win10 1909","State":"open","Body":"I'm experiencing a similar crash as reported in #1953; in my case it's a particular unit test that creates a lot of WPF (and WinForms+ElementHost) windows in sequence and quickly destroys them again.  The unit test is being run from the Resharper plugin inside VS2017 15.9.\r\n\r\nOther tests and my main app seem to run ok.  (My main app is DPI Unaware.)\r\n\r\nThe crash doesn't occur when I run the same test in a different test runner, nor does it happen if I set the Compatibility of the Resharper test runner to DPI Unaware (scaling performed by System).\r\n\r\nIs this a regression or is it a related but different issue?  Or did the patch somehow miss this version?  Windows Update says I'm up to date.\r\n\r\n* .NET Framework Version: 4.8.03752\r\n* Windows version: Win10 1909 (18363.592)\r\n\r\n```\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at System.Windows.SystemResources.GetDpiAwarenessCompatibleNotificationWindow(HandleRef hwnd)\r\n   at System.Windows.Interop.HwndHost.BuildOrReparentWindow()\r\n   at System.Windows.Interop.HwndHost.OnSourceChanged(Object sender, SourceChangedEventArgs e)\r\n   at System.Windows.SourceChangedEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs e)\r\n   at System.Windows.PresentationSource.UpdateSourceOfElement(DependencyObject doTarget, DependencyObject doAncestor, DependencyObject doOldParent)\r\n   at System.Windows.PresentationSource.RootChanged(Visual oldRoot, Visual newRoot)\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Interop.HwndSource.Dispose(Boolean disposing)\r\n   at System.Windows.Interop.HwndSource.OnHwndDisposed(Object sender, EventArgs args)\r\n   at MS.Win32.HwndWrapper.Dispose(Boolean disposing, Boolean isHwndBeingDestroyed)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/2486","RelatedDescription":"Open issue \"GetDpiAwarenessCompatibleNotificationWindow exception in Win10 1909\" (#2486)"},{"Id":"556705276","IsPullRequest":false,"CreatedAt":"2020-01-29T08:16:54","Actor":"WrongBit","Number":"2485","RawContent":null,"Title":"WPF app - 'Window' is not supported??","State":"open","Body":"Config: Win10x64 with autoupdate, installed 28 Jan evening. VS 16.4.3, C#\r\n\r\nI create WPF project. VS shows WPF designer for main window (with empty designer and error \"Invalid markup\"). I compiled project, but designer still shows error and... completely crazy warning in XAML editor: \"Window is not supported in WPF project\"! (and same warning for 'Grid' element)","Url":"https://github.com/dotnet/wpf/issues/2485","RelatedDescription":"Open issue \"WPF app - 'Window' is not supported??\" (#2485)"},{"Id":"555920920","IsPullRequest":false,"CreatedAt":"2020-01-28T00:49:31","Actor":"jpapp05","Number":"2484","RawContent":null,"Title":"Core C++/CLI WPF projects have strange issues with classes in WindowsBase/System.Windows.Interop","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.101\r\n Commit:    b377529961\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.101\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.1\r\n  Commit:  a1388f194c\r\n\r\n.NET Core SDKs installed:\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.509 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.511 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n* Windows version: (`winver`)\r\nWindows 10; Version 1909 (OS Build 18363.592)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)\r\nProbably. I've included a project that demonstrates the C++/CLI issues I'm seeing.   It also includes a C# version that works without issue.\r\n\r\n **Problem description:**\r\nA .NET Core C++/CLI project (with the correctly imported WPF frameworks) fails to access certain classes in ```System::Windows::Interop```.\r\n\r\n```C++\r\nnamespace WpfTest\r\n{\r\n  public ref class TestClass abstract sealed\r\n  {\r\n  public:\r\n    /* Test1 */\r\n    static void Foo1()\r\n    {\r\n      // ComponentDispatcher cannot be found, even though exact same C# project works...\r\n      // This also works when compiled with .NET Framework\r\n      System::Windows::Interop::ComponentDispatcher::PushModal();\r\n      System::Windows::Interop::ComponentDispatcher::PopModal();\r\n    }\r\n\r\n    /* Test2 */\r\n    static void Foo2()\r\n    {\r\n      System::Windows::Interop::HwndSource^ hwndSource = nullptr;\r\n      // Get strange error: C3624: 'System::Windows::Threading::DispatcherObject': use of this type requires a reference to assembly 'WindowsBase'\r\n      if (hwndSource != nullptr)\r\n      {\r\n      }\r\n    }\r\n  };\r\n}\r\n```\r\n **Actual behavior:** \r\nVarious compiler errors... \r\n```\r\nerror C2039: 'ComponentDispatcher': is not a member of 'System::Windows::Interop'\r\n```\r\n```\r\nerror C3624: 'System::Windows::Threading::DispatcherObject': use of this type requires a reference to assembly 'WindowsBase'\r\n```\r\n **Expected behavior:**\r\nTo compile without issue.  The same code works in C# as well as C++/CLI if targeting the .NET Framework.  The issues only happens with a Core C++/CLI WPF project.\r\n[BadnessWpfCppCli.zip](https://github.com/dotnet/wpf/files/4120070/BadnessWpfCppCli.zip)\r\n\r\n **Minimal repro:**\r\nIncluded in attachment...\r\n\r\nOverall, this seems to be some type of forwarding issue that works in C# but not with C++ compiler. Not 100% sure.","Url":"https://github.com/dotnet/wpf/issues/2484","RelatedDescription":"Open issue \"Core C++/CLI WPF projects have strange issues with classes in WindowsBase/System.Windows.Interop\" (#2484)"},{"Id":"554448490","IsPullRequest":false,"CreatedAt":"2020-01-23T22:39:22","Actor":"gomathip02","Number":"2478","RawContent":null,"Title":"Visual Studio Crash when developing UWP project","State":"open","Body":"Copied from VSO ID: 1011513\n\nWhen in UWP project development, after I close the currently debuged application and try to select other tab with typed code, visual studio just stops respond and crashes. As it happens quite often, it creates VS for UWP hardly usable. Hope recorded logs will help.\n\n\nFailure in WPF.... \n\nStackTraceString: <none>\nHResult: 88980406\nThere are nested exceptions on this thread. Run with -nested for details\n0:000> !pe -nested\nException object: 54da11f8\nException type:   System.Runtime.InteropServices.COMException\nMessage:          UCEERR_RENDERTHREADFAILURE (Exception from HRESULT: 0x88980406)\nInnerException:   <none>\nStackTrace (generated):\n    SP       IP       Function\n    00CFE41C 0A5D22F8 PresentationCore_ni!System.Windows.Media.Composition.DUCE+Channel.SyncFlush()+0x7dcc30\n    00CFE44C 09DFA8C4 PresentationCore_ni!System.Windows.Interop.HwndTarget.UpdateWindowSettings(Boolean, System.Nullable`1<ChannelSet>)+0x454\n    00CFE5F4 09E0D5FB PresentationCore_ni!System.Windows.Interop.HwndTarget.UpdateWindowPos(IntPtr)+0xeb\n    00CFE648 09DFB137 PresentationCore_ni!System.Windows.Interop.HwndTarget.HandleMessage(MS.Internal.Interop.WindowMessage, IntPtr, IntPtr)+0xf7\n    00CFE714 09DF974B PresentationCore_ni!System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)+0x2b\n    00CFE734 57EB6ED1 WindowsBase_ni!MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)+0xa1\n    00CFE770 57EB6E1C WindowsBase_ni!MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)+0x6c\n    00CFE780 57EB6CE2 WindowsBase_ni!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)+0x52\n    00CFE7A0 57EB6C76 WindowsBase_ni!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)+0x86\n    00CFE7E4 57EB5052 WindowsBase_ni!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)+0x142\n    00CFE840 57EB66F4 WindowsBase_ni!MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)+0xf4\n\nStackTraceString: <none>\nHResult: 88980406\n\nNested exception -------------------------------------------------------------\nException object: 54da11f8\nException type:   System.Runtime.InteropServices.COMException\nMessage:          UCEERR_RENDERTHREADFAILURE (Exception from HRESULT: 0x88980406)\nInnerException:   <none>\nStackTrace (generated):\n    SP       IP       Function\n    00CFE41C 0A5D22F8 PresentationCore_ni!System.Windows.Media.Composition.DUCE+Channel.SyncFlush()+0x7dcc30\n    00CFE44C 09DFA8C4 PresentationCore_ni!System.Windows.Interop.HwndTarget.UpdateWindowSettings(Boolean, System.Nullable`1<ChannelSet>)+0x454\n    00CFE5F4 09E0D5FB PresentationCore_ni!System.Windows.Interop.HwndTarget.UpdateWindowPos(IntPtr)+0xeb\n    00CFE648 09DFB137 PresentationCore_ni!System.Windows.Interop.HwndTarget.HandleMessage(MS.Internal.Interop.WindowMessage, IntPtr, IntPtr)+0xf7\n    00CFE714 09DF974B PresentationCore_ni!System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)+0x2b\n    00CFE734 57EB6ED1 WindowsBase_ni!MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)+0xa1\n    00CFE770 57EB6E1C WindowsBase_ni!MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)+0x6c\n    00CFE780 57EB6CE2 WindowsBase_ni!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)+0x52\n    00CFE7A0 57EB6C76 WindowsBase_ni!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)+0x86\n    00CFE7E4 57EB5052 WindowsBase_ni!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)+0x142\n    00CFE840 57EB66F4 WindowsBase_ni!MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)+0xf4\n\nStackTraceString: <none>\n","Url":"https://github.com/dotnet/wpf/issues/2478","RelatedDescription":"Open issue \"Visual Studio Crash when developing UWP project\" (#2478)"},{"Id":"553943742","IsPullRequest":false,"CreatedAt":"2020-01-23T21:35:25","Actor":"edward-a","Number":"2473","RawContent":null,"Title":"MutexRights is not available in .NET Core 3.1","State":"closed","Body":"We weren't able to migrate our WPF app to .NET Core 3.1 because MutexRights wasn't available. Hope it gets implemented soon.\r\n\r\nUnsupported (per Portability Analyzer): \r\nM:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/2473","RelatedDescription":"Closed issue \"MutexRights is not available in .NET Core 3.1\" (#2473)"},{"Id":"554202698","IsPullRequest":true,"CreatedAt":"2020-01-23T15:00:29","Actor":"dotnet-maestro[bot]","Number":"2477","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200123.1\r\n- **Date Produced**: 1/23/2020 1:40 PM\r\n- **Commit**: 6a5188f3f0cb30c6adbebd12024ff1907cea01b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.20073.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2477","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2477)"},{"Id":"554151117","IsPullRequest":true,"CreatedAt":"2020-01-23T13:28:25","Actor":"dotnet-maestro[bot]","Number":"2476","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200123.2\r\n- **Date Produced**: 1/23/2020 12:25 PM\r\n- **Commit**: f0595f8937d933f569e5893051f08523ebf5d222\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.20073.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2476","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2476)"},{"Id":"554143127","IsPullRequest":true,"CreatedAt":"2020-01-23T13:12:23","Actor":"dotnet-maestro[bot]","Number":"2475","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3a1d3bb6-c64d-406d-e8f4-08d648cf64cb\r\n- **Build**: 20200122.3\r\n- **Date Produced**: 1/22/2020 10:48 PM\r\n- **Commit**: 0fb5c992a80a6fb52bfb1d2b726f75157c1ce210\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.20072.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20072.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.20072.3\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.20072.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20072.3\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2475","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2475)"},{"Id":"554091966","IsPullRequest":false,"CreatedAt":"2020-01-23T11:13:08","Actor":"tomaustin700","Number":"2474","RawContent":null,"Title":"Using UIAutomation to find an ItemsControl's selected item","State":"open","Body":"Hi,\r\nI am trying to use UIAutomation to find the selected item from an ItemsControl, is this possible? I have looked at the ItemsControlAutomationPeer and it seems that FindItemByProperty can only have the propertyId for Name, AutomationId and ControlType passed into it, is that correct?\r\n\r\nThanks","Url":"https://github.com/dotnet/wpf/issues/2474","RelatedDescription":"Open issue \"Using UIAutomation to find an ItemsControl's selected item\" (#2474)"},{"Id":"553931322","IsPullRequest":true,"CreatedAt":"2020-01-23T04:50:29","Actor":"dotnet-maestro[bot]","Number":"2472","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200122.3\r\n- **Date Produced**: 1/23/2020 4:11 AM\r\n- **Commit**: b666dc7a94d8ac87a7d300cfb4fa86332fb79bae\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.20072.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2472","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2472)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-05T05:30:53.1524399Z","RunDurationInMilliseconds":711}