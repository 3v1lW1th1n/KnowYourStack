{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10177785627","Type":"IssuesEvent","CreatedAt":"2019-08-09T00:27:29","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7378","RelatedDescription":"Closed issue \"[Azure Search] Packages without titles should have title: search their ID\" (#7378) at NuGet/NuGetGallery","RelatedBody":"This can easily be done by subbing the ID into the empty title field.\r\n\r\nExample:\r\nhttps://azuresearch-usnc.nuget.org/query?q=owners:aspnet-contrib%20title:OAuth"},{"Id":"10177757549","Type":"IssuesEvent","CreatedAt":"2019-08-09T00:19:23","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7380","RelatedDescription":"Closed issue \"[Azure Search] Support queries with long terms\" (#7380) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nCurrently, terms are truncated after 10 characters. This leads to weird behavior.\r\n\r\n### To Reproduce\r\nThe following queries are affected by this behavior:\r\n\r\n* [\"entityframeworkcore\"](https://www.nuget.org/experiments/search-sxs?q=entityframeworkcore) - First result is entityframework instead of entityframeworkcore\r\n* [\"entityfram\"](https://www.nuget.org/experiments/search-sxs?q=entityfram) - This has results, even though we don't support prefix matching today\r\n* [\"entityfra\"](https://www.nuget.org/experiments/search-sxs?q=entityfra) - This has no results\r\n"},{"Id":"10177754874","Type":"IssuesEvent","CreatedAt":"2019-08-09T00:18:35","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7375","RelatedDescription":"Closed issue \"[Azure Search] Nerf exact matches on package id\" (#7375) at NuGet/NuGetGallery","RelatedBody":"# Describe the bug\r\nSearch results are dramatically boosted if one or more terms exactly match the package's id. This leads to weird results for queries like \"newtonsoft json\" as the \"json\" package id is an exact match.\r\n\r\nQueries that are affected:\r\n\r\n* \"json\" / \"newtonsoft json\"\r\n* \"entity framework\"\r\n* \"csv\"\r\n* \"redis\""},{"Id":"10177668385","Type":"PullRequestEvent","CreatedAt":"2019-08-08T23:53:34","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7429","RelatedDescription":"Opened pull request \"[Hotfix] PackagesAppearInFeedInOrderTest should wait for unlisted packages to be unlisted in feed before checking timestamps\" (#7429) at NuGet/NuGetGallery","RelatedBody":"A recent backend change has made this test flaky, because listing changes are not immediately available in OData. This causes a race condition between the unlist becoming available in OData and the timestamp comparison."},{"Id":"10177382978","Type":"PullRequestEvent","CreatedAt":"2019-08-08T22:38:53","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7428","RelatedDescription":"Merged pull request \"Breadcrumbs should be represented as lists to screenreaders\" (#7428) at NuGet/NuGetGallery","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/917879\r\n\r\nFor some reason, the last nodes in our breadcrumbs do not read aloud to screen readers. I was not able to figure out why narrator was refusing to read the span, but it appears that, [according to accessibility guidance available online](https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html), breadcrumbs should be represented as lists. When I added the roles to the HTML, the screen reader began to properly read the breadcrumbs.\r\n\r\nI started by rewriting the HTML into `<ol>` and `<ul>`, but doing so started a fight against the default CSS, so I felt that adding the roles, given that it is functionally equivalent to a screen reader, was a better choice."},{"Id":"10177286682","Type":"PullRequestEvent","CreatedAt":"2019-08-08T22:17:14","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7428","RelatedDescription":"Opened pull request \"Breadcrumbs should be represented as lists to screenreaders\" (#7428) at NuGet/NuGetGallery","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/917879\r\n\r\nFor some reason, the last nodes in our breadcrumbs do not read aloud to screen readers. I was not able to figure out why narrator was refusing to read the span, but it appears that, [according to accessibility guidance available online](https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html), breadcrumbs should be represented as lists. When I added the roles to the HTML, the screen reader began to properly read the breadcrumbs.\r\n\r\nI started by rewriting the HTML into `<ol>` and `<ul>`, but doing so started a fight against the default CSS, so I felt that adding the roles, given that it is functionally equivalent to a screen reader, was a better choice."},{"Id":"10176809275","Type":"IssuesEvent","CreatedAt":"2019-08-08T20:50:22","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7427","RelatedDescription":"Opened issue \"[Azure Search] Consider penalizing packages that aren't maintained\" (#7427) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nPackages that haven't been updated in years should be penalized. If you search for [`captcha`](https://www.nuget.org/experiments/search-sxs?q=captcha), the 2nd and 4th results haven't been updated in 6 years 😨 \r\n\r\n### Describe the solution you'd like\r\nConsider penalizing packages that haven't been updated in the last 2 years.\r\n\r\n### Additional context\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10178725714","Type":"IssuesEvent","CreatedAt":"2019-08-09T05:14:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8437","RelatedDescription":"Opened issue \"Docs for the deterministic pack switch\" (#8437) at NuGet/Home","RelatedBody":""},{"Id":"10177515116","Type":"IssuesEvent","CreatedAt":"2019-08-08T23:11:47","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8436","RelatedDescription":"Closed issue \"Reserve NU5036\" (#8436) at NuGet/Home","RelatedBody":"https://aka.ms/malformedNuGetLicenseUrl redirects to https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5036, so we should prevent any new warnings/errors using this code."},{"Id":"10177065584","Type":"IssuesEvent","CreatedAt":"2019-08-08T21:33:28","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8436","RelatedDescription":"Opened issue \"Reserve NU5036\" (#8436) at NuGet/Home","RelatedBody":"https://aka.ms/malformedNuGetLicenseUrl redirects to https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5036, so we should prevent any new warnings/errors using this code."},{"Id":"10176667452","Type":"IssuesEvent","CreatedAt":"2019-08-08T20:28:04","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8403","RelatedDescription":"Closed issue \"Remove NuGet.Build.Tasks.Pack.Sdk2x package\" (#8403) at NuGet/Home","RelatedBody":"As there is no more NuGet insertion into SDK 2.x, there is no need to generate the NuGet.Build.Tasks.Pack.Sdk2x package in our code.\r\nWe should remove related code.\r\nRelated issue https://github.com/NuGet/Home/issues/8043"},{"Id":"10176109248","Type":"IssuesEvent","CreatedAt":"2019-08-08T18:59:31","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8291","RelatedDescription":"Reopened issue \"'error NU5000 - Nuspec file does not exist in package' should either identify the package or reinstall it\" (#8291) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\ndotnet.exe --version: 3.0.100-preview5-011568\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .csproj\r\n\r\n2. Add a PackageReference to something not bundled with the .net sdk (e.g. ````<PackageReference Include=\"NUnit\" Version=\"3.12.0\" />````)\r\n\r\n3. `dotnet restore`\r\n\r\n4. Delete the .nuspec file for the package from the packages cache (e.g. %userprofile%\\.nuget\\packages\\nunit\\3.12.0\\nunit.3.12.0.nuspec\r\n\r\n5. Delete the obj\\ directory next to the .csproj\r\n\r\n6. `dotnet restore`\r\n\r\nThis will produce the following error: `error NU5000: Nuspec file does not exist in package`\r\n\r\n## Desired behavior\r\nOne of the following should happen:\r\n1. The error should identify which package id/version/install dir is broken.\r\n    a. Otherwise the error is nearly inactionable without clearing the entire packages cache\r\n2. Silently reinstall the package like would occur if the entire install dir was deleted\r\n\r\n## Comments\r\n* This reflects cache corruption; it is not a mainline scenario\r\n* This is a real scenario that one of our devs encountered (though we don't know exactly how the bad state happened)"},{"Id":"10176099077","Type":"IssuesEvent","CreatedAt":"2019-08-08T18:57:57","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8291","RelatedDescription":"Closed issue \"'error NU5000 - Nuspec file does not exist in package' should either identify the package or reinstall it\" (#8291) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\ndotnet.exe --version: 3.0.100-preview5-011568\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .csproj\r\n\r\n2. Add a PackageReference to something not bundled with the .net sdk (e.g. ````<PackageReference Include=\"NUnit\" Version=\"3.12.0\" />````)\r\n\r\n3. `dotnet restore`\r\n\r\n4. Delete the .nuspec file for the package from the packages cache (e.g. %userprofile%\\.nuget\\packages\\nunit\\3.12.0\\nunit.3.12.0.nuspec\r\n\r\n5. Delete the obj\\ directory next to the .csproj\r\n\r\n6. `dotnet restore`\r\n\r\nThis will produce the following error: `error NU5000: Nuspec file does not exist in package`\r\n\r\n## Desired behavior\r\nOne of the following should happen:\r\n1. The error should identify which package id/version/install dir is broken.\r\n    a. Otherwise the error is nearly inactionable without clearing the entire packages cache\r\n2. Silently reinstall the package like would occur if the entire install dir was deleted\r\n\r\n## Comments\r\n* This reflects cache corruption; it is not a mainline scenario\r\n* This is a real scenario that one of our devs encountered (though we don't know exactly how the bad state happened)"},{"Id":"10174982030","Type":"IssuesEvent","CreatedAt":"2019-08-08T16:11:01","Actor":"William-Froelich","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8435","RelatedDescription":"Opened issue \"Issues using nuget packages\" (#8435) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nI am creating two component libraries, one in C++ and one in C# for Windows UWP in a single solution. The libraries will be packaged separately but there will be a dependency such that the C# library depends on C++ library which requires the C# be built architecture-specific.\r\n\r\nThe resulting C# nuget package will not allow compilation of any architecture other than the one that matches the compile flags in the ref .winmd file. If x86 is chosen for the ref, then only x86 will work. Manually stripping the 32BITREQ flag with corflags does allow for a workaround.\r\n\r\nIs this the expected way of handling architecture-specific C# libraries? If so it should probably be documented. If not, is my configuration wrong? Is this just not a normal use case?\r\n\r\nNuGet.exe - Version (4.8.1.5435)\r\ndotnet.exe - Version (2.1.801)\r\nVisual Studio 2017/Visual Studio 2019 Pro\r\nWin10 v1903 Enterprise\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a native Windows Runtime Component (Universal Windows - C++/CX)\r\n2. Create a C# Universal Windows Component Library in the same solution\r\n3. Create a dependency in the C# library on the Native component\r\n3a. Remove \"Any CPU\" build configuration and replace with x86 and x64 configurations (It won't build due to the mismatch without this step)\r\n4. Create .nuspec for both libraries and package separately.\r\n5. Generate and test the generated nuget packages locally (if you packaged the x64 .winmd in ref, then use x86 or vice versa)\r\n\r\n## Other suggested things\r\n\r\nI saw a discussion on a similar issue and read that I can manually strip the CPU requirements by running `corflags /32BITREQ-`\r\n\r\nhttps://github.com/NuGet/Home/issues/1221\r\n\r\nI can confirm that taking this step did make the nuget package work when tested, however, this seems like it shouldn't be a manual step. Either my configuration is wrong or there's a missed case.\r\n\r\n### Verbose Logs\r\n\r\n```\r\n1>------ Build started: Project: NugetPackageTest, Configuration: Release x86 ------\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): error MSB3270: There was a mismatch between the processor architecture of the project being built \"x86\" and the processor architecture of the reference \"C:\\Users\\WilliamF3\\.nuget\\packages\\Csharp.Ui.Component.Library\\0.0.1\\lib\\uap10.0\\csharp_project.winmd\", \"AMD64\". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project.\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n### Sample Project\r\n\r\nI can provide a skeleton of this setup if needed but I cannot share the original project.\r\n\r\nnative Library .nuspec:\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package >\r\n  <metadata>\r\n    <id>Name Removed</id>\r\n    <version>0.0.1</version>\r\n    <title>Name Removed</title>\r\n    <authors>Nobody Inc.</authors>\r\n    <owners>Nobody Inc.</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Native Library</description>\r\n    <releaseNotes>Initial Release</releaseNotes>\r\n    <copyright>Copyright 2019</copyright>\r\n    <tags>windows uwp</tags>\r\n  </metadata>\r\n\r\n  <files>\r\n    <!-- WinMd and IntelliSense files -->\r\n    <file src=\"..\\x64\\Release\\native_project\\native_project.winmd\" target=\"lib\\uap10.0\"/>\r\n\r\n    <!-- 64 bit Release DLL and Resource files -->\r\n    <file src=\"..\\x64\\Release\\native_project\\native_project.dll\" target=\"runtimes\\win10-x64\\native\"/>\r\n    <file src=\"..\\x64\\Release\\native_project\\native_project.pri\" target=\"runtimes\\win10-x64\\native\"/>\r\n\r\n    <!-- 32 bit Release DLL and Resource files -->\r\n    <file src=\"bin\\x64\\Release\\x86\\native_project\\native_project.dll\" target=\"runtimes\\win10-x86\\native\"/>\r\n    <file src=\"bin\\x64\\Release\\x86\\native_project\\native_project.pri\" target=\"runtimes\\win10-x86\\native\"/>\r\n\r\n    <!-- .targets  Used to specify supported architectures mappings-->\r\n    <file src=\"native_project.targets\" target=\"build\\native\"/>\r\n\r\n  </files>\r\n</package>\r\n```\r\n\r\nC# UWP component Library nuspec:\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package >\r\n  <metadata>\r\n    <id>Csharp.Ui.Component.Library</id>\r\n    <version>0.0.1</version>\r\n    <title>UI Elements</title>\r\n    <authors>Nobody Inc.</authors>\r\n    <owners>Nobody Inc.</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>The UI elements For the native library</description>\r\n    <releaseNotes>Initial Release</releaseNotes>\r\n    <copyright>Copyright 2019</copyright>\r\n    <tags>uwp windows</tags>\r\n    <dependencies>\r\n      <dependency id=\"Microsoft.NETCore.UniversalWindowsPlatform\" version=\"6.2.8\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <!-- WinMd and IntelliSense files -->\r\n    <!-- This is manually copied and stripped of the 32BITREQ flag -->\r\n    <file src=\"csharp_project.winmd\" target=\"ref\\uap10.0\" />\r\n\r\n    <file src=\"bin\\x64\\Release\\csharp_project.winmd\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"bin\\x64\\Release\\csharp_project.pdb\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"bin\\x64\\Release\\csharp_project.pri\" target=\"runtimes\\win10-x64\\native\" />\r\n\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project\\csharp_project.winmd\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project\\csharp_project.pdb\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project\\csharp_project.pri\" target=\"runtimes\\win10-x86\\native\" />\r\n\r\n    <!-- XAML controls -->\r\n    <file src=\"bin\\x64\\Release\\csharp_project.xr.xml\" target=\"runtimes\\win10-x64\\native\\csharp_project\" />\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project.xr.xml\" target=\"runtimes\\win10-x86\\native\\csharp_project\" />\r\n\r\n    <!-- Assets -->\r\n    <file src=\"Assets\\**\" target=\"runtimes\\win10-x64\\native\\csharp_project\\Assets\" />\r\n    <file src=\"Assets\\**\" target=\"runtimes\\win10-x86\\native\\csharp_project\\Assets\" />\r\n\r\n    <!-- .targets  Used to specify supported architectures mappings-->\r\n    <file src=\"csharp_project.targets\" target=\"build\\uap10.0\" />\r\n  </files>\r\n</package>\r\n```"},{"Id":"10170767139","Type":"IssuesEvent","CreatedAt":"2019-08-08T06:34:35","Actor":"JarahSi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8295","RelatedDescription":"Closed issue \"Rule: build.props do not match convention warning\" (#8295) at NuGet/Home","RelatedBody":"Ensure that the build folder contains files that follow the convention `<package_id>.props` or `<package_id>.targets`\r\n\r\n[Spec here](https://github.com/NuGet/Engineering/blob/josi-BuildPropsConvention/Client.Specs/PackageValidation/BuildPropsConventionIsUpheld.md)\r\n\r\n[PR](https://github.com/NuGet/NuGet.Client/pull/2982)\r\n"},{"Id":"10169287441","Type":"IssuesEvent","CreatedAt":"2019-08-07T23:47:35","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8434","RelatedDescription":"Opened issue \"dotnet package list --outdate --transitive crashes with LINQ issue\" (#8434) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.6136\r\n\r\ndotnet.exe --version (if appropriate): 2.2.302-preview-010246 (the ones used for debugging)\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 10.0.18362 Build 18362\r\n\r\n\r\nWorked before? If so, with which NuGet version: 5.3.0.6103 was fine\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a solution with two projects: ProjA and ProjB\r\n2. Create a ProjectReference in ProjA pointing to ProjB\r\n3. Add Newtonsoft.Json 12.0.1 (NOT the latest version) to ProjA as a PackageReference\r\n4. `dotnet package list --outdated --include-transitive` with the relevant patched version of dotnet\r\n\r\n## Other suggested things\r\n\r\nAssuming I got everything right (which is a stretch, I'm very new to this whole debugging dotnet.exe part), git bisect tells me this regression happened with https://github.com/NuGet/NuGet.Client/pull/2928\r\n\r\n/cc @xavierdecoster @rrelyea @nkolev92 \r\n\r\n### Verbose Logs\r\nStack trace:\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Sequence contains no matching element\r\n  Source=System.Linq\r\n  StackTrace:\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at NuGet.CommandLine.XPlat.ListPackageCommandRunner.GetVersionsFromDict(IEnumerable`1 packages, Dictionary`2 packagesVersionsDict, ListPackageArgs listPackageArgs) in C:\\Users\\kmarchan\\source\\repos\\Nuget\\Nuget.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Commands\\PackageReferenceCommands\\ListPackage\\ListPackageCommandRunner.cs:line 294\r\n```\r\n\r\n"},{"Id":"10168773853","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:46:52","Actor":"elvisFabian","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8433","RelatedDescription":"Opened issue \"nuget pack breaks on linux\" (#8433) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: **NuGet.exe** with mono\r\nNuGet version: **5.1.0.6013**\r\ndotnet.exe --version: **2.2.401**\r\nOS version: **Ubuntu 19.04**\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1. Run `nuget pack in a nuspec file`\r\n\r\n\r\n## Verbose Logs\r\n### Linux (fail)\r\n```\r\nalias nuget=\"mono /usr/local/bin/nuget.exe\"\r\n\r\nnuget pack ./temp/PJMT.SGP.PreCadastro.Contracts.nuspec -verbosity detailed -ForceEnglishOutput\r\nNuGet Version: 5.1.0.6013\r\nAttempting to build package from 'PJMT.SGP.PreCadastro.Contracts.nuspec'.\r\nAn error occured while trying to parse the value '' of property 'dependencies' in the manifest file.\r\n  Index was outside the bounds of the array.\r\nSystem.IO.InvalidDataException: An error occured while trying to parse the value '' of property 'dependencies' in the manifest file. ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.  at System.Collections.Generic.LargeArrayBuilder`1[T].GetBuffer (System.Int32 index) [0x00022] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Collections.Generic.LargeArrayBuilder`1[T].CopyTo (System.Collections.Generic.CopyPosition position, T[] array, System.Int32 arrayIndex, System.Int32 count) [0x00041] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Collections.Generic.SparseArrayBuilder`1[T].CopyTo (T[] array, System.Int32 arrayIndex, System.Int32 count) [0x0009a] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Collections.Generic.SparseArrayBuilder`1[T].ToArray () [0x00028] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Linq.Enumerable+Concat2Iterator`1[TSource].ToArray () [0x00024] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00021] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.DefaultFrameworkMappings.get_CompatibilityMappings () [0x00478] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.FrameworkNameProvider.InitMappings (System.Collections.Generic.IEnumerable`1[T] mappings) [0x00055] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.FrameworkNameProvider..ctor (System.Collections.Generic.IEnumerable`1[T] mappings, System.Collections.Generic.IEnumerable`1[T] portableMappings) [0x0010e] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.DefaultFrameworkNameProvider..ctor () [0x0001c] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.DefaultFrameworkNameProvider.get_Instance () [0x0000a] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.NuGetFramework.Parse (System.String folderName) [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader+<>c.<ReadDependencyGroups>b__10_0 (System.Xml.Linq.XElement element) [0x00027] in <f495a477196947558735199950d701a7>:0 \r\n  at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[TSource,TResult].ToList () [0x0002f] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00021] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadDependencyGroups (System.Xml.Linq.XElement dependenciesElement) [0x000a3] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadMetadataValue (NuGet.Packaging.ManifestMetadata manifestMetadata, System.Xml.Linq.XElement element, System.Collections.Generic.HashSet`1[T] allElements) [0x004ce] in <f495a477196947558735199950d701a7>:0 \r\n   --- End of inner exception stack trace ---\r\n  at NuGet.Packaging.ManifestReader.ReadMetadataValue (NuGet.Packaging.ManifestMetadata manifestMetadata, System.Xml.Linq.XElement element, System.Collections.Generic.HashSet`1[T] allElements) [0x0056f] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadMetadata (System.Xml.Linq.XElement xElement) [0x0003f] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadManifest (System.Xml.Linq.XDocument document) [0x00015] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.Manifest.ReadFrom (System.IO.Stream stream, System.Func`2[T,TResult] propertyProvider, System.Boolean validateSchema) [0x0009e] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.PackageBuilder.ReadManifest (System.IO.Stream stream, System.String basePath, System.Func`2[T,TResult] propertyProvider) [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.PackageBuilder..ctor (System.String path, System.String basePath, System.Func`2[T,TResult] propertyProvider, System.Boolean includeEmptyDirectories) [0x00041] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.PackageBuilder..ctor (System.String path, System.Func`2[T,TResult] propertyProvider, System.Boolean includeEmptyDirectories) [0x00008] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.CreatePackageBuilderFromNuspec (System.String path) [0x00101] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.BuildFromNuspec (System.String path) [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.BuildPackage (System.String path) [0x00016] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.BuildPackage () [0x00021] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.PackCommand.ExecuteCommand () [0x0022d] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.Command.ExecuteCommandAsync () [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.Command.Execute () [0x000dd] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c0] in <f495a477196947558735199950d701a7>:0 \r\n  ```\r\n\r\n### Windows (Work)\r\n```\r\n .\\nuget.exe pack .\\teMP\\PJMT.SGP.PreCadastro.Contracts.nuspec -suffix rc -verbosity de\r\ntailed -ForceEnglishOutput\r\nNuGet Version: 5.1.0.6013\r\nAttempting to build package from 'PJMT.SGP.PreCadastro.Contracts.nuspec'.\r\n\r\nId: PJMT.SGP.PreCadastro.Contracts\r\nVersion: 1.0.1-rc\r\nAuthors: PJMT.SGP.PreCadastro.Contracts\r\nDescription: Package Description\r\nDependencies:\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'lib/netstandard2.0/PJMT.SGP.PreCadastro.Contracts.dll'.\r\nAdded file 'package/services/metadata/core-properties/abe9ebfb2a0944069d2f442215e30d61.psmdcp'.\r\nAdded file 'package/services/metadata/core-properties/e8883027b2f74736b8359b2154fc114f.psmdcp'.\r\nAdded file 'PJMT.SGP.PreCadastro.Contracts.nuspec'.\r\n```\r\n\r\n\r\n## Sample Project\r\n[PJMT.SGP.PreCadastro.Contracts.1.0.1.zip](https://github.com/NuGet/Home/files/3479030/PJMT.SGP.PreCadastro.Contracts.1.0.1.zip)\r\n"},{"Id":"10168726631","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:37:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6757","RelatedDescription":"Closed issue \"Conditional references in csproj files causes error when condition is false\" (#6757) at NuGet/Home","RelatedBody":"_From @Reza1024 on July 10, 2017 21:17_\n\nI am trying to have a solution with two projects and reference on in the other one only in Debug builds but referencing under conditions causes compile error on Release although it compiles just fine on Debug. It is very easy to reproduce:\r\n\r\n```\r\n1>------ Build started: Project: DebugTools, Configuration: Release Any CPU ------\r\n1>DebugTools -> [Address of Solution]\\DebugTools\\bin\\Release\\netstandard1.4\\DebugTools.dll\r\n2>------ Build started: Project: MainLibrary, Configuration: Release Any CPU ------\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(92,5): error : Cannot find project info for '[Address of Solution]\\DebugTools\\DebugTools.csproj'. This can indicate a missing project reference.\r\n2>Done building project \"MainLibrary.csproj\" -- FAILED.\r\n========== Build: 1 succeeded or up-to-date, 1 failed, 0 skipped ==========\r\n```\r\nHere is the content of the content of the csproj files. I am using VS 15.2 (26430.14)\r\n\r\n**DebugTools.csproj**\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netstandard1.4</TargetFramework>\r\n\t</PropertyGroup>\r\n</Project>\r\n````\r\n\r\n**MainLibrary.csproj**\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netstandard1.4</TargetFramework>\r\n\t</PropertyGroup>\r\n\t<ItemGroup Condition=\"'$(Configuration)' == 'Debug'\">\r\n\t\t<ProjectReference Include=\"..\\DebugTools\\DebugTools.csproj\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```\n\n_Copied from original issue: dotnet/project-system#2583_"},{"Id":"10168710719","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:35:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7868","RelatedDescription":"Closed issue \"PackageReference ignores $Platform condition\" (#7868) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (VS UI | Package Manager Console | dotnet.exe):\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100-preview3-010431\r\n\r\nVS version (if appropriate): 16.0.0 Preview 4.1 SVC1 / 15.9.8\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create new C# project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp3.0;netcoreapp2.2;net472</TargetFrameworks>\r\n    <Platforms>x64;x86</Platforms>\r\n  </PropertyGroup>\r\n\r\n  <!--<ItemGroup Condition=\"'$(Platform)' == 'x64'\">-->\r\n  <!--<ItemGroup Condition=\"'$(Platform)' == 'x64' AND ('$(TargetFramework)' == 'netcoreapp3.0' Or '$(TargetFramework)' == 'netcoreapp2.2')\">-->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' != 'net472' AND '$(Platform)' != 'x86'\">\r\n      <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27413-02\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n2. Try to publish x86:\r\ndotnet publish -c Release -f netcoreapp3.0 -r win-x86\r\n\r\n3. Error:\r\nC:\\Users\\Me\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27413-02\\build\\Microsoft.NETCore.Native.Publish.targets(65,5): error : win-x86 not supported yet. https://github.com/dotnet/corert/issues/4589 [C:\\Development\\Test\\Test.csproj]\r\n\r\nThe commented out conditions all don't work. Either they result in both x86 and x64 builds trying to use the referenced package or neither of them using the referenced package. Either way it seems impossible to specify a PackageReference specific to the platform. Also tried adding the condition on the PackageReference rather than ItemGroup with the same results.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-08-09T05:30:45.8826437Z","RunDurationInMilliseconds":2597}