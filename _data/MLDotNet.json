{"Data":{"GitHub":{"Issues":[{"Id":"390514849","IsPullRequest":true,"CreatedAt":"2018-12-13T04:36:44","Actor":"TomFinley","Number":"1870","RawContent":null,"Title":"Much more core internalization (Phase 3)","State":"open","Body":"Continuuation of #1626 , which as usual continues #1519.\r\n\r\nMost of `Core`, but not all, is now internalized. Most significant remainders include `RoleMappedSchema` and `MetadataUtils`. Some of these had fairly long reaching side effects (most notably, the internalization of `RoleMappedData`).","Url":"https://github.com/dotnet/machinelearning/pull/1870","RelatedDescription":"Open PR \"Much more core internalization (Phase 3)\" (#1870)"},{"Id":"390500063","IsPullRequest":true,"CreatedAt":"2018-12-13T03:13:35","Actor":"jignparm","Number":"1869","RawContent":null,"Title":"Updated fix for models with negative dimensions","State":"open","Body":"Updated the onnxtransform to handle negative dimensions correctly.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1869","RelatedDescription":"Open PR \"Updated fix for models with negative dimensions\" (#1869)"},{"Id":"389521715","IsPullRequest":true,"CreatedAt":"2018-12-12T22:07:08","Actor":"shmoradims","Number":"1856","RawContent":null,"Title":"Enabled feature contributions for GAM trainers","State":"closed","Body":"* Implemented IFeatureContributionMapper interface for GamPredictorBase to enable FCC for GAM trainers\r\n* Added test","Url":"https://github.com/dotnet/machinelearning/pull/1856","RelatedDescription":"Closed or merged PR \"Enabled feature contributions for GAM trainers\" (#1856)"},{"Id":"389971813","IsPullRequest":true,"CreatedAt":"2018-12-12T20:42:12","Actor":"wschin","Number":"1863","RawContent":null,"Title":"Remove ISchema in MultiClassClassifierScorer.cs","State":"closed","Body":"This PR completely remove `ISchema` and its implementation used in `MultiClassClassifierScore`. It's a part of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/1863","RelatedDescription":"Closed or merged PR \"Remove ISchema in MultiClassClassifierScorer.cs\" (#1863)"},{"Id":"390014437","IsPullRequest":true,"CreatedAt":"2018-12-12T20:07:28","Actor":"najeeb-kazmi","Number":"1865","RawContent":null,"Title":"Public API for Linear Predictors","State":"closed","Body":"Fixes #1702 \r\n\r\nRename linear predictors to `XyzModelParameters`, reduce public surface, add a sample, internalize and explicitly implement the following interfaces:\r\n- `IParameterMixer`\r\n- `IParameterMixer<TOutput>`\r\n- `IDistribution<out TResult>`\r\n- `IQuantileDistribution<TResult>`\r\n- `ISampleableDistribution<TResult>`\r\n\r\nI have not renamed the namespaces, after discussion with @TomFinley during the course of fixing #1699. We will revisit namespace rename at a later time.","Url":"https://github.com/dotnet/machinelearning/pull/1865","RelatedDescription":"Closed or merged PR \"Public API for Linear Predictors\" (#1865)"},{"Id":"389625301","IsPullRequest":true,"CreatedAt":"2018-12-12T19:12:36","Actor":"sfilipi","Number":"1858","RawContent":null,"Title":"renaming uint128 to RowId","State":"closed","Body":"Fixes #1534 by renaming Uint128 to RowId\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1858","RelatedDescription":"Closed or merged PR \"renaming uint128 to RowId\" (#1858)"},{"Id":"390108775","IsPullRequest":true,"CreatedAt":"2018-12-12T08:09:22","Actor":"wschin","Number":"1868","RawContent":null,"Title":"Remove ISchema in ColumnBindingsBase","State":"open","Body":"This PR propose a naive way for removing `ISchema` in `ColumnBindingsBase`. It duplicates two utilities functions in the existing `ISchema`.\r\n\r\nDuplicated functions:\r\n```chsarp\r\n        private Delegate GetMetadataGetterDelegate<TValue>(int col, string kind, Delegate del)\r\n        {\r\n            // REVIEW: We are facing a choice here: cache 'value' and get rid of 'schema' reference altogether,\r\n            // or retain the reference but be more memory efficient. This code should not stick around for too long\r\n            // anyway, so let's not sweat too much, and opt for the latter.\r\n            ValueGetter<TValue> getter = (ref TValue value) => ((MetadataGetterDel<TValue>)del)(kind, col, ref value);\r\n            return getter;\r\n        }\r\n```\r\n```csharp\r\n        private Schema MakeOutputSchema()\r\n        {\r\n            var builder = new SchemaBuilder();\r\n            for (int i = 0; i < ColumnCount; ++i)\r\n            {\r\n                var meta = new MetadataBuilder();\r\n                foreach (var kvp in GetMetadataTypes(i))\r\n                {\r\n                    var getter = Utils.MarshalInvoke(GetMetadataGetterDelegate<int>, kvp.Value.RawType, i, kvp.Key);\r\n                    meta.Add(kvp.Key, kvp.Value, getter);\r\n                }\r\n                builder.AddColumn(GetColumnName(i), GetColumnType(i), meta.GetMetadata());\r\n            }\r\n            return builder.GetSchema();\r\n       }\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/1868","RelatedDescription":"Open PR \"Remove ISchema in ColumnBindingsBase\" (#1868)"},{"Id":"390038519","IsPullRequest":false,"CreatedAt":"2018-12-12T02:29:13","Actor":"TomFinley","Number":"1867","RawContent":null,"Title":"Remove IRowCursorConsolidator, replace with utility method somewhere","State":"open","Body":"Consider this method:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/9067a1be58434999e37db7504d6b4e06eca8bbf4/src/Microsoft.ML.Core/Data/IDataView.cs#L114-L115\r\n\r\nThis returns an instance of the mysterious `IRowCursorConsolidator` interface. Why an interface? In retrospect I'm not quite sure.\r\n\r\nHaving an interface allows for different implementations, but we've never actually really exploited that capability. Nor, even if we were of such a mind to do so, would it be clear how we could. What would they even do differently? The semantics around `Batch` and whatnot are sufficiently clear and simple as to make only one implementation obvious, and even if we did have different implementations since the resulting cursors result most often from transformers (that is, components downstream from the set creation), they couldn't really do anything radically different anyway, since to do anything implementation specific on any cursor would be to break the composability at the core of what makes `IDataView` work at all.\r\n\r\nSo: get rid of this interface, and replace all usage of it with a simple utility method *somewhere* that can be called to do the reconciliation. It needn't even be a public utility method, but there may be reasons to do so.","Url":"https://github.com/dotnet/machinelearning/issues/1867","RelatedDescription":"Open issue \"Remove IRowCursorConsolidator, replace with utility method somewhere\" (#1867)"},{"Id":"389964474","IsPullRequest":true,"CreatedAt":"2018-12-12T01:07:50","Actor":"wschin","Number":"1862","RawContent":null,"Title":"Warn when a graph contains a null output","State":"closed","Body":"Fixes #315.","Url":"https://github.com/dotnet/machinelearning/pull/1862","RelatedDescription":"Closed or merged PR \"Warn when a graph contains a null output\" (#1862)"},{"Id":"390016903","IsPullRequest":false,"CreatedAt":"2018-12-12T00:44:01","Actor":"najeeb-kazmi","Number":"1866","RawContent":null,"Title":"Public Constructors for ModelParameters","State":"open","Body":"During the course of fixing #1698 and deriving work items (e.g. #1699, #1701, #1702), we created public constructors for the various `ModelParameter` objects (formerly `Predictor` objects).\r\n\r\n@sfilipi raised the question whether these should be public or be made internal as the only thing that can create `ModelParameters` (`Predictors`) is training a model. What use case are we supporting with this? When might a user want to create say a `LinearRegressionModelParameters` object with bias and weights instead of training a linear regression model?","Url":"https://github.com/dotnet/machinelearning/issues/1866","RelatedDescription":"Open issue \"Public Constructors for ModelParameters\" (#1866)"},{"Id":"389996200","IsPullRequest":true,"CreatedAt":"2018-12-12T00:06:16","Actor":"eerhardt","Number":"1864","RawContent":null,"Title":"Remove `As` methods on ColumnType.","State":"closed","Body":"Remove the following methods from ColumnType:\r\n\r\n- AsVector\r\n- AsKey\r\n- AsPrimitive\r\n\r\nMore PRs will be coming in this form. But this seemed like the lowest hanging fruit to start making incremental progress here.\r\n\r\nPart of the work necessary for #1860 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1864","RelatedDescription":"Closed or merged PR \"Remove `As` methods on ColumnType.\" (#1864)"},{"Id":"388538366","IsPullRequest":true,"CreatedAt":"2018-12-11T21:56:39","Actor":"sfilipi","Number":"1848","RawContent":null,"Title":"Disintegrating Microsoft.ML.Api dispersing its content.","State":"closed","Body":"Fixes #1707  by moving most of the classes on it to Microsoft.ML.Data or Microsoft.ML.Core. \r\n\r\nLet me know if there is a better place for particular files. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1848","RelatedDescription":"Closed or merged PR \"Disintegrating Microsoft.ML.Api dispersing its content.\" (#1848)"},{"Id":"389942259","IsPullRequest":true,"CreatedAt":"2018-12-11T21:26:31","Actor":"wschin","Number":"1861","RawContent":null,"Title":"Remove some ISchema","State":"closed","Body":"This PR is one of the tasks required in #1501. Only simple type-renaming is conducted in this PR.","Url":"https://github.com/dotnet/machinelearning/pull/1861","RelatedDescription":"Closed or merged PR \"Remove some ISchema\" (#1861)"},{"Id":"389936673","IsPullRequest":false,"CreatedAt":"2018-12-11T20:19:22","Actor":"eerhardt","Number":"1860","RawContent":null,"Title":"Extract IDataView into its own assembly and NuGet package","State":"open","Body":"IDataView is a very flexible, efficient way of describing tabular data (columns and rows) in a read-only manner.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/docs/code/IDataViewDesignPrinciples.md\r\n\r\nAt its heart are 2 key concepts:\r\n- Schema (describing the columns)\r\n- Cursoring (how to read the rows of data)\r\n\r\nIt has other capabilities that I won’t enumerate here, the above link describes them in more detail.\r\n\r\nIDataView is very useful as an abstraction for tabular data that will allow users to pass data between two independent libraries.\r\n\r\nFor example, ML.NET is able to both consume and produce IDataView instances. Say there was a .NET library for Apache Arrow. If the Arrow .NET data type implements IDataView, the Apache Arrow data can be passed directly into ML.NET without having to copy it into a format that ML.NET consumes.\r\n\r\nAnother example is: say we had a visualization/graphing/plotting library in .NET that could consume data using IDataView. Then we could take data that was produced by ML.NET, or Apache Arrow, and feed it directly into the graphing library. There would be no need to copy, or change the shape of the data at all. And there is no need for this graphing library to know anything about ML.NET or Apache Arrow.\r\n\r\nIn my mind, we can use IDataView in a similar manner to what [OData](https://www.odata.org/) was promised to be: An exchange format which allows producers and consumers of data to communicate in a standardized way. (Although, OData has more capabilities such as filtering, sorting, updating data, etc which I am not proposing we add to IDataView. I was just using it as an analogy.)\r\n\r\n/cc @TomFinley @Zruty0 @markusweimer @danmosemsft @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/1860","RelatedDescription":"Open issue \"Extract IDataView into its own assembly and NuGet package\" (#1860)"},{"Id":"388752316","IsPullRequest":true,"CreatedAt":"2018-12-11T18:00:57","Actor":"sfilipi","Number":"1849","RawContent":null,"Title":"Add a test for 1259","State":"closed","Body":"Closes #1259 by adding the test described in the bug: OVA with the feature column named something other than \"Features\". \r\n\r\nA bit of cleanup on reusing arguments to load the test dataset. ","Url":"https://github.com/dotnet/machinelearning/pull/1849","RelatedDescription":"Closed or merged PR \"Add a test for 1259\" (#1849)"},{"Id":"389883833","IsPullRequest":true,"CreatedAt":"2018-12-11T17:57:18","Actor":"montebhoover","Number":"1859","RawContent":null,"Title":"[WIP] Move entrypoints from Microsoft.ML.Legacy to Microsoft.ML.Entrypoints.","State":"open","Body":"Move entrypoints from Microsoft.ML.Legacy to Microsoft.ML.Entrypoints.\r\n\r\nWorking towards #1565 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1859","RelatedDescription":"Open PR \"[WIP] Move entrypoints from Microsoft.ML.Legacy to Microsoft.ML.Entrypoints.\" (#1859)"},{"Id":"389546906","IsPullRequest":false,"CreatedAt":"2018-12-11T00:34:01","Actor":"wschin","Number":"1857","RawContent":null,"Title":"Schema Equtable","State":"open","Body":"Sometime, we have code like\r\n```csharp\r\n            public Cursor(IChannelProvider provider, RowToRowScorerBase parent, RowCursor input, bool[] active, Func<int, bool> predicateMapper)\r\n                : base(provider, input)\r\n            {\r\n                Ch.AssertValue(parent);\r\n                Ch.AssertValue(active);\r\n                Ch.AssertValue(predicateMapper);\r\n\r\n                _bindings = parent.GetBindings();\r\n                Schema = parent.OutputSchema;\r\n                Ch.Assert(active.Length == _bindings.ColumnCount);\r\n                _active = active;\r\n\r\n                _output = _bindings.RowMapper.GetRow(input, predicateMapper);\r\n                try\r\n                {\r\n                    Ch.Assert(_output.Schema == _bindings.RowMapper.OutputSchema);\r\n                    _getters = parent.GetGetters(_output, iinfo => active[_bindings.MapIinfoToCol(iinfo)]);\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    _output.Dispose();\r\n                    throw;\r\n                }\r\n            }\r\n```\r\nwhere the equivalence between two `Schema` objects is enforced by using things like\r\n```\r\n_output.Schema == _bindings.RowMapper.OutputSchema\r\n```\r\n. This implies that we need to implement proper comparison function for `Schema`.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1857","RelatedDescription":"Open issue \"Schema Equtable\" (#1857)"},{"Id":"388445125","IsPullRequest":true,"CreatedAt":"2018-12-10T23:22:56","Actor":"Anipik","Number":"1845","RawContent":null,"Title":"Reverting dead unallignedCode paths","State":"closed","Body":"Reverting unaligned CodePaths were added in https://github.com/dotnet/machinelearning/pull/1218 and https://github.com/dotnet/machinelearning/pull/1274\r\n\r\nRelated to https://github.com/dotnet/machinelearning/pull/1838\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1845","RelatedDescription":"Closed or merged PR \"Reverting dead unallignedCode paths\" (#1845)"},{"Id":"389517417","IsPullRequest":true,"CreatedAt":"2018-12-10T22:36:26","Actor":"Anipik","Number":"1855","RawContent":null,"Title":"Added RffBenchmark","State":"open","Body":"Adding an end to end to Benchmark for rffTransform and cpumathutils functions like matmul and matmiltran\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1855","RelatedDescription":"Open PR \"Added RffBenchmark\" (#1855)"},{"Id":"389517133","IsPullRequest":false,"CreatedAt":"2018-12-10T22:35:36","Actor":"JRAlexander","Number":"1854","RawContent":null,"Title":"ColumnAttribute and TextLoader.Column and TextLoader.Arguments has header property","State":"open","Body":"From @PeterPann23:\r\n\r\n\"To me, this seems to all address the same problem on several different steps of designing the data, perhaps make ordinal an integer and not a string and define the data kind all on-top of the class and have the text loader override it when needed if needed. Most likely one would create a model class as in MVC that consumes a given \"view\" on the world. Perhaps my MVC experience has made me bias but this in my opinion overly complicated as is.\"\r\n\r\nFixes https://github.com/dotnet/docs/issues/9470\r\n\r\nOpened an issue for this  as it's product feedback, and not a docs issue. ","Url":"https://github.com/dotnet/machinelearning/issues/1854","RelatedDescription":"Open issue \"ColumnAttribute and TextLoader.Column and TextLoader.Arguments has header property\" (#1854)"},{"Id":"388843490","IsPullRequest":false,"CreatedAt":"2018-12-07T22:57:49","Actor":"montebhoover","Number":"1853","RawContent":null,"Title":"Add components to EntryPoint catalog that are missing.","State":"open","Body":"There are several new components in ML.NET that were not added to the EntryPoint catalog:\r\n\r\n- MatrixFactorizationTrainer\r\n- PermutationFeatureImportance\r\n- GeneralizedAdditiveModels\r\n- SsaSpikeDetector\r\n- SsaChangePointDetector\r\n- IidSpikeDetector\r\n- IidChangePointDetector\r\n\r\n\r\nTo add these to the EntryPoint catalog, simply:\r\n\r\n1. Add the `SignatureEntryPointModule` signature to the `LoadableClass` assembly attribute.\r\n2. Create a public static method, that: \r\n    1. Takes as input, among others, an object representing the arguments of the component you want to expose. \r\n    2. Initializes and run the components, returning one of the nested classes of `Microsoft.ML.Runtime.EntryPoints.CommonOutputs`\r\n    3. Is annotated with the `TlcModule.EntryPoint` attribute","Url":"https://github.com/dotnet/machinelearning/issues/1853","RelatedDescription":"Open issue \"Add components to EntryPoint catalog that are missing.\" (#1853)"},{"Id":"388832123","IsPullRequest":false,"CreatedAt":"2018-12-07T22:10:51","Actor":"sfilipi","Number":"1852","RawContent":null,"Title":"No way to set the log verbosity in the MLContext","State":"open","Body":"There is currently ways to set a Logging verbosity in the MLContex. \r\nThe users need to be able to tweak logging verbosity. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1852","RelatedDescription":"Open issue \"No way to set the log verbosity in the MLContext\" (#1852)"},{"Id":"388365337","IsPullRequest":true,"CreatedAt":"2018-12-07T21:33:04","Actor":"vaeksare","Number":"1842","RawContent":null,"Title":"Prevent DNNImageModels from being downloaded on all machines","State":"closed","Body":"Moves the check location to prevent download from happening on unnecessary machines during the official build. Fixes #1841 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1842","RelatedDescription":"Closed or merged PR \"Prevent DNNImageModels from being downloaded on all machines\" (#1842)"},{"Id":"388364996","IsPullRequest":false,"CreatedAt":"2018-12-07T21:33:04","Actor":"vaeksare","Number":"1841","RawContent":null,"Title":"DNNImageModels are downloaded on all machines during official builds","State":"closed","Body":"The models only need to be downloaded on one machine during official builds, not all of them.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1841","RelatedDescription":"Closed issue \"DNNImageModels are downloaded on all machines during official builds\" (#1841)"},{"Id":"388820432","IsPullRequest":false,"CreatedAt":"2018-12-07T21:28:48","Actor":"eerhardt","Number":"1851","RawContent":null,"Title":"Native assemblies from NuGet aren't copied correctly for packages.config","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: .NET Framework 4.7.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCreate an \"old style\" .csproj using packages.config and added Microsoft.ML nuget package and built.\r\n\r\nWhen creating the project, if you uncheck the \"Create directory for solution\" checkbox, then the .sln and .csproj are in the same folder. When you restore NuGet packages, the nuget files get put in a `packages` folder in the same folder as the .csproj.\r\n\r\n- **What happened?**\r\nThe native assemblies (CpuMathNative, FastTreeNative, LdaNative, etc) were all copied into subdirectories of my output path instead of directly in my output path.\r\n\r\nFrom looking at a binlog of the build, it appears that the `AssignTargetPath` is getting confused at our `Content` items since they appear to be part of the project (since they are under the same folder as the .csproj).\r\n\r\n- **What did you expect?**\r\nThe native assemblies should be copied directly to the output folder.\r\n\r\n### Note\r\n\r\nTo fix this, we should put the `<Link>` metadata on our content items:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/14c7a472579afa3ce98bad2e3495e4c0524471b9/pkg/common/CommonPackage.props#L10-L20\r\n\r\nSee\r\n* https://github.com/dotnet/roslyn/issues/15137#issuecomment-260470890\r\n* https://github.com/Microsoft/onnxruntime/pull/127#discussion_r239845745\r\n\r\nFor other places that had this same bug.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1851","RelatedDescription":"Open issue \"Native assemblies from NuGet aren't copied correctly for packages.config\" (#1851)"},{"Id":"388786512","IsPullRequest":false,"CreatedAt":"2018-12-07T19:36:26","Actor":"rogancarr","Number":"1850","RawContent":null,"Title":"OLS FeatureWeights are not the model weights","State":"open","Body":"For the `LinearPredictor`, the `GetFeatureWeights` returns the model weights, as expected:\r\n\r\n```\r\npublic virtual void GetFeatureWeights(ref VBuffer<Float> weights)\r\n{\r\n    Weight.CopyTo(ref weights);\r\n}\r\n```\r\n\r\nThe `OlsLinearRegressionPredictor` has the same method, but it does not return the model weights. It returns the [`-log(p-value)` for each feature](https://github.com/dotnet/machinelearning/blob/14c7a472579afa3ce98bad2e3495e4c0524471b9/src/Microsoft.ML.HalLearners/OlsLinearRegression.cs#L782). This is weird because it overrides the `LinearRegressionPredictor`'s GetFeatureWeights method but returns a different kind of value, essentially the magnitudes of the p-values.\r\n\r\nNow, this goes back to the meaning of `feature weight`. Many predictors that are not linear models implement `GetFeatureWeight`, and it looks like it's a measure of importance. What's the right thing here? Do we want to return a measure of relative importance or do we want to return the model weights?\r\n\r\nCurrently, I find this API to be super confusing because there is no docstring to explain what you are getting back, and I would expect the \"Feature Weights\" of a linear model to the model weight parameters.\r\n\r\nAlso, this is a nit, but if we really want to return the magnitude of the p-values, doesn't `-log10(p-value)` make more sense? The base e log puts these onto a weird scale.","Url":"https://github.com/dotnet/machinelearning/issues/1850","RelatedDescription":"Open issue \"OLS FeatureWeights are not the model weights\" (#1850)"},{"Id":"388530007","IsPullRequest":true,"CreatedAt":"2018-12-07T07:00:51","Actor":"artidoro","Number":"1847","RawContent":null,"Title":"WIP: Update of FeatureContributionCalculation to new API","State":"open","Body":"Fixes #1791.\r\n\r\nAs this is a WIP PR, I am still completing the work, but I would really appreciate your feedback on what I have done so far.\r\n\r\nIn this PR:\r\n- [x]  I created a new ITransformer for FeatureContributionCalculation (previously known as WhatTheFeature) by converting previous ISchemaBoundRowMapper to two separate classes: a IRowMapper and a ISchemaBoundMapper.\r\n- [x] I created a new IEstimator that produces the transformer.\r\n- [x] I added tests for the Transformer and Estimator. (Need to add a few more)\r\n- [x] I added MlContext extensions.\r\n- [x] I added documentation, and checks for arguments and types.\r\n\r\nWill do in a separate PR:\r\n- Add static extensions for the estimators.\r\n- I allowed pipelines, and not just IPredictor, to be passed to the IEstimator. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1847","RelatedDescription":"Open PR \"WIP: Update of FeatureContributionCalculation to new API\" (#1847)"},{"Id":"388463357","IsPullRequest":true,"CreatedAt":"2018-12-07T01:06:12","Actor":"wschin","Number":"1846","RawContent":null,"Title":"[WIP] Remove ISchema","State":"open","Body":"Fixes #1501.\r\n\r\n[Update] This PR will be splitted into small pieces!\r\n\r\n- [x] Replace `ISchema` with `Schema` in all cases without writing extra code\r\n- [ ] Remove `ITransposeSchema` because it's a `ISchema`\r\n- [x] Remove the uses of `ISchema` in ColumnBindingsBase\r\n- [ ] Remove the uses of `ISchema` in `internal sealed class CompositeSchema : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\DataView\\CompositeSchema.cs`\r\n- [ ] Remove the uses of `ISchema` in `internal sealed class FakeSchema : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\FakeSchema.cs`\r\n- [ ] Remove the uses of `ISchema` in `private abstract class NoMetadataSchema : ISchema` in \t`machinelearning\\src\\Microsoft.ML.Data\\DataView\\Transposer.cs`\r\n- [ ] Remove the uses of `ISchema` in `private sealed class Bindings : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\Dirty\\ChooseColumnsByIndexTransform.cs`\r\n- [ ] Remove the uses of `ISchema` in `private sealed class Bindings : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\Text\\TextLoader.cs`\r\n- [ ] Remove the uses of `ISchema` in `private sealed class FeatureContributionSchema : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\Scorers\\FeatureContributionCalculationTransform.cs`\r\n- [ ] Remove the uses of `ISchema` in `private sealed class FeatureNameCollectionSchema : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\Depricated\\Instances\\HeaderSchema.cs`\r\n- [x] Remove the uses of `ISchema` in `private sealed class SchemaImpl : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\Scorers\\MultiClassClassifierScorer.cs`\r\n- [ ] Remove the uses of `ISchema` in `private sealed class SchemaImpl : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\Binary\\BinaryLoader.cs`\r\n- [x] Remove the uses of `ISchema` in `public abstract class ScoreMapperSchemaBase : ISchema` in `machinelearning\\src\\Microsoft.ML.Data\\Scorers\\ScoreMapperSchema.cs`\r\n- [x] Remove the uses of `ISchema` in `private sealed class GroupSchema : ISchema` in `machinelearning\\src\\Microsoft.ML.Transforms\\GroupTransform.cs`\r\n- [x] Remove the uses of `ISchema` in `private sealed class SchemaImpl : ISchema` in \t`machinelearning\\src\\Microsoft.ML.Transforms\\UngroupTransform.cs`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1846","RelatedDescription":"Open PR \"[WIP] Remove ISchema\" (#1846)"},{"Id":"388417893","IsPullRequest":true,"CreatedAt":"2018-12-06T22:04:31","Actor":"rogancarr","Number":"1844","RawContent":null,"Title":"Confidence Intervals for Permutation Feature Importance","State":"open","Body":"This PR adds an optional confidence interval calculation to the `Permutation Feature Importance` evaluator. If the users specifies the number of permutations > 1, then the resulting evaluating metrics will contain the mean and standard deviation.\r\n\r\nFixes #1840\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1844","RelatedDescription":"Open PR \"Confidence Intervals for Permutation Feature Importance\" (#1844)"},{"Id":"388365719","IsPullRequest":false,"CreatedAt":"2018-12-06T19:36:59","Actor":"TomFinley","Number":"1843","RawContent":null,"Title":"Schema.Metadata needs a better name","State":"open","Body":"\"Metadata\" is perhaps not the best name for what we currently call metadata.\r\n\r\nFirst, what is it: what we call Metadata is meant to suggest not just any metadata, but that data that we consider auxiliary, or at *most* ancillary. (So for example, slot names are in metadata, because not everything will have names for each slot. But sometimes they will, and we need a place to keep that.)\r\n\r\nThe trouble with the name \"metadata\" is that it means literally everything but the data. But this is inaccurate: there are lots of things that are data about the data (e.g., the types, the vector sizes, the names of columns) that we definitely do not want to keep in the metadata structure (since they're absolutely required information), but that is \"metadata\" in the strict linguistic sense of the word.\r\n\r\nThe only name suggested as an alternative that I am aware of is \"annotations.\" I am fine with the name annotations. Perhaps we could come up with a better name. I'll leave this open for a bit, and unless people object we can rename metadata annotations.","Url":"https://github.com/dotnet/machinelearning/issues/1843","RelatedDescription":"Open issue \"Schema.Metadata needs a better name\" (#1843)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-13T05:30:56.3493009Z","RunDurationInMilliseconds":1171}