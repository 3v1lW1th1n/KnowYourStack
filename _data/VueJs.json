{"Data":{"Vue":{"Events":[{"Id":"6862037677","Type":"IssuesEvent","CreatedAt":"2017-11-16T02:42:49","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7064","RelatedDescription":"Closed issue \"Can not clear slot content with vue@2.5.3\" (#7064) at vuejs/vue","RelatedBody":"### Version\r\n2.5.3\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/yibuyisheng/s5xoxmv1/6/](https://jsfiddle.net/yibuyisheng/s5xoxmv1/6/)\r\n\r\n### Steps to reproduce\r\nCreate a `Base` Component with a slot, and pass in the slot with template tag with empty content.\r\n\r\n### What is expected?\r\nThe empty template slot should clear the content of `Base` Component's corresponding slot.\r\n\r\n### What is actually happening?\r\nDid not clear the content.\r\n\r\n---\r\nHowever, the vue@2.4.4 do the right thing: https://jsfiddle.net/yibuyisheng/s5xoxmv1/7/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6862018864","Type":"IssuesEvent","CreatedAt":"2017-11-16T02:36:12","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7060","RelatedDescription":"Closed issue \"Allow and support non-reactive instance variables in vue's d.ts\" (#7060) at vuejs/vue","RelatedBody":"### Version\r\n2.5.3\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vn1zlz8n63](https://codesandbox.io/s/vn1zlz8n63)\r\n\r\n### Steps to reproduce\r\nHover over `this.logit` in `m_logitShouldBeInferredCorrectly`\r\n\r\n\r\n### What is expected?\r\nHover over should display property logit:debug.Debugger. I have your common understanding that hover is just the TS inference  effect.\r\n\r\n### What is actually happening?\r\nDisplays `any`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6862013543","Type":"IssuesEvent","CreatedAt":"2017-11-16T02:34:40","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7066","RelatedDescription":"Closed issue \"Vue component can not implement a interface\" (#7066) at vuejs/vue","RelatedBody":"### Version\r\n2.5.3\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/chrisvfritz/50wL7mdz/](https://jsfiddle.net/chrisvfritz/50wL7mdz/)\r\n\r\n### Steps to reproduce\r\nI have multi components, and I want them to implement same interface, in previous version, I can implement in this way:\r\n\r\n```\r\nimport Vue, { ComponentOptions } from 'vue'\r\n\r\ninterface Test extends Vue {\r\n  title: string;\r\n}\r\n\r\nexport default Vue.extend({\r\n  name: 'component1',\r\n  data() {\r\n    return {\r\n      title: ''\r\n    }\r\n  }\r\n} as ComponentOptions<Test>)\r\n\r\n\r\nexport default Vue.extend({\r\n  name: 'component2',\r\n  data() {\r\n    return {\r\n      title: ''\r\n    }\r\n  }\r\n} as ComponentOptions<Test>)\r\n```\r\n\r\nBut now, these code throw exception:\r\n```\r\nerror TS2345: Argument of type 'ComponentOptions<Test, DefaultData<Test>, DefaultMethods<Test>, DefaultComputed, PropsDefinit\r\nion<...' is not assignable to parameter of type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDe\r\nfinition<Rec...'.\r\n  Type 'ComponentOptions<Test, DefaultData<Test>, DefaultMethods<Test>, DefaultComputed, PropsDefinition<...' is not assignable to typ\r\ne 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Rec...'.\r\n    Type 'DefaultMethods<Test>' is not assignable to type 'DefaultMethods<Vue>'.\r\n      Index signatures are incompatible.\r\n        Type '(this: Test, ...args: any[]) => any' is not assignable to type '(this: Vue, ...args: any[]) => any'.\r\n          The 'this' types of each signature are incompatible.\r\n            Type 'Vue' is not assignable to type 'Test'.\r\n              Property 'title' is missing in type 'Vue'.\r\n```\r\n\r\n\r\n\r\n### What is expected?\r\nshould have no error\r\n\r\n### What is actually happening?\r\nerror occur\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6862011797","Type":"IssuesEvent","CreatedAt":"2017-11-16T02:34:01","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7067","RelatedDescription":"Closed issue \"scoped attribute make to modify css difficulty or unreasonable\" (#7067) at vuejs/vue","RelatedBody":"### Version\r\n2.5.3\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/ql3nvkv489](https://codesandbox.io/s/ql3nvkv489)\r\n\r\n### Steps to reproduce\r\nA.vue and B.vue, they all set a scoped arrtibute for style tag,\r\nthen A import B and I want to modify B's style in Aï¼Œ\r\nbut I found it not work\r\n\r\n### What is expected?\r\nI hope can modify the style of B in A, even if A and B have scoped attribute.\r\nmaybe it what adds a attribute-selector in the start of every css selector sentence can solve this problem\r\n\r\n### What is actually happening?\r\nvue add a attribute-selector in the end of every css selector sentence, so it not work\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6861399779","Type":"IssuesEvent","CreatedAt":"2017-11-15T23:08:43","Actor":"silkentrance","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1888","RelatedDescription":"Closed issue \"Typescript integration fails on beforeRoute* guards implemented on the class\" (#1888) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://gist.github.com/silkentrance/9caa45481329f6ef911bd5eae5dbb7c3](https://gist.github.com/silkentrance/9caa45481329f6ef911bd5eae5dbb7c3)\r\n\r\n### Steps to reproduce\r\nJust npm install vue-router, vue, and vue-class-component or integrate the gist into an existing project, adjusting the import paths where necessary.\r\n\r\nThen run the server and navigate to root '/'.\r\n\r\nIn the console log there should now be multiple entries, with the outputs from beforeRouteEnter/beforeRouteUpdate missing. \r\n\r\n### What is expected?\r\nThe guards implemented on the class as methods must be called.\r\n\r\n### What is actually happening?\r\nThe guards implemented on the class are never called.\r\n\r\n---\r\n\r\nRegistering the beforeRouteEnter and beforeRouteUpdate and beforeRouteLeave hooks with Component.registerHooks() and then implementing these hooks on the class will not work as expected as vue-router still tries to access these guards directly from def.options, see below\r\n\r\nhttps://github.com/vuejs/vue-router/blob/d539788df8394efe41c1534e1e9d1555aa2edbe2/src/history/base.js#L262\r\n\r\n\r\nThe solution will be to also query the methods property of these options and return the available guards from there, e.g.\r\n\r\n```\r\n  if (def.options[key]) {\r\n    return def.options[key];\r\n  }\r\n  return def.options.methods ? def.options.methods[key] : null;\r\n```\r\n\r\nI can prepare a PR for this, if you like.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6861019433","Type":"IssuesEvent","CreatedAt":"2017-11-15T21:38:50","Actor":"silkentrance","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1888","RelatedDescription":"Opened issue \"Typescript integration fails on beforeRoute* guards implemented on the class\" (#1888) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://gist.github.com/silkentrance/9caa45481329f6ef911bd5eae5dbb7c3](https://gist.github.com/silkentrance/9caa45481329f6ef911bd5eae5dbb7c3)\r\n\r\n### Steps to reproduce\r\nJust npm install vue-router, vue, and vue-class-component or integrate the gist into an existing project, adjusting the import paths where necessary.\r\n\r\nThen run the server and navigate to root '/'.\r\n\r\nIn the console log there should now be multiple entries, with the outputs from beforeRouteEnter/beforeRouteUpdate missing. \r\n\r\n### What is expected?\r\nThe guards implemented on the class as methods must be called.\r\n\r\n### What is actually happening?\r\nThe guards implemented on the class are never called.\r\n\r\n---\r\n\r\nRegistering the beforeRouteEnter and beforeRouteUpdate and beforeRouteLeave hooks with Component.registerHooks() and then implementing these hooks on the class will not work as expected as vue-router still tries to access these guards directly from def.options, see below\r\n\r\nhttps://github.com/vuejs/vue-router/blob/d539788df8394efe41c1534e1e9d1555aa2edbe2/src/history/base.js#L262\r\n\r\n\r\nThe solution will be to also query the methods property of these options and return the available guards from there, e.g.\r\n\r\n```\r\n  if (def.options[key]) {\r\n    return def.options[key];\r\n  }\r\n  return def.options.methods ? def.options.methods[key] : null;\r\n```\r\n\r\nI can prepare a PR for this, if you like.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6860954692","Type":"IssuesEvent","CreatedAt":"2017-11-15T21:24:31","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1887","RelatedDescription":"Closed issue \"Typescript integration fails on beforeRouteEnter and beforeRouteUpdate guards\" (#1887) at vuejs/vue-router","RelatedBody":"The existing vue-component-class extension allows us to write components as classes. \r\n\r\nRegistering the beforeRouteEnter and beforeRouteUpdate and beforeRouteLeave hooks with Component.registerHooks() and then implementing these hooks on the class will not work as expected as vue-router still tries to access these guards directly from def.options, see below\r\n\r\nhttps://github.com/vuejs/vue-router/blob/d539788df8394efe41c1534e1e9d1555aa2edbe2/src/history/base.js#L262\r\n\r\nThe solution will be to also query the methods property of these options and return the available guards from there, e.g.\r\n\r\n```\r\n  if (def.options && def.options[key]) {\r\n    return def.options[key];\r\n  }\r\n  return def.options.methods[key];\r\n```\r\n\r\nI can prepare a PR for this, if you like."},{"Id":"6860954642","Type":"IssuesEvent","CreatedAt":"2017-11-15T21:24:30","Actor":"silkentrance","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1887","RelatedDescription":"Opened issue \"Typescript integration fails on beforeRouteEnter and beforeRouteUpdate guards\" (#1887) at vuejs/vue-router","RelatedBody":"The existing vue-component-class extension allows us to write components as classes. \r\n\r\nRegistering the beforeRouteEnter and beforeRouteUpdate and beforeRouteLeave hooks with Component.registerHooks() and then implementing these hooks on the class will not work as expected as vue-router still tries to access these guards directly from def.options, see below\r\n\r\nhttps://github.com/vuejs/vue-router/blob/d539788df8394efe41c1534e1e9d1555aa2edbe2/src/history/base.js#L262\r\n\r\nThe solution will be to also query the methods property of these options and return the available guards from there, e.g.\r\n\r\n```\r\n  if (def.options && def.options[key]) {\r\n    return def.options[key];\r\n  }\r\n  return def.options.methods[key];\r\n```\r\n\r\nI can prepare a PR for this, if you like."},{"Id":"6860897075","Type":"IssuesEvent","CreatedAt":"2017-11-15T21:11:46","Actor":"MrSlide","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1886","RelatedDescription":"Opened issue \"Hydration from SSR rendered code fails when using lazy-loaded route components\" (#1886) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/MrSlide/vue-ssr-lazy-load-hydration-issue](https://github.com/MrSlide/vue-ssr-lazy-load-hydration-issue)\r\n\r\n### Steps to reproduce\r\n- Clone repository\r\n- Install dependencies using `npm install`\r\n- Install Gulp globally using `npm install -g gulp`\r\n- Get the project running using `gulp`, this should get a server started and open the app in the browser\r\n- Check the browser console when loading the initial page, the warning `[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.` should appear\r\n\r\n### What is expected?\r\nVue should wait for the async route component to finish loading before diffing the tree of the SSR content and the virtual DOM tree on the client side\r\n\r\n### What is actually happening?\r\nThe SSR content has the async route component fully rendered, but on the client side when the app is mounted the async route component is not rendered yet, causing the virtual DOM tree to be different and throwing a warning\r\n\r\n---\r\nThis works fine\r\n\r\n```\r\n// src/js/router/routes.js\r\n\r\nimport HomeView from '../views/index.js'\r\n\r\nexport default [\r\n  {\r\n    path: '/',\r\n    name: 'home',\r\n    component: HomeView\r\n  }\r\n]\r\n```\r\n\r\nThis causes issues\r\n\r\n```\r\n// src/js/router/routes.js\r\n\r\nexport default [\r\n  {\r\n    path: '/',\r\n    name: 'home',\r\n    component: function () {\r\n      return import('../views/index.js')\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6860760367","Type":"IssuesEvent","CreatedAt":"2017-11-15T20:40:56","Actor":"autumnwoodberry","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1885","RelatedDescription":"Opened issue \"router hook that executes after route leave but before route enter on reused route components\" (#1885) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nThis will allow asynchronous code to prevent entering a new route, while allowing the current route component to exit.\r\n\r\nImagine you have a route component that requires some data to be fetched from the server before entering. If the route params change and the data needs to be refreshed, there is currently not a router hook that will allow the current component to transition out before fetching the new data.\r\n\r\nA forum post is here: https://forum.vuejs.org/t/beforerouteenter-beforerouteupdate/21661\r\n\r\nA codepen example is here: https://codepen.io/autumnwoodberry/pen/NwaxLZ\r\n\r\n### What does the proposed API look like?\r\n```\r\nafterUpdateBeforeEnter (to, from, next) {\r\n  return http.fetch(to.params.slug).then(next)\r\n}\r\n```\r\n\r\nBasically, this would function exactly like `beforeRouteUpdate`, but will allow the current component to leave before executing.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6860411518","Type":"PullRequestEvent","CreatedAt":"2017-11-15T19:24:52","Actor":"maxmckenzie","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1884","RelatedDescription":"Opened pull request \"Update to nginx example\" (#1884) at vuejs/vue-router","RelatedBody":"If you have multiple `sites-enabled` on the same nginx server then setting `try_files $uri $uri/ /index.html;` causes a 500 error on the other sites if the first site root directory it tries is empty\r\n\r\nhttps://serverfault.com/questions/505098/what-does-this-nginx-error-rewrite-or-internal-redirection-cycle-mean\\?newreg\\=96a16475fb24461b973b6c9bec2f4308\r\n\r\nTo support history fallback and make sure no other sites are affected  setting `try_files $uri /index.html $uri/ =404;` will route all requests to index. If it is not found, then it will serve a 404 error and avoid the infinite loop which causes other sites on the server to error and not load\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6859458165","Type":"IssuesEvent","CreatedAt":"2017-11-15T16:15:17","Actor":"ktsn","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1054","RelatedDescription":"Closed issue \"FIlters with Store.getters\" (#1054) at vuejs/vuex","RelatedBody":"### What problem does this feature solve?\r\nI like feature filters in Vue, but now i can't apply getters to filters in Vuex, this is more convenient for Vuex\r\n\r\n### What does the proposed API look like?\r\n```javascipt\r\nexport default {\r\n   filters: {\r\n      capitalize: function (value) {\r\n         return this.$store.getters.capitalize(value)\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-11-16T05:30:34.6529646Z","RunDurationInMilliseconds":2062}