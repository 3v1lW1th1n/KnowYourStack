{"Data":{"GitHubIssues":{"Issues":[{"Id":"360503445","IsPullRequest":false,"CreatedAt":"2018-09-15T03:36:29","Actor":"redmisfitx","Number":"1425","RawContent":null,"Title":"Blazor Project won't compile","State":"open","Body":"Installed .NET Core SDK 2.1.402 and created a Blazor project in Visual Studio 15.8.4 I am not able to run the project. It throws the following error. I've tried suggestions like deleting the json file which has a reference to .net core 2.1.300 among many other things including clearing all nuget packages and restoring them. All to no avail.\r\n\r\nThis is the actual error.\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tMSB3073\tThe command \"dotnet \"C:\\Users\\redmi\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/Microsoft.AspNetCore.Blazor.Build.dll\" write-boot-json obj\\Debug\\netstandard2.0\\Control Edge.dll --references \"C:\\Edge\\obj\\Debug\\netstandard2.0\\blazor/bootjson-references.txt\" --embedded-resources \"C:\\Edge\\obj\\Debug\\netstandard2.0\\blazor/embedded.resources.txt\" --linker-enabled --output \"C:\\Edge\\obj\\Debug\\netstandard2.0\\blazor/blazor.boot.json\"\" exited with code -532462766.\tControl Edge\tC:\\Users\\redmi\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\Blazor.MonoRuntime.targets\t635\t\r\n","Url":"https://github.com/aspnet/Blazor/issues/1425","RelatedDescription":"Open issue \"Blazor Project won't compile\" (#1425)"},{"Id":"360422347","IsPullRequest":false,"CreatedAt":"2018-09-14T19:17:31","Actor":"RudyMeijer","Number":"1424","RawContent":null,"Title":"HTTP Error 502.5 - Process Failure","State":"closed","Body":"Hi, \r\n\r\nI Installed the latest Blazor Language Services extension from the Visual Studio Marketplace in VS2017 15.8.4 and created a new project.\r\n![image](https://user-images.githubusercontent.com/17112368/45570253-4e042380-b862-11e8-9295-fe3b8f30493b.png)\r\n\r\nWhen i run the Blazor application (Ctrl+F5) without modifications i get the error:\r\n\r\n![image](https://user-images.githubusercontent.com/17112368/45569911-4a23d180-b861-11e8-96fb-78aaf030047a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/17112368/45569725-acc89d80-b860-11e8-8ecc-843566443642.png)\r\n\r\nThe eventlogger shows:\r\n![image](https://user-images.githubusercontent.com/17112368/45570060-b9012a80-b861-11e8-88c9-f6ce84846805.png)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1424","RelatedDescription":"Closed issue \"HTTP Error 502.5 - Process Failure\" (#1424)"},{"Id":"360386134","IsPullRequest":false,"CreatedAt":"2018-09-14T17:27:27","Actor":"DanElliott","Number":"1423","RawContent":null,"Title":"Namespace tied to directory name causes missing reference build issues","State":"closed","Body":"With 0.5.1, created a new project named BlazorApp1 located in folder XYZ. Build errors claim \r\n\r\n> The type or namespace name 'Shared' does not exist in the namespace 'BlazorApp1' (are you missing an assembly reference?)\r\n\r\n at `obj\\Debug\\netstandard2.0\\App.g.i.cs`, for example.\r\n\r\nReproduce error with `dotnet new blazor -o XYZ -n BlazorApp1`\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1423","RelatedDescription":"Closed issue \"Namespace tied to directory name causes missing reference build issues\" (#1423)"},{"Id":"360247495","IsPullRequest":false,"CreatedAt":"2018-09-14T16:19:37","Actor":"PeskovV","Number":"1421","RawContent":null,"Title":"Why blazor app doesn't work when i change root to folder “_framework”","State":"closed","Body":"I change my base href in `index.html`: was `href=\"/\"` has become `href=\"/schedule/\"`\r\n\r\nAlso i change `Configure`:\r\n \r\n\r\n     app.UseStaticFiles();\r\n                app.UseStaticFiles(new StaticFileOptions()\r\n                {\r\n                    FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(),@\"Schedule.Client\", @\"dist\")),\r\n                    RequestPath = new PathString(\"/schedule\")\r\n                });\r\nHere located my files\r\n\r\n[![Here located my files:][1]][1]\r\n\r\n\r\ncss, js, resources work good, but _framework which includes wasm files and doesn't work correct.\r\n\r\nindex.html:\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width\">\r\n        <title>Schedule</title>\r\n        <link rel=\"icon\" href=\"css/Resources/icon_title.png\" />\r\n        <base href=\"/schedule/\" />\r\n        <link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\" />\r\n        <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.2.0/css/all.css\" crossorigin=\"anonymous\">\r\n        <link href=\"css/site.css\" rel=\"stylesheet\" />\r\n        <link href=\"css/btnstyle.css\" rel=\"stylesheet\" />\r\n        <script src=\"js/SetScroll.js\"></script>\r\n    \r\n    </head>\r\n    <body>\r\n        <app>\r\n            <div id=\"demo\" style=\"margin:auto; top:30px;\">\r\n                <img src=\"css/Resources/logo-fin.png\" />\r\n                <div class=\"circle fas fa-spinner\"></div>\r\n            </div>\r\n        </app>\r\n    \r\n        <script src=\"_framework/blazor.webassembly.js\"></script>\r\n        <script defer src=\"https://use.fontawesome.com/releases/v5.2.0/js/all.js\" crossorigin=\"anonymous\"></script>\r\n    </body>\r\n    </html>\r\n\r\nWhen I start my app, I get error\r\n[![enter image description here][2]][2]\r\n\r\nWhen i use `href=\"/\"`, all is correct\r\n\r\nWhat could be wrong?\r\nThanks!\r\n\r\nUpdate\r\n\r\nI have found the same problem and solution, but there is used a Azure CLI:\r\nhttps://anthonychu.ca/post/blazor-azure-storage-static-websites/\r\n\r\n[![enter image description here][3]][3]\r\n \r\n  [1]: https://i.stack.imgur.com/q4nsh.png\r\n  [2]: https://i.stack.imgur.com/0yNIS.png\r\n[3]: https://i.stack.imgur.com/gXp6g.png","Url":"https://github.com/aspnet/Blazor/issues/1421","RelatedDescription":"Closed issue \"Why blazor app doesn't work when i change root to folder “_framework”\" (#1421)"},{"Id":"360315028","IsPullRequest":false,"CreatedAt":"2018-09-14T16:16:12","Actor":"stsrki","Number":"1422","RawContent":null,"Title":"Possible bug with for loop","State":"closed","Body":"I have a `SimplePagination` component with just the basics:\r\n```\r\n<Pagination>\r\n    @for ( int i = 0; i <= ( TotalItems / PageSize ); ++i )\r\n    {\r\n        <PaginationItem>@i.ToString()</PaginationItem>\r\n    }\r\n</Pagination>\r\n@functions{\r\n    [Parameter] int TotalItems { get; set; }\r\n\r\n    [Parameter] int PageSize { get; set; } = 10;\r\n}\r\n```\r\n**Use case:**\r\n```\r\n<SimplePagination TotalItems=\"5\" />\r\n<SimplePagination TotalItems=\"15\" />\r\n<SimplePagination TotalItems=\"45\" />\r\n```\r\n\r\n\r\nWhen rendered I get this:\r\n![image](https://user-images.githubusercontent.com/900302/45553866-48dcaf80-b835-11e8-9a54-75b63ce2abf7.png)\r\n\r\nBut if I store the page number inside of temp var I get the expected result:\r\n```\r\n<Pagination>\r\n    @for ( int i = 0; i <= ( TotalItems / PageSize ); ++i )\r\n    {\r\n        var pageNum = i.ToString();\r\n        <PaginationItem>@pageNum</PaginationItem>\r\n    }\r\n</Pagination>\r\n@functions{\r\n    [Parameter] int TotalItems { get; set; }\r\n\r\n    [Parameter] int PageSize { get; set; } = 10;\r\n}\r\n```\r\n![image](https://user-images.githubusercontent.com/900302/45553947-86d9d380-b835-11e8-8bc1-0b818558483b.png)\r\n\r\nI guess that `ChildContent` inside of my `PaginationItem `will only get the reference to the **ToString()** function instead of it's return value. \r\n\r\nIs this expected behavior ?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1422","RelatedDescription":"Closed issue \"Possible bug with for loop\" (#1422)"},{"Id":"360235115","IsPullRequest":false,"CreatedAt":"2018-09-14T09:50:43","Actor":"stsrki","Number":"1420","RawContent":null,"Title":"[Suggestion] Self closing tags","State":"open","Body":"This is not really an issue, just that it would be good to have. Right now the intellisense cannot detect components that should not have closing tags(or does not need them) e.g. `<div></div>`, but instead they would have a \"_self-close_\" tag e.g. `<input />` or `<img />`.\r\n\r\nPossible use case would be for components that does not have `ChildContent`. For example I have an Icon component and I define the icon name through the `Name `parameter so `ChildContent `is not needed. But every time I use it, the VS intellisense will generate closing tag.\r\n\r\n**Current behavior:**\r\n`<Icon Name=\"user\"></Icon>`\r\n\r\n**Wanted:**\r\n`<Icon Name=\"user\" />`\r\n\r\nMaybe this is not connected to the Blazor team but to the VS team instead, please ignore in that case.\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1420","RelatedDescription":"Open issue \"[Suggestion] Self closing tags\" (#1420)"},{"Id":"360119100","IsPullRequest":true,"CreatedAt":"2018-09-14T09:33:34","Actor":"Suchiman","Number":"1416","RawContent":null,"Title":"ILWipe: Remove AsyncStateMachineAttribute","State":"closed","Body":"From methods that get trimmed, we should remove the `AsyncStateMachineAttribute` if present because it will root the generated private async state machine type which the linker is hence unable to remove.\r\n\r\nIn my test, this helped the linker to remove the following nested struct from `HttpClientHandler`\r\n```csharp\r\n[CompilerGenerated]\r\n[StructLayout(LayoutKind.Auto)]\r\nprivate struct <SendAsync>d__64 : IAsyncStateMachine\r\n{\r\n\tvoid IAsyncStateMachine.MoveNext()\r\n\t{\r\n\t\tthrow ILWipeHelpers.CreateMethodWipedException();\r\n\t}\r\n\r\n\t[DebuggerHidden]\r\n\tvoid IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)\r\n\t{\r\n\t\tthrow ILWipeHelpers.CreateMethodWipedException();\r\n\t}\r\n\r\n\tpublic int <>1__state;\r\n\r\n\tpublic AsyncTaskMethodBuilder<HttpResponseMessage> <>t__builder;\r\n\r\n\tpublic HttpClientHandler <>4__this;\r\n\r\n\tpublic HttpRequestMessage request;\r\n\r\n\tpublic CancellationToken cancellationToken;\r\n\r\n\tprivate HttpWebRequest <wrequest>5__2;\r\n\r\n\tprivate HttpWebResponse <wresponse>5__3;\r\n\r\n\tprivate CancellationTokenRegistration <>7__wrap3;\r\n\r\n\tprivate HttpContent <content>5__5;\r\n\r\n\tprivate ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;\r\n\r\n\tprivate Stream <stream>5__6;\r\n\r\n\tprivate ConfiguredTaskAwaitable<Stream>.ConfiguredTaskAwaiter <>u__2;\r\n\r\n\tprivate ConfiguredTaskAwaitable<WebResponse>.ConfiguredTaskAwaiter <>u__3;\r\n\r\n\tprivate TaskAwaiter<HttpResponseMessage> <>u__4;\r\n}\r\n```\r\n\r\nThe `System.Net.Http.dll` stays at 66kb nontheless.\r\nThe removal of the attribute allows the entire state machine to be removed which can enable further linking as its fields will no longer keep them alive.\r\n\r\nAnother idea would be to remove all attributes from these methods which would be the tradeoff of code that would possibly discover these methods via those attributes and eventually run into the `MethodWipedException` exception vs. not finding them in the first place. On the other hand, ILWipe will strip targeted types and methods in the BCL and its unlikely to reflect on the BCL based on attributes.","Url":"https://github.com/aspnet/Blazor/pull/1416","RelatedDescription":"Closed or merged PR \"ILWipe: Remove AsyncStateMachineAttribute\" (#1416)"},{"Id":"360208160","IsPullRequest":false,"CreatedAt":"2018-09-14T09:32:21","Actor":"A51UK","Number":"1419","RawContent":null,"Title":"Having asp.net razor for service side and Blazor on client side on the same views. ","State":"closed","Body":"The idea is that you could use asp.net razor on service side when making the view but use Blazor to do any change on the clients side, like how with use  asp.net razor with JavaScript now. The reason for this is to allow the page to be sent with some data  on load and then use Blazor for any update or change after the page been sent.  \r\n\r\nA example of this would be on a shopping site where the first 10 product would be sent on the page when sent to the user and next load of product would be load on the page by the use of Blazor and Web API. it would be good for SEO as google would be able to see the  first 10 product without it need run any Blazor code.  In order to do this there would be need a way to say with part of the code is for Blazor and with part for the service side (e.g. razor). This would also allow for a more easy upgrade route for non-Blazor website to be able to use Blazor.","Url":"https://github.com/aspnet/Blazor/issues/1419","RelatedDescription":"Closed issue \"Having asp.net razor for service side and Blazor on client side on the same views. \" (#1419)"},{"Id":"360100612","IsPullRequest":false,"CreatedAt":"2018-09-14T07:00:32","Actor":"tauheedul","Number":"1415","RawContent":null,"Title":"Please add Blazor sample with ML.NET","State":"closed","Body":"Blazor allows us to use .NET Core features. Now that the .NET Core supports machine learning, it would be very helpful to learn how we can use ML.NET features with Blazor on the client side.\r\n\r\nIf this works, we could perform machine learning on the client side or server side using our web apps.","Url":"https://github.com/aspnet/Blazor/issues/1415","RelatedDescription":"Closed issue \"Please add Blazor sample with ML.NET\" (#1415)"},{"Id":"360177833","IsPullRequest":false,"CreatedAt":"2018-09-14T06:49:42","Actor":"tn-5","Number":"1418","RawContent":null,"Title":"Server side blazor does not trigger @bind update for auto filled input fields","State":"open","Body":"I have a test app with a login form with a username and password input, both bound to string properties on the model. It works correctly if I manually enter values in these fields (the string properties get updated from the @bind directive).\r\n\r\nIf the browser has a cached username / password combination and I select auto fill for these fields, the fields do get filled (visually on the page) but the bound password property does not get updated (the username does). The password field does get filled correctly on the browser, if I make any change to the field (add a space for example), the string password property does get updated.\r\n\r\nIt looks like whatever event is used to trigger the update does not get processed correctly or does not fire for the auto filled password. I have not tested with other auto filled form fields.\r\n\r\nThis was tested on Safari & Edge. When exactly the same code is used compiled for client side Blazor it works 100%. ","Url":"https://github.com/aspnet/Blazor/issues/1418","RelatedDescription":"Open issue \"Server side blazor does not trigger @bind update for auto filled input fields\" (#1418)"},{"Id":"360159251","IsPullRequest":true,"CreatedAt":"2018-09-14T05:14:23","Actor":"rynowak","Number":"1417","RawContent":null,"Title":"Add support for generic-typed components","State":"open","Body":"## What is it?\r\n\r\nThis change adds the ability to define and consume generic-typed components from both C# and Razor.\r\n\r\n**GenericBlink.cshtml**\r\n```\r\n@typeparam TItem\r\n\r\n<blink>\r\n  @ChildContent(Item)\r\n</blink>\r\n\r\n@functions {\r\n    [Parameter] RenderFragment<TItem> ChildContent { get; set; }\r\n    [Parameter] TItem Item { get; set;}\r\n\r\n}\r\n```\r\n\r\n```\r\n<GenericBlink TItem=string Item=\"@Message\">\r\n  <div>Your message was: @context.ToLowerInvariant()</div>\r\n</GenericBlink>\r\n\r\n@functions {\r\n    [Parameter] string Message { get; set; }\r\n}\r\n```\r\n\r\nCurrently when consuming a component from Razor, you must specific the type arguments. Support for type inference of usage of generic-typed components is coming next.\r\n\r\nYou can define type parameters on a component with the new `@typeparam` directive. There is currently no support for type constraints when defining generic-typed components from Razor.\r\n\r\nIf you are defining a component from C# then everything should 'just work' the way you'd expect.\r\n\r\nMost of the work and tricky cases are related to making it possible to consume generic-typed components in generated code.\r\n\r\n## How does it work\r\n\r\nWhen we discover a generic-typed component, we synthesize an extra 'type-argument' attribute for each type-parameter. This gives us intellisense and completion support for specifying types when using the component. The type argument must be a nominal type (like the inside of a `typeof(...)` expression.. ie, it can't be a variable.\r\n\r\nOnce we've bound the component tree and processed cross-cutting features like event handlers and `bind` we find each generic-typed component and process the type parameters. We rewrite the type name of the component and the type name of each parameter that's set (for type-checking) and do code generation with the type-arguments substituted in.\r\n\r\nThis approach obviously won't be used for type-inference, but it's an important feature to provide for cases where you want to (or need to) be specific. \r\n\r\n## Misc\r\n\r\nWhen setting a generic-typed parameter, you won't get support for the shorthand the Razor supports for `string` attributes.\r\n\r\nEx: `<Generic TValue=string Value=\"Foo\" />`\r\nIn this example if `Value` is of type `TValue` then `Foo` will be interpreted as C# not as the contents of a string. \r\n\r\n--\r\n\r\nWhen using generics, there's always the possibility that the error messages could be confusing or misleading when the generic types can't be figured out. I've tried my best to minimize the error cases that you'll get in the editor, so that you can clearly see the error that Blazor reports about missing generic types. If you hit cases where the error messages are misleading, please let us know.","Url":"https://github.com/aspnet/Blazor/pull/1417","RelatedDescription":"Open PR \"Add support for generic-typed components\" (#1417)"},{"Id":"359091713","IsPullRequest":false,"CreatedAt":"2018-09-13T15:56:09","Actor":"stsrki","Number":"1408","RawContent":null,"Title":"Detect parent from child component","State":"closed","Body":"Sorry if this was answered already. I have a need for the child component to behave differently based on the parent in which it is placed. I need to know if the _ChildComponent_ is placed inside of _ParentComponent_ or not.\r\n\r\nFor axample if I have this\r\n```\r\n<div>\r\n    <ParentComponent>\r\n       <ChildComponent />\r\n    <ParentComponent>\r\n</div>\r\n```\r\nit would render:\r\n```\r\n<div>\r\n    <div class=\"parent-class\"\r\n        <span class=\"child-class hello-parent\"></span>\r\n    <div>\r\n</div>\r\n```\r\n\r\nAnd this\r\n```\r\n<div>\r\n   <ChildComponent />\r\n</div>\r\n```\r\nit would render:\r\n```\r\n<div>\r\n    <span class=\"child-class\"></span>\r\n</div>\r\n```\r\n\r\nIs this even possible?","Url":"https://github.com/aspnet/Blazor/issues/1408","RelatedDescription":"Closed issue \"Detect parent from child component\" (#1408)"},{"Id":"359112289","IsPullRequest":false,"CreatedAt":"2018-09-13T15:55:07","Actor":"ruratnayake","Number":"1409","RawContent":null,"Title":"Int.Parse and Int.TryParse not working","State":"closed","Body":"I have tried to do some validation message display based on the input change on an input field. but seems Int.Parse and TryParse not Working.\r\n\r\nI have modified the counter page in the default template. Functionality should be if user enter valid integer value the increment counter value should be increased by 1. otherwise decrement by 5. no change detected on increment counter \r\n\r\n```html\r\n@page \"/counter\"\r\n\r\n<style type=\"text/css\">\r\n    .show {\r\n        color: red;\r\n        display: block;\r\n    }\r\n\r\n    .hide {\r\n        display: none;\r\n    }\r\n</style>\r\n\r\n<h1>Counter</h1>\r\n\r\n<p>valid input change count: @currentCount (intValString: @intValString)</p>\r\n\r\n<input type=\"text\" bind=\"@intValString\" onchange=\"@OnIntValueStringChange\" />\r\n<span class='@(isIntInput ? \"show\" : \"hide\")'>Enter valid integer value.</span>\r\n\r\n@functions{\r\n\r\n    int currentCount = 0;\r\n\r\n    bool isIntInput = true;\r\n\r\n    string intValString;\r\n\r\n    void OnIntValueStringChange()\r\n    {\r\n        try\r\n        {\r\n            int.Parse(intValString);\r\n            currentCount++;\r\n            isIntInput = true;\r\n        }\r\n        catch (Exception)\r\n        {\r\n            currentCount-=5;\r\n            isIntInput = false;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1409","RelatedDescription":"Closed issue \"Int.Parse and Int.TryParse not working\" (#1409)"},{"Id":"359146325","IsPullRequest":false,"CreatedAt":"2018-09-13T15:54:14","Actor":"masonwheeler","Number":"1410","RawContent":null,"Title":"Blazor rewrite rule is far too broad","State":"closed","Body":"URL rewriting is important for making a SPA work, but the standard ASP.NET rewrite rule for Blazor is completely broken.  It essentially says \"take any request that doesn't exist and treat it as a request for index.html\", which means that requests for things that *should exist but don't* also return index.html instead of generating a 404, making debugging much more difficult.\r\n\r\nWhat's needed is an analyzer that looks at the various `@page` directives and extracts a set of precise rewrite rules from them.","Url":"https://github.com/aspnet/Blazor/issues/1410","RelatedDescription":"Closed issue \"Blazor rewrite rule is far too broad\" (#1410)"},{"Id":"359596916","IsPullRequest":false,"CreatedAt":"2018-09-13T15:49:32","Actor":"samuelcavendish","Number":"1411","RawContent":null,"Title":"Blazor (Server Side) displays blank page","State":"closed","Body":"I've seen similar issues for older versions, but I think this is a different one since it only seems to affect the server side project, the client side project seems to work correctly.\r\n\r\nI followed the setup instructions from https://blazor.net/docs/get-started.html\r\nVS version 15.8.2\r\ndotnet version 2.1.402\r\n\r\nWhen clicking new project & selecting the server side project it shows the loading screen and then a blank page. There are no errors in the console. \r\n\r\nI had to make just 1 change other than the File -> New Project. Once the project was created, I went into the Server project Properties -> Debug -> Enable SSL. This was to get rid of the error in chrome about the site can't provide a secure connection. ","Url":"https://github.com/aspnet/Blazor/issues/1411","RelatedDescription":"Closed issue \"Blazor (Server Side) displays blank page\" (#1411)"},{"Id":"359815349","IsPullRequest":false,"CreatedAt":"2018-09-13T15:40:58","Actor":"stanac","Number":"1413","RawContent":null,"Title":"Blazor is not re-rendering component when field is changed by mediator message handler","State":"closed","Body":"### Functional impact\r\nDOM is not updated\r\n\r\n### Minimal repro steps\r\nRepro repo here: https://github.com/stanac/BlazorNotRendering\r\n\r\n### Expected result\r\nDOM is updated when field changes.\r\n\r\n### Actual result\r\nDOM is not updated.\r\n\r\n### Further technical details\r\nFor cross component messaging I have created a simple mediator class and registered it as singleton. One component is sending a message and the other one is handling it. Recipient of the message should update DOM from message handler, however it doesn't, field is changed (confirmed from log) however component is not re-rendered. First I thought the problem occurs when updating field from closure, however updating field from `Task.Run(() => { ... })` seams to work fine.\r\n\r\nButton component that is sending the message:\r\n```\r\n@inject Mediator _mediator\r\n\r\n<button onclick=\"@Increment\">Increment</button>\r\n\r\n@functions  {\r\n    private async Task Increment()\r\n    {\r\n        Console.WriteLine(\"Button clicked, sending int message\");\r\n        await _mediator.Invoke<int>(1);\r\n    }\r\n}\r\n```\r\n\r\nComponent that is handling the message:\r\n```\r\n@inject Mediator _mediator\r\n\r\n<span>@counter</span>\r\n\r\n@functions { \r\n\r\n    private int counter = 3;\r\n\r\n    protected override Task OnInitAsync()\r\n    {\r\n        _mediator.Subscribe<int>(msg =>\r\n        {\r\n            counter++;\r\n            Console.WriteLine($\"int message recieved, counter value: {counter}\");\r\n            return Task.FromResult(0);\r\n        });\r\n\r\n        return Task.FromResult(0);\r\n    }\r\n}\r\n```\r\n\r\nMediator (and repro project) are [here](https://github.com/stanac/BlazorNotRendering/blob/master/BlazorNotRendering.Client/Mediator.cs).\r\n\r\n\r\n### Further technical details\r\n- Blazor: 0.5.1\r\n- Firefox: 62.0\r\n- Chrome: 69.0.3497.92\r\n\r\nIs there a workaround for this? Can we force Blazor to re-render component by invoking a method from base class?","Url":"https://github.com/aspnet/Blazor/issues/1413","RelatedDescription":"Closed issue \"Blazor is not re-rendering component when field is changed by mediator message handler\" (#1413)"},{"Id":"359839838","IsPullRequest":false,"CreatedAt":"2018-09-13T15:35:49","Actor":"PascalKoe","Number":"1414","RawContent":null,"Title":"Can't create Blazor server side project with VS","State":"closed","Body":"When creating a server side application, an empty solution is presented. App and Server projects have been created as seen in the file browser but can't be opened in VS.\r\nSimilar problem happens when creating a ASP.NET Core hosted Blazor application.\r\nI have SDK version 2.1.402 installed which should be working according to the Getting Started guide.\r\n\r\n> 1.  Install the .NET Core 2.1 SDK (2.1.300 or later).\r\n\r\nI found a manual fix by editing the SDK version from 2.1.300 to 2.1.402 in the global.json file.\r\nIs this a problem of VS or the thing that creates the Blazor project?\r\nThanks","Url":"https://github.com/aspnet/Blazor/issues/1414","RelatedDescription":"Closed issue \"Can't create Blazor server side project with VS\" (#1414)"},{"Id":"358961107","IsPullRequest":true,"CreatedAt":"2018-09-13T11:44:09","Actor":"SteveSandersonMS","Number":"1407","RawContent":null,"Title":"Update linking","State":"closed","Body":"Updates to newer linker binary, plus config changes recommended by @marek-safar.","Url":"https://github.com/aspnet/Blazor/pull/1407","RelatedDescription":"Closed or merged PR \"Update linking\" (#1407)"},{"Id":"359664465","IsPullRequest":false,"CreatedAt":"2018-09-12T21:45:42","Actor":"vertonghenb","Number":"1412","RawContent":null,"Title":"Unpredictable No element is currently associated with component {ComponentId} ","State":"open","Body":"Using Blazor Server Side\r\nFrom time to time Blazor throws the following error:\r\n`No element is currently associated with component {ComponentId}`\r\n\r\nThe error is always thrown on the first load after a `StateHasChanged`, if you hard refresh the page the error doesn't happen anymore. If you remove a surrounding `<div>` from the page, the error is gone.\r\n\r\n- Is there a way to see which component has which id?\r\n- Is this a known issue?\r\n\r\nFor me this is quite vague and it happends for no certain reason, only from time to time.","Url":"https://github.com/aspnet/Blazor/issues/1412","RelatedDescription":"Open issue \"Unpredictable No element is currently associated with component {ComponentId} \" (#1412)"},{"Id":"358779157","IsPullRequest":false,"CreatedAt":"2018-09-11T11:02:03","Actor":"LaurenceFrost","Number":"1406","RawContent":null,"Title":"Subscribing to data changes","State":"closed","Body":"Coming from a Knockout background, I am used to creating properties (observables) in my view models, and then creating subscriptions to them so that an event automatically occurs when a value changes (regardless of how that value change happens).\r\n\r\nIs there something similar in Blazor (either already, or in the pipeline)?\r\n\r\nTaking the inbuilt \"counter\" example, I want SetDataAsChanged() to be called whenever there is a change to the currentCount variable, keeping in mind that there could be multiple ways that the variable could be updated, and I do not want to have to manually call SetDataAsChanged() each time.\r\n\r\n```\r\n@functions {\r\n    int currentCount = 0;\r\n    bool dataChanged = false;\r\n\r\n    void IncrementCount()\r\n    {\r\n        currentCount += 2;\r\n    }\r\n    \r\n    \r\n    // I want this called whenever currentCount changes (from anywhere)\r\n    void SetDataAsChanged()\r\n    {\r\n        dataChanged = true;\r\n    }\r\n}\r\n```\r\n\r\nIs this possible, or does it conflict with Blazor's design intentions?","Url":"https://github.com/aspnet/Blazor/issues/1406","RelatedDescription":"Closed issue \"Subscribing to data changes\" (#1406)"},{"Id":"358008703","IsPullRequest":true,"CreatedAt":"2018-09-11T08:55:28","Actor":"SteveSandersonMS","Number":"1396","RawContent":null,"Title":"Refactor server-side blazor startup to allow Azure SignalR. Fixes #1227","State":"closed","Body":"Fixes #1227\r\n\r\nThe main challenge with this is:\r\n(1) We don't want to take a strict dependency on the `Microsoft.Azure.SignalR` package (at least not for everyone)\r\n(2) The `Microsoft.Azure.SignalR` package uses its own custom equivalent to `MapHub` that looks the same as the standard `Microsoft.AspNetCore.SignalR` one, but actually uses different types. So if we comply with (1), then we can't possibly call `MapHub` on the developer's behalf.\r\n\r\nPossible resolutions, then:\r\n\r\n* A: Use reflection tricks and make it more magic (no thanks)\r\n* B: Have a separate `Microsoft.AspNetCore.Blazor.AzureSignalR` package that depends on `Microsoft.Azure.SignalR`\r\n* C: Let the developer call `MapHub` themselves, meaning that (a) we have to remove all the other magic from `UseServerSideBlazor` and (b) we have to make `BlazorHub` public.\r\n\r\nBetween B and C, I prefer option C because it makes us less tightly coupled to SignalR APIs, so if SignalR adds more overloads to `MapHub` or other config styles in the future, we should automatically be composable with it.\r\n\r\nThis PR implements options C.\r\n\r\n### Result\r\n\r\nThe result is that `app.UseServerSideBlazor<TClient>();` is now exactly equivalent to:\r\n\r\n```csharp\r\napp.UseSignalR(route => route.MapHub<BlazorHub>(BlazorHub.DefaultPath));\r\napp.UseBlazor<TClient>();\r\n```\r\n\r\nSo, if a developer wants, they can choose *not* to call `UseServerSideBlazor`, but rather use those two lines instead, and from there they can replace `UseSignalR` with `UseAzureSignalR` if they want.\r\n\r\nTherefore the way to use Azure SignalR with a server-side Blazor app becomes (in the server app's `Startup.cs`):\r\n\r\n```csharp\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddSignalR().AddAzureSignalR(/* optionsOrConnectionString */);\r\n            services.AddServerSideBlazor<Client.Startup>();\r\n            // ...\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            app.UseAzureSignalR(route => route.MapHub<BlazorHub>(BlazorHub.DefaultPath));\r\n            app.UseBlazor<Client.Startup>();\r\n            // ...\r\n        }\r\n    }\r\n```\r\n\r\nNote: This means that `AddSignalR` is being called twice - once by the developer manually, and once inside `AddServerSideBlazor`. @anurse, do you know if there's any problem or disadvantage with calling that twice? We can stop it if we absolutely must, but it will be easier for developers to understand this way (because it works both with and without Azure SignalR with a minimum of user code changes).\r\n\r\n### More notes, mainly for @rynowak\r\n\r\nI moved all the \"register startup actions\" logic out of `UseServerSideBlazor` and into `AddServerSideBlazor` (so that `UseServerSideBlazor` can be equivalent to the two lines above). I believe the net result is the same, and it still can be extended to support registering multiple server-side Blazor endpoints in the future (with different `TClient` values), but for now I still left it hard-coded to use `/_blazor` as the path without implementing support for configuring an alternate path.","Url":"https://github.com/aspnet/Blazor/pull/1396","RelatedDescription":"Closed or merged PR \"Refactor server-side blazor startup to allow Azure SignalR. Fixes #1227\" (#1396)"},{"Id":"358443923","IsPullRequest":true,"CreatedAt":"2018-09-11T01:59:52","Actor":"rynowak","Number":"1404","RawContent":null,"Title":"Add  Support for Templated Components","State":"closed","Body":"## Summary\r\n\r\nThis change adds support for templated components\r\n- Components can accept multiple, named child content elements as arguments\r\n- Components can render a child content that accepts a parameter\r\n- We revised the signature of `RenderFragment<T>` to be more usable\r\n\r\n**We don't yet have support for genericly typed components - that will come next.**\r\n\r\n## How to use\r\n\r\n```\r\n@* In TemplatedTable.cshtml *@\r\n@functions {\r\n    [Parameter] RenderFragment Header { get; set; }\r\n\r\n    [Parameter] RenderFragment<Item> ItemTemplate { get; set; }\r\n\r\n    [Parameter] RenderFragment Footer { get; set; }\r\n\r\n    [Parameter]\r\n    IReadOnlyList<Item> Items { get; set; }\r\n}\r\n\r\n...\r\n\r\n@* Elsewhere... *@\r\n<TemplatedTable Items=\"@Items\">\r\n    <Header><tr>...</tr></Header>\r\n    <ItemTemplate>\r\n        <tr><td>@context.Col1</td><td>@context.Col2</td><td>@context.Col3</td></tr>\r\n    </ItemTemplate>\r\n</TemplatedTable>\r\n```\r\n\r\nWhen a component defines a parameter of type `RenderFragment` or `RenderFragment<T>` (for some `T`), that parameter can have its value bound from a child element (child content). This feature now supports any number of child content parameters and they can have any valid element name as names. Previously only the name `ChildContent` could be used, and the type was always `RenderFragment` of `T`. \r\n\r\nChild content arguments can be can be passed explicitly by wrapping the content in an element that matches the parameter name. Child content arguments must be passed explicitly when passing multiple child content arguments through the component body. The tooling will help with completion for child content  both as attributes and as elements in the body.\r\n\r\nWe've improved the validation and diagnostics of these features to try and make the limitations and mistakes clear. I don't anticipate that any of these new features are breaking changes. Passing child content to the `ChildContent` parameter still works implicitly, even when the `ChildContent` parameter isn't declared.\r\n\r\n----\r\n\r\nChild content arguments of type `RenderFragment<T>` passed as elements will have an implict parameter name of `context`. You can change the parameter name if you wish:\r\n```\r\n    <ItemTemplate Context=\"item\">\r\n        <tr><td>@item.Col1</td><td>@item.Col2</td><td>@item.Col3</td></tr>\r\n    </ItemTemplate>\r\n```\r\n\r\nThe value passed through `Context` must be a static/constant value. You should see completion/intellisense inside the `<ItemTemplate>` element for `item` in this example.\r\n\r\n----\r\n\r\nAdditionally, we've changed the siganture of `RenderFragment<T>` to be more usable. Now a `RenderFragment<T>` will return a `RenderFragment` when evaluated. This makes defining templates using the existing Razor syntax more natural.\r\n\r\n```\r\n@{\r\n    RenderFragment t1 = @<div>...</div>;\r\n    RenderFragment<Person> t2 = (person) => @<div>...</div>;\r\n}\r\n```\r\n\r\nWhen using a `RenderFragment<T>` with Razor templates, you need to define the parameter name yourself. \r\n\r\n\r\n## Notes\r\n- It's probably best to look at this commit by commit. As part of this work I reorganized and de-duplicated a bunch of the baseline tests.\r\n- There is an issue with child content argument completion when the child content parameter name is the same as an HTML element. The editor will complete it as lowercase.","Url":"https://github.com/aspnet/Blazor/pull/1404","RelatedDescription":"Closed or merged PR \"Add  Support for Templated Components\" (#1404)"},{"Id":"358434078","IsPullRequest":false,"CreatedAt":"2018-09-11T01:19:54","Actor":"StingyJack","Number":"1403","RawContent":null,"Title":"\"MonoTouch does not support dynamic proxy code generation.\" when trying to call existing services using existing controllers.","State":"closed","Body":"I made a solution with the Blazor getting started project. It ran, so I added a login page and the interactivity with the UI seems correct when running it. I then tried to extend it a little bit by adding three projects to the solution. \r\n\r\n- a netFx 4.6.2 library for common objects and service contracts. \r\n- a netFx 4.6.2 library for page controllers/service ChannelFactory/ClientBase's. This refs the common library\r\n- a netFx 4.6.2 Asp.net web application with a single Wcf AuthService.svc. This refs the common library\r\n\r\nOnly the things to support attempting a user login are present. The method signatures in the controllers and services are simple `AuthResult AttemptUserAuth(string username, string password);` where `AuthResult` has an `IsAuthed` bool property and a few string properties.  Using a console application I can ref the two libraries and successfully make calls to the AuthService.svc.  If I try to wire in the same assemblies into the Blazor project, when it calls the wcf service I get the error in the title.\r\n\r\nI found a [suggestion](https://stackoverflow.com/questions/10054581/monotouch-wcf-how-to-consume-the-wcf-service-without-svcutil) to override the ChannelBase for the ClientBase, but that didnt work as-is because ChannelBase has no `Invoke` method, only the `Begin/EndInvoke` pair. When I tried to use those I would get only null reference exceptions. \r\n\r\nKeeping the arrangement of libraries and the existing wcf services is critical to the story, as there are a few hundred projects and a few million lines of code invested in that stack type and there is no financial benefit to just changing from the wcf/xml/soap to rest/json. However, there is as much leeway as code generation can permit, I just cant find a working pattern that I can use within this \"getting started\" project.\r\n\r\nBefore I spend another afternoon trying to make this work, can someone please tell me if what I am trying to do is possible, or is going to be possible with Blazor?","Url":"https://github.com/aspnet/Blazor/issues/1403","RelatedDescription":"Closed issue \"\"MonoTouch does not support dynamic proxy code generation.\" when trying to call existing services using existing controllers.\" (#1403)"},{"Id":"358488218","IsPullRequest":true,"CreatedAt":"2018-09-10T06:44:05","Actor":"shibutamang","Number":"1405","RawContent":null,"Title":"Small tweaks to support publish","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1405","RelatedDescription":"Open PR \"Small tweaks to support publish\" (#1405)"},{"Id":"358386053","IsPullRequest":false,"CreatedAt":"2018-09-10T04:04:17","Actor":"lakani","Number":"1402","RawContent":null,"Title":"for loop only render last value","State":"closed","Body":"i've modified a littel the counter page to try how i can render array of buttons, but i got a strange behavior \r\n`\r\n`@page \"/counter\"`\r\n`\r\n<h1>Counter</h1>`\r\n\r\n`<p>Current count: @currentCount</p>`\r\n\r\n`<button class=\"btn btn-primary\" onclick=\"@IncrementCount\">Click me</button>`\r\n\r\n`<button class=\"btn btn-primary\" onclick=\"@Reset\">Reset</button>`\r\n\r\n\r\n`@for (int i = 0; i < _Sarr.Length; i++)   {`\r\n\t` <button class=\"btn btn-primary\" onclick=\"@(e => bReset( i ))\">@_Sarr[i]</button>`\r\n`}`\r\n\r\n\r\n@functions {\r\n\tint currentCount = 0;\r\n\r\n\tstring[] _Sarr = new string[] { \"one\", \"two\", \"three\" };\r\n\r\n\tvoid IncrementCount()\r\n\t{\r\n\t\tcurrentCount++;\r\n\t}\r\n\r\n\tvoid bReset(int s)\r\n\t{\r\n\t\tConsole.WriteLine(s.ToString());\r\n\t\tcurrentCount += s;\r\n\r\n\r\n\t}\r\n\r\n\tvoid Reset()\r\n\t{\r\n\t\tcurrentCount = 0;\r\n\t}\r\n}\r\n`\r\n\r\nbut whenever i click on one of the buttons in the array , s variable passed by 3\r\n\r\nam i doing someting wrong ?","Url":"https://github.com/aspnet/Blazor/issues/1402","RelatedDescription":"Closed issue \"for loop only render last value\" (#1402)"},{"Id":"358337952","IsPullRequest":false,"CreatedAt":"2018-09-09T04:51:17","Actor":"StingyJack","Number":"1401","RawContent":null,"Title":"A compatible SDK version for global.json version: [2.1.300] ... was not found","State":"closed","Body":"I was getting this when trying to follow the Getting Started guide.  I found my version number by using `dotnet --version` (it was 2.1.401) and then I replaced the 2.1.300 into the `global.json`.\r\n\r\nThe Getting Started does work at this point, are there any known problems with using a slightly later version of the dotnet SDK?","Url":"https://github.com/aspnet/Blazor/issues/1401","RelatedDescription":"Closed issue \"A compatible SDK version for global.json version: [2.1.300] ... was not found\" (#1401)"},{"Id":"358294078","IsPullRequest":false,"CreatedAt":"2018-09-08T13:09:32","Actor":"mrpmorris","Number":"1400","RawContent":null,"Title":"StateHasChanged has no effect when called from JavaScript interop","State":"open","Body":"I've uploaded a sample app here https://drive.google.com/open?id=1HnrxLNiRAbfTn3Mgwkk-pvgZeqrb7Rjb\r\n\r\n1. Run the app\r\n2. Note that the Counter is 0\r\n3. Click the button (repeatedly)\r\n4. Note it remains 0\r\n\r\nEdit index.cshtml\r\nComment out the call to StateHasChanged in OnPageLoaded\r\n\r\n1. Run the app\r\n2. Note that the Counter is 0\r\n3. Click the button (once)\r\n4. Note it changes to 2\r\n\r\nConclusion: A call from JavaScript into Blazor does not automatically update view state, but adding in StateHasChanged causes all view state to stop working from thereon in.\r\n\r\nSOURCE\r\n=====\r\n\r\n>     public static class BrowserInterop\r\n>     {\r\n>         private const string NotifyPageLoadedCallbackId = \"PeterMorris.BrowserInterop.NotifyPageLoaded\";\r\n> \r\n>         public static event EventHandler PageLoaded;\r\n> \r\n>         public static RenderFragment Initialize()\r\n>         {\r\n>             return (RenderTreeBuilder renderer) =>\r\n>             {\r\n>                 renderer.OpenElement(1, \"script\");\r\n>                 renderer.AddContent(1, GetPageLoadedScript());\r\n>                 renderer.CloseElement();\r\n>             };\r\n>         }\r\n> \r\n>         [JSInvokable(NotifyPageLoadedCallbackId)]\r\n>         public static void NotifyPageLoaded()\r\n>         {\r\n>             Console.WriteLine(\"PageLoaded!!!\");\r\n>             PageLoaded?.Invoke(null, null);\r\n>         }\r\n> \r\n>         private static string GetPageLoadedScript()\r\n>         {\r\n>             string assemblyName = typeof(BrowserInterop).Assembly.GetName().Name;\r\n> \r\n>             return \r\n>             #region JavaScript\r\n> $@\"\r\n> \t(function() {{ \r\n> \t\tDotNet.invokeMethodAsync('{assemblyName}', '{NotifyPageLoadedCallbackId}');\r\n> \t}})();\r\n> \";\r\n>             #endregion\r\n>         }\r\n>     }\r\n> \r\n\r\nMainLayout.cshtml\r\n============\r\nAt the bottom of the file add \r\n\r\n> @BrowserInterop.Initialize()\r\n\r\n\r\nIndex.cshtml\r\n========\r\n```\r\n@page \"/\"\r\n\r\nCounter value is @Count\r\n<button class=\"btn btn-primary\" onclick=\"@ButtonClick\">Click me</button>\r\n\r\n@functions\r\n{\r\n    int Count = 0;\r\n\r\n    protected override void OnInit()\r\n    {\r\n        base.OnInit();\r\n        BrowserInterop.PageLoaded += OnPageLoaded;\r\n    }\r\n\r\n    private void OnPageLoaded(object sender, EventArgs args)\r\n    {\r\n        BrowserInterop.PageLoaded -= OnPageLoaded;\r\n        Count++;\r\n        StateHasChanged();\r\n        Console.WriteLine($\"Counter is now {Count}\");\r\n    }\r\n\r\n    private void ButtonClick()\r\n    {\r\n        Count++;\r\n        StateHasChanged();\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1400","RelatedDescription":"Open issue \"StateHasChanged has no effect when called from JavaScript interop\" (#1400)"},{"Id":"358289469","IsPullRequest":false,"CreatedAt":"2018-09-08T11:59:59","Actor":"mrpmorris","Number":"1399","RawContent":null,"Title":"Blazor Language Services causing Visual Studio to crash","State":"open","Body":"When I open a Blazor project VS hangs for a while and then disappears. The next time I open it I am informed Blazor Language Services extension caused the problem.\r\n\r\nhttps://www.youtube.com/watch?v=qqbAc9Kbo3M\r\n\r\nLet me know if you need anything additional (project / logs / remote access to laptop).\r\n\r\n Update - Output from build process\r\n\r\n> Error\t\trzc generate exited with code 1.\tWebApplication22.Client\tC:\\Users\\X\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets\t184\t\r\n\r\n\r\n> 1>------ Rebuild All started: Project: WebApplication22.Shared, Configuration: Debug Any CPU ------\r\n> 1>WebApplication22.Shared -> C:\\Users\\X\\source\\repos\\WebApplication22b\\WebApplication22.Shared\\bin\\Debug\\netstandard2.0\\WebApplication22.Shared.dll\r\n> 2>------ Rebuild All started: Project: WebApplication22.Client, Configuration: Debug Any CPU ------\r\n> 2>One or more errors occurred. (Stack empty.)\r\n> 2>   at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n> 2>   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n> 2>--- End of stack trace from previous location where exception was thrown ---\r\n> 2>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n> 2>   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n> 2>   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n> 2>   at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.GenerateCode(RazorProjectEngine engine, SourceItem[] inputs)\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCore(RazorConfiguration configuration, String projectDirectory, String tagHelperManifest, List`1 sources, List`1 outputs, List`1 relativePaths)\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCoreAsync()\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.CommandBase.<ExecuteAsync>d__13.MoveNext()\r\n> 2>C:\\Users\\X\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets(184,5): error : rzc generate exited with code 1.\r\n> 2>Done building project \"WebApplication22.Client.csproj\" -- FAILED.\r\n> 3>------ Rebuild All started: Project: WebApplication22.Server, Configuration: Debug Any CPU ------\r\n> 3>WebApplication22.Server -> C:\\Users\\X\\source\\repos\\WebApplication22b\\WebApplication22.Server\\bin\\Debug\\netcoreapp2.1\\WebApplication22.Server.dll\r\n> ========== Rebuild All: 2 succeeded, 1 failed, 0 skipped ==========","Url":"https://github.com/aspnet/Blazor/issues/1399","RelatedDescription":"Open issue \"Blazor Language Services causing Visual Studio to crash\" (#1399)"},{"Id":"358126265","IsPullRequest":false,"CreatedAt":"2018-09-07T16:05:32","Actor":"GodzillaDaThrilla","Number":"1398","RawContent":null,"Title":"Sidebar auto-collapses any collapsable children on wide media - fix included","State":"open","Body":"Figured this out while trying to create an accordion on the sidebar. I found that the standard bootstrap collapse on child elements worked fine on small screens where the sidebar collapses to the top, but on large screens the accordion menu(s) would just keep re-collapsing (again, only only large screens, collapseable elements functioned normally in mobile view).\r\n\r\n### The Problem:\r\nThe problem is with the default template, specifically this in NavMenu.cshtml:\r\n![image](https://user-images.githubusercontent.com/18584301/45224021-cc842280-b2b0-11e8-9047-a30114adcc75.png)\r\nand this in site.css:\r\n![image](https://user-images.githubusercontent.com/18584301/45224090-048b6580-b2b1-11e8-9422-4b0a6cbc1327.png)\r\n\r\nThis means that the collapse prevention is inherited by all child elements on wide screens, which makes a hamburger/accordion-style menu impossible.\r\n\r\n### The Fix:\r\nAdd an arbitrary class to the HTML - I called mine navInner:\r\n![image](https://user-images.githubusercontent.com/18584301/45224401-c93d6680-b2b1-11e8-99a1-80f31b6efb68.png)\r\nThen modify the CSS so it targets only the sidebar specifically and not its children. I did this by replacing the  \".collapse\" with a combo-selector \".navInner.collapse\" :\r\n![image](https://user-images.githubusercontent.com/18584301/45224515-0dc90200-b2b2-11e8-95b2-e1b79293da91.png)\r\n\r\n### The Result:\r\n![image](https://user-images.githubusercontent.com/18584301/45230184-014ba600-b2c0-11e8-903d-d8693b762d89.png)\r\n![image](https://user-images.githubusercontent.com/18584301/45230231-24765580-b2c0-11e8-8efc-2f9138c5a060.png)\r\nHey hey, it works!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1398","RelatedDescription":"Open issue \"Sidebar auto-collapses any collapsable children on wide media - fix included\" (#1398)"},{"Id":"358069684","IsPullRequest":false,"CreatedAt":"2018-09-07T13:35:29","Actor":"SteveSandersonMS","Number":"1397","RawContent":null,"Title":"Avoid publishing _bin/asmjs/wasm directories for server-side only apps","State":"open","Body":"Currently the build/publishing process doesn't differentiate between WebAssembly and server-side Blazor apps, and hence it outputs `mono.wasm`/`mono.asm.js` and the `_bin` directory (containing client-downloadable .NET assemblies) in both cases.\r\n\r\nYou *do* want to publish those files for WebAssembly apps, but you *don't* for server-side only ones (partly because it's pointless extra stuff to publish, and partly because you might actively not want clients to be able to download the Blazor app assemblies, since you only intend to use them on the server).\r\n\r\n**Proposal**\r\n\r\n1. In the Blazor client project, add an MSBuild property like `<OutputWebAssemblyFiles>true</OutputWebAssemblyFiles>`. This will be present by default in our WebAssembly project templates, but not the server-side one. Then we change the build process so that, if this flag is not present, it does not emit the `_bin`/`asmjs`/`wasm` directories.\r\n    * Obviously this is a breaking change, but it's pretty easy for people to add this to their existing apps.\r\n    * I think it should be opt-in like this, not opt-out, because it gives people a better chance of recognizing that they even have a choice.\r\n    * Having this flag also slightly simplifies the server-side template, because it no longer has to explicitly opt out from running the linker. The linker wouldn't be run anyway if we weren't outputting the WebAssembly files.\r\n2. We can also use the `OutputWebAssemblyFiles` flag to know whether to include a list of .NET assemblies in `_framework/blazor.boot.json`, hence also solving #1233.\r\n\r\n@danroth27 / @rynowak - thoughts on this design? Any other way you'd prefer it to be configured?\r\n\r\nThe main way people could still get this wrong is by adding a new Blazor client project to an existing solution to use it as a server-executed app, but forgetting to remove the `<OutputWebAssemblyFiles>` flag. Not sure how big of an issue to consider that.","Url":"https://github.com/aspnet/Blazor/issues/1397","RelatedDescription":"Open issue \"Avoid publishing _bin/asmjs/wasm directories for server-side only apps\" (#1397)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-15T05:30:03.2808386Z","RunDurationInMilliseconds":1481}