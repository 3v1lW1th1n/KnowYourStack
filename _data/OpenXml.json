{"Data":{"Sdk":{"Events":[{"Id":"6856607708","Type":"PullRequestEvent","CreatedAt":"2017-11-15T05:04:52","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/295","RelatedDescription":"Opened pull request \"Flush package when save is called\" (#295) at OfficeDev/Open-XML-SDK","RelatedBody":"When Save is called, the underlying package is currently not flushed. This makes Save act in a weird way where you expect that the data is persisted, but it has not been. This change fixes that so saving flushes the package to whatever data source it is from.\r\n\r\nFixes #294 "},{"Id":"6855836855","Type":"IssuesEvent","CreatedAt":"2017-11-15T00:17:19","Actor":"encrypt0r","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/294","RelatedDescription":"Opened issue \"Calling Save() doesn't flush to the stream\" (#294) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI am writing a wrapper class for SpreadsheetDocument. **I would like to be able to Save the document more than once**. Currently the only way to force SpreadsheetDocument to flush to the stream is by calling Close() on it. Is there anyway to avoid that?\r\n\r\n**Information**\r\n\r\n- .NET Target: .Net Standard 2.0\r\n- DocumentFormat.OpenXml Version: 2.7.2\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace OpenXmlDemo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                var document = SpreadsheetDocument.Create(stream: stream,\r\n                                                          type: SpreadsheetDocumentType.Workbook,\r\n                                                          autoSave: true);\r\n\r\n                var workbookPart = document.AddWorkbookPart();\r\n                var workbook = workbookPart.Workbook = new Workbook();\r\n                var sheetsElement = new Sheets();\r\n                workbook.AppendChild(sheetsElement);\r\n\r\n                InsertSheet(document, workbookPart, sheetsElement, \"Sheet A\", 1);\r\n\r\n                // Save the workbook and document\r\n                workbook.Save();\r\n                document.Save();\r\n\r\n                // document.Close();\r\n\r\n                // Returns an empty array if the document isn't closed\r\n                // stream.Position = 0; // Some places suggested this, unfortunately this doesn't seem to help.\r\n                var bytes = stream.ToArray(); \r\n                File.WriteAllBytes(@\"D:\\sheet.xlsx\", bytes);\r\n            }\r\n        }\r\n\r\n        private static Sheet InsertSheet(SpreadsheetDocument doc,\r\n                                      WorkbookPart workbookpart,\r\n                                      Sheets sheetsElement,\r\n                                      string name,\r\n                                      uint id)\r\n        {\r\n            WorksheetPart newWorksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            newWorksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            string relationshipId = doc.WorkbookPart.GetIdOfPart(newWorksheetPart);\r\n\r\n            // Give the new worksheet a name.\r\n            if (string.IsNullOrEmpty(name))\r\n                name = \"Sheet\" + id;\r\n\r\n            // Append the new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet() { Id = relationshipId, SheetId = id, Name = name };\r\n            sheetsElement.AppendChild(sheet);\r\n\r\n            return sheet;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Observed**\r\n\r\nThe stream is empty.\r\n\r\n**Expected**\r\n\r\nThe stream should contain the document.\r\n"},{"Id":"6852403120","Type":"IssuesEvent","CreatedAt":"2017-11-14T12:31:14","Actor":"Saftpresse99","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/293","RelatedDescription":"Opened issue \"Print powerpoint slides with notes not working\" (#293) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nWe are making Powerpoint documents from a web application for our customers with OpenXML. On some slides we add notes. The notes are displayed on the screen, but if we try to print the slides with notes, only the notes are printed if you select \"print slides with notes\" in the print layout setting. \r\n\r\n**Information**\r\n\r\n- .NET Target: (NET Framework 4.7)\r\n- DocumentFormat.OpenXml Version: (2.5.1 or 2.7.2)\r\n\r\n**Repro**\r\n\r\nWe are using this code to create notes: https://stackoverflow.com/questions/32562130/how-to-add-notes-to-a-particular-slide-in-a-ppt \r\n\r\n**Observed**\r\n\r\nSlides not printed, only notes.\r\n\r\n**Expected**\r\n\r\nExpected behavior is print slide content and below the notes."}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"6854049048","Type":"IssuesEvent","CreatedAt":"2017-11-14T17:34:45","Actor":"MalcolmJohnston","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/191","RelatedDescription":"Opened issue \"Document Assembler: Ability to merge in whole Word Documents or other Document Assembler templates\" (#191) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Hello, \r\n\r\nI wanted to check whether the above functionality would be useful to the project.  I have not contributed to  an Open Source project before so though I would ask first before spending the time created a Pull Request etc.\r\n\r\nMy implementation is as follows;\r\n\r\n* Added two new elements Document and DocumentTemplate\r\n* These two elements share common attributes Path and Data\r\n* The Path attribute can be either a file path or XPath that retrieves a file path from the input XML\r\n* The Data attribute is intended to hold a base64 encoded string containing the Word document contents\r\n* The DocumentTemplate element also has a Select attribute so that XML data can be passed to the template\r\n\r\nWith the above in place what I do is take a two pass approach.\r\n\r\nFirstly I process the Document and DocumentTemplate elements converting all to a Document element which contains a Data attribute with the base64 encoded content of the Document or assembled DocumentTemplate.\r\n\r\nThen I have introduced a second step and as such a dependency on DocumentBuilder in DocumentAssembler.  I am not sure if this will be frowned upon or not :)\r\n\r\nThis second step is largely based on this post from Eric White;\r\n\r\nhttps://blogs.msdn.microsoft.com/ericwhite/2009/04/21/using-documentbuilder-with-content-controls-for-document-assembly/\r\n\r\nThere are some limitations in my implementation, namely that all sections need to have the same page layout.  I will also (at some point) improve it slightly so that the the Document and DocumentTemplate elements will allow the addition of Page Breaks via an attribute.  This will make the template composition in word a lot neater.\r\n\r\nAnyway, is anyone interested in this?  Or is my solution horrible!\r\n\r\nI do think that this adds a LOT of power to DocumentAssembler and has the potential to make creating complex templates files more manageable by hiding away parts of templates into sub-templates.\r\n\r\nIf there is interest from the maintainers then I will put up a Pull Request.\r\n\r\nCheers. \r\n\r\n"},{"Id":"6805442973","Type":"PullRequestEvent","CreatedAt":"2017-11-03T12:58:14","Actor":"kimsey0","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/190","RelatedDescription":"Opened pull request \"Keep WebExtensions parts\" (#190) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"A simple solution to #189 which keeps the WebExtensions parts of the first document that has any.\r\n\r\nIt could be extended to merge the WebExtensions parts of all documents. Doing so would require copying over all the WebExtension parts and merging the content of the Taskpanes part, adjusting the reference IDs."},{"Id":"6805263245","Type":"IssuesEvent","CreatedAt":"2017-11-03T12:12:00","Actor":"kimsey0","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/189","RelatedDescription":"Opened issue \"WebExtensions parts are not copied over by DocumentBuilder\" (#189) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"From Office 2013, documents can contain WebExtensions parts (also known as [Office Web Extensibility Extensions](https://msdn.microsoft.com/en-us/library/hh695336.aspx)) which can link to Office Add-ins and specify taskpanes that are to be opened.\r\n\r\nThese WebExtensions parts are currently ignored by DocumentBuilder, but could be copied over instead."},{"Id":"6780865425","Type":"IssuesEvent","CreatedAt":"2017-10-29T18:41:22","Actor":"prog-mahmoud","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/188","RelatedDescription":"Opened issue \"page-break-before not applied\" (#188) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"The tool of converting HTML to Docx supports page-break-before: always"},{"Id":"6775462736","Type":"IssuesEvent","CreatedAt":"2017-10-27T14:22:19","Actor":"vicpara","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/187","RelatedDescription":"Opened issue \"DOCX to PDF\" (#187) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Hi,\r\nI want to convert a DOCX file to PDF on any linux distribution you support. I just don't have a windows OS available. How can I do it. I've looked into the documentation and there is no trace of it.\r\n\r\nAlternatively, is there a way to say which page contains a text fragment. For example, a text fragment has been identified on page number xx from the document yy,docx?\r\n\r\nThanks"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-11-16T05:30:31.1350899Z","RunDurationInMilliseconds":1786}