{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":52,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":203,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6934538664","Type":"PullRequestEvent","CreatedAt":"2017-12-02T20:36:37","Actor":"FSou1","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15349","RelatedDescription":"Opened pull request \"Rename the method FloorLog2 to be more clear & fix spelling (#25335)\" (#15349) at dotnet/coreclr","RelatedBody":""},{"Id":"6934537292","Type":"PullRequestEvent","CreatedAt":"2017-12-02T20:35:45","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15346","RelatedDescription":"Merged pull request \"Update CoreClr, PgoData to preview1-26002-02, master-20171202-0035, respectively (master)\" (#15346) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6933389646","Type":"IssuesEvent","CreatedAt":"2017-12-02T06:12:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7889","RelatedDescription":"Closed issue \"dotnet add package String reference error\" (#7889) at dotnet/cli","RelatedBody":"_From @gregdegruy on October 10, 2017 21:12_\n\n# String reference error\r\n\r\nNotice how there is no proper string replacement done below.\r\n```\r\nError while adding package '{0}' to project '{1}'\r\n```\r\n\r\nWould like to help fix, but not sure where the repo or if it is open source for the ERROR handling in the dotnet CLI.\r\n\r\n## Error\r\n```\r\nC:\\GitHub\\_mr.robot\\DYN.Gamification\\DYN.Gamification [master ≡ +2 ~2 -0 !]> dotnet add package Microsoft.CrmSdk.CoreAssemblies --version 8.2.0.2\r\n  Writing C:\\Users\\grdegr\\AppData\\Local\\Temp\\tmp399F.tmp\r\ninfo : Adding PackageReference for package 'Microsoft.CrmSdk.CoreAssemblies' into project 'C:\\GitHub\\_mr.robot\\DYN.Gamification\\DYN.Gamification\\DYN.Gamification.csproj'.\r\nerror: Error while adding package '{0}' to project '{1}'. dotnet add package command supports adding package to one project at a time. But no project was found at the project path '{0}'.\r\nC:\\GitHub\\_mr.robot\\DYN.Gamification\\DYN.Gamification [master ≡ +2 ~2 -0 !]>\r\n```\r\n\r\n\n\n_Copied from original issue: dotnet/docs#3368_"},{"Id":"6932886315","Type":"IssuesEvent","CreatedAt":"2017-12-02T00:14:07","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8130","RelatedDescription":"Closed issue \"Incremental `dotnet build` appears to be 300-400ms slower between release/2.1 and master\" (#8130) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. `build -Configuration Release` on `release/2.1` branch.  Copy that to a \"baseline\" folder\r\n2. `build -Configuration Release` on `master` branch.  copy that to a \"baseline-master\" folder\r\n\r\n\r\nUsing the above two builds, measure the time it takes to incremental `dotnet build` a project.\r\n\r\n\r\n\r\n## Expected  behavior\r\n`master` should either be the same, or faster.\r\n\r\n## Actual behavior\r\n`master` is roughly 300-400ms slower on my machine.\r\n\r\nFrom release/2.1:\r\n```\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline\\dotnet.exe build }\r\n\r\nTotalSeconds      : 2.0646977\r\n```\r\n\r\nFrom master:\r\n```\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline-master\\dotnet.exe build }\r\n\r\nTotalSeconds      : 2.3639493\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.1-preview-007224)\r\n\r\nProduct Information:\r\n Version:            2.1.1-preview-007224\r\n Commit SHA-1 hash:  68c8639f09\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   F:\\dotnet\\baseline\\sdk\\2.1.1-preview-007224\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n## Notes\r\nI compared just invoking `dotnet msbuild.dll` on the same project and I get very comparable results between the two builds.\r\n\r\nFrom release/2.1:\r\n```\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline\\dotnet.exe F:\\dotnet\\baseline\\sdk\\2.1.1-preview-007224\\MSBuild.dll }\r\n\r\nTotalSeconds      : 1.4487317\r\n```\r\n\r\nFrom master:\r\n```\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline-master\\dotnet.exe F:\\dotnet\\baseline-master\\sdk\\2.2.0-preview1-007608\\MSBuild.dll }\r\n\r\nTotalSeconds      : 1.4202424\r\n```\r\n\r\nWhich leads me to believe something in the CLI code itself changed to cause this degradation.\r\n\r\n/cc @nguerrera @livarcocc @wli3 "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6934208277","Type":"IssuesEvent","CreatedAt":"2017-12-02T16:58:57","Actor":"jeremyVignelles","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/595","RelatedDescription":"Opened issue \"Add UnmanagedType.LPUTF8Str marshalling in .net standard\" (#595) at dotnet/standard","RelatedBody":"Hi,\r\nI'm currently writing a .net standard wrapper around libvlc, and I need to marshall strings from/to UTF-8.\r\n\r\nFor that, It would be really helpful to have the `UnmanagedType.LPUTF8Str` enumeration available.\r\n\r\nFrom https://apisof.net/catalog/System.Runtime.InteropServices.UnmanagedType.LPUTF8Str, it looks like everything is there in .net core and .net framework.\r\n\r\nWould it be possible to add that UTF8 support in the upcoming releases of .net standard?"},{"Id":"6932629749","Type":"PullRequestEvent","CreatedAt":"2017-12-01T22:41:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/593","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02301-01 (master)\" (#593) at dotnet/standard","RelatedBody":""},{"Id":"6923175027","Type":"PullRequestEvent","CreatedAt":"2017-11-30T07:52:30","Actor":"wstaelens","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/594","RelatedDescription":"Opened pull request \"Update versions.md\" (#594) at dotnet/standard","RelatedBody":"quick link to .NET Framework system requirements to easily check which OS is supported."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6934904578","Type":"IssuesEvent","CreatedAt":"2017-12-03T00:39:16","Actor":"juepiezhongren","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25659","RelatedDescription":"Opened issue \"Please consider ReusableTask and ReusableValueTask\" (#25659) at dotnet/corefx","RelatedBody":"What makes reference type important is its reusability, but Task as a reference type is not designed to be reused.\r\nConsidering REST Api or RPC, the most frequent functions are to be called millions of times, if task or valueTask would be able to be reused, the time for heap allocation or stack initialization(deep copy does cost time) could be saved at somewhat degree.\r\nReusable must take some disadvantage, but just like valueTask, it could bring some goodness."},{"Id":"6934813975","Type":"IssuesEvent","CreatedAt":"2017-12-02T23:26:55","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25657","RelatedDescription":"Closed issue \"Should performance tests be included in coverage reports?\" (#25657) at dotnet/corefx","RelatedBody":"Currently they are, but I can see some downsides.\r\n\r\n1. Running in debug with the overhead of coverage being tracked doesn't give a good performance test (lack of optimisations aside, it could be measuring the time of a debug-only \"validate all items in collection\" method).\r\n2. They can be among the more long-running tests (System.Memory.Performance.Tests took over 23 minutes today) and the coverage builds are often timing out.\r\n3. They are written with measuring performance rather than correctness in mind. While coverage is like spellcheck in that it's better at telling you you've got someting wrong (spellt rong, or not covered) than got it right (spelled right rather than spilled Wright, covered with sound tests rather than covered but failing to consider permutations it can't reflect), it suggests that there is at least an attempt to confirm the correctness of a path. Anything measured for performance should also be tested for correctness, and coverage should imo reflect the latter (or if anything, reflect the two separately)."},{"Id":"6934777313","Type":"PullRequestEvent","CreatedAt":"2017-12-02T23:04:03","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25658","RelatedDescription":"Opened pull request \"System.Net.Sockets - Tests - Removed more blocking on APM tests\" (#25658) at dotnet/corefx","RelatedBody":""},{"Id":"6934555492","Type":"IssuesEvent","CreatedAt":"2017-12-02T20:46:35","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25657","RelatedDescription":"Opened issue \"Should performance tests be included in coverage reports?\" (#25657) at dotnet/corefx","RelatedBody":"Currently they are, but I can see some downsides.\r\n\r\n1. Running in debug with the overhead of coverage being tracked doesn't give a good performance test (lack of optimisations aside, it could be measuring the time of a debug-only \"validate all items in collection\" method).\r\n2. They can be among the more long-running tests (System.Memory.Performance.Tests took over 23 minutes today) and the coverage builds are often timing out.\r\n3. They are written with measuring performance rather than correctness in mind. While coverage is like spellcheck in that it's better at telling you you've got someting wrong (spellt rong, or not covered) than got it right (spelled right rather than spilled Wright, covered with sound tests rather than covered but failing to consider permutations it can't reflect), it suggests that there is at least an attempt to confirm the correctness of a path. Anything measured for performance should also be tested for correctness, and coverage should imo reflect the latter (or if anything, reflect the two separately)."},{"Id":"6934505032","Type":"PullRequestEvent","CreatedAt":"2017-12-02T20:14:43","Actor":"weitzhandler","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25656","RelatedDescription":"Closed pull request \"Added RememberMe field to NetworkCredential\" (#25656) at dotnet/corefx","RelatedBody":"See #25655."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6934781758","Type":"PullRequestEvent","CreatedAt":"2017-12-02T23:06:57","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23534","RelatedDescription":"Opened pull request \"Reduce allocations in UnboundLambda\" (#23534) at dotnet/roslyn","RelatedBody":"Fixes #23463\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"6934647283","Type":"PullRequestEvent","CreatedAt":"2017-12-02T21:42:54","Actor":"alrz","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23533","RelatedDescription":"Opened pull request \"Relax ordering constraints around 'ref' and 'partial' modifiers on type declarations\" (#23533) at dotnet/roslyn","RelatedBody":"Proposal: https://github.com/dotnet/csharplang/issues/946\r\n\r\nUndone: feature flag, tests"},{"Id":"6934480845","Type":"IssuesEvent","CreatedAt":"2017-12-02T19:59:10","Actor":"ObsidianMinor","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23532","RelatedDescription":"Opened issue \"Expression evaluator doesn't display debug type proxy members if the proxy indirectly calls Unsafe.ReadUnaligned\" (#23532) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new project\r\n2. Install System.Memory from the [dotnet.myget.org dotnet-core](https://dotnet.myget.org/F/dotnet-core/api/v3/index.json) feed\r\n3. Replace the project's code with the following:\r\n```csharp\r\nusing System;\r\nusing System.Buffers.Binary;\r\nusing System.Diagnostics;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var v = new S(10);\r\n    }\r\n}\r\n\r\n[DebuggerTypeProxy(typeof(P))]\r\nref struct S\r\n{\r\n    ReadOnlySpan<byte> _span;\r\n\r\n    public S(int i)\r\n    {\r\n        _span = new Span<int>(new[] { i }).AsBytes();\r\n    }\r\n\r\n    public int ReadInt()\r\n    {\r\n        return BinaryPrimitives.ReadMachineEndian<int>(_span);\r\n    }\r\n}\r\n\r\nclass P\r\n{\r\n    public P(S s)\r\n    {\r\n        M = s.ReadInt();\r\n    }\r\n\r\n    public int M { get; }\r\n}\r\n```\r\n4. Place a breakpoint at the end of the main method and run in debug mode\r\n\r\n**Expected Behavior**:\r\n![expected](https://user-images.githubusercontent.com/10121870/33519205-df19ad5e-d767-11e7-9723-fa978eb7f324.png)\r\n\r\n**Actual Behavior**:\r\n![actual](https://user-images.githubusercontent.com/10121870/33519212-07389d18-d768-11e7-8fb8-a7f68f3af347.png)\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6934219490","Type":"IssuesEvent","CreatedAt":"2017-12-02T17:05:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5060","RelatedDescription":"Opened issue \"Make PEVerify output useful\" (#5060) at dotnet/corert","RelatedBody":"_From @ygoe on November 10, 2015 17:45_\n\nI'm generating or manipulating assemblies at the IL level with Mono Cecil. This can lead to all sorts of errors and I use PEVerify to find them. But when the full output of PEVerify is just \"The method does not exist.\" (or whatever the text is in English) then it's not helpful at all. No token number, no affected type, no nothing. Where should I even start to look for the problem? What does the detected problem look like? Why is a method missing, who wants to have it? The program doesn't run properly and I can see where it produces wrong results, but I don't see anything strange in that area.\n\nI could provide you a broken assembly for reference but I can't upload it here.\n\n\n_Copied from original issue: dotnet/coreclr#2005_"},{"Id":"6934156820","Type":"IssuesEvent","CreatedAt":"2017-12-02T16:25:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5059","RelatedDescription":"Opened issue \"Run CoreFX tests on CoreRT\" (#5059) at dotnet/corert","RelatedBody":"We need scripts to do that easily."},{"Id":"6934131815","Type":"PullRequestEvent","CreatedAt":"2017-12-02T16:10:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5058","RelatedDescription":"Opened pull request \"Do not throw if default assembly can't be found\" (#5058) at dotnet/corert","RelatedBody":""},{"Id":"6933203604","Type":"PullRequestEvent","CreatedAt":"2017-12-02T03:27:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5057","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5057) at dotnet/corert","RelatedBody":""},{"Id":"6933203464","Type":"PullRequestEvent","CreatedAt":"2017-12-02T03:27:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5057","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5057) at dotnet/corert","RelatedBody":""},{"Id":"6933124809","Type":"PullRequestEvent","CreatedAt":"2017-12-02T02:27:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5055","RelatedDescription":"Merged pull request \"Fix a typo in type forward parser\" (#5055) at dotnet/corert","RelatedBody":"Noticed this by accident when working with some incomplete metadata.\r\n\r\n`redirectedAssembly` ended up being null and the code AV'd. I think the intent here was to check `redirectedAssembly`, not the `redirectedAssemblyName`."},{"Id":"6933124555","Type":"PullRequestEvent","CreatedAt":"2017-12-02T02:27:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5056","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5056) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6933814056","Type":"IssuesEvent","CreatedAt":"2017-12-02T12:21:22","Actor":"dustinmoris","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1788","RelatedDescription":"Opened issue \"Error FS1108: The type 'Object' is required here and is unavailable\" (#1788) at dotnet/sdk","RelatedBody":"If I pull the latest [Giraffe source code](https://github.com/dustinmoris/Giraffe) on Windows it builds totally fine, but when I pull the same code on macOS I am getting the following error:\r\n\r\n```\r\nerror FS1108: The type 'Object' is required here and is unavailable. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n```\r\n\r\nReproduction steps:\r\n\r\n1. Pull repo\r\n2. Run `./build.sh`\r\n\r\nI can fix this error by adding the following to the `Giraffe.fsproj` file:\r\n\r\n```\r\n<ItemGroup>\r\n    <Reference Include=\"netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" />\r\n</ItemGroup>\r\n```\r\n\r\n... but I don't understand why I have to do this on macOS. Shouldn't it work the same on both environments?"},{"Id":"6933471923","Type":"IssuesEvent","CreatedAt":"2017-12-02T07:27:19","Actor":"huoyaoyuan","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1787","RelatedDescription":"Opened issue \"FastUpToDate always complains not up to date\" (#1787) at dotnet/sdk","RelatedBody":"`MyProject.runtimeconfig.json` won't change if not modifying the target framework, and `FastUpToDate` says it's an output and wrote earlier than input.\r\nBy the way, the build log uses UTC time. Consider to print local time please."},{"Id":"6932225099","Type":"PullRequestEvent","CreatedAt":"2017-12-01T20:52:44","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1785","RelatedDescription":"Merged pull request \"LOC CHECKIN | dotnet/sdk-master | 20171201\" (#1785) at dotnet/sdk","RelatedBody":null},{"Id":"6932036836","Type":"PullRequestEvent","CreatedAt":"2017-12-01T20:05:16","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1786","RelatedDescription":"Merged pull request \"Updating a test helper method to use GetFullPath\" (#1786) at dotnet/sdk","RelatedBody":""},{"Id":"6931747550","Type":"PullRequestEvent","CreatedAt":"2017-12-01T18:58:15","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1786","RelatedDescription":"Opened pull request \"Updating a test helper method to use GetFullPath\" (#1786) at dotnet/sdk","RelatedBody":""},{"Id":"6929191743","Type":"PullRequestEvent","CreatedAt":"2017-12-01T09:13:53","Actor":"v-zbsail","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1785","RelatedDescription":"Opened pull request \"LOC CHECKIN | dotnet/sdk-master | 20171201\" (#1785) at dotnet/sdk","RelatedBody":null},{"Id":"6928921009","Type":"PullRequestEvent","CreatedAt":"2017-12-01T08:00:42","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1784","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1784) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171201-080040\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171201-080040 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6928920934","Type":"PullRequestEvent","CreatedAt":"2017-12-01T08:00:40","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1783","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/15.5\" (#1783) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171201-080038\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171201-080038 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6928214547","Type":"PullRequestEvent","CreatedAt":"2017-12-01T03:16:33","Actor":"wjk","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1782","RelatedDescription":"Opened pull request \"[WIP] Build time ResX code-behind generation\" (#1782) at dotnet/sdk","RelatedBody":"This is my stab at resolving #94. There are a few things to note about this PR, though:\r\n\r\n1. _This code is totally untested at this time._ I have neither written unit tests (because I have no idea how to write unit tests for this), nor tested it informally (because I don't know how to force override the SDK bundled with MSBuild/VS). Any pointers on either of these topics will be appreciated.\r\n2. As currently written this PR does not apply heuristics to determine whether or not a `*.resx` file should have its code-behind generated. In particular, localized `*.resx` files (`*.en-US.resx`, `*.fr-FR.resx`, etc) will result in multiple identical code-behinds being generated, causing double-definition errors during compile. Any pointers on a good way to avoid this would also be appreciated.\r\n3. Currently `*.resx` code-behind files will be generated before the `Compile` target runs. I am unsure if this is the correct extensibility point for this task. Also, code-behind files will not be generated during design-time builds; the project must be manually built by the user for code-behind files to be updated. I did this because I don't know a good way to rerun the generator target immediately after these files change using only MSBuild (and not any project-system code).\r\n\r\nAgain, please don't merge this until I have worked the bugs out and written some unit tests. Thanks!"},{"Id":"6927547043","Type":"IssuesEvent","CreatedAt":"2017-11-30T23:22:39","Actor":"malachib","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1781","RelatedDescription":"Opened issue \"Warning C4691 when building a C++/CLI executable\" (#1781) at dotnet/sdk","RelatedBody":"When using assemblies from NuGet, I am virtually guaranteed to encounter this warning\r\n\r\nAn easy example is when trying to use Microsoft.Extensions.Logger.  One can easily reproduce the issue with [this project](https://www.dropbox.com/s/9261ina8p4gyce1/SW-132v2.zip?dl=0)\r\n\r\nWe also [explored the issue on MSDN](https://social.msdn.microsoft.com/Forums/vstudio/en-US/fae48caa-7746-4c8f-9c44-839bd23ed128/warning-c4691-when-building-a-ccli-executable-referencing-microsoftextensionslogging-via-nuget?forum=vcgeneral)\r\n\r\nIf a) I am posting in the right place and b) you would like me to break it down more/provide more detail please let me know"},{"Id":"6927088490","Type":"IssuesEvent","CreatedAt":"2017-11-30T21:30:57","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1780","RelatedDescription":"Opened issue \"Migrating tasks from old csproj to new csproj format\" (#1780) at dotnet/sdk","RelatedBody":"_From @MNie on November 30, 2017 21:20_\n\nI'm currently in a process of migrating old csprojs to a new format. In some of them I have a msbuild task to replace app.config with app.debug/release.config (depending on build configuration).\r\nIn old csproj code to achieve that looks as follows:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n  <Target Name=\"AfterCompile\" Condition=\"Exists('App.$(Configuration).config')\">\r\n    <!--Generate transformed app config in the intermediate directory-->\r\n    <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n    <!--Force build process to use the transformed configuration file from now on.-->\r\n    <ItemGroup>\r\n      <AppConfigWithTargetPath Remove=\"App.config\" />\r\n      <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n        <TargetPath>$(TargetFileName).config</TargetPath>\r\n      </AppConfigWithTargetPath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nCurrently I have a piece of code like this which in fact doesn't work, but project compiles with it:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"AfterCompile\" AfterTargets=\"Build\">\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nSo the question is, is it supported in new csproj format? \r\nIf yes, how I could port such task(s)?\r\nIf no, would it be supported in future?\r\n\r\nOS info:\r\nVisual studio 15.4.4\r\n\r\n\r\n[msbuild issue](https://github.com/Microsoft/msbuild/issues/2746)\n\n_Copied from original issue: dotnet/project-system#3011_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":28,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":211,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-12-03T05:30:21.4604557Z","RunDurationInMilliseconds":7904}