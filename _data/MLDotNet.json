{"Data":{"GitHub":{"Issues":[{"Id":"355423058","IsPullRequest":true,"CreatedAt":"2018-08-30T04:48:06","Actor":"shauheen","Number":"775","RawContent":null,"Title":"Merge master into release/preview for 0.5","State":"open","Body":"This PR merges master into release branch for 0.5","Url":"https://github.com/dotnet/machinelearning/pull/775","RelatedDescription":"Open PR \"Merge master into release/preview for 0.5\" (#775)"},{"Id":"355404178","IsPullRequest":true,"CreatedAt":"2018-08-30T02:51:52","Actor":"briancylui","Number":"774","RawContent":null,"Title":"Fix netcoreapp3.0 errors in AVX intrinsics","State":"open","Body":"This is a small PR that fixes an error made while making changes in a previous PR - nothing fancy!  Look forward to green light.\r\n\r\ncc: @safern @eerhardt @tannergooding","Url":"https://github.com/dotnet/machinelearning/pull/774","RelatedDescription":"Open PR \"Fix netcoreapp3.0 errors in AVX intrinsics\" (#774)"},{"Id":"355399692","IsPullRequest":true,"CreatedAt":"2018-08-30T02:27:11","Actor":"eerhardt","Number":"773","RawContent":null,"Title":"Misc SubComponent removals","State":"open","Body":"Removing SubComponent usages in:\r\n\r\n* ML.Maml\r\n* ComponentCreation extension methods\r\n\r\nAfter this change the only places that use SubComponents are:\r\n\r\n1. CmdParser.cs, SubComponent.cs, and ComponentCatalog.cs (which will be the last things to be removed).\r\n2. PipelineInference (which the whole project will be removed from this repo with #689)\r\n3. EntryPoint code gen (which should no longer apply since there are no more usages of SubComponents in the API)\r\n4. Tests\r\n\r\nWorking towards #585","Url":"https://github.com/dotnet/machinelearning/pull/773","RelatedDescription":"Open PR \"Misc SubComponent removals\" (#773)"},{"Id":"355392744","IsPullRequest":false,"CreatedAt":"2018-08-30T01:46:35","Actor":"Ivanidzo4ka","Number":"772","RawContent":null,"Title":"Test system doesn't actually run in MTA apartment state","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/9258be22e3338dec18075c6e66048b1861533ec8/test/Microsoft.ML.TestFramework/BaseTestBaseline.cs#L804\r\nWe don't run tests in MTA, since for quite a while coreclr didn't support MTA.\r\n\r\nIt was fixed in https://github.com/dotnet/coreclr/pull/15652, so I think we should enable it.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/772","RelatedDescription":"Open issue \"Test system doesn't actually run in MTA apartment state\" (#772)"},{"Id":"355385749","IsPullRequest":true,"CreatedAt":"2018-08-30T01:03:43","Actor":"artidoro","Number":"771","RawContent":null,"Title":"Attribution of images in test/data/images","State":"open","Body":" Fixes #697\r\n\r\n- I added the attribution for the images located in the test/data/images folder. \r\n- I used the citation format indicated in wikipedia's \"[best practices for attributions](https://wiki.creativecommons.org/wiki/Best_practices_for_attribution#This_is_an_ideal_attribution)\" \r\n\r\nNote: I used the same readme that provides citations for the datasets located in test/data and separated it in two parts. I think it makes more sense to keep the citations for the data and images in the folder in a single file.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/771","RelatedDescription":"Open PR \"Attribution of images in test/data/images\" (#771)"},{"Id":"355285073","IsPullRequest":true,"CreatedAt":"2018-08-30T00:10:25","Actor":"eerhardt","Number":"767","RawContent":null,"Title":"Update buildtools to 3.0.0-preview1-03129-01","State":"closed","Body":"This new version has a fix for the Copyright header.\r\n\r\nFix #766\r\n\r\nNOTE: The `init-tools` changes are direct copies from `dotnet/corefx/master`.\r\n\r\nFYI - @shauheen ","Url":"https://github.com/dotnet/machinelearning/pull/767","RelatedDescription":"Closed or merged PR \"Update buildtools to 3.0.0-preview1-03129-01\" (#767)"},{"Id":"355258177","IsPullRequest":false,"CreatedAt":"2018-08-30T00:10:25","Actor":"eerhardt","Number":"766","RawContent":null,"Title":"Need to change our Copyright on NuGet packages","State":"closed","Body":"nuget.org has new requirements for Microsoft owned packages. One of these compliance checks is that the Copyright matches exactly the same string they expect. Our current Copyright does not match their exact string - see https://github.com/dotnet/buildtools/pull/2136 for the fix.","Url":"https://github.com/dotnet/machinelearning/issues/766","RelatedDescription":"Closed issue \"Need to change our Copyright on NuGet packages\" (#766)"},{"Id":"355374642","IsPullRequest":false,"CreatedAt":"2018-08-29T23:55:25","Actor":"yaeldekel","Number":"770","RawContent":null,"Title":"Bug in deserialization of ImageLoaderTransform","State":"open","Body":"When it is deserialized, the base class is deserialized first, but when it is serialized, the base class is serialized last.","Url":"https://github.com/dotnet/machinelearning/issues/770","RelatedDescription":"Open issue \"Bug in deserialization of ImageLoaderTransform\" (#770)"},{"Id":"355336508","IsPullRequest":false,"CreatedAt":"2018-08-29T21:16:03","Actor":"yaeldekel","Number":"769","RawContent":null,"Title":"Enable specifying a mapping between data view column names and TensorFlow inputs","State":"open","Body":"Currently the column names have to match the input names that are stored in the TensorFlow model. We should enable users to provide a mapping from the data view columns to the TensorFlow inputs.\r\nWe should also enable users to specify a new name for the output column.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/769","RelatedDescription":"Open issue \"Enable specifying a mapping between data view column names and TensorFlow inputs\" (#769)"},{"Id":"355335284","IsPullRequest":true,"CreatedAt":"2018-08-29T21:12:23","Actor":"Anipik","Number":"768","RawContent":null,"Title":"Ported some Sweeper tests","State":"open","Body":"- I have ported some sweeper tests\r\n- Changed the tests from mstest into Xunit\r\n- Disable LowDiscrepancyRandomSweeper tests as the class is not yet ported\r\n- skipped NelderMeadSweeper tests as not able to load this ldrandpl class\r\n- reformatted some tests to use theory\r\n\r\ncc @eerhardt @Ivanidzo4ka @danmosemsft ","Url":"https://github.com/dotnet/machinelearning/pull/768","RelatedDescription":"Open PR \"Ported some Sweeper tests\" (#768)"},{"Id":"354838907","IsPullRequest":false,"CreatedAt":"2018-08-29T16:59:43","Actor":"codemzs","Number":"758","RawContent":null,"Title":"Do not duplicate test output where there is no need to.","State":"closed","Body":"Often times Debug and Release builds have identical test outputs but we create two seperate baselines for that. We should avoid doing this and instead have a common baseline.\r\n\r\nI believe @sfilipi was going to look into this?","Url":"https://github.com/dotnet/machinelearning/issues/758","RelatedDescription":"Closed issue \"Do not duplicate test output where there is no need to.\" (#758)"},{"Id":"355228267","IsPullRequest":false,"CreatedAt":"2018-08-29T15:59:20","Actor":"yaeldekel","Number":"765","RawContent":null,"Title":"Add \"Reshape Transform\"","State":"open","Body":"We need the following functionalities in order to score TensorFlow models:\r\n\r\n1. Change the ColumnType of the column to be a different shape – this would not do anything to the data, it would just change the type of the column, to match the input dimensions the model expects (for example, if the data contains a column of length 784, and the model expects a 28x28 input).\r\n2. Actually reshape the data – (C,H,W) to (H,W,C). This transform would also have to move data around in addition to changing the ColumnType.\r\n3. Reshape data from RGB to other ordering of the channels. This transform would move the data around, but leave the ColumnType as it was.\r\n\r\n2 is already implemented as an option in the PixelExtractorTransform, and 3 could also be implemented as an option in that transform, but it may be useful to have them as a separate transform, for cases where the input data doesn't necessarily come from the PixelExtractorTransform.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/765","RelatedDescription":"Open issue \"Add \"Reshape Transform\"\" (#765)"},{"Id":"355223254","IsPullRequest":false,"CreatedAt":"2018-08-29T15:47:31","Actor":"Zruty0","Number":"764","RawContent":null,"Title":"Rework schema and metadata","State":"open","Body":"We wanted to change the following about the schema:\r\n- Formally make it a collection of 'columns'.\r\n- Turn metadata into an instance of `IRow`.\r\n- (maybe) introduce 'global metadata' in addition to 'column metadata'.\r\nBelow is the sketch of the new interface for schema: \r\n\r\n```c#\r\n    public interface ISchema : IReadOnlyList<ISchemaColumn>\r\n    {\r\n        /// <summary>\r\n        /// Dataset-wide metadata.\r\n        /// </summary>\r\n        IRow Metadata { get; }\r\n    }\r\n\r\n    public interface ISchemaColumn\r\n    {\r\n        /// <summary>\r\n        /// The name of a column. This string should always be non-empty.\r\n        /// </summary>\r\n        string Name { get; }\r\n\r\n        /// <summary>\r\n        /// The type of the column.\r\n        /// </summary>\r\n        ColumnType Type { get; }\r\n\r\n        /// <summary>\r\n        /// The metadata for a column, or <c>null</c> if this column has no metadata.\r\n        /// </summary>\r\n        IRow Metadata { get; }\r\n    }\r\n```\r\n\r\nIn addition, we might want to rework `IRow` to not include the notion of 'Row ID' and 'active columns'. Maybe this calls for another interface, like `IMovingRow` that would include these.\r\n\r\n/cc @TomFinley","Url":"https://github.com/dotnet/machinelearning/issues/764","RelatedDescription":"Open issue \"Rework schema and metadata\" (#764)"},{"Id":"354472261","IsPullRequest":false,"CreatedAt":"2018-08-29T07:36:13","Actor":"petterton","Number":"752","RawContent":null,"Title":"Early stopping in LightGbm","State":"closed","Body":"I am trying to implement a LightGbm classifier with early stopping, but I can not figure how to enter a validation set into the pipeline. I can see that EarlyStoppingRound can be set for LightGbm, so I suppose there should be a way to set a validation set. My current code:\r\n\r\n```\r\nvar pipeline = new LearningPipeline\r\n{\r\n    new TextLoader(TrainDataPath).CreateFrom<MyFeature>(useHeader: true),\r\n    new ColumnConcatenator(\"Features\", ... ),\r\n    new LightGbmBinaryClassifier\r\n    {\r\n        NumLeaves = 31, \r\n        NumBoostRound = 100, \r\n        EarlyStoppingRound = 10,\r\n    },\r\n};\r\n_model = pipeline.Train<MyFeature, MyPrediction>();\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/752","RelatedDescription":"Closed issue \"Early stopping in LightGbm\" (#752)"},{"Id":"354980619","IsPullRequest":false,"CreatedAt":"2018-08-29T03:22:28","Actor":"ericstj","Number":"763","RawContent":null,"Title":"ML.NET packages are missing third party notices","State":"open","Body":"Packages which include source / binaries that come from a third party need to be documented via a third party notices file in the root of the package.  The source repository should also contain a third party notices file in the root.\r\n\r\nFor example see https://github.com/dotnet/corefx/blob/master/THIRD-PARTY-NOTICES.TXT","Url":"https://github.com/dotnet/machinelearning/issues/763","RelatedDescription":"Open issue \"ML.NET packages are missing third party notices\" (#763)"},{"Id":"354940505","IsPullRequest":false,"CreatedAt":"2018-08-28T23:28:22","Actor":"jignparm","Number":"762","RawContent":null,"Title":"ONNX/Sonoma - upgrade to RS5 Lotus runtime and onnx 1.2 version support","State":"open","Body":"Upgrade to latest Lotus runtime and onnx model format","Url":"https://github.com/dotnet/machinelearning/issues/762","RelatedDescription":"Open issue \"ONNX/Sonoma - upgrade to RS5 Lotus runtime and onnx 1.2 version support\" (#762)"},{"Id":"354940288","IsPullRequest":false,"CreatedAt":"2018-08-28T23:27:08","Actor":"jignparm","Number":"761","RawContent":null,"Title":"ONNX/Sonoma - add API to retrieve shapes/dims of input and output layers","State":"open","Body":"Access shape info programatically instead of via user input","Url":"https://github.com/dotnet/machinelearning/issues/761","RelatedDescription":"Open issue \"ONNX/Sonoma - add API to retrieve shapes/dims of input and output layers\" (#761)"},{"Id":"354939964","IsPullRequest":false,"CreatedAt":"2018-08-28T23:25:21","Actor":"codemzs","Number":"760","RawContent":null,"Title":"Test for parquet loader because type system has changed","State":"open","Body":"We need to verify parquet loader works with the .NET standard type system.","Url":"https://github.com/dotnet/machinelearning/issues/760","RelatedDescription":"Open issue \"Test for parquet loader because type system has changed\" (#760)"},{"Id":"354885162","IsPullRequest":true,"CreatedAt":"2018-08-28T20:11:08","Actor":"Ivanidzo4ka","Number":"759","RawContent":null,"Title":"Term transformer implementation","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/759","RelatedDescription":"Open PR \"Term transformer implementation\" (#759)"},{"Id":"354811158","IsPullRequest":true,"CreatedAt":"2018-08-28T16:34:31","Actor":"codemzs","Number":"757","RawContent":null,"Title":"Add test for parquet loader.","State":"open","Body":"fixes #760 ","Url":"https://github.com/dotnet/machinelearning/pull/757","RelatedDescription":"Open PR \"Add test for parquet loader.\" (#757)"},{"Id":"354780092","IsPullRequest":false,"CreatedAt":"2018-08-28T15:18:41","Actor":"Zruty0","Number":"756","RawContent":null,"Title":"Move LearningPipeline API to a legacy namespace","State":"open","Body":"In order to free up `Microsoft.ML.*` names, we should move the auto-generated components into a different namespace, like `Microsoft.ML.Legacy`.\r\n\r\nWe also plan to deprecate the LearningPipeline API in 0.6 and remove it in 0.7.","Url":"https://github.com/dotnet/machinelearning/issues/756","RelatedDescription":"Open issue \"Move LearningPipeline API to a legacy namespace\" (#756)"},{"Id":"354454183","IsPullRequest":true,"CreatedAt":"2018-08-28T03:02:06","Actor":"codemzs","Number":"750","RawContent":null,"Title":"IDV test for DvTypes","State":"closed","Body":"This test ensures IDV file generated using DvTypes is parsed by the new type system that does not contain DvTypes.","Url":"https://github.com/dotnet/machinelearning/pull/750","RelatedDescription":"Closed or merged PR \"IDV test for DvTypes\" (#750)"},{"Id":"354528325","IsPullRequest":false,"CreatedAt":"2018-08-28T00:45:07","Actor":"Zruty0","Number":"755","RawContent":null,"Title":"SchemaShape's metadata to also be SchemaShape","State":"open","Body":"Currently, the 'metadata shape' associated with the column is a list of strings.\r\n\r\nIt is already somewhat problematic, because it doesn't have the associated types. \r\n\r\nWe should instead make it a `SchemaShape` on its own.","Url":"https://github.com/dotnet/machinelearning/issues/755","RelatedDescription":"Open issue \"SchemaShape's metadata to also be SchemaShape\" (#755)"},{"Id":"354511634","IsPullRequest":false,"CreatedAt":"2018-08-27T23:14:34","Actor":"Zruty0","Number":"754","RawContent":null,"Title":"New API for ML.NET","State":"open","Body":"We are creating a stable API that:\r\n- Uses parallel terminology with other well-known ML libraries (Spark, sklearn);\r\n- Takes advantage of strong types of .NET to shorten path to success;\r\n- Is going to be present from now till 1.0 and beyond;\r\n- Keeps simple ML scenarios concise;\r\n- Allows advanced ML scenarios: see #584 .\r\n\r\nTo that end, we are going to expose a selection of Estimators and Transformers (see #581 ) that cover existing transforms, learners and loaders. \r\n\r\nThis issue will be used to track the overall [project](https://github.com/dotnet/machinelearning/projects/9) status: what is planned to be done, what is done, etc.","Url":"https://github.com/dotnet/machinelearning/issues/754","RelatedDescription":"Open issue \"New API for ML.NET\" (#754)"},{"Id":"354504731","IsPullRequest":true,"CreatedAt":"2018-08-27T22:42:51","Actor":"Zruty0","Number":"753","RawContent":null,"Title":"Image transforms become Estimators","State":"open","Body":"Converted the following transforms to Estimators:\r\n- ImageLoader\r\n- ImageResizer\r\n- ImagePixelExtractor\r\n- ImageGrayscale\r\n","Url":"https://github.com/dotnet/machinelearning/pull/753","RelatedDescription":"Open PR \"Image transforms become Estimators\" (#753)"},{"Id":"354467929","IsPullRequest":false,"CreatedAt":"2018-08-27T20:34:25","Actor":"zeahmed","Number":"751","RawContent":null,"Title":"Add checks on input between ML.Net and Tensorflow model.","State":"open","Body":"Add checking for input name, type, size and shape between ML.Net and Tensorflow model when the transform is being created so that user is able to pass correct input.","Url":"https://github.com/dotnet/machinelearning/issues/751","RelatedDescription":"Open issue \"Add checks on input between ML.Net and Tensorflow model.\" (#751)"},{"Id":"354385595","IsPullRequest":false,"CreatedAt":"2018-08-27T16:23:18","Actor":"lefig","Number":"749","RawContent":null,"Title":"Feature Selection","State":"open","Body":"\r\nHi all,\r\n\r\nFeature selection is an important part of any ML workflow. This is required to exclude too highly correlated labels from model fitting.  So rather than a process of trial and error I was hoping to select the best training model/evaluator based on running an initial feature selection action.\r\n\r\nJudging from the API documentation this may well be possible. For instance, we have the\r\n\r\nRankerEvaluator Class  \r\n\r\nHas anyone used this or any other aspect of the framework to help identify over fitting labels or best model to run?\r\n\r\nIn python I would manually do some correlation analysis and perhaps try something like TPOT to make a recommendation but would far prefer to stay in the world of C# and this excellent tool.\r\n\r\nBest regards\r\n\r\nFig ","Url":"https://github.com/dotnet/machinelearning/issues/749","RelatedDescription":"Open issue \"Feature Selection\" (#749)"},{"Id":"354380290","IsPullRequest":false,"CreatedAt":"2018-08-27T16:07:37","Actor":"yaeldekel","Number":"748","RawContent":null,"Title":"Documentation for TensorFlow transform","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/748","RelatedDescription":"Open issue \"Documentation for TensorFlow transform\" (#748)"},{"Id":"354379467","IsPullRequest":false,"CreatedAt":"2018-08-27T16:05:23","Actor":"yaeldekel","Number":"747","RawContent":null,"Title":"Investigate using text and sparse input in TensorFlow","State":"open","Body":"We should know how TF handles text inputs, and whether it supports sparse inputs.","Url":"https://github.com/dotnet/machinelearning/issues/747","RelatedDescription":"Open issue \"Investigate using text and sparse input in TensorFlow\" (#747)"},{"Id":"354379015","IsPullRequest":false,"CreatedAt":"2018-08-27T16:03:58","Actor":"yaeldekel","Number":"746","RawContent":null,"Title":"Enable specifying order of channels in Pixel Extractor","State":"open","Body":"TensorFlow models can have different ordering of the channels. ML.NET currently only supports specifying channel first/last, but not the order.","Url":"https://github.com/dotnet/machinelearning/issues/746","RelatedDescription":"Open issue \"Enable specifying order of channels in Pixel Extractor\" (#746)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-30T05:30:31.3864857Z","RunDurationInMilliseconds":917}