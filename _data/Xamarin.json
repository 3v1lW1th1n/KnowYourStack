{"Data":{"Blog":{"FeedItems":[{"Title":"Hackathon Superweapon: F# and Fabulous","PublishedOn":"2019-01-10T20:27:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, I participated in Hack for the Sea, a weekend devoted to applying tech to marine conservation. One of our local challenges was a “cross-platform mobile app for reporting marine debris.” A...","Href":"https://blog.xamarin.com/hackathon-superweapon-f-and-fabulous/","RawContent":null},{"Title":"Xamarin and .NET Community Events in January","PublishedOn":"2019-01-02T19:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s a new year with tons of new and awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page....","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-january/","RawContent":null},{"Title":"Accessing Native Features the Cross-Platform Way with Xamarin.Essentials","PublishedOn":"2018-12-19T22:46:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every mobile application requires access to native functionality. When developing native mobile apps with Xamarin, developers are able to integrate deeply into iOS and Android since Xamarin exposes...","Href":"https://blog.xamarin.com/accessing-native-features-xamarin-essentials/","RawContent":null},{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8869322649","Type":"IssuesEvent","CreatedAt":"2019-01-11T04:37:35","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2608","RelatedDescription":"Opened issue \"ActivityNotFoundException when attempting to use a new Activity and other issues with outdated AndroidManifest.xml in projects configured to use Enhanced Fast Deployment\" (#2608) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n 1. Create a new Android application project.\r\n 2. Add the following lines to the *.csproj* file to enable Enhanced Fast Deployment:\r\n\r\n    ```xml\r\n    <PropertyGroup>\r\n        <AndroidFastDeploymentType>Assemblies:Dexes</AndroidFastDeploymentType>\r\n    </PropertyGroup>\r\n    ```\r\n\r\n 3. Add an additional `Activity` subclass to the project, similar to:\r\n\r\n    ```csharp\r\n    public class SecondActivity : Activity {\r\n    \tprotected override void OnCreate (Bundle savedInstanceState)\r\n    \t{\r\n    \t\tbase.OnCreate (savedInstanceState);\r\n    \t\tSetContentView (Resource.Layout.activity_main);\r\n    \t}\r\n    }\r\n    ```\r\n\r\n 4. Choose **Debug > Start Debugging** to build, deploy, and start debugging the app.\r\n 5. Choose **Debug > Stop Debugging**.\r\n 6. Add an `[Activity]` attribute to `SecondActivity` to make the build process generate an entry for it in *AndroidManifest.xml*.\r\n 7. Add a line to start the new activity from the `MainActivity.OnCreate()` override via an `Intent`:\r\n\r\n    ```csharp\r\n    StartActivity (typeof (SecondActivity));\r\n    ```\r\n\r\n 8. Choose **Debug > Start Debugging**.\r\n\r\n### Actual Behavior\r\n\r\n```\r\nUNHANDLED EXCEPTION:\r\nAndroid.Content.ActivityNotFoundException: Unable to find explicit activity class {AndroidApp1.AndroidApp1/md559d7fc296fc238aa7bec92ba27f2cb33.SecondActivity}; have you declared this activity in your AndroidManifest.xml?\r\n```\r\n\r\nThe new activity cannot be started because the *AndroidManifest.xml* file has not been updated on-device. Indeed the timestamps on the *.apk* files in the *bin\\\\* directory show the time of the initial build from step 4 rather than the new build from step 8. \r\n\r\nIt looks like the issue might be that the `_BuildApkFastDev` target doesn't have `$(IntermediateOutputPath)android\\AndroidManifest.xml` as an input, so the target is skipped:\r\n\r\n```txt\r\n2>Target \"_BuildApkFastDev\" in file \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.Debugging.targets\" from project \"c:\\Temp\\AndroidApp1\\AndroidApp1\\AndroidApp1.csproj\" (target \"_CopyPackage\" depends on it):\r\n2>Skipping target \"_BuildApkFastDev\" because all output files are up-to-date with respect to the input files.\r\n2>Input files: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Java.Interop.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v8.1\\Mono.Android.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.Core.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.Xml.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\mscorlib.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.Net.Http.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.Runtime.Serialization.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\System.ServiceModel.Internals.dll;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Mono.Security.dll;c:\\Temp\\AndroidApp1\\AndroidApp1\\obj\\AndroidApp1.csproj.nuget.g.props;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Xaml.targets;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.targets;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.targets;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.DefaultPackageConflictOverrides.targets;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Microsoft\\NuGet\\16.0\\Microsoft.NuGet.targets;c:\\Temp\\AndroidApp1\\AndroidApp1\\obj\\AndroidApp1.csproj.nuget.g.targets;obj\\Debug\\81\\build.props;obj\\Debug\\81\\adb.props\r\n2>Output files: obj\\Debug\\81\\android\\bin\\AndroidApp1.AndroidApp1.apk\r\n2>Done building target \"_BuildApkFastDev\" in project \"AndroidApp1.csproj\".\r\n```\r\n[DiagnosticMSBuildOutput.zip](https://github.com/xamarin/xamarin-android/files/2748072/DiagnosticMSBuildOutput.zip)\r\n\r\n### Expected Behavior\r\n\r\nIf I disable Enhanced Fast Deployment and go back to classic Fast Deployment, the `_BuildApkFastDev` target *does* build in this scenario, and the new activity starts successfully.\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.0.0 Preview 2.0 [28509.60.d16.0]\r\nVisualStudio.16.IntPreview/16.0.0-pre.2.0+28509.60.d16.0\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nXamarin.Android SDK   9.1.103.6 (HEAD/1127dc3a)"},{"Id":"8869001949","Type":"PullRequestEvent","CreatedAt":"2019-01-11T02:47:26","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2607","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] designer needs full paths in libraryprojectimports.cache\" (#2607) at xamarin/xamarin-android","RelatedBody":"The Xamarin.Android designer uses the paths found in\r\n`libraryprojectimports.cache`, and recently was coming up with some\r\nodd paths in test failures:\r\n\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\obj\\Debug\\90\\lp\\2\\jl\\res\r\n\r\nLooking at the contents of `libraryprojectimports.cache`, some of the\r\npaths were no longer full paths:\r\n\r\n    <Paths>\r\n    ...\r\n      <ResolvedResourceDirectories>\r\n        <ResolvedResourceDirectory>obj\\Debug\\81\\lp\\6\\jl\\res</ResolvedResourceDirectory>\r\n        <ResolvedResourceDirectory>obj\\Debug\\81\\lp\\9\\jl\\res</ResolvedResourceDirectory>\r\n        <ResolvedResourceDirectory>obj\\Debug\\81\\lp\\11\\jl\\res</ResolvedResourceDirectory>\r\n        <ResolvedResourceDirectory>obj\\Debug\\81\\lp\\12\\jl\\res</ResolvedResourceDirectory>\r\n        <ResolvedResourceDirectory>obj\\Debug\\81\\lp\\13\\jl\\res</ResolvedResourceDirectory>\r\n        <ResolvedResourceDirectory>obj\\Debug\\81\\lp\\14\\jl\\res</ResolvedResourceDirectory>\r\n      </ResolvedResourceDirectories>\r\n    ...\r\n    </Paths>\r\n\r\nIn 02c07ed, we inadvertently lost the full paths when LINQ was\r\nremoved. Things worked fine during regular builds, but not within the\r\ncontext of the designer.\r\n\r\nChanges:\r\n\r\n- Anywhere we add to `resolvedResourceDirectories`, should use\r\n  `Path.GetFullPath`\r\n- Same with `resolvedAssetDirectories`\r\n- Fixed a place where an `assemblyDir` variable made more sense to be\r\n  named `assetsDir`."},{"Id":"8867774943","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:32:48","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2590","RelatedDescription":"Closed pull request \"[Xamarin.Android.Build.Tasks] Debug-mode linker improvements\" (#2590) at xamarin/xamarin-android","RelatedBody":"## StripEmbeddedLibraries ##\r\n\r\nI have noticed the support libraries from NuGet are fairly large. In\r\ntotal I have seen them around 8MB in size! Much of their size is not\r\nin fact managed code, but the Android resources, jar files, etc.\r\ncontained within them.\r\n\r\nFor example, if you look at the size of\r\n`__AndroidLibraryProjects__.zip` embedded in\r\nXamarin.Android.Support.v7.MediaRouter 27.0.2.1:\r\n\r\n    592534 __AndroidLibraryProjects__.zip\r\n\r\n~0.5MB in a single assembly!\r\n\r\nSo I did an experiment to run the `StripEmbeddedLibraries` linker step\r\nduring a debug build.\r\n\r\n    Before:\r\n    9.66 MB total\r\n      22064 FormsViewGroup.dll\r\n     101376 HelloForms.Android.dll\r\n       6144 HelloForms.dll\r\n      35416 Xamarin.Android.Arch.Core.Common.dll\r\n      55904 Xamarin.Android.Arch.Lifecycle.Common.dll\r\n      31840 Xamarin.Android.Arch.Lifecycle.Runtime.dll\r\n      77432 Xamarin.Android.Support.Animated.Vector.Drawable.dll\r\n     151648 Xamarin.Android.Support.Annotations.dll\r\n    1699408 Xamarin.Android.Support.Compat.dll\r\n     545880 Xamarin.Android.Support.Core.UI.dll\r\n     228952 Xamarin.Android.Support.Core.Utils.dll\r\n     744528 Xamarin.Android.Support.Design.dll\r\n     409688 Xamarin.Android.Support.Fragment.dll\r\n     733280 Xamarin.Android.Support.Media.Compat.dll\r\n     322648 Xamarin.Android.Support.Transition.dll\r\n      41544 Xamarin.Android.Support.v4.dll\r\n    1995872 Xamarin.Android.Support.v7.AppCompat.dll\r\n      60504 Xamarin.Android.Support.v7.CardView.dll\r\n     780896 Xamarin.Android.Support.v7.MediaRouter.dll\r\n      68184 Xamarin.Android.Support.v7.Palette.dll\r\n     851552 Xamarin.Android.Support.v7.RecyclerView.dll\r\n      61024 Xamarin.Android.Support.Vector.Drawable.dll\r\n     673336 Xamarin.Forms.Core.dll\r\n     334416 Xamarin.Forms.Platform.Android.dll\r\n      16960 Xamarin.Forms.Platform.dll\r\n      85560 Xamarin.Forms.Xaml.dll\r\n\r\n    After:\r\n    5.60 MB total\r\n      12800 FormsViewGroup.dll\r\n     101376 HelloForms.Android.dll\r\n       6144 HelloForms.dll\r\n      16896 Xamarin.Android.Arch.Core.Common.dll\r\n      28160 Xamarin.Android.Arch.Lifecycle.Common.dll\r\n      13824 Xamarin.Android.Arch.Lifecycle.Runtime.dll\r\n      32256 Xamarin.Android.Support.Animated.Vector.Drawable.dll\r\n     118784 Xamarin.Android.Support.Annotations.dll\r\n    1142272 Xamarin.Android.Support.Compat.dll\r\n     301568 Xamarin.Android.Support.Core.UI.dll\r\n     123904 Xamarin.Android.Support.Core.Utils.dll\r\n     350208 Xamarin.Android.Support.Design.dll\r\n     231936 Xamarin.Android.Support.Fragment.dll\r\n     411136 Xamarin.Android.Support.Media.Compat.dll\r\n     137216 Xamarin.Android.Support.Transition.dll\r\n      28672 Xamarin.Android.Support.v4.dll\r\n     947200 Xamarin.Android.Support.v7.AppCompat.dll\r\n      28672 Xamarin.Android.Support.v7.CardView.dll\r\n     181248 Xamarin.Android.Support.v7.MediaRouter.dll\r\n      35328 Xamarin.Android.Support.v7.Palette.dll\r\n     497152 Xamarin.Android.Support.v7.RecyclerView.dll\r\n      20480 Xamarin.Android.Support.Vector.Drawable.dll\r\n     673336 Xamarin.Forms.Core.dll\r\n     334416 Xamarin.Forms.Platform.Android.dll\r\n      16960 Xamarin.Forms.Platform.dll\r\n      85560 Xamarin.Forms.Xaml.dll\r\n\r\nThis equates to:\r\n- 4.0 MB less assemblies shipped to the device during deployment!\r\n- 4.0 MB less assemblies loaded at startup!\r\n\r\nChanges to make this happen:\r\n\r\n- For this to work properly, I had to change `StripEmbeddedLibraries`\r\n  to operate on `Skip` assemblies. If the assembly is going to get\r\n  stripped, then its action will change to `Save`. This now means this\r\n  pass has to run *last*, so a comment seemed ideal in the list of\r\n  linker steps.\r\n\r\n### Results ###\r\n\r\nThe same \"Hello World\" Xamarin.Forms project had a minor improvement\r\nto the initial deployment:\r\n\r\n    Before:\r\n    2730 ms  InstallPackageAssemblies                   1 calls\r\n    After:\r\n    2549 ms  InstallPackageAssemblies                   1 calls\r\n\r\nSaved ~200ms during the first deployment.\r\n\r\nAnd if you review the size of the assemblies copied during\r\n`InstallPackageAssemblies`:\r\n\r\n    Before:\r\n    100% ... 10332kb of 10332kb copied\r\n    After:\r\n    100% ... 6173kb of 6173kb copied\r\n\r\nTODO: I need to measure startup time impact."},{"Id":"8867744577","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:27:02","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2606","RelatedDescription":"Opened pull request \"[WIP, C++-ification] Introducing EmbeddedAssemblies class\" (#2606) at xamarin/xamarin-android","RelatedBody":"**DO NOT MERGE**\r\n\r\nDepends on: https://github.com/xamarin/xamarin-android/pull/2599\r\n    \r\n  * removed a number of `MONO_API` functions, they don't appear to be used anywhere (were supposed to be used by Mono Unreal Engine, but we're not sure if that's the case). We can restore them if needed\r\n  * Simplified a lot of code\r\n  * Removed `printf` family calls"},{"Id":"8867667219","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:12:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2605","RelatedDescription":"Opened pull request \"Bump to xamarin/Java.Interop/master@6ce89c77\" (#2605) at xamarin/xamarin-android","RelatedBody":"Removes CS0108 warnings from `generator`-emitted code for\r\n`*Invoker.class_ref` fields and some methods.\r\n\r\nRemoves the CS0618 warning around the use of `[Obsolete]` methods."},{"Id":"8867310962","Type":"PullRequestEvent","CreatedAt":"2019-01-10T20:06:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2594","RelatedDescription":"Merged pull request \"[build] use WorkingDirectory for <GitBlame/>\" (#2594) at xamarin/xamarin-android","RelatedBody":"Downstream in monodroid, I'm getting a build failure such as:\r\n\r\n    /usr/bin/git blame \"/full/path/to/external/xamarin-android/Configuration.props\"\r\n    XAVersionInfo.targets(53,5): error MSB6006: \"git\" exited with code 128.\r\n    XAVersionInfo.targets(61,5): error MSB4044: The \"GitCommitsInRange\" task was not given a value for the required parameter \"StartCommit\".\r\n\r\nIf I run the git command manually:\r\n\r\n    fatal: not a git repository (or any of the parent directories): .git\r\n\r\nIt seems we shouldn't be using a full path here, but use\r\n`WorkingDirectory` instead? Maybe it will not work if\r\n`xamarin-android` is a submodule?\r\n\r\nThis has somehow been working in the past, so perhaps my version of\r\ngit is the cause?\r\n\r\n    $ git --version\r\n    git version 2.17.1 (Apple Git-112)"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8868685407","Type":"IssuesEvent","CreatedAt":"2019-01-11T01:10:24","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4947","RelatedDescription":"Reopened issue \"[iOS] ImageButton is half transparent when pressed\" (#4947) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn iOS, when ImageButton is in pressed state it's translucent. It should behave like on other platforms, and have a solid color.\r\n\r\nMy workaround (and probably fix):\r\nSet UIButtonType to Custom\r\nSet AdjustsImageWhenHighlighted to false\r\n\r\nCode:\r\n```\r\nusing Gemini.Changes.iOS.Renderers;\r\nusing UIKit;\r\nusing Xamarin.Forms;\r\nusing Xamarin.Forms.Platform.iOS;\r\n\r\n[assembly: ExportRenderer(typeof(ImageButton), typeof(CustomImageButtonRenderer))]\r\nnamespace Gemini.Changes.iOS.Renderers\r\n{\r\n    public class CustomImageButtonRenderer : ImageButtonRenderer\r\n    {\r\n        protected override void OnElementChanged(ElementChangedEventArgs<ImageButton> e)\r\n        {\r\n            if (Control == null)\r\n            {\r\n                SetNativeControl(UIButton.FromType(UIButtonType.Custom));\r\n                Control.AdjustsImageWhenHighlighted = false;\r\n            }\r\n\r\n            base.OnElementChanged(e);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Use any ImageButton (for  example from https://github.com/davidortinau/TheLittleThingsPlayground)\r\n2. Press ImageButton on iOS\r\n3. \r\n\r\n### Expected Behavior\r\nButton should be smaller, but color should stay the same\r\n\r\n### Actual Behavior\r\nButton is half transparent\r\n\r\n### Basic Information\r\n- Version with issue: 3.4.0.1009999, 3.4.0.1009999\r\n- Last known good version:\r\n- IDE: Visual Studio 15.9.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.1\r\n- Affected Devices: iPhone\r\n"},{"Id":"8868628957","Type":"PullRequestEvent","CreatedAt":"2019-01-11T00:53:29","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4959","RelatedDescription":"Opened pull request \"BoxView.BackgroundColor binding does not work on WPF\" (#4959) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nAs was mentioned, that BoxView works fine with **Color** but doesn't with **BackgroundColor**\r\nSet the same renderer's handler for both properties.\r\n\r\n### Issues Resolved ### \r\n- fixes #4788 \r\n\r\n### API Changes ###\r\nNone\r\n\r\n### Platforms Affected ### \r\n- WPF\r\n\r\n### Behavioral/Visual Changes ###\r\nCan update BackgroundColor with bindings\r\n\r\n### Before/After Screenshots ### \r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nTry to bind BackgroundColor of BoxView to VM's property\r\n\r\n```xml\r\n<BoxView\r\n    BackgroundColor=\"{Binding Color}\"\r\n    HeightRequest=\"100\"\r\n    WidthRequest=\"100\" />\r\n```"},{"Id":"8868556884","Type":"PullRequestEvent","CreatedAt":"2019-01-11T00:31:53","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4958","RelatedDescription":"Opened pull request \"[macOS] BoxView binding to BackgroundColor broken\" (#4958) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nForce BoxViewRenderer to redraw itself after color/corners updates\r\n\r\n### Issues Resolved ### \r\nNone\r\n\r\n### Platforms Affected ### \r\n- MacOs\r\n\r\n### Behavioral/Visual Changes ###\r\nPossible to change background color / color of boxView with bindings\r\n\r\n### Before/After Screenshots ### \r\nNot applicable\r\n\r\n### Testing Procedure ###\r\nHere is test scenario: https://github.com/Abhijit-Revamp/XamIssues\r\n\r\n"},{"Id":"8868531512","Type":"IssuesEvent","CreatedAt":"2019-01-11T00:24:28","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4274","RelatedDescription":"Closed issue \"[Android] 3.3 SR1 breaks Images on api 17 for fast renderers \" (#4274) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nThis API isn't available pre 18 so it needs a build version check\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/15f77934f672aaea05b8badddb40079ad02bfc1c/Xamarin.Forms.Platform.Android/FastRenderers/ImageRenderer.cs#L223\r\n\r\nThe behavior of setting ClippedBounds should probably be rolled into a static method so in the future when this is used it'll check for that API.  That check is already used elsewhere in the code to check the ClippedBounds\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Set the Control Gallery to use fast renderers\r\n2. Run the Control Gallery on API 17 device\r\n3.  Go to Image Gallery\r\n4. crashes\r\n\r\n### Expected Behavior\r\nShouldn't crash\r\n\r\n### Actual Behavior\r\nCurrently crashes\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.3 SR1\r\n- Last known good version: 3.3\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android:  API 17"},{"Id":"8868510677","Type":"IssuesEvent","CreatedAt":"2019-01-11T00:18:29","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4957","RelatedDescription":"Opened issue \"[iOS] Issue3652 - items readded to iOS ListView after they were removed aren't visible\" (#4957) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n![2019-01-10_17-16-50](https://user-images.githubusercontent.com/5375137/51005335-9c1cf100-14fb-11e9-83f8-a27810e3967c.gif)\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run Issue3652 \r\n2. Remove the 3 items\r\n3. click add item\r\n\r\nNotice they won't start showing up until they hit a place in the list view that has to create new cells\r\n\r\n### Expected Behavior\r\nnew items should be visible\r\n\r\n### Actual Behavior\r\nnew items aren't visible\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.5\r\n- Last known good version: 3.4\r\n- IDE:\r\n- Platform Target Frameworks: \r\n  - iOS:  12\r\n\r\n"},{"Id":"8868352478","Type":"IssuesEvent","CreatedAt":"2019-01-10T23:35:02","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4956","RelatedDescription":"Opened issue \"[iOS,Android] TabStop skips Stepper Control\" (#4956) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen tabbing over a set of controls the Stepper control will get skipped on iOS and Android. This works fine on UWP\r\n\r\nI tested this against the following PR https://github.com/xamarin/Xamarin.Forms/pull/3989\r\n\r\nAnd when I tested there being able to tab with the keyboard stopped working all together\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run Issue3872\r\n2. Tab Over controls\r\n3.  You're able to tab to each one except it will skip the stepper\r\n\r\n### Expected Behavior\r\nthe stepper should get selected\r\n\r\n### Actual Behavior\r\nthe stepper is being skipped over\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.5.0\r\n- Last known good version: Most likely never worked\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12\r\n  - Android: 9.0\r\n- Android Support Library Version: 28\r\n"},{"Id":"8868330028","Type":"PullRequestEvent","CreatedAt":"2019-01-10T23:29:13","Actor":"kvpt","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4955","RelatedDescription":"Opened pull request \"[Android] - Fix ObjectDisposedException on MasterDetailPageRenderer update\" (#4955) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nFix ObjectDisposedException, same thing as PR #4931 but for MasterDetailPage.\r\n\r\n### Issues Resolved ### \r\nWhen changing the mainPage from a MasterDetailPage sometime a ObjectDisposedException because the update is delayed and the page had changed.\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\nHave a MasterDetailPage as MainPage change it, repeat it enough times to trigger the issue\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X ] Rebased on top of the target branch at time of PR\r\n- [X ] Changes adhere to coding standard\r\n"},{"Id":"8867871694","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:51:09","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4954","RelatedDescription":"Opened pull request \"[Android] set ClipBounds to use ViewCompat.SetClipBounds\" (#4954) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n- Due to a regression modify *ImageElementManager* to use *ViewCompat.SetClipBounds* so as to not cause crashing\r\n\r\nI realize that there is a ClipBounds here in CollectionView code\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/154c2d088a385513e2819e524040b8afff8f6f7a/Xamarin.Forms.Platform.Android/CollectionView/ItemsViewRenderer.cs#L48\r\n\r\nBut CollectionView is new code that only supports >= 19 so it wouldn't set a good precedence to fix CV to be compatible pre api 19\r\n\r\n### Issues Resolved ### \r\n- fixes #4789\r\n\r\n\r\n### Platforms Affected ### \r\n- Android\r\n\r\n\r\n### Testing Procedure ###\r\nRun ImageButton Gallery on pre api 18 device\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"8867866903","Type":"IssuesEvent","CreatedAt":"2019-01-10T21:50:13","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4947","RelatedDescription":"Closed issue \"[iOS] ImageButton is half transparent when pressed\" (#4947) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn iOS, when ImageButton is in pressed state it's translucent. It should behave like on other platforms, and have a solid color.\r\n\r\nMy workaround (and probably fix):\r\nSet UIButtonType to Custom\r\nSet AdjustsImageWhenHighlighted to false\r\n\r\nCode:\r\n```\r\nusing Gemini.Changes.iOS.Renderers;\r\nusing UIKit;\r\nusing Xamarin.Forms;\r\nusing Xamarin.Forms.Platform.iOS;\r\n\r\n[assembly: ExportRenderer(typeof(ImageButton), typeof(CustomImageButtonRenderer))]\r\nnamespace Gemini.Changes.iOS.Renderers\r\n{\r\n    public class CustomImageButtonRenderer : ImageButtonRenderer\r\n    {\r\n        protected override void OnElementChanged(ElementChangedEventArgs<ImageButton> e)\r\n        {\r\n            if (Control == null)\r\n            {\r\n                SetNativeControl(UIButton.FromType(UIButtonType.Custom));\r\n                Control.AdjustsImageWhenHighlighted = false;\r\n            }\r\n\r\n            base.OnElementChanged(e);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Use any ImageButton (for  example from https://github.com/davidortinau/TheLittleThingsPlayground)\r\n2. Press ImageButton on iOS\r\n3. \r\n\r\n### Expected Behavior\r\nButton should be smaller, but color should stay the same\r\n\r\n### Actual Behavior\r\nButton is half transparent\r\n\r\n### Basic Information\r\n- Version with issue: 3.4.0.1009999, 3.4.0.1009999\r\n- Last known good version:\r\n- IDE: Visual Studio 15.9.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.1\r\n- Affected Devices: iPhone\r\n"},{"Id":"8867862906","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:49:29","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4953","RelatedDescription":"Opened pull request \"Gh4947\" (#4953) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nMakes iOS ImageButton opaque when pressed.\r\n\r\n### Issues Resolved ### \r\n- fixes #4947 \r\n### Platforms Affected ### \r\n- iOS\r\n### Testing\r\nUse update `.create-nuget.bat` to create private nuget to run AllLittleThings sample.\r\n### Before/After Screenshots ### \r\n![image](https://user-images.githubusercontent.com/4120386/50999059-65c87d00-14cd-11e9-8d5f-b7ce8331dc62.png)\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8868232225","Type":"IssuesEvent","CreatedAt":"2019-01-10T23:05:01","Actor":"bocciab","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5377","RelatedDescription":"Opened issue \"App extensions include multiple copies of the Xamarin framework\" (#5377) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Download the ExtensionSamples sample project\r\n2. Build in Debug or Release config\r\n3. Observe the file size of the resulting app bundle\r\n4. Remove references to the app extensions and rebuild\r\n5. Observe the size of the resulting app bundle\r\n\r\n### Expected Behavior\r\nShould be comparable\r\n\r\n### Actual Behavior\r\nThe final size of the app bundle with the extensions is almost 8x the bundle size without them\r\n\r\nNote: In my case, in order to get a release build to succeed, I had to remove the ShareExtension project as I just couldn't get it to take my provisioning profile. The TodayExtension and FinderSyncExtension projects were fine with it. In this config, the app bundle size with the extensions was 23.9 MB. When I removed references to the two remaining extensions it was 3.1 MB - The two extensions increased the size by 770%. I should at least think the app would be the larger portion.\r\n\r\n.Net does allow giving the runtime hints on where to look for binaries, so maybe this could be used. Clear any of the appex projects of the framework and assign a search path that points to the main bundle's MonoBundle folder?\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.7.2 (build 21)\r\nInstallation UUID: 2b97445f-3138-44e3-9acb-2ef360286f5f\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.8.0.5385\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.1\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.301\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nNot Installed\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.12 (Visual Studio Community)\r\nHash: 65ec520f\r\nBranch: d15-9\r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707020021\r\nGit revision: f1fea53df9eb0bb5890a9563c0d7ea7b03922144\r\nBuild date: 2018-12-14 18:37:35+00\r\nBuild branch: release-7.7\r\nXamarin extensions: 9c5cea335e6a9ce4ccfde31c4aa06c25a3576085\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.0\r\nDarwin 18.0.0 Darwin Kernel Version 18.0.0\r\n    Wed Aug 22 20:13:40 PDT 2018\r\n    root:xnu-4903.201.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nNuGet Package Management Extensions 0.14\r\n\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\nhttps://gist.github.com/bocciab/17e73f6b50ab16b2ab88e5265f0a208f\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\nExtensionSamples provided by VSMac team was used.\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"8867722766","Type":"PullRequestEvent","CreatedAt":"2019-01-10T21:22:59","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5376","RelatedDescription":"Opened pull request \"[mtouch] Provide a better (and single) error message when the interpreter is enabled in simulator builds.\" (#5376) at xamarin/xamarin-macios","RelatedBody":"Before\n\n```\nclang : error : no such file or directory: '/Users/poupou/git/xamarin/xamarin-macios/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/SDKs/MonoTouch.iphonesimulator.sdk/usr/lib/libmono-ee-interp.a'\nclang : error : no such file or directory: '/Users/poupou/git/xamarin/xamarin-macios/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/SDKs/MonoTouch.iphonesimulator.sdk/usr/lib/libmono-icall-table.a'\nclang : error : no such file or directory: '/Users/poupou/git/xamarin/xamarin-macios/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/SDKs/MonoTouch.iphonesimulator.sdk/usr/lib/libmono-ilgen.a'\nerror MT5209 : Native linking error : clang: error: no such file or directory: '/Users/poupou/git/xamarin/xamarin-macios/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/SDKs/MonoTouch.iphonesimulator.sdk/usr/lib/libmono-ee-interp.a'\nerror MT5209 : Native linking error : clang: error: no such file or directory: '/Users/poupou/git/xamarin/xamarin-macios/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/SDKs/MonoTouch.iphonesimulator.sdk/usr/lib/libmono-icall-table.a'\nerror MT5209 : Native linking error : clang: error: no such file or directory: '/Users/poupou/git/xamarin/xamarin-macios/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/SDKs/MonoTouch.iphonesimulator.sdk/usr/lib/libmono-ilgen.a'\nMTOUCH : error MT5202: Native linking failed. Please review the build log.\n    0 Warning(s)\n    7 Error(s)\n```\n\nAfter\n\n```\nMTOUCH : error MT0141: The interpreter is not supported in the simulator. Do not pass --interpreter when building for the simulator.\n    0 Warning(s)\n    1 Error(s)\n```"},{"Id":"8867474361","Type":"PullRequestEvent","CreatedAt":"2019-01-10T20:37:08","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5375","RelatedDescription":"Merged pull request \"Bump mono to head of 2018-08\" (#5375) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@25a8be91115 Bump CoreFX to bring a fix for #12093\n* mono/mono@29e0e642da8 [Android] Fix build with NDK r18 (#11016) (#12291)\n* mono/mono@7b44d5719eb [tests] Remove an invalid assertion on System.IO.DriveInfo\n* mono/mono@3fad9a7a1cc Update DateTimeTest.cs\n* mono/mono@6b6fd890ee7 Update mono/metadata/culture-info-tables.h\n* mono/mono@8f50f96e8f7 Add tests\n* mono/mono@1edf795ae0f ko-* specific AM/PM designators\n\nDiff: https://github.com/mono/mono/compare/9671417e2181fe01d893103843a0dfda96f9a41a...25a8be91115255341dd80ce4a225415feec46f56"},{"Id":"8867113462","Type":"PullRequestEvent","CreatedAt":"2019-01-10T19:31:32","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5328","RelatedDescription":"Merged pull request \"[d15-9][mmp] Add support for mono 5.18 by pulling in libmono-system-native.a\" (#5328) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/5324\r\n- Patch tweaked over multiple commits in master so applied directly instead of cherry-pick"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1083399709526503424","CreatedAt":"2019-01-10T16:26:34+00:00","UserScreenname":"xamarinhq","Text":"Our very first Mobile .NET #CommunityStandup will be live in about 30 minutes at 9am Pacific! @maddyleger1,… https://t.co/vmFHIKZTIt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":15,"RawContent":null},{"Id":"1080559862642282502","CreatedAt":"2019-01-02T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"It’s a new year with tons of new and awesome Xamarin and .NET Community events coming this month. Get the full list… https://t.co/ZOykEyCRBN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":22,"RawContent":null},{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":269,"FavoriteCount":119,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":154,"FavoriteCount":69,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":83,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":178,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":114,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":65,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2019-01-11T05:31:08.2579446Z","RunDurationInMilliseconds":3004}