{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10296297390","Type":"IssuesEvent","CreatedAt":"2019-08-27T17:13:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7490","RelatedDescription":"Opened issue \"[Queue-Back] Rename IPackageValidationEnqueuer.StartValidationAsync to SendMessageAsync\" (#7490) at NuGet/NuGetGallery","RelatedBody":"Now that this message can send two types of messages, the name \"StartValidationAsync\" makes less sense.\r\n\r\n/cc @agr "},{"Id":"10295980162","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:55:27","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7489","RelatedDescription":"Opened issue \"[Queue-Back] Drop queue-back messages in orchestrator if feature flag is off\" (#7489) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10295815421","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:20:12","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7475","RelatedDescription":"Closed issue \"SQLLocalDB \"too old\" - migration step requires SQL Server 2016\" (#7475) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI tried to update my local dev environment and invoked `Update-Databases.ps1` to run all migrations. Unfortunatly it failed on this migration step with `201904292139301_RemoveVulnerabilityDataFromPackageDeprecationModel` with \"unkown syntax near...\".\r\n\r\nI discovered that my localdb instance was still running on a older SQL Server 2014 version, which doesn't support the \"Drop contraint if exists\" syntax (which is lovely by the way).\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Having a old SQL instance\r\n2. Run the migrations\r\n3. Boom.\r\n\r\n### Expected behavior\r\nI deleted the instance and recreated it after some googling. Maybe the \"UpdateDatabase.ps1\" should check it and report an error? \r\nOr just put a little hint in the ReadMe? I thought about to add a note to the \"Prerequisites\" in the ReadMe. \r\nJust to be clear: If you require SQL Server 2016 this is fine - maybe it should be written down somewhere.\r\n\r\nI'm open for suggestions ;)\r\n"},{"Id":"10295814005","Type":"PullRequestEvent","CreatedAt":"2019-08-27T15:19:55","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7484","RelatedDescription":"Merged pull request \"Documenation for #7475 - SQL 2016 prerequisite\" (#7484) at NuGet/NuGetGallery","RelatedBody":"This should \"fix\" https://github.com/NuGet/NuGetGallery/issues/7475\r\n\r\nAdd a point for the SQL 2016 dependency in the readme. Nothing fancy and I'm open for wording chances ;)"},{"Id":"10294842552","Type":"PullRequestEvent","CreatedAt":"2019-08-27T12:44:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7488","RelatedDescription":"Opened pull request \"Add tracing to CSRF test and exclude non-actions\" (#7488) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2679\r\n\r\nThis helps debugging and makes the test more maintainable."},{"Id":"10294668666","Type":"PullRequestEvent","CreatedAt":"2019-08-27T12:18:16","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7480","RelatedDescription":"Merged pull request \"Add message to self service delete.\" (#7480) at NuGet/NuGetGallery","RelatedBody":"Small PR to improve the self service account delete scenario.\r\nAdds a message to the post redirect to indicate that an action was taken."},{"Id":"10293558268","Type":"IssuesEvent","CreatedAt":"2019-08-27T09:40:24","Actor":"bluedragonknight","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7487","RelatedDescription":"Opened issue \"NuGet continual prompt for credentials due to resource blocked on V3\" (#7487) at NuGet/NuGetGallery","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.2.0\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100-preview-010184\r\n\r\nVS version (if appropriate): 16.2.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 17134.984\r\n\r\nWorked before? If so, with which NuGet version: worked just yesterday now doesn't\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. right click on project -> nuget package manager\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\nApi source: https://api.nuget.org/v3/index.json\r\n\r\nWhen looking at the metadata pulled from api.nuget.org that visual studio uses only one site is being flag as malware/security risk: https://azuresearch-usnc.nuget.org/query.  What is the vetting process for the meta that is added or verifying that all site are in good standing for enterprise use?  This just started prompting for credentials today was working for the past few months.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10295503822","Type":"IssuesEvent","CreatedAt":"2019-08-27T23:23:50","Actor":"HermannGruber","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8494","RelatedDescription":"Closed issue \"Operation failed as details for project could not be loaded during test discovery\" (#8494) at NuGet/Home","RelatedBody":"I originally posted the problem in the Visual Studio forum... \r\nhttps://developercommunity.visualstudio.com/content/problem/685158/the-operation-failed-as-details-for-project-could-2.html\r\n... and they reported that they migrated it to the \"nuget forum\", but I cannot find the issue in this github project. Unfortunately, I could not ask for a link to the migrated issue, since the original issue is closed for comments. So for completeness, I copypaste my error report again here:\r\n\r\nI have a solution with a dozen projects in dotnet core 2.2 (some projects are dotnet standard). When I build or rebuild the solution, the build succeeds, but in the lowermost pane, a message appears “unexpected errors detected. See the tests output pane for details”. In the text output pane, I see the following:\r\n\r\n[09.08.2019 9:59:07.635 Warning] Failed to parse target framework ‘,Version=’ for project ‘docker-compose’.\r\n[09.08.2019 9:59:29.163 Error] System.InvalidOperationException: The operation failed as details for project NServicebusConnector could not be loaded.\r\nat NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\nat Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n— End of stack trace from previous location where exception was thrown —\r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[09.08.2019 9:59:29.163 Informational] ---------- Discovery started ----------\r\n[09.08.2019 9:59:29.166 Informational] ========== Discovery skipped: All test containers are up to date ==========\r\n[09.08.2019 9:59:29.179 Error] System.InvalidOperationException: The operation failed as details for project NServicebusConnector could not be loaded.\r\nat NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\nat Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n— End of stack trace from previous location where exception was thrown —\r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[09.08.2019 9:59:29.179 Informational] ---------- Discovery started ----------\r\n[09.08.2019 9:59:30.459 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 9:59:31.106 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 9:59:31.940 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 9:59:32.583 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 9:59:32.614 Informational] ========== Discovery finished: 314 tests found (0:00:03,4346751) ==========\r\n[09.08.2019 10:01:59.294 Error] System.InvalidOperationException: The operation failed as details for project NServicebusConnector could not be loaded.\r\nat NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<GetPackagesPathResolverAsync>d__8.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.<>c__DisplayClass7_0.<<GetInstalledPackages>b__0>d.MoveNext()\r\n— End of stack trace from previous location where exception was thrown —\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions)\r\nat NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages()\r\nat Microsoft.VisualStudio.TestWindow.Controller.UnitTestExtensionDiscoverer.GetNugetAdapters()\r\n— End of stack trace from previous location where exception was thrown —\r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[09.08.2019 10:01:59.294 Informational] ---------- Discovery started ----------\r\n[09.08.2019 10:02:00.321 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 10:02:01.020 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 10:02:01.912 Informational] NUnit Adapter 3.13.0.0: Test discovery starting\r\n[09.08.2019 10:02:02.552 Informational] NUnit Adapter 3.13.0.0: Test discovery complete\r\n[09.08.2019 10:02:02.592 Informational] \r\n========== Discovery finished: 314 tests found (0:00:03,2978137) ==========\r\n"},{"Id":"10296228823","Type":"IssuesEvent","CreatedAt":"2019-08-27T16:55:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8509","RelatedDescription":"Opened issue \"AlternatePackage does not get cleared when the package selection changes\" (#8509) at NuGet/Home","RelatedBody":"1. Add NuGet.org INT as a source - https://apiint.nugettest.org/v3/index.json\r\n1. Search for TestPackage.Deprecation\r\n1. Observe the metadata for a package like TestPackageDeprecation.Legacy\r\n![image](https://user-images.githubusercontent.com/2878341/63815938-2d09d680-c8eb-11e9-92ac-9dec9e8e2e14.png)\r\n1. Select a package with .AlternatePackage in the name (that package has an alternate package specified. \r\n1. Observe that. Notice that the alternate package is listed\r\n![image](https://user-images.githubusercontent.com/2878341/63815993-5f1b3880-c8eb-11e9-98d5-05457fb85553.png)\r\n1. Now go back to the original package such as TestPackage.Deprecation.Legacy\r\n1. Observe that the AlternatePackage is still there. \r\n![image](https://user-images.githubusercontent.com/2878341/63816045-7d813400-c8eb-11e9-9d9f-1933f8c5ca6d.png)\r\n"},{"Id":"10295952345","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:49:13","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8508","RelatedDescription":"Opened issue \"Temporary fix on patching SDK for System.Security.Cryptography.Pkcs.dll \" (#8508) at NuGet/Home","RelatedBody":"When implementing verification and signing, we bring in System.Security.Cryptography.Pkcs.dll and several dlls for netstandard2.1, which is in extension but not in netcoreapp3.0. \r\nSo we encounter an exception of System.Security.Cryptography.Pkcs.dll not found in patching tests as those dlls are not brought in in SDK.\r\nFor now, we need to temporary copy those dlls and update the deps.json files in patching.\r\nFor permeate fix, we need to wait for SDK team bring in those dlls.\r\n\r\nShould create an SDK issue and point to it. "},{"Id":"10295928721","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:44:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8507","RelatedDescription":"Opened issue \"Identify user data for HATS\" (#8507) at NuGet/Home","RelatedBody":"\r\n"},{"Id":"10295923558","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:42:59","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8506","RelatedDescription":"Opened issue \"msbuild /restore works with Packages.Config\" (#8506) at NuGet/Home","RelatedBody":"## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): msbuild\n\nNuGet version (x.x.x.xxx): current\n\n## Detailed repro steps so we can see the same problem\n\n1. Create a P.C. project\n\n2. Try to restore using `msbuild /restore`\n"},{"Id":"10295888356","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:35:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8500","RelatedDescription":"Closed issue \"Branch release-5.3 and increment dev branch version to 5.4\" (#8500) at NuGet/Home","RelatedBody":""},{"Id":"10295821033","Type":"IssuesEvent","CreatedAt":"2019-08-27T15:21:18","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8505","RelatedDescription":"Opened issue \"Solve UI delay in IconURL\" (#8505) at NuGet/Home","RelatedBody":"When loading icons, there's a lookup operation that causes an UI delay in the main thread.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/487404/"},{"Id":"10295378495","Type":"IssuesEvent","CreatedAt":"2019-08-27T14:03:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8504","RelatedDescription":"Opened issue \"PM UI - the details tab does not get loaded when on the browse tab\" (#8504) at NuGet/Home","RelatedBody":"1.Get the latest preview bits of Visual Studio. \r\n1. Open a project\r\n1. open the pm ui. \r\n1. go to the browse tab\r\n1. click on any selection\r\n1. notice that the details metadata does not get loaded. \r\n\r\nThe same doesn't happen on 16.2 latest, so it's a regression within this release. \r\n\r\n//cc @rrelyea "},{"Id":"10295265497","Type":"IssuesEvent","CreatedAt":"2019-08-27T13:46:52","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8503","RelatedDescription":"Opened issue \"Automaticaly load pdb from NuGet Cache\" (#8503) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/702430/automaticaly-load-pdb-from-nuget-cache.html)._\n\n---\n<p>Hi, it looks Visual Studio does not support loading pdb from NuGet Cache.</p><p>Is it possible to improve VS this way.</p><p>In detail: Let's e.g. assume having NuGet Package unpacked in the NuGet cache and the dll and pdb resides in the packagename\\packageverlib\\netstandard2.0 sub-folder. Visual Studio then supports probing the path to this sub-folder for loading the package source symbols. </p><p>This will help debugging experience source code with own only local stored NuGet packages.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/21/2019, 04:11 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n"},{"Id":"10295254650","Type":"IssuesEvent","CreatedAt":"2019-08-27T13:45:11","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8502","RelatedDescription":"Opened issue \"Add new Filter to update Nuget Packages to only show new prerelease when already using an old prerelease\" (#8502) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/697903/add-new-filter-to-update-nuget-packages-to-only-sh.html)._\n\n---\nCurrently on the &quot;Updates&quot; tab of &quot;Manage Nuget Packages for Solution&quot; you have a boolean choice whether to include pre-release package updates or not.\n\nI would like a 3rd filtering option, which would show pre-releases, but only for packages where there is already an older pre-release version referenced in at least one of my projects..\n\nWhen this option is on, it would not show pre-release versions if the version I'm currently referencing is a stable release.\n\nThis is for the use case where I want to check all the pre-release packages I'm using are up-to-date, but I'm not interested in trying pre-releases of packages that where the stable functionality is sufficient.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/19/2019, 01:56 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n"},{"Id":"10295151864","Type":"IssuesEvent","CreatedAt":"2019-08-27T13:29:48","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8501","RelatedDescription":"Opened issue \"NuGet Package properties Net Framework projects\" (#8501) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/705491/nuget-package-properties-net-framework-projects.html)._\n\n---\nWhen [NuGet.Build.Tasks.Pack](https://www.nuget.org/packages/NuGet.Build.Tasks.Pack/) is installed for Net Framework projects, it would be nice to have the NuGet properties tab like Net Standard/Core library projects have.  It would be nice to have this detected and displayed so that projects wouldn't have to be unloaded and edited.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/23/2019, 00:07 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n\n#### Micah Miller on 8/26/2019, 09:27 AM: \n\n(private comment, text removed)"},{"Id":"10294909524","Type":"IssuesEvent","CreatedAt":"2019-08-27T12:54:05","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8500","RelatedDescription":"Opened issue \"Branch release-5.3 and increment dev branch version to 5.4\" (#8500) at NuGet/Home","RelatedBody":""},{"Id":"10294516040","Type":"IssuesEvent","CreatedAt":"2019-08-27T11:55:54","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8499","RelatedDescription":"Closed issue \"Build:  transient NuGet.exe download failure fails Linux test suite\" (#8499) at NuGet/Home","RelatedBody":"[This line](https://github.com/NuGet/NuGet.Client/blob/34420e795cc382031b9ac6a4fc99cb168ac3351e/scripts/funcTests/runFuncTests.sh#L35) failed on Linux due to a transient failure.\r\n\r\nPartial build log:\r\n```\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\n 74 5600k   74 4191k    0     0  14.1M      0 --:--:-- --:--:-- --:--:-- 14.1M\r\ncurl: (56) GnuTLS recv error (-54): Error in the pull function.\r\n```"},{"Id":"10294408810","Type":"IssuesEvent","CreatedAt":"2019-08-27T11:40:46","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2867","RelatedDescription":"Closed issue \"Enable server side deprecation of obsolete/legacy NuGet Packages\" (#2867) at NuGet/Home","RelatedBody":"Update -12/21/2018 by anangaur: [Spec](https://github.com/NuGet/Home/wiki/Deprecate-packages)\r\n\r\n----\r\n\r\nOriginal comment by @daveaglick:\r\n\r\nAs NuGet gets older, I've noticed a pattern where some packages have a description along the lines of \"This package is old and shouldn't be used, use XYZ instead\". It seems reasonable that as projects age, their packages may change names, split, combine, etc. over time. In fact, I'm faced with doing this for a number of packages myself soon.\r\n\r\nI propose a feature where we can mark packages as deprecated or obsolete. This would be different from marking them as unlisted in that they would still be available on the gallery and would still show up in search results (perhaps with an additional GUI element to indicate the deprecated state). It would also be nice to specify which package(s) replace them and show that in the gallery and also when installing a deprecated package.\r\n"},{"Id":"10294354560","Type":"IssuesEvent","CreatedAt":"2019-08-27T11:33:00","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/352","RelatedDescription":"Closed issue \"Package Icon should be able to come from inside the package\" (#352) at NuGet/Home","RelatedBody":"Package Icon should be able to come form inside the package.\nIt should be possible to put a path in the iconUrl that is relative to the package. \n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-08-28T05:30:45.2143423Z","RunDurationInMilliseconds":2540}