{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7313922926","Type":"PullRequestEvent","CreatedAt":"2018-03-01T03:55:34","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16677","RelatedDescription":"Merged pull request \"Minor documentation improvements\" (#16677) at dotnet/coreclr","RelatedBody":""},{"Id":"7313608085","Type":"PullRequestEvent","CreatedAt":"2018-03-01T02:03:13","Actor":"nategraf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16667","RelatedDescription":"Merged pull request \"Create test for rundown events with EventPipe\" (#16667) at dotnet/coreclr","RelatedBody":"This PR adds a test checking for assembly load information in rundown events and deletes the eventpipesmoke test as it's last bit of value is replaced here\r\n\r\nRelated: #11567"},{"Id":"7313571945","Type":"PullRequestEvent","CreatedAt":"2018-03-01T01:51:34","Actor":"alfredmyers","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16677","RelatedDescription":"Opened pull request \"Minor documentation improvements\" (#16677) at dotnet/coreclr","RelatedBody":""},{"Id":"7313501616","Type":"PullRequestEvent","CreatedAt":"2018-03-01T01:28:31","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16648","RelatedDescription":"Merged pull request \"Delete unnecesary StackCrawlMarks\" (#16648) at dotnet/coreclr","RelatedBody":"CAS leftovers"},{"Id":"7313425397","Type":"PullRequestEvent","CreatedAt":"2018-03-01T01:03:25","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16676","RelatedDescription":"Opened pull request \"Remove ConvertILOnlyPE32ToPE64 and ConvertILOnlyPE32ToPE64Worker\" (#16676) at dotnet/coreclr","RelatedBody":"Remove `ConvertILOnlyPE32ToPE64` and `ConvertILOnlyPE32ToPE64Worker` dead code"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7314034324","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:42:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7783","RelatedDescription":"Closed issue \"Fail to build project with transitive project references when specifying absolute path\" (#7783) at dotnet/cli","RelatedBody":"`dotnet build` fails to build a project if\r\n\r\n* the absolute path is passed to the command \r\n* and the project has transitive project references\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nmkdir ProjectA\r\nmkdir ProjectB\r\nmkdir ProjectC\r\ncd ProjectA\r\ndotnet new classlib\r\ncd ../ProjectB/\r\ndotnet new classlib\r\ncd ../ProjectC/\r\ndotnet new classlib\r\ncd ..\r\ncode .\r\n```\r\n\r\nAdd the following reference to `ProjectA.csproj`:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectB\\ProjectB.csproj\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAdd the following reference to `ProjectB.csproj`:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectC\\ProjectC.csproj\" />\r\n  </ItemGroup>\r\n```\r\n\r\nExecute the following at the command-line:\r\n\r\n```\r\ndotnet build /absolute/path/to/ProjectA/\r\n```\r\n\r\n## Expected  behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  ProjectC -> /Users/jdoe/ProjectC/bin/Debug/netstandard2.0/ProjectC.dll\r\n  ProjectB -> /Users/jdoe/ProjectB/bin/Debug/netstandard2.0/ProjectB.dll\r\n  ProjectA -> /Users/jdoe/ProjectA/bin/Debug/netstandard2.0/ProjectA.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:06.86\r\n```\r\n\r\nThe expected behavior was present in .NET Core 1.0 and can still be found by either passing the relative path or running `dotnet build` from the project directory. e.g. the following successfully produces the above output:\r\n\r\n```\r\ndotnet build ./ProjectA/\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  ProjectC -> /Users/jdoe/ProjectC/bin/Debug/netstandard2.0/ProjectC.dll\r\n/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/jdoe/ProjectC/ProjectC.csproj'. This can indicate a missing project reference. [/Users/jdoe/ProjectB/ProjectB.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/jdoe/ProjectC/ProjectC.csproj'. This can indicate a missing project reference. [/Users/jdoe/ProjectB/ProjectB.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:04.48\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7314030063","Type":"PullRequestEvent","CreatedAt":"2018-03-01T04:40:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8701","RelatedDescription":"Merged pull request \"Update SDK to 2.1.300-preview2-62628-06\" (#8701) at dotnet/cli","RelatedBody":"Carries the fix for the preview message.\r\n\r\nFixes https://github.com/dotnet/cli/issues/8457\r\n"},{"Id":"7314030056","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:40:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8457","RelatedDescription":"Closed issue \"Add a \"high importance\" message when building using a preview version of .NET Core\" (#8457) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI have .NET Core 2.0 stable on my machine and a bunch of projects using it.\r\nI download and install .NET Core 2.1 preview.\r\nI build one of my existing .NET Core 2.0 applications.\r\n\r\n## Actual behavior\r\nApplication is built using the 2.1 Preview build tasks & targets \r\n\r\n## Expected  behavior\r\nApplication is built using the 2.1 Preview build tasks & targets\r\n+\r\nA build message (classification \"high importance\") let's me know that I'm building the application using preview build tasks & targets. This message includes a link that points to documentation explaining the finer details.\r\n\r\n## Comment\r\nThis isn't really about expected vs not-expected behavior. It's more about being transparent and not surprising anyone. Some will expect the application to build using the 2.1 preview build tasks & targets and that's great. This is about giving the people who didn't expect that an opportunity to learn that's what's happening.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7313907574","Type":"IssuesEvent","CreatedAt":"2018-03-01T03:49:29","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8705","RelatedDescription":"Closed issue \"Cannot create tool with P2P using dotnet pack\" (#8705) at dotnet/cli","RelatedBody":"fail with \r\n`/usr/local/share/dotnet/sdk/2.1.300-preview1-008162/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): Could not find a part of the path '/Users/williamli/Downloads/testp2p/leaf/bin/Debug/netcoreapp2.1/publish'. [/Users/williamli/Downloads/testp2p/main/main.csproj]`\r\n\r\n_Copied from original issue: dotnet/sdk#1998_"},{"Id":"7313719720","Type":"PullRequestEvent","CreatedAt":"2018-03-01T02:40:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8710","RelatedDescription":"Opened pull request \"WIP Do not use GetCurrentDirectory in test\" (#8710) at dotnet/cli","RelatedBody":""},{"Id":"7313614541","Type":"PullRequestEvent","CreatedAt":"2018-03-01T02:05:24","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8704","RelatedDescription":"Merged pull request \"ingest runtime Rpm agnostic and produce Rpm agnostic packages\" (#8704) at dotnet/cli","RelatedBody":"The previous PR https://github.com/dotnet/cli/pull/8689 is having strange test failure. We decide to check in with the walkaround and create a separate issue to investigate. The previous branch has investigation logging logic. So I branched out a clean one\r\n\r\n-------------\r\nthis RP is built on top of #8625. I think it is better to create a different PR\r\n\r\nThe above insertion failed due to CLI cannot ingest runtime RPM agnostic packages. After this change, CLI will produce RPM agnostic packages as well.\r\n\r\nexample file name dotnet-sdk-2.1.300-preview2-008268-x64.rpm\r\ncc @leecow\r\ncc @dagood after this change version page need to change as well. Basically, cli rpm will look the same as cli deb"},{"Id":"7313358999","Type":"IssuesEvent","CreatedAt":"2018-03-01T00:42:38","Actor":"KathleenDollard","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8709","RelatedDescription":"Opened issue \"Add a space when instructing people how to call dotnet global tools\" (#8709) at dotnet/cli","RelatedBody":"\r\n \r\n# Steps to reproduce\r\n\r\nInstall a global tool that is prefixed with dotnet.\r\n\r\n## Expected  behavior\r\n\r\nThe installation succeeded. If there are no further instructions, you can type the following command\r\nin shell directly to invoke: dotnet user-secrets\r\n\r\n## Actual behavior\r\n\r\nThe installation succeeded. If there are no further instructions, you can type the following command\r\nin shell directly to invoke: dotnet-user-secrets\r\n\r\nNote that there is a dash following dotnet instead of a space, although the user should type with a space. \r\n \r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7312972124","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:52:10","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8708","RelatedDescription":"Opened pull request \"Update 2.1 test templates to use the 15.7 preview 1 test SDK\" (#8708) at dotnet/cli","RelatedBody":"Carries the update made by @abhishkk in dotnet/templating#1433"},{"Id":"7312966915","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:50:55","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8707","RelatedDescription":"Opened issue \"Tool install with nuget error should not display the temp project in output\" (#8707) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nSee related issue #8698.\r\n\r\n```\r\ndotnet install tool Microsoft.Dotnet.Watcher.Tools -g\r\n```\r\n\r\n## Expected  behavior\r\n\r\nThe temp project path should not appear in the output by default:\r\n\r\n```\r\n$ dotnet install tool Microsoft.Dotnet.Watcher.Tools -g\r\nerror NU1212: Invalid project-package combination for Microsoft.DotNet.Watcher.Tools 2.0.0. DotnetToolReference project style can only contain references of the DotnetTool type\r\nThe tool package could not be restored.\r\nTool 'Microsoft.Dotnet.Watcher.Tools' failed to install.\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe temp project path appears in the output:\r\n\r\n```\r\n$ dotnet install tool Microsoft.Dotnet.Watcher.Tools -g\r\n/var/folders/rl/m1rv1rxd643gpwspqrbxy76r0000gn/T/w1heen5l.wc5/yh505uu5.u4i.csproj : error NU1212: Invalid project-package combination for Microsoft.DotNet.Watcher.Tools 2.0.0. DotnetToolReference project style can only contain references of the DotnetTool type\r\nThe tool package could not be restored.\r\nTool 'Microsoft.Dotnet.Watcher.Tools' failed to install.\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.1.300-preview2-008266)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008266\r\n Commit SHA-1 hash:  6fb919f433\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-preview2-008266/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c\r\n```\r\n\r\n\r\n\r\n"},{"Id":"7312945164","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:45:45","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8706","RelatedDescription":"Opened pull request \"Update 2.0 test templates for the 15.7 test SDK\" (#8706) at dotnet/cli","RelatedBody":"Carries the update made by @abhishkk in https://github.com/dotnet/templating/pull/1433"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7312130000","Type":"PullRequestEvent","CreatedAt":"2018-02-28T19:57:32","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/661","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02528-05 (master)\" (#661) at dotnet/standard","RelatedBody":""},{"Id":"7312017249","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:36:13","Actor":"mwilton","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/660","RelatedDescription":"Opened issue \"TimeZoneInfo for Samoa Standard Time doesn't match online documentation\" (#660) at dotnet/standard","RelatedBody":"Here are the properties of the Samoa Standard Time TimeZoneInfo object (+13):\r\n![image](https://user-images.githubusercontent.com/7872394/36808900-502351dc-1c7b-11e8-89ea-b0d9addaa71a.png)\r\n\r\nAnd here is Microsoft's online documentation (-11):\r\n![image](https://user-images.githubusercontent.com/7872394/36808960-75af3d62-1c7b-11e8-9e79-60ee13c891c5.png)\r\n\r\nWhich comes from:\r\nhttps://msdn.microsoft.com/en-us/library/ms912053(v=winembedded.10).aspx\r\n\r\n\r\n"},{"Id":"7298903116","Type":"PullRequestEvent","CreatedAt":"2018-02-26T18:24:07","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/659","RelatedDescription":"Merged pull request \"Fix typo\" (#659) at dotnet/standard","RelatedBody":""},{"Id":"7298225710","Type":"PullRequestEvent","CreatedAt":"2018-02-26T16:22:39","Actor":"elbro","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/659","RelatedDescription":"Opened pull request \"Fix typo\" (#659) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7314148346","Type":"IssuesEvent","CreatedAt":"2018-03-01T05:29:47","Actor":"camp-007","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27592","RelatedDescription":"Opened issue \"Build warnings when targeting System.* nuget packages from projects targeting .NET 4.7.1\" (#27592) at dotnet/corefx","RelatedBody":"I have a problem with a very simple repro:\r\n\r\n1) Using VS 2017 15.5.7 create a new project using the template \"Console App (.NET Framework) targeting .net 4.7.1\r\n2) Add a nuget package reference for the package \"System.Net.Http\" v4.3.3.  Use the 'packages.config' package manager format when prompted.  Several other System.* nuget package dependencies are also added.\r\n3) Compile the project.  No build errors or warnings.\r\n4) Close and re-open the solution\r\n5) Compile the project.  **Several build warnings of \"The referenced component 'System.IO' could not be found\" appear**.  Many of the references in the solution explorer appear with an exclamation mark.  The project seems to build successfully, but the warnings cause concern that something is wrong.\r\n\r\nThese build warnings don't seem like they should be expected or desirable.  Is there something obvious I'm doing wrong or misunderstanding?\r\n\r\nI do not get these build warnings if I follow all the above steps but instead target .NET 4.6.1.\r\n\r\nYou may ask why I'd want to reference System.* nuget packages when I'm targeting .NET 4.7.1.  Instead I should use the 'in box' System.* references from the .net framework.  My real problem is in trying to reference the nuget package 'IdentityModel' v3.3.1.  This brings in a dependency on the System.Net.Http nuget package (not the built in framework reference) and thus, I get these warnings.  My repro is just the basic scenario of directly referencing the System.Net.Http nuget package, but in my case I want to use IdentityModel and don't have any choice or control over the dependencies.\r\n\r\nIdentityModel is part of the popular \"Identity Server\" OSS product, so I would expect my scenario to be very natural/mainstream.\r\n\r\n"},{"Id":"7314132962","Type":"IssuesEvent","CreatedAt":"2018-03-01T05:23:47","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27552","RelatedDescription":"Reopened issue \"Several FileSystem and Path tests failing with latest coreclr\" (#27552) at dotnet/corefx","RelatedBody":"```\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"C:\\\\\\\\\\\\\\\\\\\", expected: \\\"C:\\\\\\\\\\\") [FAIL]\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:                    ↓ (pos 3)\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Expected: C:\\\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Actual:   C:\\\\\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:                    ↑ (pos 3)\r\n2018-02-28 13:24:45,135: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"C:\\\\\\\\\\\\\\\\foo2\\\", expected: \\\"C:\\\\\\\\\\\") [FAIL]\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:                    ↓ (pos 3)\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Expected: C:\\\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Actual:   C:\\\\\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:                    ↑ (pos 3)\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,244: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"\\\\\\\\\\\\\\\\test\\\\\\\\unc\\\\\\\\path\\\\\\\\to\\\\\\\\something\\\", expected: \\\"\\\\\\\\\\\\\\\\test\\\\\\\\unc\\\") [FAIL]\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                           ↓ (pos 10)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\test\\unc\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\test\\unc\\\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                           ↑ (pos 10)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\\\\\\c\\\\\\\\d\\\\\\\\e\\\", expected: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\") [FAIL]\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\a\\b\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\a\\b\\\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\\\\\\\\\", expected: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\") [FAIL]\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\a\\b\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\a\\b\\\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\test\\\\\\\\unc\\\\\\\\path\\\\\\\\to\\\\\\\\something\\\", expected: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\test\\\\\\\\unc\\\") [FAIL]\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                                 ↓ (pos 16)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\?\\UNC\\test\\unc\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\?\\UNC\\test\\unc\\\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:                                 ↑ (pos 16)\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,260: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Span(value: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\a\\\\\\\\b2\\\\\\\\\\\", expected: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\a\\\\\\\\b2\\\") [FAIL]\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↓ (pos 12)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\?\\UNC\\a\\b2\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\?\\UNC\\a\\b2\\\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↑ (pos 12)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.netcoreapp.cs(17,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Span(String value, String expected)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \\\"\\\\\\\\\\\\\\\\test\\\\\\\\unc\\\\\\\\path\\\\\\\\to\\\\\\\\something\\\", expected: \\\"\\\\\\\\\\\\\\\\test\\\\\\\\unc\\\") [FAIL]\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                           ↓ (pos 10)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\test\\unc\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\test\\unc\\\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                           ↑ (pos 10)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\\\\\\c\\\\\\\\d\\\\\\\\e\\\", expected: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\") [FAIL]\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\a\\b\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\a\\b\\\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\\\\\\\\\", expected: \\\"\\\\\\\\\\\\\\\\a\\\\\\\\b\\\") [FAIL]\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↓ (pos 5)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\a\\b\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\a\\b\\\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                      ↑ (pos 5)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\test\\\\\\\\unc\\\\\\\\path\\\\\\\\to\\\\\\\\something\\\", expected: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\test\\\\\\\\unc\\\") [FAIL]\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                                 ↓ (pos 16)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\?\\UNC\\test\\unc\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\?\\UNC\\test\\unc\\\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                                 ↑ (pos 16)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(value: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\a\\\\\\\\b2\\\\\\\\\\\", expected: \\\"\\\\\\\\\\\\\\\\?\\\\\\\\UNC\\\\\\\\a\\\\\\\\b2\\\") [FAIL]\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↓ (pos 12)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\?\\UNC\\a\\b2\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\?\\UNC\\a\\b2\\\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:                             ↑ (pos 12)\r\n2018-02-28 13:24:45,276: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:45,292: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Runtime.Extensions\\tests\\System\\IO\\PathTests_Windows.cs(48,0): at System.IO.Tests.PathTests_Windows.GetPathRoot_Windows(String value, String expected)\r\n```\r\nand\r\n```\r\n2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.FileInfo_Directory.UNCShares [FAIL]\r\n2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:                                    ↓ (pos 19)\r\n2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\Machine\\Directory\r\n2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\Machine\\Directory\\\r\n2018-02-28 13:24:34,276: INFO: proc(54): run_and_log_output: Output:                                    ↑ (pos 19)\r\n2018-02-28 13:24:34,292: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:34,401: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.IO.FileSystem\\tests\\FileInfo\\Directory.cs(55,0): at System.IO.Tests.FileInfo_Directory.UNCShares()\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:    System.IO.Tests.FileInfo_DirectoryName.UNCShares [FAIL]\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:                                    ↓ (pos 19)\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Expected: \\\\Machine\\Directory\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Actual:   \\\\Machine\\Directory\\\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:                                    ↑ (pos 19)\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2018-02-28 13:24:38,369: INFO: proc(54): run_and_log_output: Output:          D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.IO.FileSystem\\tests\\FileInfo\\Directory.cs(55,0): at System.IO.Tests.FileInfo_Directory.UNCShares()\r\n```"},{"Id":"7314004569","Type":"PullRequestEvent","CreatedAt":"2018-03-01T04:29:35","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26496","RelatedDescription":"Merged pull request \"LargeArrayBuilder<T> optimization of Add and AddRange\" (#26496) at dotnet/corefx","RelatedBody":"# Description\r\n\r\nEnabled range check elimination on array-access, and split the uncommon path to a separate non-inlining method, to make the hot path compacter.\r\n\r\nThis PR is a kind of extension to #17318\r\n\r\n# Benchmarks\r\n\r\n## Add\r\n\r\nCode for benchmark is [here](https://github.com/gfoidl/Benchmarks/blob/master/corefx/System/Collections/Generic/LargeArrayBuilder/source/LargeArrayBuilderBenchmarks/Benchmarks/AddBenchmarks.cs) and in the parent directory (two levels up).\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.12, OS=ubuntu 16.04\r\nIntel Xeon CPU 2.60GHz, 1 CPU, 4 logical cores and 2 physical cores\r\n.NET Core SDK=2.1.4\r\n  [Host]     : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT\r\n\r\n\r\n```\r\n|  Method |     Mean |    Error |   StdDev | Scaled | ScaledSD |\r\n|-------- |---------:|---------:|---------:|-------:|---------:|\r\n| Default | 432.3 us | 8.485 us | 19.67 us |   1.00 |     0.00 |\r\n|    New1 | 390.7 us | 7.880 us | 19.77 us |   0.91 |     0.06 |\r\n\r\n## AddRange\r\n\r\nCode for benchmark is [here](https://github.com/gfoidl/Benchmarks/blob/master/corefx/System/Collections/Generic/LargeArrayBuilder/source/LargeArrayBuilderBenchmarks/Benchmarks/AddRangeBenchmarks.cs) and in the parent directory (two levels up).\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.12, OS=ubuntu 16.04\r\nIntel Xeon CPU 2.60GHz, 1 CPU, 4 logical cores and 2 physical cores\r\n.NET Core SDK=2.1.4\r\n  [Host]     : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT\r\n\r\n\r\n```\r\n|  Method |     Mean |    Error |   StdDev | Scaled | ScaledSD |\r\n|-------- |---------:|---------:|---------:|-------:|---------:|\r\n| Default | 973.0 us | 19.21 us | 21.36 us |   1.00 |     0.00 |\r\n|    New1 | 842.1 us | 13.26 us | 12.41 us |   0.87 |     0.02 |\r\n|    New2 | 900.3 us | 16.75 us | 15.67 us |   0.93 |     0.03 |\r\n\r\nNote: `New1` is used in this PR. `New2` was a try, that didn't satisfy but for the record it is in the results."},{"Id":"7313997558","Type":"PullRequestEvent","CreatedAt":"2018-03-01T04:26:37","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27499","RelatedDescription":"Merged pull request \"ReadOnlySequence Performance Improvements\" (#27499) at dotnet/corefx","RelatedBody":"Change `IMemoryList` to POCO object; then inherit for Pipeline`s `BufferSegment`; this means all its properties inline in use rather than being interface dispatch.\r\n\r\nImprove some of the code paths\r\n    \r\nBottom numbers after the effect for 1, 100 and 1000 segments; top is current\r\n\r\n```        \r\n                           Method |    Categories |        Mean |         Op/s | Scaled |\r\n--------------------------------- |-------------- |------------:|-------------:|-------:|\r\n   ReadOnlySequence<T> (previous) |     1 segment |   104.86 ns |  9,536,378.9 |   1.00 |\r\n    ReadOnlySequence<T> (current) |     1 segment |    85.64 ns | 11,677,040.0 |   0.82 |\r\n    ReadOnlySequence<T> (this PR) |     1 segment |    70.79 ns | 14,125,877.7 |   0.68 |\r\n                                  |               |             |              |        |\r\n   ReadOnlySequence<T> (previous) |     2 segment |   188.92 ns |  5,293,250.6 |   1.00 |\r\n    ReadOnlySequence<T> (current) |     2 segment |   181.64 ns |  5,505,269.8 |   0.96 |\r\n    ReadOnlySequence<T> (this PR) |     2 segment |   111.34 ns |  8,981,178.5 |   0.59 |\r\n                                  |               |             |              |        |\r\n   ReadOnlySequence<T> (previous) |  100 segments | 1,297.69 ns |    770,599.7 |   1.00 |\r\n    ReadOnlySequence<T> (current) |  100 segments |   966.50 ns |  1,034,659.7 |   0.74 |\r\n    ReadOnlySequence<T> (this PR) |  100 segments |   233.30 ns |  4,286,286.4 |   0.18 |\r\n                                  |               |             |              |        |\r\n   ReadOnlySequence<T> (previous) | 1000 segments | 1,390.97 ns |    718,923.3 |   1.00 |\r\n    ReadOnlySequence<T> (current) | 1000 segments | 1,095.54 ns |    912,790.8 |   0.79 |\r\n    ReadOnlySequence<T> (this PR) | 1000 segments |   275.27 ns |  3,632,776.9 |   0.20 |\r\n                                  |               |             |              |        |\r\n                          Span<T> |       MM item |   147.34 ns |  6,787,204.7 |   0.54 |\r\n                   BufferSlice<T> |       MM item |   152.70 ns |  6,548,884.8 |   0.56 |\r\n   ReadOnlySequence<T> (previous) |       MM item |   272.44 ns |  3,670,500.0 |   1.00 |\r\n    ReadOnlySequence<T> (current) |       MM item |   251.15 ns |  3,981,724.7 |   0.92 |\r\n    ReadOnlySequence<T> (this PR) |       MM item |   200.79 ns |  4,980,437.7 |   0.74 |\r\n```\r\n\r\nResolves https://github.com/dotnet/corefx/issues/27500"},{"Id":"7313997551","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:26:37","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27500","RelatedDescription":"Closed issue \"[API Change] Drop `IMemoryList` and replace with abstract `ReadOnlySequenceSegment`\" (#27500) at dotnet/corefx","RelatedBody":"Alternative to \"Remove RunningIndex add a way for IMemoryList to provide seek implementation\" https://github.com/dotnet/corefx/issues/27435\r\n\r\nThe is a performance issue with `ReadOnlySequence` as accessing the properties of its segments have to go via interface dispatch which makes them slower an non-inlineable.\r\n\r\nProposed api:\r\n```csharp\r\npublic abstract class ReadOnlySequenceSegment<T>\r\n{\r\n    public ReadOnlyMemory<T> Memory { get; protected set; }\r\n    public ReadOnlySequenceSegment<T> Next { get; protected set; }\r\n    public long RunningIndex { get; protected set; }\r\n}\r\n```\r\nChanging to an `abstract` class with `protected` setters and non-virtual properties makes them inlinable and fast. The `ReadOnlySequence` doesn't care what the segments are, only that thy have these properties and then it can perform all of its functions:\r\n\r\nRemoving\r\n```csharp\r\npublic interface IMemoryList<T>\r\n{\r\n    public Memory<T> Memory { get; set; }\r\n    public IMemoryList<T> Next { get; set; }\r\n    public long RunningIndex { get; set; }\r\n}\r\n```\r\n\r\nMore functionality can't be delegated via the interface as in https://github.com/dotnet/corefx/issues/27435 as that will cause greater performance issues for mixed segment type `ReadOnlySequence`s as every call will have to go via the interface for the next block as its real type is unknown.\r\n\r\nWith the above approach it doesn't need to know what the next block is; it can use the fast base properties.\r\n\r\nThe total change in Pipelines to work with this faster approach is: (and PR for the change https://github.com/dotnet/corefx/pull/27499/commits/63ddad596763675165015c496e9647ee449adec1 )\r\n```diff\r\n- internal partial sealed class BufferSegment : IMemoryList<byte>\r\n+ internal partial sealed class BufferSegment : ReadOnlySequenceSegment<byte>\r\n  {\r\n+     private BufferSegment _next;\r\n  \r\n-     public BufferSegment NextSegment { get; set; }\r\n+     public BufferSegment NextSegment\r\n+     {\r\n+         get => _next;\r\n+         set\r\n+         {\r\n+             _next = value;\r\n+             Next = value;\r\n+         }\r\n+     }\r\n-     public long RunningIndex { get; private set; }\r\n-     public Memory<byte> Memory { get; private set; }\r\n-     public IMemoryList<byte> Next => NextSegment;\r\n  }\r\n```\r\n\r\n/cc @davidfowl @KrzysztofCwalina @pakrym @ahsonkhan @stephentoub "},{"Id":"7313982019","Type":"PullRequestEvent","CreatedAt":"2018-03-01T04:20:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27553","RelatedDescription":"Merged pull request \"Scrub error messages for missing arguments(throw new)\" (#27553) at dotnet/corefx","RelatedBody":"fixes #27206 \r\n\r\nwhere:\r\n\r\n```csharp\r\nRegex.IsMatch(line, @\"\\bthrow[ ]*new\\b\") &&\r\nRegex.IsMatch(line, string.Format(@\"\\b{0}\\b\", Regex.Escape(data.Item1))) && // resource key\r\n!Regex.IsMatch(line, @\"\\bSR.Format\\b\") &&\r\n!Regex.IsMatch(line, @\"\\bstring.Format\\b\") &&\r\n!Regex.IsMatch(line, @\"\\bRH.Format\\b\") &&\r\n!Regex.IsMatch(line, @\"\\bSR.GetString\\b\") &&\r\n!Regex.IsMatch(line, @\"\\bString.Format\\b\") &&\r\n!line.Trim().StartsWith(@\"//\") &&\r\n//args support\r\n!Regex.IsMatch(line, @\"\\bXslTransformException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bXmlException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bXmlSchemaException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bCryptographicException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bXslLoadException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bXsltException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bXPathCompileException\\b\") && \r\n!Regex.IsMatch(line, @\"\\bXmlSchemaInferenceException\\b\"\r\n```\r\n\r\nDo we need to standardise string.Format etc...with SR.Format?\r\n\r\ncc: @stephentoub \r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7314042203","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:45:51","Actor":"AArnott","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5470","RelatedDescription":"Opened issue \".NET Native compiler toolchain fails to bind FormatMessage to FormatMessageW\" (#5470) at dotnet/corert","RelatedBody":"The bug https://github.com/AArnott/PCLCrypto/issues/137 is now believed to be due to the .NET Native compiler toolchain failing to match [this](https://github.com/AArnott/pinvoke/blob/4a7ae6e81de80cde7a0acc0224a9ffbb7847d6f9/src/Kernel32/Kernel32.cs#L145):\r\n\r\n```csharp\r\n[DllImport(api_ms_win_core_localization_l1_2_0, CharSet = CharSet.Unicode, SetLastError = true)]\r\npublic static unsafe extern int FormatMessage(FormatMessageFlags dwFlags, void* lpSource, int dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr[] Arguments);\r\n```\r\n\r\nUp with the `FormatMessageW` method defined in `api-ms-win-core-localization-l1-2-0.lib`.\r\n\r\nThis failure only occurs when compiling a UWP app for Release, which is what suggests this is a .NET Native toolchain issue.\r\n\r\n**Repro**\r\n\r\n1.\tRunning on Windows RS3; in VS2017 (updated today) create a new UWP application (any template).\r\n2.\tRight click, add NuGet reference “PCLCrypto” latest version.\r\n3.\tSwitch to “Release” and try to run the app (no code changes required – just the template with the reference). \r\n\r\nMore details on the repro:\r\n1.\tif the UWP app is using Target=15063, Min=15063 + the PCLCrypto 2.0.147, it works fine…\r\n2.\tif the UWP app is using Target=16299, Min=15063 + the PCLCrypto 2.0.147, it works fine… \r\n    * [this combination doesn’t work for Azure SDK because it results in another error about GenXbf.dll cannot be resolved]\r\n3.\tif the UWP app is using Target=16299, Min=16299 + the PCLCrypto 2.0.147, it fails to launch with a missing entry point…\r\n\r\nThe failure produces output including:\r\n\r\n> The program '[12176] IoTUWPTest1.exe' has exited with code -1073741511 (0xc0000139) 'Entry Point Not Found'.\r\n> Activation of the Windows Store app '64437b49-ef48-4455-a4b5-326261c5612f_zgnc71k7pd6s8!App' failed with error 'The app didn't start'.\r\n\r\nand this log:\r\n\r\n```\r\n1712 3de8:3df4 @ 00384546 - LdrpMinimalMapModule - ENTER: DLL name: C:\\WINDOWS\\SYSTEM32\\NTASN1.dll\r\n1715 3de8:3df4 @ 00384546 - LdrpMinimalMapModule - RETURN: Status: 0x00000000\r\n1716 3de8:3df4 @ 00384546 - LdrpFindDllActivationContext - INFO: Probing for the manifest of DLL \"C:\\WINDOWS\\SYSTEM32\\NTASN1.dll\" failed with status 0xc00000bb\r\n1717 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-libraryloader-l1-2-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernelbase.dll by API set\r\n1718 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-errorhandling-l1-1-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernelbase.dll by API set\r\n1719 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-heap-l2-1-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernelbase.dll by API set\r\n1720 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-processthreads-l1-1-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernel32.dll by API set\r\n1721 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-profile-l1-1-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernelbase.dll by API set\r\n1722 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-sysinfo-l1-1-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernelbase.dll by API set\r\n1723 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-rtlsupport-l1-2-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\ntdll.dll by API set\r\n1724 3de8:3df4 @ 00384546 - LdrpPreprocessDllName - INFO: DLL api-ms-win-core-string-l1-1-0.dll was redirected to C:\\WINDOWS\\SYSTEM32\\kernelbase.dll by API set\r\n1725 3de8:3df4 @ 00384546 - LdrpProcessWork - ERROR: Unable to load DLL: \"NTASN1.dll\", Parent Module: \"C:\\WINDOWS\\SYSTEM32\\ncrypt.dll\", Status: 0xc0000139\r\n```\r\n\r\nSlightly related to #1039 which similarly blocked PCLCrypto for UWP apps.\r\nRelated to https://github.com/AArnott/pinvoke/issues/325 as well.\r\n\r\nWe have a mail thread on this which I'm happy to add folks to."},{"Id":"7312915714","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:39:04","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4970","RelatedDescription":"Merged pull request \"Add CA2111 SuppressMessage for these MSDN documented public Pointers\" (#4970) at dotnet/corert","RelatedBody":""},{"Id":"7312737384","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:00:32","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5469","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5469) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7312676164","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:48:10","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5469","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5469) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7312242614","Type":"PullRequestEvent","CreatedAt":"2018-02-28T20:19:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5468","RelatedDescription":"Merged pull request \"Cache the results of CanCompareValueTypeBits\" (#5468) at dotnet/corert","RelatedBody":"This is a recursive algorithm and there's a pathological test in the CoreCLR test assets that has been timing out ever since the code was introduced.\r\n\r\nMade the cache a bit more general purpose, since I'm expecting this to be reused for more things later."},{"Id":"7312220767","Type":"IssuesEvent","CreatedAt":"2018-02-28T20:15:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5461","RelatedDescription":"Closed issue \"Repeated crashes from rmrcorer.dll on UWP, can't figure out why\" (#5461) at dotnet/corert","RelatedBody":"Hello, I'm sorry if this is not the exact place to ask for help about this (although I suspect this is related to the .NET Native compiler and maybe the additional processing made by the Store, as I can't reproduce the issue locally), but I've been struggling with this issue for months and I have no clue on what's going on.\r\n\r\nI have [this app](https://www.microsoft.com/store/apps/9NBLGGH3T7G3) in the Store, and I'm constantly getting a ton of crashes, with the following info:\r\n\r\n`application_fault_1007_mrmcorer.dll!\r\nwindows::applicationmodel::resources::core::cqualifierevent::registerscaleevent`\r\n\r\nThese usually make up more than 80% of my total crashes (according from the Dev Dashboard), and my usual situation looks like this because of this issue:\r\n![image](https://user-images.githubusercontent.com/10199417/36758264-398b5b02-1c14-11e8-9670-509f81e5a96a.png)\r\nNow, this number is just ridiculously big in proportion to the number of users I have for my app.\r\n\r\nHere's a typical stack trace for these crashes: [crash_stacktrace.zip](https://github.com/dotnet/corert/files/1764904/crash_stacktrace.zip)\r\n\r\nApparently these crashes come from different places in my app, but they all have this line in common:\r\n\r\n`MrmCoreR.dll | Windows::ApplicationModel::Resources::CResourceLoaderFactory::GetForCurrentView`\r\n\r\nWhich I guess corresponds to this call:\r\n\r\n`Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView()`\r\n\r\n\r\nThe problem is that **the only place** where I use that line in my app is inside a `try/catch` block:\r\n\r\n```C#\r\nprivate static ResourceLoader _Loader;\r\n\r\npublic static string GetResource(string resource)\r\n{\r\n    try\r\n    {\r\n        if (_Loader == null) _Loader = ResourceLoader.GetForCurrentView();\r\n        return _Loader.GetString(resource);\r\n    }\r\n    catch\r\n    {\r\n        return string.Empty;\r\n    }\r\n}\r\n```\r\n\r\nSo, I have these questions:\r\n\r\n- How's it possible that that `try/catch` block has no effect whatsoever, as I still see all those crashes from the dashboard?\r\n- I'm using HockeyApp to collect crash reports, and these crashes don't show up over there, why are they only displayed in the Dashboard? Is that some particular/special kind of application crash?\r\n- The number don't seem right. I published a new version of my app yesterday and I can already see over 200 crashes like this one, but I usually only have around 400 weekly users. If the app had really crashes that often I'd already received at least some emails complaining about the app crashing on its own. I honestly have no idea about what's happening here.\r\n\r\nI think this might be related to the .NET Native as the stack trace has the typical \"clutter\" that usually comes from the additional optimization passes of .NET Native, and also because I can't seem to be able to reproduce the issue locally in Debug mode (and in Release, so I wonder if the Store has something to do with this too).\r\n\r\nAny help would really be appreciated here.\r\nThanks! 😄\r\nSergio\r\n"},{"Id":"7311630706","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:22:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5468","RelatedDescription":"Opened pull request \"Cache the results of CanCompareValueTypeBits\" (#5468) at dotnet/corert","RelatedBody":"This is a recursive algorithm and there's a pathological test in the CoreCLR test assets that has been timing out ever since the code was introduced.\r\n\r\nMade the cache a bit more general purpose, since I'm expecting this to be reused for more things later."},{"Id":"7309309505","Type":"IssuesEvent","CreatedAt":"2018-02-28T11:18:38","Actor":"Scellow","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5467","RelatedDescription":"Closed issue \"Getting current assembly location returns empty string\" (#5467) at dotnet/corert","RelatedBody":"```c#\r\n            var asm = Assembly.GetExecutingAssembly();\r\n            Console.WriteLine($\"Location: {asm.Location}\");\r\n```\r\n\r\nVersion: https://github.com/dotnet/corert/commit/026c9341a023cfc112e6ac92cf58f788f9d332b6\r\n\r\nOutput: ``Location:`` \r\n\r\nExpected (.net core 2.0):  ``Location: C:\\Users\\Scellow\\dev\\test\\bin\\Debug\\netcoreapp2.0\\test.dll``\r\n\r\nOS: Win 10 x64"},{"Id":"7309094747","Type":"IssuesEvent","CreatedAt":"2018-02-28T10:35:00","Actor":"Scellow","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5467","RelatedDescription":"Opened issue \"Getting current assembly location returns empty string\" (#5467) at dotnet/corert","RelatedBody":"```c#\r\n            var asm = Assembly.GetExecutingAssembly();\r\n            Console.WriteLine($\"Location: {asm.Location}\");\r\n```\r\n\r\nVersion: https://github.com/dotnet/corert/commit/026c9341a023cfc112e6ac92cf58f788f9d332b6\r\n\r\nOutput: ``Location:`` \r\n\r\nExpected (.net core 2.0):  ``Location: C:\\Users\\Scellow\\dev\\test\\bin\\Debug\\netcoreapp2.0\\test.dll``"},{"Id":"7308716776","Type":"PullRequestEvent","CreatedAt":"2018-02-28T09:22:28","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5448","RelatedDescription":"Closed pull request \"Revert \"Make g_rgWellKnownMethodNames specific to binder (#5390)\"\" (#5448) at dotnet/corert","RelatedBody":"This reverts commit b02c2edaa6b4390615de5bb1daefdf1ec39d5e7b.\r\n\r\nThis commit didn't actually fully fix #5390 (it's an external issue), but it triggered a linker warning on Windows (`AsmOffsetsVerify.obj : warning LNK4221: This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library`). It doesn't seem worth it to try to fix the warning and the useless `extern` nicely works around the problem..."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7313907580","Type":"PullRequestEvent","CreatedAt":"2018-03-01T03:49:29","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2007","RelatedDescription":"Merged pull request \"Fix P2P packtool\" (#2007) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/cli/issues/8705\r\n\r\nThe input of PackTask are relative paths. And it ends up getting wrong full path in the task (prefixed with Library path instead of App path). Give PackTask full path as input.\r\n"},{"Id":"7313673073","Type":"PullRequestEvent","CreatedAt":"2018-03-01T02:25:08","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2010","RelatedDescription":"Opened pull request \"Don't set a default ProjectAssetsFile path in the SDK\" (#2010) at dotnet/sdk","RelatedBody":"Resolves #1486 \r\n\r\nNuGet sets the `ProjectAssetsFile` property in the `.g.props` file it generates, so this property should already be set by the time we would get to the code this PR removes.\r\n\r\nTODO: Test whether this affects behavior when restore hasn't occurred."},{"Id":"7313625114","Type":"IssuesEvent","CreatedAt":"2018-03-01T02:09:06","Actor":"xen2","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2009","RelatedDescription":"Opened issue \"Create packages with multiple RuntimeIdentifiers cross-platform build\" (#2009) at dotnet/sdk","RelatedBody":"Using `<TargetFrameworks>` results in multiple builds and is properly supported by NuGet pack (`lib/<tfm>`) and Visual Studio.\r\n\r\nHowever, `<RuntimeIdentifiers>` doesn't seem to have much impact except for package consumption.\r\nI was expecting to also be able to create such NuGet packages, with `lib/<tfm>/<runtime>` folders.\r\n\r\nFor the use case, I would like to develop a library that support this kind of combination of TFM/Runtime identifiers:\r\n- monoandroid50 (no runtime identifier)\r\n- net461 (windows)\r\n- net461 (unix)\r\n- net461 (macos)\r\n- xamarinios10\r\n- uap10.0\r\n\r\nNote that runtime identifiers are different for each TFM.\r\n\r\nIs the only choice to develop custom cross-targeting targets myself, or will it be supported in nuget/dotnet/vs at some point?"},{"Id":"7313594830","Type":"PullRequestEvent","CreatedAt":"2018-03-01T01:58:54","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2008","RelatedDescription":"Opened pull request \"Re-enable a few tests\" (#2008) at dotnet/sdk","RelatedBody":"Fixes #1077\r\nFixes #1293"},{"Id":"7312877763","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:30:39","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2007","RelatedDescription":"Opened pull request \"Fix P2P packtool\" (#2007) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/cli/issues/8705\r\n\r\nThe input of PackTask is relative path. And it ends up getting wrong full path in the task (appended with Library path instead of App path). Give PackTask full path as input.\r\n"},{"Id":"7312872484","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:29:31","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1998","RelatedDescription":"Closed issue \"Cannot create tool with P2P using dotnet pack\" (#1998) at dotnet/sdk","RelatedBody":"fail with \r\n`/usr/local/share/dotnet/sdk/2.1.300-preview1-008162/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): Could not find a part of the path '/Users/williamli/Downloads/testp2p/leaf/bin/Debug/netcoreapp2.1/publish'. [/Users/williamli/Downloads/testp2p/main/main.csproj]`\r\n"},{"Id":"7312518571","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:16:23","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2006","RelatedDescription":"Opened pull request \"Fix issues with dogfood environment setup\" (#2006) at dotnet/sdk","RelatedBody":"1. There's a typo in the extensions targets in some branches\r\n2. DotNetRoot was not set early enough in .sh"},{"Id":"7312498497","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:12:19","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2002","RelatedDescription":"Merged pull request \"Merge release/2.1 to release/2.1.1xx\" (#2002) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into release/2.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-release/2.1.1xx\ngit reset --hard upstream/release/2.1.1xx\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-release/2.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7312114136","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:54:28","Actor":"KevinH-MS","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2005","RelatedDescription":"Opened issue \"Project specifying <Platforms> element cannot be referenced from agnostic project\" (#2005) at dotnet/sdk","RelatedBody":"I have a lib project with:\r\n```<Platforms>x64</Platforms>```\r\n\r\nand a test project that does not specify any platforms (that references the lib).\r\n\r\nWhen I compile, I get:\r\n```\r\n2>CSC : error CS0006: Metadata file 'C:\\Users\\kevinh\\Source\\Repos\\x64\\CoreLib\\bin\\x64\\Release\\net461\\CoreLib.dll' could not be found\r\n2>Done building project \"CoreTests.csproj\" -- FAILED.\r\n```\r\n\r\nIf I add ```<Platforms>x64<Platforms>``` to the test project, I don't get the compile error, but other things in VS break (like test explorer).  If I change everything to singular ```<Platform>``` everything seems to work as expected."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"968893314832285697","CreatedAt":"2018-02-28T16:59:02+00:00","UserScreenname":"dotnet","Text":"And by \"check out\" @terrajobst really means: please subscribe :-) https://t.co/O2IOMK3aAU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":8,"RawContent":null},{"Id":"968549530395336704","CreatedAt":"2018-02-27T18:12:57+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1.0-preview1 now available https://t.co/jAZAQmZq7Q","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":106,"FavoriteCount":100,"RawContent":null},{"Id":"968549278879592449","CreatedAt":"2018-02-27T18:11:57+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 1 https://t.co/myZTqqSPuJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":90,"FavoriteCount":68,"RawContent":null},{"Id":"968549057403604992","CreatedAt":"2018-02-27T18:11:04+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 1 https://t.co/YMrTQJHDhU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":487,"FavoriteCount":382,"RawContent":null},{"Id":"968171532038975489","CreatedAt":"2018-02-26T17:10:55+00:00","UserScreenname":"dotnet","Text":"Learn about async/await best practices from @BrandonXamarin - https://t.co/JMIkq5iZti show https://t.co/lHr6F9jmEI /cc @ch9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":120,"FavoriteCount":44,"RawContent":null},{"Id":"967455752855027712","CreatedAt":"2018-02-24T17:46:40+00:00","UserScreenname":"dotnet","Text":"Please take a moment and think of all the office chairs that were destroyed in the office olympics.\n\n@gotheap’s tea… https://t.co/8RvGxAQI5o","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":29,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-03-01T05:30:19.3487151Z","RunDurationInMilliseconds":7972}