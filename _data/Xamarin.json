{"Data":{"Blog":{"FeedItems":[{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null},{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many high-performance libraries primarily developed using C or C++. This article, &#8220;Use C/C++ Libraries With Xamarin&#8220;, walks through the technique of separating the concerns of...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null},{"Title":"Mobile & .NET Developer Community Events in February","PublishedOn":"2019-02-01T17:31:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Fall in love with building your next mobile application by networking with local user groups to learn about new and exciting releases, tooling, or updates with Xamarin and .NET related technologies!...","Href":"https://blog.xamarin.com/mobile-net-developer-community-events-in-february/","RawContent":null},{"Title":"Complex UI with FastGrid for Xamarin.Forms","PublishedOn":"2019-01-30T17:56:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff (Principal Engineer at Binwell,  Microsoft MVP, Xamarin Certified Mobile Developer), Artem Tischenko (Xamarin developer at Binwell) and Kirill...","Href":"https://blog.xamarin.com/complex-ui-with-fastgrid-for-xamarin-forms/","RawContent":null},{"Title":"Android’s D8 dexer and R8 shrinker","PublishedOn":"2019-01-28T18:10:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is quite a bit of complexity to packaging an Android application. Xamarin.Android has to run through the same build pipeline as Android apps built in Android Studio&#8211;with the addition of...","Href":"https://blog.xamarin.com/androids-d8-dexer-and-r8-shrinker/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2019 Preview 2","PublishedOn":"2019-01-23T20:22:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, Visual Studio 2019 Preview 2 was released and includes many improvements for mobile developers in Visual Studio. This release, we focused on key areas to make you more productive when authoring...","Href":"https://blog.xamarin.com/whats-new-for-xamarin-developers-in-visual-studio-2019-preview-2/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: New Year – New Pod!","PublishedOn":"2019-01-18T18:59:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. This episode includes a discussion of...","Href":"https://blog.xamarin.com/visual-studio-mobile-developer-podcast-new-year-new-pod/","RawContent":null},{"Title":"Introducing the .NET Community Standup Series","PublishedOn":"2019-01-17T16:57:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We love our amazing .NET community that is filled with amazing developers writing fantastic blogs, libraries, presentations, and pull requests every week. We are always looking for ways to highlight...","Href":"https://blog.xamarin.com/introducing-the-net-community-standup-series/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9065308771","Type":"PullRequestEvent","CreatedAt":"2019-02-14T05:11:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2736","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] ProGuard/R8 fix for org.apache.http.legacy.jar\" (#2736) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2705\r\nContext: https://developer.android.com/about/versions/marshmallow/android-6.0-changes#behavior-apache-http-client\r\nContext: https://developers.google.com/maps/documentation/android-sdk/config#specify_requirement_for_apache_http_legacy_library\r\n\r\nSince Android 6.0, the `org.apache.http.*` package was moved out of\r\n`android.jar` into:\r\n\r\n    $(AndroidSdkDirectory)\\platforms\\android-$(AndroidApiLevel)\\optional\\org.apache.http.legacy.jar\r\n\r\nIn order to use types from this package, you will need a modification\r\nto `AndroidManifest.xml`:\r\n\r\n    <uses-library\r\n        android:name=\"org.apache.http.legacy\"\r\n        android:required=\"false\" />\r\n\r\nThis tells Android's class loader to allow usage of these types.\r\n\r\nThe problem here, is that ProGuard and R8 will fail, since they won't\r\n*know* about these types. Older API levels will work, because\r\n`android.jar` contains these types...\r\n\r\nThe (descriptive???) R8 failure:\r\n\r\n    Compilation can't be completed because some library classes are missing.\r\n\r\nTo fix the problem, I changed the `<DetermineJavaLibrariesToCompile/>`\r\nMSBuild task, so it adds `org.apache.http.legacy.jar` to the\r\n`@(AndroidExternalJavaLibrary)` item group. This allows ProGuard/R8 to\r\naccept this library as input.\r\n\r\nI added a test that reproduced the problem using multi-dex (implicitly\r\nuses ProGuard/R8) and the Xamarin.GooglePlayServices.Maps NuGet."},{"Id":"9065115739","Type":"PullRequestEvent","CreatedAt":"2019-02-14T04:09:43","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2735","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix proguard rules for R8 compatibility\" (#2735) at xamarin/xamarin-android","RelatedBody":"Context: https://www.guardsquare.com/en/products/proguard/manual/usage#keepoptionmodifiers\r\nContext: https://www.guardsquare.com/en/products/proguard/manual/examples\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2684\r\n\r\nUsing R8 on a pre-Android 8.0 device was crashing with:\r\n\r\n    E/mono    (16220): Unhandled Exception:\r\n    E/mono    (16220): Java.Lang.LinkageError: no non-static method \"Landroid/runtime/UncaughtExceptionHandler;.<init>()V\"\r\n    E/mono    (16220):   at Java.Interop.JniEnvironment+InstanceMethods.GetMethodID (Java.Interop.JniObjectReference type, System.String name, System.String signature) [0x0005b] in <7d7bcc9ee9cc460db8abcdb9a9622733>:0\r\n    E/mono    (16220):   at Java.Interop.JniType.GetConstructor (System.String signature) [0x0000c] in <7d7bcc9ee9cc460db8abcdb9a9622733>:0\r\n    E/mono    (16220):   at Java.Interop.JniPeerMembers+JniInstanceMethods.GetConstructor (System.String signature) [0x00035] in <7d7bcc9ee9cc460db8abcdb9a9622733>:0\r\n    E/mono    (16220):   at Java.Interop.JniPeerMembers+JniInstanceMethods.FinishCreateInstance (System.String constructorSignature, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters) [0x00036] in <7d7bcc9ee9cc460db8abcdb9a9622733>:0\r\n    E/mono    (16220):   at Java.Lang.Object..ctor () [0x00054] in <d77389624c8c4948a12589c4bd4500eb>:0\r\n    E/mono    (16220):   at Android.Runtime.UncaughtExceptionHandler..ctor (Java.Lang.Thread+IUncaughtExceptionHandler defaultHandler) [0x00000] in <d77389624c8c4948a12589c4bd4500eb>:0\r\n    E/mono    (16220):   at Android.Runtime.JNIEnv.Initialize (Android.Runtime.JnienvInitializeArgs* args) [0x00202] in <d77389624c8c4948a12589c4bd4500eb>:0\r\n    E/mono    (16220):   --- End of managed Java.Lang.LinkageError stack trace ---\r\n    E/mono    (16220): java.lang.NoSuchMethodError: no non-static method \"Landroid/runtime/UncaughtExceptionHandler;.<init>()V\"\r\n    E/mono    (16220): \tat mono.android.Runtime.init(Native Method)\r\n    E/mono    (16220): \tat mono.MonoPackageManager.LoadApplication(:21)\r\n    E/mono    (16220): \tat mono.MonoRuntimeProvider.attachInfo(:1)\r\n    E/mono    (16220): \tat android.app.ActivityThread.installProvider(ActivityThread.java:5853)\r\n    E/mono    (16220): \tat android.app.ActivityThread.installContentProviders(ActivityThread.java:5445)\r\n    E/mono    (16220): \tat android.app.ActivityThread.handleBindApplication(ActivityThread.java:5384)\r\n    E/mono    (16220): \tat android.app.ActivityThread.-wrap2(ActivityThread.java)\r\n    E/mono    (16220): \tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1545)\r\n    E/mono    (16220): \tat android.os.Handler.dispatchMessage(Handler.java:102)\r\n    E/mono    (16220): \tat android.os.Looper.loop(Looper.java:154)\r\n    E/mono    (16220): \tat android.app.ActivityThread.main(ActivityThread.java:6119)\r\n    E/mono    (16220): \tat java.lang.reflect.Method.invoke(Native Method)\r\n    E/mono    (16220): \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:886)\r\n    E/mono    (16220): \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:776)\r\n\r\nLooking into it, the following method was present when using ProGuard,\r\nbut not R8:\r\n\r\n    #1              : (in Landroid/runtime/UncaughtExceptionHandler;)\r\n      name          : '<init>'\r\n      type          : '()V'\r\n      access        : 0x10001 (PUBLIC CONSTRUCTOR)\r\n      code          -\r\n      registers     : 4\r\n      ins           : 1\r\n      outs          : 4\r\n      insns size    : 22 16-bit code units\r\n      catches       : (none)\r\n      positions     :\r\n        0x0000 line=22\r\n        0x0003 line=23\r\n        0x0010 line=24\r\n      locals        :\r\n        0x0000 - 0x0016 reg=3 this Landroid/runtime/UncaughtExceptionHandler;\r\n\r\nThen I looked at `proguard_xamarin.cfg`, and noticed something strange:\r\n\r\n    -keep class android.runtime.** { <init>(***); }\r\n\r\nIt seemed this rule was being ignored? All the other *working* rules\r\nwere using `<init>(...);` to refer to the instance constructor.\r\n\r\nWhen I reviewed ProGuard's documented syntax/grammar:\r\n\r\n    [@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname\r\n        [extends|implements [@annotationtype] classname]\r\n    [{\r\n        [@annotationtype] [[!]public|private|protected|static|volatile|transient ...] <fields> |\r\n                                                                        (fieldtype fieldname);\r\n        [@annotationtype] [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...] <methods> |\r\n                                                                                            <init>(argumenttype,...) |\r\n                                                                                            classname(argumenttype,...) |\r\n                                                                                            (returntype methodname(argumenttype,...));\r\n        [@annotationtype] [[!]public|private|protected|static ... ] *;\r\n        ...\r\n    }]\r\n\r\nIt seems `(...)` is the proper way to specify a match against any set\r\nof arguments. Looking through ProGuard's examples, I can't find any\r\nusage of `(***)`. It must *happen* to work, but is undocumented.\r\n\r\nR8 does not appear to accept the `(***)` syntax at all.\r\n\r\n## Other changes ##\r\n\r\nI expanded upon the `DexUtils` class so it can look for methods within\r\nclasses. I also adjusted one test to verify this problem is solved.\r\n\r\nFor comparison, attached [dexdump output](https://github.com/xamarin/xamarin-android/files/2863248/dexdump.zip)\r\n"},{"Id":"9064916165","Type":"IssuesEvent","CreatedAt":"2019-02-14T03:11:32","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2734","RelatedDescription":"Opened issue \"[unit-tests] Better ignore network failures\" (#2734) at xamarin/xamarin-android","RelatedBody":"Consider: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/1515/testReport/(root)/AndroidClientHandlerTests/Mono_Android_Tests__Xamarin_Android_NetTests_AndroidClientHandlerTests_Sanity_Tls_1_2_Url_WithMonoClientHandlerFails___Release_Aot/\r\n\r\nThis is a failing unit test:\r\n\r\n>     SHOULD NOT BE REACHED: BTLS is present, TLS 1.2 should work. Network error? System.AggregateException: One or more errors occurred. (An error occurred while sending the request) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request ---> System.Net.WebException: Error: ConnectFailure (Connection refused) ---> System.Net.Sockets.SocketException: Connection refused\r\n>      at System.Net.Sockets.SocketAsyncResult.CheckIfThrowDelayedException () [0x00014] in <fc03879c3a9b4b62b04a8caa2c7661df>:0 \r\n>      at System.Net.Sockets.Socket.EndConnect (System.IAsyncResult asyncResult) [0x0002c] in <fc03879c3a9b4b62b04a8caa2c7661df>:0 \r\n\r\n\r\nThe assertion happens at: https://github.com/xamarin/xamarin-android/blob/23c30056a8a11b1bf80a2b7bb7d64b44b4351545/src/Mono.Android/Test/Xamarin.Android.Net/AndroidClientHandlerTests.cs#L252\r\n\r\nThe apparent problem is that `RunIgnoringNetworkIssues()` is only checking for a `WebException`, but -- as seen above -- we instead have an `AggregateException` -> `HttpRequestException` -> `WebException`, and this intermediate `HttpRequestException` trips up our \"ignore connection failures\" logic:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/23c30056a8a11b1bf80a2b7bb7d64b44b4351545/src/Mono.Android/Test/Xamarin.Android.Net/AndroidClientHandlerTests.cs#L160-L170\r\n\r\nWe should fix `RunIgnoringNetworkIssues()` to support this new nested exception structure."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9065114829","Type":"IssuesEvent","CreatedAt":"2019-02-14T04:09:25","Actor":"valentinba","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5249","RelatedDescription":"Opened issue \"HttpClient hangs when using gzip AutomaticDecompression without disposing HttpResponseMessages\" (#5249) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen using the System.Net.Http.HttpClient with a HttpClientHandler configured with gzip AutomaticDecompression, the client hangs after about 10 requests on iOS and Android.\r\n\r\nIdentical code succeeds in UWP and in a .NET console application.\r\n\r\nOn Android and iOS, disposing the HTTPResponseMessage via a using statement fixes the issue. This does not appear necessary in UWP or .NET proper.\r\n\r\nRemoving the AutomaticDecompression option also fixes the issue.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the attached Client application in the Android emulator or iOS simulator in debug mode\r\n2. Click the \"Start (without using)\" button\r\n3. The label in the center of the screen will display the request number and response length\r\n4. The application hangs after the 10th request, eventually breaking with a timeout exception.\r\n5. Restart the application\r\n6. Click on the \"Start (with using)\" button\r\n7. Note how all 20 requests appear to complete successfully\r\n8. Try the above steps in UWP and note how all 20 request finish even without disposing the response messages\r\n9. Try the above steps with the attached .NET ConsoleTest application and note how all 20 request finish\r\n\r\n### Expected Behavior\r\n\r\nThe client should not hang / timeout after 10 requests.\r\n\r\n### Actual Behavior\r\n\r\nThe client hangs after 10 requests, unless one disposes the HTTP request message objects.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.5.0.129452\r\n- Last known good version: Tried 2.5.0, still had the issue\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: \r\n  - iOS:  12.2.1.15\r\n  - Android: 8.1\r\n  - UWP:  16299\r\n\r\n### Screenshots\r\n\r\nN/A\r\n\r\n### Reproduction Link\r\n\r\n[ConsoleTest.zip](https://github.com/xamarin/Xamarin.Forms/files/2863241/ConsoleTest.zip)\r\n[Client.zip](https://github.com/xamarin/Xamarin.Forms/files/2863242/Client.zip)\r\n"},{"Id":"9064963622","Type":"PullRequestEvent","CreatedAt":"2019-02-14T03:25:15","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5248","RelatedDescription":"Opened pull request \"Profiler; Explicit Init\" (#5248) at xamarin/Xamarin.Forms","RelatedBody":"To generate this profile you need to build a private nuget package with this branch and then build https://github.com/kingces95/droidperf.\r\n![profile](https://user-images.githubusercontent.com/4120386/52760276-0c170f00-2fb3-11e9-82ec-d3ea7557b54a.png)\r\n\r\nTo generate the nuget:\r\n> set NUGET_DIR=x:\\nuget\\4.4.1\\\r\n> .create-nuget.bat rdroid\r\n> X:\\git\\forms\\.nuspec\\Xamarin.Forms.9.9.46.nupkg\r\n\r\nTo build the droidperf:\r\n* Install VS Ent -- only that supports AOT\r\n* Config = Release\r\n* Build/Deploy XFFastUp.Android\r\n\r\nProfiler API:\r\nThe profiler API is built in but hidden behind a PROFILE define. The define is set in this branch to ease development. Will remove before accepting PR. To inject sampling points simply put:\r\n> Profile.Push(\"Timing Partition A\")\r\n> ... // logic to time\r\n> Profile.PopPush(\"Next Partition\")\r\n> ... // more logic to time\r\n> Profile.Pop()\r\nTo report on the samples use the droidperf app linked above.\r\n\r\nExplicit Registration:\r\nThis is an example of using explicit renderer registration and optional opt-out of features. \r\n* `Handlers` is an array of `ExportRendererAttribute`\r\n* `Flags` is a list of features to opt out of using\r\n\r\n```C#\r\nvar activation = new ActivationOptions()\r\n{\r\n\tActivity = this,\r\n\tBundle = savedInstanceState,\r\n\tResourceAssembly = Assembly.GetExecutingAssembly(),\r\n\tHandlers = Exports.Handlers,\r\n\tFlags = ActivationFlags.NoCss\r\n};\r\nForms.Init(activation);\r\n//Forms.Init(this, savedInstanceState, Assembly.GetExecutingAssembly());\r\n```"},{"Id":"9064603469","Type":"IssuesEvent","CreatedAt":"2019-02-14T01:47:20","Actor":"mikebikerider","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5247","RelatedDescription":"Opened issue \"Xamarin.Forms 3.5.0.129452 ScrollView Orientation=\"Both\" crashes on Android\" (#5247) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nA content page with:\r\n <ScrollView x:Name=\"whatever\" Orientation=\"Both\">\r\n<Label Text=\"Whatever you like and not necessarily a label. It can be Editor. I didn't test images\"/>\r\n</ScrollView>\r\n\r\nwill crash on Android when the ScrollView area is swiped. Orientation=\"Horizontal\" or \"Vertical\" work as expected. \r\nSame XAML runs fine under iOS.\r\nReverting Xamarin.Forms back to build 3.4.0.1029999 cures the issue.\r\n  \r\n### Steps to Reproduce\r\n\r\n1. Create a minimalistic Android project with one content page with a ScrollView Orientation=\"Both\" as in XAML code below.\r\n2. Compile and run on a device.\r\n3. Swipe or touch the ScrollView area.\r\n\r\nXAML to reproduce the issue:\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:local=\"clr-namespace:ScrollViewTest\"\r\n             x:Class=\"ScrollViewTest.MainPage\">\r\n    <Grid x:Name=\"mainGrid\">\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width=\"*\"/>\r\n        </Grid.ColumnDefinitions>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height=\"*\"/>\r\n        </Grid.RowDefinitions>\r\n        <ScrollView x:Name=\"scroller\" Grid.Column=\"0\" Grid.Row=\"0\" Orientation=\"Both\">\r\n            <Label x:Name=\"textLabel\" FontSize=\"48\" BackgroundColor=\"White\" TextColor=\"Black\" HorizontalOptions=\"Fill\" VerticalOptions=\"Fill\" HorizontalTextAlignment=\"Center\" VerticalTextAlignment=\"Center\" Text=\"Android ScrollView Test\"/>\r\n        </ScrollView>\r\n    </Grid>\r\n</ContentPage>\r\n\r\n### Expected Behavior\r\nShould scroll the content in either direction, as it did in prior builds.\r\n### Actual Behavior\r\nCrashes every time I swipe.\r\nI encountered the issue while preparing new production builds of 3 different apps. I put together a test app to reproduce and report the issue.\r\n\r\n![screenshot_20190213-200734](https://user-images.githubusercontent.com/19241066/52755790-1e05ab80-2fcd-11e9-8052-2f4dc20fdb47.jpg)\r\n![screenshot_20190213-200900_samsung experience home](https://user-images.githubusercontent.com/19241066/52755791-1e9e4200-2fcd-11e9-85f3-a74faf375bc7.jpg)\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 3.5.0.129452\r\n- Last known good version: Xamarin.Forms 3.4.0.1029999\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n Xamarin.Forms 3.5.0.129452\r\nXamarin.Android.Support.Support.v4 2.8.0.0.1\r\n Xamarin.Android.Suppport.v7.App.Compat 2.8.0.0.1\r\nXamarin.Android.Support.v7.CardView 2.8.0.0.1\r\nXamarin.Android.Support.v7.MediaRouter 2.8.0.0.1\r\nNetStandard.Library 2.0.3\r\n- Affected Devices: Android\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9064458042","Type":"IssuesEvent","CreatedAt":"2019-02-14T01:09:10","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5184","RelatedDescription":"Closed issue \"[Android] ListView grouping broken with 3.5.0\" (#5184) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI have a ListView with grouping enabled. After updating to Xamarin.Forms 3.5.0 the groups & the entries within the groups get mixed up as soon as you start to scroll.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Have a page with a ListView with IsGroupEnabled=\"true\"\r\n2. Bind entries to ListView\r\n3. Start scrolling the list\r\n\r\n### Expected Behavior\r\nListView keeps order of groups and the entries within each group\r\n\r\n### Actual Behavior\r\nGroups and the entries within get mixed up. When a misplaced entry is selected it gets its correct value.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 3.5.0.129452\r\n- Last known good version: Xamarin.Forms 3.4.0.1029999\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1\r\n- Android Support Library Version: 28.0.0.1\r\n\r\n### Screenshots\r\n\r\nScreenshot from a small test project. The ListView is bound to a list of 20 groups where every group contains 5 entries.\r\n![grafik](https://user-images.githubusercontent.com/7428276/52519908-0d6ad380-2c63-11e9-8a34-1df2b962babf.png)\r\n\r\nHere a recording which also displays the behaviour when selecting an item.\r\n[Recording.zip](https://github.com/xamarin/Xamarin.Forms/files/2848696/Recording.zip)\r\n\r\n### Reproduction Link\r\n\r\nSource to test project:\r\n[ListViewBug.zip](https://github.com/xamarin/Xamarin.Forms/files/2847731/ListViewBug.zip)\r\n\r\n"},{"Id":"9064416016","Type":"IssuesEvent","CreatedAt":"2019-02-14T00:58:10","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5172","RelatedDescription":"Closed issue \"ImageCell does not load image from URI - Android\" (#5172) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nImageCell not load image from URI on Android.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Use this example: https://docs.microsoft.com/pt-br/dotnet/api/xamarin.forms.imagecell?view=xamarin-forms. (Replace URL Image, because image no longer exists on the server, suggestion url to facilitate test: https://i0.wp.com/www.thedudes.com.br/wp-content/uploads/2018/06/Vitrine-Perfil-dos-Dudes-04.png).\r\nObs.: I tested with other code, none worked.\r\n2. Remove Device.OnPlatform(), just leave Image.FromUri.\r\n3. Test on Android.\r\n4. Image place in white, not load.\r\n\r\n### Expected Behavior\r\nImage showing.\r\n\r\n### Actual Behavior\r\nImage not showing. \r\nExceptions: Image Loading: Error getting stream for {url image}....\r\nExceptions: ImageLoaderSourceHandler: Could not retrieve image or image data was invalid. {In ListView ImageCell with Binding}\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: XF - 3.4\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: SDK 28 - Run on Device API 26 - Emulators same result.\r\n  - iOS:  Not tested\r\n  - Android: API 26 - Zenfone 4\r\n  - UWP:  Windows 10 - Build 17134.556\r\n- Android Support Library Version: No\r\n- Nuget Packages: 4.9.2.5706\r\n- Affected Devices: Zenfone 4, Genymotion emulator, nexus_5x(Default emulator VS2017)\r\n\r\n### Reproduction\r\n```C#\r\nclass ImageCellDemoPage : ContentPage\r\n\t\t{\t\t\t\r\n\t\t\tpublic ImageCellDemoPage()\r\n\t\t\t{\r\n\t\t\t\tLabel header = new Label\r\n\t\t\t\t{\r\n\t\t\t\t\tText = \"ImageCell\",\r\n\t\t\t\t\tFontSize = Device.GetNamedSize(NamedSize.Large, typeof(Label)),\r\n\t\t\t\t\tHorizontalOptions = LayoutOptions.Center\r\n\t\t\t\t};\r\n\r\n\t\t\t\tTableView tableView = new TableView\r\n\t\t\t\t{\r\n\t\t\t\t\tIntent = TableIntent.Form,\r\n\t\t\t\t\tRoot = new TableRoot\r\n\t\t\t\t{\r\n\t\t\t\t\tnew TableSection\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnew ImageCell\r\n\t\t\t\t\t\t{\r\n                            // Some differences with loading images in initial release.\r\n                            ImageSource = ImageSource.FromUri(new Uri(\"https://i0.wp.com/www.thedudes.com.br/wp-content/uploads/2018/06/Vitrine-Perfil-dos-Dudes-04.png\")),\r\n\t\t\t\t\t\t\tText = \"This is an ImageCell\",\r\n\t\t\t\t\t\t\tDetail = \"This is some detail text\",\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Accomodate iPhone status bar.\r\n\t\t\t\tthis.Padding = new Thickness(10, 20, 10, 5);\r\n\r\n\t\t\t\t// Build the page.\r\n\t\t\t\tthis.Content = new StackLayout\r\n\t\t\t\t{\r\n\t\t\t\t\tChildren =\r\n\t\t\t\t{\r\n\t\t\t\t\theader,\r\n\t\t\t\t\ttableView\r\n\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n```"},{"Id":"9064416001","Type":"IssuesEvent","CreatedAt":"2019-02-14T00:58:10","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5018","RelatedDescription":"Closed issue \"[Material] [Android, iOS] Slider Spec\" (#5018) at xamarin/Xamarin.Forms","RelatedBody":"# Material Slider \r\n\r\nhttps://material.io/design/components/sliders.html\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1096616/52365321-e7b9b080-2a4f-11e9-8029-48ee1e95b241.png\" width=\"450\" />\r\n\r\n\r\n- **Visually Identical**\r\n   The rendering should be such that the naked eye can’t tell the difference at a glance. _Not to be confused with “pixel perfect”_\r\n\r\n- **Performance**\r\nMaterial renderer should be modeled after the fast renderer\r\n\r\nSlider doesn't expose very many apis so the expectation here is that the default would size and color itself the same on iOS and Android\r\n\r\nThe hopefully not too tricky part will be that there is only a Material slider on iOS. On the android one it's still using the original control so material visual on Android will just apply default styles\r\n\r\n#### Current state\r\n![image](https://user-images.githubusercontent.com/5375137/51402919-0fca8980-1b0c-11e9-9c23-fd8d95d4b8de.png)\r\n\r\n\r\n# Scenarios\r\n\r\n```XAML\r\n<Slider Visual=\"Material\" />\r\n```\r\n\r\n# Difficulty : medium possibly difficult\r\n"},{"Id":"9064415984","Type":"IssuesEvent","CreatedAt":"2019-02-14T00:58:10","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5008","RelatedDescription":"Closed issue \"[Material] Linear Progress Indicator\" (#5008) at xamarin/Xamarin.Forms","RelatedBody":"# Material Linear Progress Indicator\r\n\r\nhttps://material.io/develop/ios/components/progress-indicators/progress-views/\r\n\r\n- **Visually Identical**\r\n   The rendering should be such that the naked eye can’t tell the difference at a glance. _Not to be confused with “pixel perfect”_\r\n\r\nProgressBar doesn't expose very many apis so the expectation here is that the default would size and color itself the same on iOS and Android\r\n\r\nThe hopefully not too tricky part here will be that there is only a Material ProgressBar iOS. On the android one it's still just using the original control so material visual on Android will just apply default styles or just inherit from the existing renderer\r\n\r\n#### Current state\r\n![image](https://user-images.githubusercontent.com/5375137/51402236-2d96ef00-1b0a-11e9-81a6-2c069d1f8b1e.png)\r\n\r\n\r\n# Scenarios\r\n\r\n```XAML\r\n<ProgressBar Visual=\"Material\" />\r\n```\r\n\r\n\r\n# Difficulty : medium\r\n"},{"Id":"9064415961","Type":"IssuesEvent","CreatedAt":"2019-02-14T00:58:10","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5156","RelatedDescription":"Closed issue \"Bindable layout does not pass container for OnSelectTemplate\" (#5156) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nIn line 184 null is passed to SelectTemplate as container value:\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/BindableLayout.cs#L184\r\n\r\nPossible ways to fix:\r\n1.\r\n```\r\n\t\tView CreateItemView(object item, int index, Layout<View> layout)\r\n\t\t{\r\n\t\t\treturn CreateItemView(item, index, _itemTemplate ?? _itemTemplateSelector?.SelectTemplate(item, layout));\r\n\t\t}\r\n```\r\nAnd pass layout accordingly...\r\n\r\n2.\r\n```\r\n\t\tView CreateItemView(object item, int index)\r\n\t\t{\r\n\t\t\tLayout<View> layout;\r\n\t\t\tif (!_layoutWeakReference.TryGetTarget(out layout))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\treturn CreateItemView(item, index, _itemTemplate ?? _itemTemplateSelector?.SelectTemplate(item, layout));\r\n\t\t}\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create custom ItemTemplateSelector implementing OnSelectTemplate.\r\n2. Create Stacklayout with BindableLayout and assign ItemTemplateSelector.\r\n3. Add debugger breakpoint in OnSelectTemplate.\r\n\r\n### Expected Behavior\r\nContainer in OnSelectTemplate should have reference to the view i.e. Stacklayout or Flexlayout \r\n\r\n### Actual Behavior\r\nContainer in OnSelectTemplate is null\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.5.0.129452\r\n- Last known good version: -\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9064415937","Type":"IssuesEvent","CreatedAt":"2019-02-14T00:58:09","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4909","RelatedDescription":"Closed issue \"Picker allows multiple dialogs to be open\" (#4909) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen a picker in Android is rapidly tapped twice, two dialogs are opened. Answering the first dialog works ok, but answering to second one doesn't seem to do anything.\r\n\r\nBelow is an old bug, which was reported and fixed for AppCompat. Now same bug seems to exist when AppCompat is not used.\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41717\r\n\r\n### Steps to Reproduce\r\n\r\nBug can be reproduced with an emulator in Visual Studio and with a real device.\r\n\r\n1. Have an Android app with a picker\r\n2. Rapidly tap picker twice\r\n3. Two dialogs are opened\r\n\r\n### Expected Behavior\r\n\r\nOnly on dialog is opened.\r\n\r\n### Actual Behavior\r\n\r\nTwo dialogs are opened.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: release-2.5.1-sr4, happens also with latest release-3.4.0-sr1.2\r\n- Last known good version: -\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks:\r\n  - iOS:  -\r\n  - Android: 8.1\r\n  - UWP:  -\r\n- Android Support Library Version: 27.0.2, happens also with latest 28.0.0\r\n- Nuget Packages: -\r\n- Affected Devices: Found with with Honor 9, Android v8\r\n\r\n### Screenshots\r\n\r\n-\r\n\r\n### Reproduction Link\r\n\r\n-\r\n"},{"Id":"9064376724","Type":"IssuesEvent","CreatedAt":"2019-02-14T00:47:41","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5246","RelatedDescription":"Opened issue \"[macOS] 'NSLayoutManager.CharacterRangeForGlyphRange(NSRange, out NSRange)' is obsolete\" (#5246) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nXF solution build fails on latest VS2019, int preview\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n"},{"Id":"9064281882","Type":"PullRequestEvent","CreatedAt":"2019-02-14T00:22:41","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5241","RelatedDescription":"Merged pull request \"[Android] Fix ImageRenderer URI\" (#5241) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nDon't dispose if newImage set is null. \r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #5172\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9064116524","Type":"PullRequestEvent","CreatedAt":"2019-02-13T23:42:12","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4634","RelatedDescription":"Merged pull request \"[iOS] Remove suggestion bar in iOS picker, datepicker,timepicker for iPAD\" (#4634) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nSet LeadingBarButtonGroups and TrailingBarButtonGroups to null  in picker renderer, datepicker renderer , timepicker renderer for iOS to prevent suggestion bar in iPAD\r\n\r\n### Issues Resolved ### \r\nfixes #4629 \r\n\r\n### API Changes ###\r\nNone\r\n\r\n### Platforms Affected ### \r\n- iOS (iPad only)\r\n\r\n### Behavioral/Visual Changes ###\r\nNow in picker, datepicker, timepicker, suggestion bar is not displayed anymore on iPAD.\r\n\r\n### Before/After Screenshots ### \r\nBefore:\r\n![before](https://user-images.githubusercontent.com/18006944/49473851-05b03c80-f878-11e8-856f-b9378e083a54.gif)\r\n\r\nafter:\r\n![after](https://user-images.githubusercontent.com/18006944/49473862-0b0d8700-f878-11e8-99cb-8e384b783cc7.gif)\r\n\r\n### Testing Procedure ###\r\nStart ControlGallery.iOS on iPAD device, Search and go to G4629 Page in tests screen, tap the picker to verify suggestion bar not exist anymore.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9064853823","Type":"PullRequestEvent","CreatedAt":"2019-02-14T02:54:27","Actor":"akoeplinger","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5605","RelatedDescription":"Opened pull request \"[xharness] Fix bug in Simulators.LoadAsync()\" (#5605) at xamarin/xamarin-macios","RelatedBody":"The \"Gizmo\" and \"Companion\" are child elements, not attributes on the SimDevicePair.\r\n\r\nAlso replaced the custom Distinct() implementation with a comparer which can be used with standard LINQ."},{"Id":"9062623778","Type":"IssuesEvent","CreatedAt":"2019-02-13T19:18:42","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5471","RelatedDescription":"Closed issue \"[tests] Introspection iOS Unified 64-bits - simulator failing on 5 selector not found for UIKit.UIPreviewInteraction\" (#5471) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Run iOS introspection tests for iOS Unified 64-bits \r\n\r\n### Expected Behavior\r\n\r\nTests shouldn't fail with \"selector not found for UIKit.UIPreviewInteraction\"\r\n\r\n### Actual Behavior\r\n\r\n5 selector not found for UIKit.UIPreviewInteraction\r\n\r\n```\r\n[FAIL] Selector not found for UIKit.UIPreviewInteraction : cancelInteraction \r\n[FAIL] Selector not found for UIKit.UIPreviewInteraction : locationInCoordinateSpace: \r\n[FAIL] Selector not found for UIKit.UIPreviewInteraction : delegate \r\n[FAIL] Selector not found for UIKit.UIPreviewInteraction : setDelegate: \r\n[FAIL] Selector not found for UIKit.UIPreviewInteraction : view \r\n```\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\nLatest builds from https://github.com/xamarin/xamarin-macios/tree/xcode10.2. After https://github.com/xamarin/xamarin-macios/pull/5470 is merged.\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":17,"FavoriteCount":4,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":38,"FavoriteCount":22,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":93,"FavoriteCount":40,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":16,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":70,"FavoriteCount":35,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":68,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":65,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":97,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":70,"FavoriteCount":28,"RawContent":null},{"Id":"1088179823762161664","CreatedAt":"2019-01-23T21:01:02+00:00","UserScreenname":"xamarinhq","Text":"Just released: #VS2019 Preview 2 which includes tons of improvements for mobile devs to make you more productive wh… https://t.co/j4LgiuYkgc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":155,"FavoriteCount":74,"RawContent":null},{"Id":"1086352280604065792","CreatedAt":"2019-01-18T19:59:01+00:00","UserScreenname":"xamarinhq","Text":"New Year – New podcast. Now on the Visual Studio Mobile Developer Podcast: Office Hours, Hockey App moving to… https://t.co/QtObsRI6av","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":20,"RawContent":null},{"Id":"1085961073902129152","CreatedAt":"2019-01-17T18:04:30+00:00","UserScreenname":"xamarinhq","Text":"As the .NET community expands so should the community standups... We are pleased to introduce the expansion of the… https://t.co/EDO0vChQlR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":22,"RawContent":null},{"Id":"1083829954515750923","CreatedAt":"2019-01-11T20:56:12+00:00","UserScreenname":"xamarinhq","Text":"...just posted on the Xamarin Blog, Andrei Nitescu shares one of his contributions to Xamarin.Forms, the bindable l… https://t.co/rp3eVPLbYl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":104,"FavoriteCount":45,"RawContent":null},{"Id":"1083399709526503424","CreatedAt":"2019-01-10T16:26:34+00:00","UserScreenname":"xamarinhq","Text":"Our very first Mobile .NET #CommunityStandup will be live in about 30 minutes at 9am Pacific! @maddyleger1,… https://t.co/vmFHIKZTIt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":19,"RawContent":null},{"Id":"1080559862642282502","CreatedAt":"2019-01-02T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"It’s a new year with tons of new and awesome Xamarin and .NET Community events coming this month. Get the full list… https://t.co/ZOykEyCRBN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":22,"RawContent":null},{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":270,"FavoriteCount":119,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":153,"FavoriteCount":69,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null}]}},"RunOn":"2019-02-14T05:31:22.7584223Z","RunDurationInMilliseconds":2957}