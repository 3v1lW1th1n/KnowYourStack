{"Data":{"GitHub":{"Issues":[{"Id":"603608188","IsPullRequest":false,"CreatedAt":"2020-04-20T23:53:34","Actor":"JeremyKuhne","Number":"3101","RawContent":null,"Title":"Should always use Unicode in RichTextBox","State":"open","Body":"`RichTextBox` uses the latest RichEdit and as such should be able to remove the code paths where we're grabbing `Encoding` and converting back and forth from Unicode to ASCII. If we're using Unicode everywhere we can be more efficient and avoid conversion headaches.\r\n\r\nSee #3032 for an example of where this happens.","Url":"https://github.com/dotnet/winforms/issues/3101","RelatedDescription":"Open issue \"Should always use Unicode in RichTextBox\" (#3101)"},{"Id":"603606594","IsPullRequest":true,"CreatedAt":"2020-04-20T23:48:35","Actor":"JeremyKuhne","Number":"3100","RawContent":null,"Title":"Fix RichTextBox Rtf encoding","State":"open","Body":".NET Core Encoding.Default gets UTF-8, not the default code page. Change our code to get the code page as we're sending\r\ndata to the control as ASCII.\r\n\r\nUltimately we should remove all non-Unicode codePaths in RichTextBox. This should be possible as we're force loading the latest RichEdit.\r\n\r\nFixes #3032\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3100)","Url":"https://github.com/dotnet/winforms/pull/3100","RelatedDescription":"Open PR \"Fix RichTextBox Rtf encoding\" (#3100)"},{"Id":"603484569","IsPullRequest":false,"CreatedAt":"2020-04-20T19:38:29","Actor":"M-Lipin","Number":"3099","RawContent":null,"Title":"Accessibility: PropertyGrid sub-level item expanded/collapsed state is not correct","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nProperty Grid sub-level item accessibility: Narrator announces collapsed when Font Property node is expanded, `ExpandCollapse.ExpandCollapseState` value is `Collapsed(0)`.\r\n\r\n\r\n**Expected behavior:**\r\nCollapsed Property Grid sub-level items should be announced as collapsed and Inspect should show collapsed state for these items.\r\nExpanded Property Grid sub-level items should be announced as expanded and Inspect should show expanded state for these items.\r\n\r\n**Minimal repro:**\r\n1. Create WinForms app and add PropertyGrid control and Button to the form.\r\n2. Set PropertyGrid's SelectedObject to Button.\r\n3. Run the app and review the Font property of the button in PropertyGrid using Inspect: expand and collapse the Font property and review its collapsed/expanded state.\r\n\r\n![Inspect](https://user-images.githubusercontent.com/23213980/79792675-fab85800-8357-11ea-8be6-5626ef339929.png)\r\n![Announcement](https://user-images.githubusercontent.com/23213980/79792699-01df6600-8358-11ea-8fe4-a851da9d790e.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3099","RelatedDescription":"Open issue \"Accessibility: PropertyGrid sub-level item expanded/collapsed state is not correct\" (#3099)"},{"Id":"603431851","IsPullRequest":true,"CreatedAt":"2020-04-20T18:09:54","Actor":"weltkante","Number":"3098","RawContent":null,"Title":"Fix facade reference and unskip unit test","State":"open","Body":"Fixes #2413\r\n\r\n## Proposed changes\r\n\r\nAdd reference to System.Drawing facade in order to be able to unit-test it. If you don't do this you inherit the System.Drawing from shared framework `Microsoft.NetCore.App` which does not contain the same redirects as the WinForms version, in particular the `UITypeEditor` redirect is missing.\r\n\r\n## Open questions\r\n\r\n* In the issue discussion it was noted that WinForms should not update the facade versions to 5.0 but instead keep them at 4.0 like the shared framework does.\r\n  * The facades don't contain any code, they'll always be a redirect of the Desktop Version for compatibility and not get any new stuff\r\n  * WinForms and the shared framework should agree about versioning, if the base framework doesn't level its facades for 5.0 neither should do WinForms for facades its replacing.\r\n\r\n  The versioning problem does not prevent fixing the unit tests so it could be split off into a separate issue\r\n\r\n* The PR contains a workaround for dotnet/sdk#3254 - will create a follow-up issue to track removal of the workaround unless something better can be figured out\r\n\r\n## Customer Impact\r\n\r\nas is the PR has no customer impact\r\n\r\nonce we roll back the 5.0 versioning of System.Drawing and other facades this change is visible to users who already compiled against a 5.0 preview\r\n\r\n## Regression? \r\n\r\nunclear, probably not (the regression part of not redirecting UITypeEditor should already have been fixed, we just couldn't test it)\r\n\r\n## Risk\r\n\r\nlow, as-is the PR only affects unit tests\r\n\r\nonce we roll back the 5.0 versioning of System.Drawing and other facades there may be some risk of breaking people who already have been compiling against earlier 5.0 previews and built nuget packages and stuff, but thats probably acceptable since its a preview?\r\n\r\n## Test methodology\r\n\r\nskipped unit test now passes, test is now able to confirm what already was present in the product\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3098)","Url":"https://github.com/dotnet/winforms/pull/3098","RelatedDescription":"Open PR \"Fix facade reference and unskip unit test\" (#3098)"},{"Id":"603275470","IsPullRequest":true,"CreatedAt":"2020-04-20T14:19:11","Actor":"weltkante","Number":"3097","RawContent":null,"Title":"Avoid Application.Exit in unit tests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3095\r\n\r\n## Proposed changes\r\n\r\nDon't use `Application.Exit` because that will exit all threads and thus risks deadlock (and also makes other tests unstable if they exit unexpectedly). Using `Application.ExitThread` will exit just the current thread.\r\n\r\nIf the test was intended to cover `Application.Exit` usage it must be changed to execute in an isolated process since that method being global will interfere with other tests.\r\n\r\n## Customer Impact\r\n\r\nNone, issue is caused by unit test.\r\n\r\n## Regression? \r\n\r\nUnknown, caused by wrong usage of global API, no idea how that classifies.\r\n\r\n## Risk\r\n\r\nnone, this change is isolated to unit tests\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nRun `build.cmd -test` repeatedly locally to see if there are deadlocks.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3097)","Url":"https://github.com/dotnet/winforms/pull/3097","RelatedDescription":"Open PR \"Avoid Application.Exit in unit tests\" (#3097)"},{"Id":"603258538","IsPullRequest":true,"CreatedAt":"2020-04-20T13:55:50","Actor":"hughbe","Number":"3096","RawContent":null,"Title":"Avoid allocating array for ListBox SelectionMode.One","State":"open","Body":"## Proposed Changes\r\n- Avoid allocating array for ListBox SelectionMode.One\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3096)","Url":"https://github.com/dotnet/winforms/pull/3096","RelatedDescription":"Open PR \"Avoid allocating array for ListBox SelectionMode.One\" (#3096)"},{"Id":"603209619","IsPullRequest":false,"CreatedAt":"2020-04-20T12:44:04","Actor":"weltkante","Number":"3095","RawContent":null,"Title":"Deadlock caused by PropertyGridViewRowsAccessibleObjectTests","State":"open","Body":"**.NET Core Version:**\r\nmaster branch, compiled locally, probably present in all versions having this test but didn't check\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot relevant, you can probably cause it there too though\r\n\r\n**Problem description:**\r\nExecuting `Application.Exit` inside a `Form.Load` event handler can lead to a deadlock when using more than one UI thread. This is because Form.Load is invoked with locks already held and `Application.Exit` needs more global locks. These locks may already be held by a different UI thread currently waiting to create a new control.\r\n\r\nUpon further investigation it turns out the real problem is that `Application.Exit` wants to exit all threads not just the current UI threads application (thats why it needs a lock)\r\n* never use `Application.Exit` in multithreaded unit tests\r\n  * use isolated processes if you need to test something related with `Application.Exit`\r\n  * use `Application.ExitThread` to exit just the current thread (probably the intended behavior here)\r\n  * use `ApplicationContext` if you want controlled shutdown of a single application frame\r\n* generally you'll want to keep logic in `Form.Load` or `UserControl.Load` events very simple in the multithreaded unit tests because this logic is executed under locks. Testing complex load events should preferrably be done in separate processes.\r\n\r\n**Expected behavior:**\r\nNo deadlock\r\n\r\n**Minimal repro:**\r\nNot available. You could try repeatedly running the tests from console (`build.cmd -test`) but since this is a threading issue the deadlock is random and probably hard to reproduce. You might be able to build a more reliable repro scenario by repeatedly starting UI threads in a tight loop and having someone randomly call `Application.Exit` from a Load event handler.","Url":"https://github.com/dotnet/winforms/issues/3095","RelatedDescription":"Open issue \"Deadlock caused by PropertyGridViewRowsAccessibleObjectTests\" (#3095)"},{"Id":"603197985","IsPullRequest":true,"CreatedAt":"2020-04-20T12:24:27","Actor":"hughbe","Number":"3094","RawContent":null,"Title":"Add ListBox.IntegerCollection tests and fix bugs","State":"open","Body":"Proposed Changes\r\n- Validate owner in ListBox.IntegerCollection constructor: fixes #3092\r\n- Validate index in ListBox.IntegerCollection item accessor\r\n- Validate destination in LisBox.IntegerCollection.CopyTo\r\n- Make ListBox.IntegerCollection.IsSynchronized return false: contributes to #3088 \r\n\r\nShould I create issues for each of the other fixes?\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3094)","Url":"https://github.com/dotnet/winforms/pull/3094","RelatedDescription":"Open PR \"Add ListBox.IntegerCollection tests and fix bugs\" (#3094)"},{"Id":"603146325","IsPullRequest":false,"CreatedAt":"2020-04-20T10:58:50","Actor":"hughbe","Number":"3093","RawContent":null,"Title":"ListBox.IntegerCollection should contain unique values, but if we use the item setter, we can have duplicated","State":"open","Body":"* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n`ListBox.IntegerCollection` should be a collection of unique integers. However, if we call the `collection[index] = valueAlreadyInCollection` we can end up with duplicates - see repro\r\n\r\n**Expected behavior:**\r\n\r\nWe should not add the duplicate. We should also sort the array\r\n\r\n**Minimal repro:**\r\n\r\nNotice that the collection contains duplicates and is not sorted\r\n```cs\r\n[WinFormsFact]\r\npublic void ListBoxIntegerCollection_IListItem_Set_ReturnsExpected()\r\n{\r\n    using var owner = new ListBox();\r\n    IList collection = new ListBox.IntegerCollection(owner);\r\n    collection.Add(2);\r\n    collection.Add(1);\r\n    collection.Add(1);\r\n    collection.Add(3);\r\n\r\n    // Set first.\r\n    collection[0] = 4;\r\n    Assert.Equal(new int[] { 4, 2, 3 }, collection.Cast<int>());\r\n    Assert.Empty(owner.CustomTabOffsets);\r\n    Assert.False(owner.IsHandleCreated);\r\n    \r\n    // Set middle.\r\n    collection[1] = 1;\r\n    Assert.Equal(new int[] { 4, 1, 3 }, collection.Cast<int>());\r\n    Assert.Empty(owner.CustomTabOffsets);\r\n    Assert.False(owner.IsHandleCreated);\r\n    \r\n    // Set last.\r\n    collection[2] = 4;\r\n    Assert.Equal(new int[] { 4, 1, 4 }, collection.Cast<int>());\r\n    Assert.Empty(owner.CustomTabOffsets);\r\n    Assert.False(owner.IsHandleCreated);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3093","RelatedDescription":"Open issue \"ListBox.IntegerCollection should contain unique values, but if we use the item setter, we can have duplicated\" (#3093)"},{"Id":"603139466","IsPullRequest":false,"CreatedAt":"2020-04-20T10:48:04","Actor":"hughbe","Number":"3092","RawContent":null,"Title":"ListBox.IntegerCollection item indexer doesn't throw for some invalid indices","State":"open","Body":"* .NET Core Version: \r\nMaster branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\n`_innerArray` has a greater buffer size than the collection itself so if we index between `collection.Count` and `_innerArray.Length` then we return `0` (uninitialised buffer).\r\n\r\nALSO, if the collection is empty (and `_innerArray == null`) then we throw `NullReferenceException`\r\n\r\n```cs\r\npublic int this[int index]\r\n{\r\n    get\r\n    {\r\n        return innerArray[index];\r\n    }\r\n    set\r\n    {\r\n        if (index < 0 || index >= count)\r\n        {\r\n            throw new ArgumentOutOfRangeException(nameof(index), index, string.Format(SR.InvalidArgument, nameof(index), index));\r\n        }\r\n        innerArray[index] = (int)value;\r\n        owner.UpdateCustomTabOffsets();\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nWe should throw `ArgumentOutOfRangeException` in the setter as we do in the getter.\r\n\r\nNote this would change the exception from `IndexOutOfRangeException` or `NullReferenceException` but would be an improvement\r\n\r\n**Minimal repro:**\r\n\r\n```cs\r\n\r\n\r\n[WinFormsTheory]\r\n[InlineData(-1)]\r\n[InlineData(0)]\r\n[InlineData(1)]\r\npublic void ListBoxIntegerCollection_Item_GetInvalidIndexEmpty_ThrowsArgumentOutOfRangeException(int index)\r\n{\r\n    using var owner = new ListBox();\r\n    var collection = new ListBox.IntegerCollection(owner);\r\n    Assert.Throws<ArgumentOutOfRangeException>(\"index\", () => collection[index]);\r\n}\r\n\r\n[WinFormsTheory]\r\n[InlineData(-1)]\r\n[InlineData(1)]\r\n[InlineData(2)]\r\npublic void ListBoxIntegerCollection_Item_GetInvalidIndexNotEmpty_ThrowsArgumentOutOfRangeException(int index)\r\n{\r\n    using var owner = new ListBox();\r\n    var collection = new ListBox.IntegerCollection(owner);\r\n    collection.Add(1);\r\n    Assert.Throws<ArgumentOutOfRangeException>(\"index\", () => collection[index]);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3092","RelatedDescription":"Open issue \"ListBox.IntegerCollection item indexer doesn't throw for some invalid indices\" (#3092)"},{"Id":"602759466","IsPullRequest":true,"CreatedAt":"2020-04-20T03:42:30","Actor":"hughbe","Number":"3086","RawContent":null,"Title":"Extract ListBox classes","State":"closed","Body":"## Proposed Changes\r\n- Extract ListBox classes without cleanup\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3086)","Url":"https://github.com/dotnet/winforms/pull/3086","RelatedDescription":"Closed or merged PR \"Extract ListBox classes\" (#3086)"},{"Id":"602846966","IsPullRequest":false,"CreatedAt":"2020-04-19T23:12:49","Actor":"hughbe","Number":"3091","RawContent":null,"Title":"Test errors in Pipelines include Msbuild environment variable names","State":"open","Body":"See https://dev.azure.com/dnceng/public/_build/results?buildId=607683&view=ms.vss-test-web.build-test-results-tab\r\n\r\n![image](https://user-images.githubusercontent.com/1275900/79702279-9b950d80-829b-11ea-8af9-cc1f6fc98f22.png)\r\n\r\n\r\nWe have `$(AgentOsName)` in the logs which should be replaced with the real value","Url":"https://github.com/dotnet/winforms/issues/3091","RelatedDescription":"Open issue \"Test errors in Pipelines include Msbuild environment variable names\" (#3091)"},{"Id":"602845588","IsPullRequest":false,"CreatedAt":"2020-04-19T23:05:44","Actor":"hughbe","Number":"3090","RawContent":null,"Title":"It doesn't look like `IClassFixture<ThreadExceptionFixture>` is working","State":"open","Body":"See https://github.com/dotnet/winforms/pull/3089\r\n\r\nTest failures are hanging... Adding the code from `ThreadExceptionFixture` directly into the test class prevents the hang\r\n\r\n/cc @weltkante ","Url":"https://github.com/dotnet/winforms/issues/3090","RelatedDescription":"Open issue \"It doesn't look like `IClassFixture<ThreadExceptionFixture>` is working\" (#3090)"},{"Id":"602822422","IsPullRequest":true,"CreatedAt":"2020-04-19T21:18:08","Actor":"hughbe","Number":"3089","RawContent":null,"Title":"Consolidate CHARFORMATW and CHARFORMAT2W","State":"open","Body":"## Proposed Changes\r\n- Consolidate CHARFORMATW and CHARFORMAT2W\r\n\r\nWe only need one definition of `CHARFORMATW`, and that is the one with the most functionality, i.e. `CHARFORMAT2W`\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3089)","Url":"https://github.com/dotnet/winforms/pull/3089","RelatedDescription":"Open PR \"Consolidate CHARFORMATW and CHARFORMAT2W\" (#3089)"},{"Id":"602784994","IsPullRequest":false,"CreatedAt":"2020-04-19T18:16:54","Actor":"hughbe","Number":"3088","RawContent":null,"Title":"ListBox collections have varied `IsSynchronized` method implementations","State":"open","Body":"- `ListBox.SelectedIndexCollection` and `ListBox.IntegerCollection`  have `IsSynchronized == true`\r\n- `ListBox.SelectedObjectCollection` and `ListBox.ObjectCollection` have `IsSynchronized == false`\r\n\r\nIt appears both are actually not synchronized, so should return `IsSynchronized == false`\r\n","Url":"https://github.com/dotnet/winforms/issues/3088","RelatedDescription":"Open issue \"ListBox collections have varied `IsSynchronized` method implementations\" (#3088)"},{"Id":"602783297","IsPullRequest":false,"CreatedAt":"2020-04-19T18:09:55","Actor":"hughbe","Number":"3087","RawContent":null,"Title":"ListBox.SelectedIndexCollection modification works but IList versions throw NotSupportedException","State":"open","Body":"## Example Problems\r\nE.g.\r\n```cs\r\nvoid IList.Clear()\r\n{\r\n    throw new NotSupportedException(SR.ListBoxSelectedIndexCollectionIsReadOnly);\r\n}\r\n\r\npublic void Clear()\r\n{\r\n    if (owner != null)\r\n    {\r\n        owner.ClearSelected();\r\n    }\r\n}\r\n```\r\n\r\nAlso, the properties `IsFixedSize` and `IsReadOnly` return `true`, but this is quite clearly not the case\r\n\r\n## Proposed Changes\r\n- Modify `IsFixedSize` and `IsReadOnly` to `false`\r\n- Modify the IList modification methods to call the non-IList methods on the collection: `Add`, `Clear`, `Remove`\r\n\r\nThoughts? This would be breaking, but in the way that is good as we change exception to something functional: see https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/docs/coding-guidelines/breaking-changes.md","Url":"https://github.com/dotnet/winforms/issues/3087","RelatedDescription":"Open issue \"ListBox.SelectedIndexCollection modification works but IList versions throw NotSupportedException\" (#3087)"},{"Id":"602705815","IsPullRequest":true,"CreatedAt":"2020-04-19T12:43:42","Actor":"hughbe","Number":"3085","RawContent":null,"Title":"Add ToolStripDropDownItem tests and related test","State":"open","Body":"## Proposed Changes\r\n- Add ToolStripDropDownItem tests and related test\r\n- Remove dead code from ToolStripItem - `invalidatePainting`  always true\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3085)","Url":"https://github.com/dotnet/winforms/pull/3085","RelatedDescription":"Open PR \"Add ToolStripDropDownItem tests and related test\" (#3085)"},{"Id":"602601875","IsPullRequest":true,"CreatedAt":"2020-04-19T02:30:03","Actor":"paul1956","Number":"3083","RawContent":null,"Title":"Fixed or specifically suppressed all editorConfig issues in VB code","State":"open","Body":" Except \"Specify marshaling for P/Invoke string arguments\"\r\n\r\nFixes # related to Style of \"Single instance #3050\"\r\n\r\n## Proposed changes\r\nFix or specifically suppress all recommendations related to VB code in WinForms.\r\nThis does includes spelling errors where a real word was actually misspelled or had inconsistent spelling. removing ByVal, remove unused Imports statements, changes in string compare, correct name violations, adding ReadOnly. For public API's where following the recommendation would have changed the public API, a suppression Attribute was added with explanation (Public API).\r\n\r\n## Customer Impact\r\n- None, this effects developers working on the code base adding new code that has two styles.\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\nLow the only code changes is\r\n```VB\r\nMyString = \"\"\r\n' To\r\nMyString.Length  = 0\r\n' Or\r\nString.IsNullOrEmpty(MyString)\r\n```\r\n-\r\n\r\n## Test methodology\r\nAll existing tests Must pass\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3083)","Url":"https://github.com/dotnet/winforms/pull/3083","RelatedDescription":"Open PR \"Fixed or specifically suppressed all editorConfig issues in VB code\" (#3083)"},{"Id":"602577013","IsPullRequest":true,"CreatedAt":"2020-04-18T23:43:11","Actor":"dotnet-maestro[bot]","Number":"3082","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200420.15\r\n- **Date Produced**: 4/21/2020 3:19 AM\r\n- **Commit**: c409bd0d3d80d6c674bb99b3ec0b2c15a891112c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20220.15\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3082)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3082","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3082)"},{"Id":"602548293","IsPullRequest":true,"CreatedAt":"2020-04-18T21:07:45","Actor":"dotnet-maestro[bot]","Number":"3080","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200418.3\r\n- **Date Produced**: 4/18/2020 8:03 PM\r\n- **Commit**: 44ed52a8cd71d4dedc58943725a1fe3a14f4b38d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.2 to 5.0.0-preview.4.20218.3\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3080)","Url":"https://github.com/dotnet/winforms/pull/3080","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3080)"},{"Id":"602473271","IsPullRequest":true,"CreatedAt":"2020-04-18T14:31:17","Actor":"vladimir-krestov","Number":"3079","RawContent":null,"Title":"Fixing UI WinformsControls tests","State":"open","Body":"Fixes UI tests implementation \r\n\r\n## Proposed changes\r\n\r\n- Fix `TabIndex` of controls in `WinformsControlsTest` app to get correct Tab navigation\r\n- Add the ability to simulate key pressing on a non-main form\r\n- Make code refactoring for `MainForm` in `WinformsControlsTest` to have a harmonious structure of the text application\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No impact\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n### Before\r\n\r\n- We had incorrect tab indexes for buttons in the test app. It led to incorrect UI tests executing\r\n- UI test had incorrect focusing on a non-main test form\r\n\r\n### After\r\n\r\n- UI tests check WinForms controls correctly\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- UI testing\r\n- Manual testing\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET Core SDK: 5.0.100-alpha1-015536\r\n- Microsoft Windows [Version 10.0.18363.778]\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3079)","Url":"https://github.com/dotnet/winforms/pull/3079","RelatedDescription":"Open PR \"Fixing UI WinformsControls tests\" (#3079)"},{"Id":"602467692","IsPullRequest":true,"CreatedAt":"2020-04-18T14:25:16","Actor":"dotnet-maestro[bot]","Number":"3078","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200418.2\r\n- **Date Produced**: 4/18/2020 1:12 PM\r\n- **Commit**: cf66f084ca8b563c42cd814e8ce8b03519af51bd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.1 to 5.0.0-preview.4.20218.2\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3078)","Url":"https://github.com/dotnet/winforms/pull/3078","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3078)"},{"Id":"602446229","IsPullRequest":true,"CreatedAt":"2020-04-18T12:29:43","Actor":"RussKie","Number":"3077","RawContent":null,"Title":"Update Microsoft.NET.Test.Sdk to v16.5.0","State":"closed","Body":"Relates to https://github.com/dotnet/winforms/issues/2926\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3077)","Url":"https://github.com/dotnet/winforms/pull/3077","RelatedDescription":"Closed or merged PR \"Update Microsoft.NET.Test.Sdk to v16.5.0\" (#3077)"},{"Id":"601692350","IsPullRequest":true,"CreatedAt":"2020-04-18T12:29:19","Actor":"dotnet-maestro[bot]","Number":"3075","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200418.1\r\n- **Date Produced**: 4/18/2020 10:11 AM\r\n- **Commit**: 381754d32c1894fb381f114a5f7d20755bf4a8b7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20216.4 to 5.0.0-preview.4.20218.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3075)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3075","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3075)"},{"Id":"601685676","IsPullRequest":true,"CreatedAt":"2020-04-18T10:34:49","Actor":"RussKie","Number":"3074","RawContent":null,"Title":"Update testing.md","State":"closed","Body":"Add section about test theories based on a discussion with @bradwilson \r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3074)","Url":"https://github.com/dotnet/winforms/pull/3074","RelatedDescription":"Closed or merged PR \"Update testing.md\" (#3074)"},{"Id":"601301421","IsPullRequest":false,"CreatedAt":"2020-04-17T23:05:28","Actor":"DustinCampbell","Number":"3070","RawContent":null,"Title":"TableLayoutPanelDesigner and friends (FlowLayoutPanelDesigner, etc.) have not been ported to the WinForms runtime","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/issues/3070","RelatedDescription":"Closed issue \"TableLayoutPanelDesigner and friends (FlowLayoutPanelDesigner, etc.) have not been ported to the WinForms runtime\" (#3070)"},{"Id":"601546577","IsPullRequest":false,"CreatedAt":"2020-04-16T22:25:09","Actor":"DustinCampbell","Number":"3073","RawContent":null,"Title":"System.Windows.Forms.Design.ImageListCodeDomSerializer appears to be missing in the list of System.Design type forwards","State":"open","Body":"https://github.com/dotnet/winforms/blob/139ad6f018b334a12fdd30104bc9776b79466295/src/System.Design/src/System.Design.Forwards.cs#L28-L33","Url":"https://github.com/dotnet/winforms/issues/3073","RelatedDescription":"Open issue \"System.Windows.Forms.Design.ImageListCodeDomSerializer appears to be missing in the list of System.Design type forwards\" (#3073)"},{"Id":"601440058","IsPullRequest":true,"CreatedAt":"2020-04-16T20:50:42","Actor":"dotnet-maestro[bot]","Number":"3072","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200416.4\r\n- **Date Produced**: 4/16/2020 7:36 PM\r\n- **Commit**: 37f5933ce83a15e51f70d5d92586c0cbcd063bd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20215.10 to 5.0.0-preview.4.20216.4\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3072)","Url":"https://github.com/dotnet/winforms/pull/3072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3072)"},{"Id":"601346370","IsPullRequest":true,"CreatedAt":"2020-04-16T18:59:43","Actor":"M-Lipin","Number":"3071","RawContent":null,"Title":"Issue 2797 combo box selected item change forces handle creating","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2797 \r\nRelates to #3062\r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding the test that reveals the issue with forcing control handle creation on changing SelectedItem and SelectedIndex of the ComboBox control.\r\n- Adding the fix that prevents executing accessibility logic in case the control handle is not yet created and prevents preliminary handle creation (forcing handle creation) in this case.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Users will not experience side effects related to forcing preliminary handle creation.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![Before](https://user-images.githubusercontent.com/23213980/79495280-0a206400-802d-11ea-965b-d90467d5caaf.gif)\r\n\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![After](https://user-images.githubusercontent.com/23213980/79495294-0d1b5480-802d-11ea-943e-f1c784a8d2a3.gif)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual test.\r\n- Unit test.\r\n- Already tested and verified in 5.0 - no regression.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200-preview-014883 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3071)","Url":"https://github.com/dotnet/winforms/pull/3071","RelatedDescription":"Open PR \"Issue 2797 combo box selected item change forces handle creating\" (#3071)"},{"Id":"600887920","IsPullRequest":false,"CreatedAt":"2020-04-16T09:28:46","Actor":"SommerEngineering","Number":"3069","RawContent":null,"Title":"MouseWheel: WHEEL_DELTA not public","State":"open","Body":"* .NET Core Version: 3.1.102\r\n\r\n**Problem description:**\r\nThe documentation of the `MouseEventArgs.Delta` property (see [link](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.mouseeventargs.delta?view=netcore-3.1)) mentions the constant `WHEEL_DELTA` . However, this constant is not available to the public. It is located in the internal class `NativeMethods`, see [link](https://github.com/dotnet/winforms/blob/c7fdb009b620fc50f14f35250429df666c9a280d/src/System.Windows.Forms.Primitives/src/System/Windows/Forms/Internals/NativeMethods.cs#L80).\r\n\r\n**Expected behavior:**\r\nThe constant is available to the public in order to perform calculations with it. Alternatively, the constant gets not mentioned in the documentation.\r\n\r\nInconsistently, this constant is not mentioned in the `Control.MouseWheel` event documentation (see [link](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.mousewheel?view=netcore-3.1)). Instead, it refers to `SystemInformation.MouseWheelScrollLines`. Might these two documentations should be unified.\r\n\r\n**Minimal repro:**\r\nNot necessary in this case.","Url":"https://github.com/dotnet/winforms/issues/3069","RelatedDescription":"Open issue \"MouseWheel: WHEEL_DELTA not public\" (#3069)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-21T05:30:52.2510281Z","RunDurationInMilliseconds":731}