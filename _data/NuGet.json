{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11032207445","Type":"PullRequestEvent","CreatedAt":"2019-12-06T19:37:01","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7725","RelatedDescription":"Merged pull request \"[MSA] Encourage users to enable 2FA\" (#7725) at NuGet/NuGetGallery","RelatedBody":"This PR addresses \r\nhttps://github.com/NuGet/Engineering/issues/2816 - 2FA dialog, \r\nhttps://github.com/NuGet/Engineering/issues/2818 - Telemetry, \r\nhttps://github.com/NuGet/Engineering/issues/2819 - AAD 2FA logging\r\n\r\nAlso, added feature flags for showing the dialog and getting user feedback.\r\n\r\nThe below dialog will only be showed, once per login session, to the users who do not have 2FA enabled and sign in with MSA only.\r\n\r\n![image](https://user-images.githubusercontent.com/1646506/70096974-23c09200-15dd-11ea-9c91-c1044ba48408.png)\r\n\r\nFeedback will send an email to the support alias.\r\n\r\n![image](https://user-images.githubusercontent.com/1646506/70096982-28854600-15dd-11ea-9647-17567709ed24.png)\r\n"},{"Id":"11031451292","Type":"IssuesEvent","CreatedAt":"2019-12-06T17:46:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7747","RelatedDescription":"Opened issue \"Application Insights is broken in NuGetGallery\" (#7747) at NuGet/NuGetGallery","RelatedBody":"This is as of ServerCommon 2.60.0. It's possible 2.59.0 is also affected. 2.58.0 is last known good.\r\n\r\nChecked the following tables: \r\n\r\n- traces\r\n- requests\r\n- dependencies\r\n- customMetrics\r\n\r\nChecked the following apps:\r\n\r\n- NuGetGallery\r\n- DatabaseMigration.Gallery (DatabaseMigrationsTools)"},{"Id":"11031425056","Type":"IssuesEvent","CreatedAt":"2019-12-06T17:42:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7735","RelatedDescription":"Closed issue \"[C2R] Add initial projects for Catalog2Registration rebuild\" (#7735) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11031407587","Type":"PullRequestEvent","CreatedAt":"2019-12-06T17:40:27","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7746","RelatedDescription":"Merged pull request \"Merge branch 'master' into dev\" (#7746) at NuGet/NuGetGallery","RelatedBody":"This brings the hotfix back to dev."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11033955814","Type":"IssuesEvent","CreatedAt":"2019-12-07T01:23:12","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8888","RelatedDescription":"Opened issue \"Insertion of NuGet 5.5.0-preview.2.6330\" (#8888) at NuGet/Home","RelatedBody":"VS:\r\n- [x] Insertion PR: [217574](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/217574)\r\n\r\n.NET Core\r\n- [ ] SDK \r\n- [ ] CLI \r\n- [ ] Toolset "},{"Id":"11032576535","Type":"IssuesEvent","CreatedAt":"2019-12-06T20:31:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8887","RelatedDescription":"Opened issue \"NuGet.CommandLine strongname is different than NuGet.exe ilmerged strong name\" (#8887) at NuGet/Home","RelatedBody":"That means if we run tests such as: https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.CommandLine.Test/ExtensionsTests.cs#L13 with the ilmerged assembly instead of the regular one, it will fail. \r\n\r\nNote that I'm making a shift to use the il merged assemblies for testing in https://github.com/NuGet/NuGet.Client/pull/3003"},{"Id":"11030972448","Type":"IssuesEvent","CreatedAt":"2019-12-06T16:45:57","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8884","RelatedDescription":"Closed issue \"Apex tests without clearing output and error list in VS affect each other\" (#8884) at NuGet/Home","RelatedBody":"Discover this issue in netcore5.0 testing, found duplicate timestamps in log.\r\nWe should isolate tests by clearing output and error list at the beginning of each test.\r\n\r\nAlso found test CreateNetCoreProject_AddProjectReference passes incorrectly. \r\nWe should add a assert statement to make sure it fail when error occurs.\r\n"},{"Id":"11028506612","Type":"IssuesEvent","CreatedAt":"2019-12-06T11:51:22","Actor":"garylogin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8886","RelatedDescription":"Opened issue \"Copying nuget packages from one feed to another\" (#8886) at NuGet/Home","RelatedBody":"Problem:\r\n\r\nWe have several branches on the way to release our product....I mention 2 here:\r\nDevelopers machines\r\nDev Branch\r\nWe have a single feed for all packages called \"ourproduct\"\r\n\r\nThe developers build, create and test packages on their local machines.\r\n\r\nAt present they can use labels like alpha beta etc....prerelease versions..and they released directly to \"ourproduct\" feed.\r\n\r\nOur CI uses the \"Dev branch\" and the \"ourproduct\" feed\r\n\r\nWhen developers are ready they then check in their code to the \"Dev branch\", at present this can still reference a prerelease version.\r\nThe CI runs various tests on this branch which has access to the \"ourproduct\" feed.\r\n\r\nEverything works fine...but now we want to release to our clients, but our tested packages are marked as prerelease...they are immutable.\r\n\r\nI don't want to recompile the packages as different compilers might cause issues.\r\n\r\nSolution:\r\n\r\nSo what if I do not use prerelease package versions....and I have 2 feeds...1 called \"developers\" 1 called \"ourproduct\".\r\nDevelopers only use the \"developers\" feed\r\nCI uses Dev branch and \"ourproduct\" feed\r\n\r\nThe process could now be developers do work, when they are happy to check into \"Dev branch\" and **copy packages** to the \"ourproduct\" feed.\r\n\r\nThis way we only end up with releaseable packages in the \"ourproduct\" feed."},{"Id":"11023342486","Type":"IssuesEvent","CreatedAt":"2019-12-05T20:22:15","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8885","RelatedDescription":"Opened issue \"Apex test creating Netstandard2.0 project will fail without NuGetFallbackFolder\" (#8885) at NuGet/Home","RelatedBody":"According to [doc](https://docs.microsoft.com/en-us/dotnet/core/build/distribution-packaging#disk-layout), NuGetFallbackFolder is only used prior to .NET Core 3.0.\r\nSome of our Apex tests create netstandard2.0 project and then restore with empty feed in NuGet.Config.  When there is no lower version(<3.0) .NET Core on our CI machine, those tests will fail, for Netstandard.Library (and it's dependency microsoft.netcore.platforms) could not be resolved from NuGetFallbackFolder.\r\n\r\n\r\n"},{"Id":"11023157494","Type":"IssuesEvent","CreatedAt":"2019-12-05T19:57:37","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8884","RelatedDescription":"Opened issue \"Apex tests without clearing output and error list in VS affect each other\" (#8884) at NuGet/Home","RelatedBody":"Discover this issue in netcore5.0 testing, found duplicate timestamps in log.\r\nWe should isolate tests by clearing output and error list at the beginning of each test.\r\n\r\nAlso found test CreateNetCoreProject_AddProjectReference passes incorrectly. \r\nWe should add a assert statement to make sure it fail when error occurs.\r\n"},{"Id":"11018021832","Type":"IssuesEvent","CreatedAt":"2019-12-05T09:42:02","Actor":"jagruti-caterlyst","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8883","RelatedDescription":"Opened issue \"missing references related to sqlite\" (#8883) at NuGet/Home","RelatedBody":"Severity\tCode\tDescription\tProject\tPath\tFile\tLine\tSource\tSuppression State\r\nError\t\tThis project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is ..\\packages\\System.Data.SQLite.Core.1.0.112.0\\build\\net46\\System.Data.SQLite.Core.targets.\tCDC_Saleslyst\tC:\\Users\\JagrutiPadariya\\Documents\\GitHub\\CDC\\CDC_Saleslyst\\CDC_Saleslyst\tC:\\Users\\JagrutiPadariya\\Documents\\GitHub\\CDC\\CDC_Saleslyst\\CDC_Saleslyst\\CDC_Saleslyst.vbproj\t160\tBuild\t\r\n"},{"Id":"11015136471","Type":"IssuesEvent","CreatedAt":"2019-12-05T00:38:41","Actor":"bergbria","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8882","RelatedDescription":"Opened issue \"PluginFactory is global and caches failed tasks, making in-proc retries impossible\" (#8882) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nAs recommended by the Nuget team, I've been coding against the nuget binaries in an attempt to customize installation behavior (specifically to install a single package to the global cache without pulling in dependencies or making an extra copy, though that shouldn't matter here).\r\n\r\nMy installation tool runs on our distributed build machines, where high CPU load often causes processes to execute more slowly than normal from a wall-clock perspective. This in turn sometimes leads to timeout errors.\r\n\r\nIn our specific case, we want to retry on timeout. However, the nuget code currently makes doing this in-proc impossible.\r\n\r\nThis is the specific instance I've found. I cannot say whether there are more or not.\r\n\r\n* There is only a single global ``PluginManager`` object (``private static readonly Lazy<IPluginManager> _lazy``).\r\n* This in turn has a single ``IPluginFactory`` object  (``_pluginFactory``) that cannot be reset publicly and is not internally. Effectively, this means there is a single static global ``PluginFactory`` object.\r\n* PluginFactory contains this field: ``ConcurrentDictionary<string, Lazy<Task<IPlugin>>> _plugins;``\r\n    * Tasks are inserted and used from this dictionary regardless of whether they succeeded or not.\r\n* Effectively, if any of the tasks in ``_plugins`` fails, the only way to retry them is to restart the process."},{"Id":"11014942237","Type":"IssuesEvent","CreatedAt":"2019-12-05T00:05:14","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8881","RelatedDescription":"Opened issue \"VS:  solution restore perpetually fails due to race condition\" (#8881) at NuGet/Home","RelatedBody":"Imagine `IVsSolutionRestoreService*.NominateProjectAsync(...)` is called on two threads concurrently.\r\n\r\n1.  Both threads call [`SolutionRestoreWorker.ScheduleRestoreAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L273) nearly simultaneously.\r\n2.  Both threads call [`InitializeAsync()`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L152), but only one thread will actually perform initialization.  The other thread will not wait for initialization to complete and will start a background worker thread on [`StartBackgroundJobRunnerAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L395).\r\n3.  The background thread calls into [`IsSolutionFullyLoadedAsync()`](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L184) which assumes [`_vsSolution` has been initialized by the other thread](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L165).  If not, a `NullReferenceException` is thrown [here](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L189) and the background thread dies.\r\n4.  Since [a new background thread is never created](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L299) the `NullReferenceException` is perpetually rethrown [here](https://github.com/NuGet/NuGet.Client/blob/6f7be0986028256f05c894eac2f7816c85611984/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L335) and restore fails until you close and reopen the solution and you are lucky enough to not hit the race condition again."},{"Id":"11014684111","Type":"IssuesEvent","CreatedAt":"2019-12-04T23:23:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7842","RelatedDescription":"Closed issue \"dotnet restore failing with TaskCanceledException\" (#7842) at NuGet/Home","RelatedBody":"_From @ColinM9991 on March 1, 2019 13:9_\n\n## Steps to reproduce\r\n\r\nN/A\r\nThis issue is intermittent, however when it happens it then lingers for some time.\r\n\r\n## Description\r\n\r\nWe are using the dotnet CLI to restore packages for an ASP.NET Core application targeting .NET Core in our TeamCity build process, and are intermittently having failed builds where the restore task fails as soon as it picks up the first project file\r\n\r\n```\r\n[12:43:57]\tStep 1/13: Restore Packages (.NET CLI (dotnet)) (30s)\r\n[12:43:58]\t[Step 1/13] dotnet.exe restore Project.sln --disable-parallel\r\n[12:43:58]\t[Step 1/13] restore (29s)\r\n[12:43:58]\t[restore] Starting: \"C:\\Program Files\\dotnet\\dotnet.exe\" restore Project.sln --disable-parallel\r\n[12:43:58]\t[restore] in directory: C:\\buildAgent\\work\\g0124fa0e71e5f68\r\n[12:44:16]\t[restore]   Restoring packages for C:\\buildAgent\\work\\g0124fa0e71e5f68\\ProjectA\\Common\\ProjectB.csproj...\r\n[12:44:28]\t[restore] C:\\Program Files\\dotnet\\sdk\\2.2.102\\NuGet.targets(114,5): error : A task was canceled.\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] Build FAILED.\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore]     0 Warning(s)\r\n[12:44:28]\t[restore]     1 Error(s)\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] Time Elapsed 00:00:24.84\r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] \r\n[12:44:28]\t[restore] C:\\Program Files\\dotnet\\sdk\\2.2.102\\NuGet.targets(114,5): error : A task was canceled.\r\n[12:44:28]\t[restore] Process exited with code 1\r\n[12:44:28]\t[Step 1/13] Process exited with code 1\r\n[12:44:28]\t[Step 1/13] Step Restore Packages (.NET CLI (dotnet)) failed\r\n```\r\n\r\n## Expected  behavior\r\n\r\nIn the scenario where there is an actual error with the codebase then the dotnet CLI should return a meaningful error message as to what the problem is\r\n\r\nIn the scenario where nothing is wrong and the dotnet CLI fails for no reason, the expected behavior would be for the restore task to complete successfully as it does in other builds of the same codebase at previous times.\r\n\r\n## Actual behavior\r\n\r\n`dotnet restore` fails with `TaskCanceledException` and no indication as to what the issue is.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n[13:07:51]\t[Step 2/2] .NET Core SDK (reflecting any global.json):\r\n[13:07:51]\t[Step 2/2]  Version:   2.2.102\r\n[13:07:51]\t[Step 2/2]  Commit:    96ff75a873\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] Runtime Environment:\r\n[13:07:51]\t[Step 2/2]  OS Name:     Windows\r\n[13:07:51]\t[Step 2/2]  OS Version:  10.0.17763\r\n[13:07:51]\t[Step 2/2]  OS Platform: Windows\r\n[13:07:51]\t[Step 2/2]  RID:         win10-x64\r\n[13:07:51]\t[Step 2/2]  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.102\\\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] Host (useful for support):\r\n[13:07:51]\t[Step 2/2]   Version: 2.2.1\r\n[13:07:51]\t[Step 2/2]   Commit:  878dd11e62\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] .NET Core SDKs installed:\r\n[13:07:51]\t[Step 2/2]   1.1.12 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2]   2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2]   2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2]   2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n[13:07:51]\t[Step 2/2] \r\n[13:07:51]\t[Step 2/2] .NET Core runtimes installed:\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 1.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 1.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n[13:07:51]\t[Step 2/2]   Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\nNuGet.CommandLine version: 4.9.3\n\n_Copied from original issue: dotnet/cli#10905_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-12-07T05:30:47.0161732Z","RunDurationInMilliseconds":2722}