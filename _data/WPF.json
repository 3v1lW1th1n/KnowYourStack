{"Data":{"GitHub":{"Issues":[{"Id":"499600950","IsPullRequest":false,"CreatedAt":"2019-09-28T07:11:25","Actor":"Symbai","Number":"1972","RawContent":null,"Title":"Cannot access resource files on runtime","State":"closed","Body":"* .NET Core Version: 3.0\r\n* Windows version: Win10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nCannot access resource files on runtime when:\r\n\r\n- Adding them as Resource\r\n- Adding them as Embedded Resource\r\n- Adding them through resource file\r\n \r\n **Actual behavior:**\r\nEvery time I try to access it it's not part of the resources at all and therefore returns null.\r\n **Expected behavior:**\r\n Able to access resource files on runtime. \r\n **Minimal repro:**\r\n\r\n```\r\n<ItemGroup>\r\n  <EmbeddedResource Include=\"bla3\" />\r\n</ItemGroup>\r\n<ItemGroup>\r\n  <Resource Include=\"bla2\" />\r\n</ItemGroup>\r\n```\r\n \r\n```\r\n public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            //Fails\r\n            ResourceTest(\"bla2\");\r\n            ResourceTest(\"bla3\");\r\n            Debug.Assert(Application.Current.Properties[\"bla\"] != null);\r\n        }\r\n\r\n        static void ResourceTest(string resourceName)\r\n        {\r\n            try\r\n            {\r\n                var bla = Application.Current.TryFindResource(resourceName);\r\n                Debug.Assert(bla != null);\r\n            }\r\n            catch (Exception e) { Debug.Fail(e.ToString()); }\r\n        }\r\n```\r\n[ResourceTest.zip](https://github.com/dotnet/wpf/files/3664189/ResourceTest.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/1972","RelatedDescription":"Closed issue \"Cannot access resource files on runtime\" (#1972)"},{"Id":"499306332","IsPullRequest":false,"CreatedAt":"2019-09-27T23:28:52","Actor":"weltkante","Number":"1967","RawContent":null,"Title":"Reference Source for repository","State":"closed","Body":"[Roslyn](http://source.roslyn.io) and [CoreFX](https://source.dot.net/) have online browsable source for their repositories, we should have that for WPF and WinForms as well. I'm currently still using [Desktop Reference Source](https://referencesource.microsoft.com/) but once WPF starts moving apart this would be very useful for quick research during code reviews.","Url":"https://github.com/dotnet/wpf/issues/1967","RelatedDescription":"Closed issue \"Reference Source for repository\" (#1967)"},{"Id":"499570625","IsPullRequest":false,"CreatedAt":"2019-09-27T17:50:30","Actor":"carlossanlop","Number":"1971","RawContent":null,"Title":"[.NET Core 3][VB.NET][WPF] error BC30149: Class 'Application' must implement 'Sub InitializeComponent()' for interface 'IComponentConnector'.","State":"open","Body":"_From @onovotny on Tuesday, November 27, 2018 4:08:27 PM_\r\n\r\nWhen building a WPF application using VB.NET on .NET Core 3, you get the following error\r\n\r\n`obj\\Debug\\net462\\Application.g.vb(45,16): error BC30149: Class 'Application' must implement 'Sub InitializeComponent()' for interface 'IComponentConnector'.`\r\n\r\nThis is due to VB.NET applications using `Application.xaml` as the `ApplicationDefinition` item by default, instead of `App.xaml` like C#.\r\n\r\nThe workaround is to add the following into the `.vbproj` file:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <ApplicationDefinition Include=\"Application.xaml\" Condition=\"'$(EnableDefaultApplicationDefinition)' != 'false' And Exists('$(MSBuildProjectDirectory)/Application.xaml')\" />\r\n  <Page Remove=\"@(ApplicationDefinition)\" />\r\n</ItemGroup>\r\n```\r\n\r\n\r\n_Copied from original issue: dotnet/core#2080_","Url":"https://github.com/dotnet/wpf/issues/1971","RelatedDescription":"Open issue \"[.NET Core 3][VB.NET][WPF] error BC30149: Class 'Application' must implement 'Sub InitializeComponent()' for interface 'IComponentConnector'.\" (#1971)"},{"Id":"499540078","IsPullRequest":false,"CreatedAt":"2019-09-27T16:33:39","Actor":"spadapet","Number":"1970","RawContent":null,"Title":"Changing \"WPF Trace Settings\" for Visual Studio debugging has no effect","State":"open","Body":"* .NET Core Version: 3.1.0-preview1.19476.43\r\n* Windows version: Win10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? Yes but I think it's a bug in NetCore\r\n\r\n **Problem description:**\r\nVisual Studio has the dialog \"Options | Debugging | Output Window\" to change the trace level of certain WPF traces. You can turn off traces, or increase the level of traces per WPF feature. Changing the trace output level has no effect in NetCore, the default trace level is always chosen. For example, Data Binding traces will only ever output errors, which is the default.\r\n\r\n![image](https://user-images.githubusercontent.com/2523431/65785316-f224d980-e108-11e9-8107-c2042ff6cc96.png)\r\n \r\n **Minimal repro:**\r\n* Unzip the following project:\r\n[TestBindings.zip](https://github.com/dotnet/wpf/files/3663736/TestBindings.zip)\r\n* In Visual Studio 16.3.1, open the TestBindingsNetCore.sln solution\r\n* In Tools | Options | Debugging | Output Window | Data Binding, change the setting to \"All\" or \"Off\"\r\n* Build and run the project in the debugger (F5), which will have many Binding errors\r\n \r\n **Actual behavior:**\r\nBinding errors are shown in the output window \r\n\r\n **Expected behavior:**\r\n* If you set the output setting to \"All\" there should be many more Information items in the output window\r\n* If you set the output setting to \"Off\" there shouldn't be anything in the output window\r\n\r\nTry again with the project TestBindingsNetFx.sln and the setting will work fine (.NET Framework's WPF)","Url":"https://github.com/dotnet/wpf/issues/1970","RelatedDescription":"Open issue \"Changing \"WPF Trace Settings\" for Visual Studio debugging has no effect\" (#1970)"},{"Id":"499515423","IsPullRequest":true,"CreatedAt":"2019-09-27T15:38:17","Actor":"Youssef1313","Number":"1969","RawContent":null,"Title":"typo: pakage -> package","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/1969","RelatedDescription":"Open PR \"typo: pakage -> package\" (#1969)"},{"Id":"499378271","IsPullRequest":true,"CreatedAt":"2019-09-27T11:55:46","Actor":"dotnet-maestro[bot]","Number":"1968","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190927.1\r\n- **Date Produced**: 9/27/2019 10:39 AM\r\n- **Commit**: 1852a20161117ae4f72770ac8b646d119a396f7a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19477.1\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1968","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1968)"},{"Id":"499201917","IsPullRequest":false,"CreatedAt":"2019-09-27T02:31:55","Actor":"mysteryx93","Number":"1966","RawContent":null,"Title":"OnApplyTemplate not called on ContentControl","State":"open","Body":"Version: .NET Core 3\r\nWindows 10 x64\r\nIt works in .NET Framework 4.8\r\n\r\nI have a WPF user control deriving from ContentControl. It's working fine in .NET Framework 4.8. In .NET Core 3, however, OnApplyTemplate never gets called. (MediaPlayerWpf inherits from ContentControl)\r\n\r\n```\r\npublic class MpvMediaPlayer : MediaPlayerWpf\r\n{\r\n    public override void OnApplyTemplate()\r\n    {\r\n        base.OnApplyTemplate();\r\n        // This never gets called.\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/1966","RelatedDescription":"Open issue \"OnApplyTemplate not called on ContentControl\" (#1966)"},{"Id":"499170417","IsPullRequest":true,"CreatedAt":"2019-09-27T00:35:31","Actor":"dotnet-maestro[bot]","Number":"1965","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190926.2\r\n- **Date Produced**: 9/26/2019 11:51 PM\r\n- **Commit**: 3e3e5cde020a9084e8eab4c4f1a278b9d7e63566\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19476.2\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1965","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1965)"},{"Id":"499109859","IsPullRequest":false,"CreatedAt":"2019-09-26T20:51:26","Actor":"airbreather","Number":"1964","RawContent":null,"Title":"WindowsBase ref-assembly is missing some type forwards","State":"open","Body":"* .NET Core Version: **3.0.100**\r\n* Windows version: **Windows 10 v1809 (OS Build 17763.737)**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: **No**\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? **No**\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nCannot build when referencing very old WPF libraries that look for `System.Collections.ObjectModel.ObservableCollection<T>` in `WindowsBase.dll`\r\n\r\n **Actual behavior:**\r\n![image](https://user-images.githubusercontent.com/3792815/65722212-cad2fb80-e079-11e9-8df1-21a80342fbbb.png)\r\n \r\n **Expected behavior:**\r\n\r\nBuilds fine.\r\n \r\n **Minimal repro:**\r\n\r\n1. Unzip: [SampleSolution.zip](https://github.com/dotnet/wpf/files/3659810/SampleSolution.zip)\r\n1. Load the solution in Visual Studio 2019 (tested on Enterprise 16.3.1)\r\n1. Try to build it.\r\n1. Note that changing `SampleApp`'s `TargetFramework` to `net472`, it builds just fine.\r\n\r\n**My exploration**:\r\n\r\nShot in the dark, browsing the MSIL of `C:\\Program Files\\dotnet\\packs\\Microsoft.WindowsDesktop.App.Ref\\3.0.0\\ref\\netcoreapp3.0\\WindowsBase.dll`, it's missing these forwards that are present in `C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.0.0\\WindowsBase.dll`:\r\n\r\n```\r\n.class extern forwarder System.Collections.ObjectModel.ObservableCollection`1\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.ObjectModel.ReadOnlyObservableCollection`1\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.INotifyCollectionChanged\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.NotifyCollectionChangedAction\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.NotifyCollectionChangedEventArgs\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.NotifyCollectionChangedEventHandler\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/1964","RelatedDescription":"Open issue \"WindowsBase ref-assembly is missing some type forwards\" (#1964)"},{"Id":"499000747","IsPullRequest":true,"CreatedAt":"2019-09-26T16:48:17","Actor":"NaBian","Number":"1963","RawContent":null,"Title":"avoid boxing for xxxAnimationUsingKeyFrames","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/1963","RelatedDescription":"Open PR \"avoid boxing for xxxAnimationUsingKeyFrames\" (#1963)"},{"Id":"498408859","IsPullRequest":true,"CreatedAt":"2019-09-26T12:41:08","Actor":"grubioe","Number":"1956","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Updating README file to reflect the latest status post 3.0 launch. ","Url":"https://github.com/dotnet/wpf/pull/1956","RelatedDescription":"Closed or merged PR \"Update README.md\" (#1956)"},{"Id":"498765782","IsPullRequest":false,"CreatedAt":"2019-09-26T09:23:39","Actor":"vsfeedback","Number":"1962","RawContent":null,"Title":"WPF TreeView, virtualization, scroll, freeze","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/746990/wpf-treeview-virtualization-scroll-freeze.html)._\n\n---\nUsing VirtualizingStackPanel can freeze the execution.\nSteps to reproduce:\n1. Build a WPF application with TreeView, VirtualizingStackPanel , expanded nodes, release version,\n2. start the exe,\n3. scroll to the end of the tree,\n4. click on the scroll bar at the top and keep the left mouse button pressed.\nThe application freeze.\n\nTo reproduce try the following demo.:\n\n' XAML:\n\n&lt;Window x:Class=&quot;MainWindow&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:WpfApp1&quot;\n        mc:Ignorable=&quot;d&quot;\n        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;\n  &lt;Window.DataContext&gt;\n    &lt;local:ViewModel/&gt;\n  &lt;/Window.DataContext&gt;\n  &lt;Grid&gt;\n    &lt;TreeView ItemsSource=&quot;{Binding View}&quot; \n              VirtualizingPanel.IsVirtualizing=&quot;True&quot;\n              VirtualizingPanel.VirtualizationMode=&quot;Recycling&quot;\n              VirtualizingPanel.ScrollUnit=&quot;Item&quot;&gt;\n      &lt;TreeView.Resources&gt;\n        &lt;HierarchicalDataTemplate DataType=&quot;{x:Type local:Data}&quot; ItemsSource=&quot;{Binding Childs}&quot;&gt;\n          &lt;Label Content=&quot;{Binding Info}&quot;/&gt;\n        &lt;/HierarchicalDataTemplate&gt;\n      &lt;/TreeView.Resources&gt;\n      &lt;TreeView.ItemContainerStyle&gt;\n        &lt;Style TargetType=&quot;{x:Type TreeViewItem}&quot;&gt;\n          &lt;Setter Property=&quot;IsExpanded&quot; Value=&quot;True&quot;/&gt;\n        &lt;/Style&gt;\n      &lt;/TreeView.ItemContainerStyle&gt;\n    &lt;/TreeView&gt;\n  &lt;/Grid&gt;\n&lt;/Window&gt;\n\n' ViewModel:\n\nImports System.Collections.ObjectModel\nImports System.ComponentModel\n\nPublic Class ViewModel\n\nPublic Sub New()\n    For i = 1 To 100\n      Dim d As New Data With {. Info = $&quot;Node {i:000}&quot;}\n      For k = 1 To 10\n        Dim c As New Data With {. Info = $&quot;Child {i:000} {k:000}&quot;}\n        For l = 1 To 10\n          c.Childs.Add(New Data With {. Info = $&quot;Grandchild {i:000} {k:000} {l:000}&quot;})\n        Next\n        d.Childs.Add(c)\n      Next\n      col. Add(d)\n    Next\n    cvs. Source = col\n  End Sub\n\nPrivate col As New ObservableCollection(Of Data)\n  Private cvs As New CollectionViewSource\n\nPublic ReadOnly Property View As ICollectionView\n    Get\n      Return cvs. View\n    End Get\n  End Property\n\nEnd Class\n\n' Data class\n\nImports System.Collections.ObjectModel\n\nPublic Class Data\n  Public Property Info As String\n  Public Property Childs As New ObservableCollection(Of Data)\nEnd Class\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1962","RelatedDescription":"Open issue \"WPF TreeView, virtualization, scroll, freeze\" (#1962)"},{"Id":"497764770","IsPullRequest":false,"CreatedAt":"2019-09-26T04:27:19","Actor":"lekhasy","Number":"1948","RawContent":null,"Title":"Can't publish app for osx-x64","State":"closed","Body":"**Steps to produce:**\r\n\r\n1. Create a wpf project from WPF App (.Net core) template in visualstudio\r\n2. Click on build -> publish\r\n3. Change deployment mode to: Self-contained\r\n4. Change target framework to: osx-x64\r\n\r\n**Actual result:** the screen display this error:\r\n![image](https://user-images.githubusercontent.com/14049235/65525913-6c433b80-df1a-11e9-8539-9b939288c505.png)\r\n\r\nAnd the text in output window: \r\n`1>------ Publish started: Project: Demo, Configuration: Release Any CPU ------\r\n\r\n1>Restore completed in 0.51 ms for C:\\Users\\Admin\\source\\repos\\Demo\\Demo\\Demo.csproj.\r\n\r\n1>There was no runtime pack for Microsoft.WindowsDesktop.App.WPF available for the specified RuntimeIdentifier 'osx-x64'.\r\n\r\n========== Build: 0 succeeded, 0 failed, 1 up-to-date, 0 skipped ==========\r\n========== Publish: 0 succeeded, 1 failed, 0 skipped ==========`\r\n\r\n**Expected result:** Publish successfull\r\n\r\n**Environment**:\r\n.Net core version: 3.0\r\nVisual Studio 2019 version: 16.3.0","Url":"https://github.com/dotnet/wpf/issues/1948","RelatedDescription":"Closed issue \"Can't publish app for osx-x64\" (#1948)"},{"Id":"498597475","IsPullRequest":false,"CreatedAt":"2019-09-26T01:17:12","Actor":"mrNo0b","Number":"1961","RawContent":null,"Title":"Control selection reversed in Designer when FlowDirection=\"RightToLeft\"","State":"open","Body":"When I set **FlowDirection=\"RightToLeft\"** in MainWindow in WPF Core 3 app when I add controls to the MainWindow they shows up in their correct locations in Designer but when I want to click on them to select, the selection highlight is in the opposite side of the window\r\n`VS 2019 16.3.1`\r\n\r\n![designerIssue](https://user-images.githubusercontent.com/12209347/65650408-5f564300-e013-11e9-9744-85ecd26f1a60.png)","Url":"https://github.com/dotnet/wpf/issues/1961","RelatedDescription":"Open issue \"Control selection reversed in Designer when FlowDirection=\"RightToLeft\"\" (#1961)"},{"Id":"498372361","IsPullRequest":false,"CreatedAt":"2019-09-25T22:57:45","Actor":"yingfangdu","Number":"1953","RawContent":null,"Title":"[Watson] clr20r3: CLR_EXCEPTION_System.Collections.Generic.KeyNotFoundException_80131577_PresentationCore.dll!MS.Internal.DpiUtil+DpiAwarenessScope..ctor","State":"closed","Body":"This is the same issue [here](https://github.com/dotnet/wpf/issues/1198). As that one is closed, I create this new one for your attentions. \r\n\r\nWe have reproduced this crash too and this becomes the top crash in our product Microsoft Advertising Editor. and we are targeting 4.7.1 .NetFramework.\r\n\r\nCurrently we cannot offer upgrading to 4.8 because it is close to holiday seasons.\r\n\r\nAnd our product must enable this DPI awareness otherwise introducing rendering bugs.\r\n\r\nI would be great to have the fix for 4.7.\r\n\r\nAnd I have another question: this crash is caused by the setting per-monitor (V1) or per-monitor (V2)?\r\n\r\nOur rendering issue can be fixed by only enabling V1.\r\n\r\nThanks,\r\nYvonne\r\n\r\nat System.ThrowHelper.ThrowKeyNotFoundException() + 0x5 (C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll + 0x06000337)\r\nat System.Collections.Generic.Dictionary`2.get_Item(TKey key) + 0x1e (C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll + 0x06003923)\r\nat MS.Internal.DpiUtil+DpiAwarenessScope..ctor(DpiAwarenessContextValue dpiAwarenessContextValue, Boolean updateIfThreadInMixedHostingMode, Boolean updateIfWindowIsSystemAwareOrUnaware, IntPtr hWnd) + 0x37 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06005955)\r\nat System.Windows.SystemResources.CreateResourceChangeListenerWindow(DpiAwarenessContextValue dpiContextValue, Int32 x, Int32 y, String callerName) + 0x0 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\PresentationFramework\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationFramework.dll + 0x06000b81)\r\nat System.Windows.SystemResources.EnsureResourceChangeListener(HwndDpiInfo hwndDpiInfo) + 0x39 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\PresentationFramework\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationFramework.dll + 0x06000b80)\r\nat System.Windows.SystemResources.GetDpiAwarenessCompatibleNotificationWindow(HandleRef hwnd) + 0x29 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\PresentationFramework\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationFramework.dll + 0x06000b92)\r\nat System.Windows.Interop.HwndHost.BuildOrReparentWindow() + 0xd7 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\PresentationFramework\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationFramework.dll + 0x0600620c)\r\nat System.Windows.Interop.HwndHost.OnSourceChanged(Object sender, SourceChangedEventArgs e) + 0x96 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\PresentationFramework\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationFramework.dll + 0x06006208)\r\nat System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target) + 0x7 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06000baa)\r\nat System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs) + 0x3d (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06000bb7)\r\nat System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised) + 0xee (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x060005cf)\r\nat System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args) + 0x57 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x0600083c)\r\nat System.Windows.PresentationSource.UpdateSourceOfElement(DependencyObject doTarget, DependencyObject doAncestor, DependencyObject doOldParent) + 0x45 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06000b86)\r\nat System.Windows.PresentationSource.RootChanged(Visual oldRoot, Visual newRoot) + 0xa8 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06000b77)\r\nat System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value) + 0xe8 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06001a6e)\r\nat System.Windows.Interop.HwndSource.Dispose(Boolean disposing) + 0x4a (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06001ab4)\r\nat System.Windows.Interop.HwndSource.OnHwndDisposed(Object sender, EventArgs args) + 0x7 (C:\\windows\\Microsoft.Net\\assembly\\GAC_64\\PresentationCore\\v4.0_4.0.0.0__31bf3856ad364e35\\PresentationCore.dll + 0x06001ab1)\r\nat MS.Win32.HwndWrapper.Dispose(Boolean disposing, Boolean isHwndBeingDestroyed) + 0x14 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0__31bf3856ad364e35\\WindowsBase.dll + 0x0600019c)\r\nat MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled) + 0x66 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0__31bf3856ad364e35\\WindowsBase.dll + 0x060001a3)\r\nat MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o) + 0x36 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0__31bf3856ad364e35\\WindowsBase.dll + 0x06000193)\r\nat System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs) + 0x77 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0__31bf3856ad364e35\\WindowsBase.dll + 0x06000f73)\r\nat System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler) + 0x2 (C:\\windows\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0__31bf3856ad364e35\\WindowsBase.dll + 0x06000f72)\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1953","RelatedDescription":"Closed issue \"[Watson] clr20r3: CLR_EXCEPTION_System.Collections.Generic.KeyNotFoundException_80131577_PresentationCore.dll!MS.Internal.DpiUtil+DpiAwarenessScope..ctor\" (#1953)"},{"Id":"498505755","IsPullRequest":true,"CreatedAt":"2019-09-25T21:47:50","Actor":"vatsan-madhavan","Number":"1960","RawContent":null,"Title":"Mark ProjectTemplates and Microsoft.NET.Sdk.WindowsDesktop as NonShipping","State":"closed","Body":"Fixes #1957 \r\n\r\nMark the following packages with `<IsShipping>false</IsShipping>`\r\n\r\n- Microsoft.NET.Sdk.WindowsDesktop\r\n- Microsoft.DotNet.Wpf.ProjectTemplates\r\n\r\nThese are transport packages and ship exclusively via the SDK. Importantly, these should not be marked for publishing to NuGet.","Url":"https://github.com/dotnet/wpf/pull/1960","RelatedDescription":"Closed or merged PR \"Mark ProjectTemplates and Microsoft.NET.Sdk.WindowsDesktop as NonShipping\" (#1960)"},{"Id":"498439033","IsPullRequest":false,"CreatedAt":"2019-09-25T21:47:50","Actor":"vatsan-madhavan","Number":"1957","RawContent":null,"Title":"Mark Microsoft.NET.Sdk.WindowsDesktop and Microsoft.DotNet.Wpf.ProjectTemplates with IsShippingPackage=False","State":"closed","Body":"Mark the following packages with `<IsShippingPackage>false</IsShippingPackage>`\r\n\r\n- `Microsoft.NET.Sdk.WindowsDesktop` \r\n- `Microsoft.DotNet.Wpf.ProjectTemplates` \r\n\r\nThese are transport packages and ship exclusively via the SDK. Importantly, these should not be marked for publishing to NuGet. \r\n\r\nThis change is needed in `release/3.0`, `release/3.1` and `master`. ","Url":"https://github.com/dotnet/wpf/issues/1957","RelatedDescription":"Closed issue \"Mark Microsoft.NET.Sdk.WindowsDesktop and Microsoft.DotNet.Wpf.ProjectTemplates with IsShippingPackage=False\" (#1957)"},{"Id":"498500102","IsPullRequest":true,"CreatedAt":"2019-09-25T21:05:09","Actor":"vatsan-madhavan","Number":"1959","RawContent":null,"Title":"Mark ProjectTemplates and Microsoft.NET.Sdk.WindowsDesktop as NonShipping","State":"closed","Body":"Fixes #1957 \r\n\r\nMark the following packages with `<IsShipping>false</IsShipping>`\r\n\r\n- Microsoft.NET.Sdk.WindowsDesktop\r\n- Microsoft.DotNet.Wpf.ProjectTemplates\r\n\r\nThese are transport packages and ship exclusively via the SDK. Importantly, these should not be marked for publishing to NuGet.","Url":"https://github.com/dotnet/wpf/pull/1959","RelatedDescription":"Closed or merged PR \"Mark ProjectTemplates and Microsoft.NET.Sdk.WindowsDesktop as NonShipping\" (#1959)"},{"Id":"498496185","IsPullRequest":true,"CreatedAt":"2019-09-25T21:04:48","Actor":"vatsan-madhavan","Number":"1958","RawContent":null,"Title":"Mark ProjectTemplates and Microsoft.NET.Sdk.WindowsDesktop as NonShipping","State":"closed","Body":"Fixes #1957 \r\n\r\nMark the following packages with `<IsShipping>false</IsShipping>`\r\n\r\n- Microsoft.NET.Sdk.WindowsDesktop\r\n- Microsoft.DotNet.Wpf.ProjectTemplates\r\n\r\nThese are transport packages and ship exclusively via the SDK. Importantly, these should not be marked for publishing to NuGet.","Url":"https://github.com/dotnet/wpf/pull/1958","RelatedDescription":"Closed or merged PR \"Mark ProjectTemplates and Microsoft.NET.Sdk.WindowsDesktop as NonShipping\" (#1958)"},{"Id":"497955770","IsPullRequest":false,"CreatedAt":"2019-09-25T18:01:22","Actor":"vatsan-madhavan","Number":"1952","RawContent":null,"Title":"Prepare release/3.0 branch for servicing","State":"closed","Body":"In preparation for 3.0.1,\r\n• Versions go to the next patch release to 3.0.1\r\n• Prerelease label goes to servicing","Url":"https://github.com/dotnet/wpf/issues/1952","RelatedDescription":"Closed issue \"Prepare release/3.0 branch for servicing\" (#1952)"},{"Id":"498399053","IsPullRequest":true,"CreatedAt":"2019-09-25T16:37:00","Actor":"dotnet-maestro[bot]","Number":"1955","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e226e5ed-6125-48cb-94d5-08d690bc143a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:e226e5ed-6125-48cb-94d5-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1955","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1955)"},{"Id":"498393263","IsPullRequest":true,"CreatedAt":"2019-09-25T16:25:19","Actor":"dotnet-maestro[bot]","Number":"1954","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1954","RelatedDescription":"Open PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#1954)"},{"Id":"497556923","IsPullRequest":false,"CreatedAt":"2019-09-25T02:04:28","Actor":"aiqinxuancai","Number":"1944","RawContent":null,"Title":"wpf exe(.net core 3.0) unable to run on win7 sp1","State":"closed","Body":"* .NET Core Version: 3.0 official\r\n* Windows version: win7 sp1,（use win10 1903 + vs2019 16.3 publish） \r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions here: https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nuse vs2019 16.3 to create a wpf .net core3 project and then publish it. \r\ninstalled a new win7sp1 system, copy publish to this system,  nothing happens after double click.\r\n![image](https://user-images.githubusercontent.com/4475018/65497180-5fa7ee80-deec-11e9-9c25-fee57cd3398b.png)\r\n\r\ni tried to add code positioning issues, but it was not executed.\r\n![image](https://user-images.githubusercontent.com/4475018/65497581-10ae8900-deed-11e9-8417-78633229cd40.png)\r\n\r\ni originally thought it was a problem with vc runtime, but it seems that it is no longer needed in the   .net core3.0 official version.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n nothing happens after double clicking.\r\n\r\n **Expected behavior:**\r\nrun and pop window.\r\n\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1944","RelatedDescription":"Closed issue \"wpf exe(.net core 3.0) unable to run on win7 sp1\" (#1944)"},{"Id":"497955252","IsPullRequest":true,"CreatedAt":"2019-09-24T23:01:29","Actor":"vatsan-madhavan","Number":"1951","RawContent":null,"Title":"Update branding for 3.0.1 servicing and turn off stable builds","State":"closed","Body":"In preparation for 3.0.1, \r\n•\tVersions go to the next patch release to 3.0.1\r\n•\tPrerelease label goes to servicing\r\n\r\nFixes https://github.com/dotnet/wpf/issues/1952","Url":"https://github.com/dotnet/wpf/pull/1951","RelatedDescription":"Closed or merged PR \"Update branding for 3.0.1 servicing and turn off stable builds\" (#1951)"},{"Id":"497942928","IsPullRequest":true,"CreatedAt":"2019-09-24T22:23:53","Actor":"SamBent","Number":"1949","RawContent":null,"Title":"WPF TextBox insertion caret does not render when moved to lower DPI monitor in a PMAv2 process","State":"closed","Body":"Description\r\n\r\nTextBox insertion caret fails to render when on a lower DPI monitor than primary when per-monitor awareness is enabled.\r\n\r\nCustomer Impact\r\n\r\nVS features that rely on Text Caret position (search controls, commit messages, Editor, etc) are unable to easily tell where their focus is when using these features if PMA support is enabled and the text box is rendered off the primary display.\r\n\r\nRegression\r\n\r\nNo. (Port of .NET 4.8 servicing fix)\r\n\r\nRisk\r\n\r\nLow\r\n\r\nFixes #1774\r\nWPF TextBox insertion caret does not render when moved to lower DPI monitor in a PMAv2 process.","Url":"https://github.com/dotnet/wpf/pull/1949","RelatedDescription":"Closed or merged PR \"WPF TextBox insertion caret does not render when moved to lower DPI monitor in a PMAv2 process\" (#1949)"},{"Id":"497948940","IsPullRequest":true,"CreatedAt":"2019-09-24T22:21:00","Actor":"dotnet-maestro[bot]","Number":"1950","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190924.4\r\n- **Date Produced**: 9/24/2019 9:52 PM\r\n- **Commit**: 066b5db8f092c09d8e2d46c27d355e29d1d28d69\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19474.4\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1950","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1950)"},{"Id":"497735818","IsPullRequest":true,"CreatedAt":"2019-09-24T14:44:23","Actor":"Simon-IT","Number":"1947","RawContent":null,"Title":"Fix for issue 1883","State":"open","Body":"More command-line messages are shown into the prompt window when the WPF file copy procedure is used. It has been modified the source directory of the binary files from 3.0 to 5.0.","Url":"https://github.com/dotnet/wpf/pull/1947","RelatedDescription":"Open PR \"Fix for issue 1883\" (#1947)"},{"Id":"497689910","IsPullRequest":false,"CreatedAt":"2019-09-24T13:29:57","Actor":"miloush","Number":"1946","RawContent":null,"Title":"FrameworkElement.Language does not use culture user overrides","State":"open","Body":"* .NET Core Version: 3.0.100 \r\n* Windows version: 18985.1.amd64fre.vb_release.190913-1426\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n**Problem description:**\r\nApplying `FrameworkElement.Language` and related `Language` properties does not take into account current culture settings. There is no way how to supply a specific instance of CultureInfo to the WPF infrastructure.\r\n\r\n**Minimal repro:**\r\n```xml\r\n<Window x:Class=\"TestWpfBugs.StaticProperties.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:s=\"clr-namespace:System;assembly=mscorlib\"\r\n        Language=\"en-GB\">\r\n    <TextBlock DataContext=\"{x:Static s:DateTime.Now}\" Text=\"{Binding}\" />\r\n</Window>\r\n```\r\n\r\n(this assumes English (United Kingdom) to be used for formatting. Use other cultures accordingly.)\r\n\r\nGo to _Settings > Time and Language > Region > Change data formats_ and change _Short date_ format to a non-default option, e.g. _yyyy-MM-dd_. Run the WPF app.\r\n\r\n **Actual behavior:** Current culture settings not respected, the date is shown as dd/MM/yyyy.\r\n \r\n **Expected behavior:** The date to be in the selected format.\r\n \r\nUltimately, the `XmlLanguage` calls `new CultureInfo(name, useUserOverride)` when converting the string into culture. The actual behavior passes `false` for the `useUserOverride` while the expected behavior would mean passing `true` instead.\r\n\r\nAs a result, there isn't any way I am aware of to make the WPF infrastructure use the current culture that user prefers other than annotating all data bindings and template bindings with converters with explicit cultures, which is a considerable performance hit if possible at all.\r\n\r\nClearly changing the current behavior would not only be a compatibility break but also prevent people from using non-overridden cultures, but there might be other solutions, such as (in decreasing number of scenarios it would allow):\r\n\r\n1. letting developers to override language with an instance `CultureInfo` rather than just a name string, possible with an extra property of type `CultureInfo` that would be used if set (either on `XmlLanguage` or FE, otherwise fallback to `Language`.\r\n2. introducing new property e.g. `UseLanguageOverride` on `XmlLanguage` supporting returning user overridden cultures, possibly but not necessarily with an extra property on FE too.\r\n3. introducing special XML language strings meaning \"current culture\" and \"current UI culture\".\r\n\r\nAny thoughts?\r\n","Url":"https://github.com/dotnet/wpf/issues/1946","RelatedDescription":"Open issue \"FrameworkElement.Language does not use culture user overrides\" (#1946)"},{"Id":"497608056","IsPullRequest":true,"CreatedAt":"2019-09-24T11:30:48","Actor":"dotnet-maestro[bot]","Number":"1945","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190924.2\r\n- **Date Produced**: 9/24/2019 10:26 AM\r\n- **Commit**: 8ecc2b49acfd44f607d4ad9b7add1e80dcb3d88d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19474.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1945","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1945)"},{"Id":"497438647","IsPullRequest":true,"CreatedAt":"2019-09-24T04:30:43","Actor":"dotnet-maestro[bot]","Number":"1943","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190923.6\r\n- **Date Produced**: 9/24/2019 3:30 AM\r\n- **Commit**: c5b5d94afd2fc1b338ce03c7e17bae6329e23d03\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19473.6\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1943","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1943)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-09-29T05:30:56.991288Z","RunDurationInMilliseconds":759}