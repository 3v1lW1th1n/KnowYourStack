{"Data":{"GitHubIssues":{"Issues":[{"Id":"339282794","IsPullRequest":false,"CreatedAt":"2018-07-09T02:12:15","Actor":"Sheko007","Number":"1100","RawContent":null,"Title":"How To Use it With MVC","State":"open","Body":"How To Use Blazor with asp.net core MVC  ","Url":"https://github.com/aspnet/Blazor/issues/1100","RelatedDescription":"Open issue \"How To Use it With MVC\" (#1100)"},{"Id":"339186019","IsPullRequest":true,"CreatedAt":"2018-07-08T00:40:23","Actor":"jnm2","Number":"1099","RawContent":null,"Title":"Removed trailing space from template survey link","State":"open","Body":"Before:\r\n<img src=\"https://user-images.githubusercontent.com/8040367/42415716-bcfb6118-8225-11e8-95da-72fc089502ae.png\" width=\"50%\" />\r\n\r\nAfter:\r\n<img src=\"https://user-images.githubusercontent.com/8040367/42415715-b903541c-8225-11e8-94d9-35f7d1f77f98.png\" width=\"50%\" />","Url":"https://github.com/aspnet/Blazor/pull/1099","RelatedDescription":"Open PR \"Removed trailing space from template survey link\" (#1099)"},{"Id":"339163639","IsPullRequest":false,"CreatedAt":"2018-07-07T21:28:50","Actor":"MihaMarkic","Number":"1096","RawContent":null,"Title":"A directory of 3rd party Blazor components","State":"closed","Body":"I'm sure this question has been asked before, but right now I can't find it:\r\nis there a directory of 3rd party Blazor components.\r\n\r\nIt'd be certainly nice to have one.","Url":"https://github.com/aspnet/Blazor/issues/1096","RelatedDescription":"Closed issue \"A directory of 3rd party Blazor components\" (#1096)"},{"Id":"339174864","IsPullRequest":false,"CreatedAt":"2018-07-07T21:05:22","Actor":"simonziegler","Number":"1098","RawContent":null,"Title":"MessagePack not supported by MonoPlatform?","State":"open","Body":"I have experimented with using MessagePack (https://github.com/neuecc/MessagePack-CSharp) with Blazor to speed up serialization and deserialization over Http from server to client. I have checked that I can serialize and deserialize on the server with success, and that the byte array as it is created on the server is correctly decoded on the client (same sized array and the first and last bytes are the same).\r\n\r\nHowever it looks like Mono doesn't support MessagePack for use on the Blazor client -  see screen shot of Firefox's console output below. Anybody got any views? Am I doing something wrong (I hope so), or is this just unsupported stuff?\r\n\r\nThanks,     Simon\r\n\r\n![image](https://user-images.githubusercontent.com/11708435/42414646-42b81d54-8231-11e8-84a1-275b1a678183.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1098","RelatedDescription":"Open issue \"MessagePack not supported by MonoPlatform?\" (#1098)"},{"Id":"339166765","IsPullRequest":false,"CreatedAt":"2018-07-07T18:58:02","Actor":"ctrl-alt-d","Number":"1097","RawContent":null,"Title":"Error: \"The terminfo database is invalid.\" following instructions.","State":"closed","Body":"I just follow startup instructions and `Unhandled Exception: System.InvalidOperationException: The terminfo database is invalid.` error occurs:\r\n\r\n```\r\n[dani@localhost tmp]$ dotnet --version\r\n2.1.301\r\n[dani@localhost tmp]$ dotnet new -i Microsoft.AspNetCore.Blazor.Templates\r\n  Restoring packages for /home/dani/.templateengine/dotnetcli/v2.1.301/scratch/restore.csproj...\r\n  Installing Microsoft.AspNetCore.Blazor.Templates 0.4.0.\r\n  Generating MSBuild file /home/dani/.templateengine/dotnetcli/v2.1.301/scratch/obj/restore.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/dani/.templateengine/dotnetcli/v2.1.301/scratch/obj/restore.csproj.nuget.g.targets.\r\n  Restore completed in 2.73 sec for /home/dani/.templateengine/dotnetcli/v2.1.301/scratch/restore.csproj.\r\n...\r\n\r\n[dani@localhost tmp]$ dotnet new blazor -o BlazorApp1\r\nThe template \"Blazor (standalone)\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on BlazorApp1/BlazorApp1.csproj...\r\n  Restoring packages for /tmp/BlazorApp1/BlazorApp1.csproj...\r\n  Restore completed in 46.1 ms for /tmp/BlazorApp1/BlazorApp1.csproj.\r\n  Generating MSBuild file /tmp/BlazorApp1/obj/BlazorApp1.csproj.nuget.g.props.\r\n  Generating MSBuild file /tmp/BlazorApp1/obj/BlazorApp1.csproj.nuget.g.targets.\r\n  Restore completed in 141.32 ms for /tmp/BlazorApp1/BlazorApp1.csproj.\r\n\r\nRestore succeeded.\r\n\r\n[dani@localhost tmp]$ cd BlazorApp1\r\n[dani@localhost BlazorApp1]$ dotnet run\r\n\r\nUnhandled Exception: System.InvalidOperationException: The terminfo database is invalid.\r\n   at System.TermInfo.Database..ctor(String term, Byte[] data)\r\n   at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)\r\n   at System.TermInfo.Database.ReadDatabase(String term)\r\n   at System.TermInfo.Database.ReadActiveDatabase()\r\n   at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.ConsolePal.EnsureInitializedCore()\r\n   at System.ConsolePal.ControlCHandlerRegistrar.Register()\r\n   at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.AttachCtrlcSigtermShutdown(CancellationTokenSource cts, ManualResetEventSlim resetEvent, String shutdownMessage)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.<RunAsync>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(IWebHost host)\r\n   at Microsoft.AspNetCore.Blazor.Cli.Program.Main(String[] args)\r\n```\r\n\r\nRuns right with razor ( `dotnet new razor` )","Url":"https://github.com/aspnet/Blazor/issues/1097","RelatedDescription":"Closed issue \"Error: \"The terminfo database is invalid.\" following instructions.\" (#1097)"},{"Id":"339150513","IsPullRequest":false,"CreatedAt":"2018-07-07T14:37:21","Actor":"Lupusa87","Number":"1095","RawContent":null,"Title":"Blazor component custom event","State":"open","Body":"I have Blazor custom component, want to add **custom event** and than to subscribe for it where it will be consumed.\r\nPlease see [my project](https://lupusablazordemos.azurewebsites.net/)\r\nFor example I am adding **several** Custom components on index page, my custom component has **delete icon**, when user clicks on particular components delete icon it will **invoke delete event**.\r\nWhen I add component to index page I need to **subscribe** for this event and when it will be fired to remove this component, in subscribed method will be found this component (from eventArgs ), remove it from list and refresh UI.\r\nHave tried some ways but **can't find solution** till now.\r\nThinking to make parent component (also Blazor custom component) where will happen adding child components and to do it **from code** with RenderTreeBuilder, so in this case I think will able to subscribe on custom event. I was not able to override BuildRenderTree in index page, guess because it is not blazor component.\r\nWhen I add custom component to UI and try to subscribe it **can't see my custom event**.\r\nPlease see some code:\r\n```\r\npublic class Component1_Logic : BlazorComponent\r\n{\r\n        public event EventHandler onDelete;\r\n\r\n        void RiseOnDelete()\r\n        {\r\n           onDelete?.Invoke(this, EventArgs.Empty);\r\n        }\r\n\r\n\r\n       //called from delete icon\r\n        void cmd_delete()\r\n        {\r\n           RiseOnDelete();\r\n        } \r\n}\r\n```\r\nIndex page UI\r\n// can't see onDelete event\r\n`<Component1 onDelete=\"@someMethod\"/>`\r\n\r\nI am not sure how correct is this text but hope you understand what I aim to achieve.\r\n\r\nAlso related issue:\r\n How to bind custom component direct way?\r\n```\r\n @foreach (var city in Components_List)\r\n    {\r\n        <div>\r\n          // regular way\r\n           <Component1 city_Name=\"@city.Name\" canvas_WidthAndHeight=\"@city.WidthAndHeight\" time_Diff=\"@city.TimeDiff\"/>\r\n\r\n         // desired syntax, here city is custom component\r\n           @city\r\n        </div>\r\n    }\r\n```\r\n\r\nThank you!","Url":"https://github.com/aspnet/Blazor/issues/1095","RelatedDescription":"Open issue \"Blazor component custom event\" (#1095)"},{"Id":"339145168","IsPullRequest":false,"CreatedAt":"2018-07-07T13:13:37","Actor":"uazo","Number":"1094","RawContent":null,"Title":"Implementation of RenderFragment<T>","State":"open","Body":"I would like to submit a possible implementation of `RenderFragment<T>` to the Blazor community. Source code is here: https://github.com/uazo/Blazor/tree/dev-experimental-templated-component. \r\nThis time before doing a pull request I ask here :)\r\n\r\nAn example is worth a thousand words:\r\n\r\n```\r\n<ComponentTemplateTest>\r\n    <ComponentTemplateTest.Template>\r\n        test simple template\r\n    </ComponentTemplateTest.Template>\r\n\r\n    <ComponentTemplateTest.TemplateWithInt WithParams=\"param1\">\r\n        @param1\r\n    </ComponentTemplateTest.TemplateWithInt>\r\n\r\n    <ComponentTemplateTest.TemplateWithObject WithParams=\"paramObject\">\r\n        <div>\r\n            propint = @paramObject.PropInt\r\n        </div>\r\n        <div>\r\n            PropString = @paramObject.PropString\r\n        </div>\r\n    </ComponentTemplateTest.TemplateWithObject>\r\n\r\n    <div>this is childcontent (1)</div>\r\n    <div>this is childcontent (2)</div>\r\n</ComponentTemplateTest>\r\n```\r\n\r\nwill be renderer as\r\n\r\n```\r\nbuilder.OpenComponent<StandaloneApp.Pages.testtemplated.ComponentTemplateTest>(3);\r\nbuilder.AddAttribute(4, \"ChildContent\", (Microsoft.AspNetCore.Blazor.RenderFragment)((builder2) => {\r\n    builder2.OpenElement(5, \"div\");\r\n    builder2.AddContent(6, \"this is childcontent (1)\");\r\n    builder2.CloseElement();\r\n    builder2.OpenElement(7, \"div\");\r\n    builder2.AddContent(8, \"this is childcontent (2)\");\r\n    builder2.CloseElement();\r\n}\r\n));\r\nbuilder.AddAttribute(9, \"Template\", (Microsoft.AspNetCore.Blazor.RenderFragment)((builder2) => {\r\n    builder2.AddContent(10, \"\\n        test simple template\\n    \");\r\n}\r\n));\r\nbuilder.AddAttribute(11, \"TemplateWithInt\", (Microsoft.AspNetCore.Blazor.RenderFragment<System.Int32>)((builder2, param1) => {\r\n    builder2.AddContent(12, \"\\n        \");\r\n    builder2.AddContent(13, param1);\r\n    builder2.AddContent(14, \"\\n    \");\r\n}\r\n));\r\nbuilder.AddAttribute(15, \"TemplateWithObject\", (Microsoft.AspNetCore.Blazor.RenderFragment<StandaloneApp.Pages.testtemplated.ComponentTemplateTest.TestObject>)((builder2, paramObject) => {\r\n    builder2.AddContent(16, \"\\n        \");\r\n    builder2.OpenElement(17, \"div\");\r\n    builder2.AddContent(18, \"\\n            propint = \");\r\n    builder2.AddContent(19, paramObject.PropInt);\r\n    builder2.AddContent(20, \"\\n        \");\r\n    builder2.CloseElement();\r\n    builder2.AddContent(21, \"\\n        \");\r\n    builder2.OpenElement(22, \"div\");\r\n    builder2.AddContent(23, \"\\n            PropString = \");\r\n    builder2.AddContent(24, paramObject.PropString);\r\n    builder2.AddContent(25, \"\\n        \");\r\n    builder2.CloseElement();\r\n    builder2.AddContent(26, \"\\n    \");\r\n}\r\n));\r\nbuilder.CloseComponent();\r\n```\r\n\r\nand to use simple as\r\n\r\n```\r\n<div>Template with parameter (int): @TemplateWithInt?.Render(testobject.PropInt)</div>\r\n```\r\n\r\na complete example is provided in StandaloneApp.\r\n\r\nI'm using `<ComponentTemplateTest.Template>` to define the value of RenderFragment property but it isn't mandatory. We can use only `<Template>` but if there is a component with that name it will not work. In this way the possibility of homonyms is excluded.\r\nThe attribute `WithParams` is used to specify the name of the local variable, so that it is the developer who uses the component to decide the name.\r\n\r\nThe changes are all in the extension.\r\nI have not introduced any breaking changes, so ChildContent keeps working.\r\nThe test cases are missing, but I could not find those related to ChildContent to understand how they work (never done test cases before!)\r\n\r\nUnfortunately there are some imperfections in intellisense that I can not fix:\r\n\r\n1) I can not stop showing all the standard helpers tags (defined in BindTagHelperDescriptorProvider.cs) for the new template tags. I think it's a limitation of TagMatchingRule that does not allow to define tags to be excluded. If \"Microsoft.VisualStudio.Web.Editors.Razor\" would expose \"TagHelperScriptOrStyleTagNameService\" I could edit \"TagHelperFactsService\" and introduce new rules, but I did not understand how.\r\n\r\n2) When writing `<ComponentTemplateTest.Template>` Intellisense shows comments in the popups that I can not hide.\r\n\r\nHowever it seems to work.\r\nI would be happy to contribute to this wonderful project: if there is something to change or improve I am available for sure.","Url":"https://github.com/aspnet/Blazor/issues/1094","RelatedDescription":"Open issue \"Implementation of RenderFragment<T>\" (#1094)"},{"Id":"339130345","IsPullRequest":false,"CreatedAt":"2018-07-07T08:58:17","Actor":"danieldegtyarev","Number":"1093","RawContent":null,"Title":"Parent component","State":"open","Body":"Please investigate introducing ability to access parent component.\r\nIt is slightly advanced, and it mostly required for UI controls developers.\r\nI would suggest similar syntax as for `ChildContent`:\r\n\r\n``` cs\r\n...\r\n[Parameter]\r\nBlazorComponent Parent {get;set;}\r\n...\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1093","RelatedDescription":"Open issue \"Parent component\" (#1093)"},{"Id":"339103562","IsPullRequest":true,"CreatedAt":"2018-07-07T00:39:57","Actor":"rynowak","Number":"1092","RawContent":null,"Title":"Add startup for client/mono Blazor","State":"open","Body":"This change adds a host builder, and the startup pattern for client-side\r\nBlazor apps running in mono/wasm. This will help us align better with\r\nserver side Blazor.","Url":"https://github.com/aspnet/Blazor/pull/1092","RelatedDescription":"Open PR \"Add startup for client/mono Blazor\" (#1092)"},{"Id":"339034867","IsPullRequest":false,"CreatedAt":"2018-07-06T18:34:07","Actor":"FIVIL","Number":"1091","RawContent":null,"Title":"File upload","State":"open","Body":"Hi, i was wondering if it is possible to bind a input tag with type of file to a C# IFromFile in order to get a file for upload?\r\nand if not then how i should get a file from user and do some client side process on file and upload the result to server","Url":"https://github.com/aspnet/Blazor/issues/1091","RelatedDescription":"Open issue \"File upload\" (#1091)"},{"Id":"338835685","IsPullRequest":false,"CreatedAt":"2018-07-06T14:45:25","Actor":"doga6488","Number":"1088","RawContent":null,"Title":"How Can i trigger a child component's event from parent","State":"closed","Body":"Hi, I am working on version 0.4.0\r\nI know we can handle child component event's from its parent. But I am wondering that if can I do the opposite.Is there a way of function to do this?\r\nThanks in advance","Url":"https://github.com/aspnet/Blazor/issues/1088","RelatedDescription":"Closed issue \"How Can i trigger a child component's event from parent\" (#1088)"},{"Id":"338936828","IsPullRequest":true,"CreatedAt":"2018-07-06T13:20:14","Actor":"SteveSandersonMS","Number":"1090","RawContent":null,"Title":"Refactoring to prepare for remote rendering.","State":"open","Body":"This PR takes the parts of the `bots` branch that I think are clean and can exist separately from remote rendering, and will put them in `dev` so that the remaining remote rendering work becomes simpler.\r\n\r\n- Prepare for building multiple entrypoint variants of the .js library\r\n- Use async interop more consistently for rendering and event handling\r\n- Add binary serializer for RenderBatch with tests","Url":"https://github.com/aspnet/Blazor/pull/1090","RelatedDescription":"Open PR \"Refactoring to prepare for remote rendering.\" (#1090)"},{"Id":"338908449","IsPullRequest":false,"CreatedAt":"2018-07-06T11:43:13","Actor":"simonziegler","Number":"1089","RawContent":null,"Title":"Informational: Blazor works on iOS 12","State":"open","Body":"For future reference, I installed the iOS 12 beta on my iPad and Blazor no longer crashes in either Safari or Edge.","Url":"https://github.com/aspnet/Blazor/issues/1089","RelatedDescription":"Open issue \"Informational: Blazor works on iOS 12\" (#1089)"},{"Id":"338614233","IsPullRequest":true,"CreatedAt":"2018-07-06T10:56:22","Actor":"SteveSandersonMS","Number":"1085","RawContent":null,"Title":"Initial debugger support","State":"closed","Body":"This integrates with the debugger support that @kumpera has been working on. Although it looks like a big changeset, it's not really as big as it looks at first, because:\r\n\r\n 1. This PR also includes a Mono upgrade, which touches many .dlls\r\n 2. This PR also includes the Mono ws-proxy (debugging proxy) sources\r\n\r\n### How to use\r\n\r\n* Build a Blazor app in `Debug` configuration (i.e., the default for non-published apps)\r\n* Run it in Chrome\r\n* With the keyboard focus on the app (not in the dev tools, which you should probably close as it's less confusing that way), press the hotkey:\r\n    * Shift+Alt+D on Windows/Linux\r\n    * Shift+Cmd+D on macOS\r\n\r\nThis will open a debugger tab. After a couple of seconds, the debugger's *Sources* tab will show a list of the .NET assemblies in the app. You can expand these and find the `.cs`/`.cshtml` source files you want to debug. You can then set breakpoints, switch back to your app's tab, and cause the breakpoints to be hit. You can then single-step (F10) or resume (F8).\r\n\r\nYou have to be running Chrome with the debug port open. If you aren't doing so, it will detect that and give you instructions for fixing it.\r\n\r\n### Caveats\r\n\r\n**The debugger capabilities are very limited!** You can:\r\n\r\n * Single-step through the current method (F10) or resume (F8)\r\n * In the *Locals* display, observe the values of any local variables of type `int`/`string`/`bool`\r\n * See the call stack, including call chains that go from JS into .NET and vice-versa\r\n\r\n... but for now that is all! You *cannot* step into child methods (i.e., F11), observe the values of any locals that aren't an `int`/`string`/`bool`, observe the values of any class properties or fields, hover over variables to see their values, evaluate expressions in the console, step across async calls, or basically anything else.\r\n\r\n@kumpera has done some great work on tackling some of the hardest technical problems to enable source viewing, breakpoints, and stepping, but please be patient as completing the long tail of debugger features remains a significant task.\r\n\r\n### Issues\r\n\r\nAfter a minute left idle, the debugger will disconnect and you'll have to click \"Reconnect\" to continue. I know @kumpera was doing something to fix that. Not sure how close this is to being resolved.\r\n\r\n### Not implemented\r\n\r\nAny E2E test for launching and using the debugger. I started on one, but realised that WebDriver itself is using the Chrome debug port to automate the browser, so we can't also use it to control the debugger via ws-proxy. Maybe there is some way to hack both on at once, but it's not clear.","Url":"https://github.com/aspnet/Blazor/pull/1085","RelatedDescription":"Closed or merged PR \"Initial debugger support\" (#1085)"},{"Id":"338674311","IsPullRequest":true,"CreatedAt":"2018-07-05T18:28:55","Actor":"rynowak","Number":"1087","RawContent":null,"Title":"Fix #1068","State":"closed","Body":"This changes the bind lowering pass to be more tolerant of unexpected\r\nand invalid content.","Url":"https://github.com/aspnet/Blazor/pull/1087","RelatedDescription":"Closed or merged PR \"Fix #1068\" (#1087)"},{"Id":"337844308","IsPullRequest":false,"CreatedAt":"2018-07-05T16:17:05","Actor":"anirudhagupta","Number":"1074","RawContent":null,"Title":"Blazor support removed, if you do this in installer.","State":"closed","Body":"I assume you have installed the blazor extension and asp.net workload in visual studio.\r\n\r\nnow go to  setup: \r\n\r\nuncheck the asp.net and check the asp.net extension again, Blazor is gone.","Url":"https://github.com/aspnet/Blazor/issues/1074","RelatedDescription":"Closed issue \"Blazor support removed, if you do this in installer.\" (#1074)"},{"Id":"338622890","IsPullRequest":true,"CreatedAt":"2018-07-05T16:15:02","Actor":"rynowak","Number":"1086","RawContent":null,"Title":"Fix #954 - use weak typing for 'event handlers'","State":"closed","Body":"This change introduces a mechanism for bypassing type checking and then\r\nuses for the 'event handlers'. The event handler tag helpers have some\r\nideosyncratic behaviors and rely on overloading at the render tree\r\nbuilder level.","Url":"https://github.com/aspnet/Blazor/pull/1086","RelatedDescription":"Closed or merged PR \"Fix #954 - use weak typing for 'event handlers'\" (#1086)"},{"Id":"338595832","IsPullRequest":false,"CreatedAt":"2018-07-05T15:29:25","Actor":"brunohbrito","Number":"1084","RawContent":null,"Title":"DOM Content ready","State":"closed","Body":"When the DOM Content  is ready for javascript code, the content from Blazor is still loading.\r\n\r\nThere is any kinda feature to monitor when the Blazor content was loaded from Javascript or from Blazor itself? \r\n\r\nFor better compatibility with js api's.\r\n\r\nI made a Workaround to create an example:\r\n\r\n```\r\nprotected override void OnAfterRender()\r\n{\r\n      RegisteredFunction.Invoke<bool>(\"DocumentReady\");\r\n}\r\n```\r\n\r\nat a js file:\r\n```\r\nBlazor.registerFunction(\"DocumentReady\", function () {\r\n    if (document.getElementById('someItem') == null)\r\n        return;\r\n   ......\r\n});\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1084","RelatedDescription":"Closed issue \"DOM Content ready\" (#1084)"},{"Id":"338132263","IsPullRequest":false,"CreatedAt":"2018-07-05T15:28:02","Actor":"StevenTCramer","Number":"1077","RawContent":null,"Title":"Render when state changes","State":"closed","Body":"I have simple component that shows the `UserName`.  Another authentication js library displays an IFrame and in the `OnLogin` Method I update the `UserName`.  But because no event in the UI triggers this, the component does not Re-Render.\r\n\r\nHow can I get this to re-render when the state changes?\r\n\r\nJust to confirm to myself the UserName was set I added the button which when clicking will trigger a re-render and properly show the UserName.\r\n```\r\n@inherits AppHeaderModel\r\n<header class=\"top-row px-4\">\r\n  <span class=\"ml-md-auto\">@UserName</span>\r\n  <button class=\"btn btn-primary\" onclick=\"@StateHasChanged\">Click me</button>\r\n</header>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1077","RelatedDescription":"Closed issue \"Render when state changes\" (#1077)"},{"Id":"338579689","IsPullRequest":false,"CreatedAt":"2018-07-05T15:27:16","Actor":"BernhardGlueck","Number":"1083","RawContent":null,"Title":"Mono execution mode","State":"closed","Body":"Quick question: As to my knowledge WebAssembly does not allow emitting code at runtime to be compiled, i am assuming that Mono is running in Interpreter mode on the client side ? \r\n\r\nThis would mean bascially that for CPU bound code this would be about 10-100x slower than \"native\" JIT compiled javascript correct ? ","Url":"https://github.com/aspnet/Blazor/issues/1083","RelatedDescription":"Closed issue \"Mono execution mode\" (#1083)"},{"Id":"338545295","IsPullRequest":true,"CreatedAt":"2018-07-05T12:13:29","Actor":"SteveSandersonMS","Number":"1081","RawContent":null,"Title":"Update to Mono Linker d18d497","State":"closed","Body":"Prerequisite for integrating with debugger, because the updated linker knows how to emit symbol files.","Url":"https://github.com/aspnet/Blazor/pull/1081","RelatedDescription":"Closed or merged PR \"Update to Mono Linker d18d497\" (#1081)"},{"Id":"338376413","IsPullRequest":false,"CreatedAt":"2018-07-05T12:12:42","Actor":"tylerhartwig","Number":"1078","RawContent":null,"Title":"DllNotFoundException: libc on SignalR connection creation","State":"closed","Body":"I'm attempting to use SignalR with Blazor (I know this might be unexplored territory).\r\n\r\nI'm getting a `DllNotFoundException: libc` in trying to create a SignalR `HubConnection`.\r\n\r\nit looks like this issue has already come up previously, and been solved in [#515](https://github.com/aspnet/Blazor/issues/515).\r\n\r\nI have created a minimal example to display this as well: \r\n[TestSignalR.zip](https://github.com/aspnet/Blazor/files/2164330/TestSignalR.zip)\r\n\r\nI have attempted to use the Blazor HttpMessageHandler in the example, previously I did not setup SignalR with that, and got the same exception.\r\n\r\nI'm running 0.4.0 for Blazor, .NET Core 2.1.301, OS X High Sierra, and Chrome.\r\n\r\nHappy to provide further details, I hope I've covered relevant information.\r\n\r\n\r\nEdit: just noticed #20, which may be relevant to this as well, if this issue will be covered by that, I can simply close this","Url":"https://github.com/aspnet/Blazor/issues/1078","RelatedDescription":"Closed issue \"DllNotFoundException: libc on SignalR connection creation\" (#1078)"},{"Id":"338462735","IsPullRequest":false,"CreatedAt":"2018-07-05T12:12:07","Actor":"doga6488","Number":"1079","RawContent":null,"Title":"Blazor.MonoRuntime.targets throws error while compiling (after reference a dll)","State":"closed","Body":"Hi, I am using Blazor version 0.4.0.\r\nI add a reference( a .dll file) to my project and compiler throws that error:\r\nThe command \"dotnet\"C:\\Users\\Hp\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.1.0\\targets\\Blazor.MonoRuntime.targets(429,5): error MSB3073: The command \"dotnet \"C:\\Users\\Hp\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\../tools/illink/illink.dll\" -c link -u link -t --verbose -d \"C:\\Users\\Hp\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\Hp\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\../tools/mono/bcl/Facades/\"\r\n....\r\n\r\nthis is not the whole part of error message.Rest of the error messages are just like that.Thanks in advance","Url":"https://github.com/aspnet/Blazor/issues/1079","RelatedDescription":"Closed issue \"Blazor.MonoRuntime.targets throws error while compiling (after reference a dll)\" (#1079)"},{"Id":"338546220","IsPullRequest":false,"CreatedAt":"2018-07-05T12:10:05","Actor":"frcom","Number":"1082","RawContent":null,"Title":"FluentValidation fails to peform in browser","State":"closed","Body":"FluentValidation fails - https://www.nuget.org/packages/FluentValidation/7.6.103\r\n\r\nWhen you invoke Validate method you've got null refference exception error!!!\r\n\r\nModel:\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace ThirdBlazor.Shared.Models\r\n{\r\n    public class FeedbackItem: BaseEntity<long>\r\n    {\r\n        public string Title { get; set; }\r\n        public string Body { get; set; }\r\n        public DateTime Date { get; set; }\r\n    }\r\n}\r\n\r\nValidator:\r\n\r\nusing FluentValidation;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing ThirdBlazor.Shared.Models;\r\n\r\nnamespace ThirdBlazor.Shared.Validators\r\n{\r\n    public class FeedBackItemValidator: AbstractValidator<FeedbackItem>\r\n    {\r\n        public FeedBackItemValidator()\r\n        {\r\n            RuleFor(x => x.Title).NotEmpty().WithMessage(\"Please specify the title\");\r\n            RuleFor(x => x.Body).NotEmpty().WithMessage(\"Please fill the body\");\r\n\r\n        }\r\n    }\r\n}\r\n\r\nPage:\r\n\r\n...\r\n\r\n@functions\r\n{\r\n    private string Title { get; set; } = \"\";\r\n    private string Body { get; set; } = \"\";\r\n    private IList<ValidationFailure> failures = new List<ValidationFailure>();\r\n    private IEnumerable<FeedbackItem> Feedbacks { get; set; } = new List<FeedbackItem>();\r\n\r\n    private async Task SaveFeedBack()\r\n    {\r\n        var feedBackItem = new FeedbackItem() { Title = Title, Body = Body, Date = DateTime.Now };\r\n        if (IsValid(feedBackItem))\r\n        {\r\n            await _feedBackRepository.Create(feedBackItem);\r\n            Feedbacks = await GetFeedbacks();\r\n            Title = null;\r\n            Body = null;\r\n        }\r\n\r\n    }\r\n\r\n    private bool IsValid(FeedbackItem feedbackItem)\r\n    {\r\n        var validator = new FeedBackItemValidator();\r\n        ValidationResult results = validator.Validate(feedbackItem); // **Exception raises error !!!**\r\n        bool success = results.IsValid;\r\n        failures = results.Errors;\r\n\r\n        return success;\r\n\r\n    }\r\n\r\n    private async Task<IEnumerable<FeedbackItem>> GetFeedbacks()\r\n    {\r\n        return (await _feedBackRepository.GetItems()).OrderBy(f => f.Date).Where(f => !String.IsNullOrWhiteSpace(f.Title));\r\n    }\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        Feedbacks = await GetFeedbacks();\r\n    }\r\n}\r\n\r\nstack trace:\r\n\r\nWASM: ********* try validate **********\r\nMonoPlatform.ts:202 WASM: [System.NullReferenceException] Object reference not set to an instance of an object.\r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Interpreter.LightLambda.MakeRunDelegateCtor (System.Type delegateType) <0x1e5e7d8 + 0x00284> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Interpreter.LightLambda.GetRunDelegateCtor (System.Type delegateType) <0x1e57650 + 0x00048> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) <0x1e574c8 + 0x0000e> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) <0x1e56b98 + 0x00024> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () <0x1e56a28 + 0x0000a> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Expression`1[TDelegate].Compile (System.Boolean preferInterpretation) <0x2066478 + 0x00018> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Linq.Expressions.Expression`1[TDelegate].Compile () <0x2066440 + 0x0000a> in <4dfa26dc32414d839d6b2edcd296561e>:0 \r\nMonoPlatform.ts:202 WASM:   at FluentValidation.Internal.AccessorCache`1+<>c__DisplayClass1_0`1[T,TProperty].<GetCachedAccessor>b__0 (FluentValidation.Internal.AccessorCache`1+Key[T] k) <0x2066378 + 0x00014> in <1d7771a908a5449eb77180bf881ed568>:0 \r\nMonoPlatform.ts:202 WASM:   at System.Collections.Concurrent.ConcurrentDictionary`2[TKey,TValue].GetOrAdd (TKey key, System.Func`2[T,TResult] valueFactory) <0x2065b18 + 0x00074> in <2bc39ea8f14c400fb27e28b5063ad8dc>:0 \r\nMonoPlatform.ts:202 WASM:   at FluentValidation.Internal.AccessorCache`1[T].GetCachedAccessor[TProperty] (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression`1[TDelegate] expression) <0x2035918 + 0x0006e> in <1d7771a908a5449eb77180bf881ed568>:0 \r\nMonoPlatform.ts:202 WASM:   at FluentValidation.Internal.PropertyRule.Create[T,TProperty] (System.Linq.Expressions.Expression`1[TDelegate] expression, System.Func`1[TResult] cascadeModeThunk) <0x202aab8 + 0x00018> in <1d7771a908a5449eb77180bf881ed568>:0 \r\nMonoPlatform.ts:202 WASM:   at FluentValidation.AbstractValidator`1[T].RuleFor[TProperty] (System.Linq.Expressions.Expression`1[TDelegate] expression) <0x202a790 + 0x0002a> in <1d7771a908a5449eb77180bf881ed568>:0 \r\nMonoPlatform.ts:202 WASM:   at ThirdBlazor.Shared.Validators.FeedBackItemValidator..ctor () <0x200c0d0 + 0x0005c> in <2071bd57f77b400a970ddeb8c80697c2>:0 \r\nMonoPlatform.ts:202 WASM:   at ThirdBlazor.Client.Pages.Feedback.IsValid (ThirdBlazor.Shared.Models.FeedbackItem feedbackItem) <0x1b89668 + 0x00016> in <0c27d62d698e481bb8eb0c0d37409510>:0 \r\nMonoPlatform.ts:202 WASM:   at ThirdBlazor.Client.Pages.Feedback.SaveFeedBack () <0x1fbb9b0 + 0x00096> in <0c27d62d698e481bb8eb0c0d37409510>:0 \r\n﻿\r\n\r\n​\r\n","Url":"https://github.com/aspnet/Blazor/issues/1082","RelatedDescription":"Closed issue \"FluentValidation fails to peform in browser\" (#1082)"},{"Id":"338463387","IsPullRequest":false,"CreatedAt":"2018-07-05T12:08:14","Actor":"danieldegtyarev","Number":"1080","RawContent":null,"Title":"Remove bind- prefix","State":"closed","Body":"The proposition is to change this ugly\r\n\r\n``` html\r\n   ...\r\n   <Slider bind-Start=@From bind-End=@To />\r\n   ...\r\n```\r\n\r\nTo obvious and clear\r\n\r\n``` html\r\n   ...\r\n   <Slider Start=@From End=@To />\r\n   ...\r\n```\r\n\r\nBlazor should automaticaly bind / set it depending on existance `StartChanged` / `EndChanged` events and setters of `From` / `To` properties.","Url":"https://github.com/aspnet/Blazor/issues/1080","RelatedDescription":"Closed issue \"Remove bind- prefix\" (#1080)"},{"Id":"338018998","IsPullRequest":false,"CreatedAt":"2018-07-04T20:39:23","Actor":"chamikasandamal","Number":"1076","RawContent":null,"Title":"Tree shaking","State":"closed","Body":"Please have a look on how angular tree shaking works and how it work in angular ivy. that will help to reduce the framework size.","Url":"https://github.com/aspnet/Blazor/issues/1076","RelatedDescription":"Closed issue \"Tree shaking\" (#1076)"},{"Id":"337980375","IsPullRequest":false,"CreatedAt":"2018-07-04T05:59:45","Actor":"AnkitSharma-007","Number":"1075","RawContent":null,"Title":"Sending data from Javascript function to blazor method","State":"closed","Body":"While invoking a C# method from javascript using \"Blazor.invokeDotNetMethod\" , how can we pass a data ( preferably JSON) from Javascript method to a C# method.\r\n\r\nThis method signature do not have a place for any arguments.\r\n\r\n`Blazor.invokeDotNetMethod({  \r\n     type: {  \r\n         assembly: 'abc',  \r\n         name:   'abc.xyz' \r\n     },  \r\n     method: {  \r\n         name: 'foo'  \r\n     }  \r\n }) `\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1075","RelatedDescription":"Closed issue \"Sending data from Javascript function to blazor method\" (#1075)"},{"Id":"337806721","IsPullRequest":false,"CreatedAt":"2018-07-03T09:03:05","Actor":"SteveSandersonMS","Number":"1073","RawContent":null,"Title":"Enable control over event propagation and default actions","State":"open","Body":"There are lots of scenarios where this is needed. See descriptions in #715.\r\n\r\nSince we don't want to rely on synchronous APIs, the solution will probably be a variation on event registration syntax, e.g.,\r\n\r\n    <button onclick=@MyHandler onclick-stop-propagation=\"true\" />\r\n\r\nWe still need to design what terminology to use (e.g., \"propagation\" vs \"bubbling\") and what features to include (e.g., whether there is also control over \"preventDefault\").","Url":"https://github.com/aspnet/Blazor/issues/1073","RelatedDescription":"Open issue \"Enable control over event propagation and default actions\" (#1073)"},{"Id":"337599332","IsPullRequest":false,"CreatedAt":"2018-07-03T08:56:46","Actor":"uazo","Number":"1071","RawContent":null,"Title":"Incorrect values in disposeComponent (BrowserRenderer.ts)","State":"closed","Body":"Some strange value after last commit (I think #1052)\r\n\r\n![browserrenderer ts error](https://user-images.githubusercontent.com/29201891/42177132-e663a630-7e2b-11e8-9d85-11e435585c8c.png)\r\n\r\nRenderer.RenderInExistingBatch seems correct, but SharedMemoryRenderBatch.disposedComponentIdsEntry returns invalid values.","Url":"https://github.com/aspnet/Blazor/issues/1071","RelatedDescription":"Closed issue \"Incorrect values in disposeComponent (BrowserRenderer.ts)\" (#1071)"},{"Id":"337670511","IsPullRequest":true,"CreatedAt":"2018-07-03T08:56:03","Actor":"uazo","Number":"1072","RawContent":null,"Title":"Fix for #1071","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1072","RelatedDescription":"Closed or merged PR \"Fix for #1071\" (#1072)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-09T05:30:02.7438703Z","RunDurationInMilliseconds":1308}