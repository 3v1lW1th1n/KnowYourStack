{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7202654488","Type":"PullRequestEvent","CreatedAt":"2018-02-06T05:24:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16214","RelatedDescription":"Merged pull request \"Reimplement string.Replace in managed code\" (#16214) at dotnet/coreclr","RelatedBody":"Prep-work for moving String.Manipulation.cs to shared partition. Avoiding manually managed code overhead makes it quite a bit faster as well in some cases. For example:\r\n\r\n`\"hello\".Replace(\"a\", \"b\")` - 1.5x faster\r\n`\"hello\".Replace(\"e\", \"a\")` - 1.05x faster\r\n`\"1000000x a\".Replace(\"a\", \"b\")` - 1.5x faster"},{"Id":"7202604771","Type":"PullRequestEvent","CreatedAt":"2018-02-06T05:04:50","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16225","RelatedDescription":"Opened pull request \"Fix handling of return code for system() calls\" (#16225) at dotnet/coreclr","RelatedBody":"The value returned from system() is encoded bag of bits that gets\r\nmisinterpretted once it starts propagate through the system. Normalize\r\nit to 0/1."},{"Id":"7202442425","Type":"PullRequestEvent","CreatedAt":"2018-02-06T03:58:43","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16219","RelatedDescription":"Closed pull request \"Use Math.Clamp rather than Min(Max(\" (#16219) at dotnet/coreclr","RelatedBody":""},{"Id":"7202393600","Type":"IssuesEvent","CreatedAt":"2018-02-06T03:39:34","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12610","RelatedDescription":"Closed issue \"Tiered jitting: Implement additional profiler APIs\" (#12610) at dotnet/coreclr","RelatedBody":"Tiered jitting breaks a previous invariant that there would only be one jitted code body per <FunctionID, ReJitID, generic instantiation> tuple. In order to address this we need to add some new APIs that profilers can use to get information about these new method bodies. The breaking change doc added in #12193 has a bit more background. The likely APIs (design not final) would be:\r\n\r\n    //Given functionId + rejitId, enumerate the native code start address of all jitted versions of this code that currently exist\r\n    ICorProfilerInfo9::GetNativeCodeStartAddresses(FunctionID functionID, ReJITID reJitId, ULONG32 cCodeStartAddresses, ULONG32 *pcCodeStartAddresses, UINT_PTR codeStartAddresses[]);\r\n\r\n    //Given the native code start address, return the native->IL mapping information for this jitted version of the code\r\n    ICorProfilerInfo9::GetILToNativeMapping3(UINT_PTR pNativeCodeStartAddress, ULONG32 cMap, ULONG32 *pcMap, COR_DEBUG_IL_TO_NATIVE_MAP map[]);\r\n\r\n    //Given the native code start address, return the the blocks of virtual memory that store this code (method code is not necessarily stored in a single contiguous memory region)\r\n    ICorProfilerInfo9::GetCodeInfo4(UINT_PTR pNativeCodeStartAddress, ULONG32 cCodeInfos, ULONG32* pcCodeInfos, COR_PRF_CODE_INFO codeInfos[]);\r\n\r\nThere may also be a tiered compilation opt-out mechanism added to the profiler API, but any work for that is tracked under #12609.\r\n"},{"Id":"7202368463","Type":"PullRequestEvent","CreatedAt":"2018-02-06T03:30:13","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16221","RelatedDescription":"Merged pull request \"Removing the Sse2.LoadScalarVector128 overloads that are invalid.\" (#16221) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @fiigii, @eerhardt.\r\n\r\nThese being added was an oversight, as per the discussion here: https://github.com/dotnet/coreclr/pull/16192#discussion_r165831502\r\n\r\nThese intrinsics do not have a corresponding instruction to emit and should not be simulated by the runtime."},{"Id":"7202346503","Type":"IssuesEvent","CreatedAt":"2018-02-06T03:22:06","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16224","RelatedDescription":"Opened issue \"Tiered jitting: StackTrace doesn't work correctly for tier1 methods\" (#16224) at dotnet/coreclr","RelatedBody":"**Repro:**\r\n\r\n1. Write this code in a .Net Core app:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Threading;\r\n\r\nnamespace ConsoleApp8\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            CallMeAlot(true);\r\n            for(int i = 0; i < 1000; i++)\r\n            {\r\n                CallMeAlot(false);\r\n            }\r\n            CallMeAlot(true);\r\n            Console.ReadLine();\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        static void CallMeAlot(bool takeStackTrace)\r\n        {\r\n            Thread.Sleep(1);\r\n            if(takeStackTrace)\r\n            {\r\n                Capture();\r\n            }\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        static void Capture()\r\n        {\r\n            StackTrace trace = new StackTrace(true);\r\n            Console.WriteLine(trace);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n2)\tCompile the app in retail configuration\r\n3)\tRun it on .Net Core with tiered compilation enabled (set COMPLUS_EXPERIMENTAL_TieredCompilation=1)\r\n\r\nExpected output (what you get without tiered jitting):\r\n\r\n> Hello World!\r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 26\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 12\r\n> \r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> **_at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 26_**\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 17\r\n\r\nActual output (what you get with tiered jitting enabled):\r\n\r\n> Hello World!\r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 26\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 12\r\n> \r\n> at ConsoleApp8.Program.Capture() in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 32\r\n> **_at ConsoleApp8.Program.CallMeAlot(Boolean takeStackTrace)_**\r\n> at ConsoleApp8.Program.Main(String[] args) in c:\\users\\noahfalk\\Source\\Repos\\ConsoleApp8\\Program.cs:line 17\r\n\r\n**Other Notes:**\r\n\r\nThis issue probably has the same underlying cause as #16145, but we fixed that issue with a very tailored fix that wasn't broad enough to activate in this scenario.\r\n\r\nThis issue is also related to #12110 - the work to resolve this issue is likely necessary but not sufficient to solve #12110. Tiered jitting only requires the native -> IL mapping information to work whereas profiler ReJIT has an additional IL -> IL mapping phase. #12110 requires fixing that additional IL->IL portion too."},{"Id":"7202321135","Type":"IssuesEvent","CreatedAt":"2018-02-06T03:12:48","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16198","RelatedDescription":"Closed issue \"Do interface casts to access methods elide the virtual dispatch?\" (#16198) at dotnet/coreclr","RelatedBody":"e.g.\r\n```csharp\r\n((IHttpRequestFeature)this).Method = RequestHeaders[\":method\"];\r\n```\r\nDoes it just change the method called; or does it cause an interface dispatch, so a second hidden method is required\r\n```csharp\r\nprivate string MethodForInterface { get; set; }\r\nstring IHttpRequestFeature.Method\r\n{\r\n    get => MethodForInterface;\r\n    set => MethodForInterface = value;\r\n} \r\n```\r\n```csharp\r\nMethodForInterface = RequestHeaders[\":method\"];\r\n```\r\n\r\nfrom  https://github.com/aspnet/KestrelHttpServer/pull/2294\r\n\r\n/cc @AndyAyersMS "},{"Id":"7202203554","Type":"PullRequestEvent","CreatedAt":"2018-02-06T02:31:54","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16223","RelatedDescription":"Opened pull request \"Add ReadOnlySpan string-like StartsWith and EndsWith API with globalization support\" (#16223) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138\r\n\r\n- StartsWith\r\n- EndsWith\r\n\r\n**TODO:** Add the allocating counterpart for slow span in corefx and add tests there.\r\nRelated PR: \r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7201911763","Type":"PullRequestEvent","CreatedAt":"2018-02-06T00:53:59","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8544","RelatedDescription":"Opened pull request \"Update Microsoft.DotNet.Archive version.\" (#8544) at dotnet/cli","RelatedBody":"This commit updates Microsoft.DotNet.Archive version number to include a fix\r\nfor #8288."},{"Id":"7201859061","Type":"IssuesEvent","CreatedAt":"2018-02-06T00:36:39","Actor":"muratg","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8535","RelatedDescription":"Closed issue \"Kestrel BadImageFormatException\" (#8535) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a new webAPI from the command line\r\ndotnet new webapi\r\n\r\nRun from the console\r\ndot new run\r\n\r\nVisit the http or https URL\r\nfor example:\r\nhttp://localhost:16767/api/values\r\n\r\n## Expected  behavior\r\nExpect to see the Json formatted response of the basic GET, value1 and value 2\r\n\r\n## Actual behavior\r\nFollowing is desplayed in console:\r\nfail: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv[0]\r\n      UvAllocCb\r\nSystem.BadImageFormatException: Bad IL format.\r\n   at System.Buffers.OwnedMemory`1.Pin(Int32 byteOffset)\r\n   at System.Memory`1.Retain(Boolean pin)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection.OnAlloc(UvStreamHandle handle, Int32 suggestedSize)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection.<>c.<.cctor>b__24_1(UvStreamHandle handle, Int32 suggestedsize, Object state)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvStreamHandle.UvAllocCb(IntPtr handle, Int32 suggested_size, uv_buf_t& buf)\r\n\r\nUnhandled Exception: System.BadImageFormatException: Bad IL format.\r\n   at System.Buffers.OwnedMemory`1.Pin(Int32 byteOffset)\r\n   at System.Memory`1.Retain(Boolean pin)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection.OnAlloc(UvStreamHandle handle, Int32 suggestedSize)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection.<>c.<.cctor>b__24_1(UvStreamHandle handle, Int32 suggestedsize, Object state)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvStreamHandle.UvAllocCb(IntPtr handle, Int32 suggested_size, uv_buf_t& buf)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvStreamHandle.<>c.<.cctor>b__20_1(IntPtr handle, Int32 suggested_size, uv_buf_t& buf)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.NativeMethods.uv_run(UvLoopHandle handle, Int32 mode)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.run(UvLoopHandle handle, Int32 mode)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread.ThreadStart(Object parameter)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread.StopAsync(TimeSpan timeout)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransport.StopAsync()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StopAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StopAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.Dispose()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.Dispose()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.Dispose()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.Dispose()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Dispose()\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(IWebHost host, CancellationToken token, String shutdownMessage)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(IWebHost host, CancellationToken token)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(IWebHost host)\r\n   at myApi.Program.Main(String[] args) in d:\\dev\\myApi\\Program.cs:line 17\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.300-preview2-008044)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008044\r\n Commit SHA-1 hash:  c22f7e29a0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008044\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26130-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7201839758","Type":"IssuesEvent","CreatedAt":"2018-02-06T00:30:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8523","RelatedDescription":"Closed issue \"dotnet SomeAssembly.dll not loading appsettings.json\" (#8523) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ncreate new dotnet core web api project\r\nGet some configuration from appsettings.json in Startup.cs like eg connection string\r\ndotnet publish -c Release\r\nNow go to publish directory and run dotnet Assembly.dll\r\n\r\n## Expected  behavior\r\nWhile debugging in visual studio everything working fine\r\nbut when i run from command line then it's not loading appsettings.json\r\n\r\n## Actual behavior\r\nIn startup.cs connection string is coming as null\r\nvar connectionString = Configuration[\"AppSettings:ConnectionString\"];\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n dotnet --info\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7201837899","Type":"IssuesEvent","CreatedAt":"2018-02-06T00:29:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8522","RelatedDescription":"Closed issue \"Poor error message on version mis-match\" (#8522) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nHave an asp.net core MVC project with a reference to `Microsoft.DotNet.Watcher.Tools` version 1.0.0.\r\n\r\nRun `dotnet watch run` on a Linux system.\r\n\r\n## Expected  behavior\r\n\r\nThe development server starts and recompiles on source file change.\r\n\r\n## Actual behavior\r\n\r\nThe following message is given:\r\n\r\n```\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '1.0.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /\r\n  - Alternatively, install the framework version '1.0.0'.\r\n```\r\n\r\nThis message says `Microsoft.NETCore.App` when it was really `Microsoft.DotNet.Watcher.Tools` that was the wrong version. Updating the version of `Microsoft.DotNet.Watcher.Tools` to 2.0.0 allows it to run correctly.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7201746676","Type":"PullRequestEvent","CreatedAt":"2018-02-06T00:00:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8534","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8534) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180205-080046\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180205-080046 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7201745463","Type":"PullRequestEvent","CreatedAt":"2018-02-06T00:00:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8524","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8524) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180202-080045\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180202-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7201744520","Type":"PullRequestEvent","CreatedAt":"2018-02-05T23:59:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8519","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8519) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180201-080051\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180201-080051 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7201743549","Type":"PullRequestEvent","CreatedAt":"2018-02-05T23:59:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8514","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8514) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180131-080045\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180131-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7201741474","Type":"PullRequestEvent","CreatedAt":"2018-02-05T23:58:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8543","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx\" (#8543) at dotnet/cli","RelatedBody":"This was a clean merge.\r\n\r\nJust reverted the change to BranchInfo.props."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7199153839","Type":"IssuesEvent","CreatedAt":"2018-02-05T15:09:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/641","RelatedDescription":"Opened issue \"API to check memory usage on UWP (the Process class is not supported)\" (#641) at dotnet/standard","RelatedBody":"Hello, this is related to #327 and you can see my original question on StackOverflow [here](https://stackoverflow.com/questions/48622947/how-to-get-process-memory-from-both-net-standard-2-0-and-uwp/48623215?noredirect=1#comment84245854_48623215).\r\n\r\nBasically, the issue is that using:\r\n\r\n   ```var memory = System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64;```\r\n\r\nCrashes on UWP. In DEBUG mode, I get a `PlatformNotSupportedException`, while in RELEASE mode (possibly due to the .NET Native compiler) I get a `TypeLoadException` followed by a series of low-level exceptions, and apparently I can't catch any of these exceptions.\r\n\r\nEven placing the above line into a general `try/catch` block doesn't work, the app just crashes anyways.\r\n\r\nI understand the `Process` class is locked on UWP for security reasons, but there should be an API to at least be able to check the current memory usage (and CPU usage). Some \"read only\" APIs from the `Process` class that should be allowed on UWP too I mean.\r\n\r\nFor example, the .NET Standard `System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64` call should have an equivalent API that gets mapped to `Windows.System.MemoryManager` APIs on UWP.\r\n\r\nIs there a workaround, and/or is this something planned in the future?\r\nThanks!\r\n"},{"Id":"7190412954","Type":"IssuesEvent","CreatedAt":"2018-02-02T17:09:21","Actor":"colgreen","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/640","RelatedDescription":"Opened issue \"Support for XDocument.LoadAsync()\" (#640) at dotnet/standard","RelatedBody":"XDocument.LoadAsync() is available in dotnet core 2.0 but not .NET Standard 2.0. We have encountered a few scenarios recently where this would have been useful.\r\n\r\nThe the workarounds we have are:\r\n\r\n1) Do a synchronous Load() and have a thread blocked waiting for IO.\r\n\r\n2) An asynchronous load into memory (e.g. sourceStream.CopyToAsnc(tempMemoryStream) and then do an synchronous load from the MemoryStream (which of course has no IO), however this requires allocation of large arrays, associated garbage collection, etc. It will also be a poor choice for very large XML documents.\r\n\r\n"},{"Id":"7186097286","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:52:42","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Closed issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185998311","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:31:53","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Opened issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185077325","Type":"PullRequestEvent","CreatedAt":"2018-02-01T18:18:58","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Merged pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7184946192","Type":"PullRequestEvent","CreatedAt":"2018-02-01T17:51:31","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Opened pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7202585168","Type":"PullRequestEvent","CreatedAt":"2018-02-06T04:56:55","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26885","RelatedDescription":"Merged pull request \"Revert \"Add temporary logging to help us trace down root cause for dotnet/coreclr#16063 (#26866)\"\" (#26885) at dotnet/corefx","RelatedBody":"This reverts commit 8c947b77660ddb4f50b105d2292c33125cf13abd."},{"Id":"7202584361","Type":"PullRequestEvent","CreatedAt":"2018-02-06T04:56:35","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26885","RelatedDescription":"Opened pull request \"Revert \"Add temporary logging to help us trace down root cause for dotnet/coreclr#16063 (#26866)\"\" (#26885) at dotnet/corefx","RelatedBody":"This reverts commit 8c947b77660ddb4f50b105d2292c33125cf13abd."},{"Id":"7202523536","Type":"PullRequestEvent","CreatedAt":"2018-02-06T04:31:57","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26881","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26881) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7202487680","Type":"PullRequestEvent","CreatedAt":"2018-02-06T04:17:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26884","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26206-00, beta-26206-00, respectively (master)\" (#26884) at dotnet/corefx","RelatedBody":""},{"Id":"7202453214","Type":"PullRequestEvent","CreatedAt":"2018-02-06T04:02:53","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26876","RelatedDescription":"Merged pull request \"Add the ability to specify case matching behavior for GetFiles\" (#26876) at dotnet/corefx","RelatedBody":"Adds options for specifying whether or not you want to respect casing when calling existing file enumeration APIs.\r\n\r\ncc: @iSazonov, @danmosemsft "},{"Id":"7202406219","Type":"PullRequestEvent","CreatedAt":"2018-02-06T03:44:27","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26841","RelatedDescription":"Merged pull request \"Update for in, readonly struct, ref struct\" (#26841) at dotnet/corefx","RelatedBody":"Allowed\r\n* Changing a `struct` type to a `readonly struct` type\r\n\r\nDisallowed\r\n* Changing a `readonly struct` type to a `struct` type\r\n* Changing a `struct` type to a `ref struct` type\r\n\r\nDisallowed\r\n* Adding or removing `in`, `out`, `ref` keywords from a parameter\r\n\r\nPTAL @jkotas @stephentoub @terrajobst @VSadov @jaredpar @davidfowl "},{"Id":"7202396611","Type":"PullRequestEvent","CreatedAt":"2018-02-06T03:40:42","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26883","RelatedDescription":"Opened pull request \"Hardening sliding expiration cache test\" (#26883) at dotnet/corefx","RelatedBody":"The fix is just like described in #26586 - measure the delay and detect if we had not exceeded expiration timeout. "},{"Id":"7202349012","Type":"IssuesEvent","CreatedAt":"2018-02-06T03:23:00","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26855","RelatedDescription":"Closed issue \"The type 'Vector<T>' exists in both 'System.Numerics.Vectors' and 'System.Private.CoreLib'\" (#26855) at dotnet/corefx","RelatedBody":"Opened on behalf of @jcagme\n\nWarnings: 1\nStatus Message: failed\n\nBuild : Master - 20180205.05 (Product Build)\nFailing configurations:\n- Windows\n  - uapaot-x86\n  - uapaot-x64\n  - uapaot-arm64\n  - uapaot-arm\n  - uap-x86\n  - uap-x64\n  - uap-arm\n[Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20180205.05/workItem/Orchestration/analysis/external/Link)\n"},{"Id":"7202317447","Type":"IssuesEvent","CreatedAt":"2018-02-06T03:11:29","Actor":"funkynicco","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26882","RelatedDescription":"Opened issue \"Socket LocalEndPoint not updated in SendToAsync(SocketAsyncEventArgs e)\" (#26882) at dotnet/corefx","RelatedBody":"The `SocketAsyncEventArgs` version of `SendToAsync` does not properly set `_rightEndPoint`, while it creates the `endPointSnapshot` variable that is used to set `_rightEndPoint` in `SendTo`, `BeginSendTo` and `SendToAsync (task)` methods.\r\n\r\nHere is a reference link for Socket.cs with line number.\r\n[https://github.com/dotnet/corefx/blob/master/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L4213](https://github.com/dotnet/corefx/blob/master/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L4213)\r\nOtherwise it is in `public bool SendToAsync(SocketAsyncEventArgs e)` method.\r\n\r\n### Example code for reproducing issue\r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n{\r\n    using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp))\r\n    {\r\n        var destinationEndPoint = new IPEndPoint(IPAddress.Parse(\"10.20.30.40\"), 1234);\r\n\r\n        var socketAsyncEventArgs = new SocketAsyncEventArgs();\r\n        socketAsyncEventArgs.RemoteEndPoint = destinationEndPoint;\r\n        socketAsyncEventArgs.SetBuffer(new byte[32], 0, 32); // 32 bytes of zeros\r\n        socketAsyncEventArgs.Completed += (sender, e) => SendCompleted(e);\r\n\r\n        if (!socket.SendToAsync(socketAsyncEventArgs))\r\n            SendCompleted(socketAsyncEventArgs);\r\n\r\n        Debug.Assert(socket.LocalEndPoint != null); // LocalEndPoint should not be null\r\n    }\r\n\r\n    Console.ReadLine();\r\n}\r\n\r\nstatic void SendCompleted(SocketAsyncEventArgs args)\r\n{\r\n    args.Dispose();\r\n}\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7202615425","Type":"PullRequestEvent","CreatedAt":"2018-02-06T05:09:09","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24623","RelatedDescription":"Merged pull request \"Add IIsNullOperation node and remove ConditionalBranchKind enum.\" (#24623) at dotnet/roslyn","RelatedBody":""},{"Id":"7202614188","Type":"PullRequestEvent","CreatedAt":"2018-02-06T05:08:41","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24617","RelatedDescription":"Merged pull request \"Unify checks for nullable types.\" (#24617) at dotnet/roslyn","RelatedBody":""},{"Id":"7202539895","Type":"IssuesEvent","CreatedAt":"2018-02-06T04:38:46","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24652","RelatedDescription":"Reopened issue \"C# Compiler is not consistent with the CLR for the underlying representation of bool\" (#24652) at dotnet/roslyn","RelatedBody":"### Issue\r\n\r\nToday the C# compiler does not emit code handling for `bool` that is consistent with the underlying representation of `bool` in the CLR.\r\n\r\nThe C# specification states:\r\n> The bool type represents boolean logical quantities. The possible values of type bool are true and false.\r\n\r\nThe spec also indicates that it is 1-byte. Specifically that the result of the `sizeof(bool)` expression is `1`.\r\n\r\nWhile the ECMA 335 specification states:\r\n> A CLI Boolean type occupies 1 byte in memory. A bit pattern of all zeroes denotes a value of\r\nfalse. A bit pattern with any one or more bits set (analogous to a non-zero integer) denotes a\r\nvalue of true. For the purpose of stack operations boolean values are treated as unsigned 1-byte\r\nintegers (§III.1.1.1).\r\n\r\nThis can lead to confusion about the handling and cause various inconsistencies in various edge cases (see https://github.com/dotnet/coreclr/pull/16138#discussion_r165256495, for such a thread).\r\n\r\n### Proposal\r\n\r\nIt would be good to determine:\r\n* Should the spec be updated?\r\n  * The spec would explicitly list the expected values of `true`/`false` so that two implementations don't behave differently\r\n* Can the compiler be updated?\r\n  * Given that we are emitting for the CLR, we would make our handling match the expected representations for the two boolean values (`0`/`not 0`) of the underlying platform\r\n\r\n### Current Behavior\r\n\r\nThe majority of the behaviors below actually match the CLR expectation that a `bool` can be more than just `0` or `1`. However some of the behaviors (such as `&&`) does not match this expectation and can cause issues when interoping with any code that would assume otherwise (generally this is some kind of interop or unsafe code).\r\n\r\n* `!value`\r\n```asm\r\nldarg.1\r\nldc.i4.0\r\nceq\r\n```\r\n* `left == right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nceq\r\n```\r\n* `left != right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nceq\r\nldc.i4.0\r\nceq\r\n```\r\n* `left & right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nand\r\n```\r\n* `left | right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nor\r\n```\r\n* `left ^ right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nxor\r\n```\r\n* `left && right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nand\r\n```\r\n* `left || right`\r\n```asm\r\nldarg.1\r\nldarg.2\r\nor\r\n```\r\n* `value ? \"true\" : \"false\"`\r\n```asm\r\nldarg.1\r\nbrtrue.s\r\n```"},{"Id":"7202278689","Type":"IssuesEvent","CreatedAt":"2018-02-06T02:58:00","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24658","RelatedDescription":"Opened issue \"Missing File Banner not using the most common banner?\" (#24658) at dotnet/roslyn","RelatedBody":"I have four C# files with banners, one file has &quot;// Banner 1&quot; and three have &quot;// Banner 2&quot;. \n\nNow I added a new C# file, and try the Missing File Banner code fix.  &quot;// Banner 1&quot; was provided.\n\nHow do you decide which banner to use when there are multiple ones inside of a project?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/122660/missing-file-banner-not-using-the-most-common-bann.html\nVSTS ticketId: 502137_\n_These are the original issue comments:_\n\nAnthony D. Green [MSFT] on 9/29/2017, 04:59 PM (129 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7202203106","Type":"IssuesEvent","CreatedAt":"2018-02-06T02:31:44","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24657","RelatedDescription":"Opened issue \"brace indent incorrect after return\" (#24657) at dotnet/roslyn","RelatedBody":"Since 15.5.6 update\ntyping in c#\n\nif (something)\n    {\n}\n\nThe open brace after a return is incorrectly indented but the close brace is correctly positioned.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/191793/brace-indent-incorrect-after-return.html\nVSTS ticketId: 560668_\n_These are the original issue comments:_\n\nGeorge Csikos on 1/31/2018, 10:19 PM (4 days ago): <p>Here is a screen shot.</p><p><a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/temp/21867-brace-indent.png\">brace-indent.png</a></p>\n\n_These are the original issue solutions:_\n\nMichael Csikos solved on 1/31/2018, 10:57 PM (4 days ago), 0 votes: <p>This happens for me on 15.5.5 also. With \"<strong>Automatic brace completion</strong>\" switched off and <strong>Code Style</strong> &gt; <strong>Formatting</strong> &gt; <strong>General</strong> &gt; (all options off) it will not line up the \\{ as expected but the } is lined up. If \"<strong>Automatically format when typing</strong>\" is switched on with all other options off, it does work. I don't know if there are any unwanted side effects, though.</p>\n\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7202074246","Type":"PullRequestEvent","CreatedAt":"2018-02-06T01:48:08","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5351","RelatedDescription":"Opened pull request \"[WIP] Convert ILVerify, ILVerification and ILVerification.Tests to old build\" (#5351) at dotnet/corert","RelatedBody":"The goal of the project format change is to integrate ILVerify and ILVerification NuGet packages into the standard CoreRT build and publish them to MyGet with each regular build.\r\n\r\nPorting ILVerify and ILVerification to the old build system exposed some API surface differences and mismatch between [InternalsVisibleTo] attribute behavior. The changes below were necessary to get things working, but I'm certain there are more elegant ways to go about this.\r\n\r\ncc @jcouv @jkotas "},{"Id":"7201426236","Type":"PullRequestEvent","CreatedAt":"2018-02-05T22:33:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5350","RelatedDescription":"Merged pull request \"dependancy -> dependency\" (#5350) at dotnet/corert","RelatedBody":""},{"Id":"7201063073","Type":"PullRequestEvent","CreatedAt":"2018-02-05T21:13:31","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5350","RelatedDescription":"Opened pull request \"dependancy -> dependency\" (#5350) at dotnet/corert","RelatedBody":""},{"Id":"7200850918","Type":"IssuesEvent","CreatedAt":"2018-02-05T20:28:06","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5240","RelatedDescription":"Closed issue \"[ILVerify] ILVerify csproj Format\" (#5240) at dotnet/corert","RelatedBody":"ILVerify is the only project in the CoreRT repo that uses the new .csproj format, i.e. \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    ...\r\n</Project>\r\n```\r\nThe mismatch causes some causes some difficulties in adding the project to our daily build scripts (and subsequently having a NuGet package published from the usual pipeline). \r\n\r\nWas there any explicit reason to go for the format? Are there any plans to unify the format?\r\n\r\ncc @jkotas @KrzysztofCwalina \r\n"},{"Id":"7200798471","Type":"PullRequestEvent","CreatedAt":"2018-02-05T20:16:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5349","RelatedDescription":"Merged pull request \"Propogation -> Propagation\" (#5349) at dotnet/corert","RelatedBody":""},{"Id":"7200579398","Type":"PullRequestEvent","CreatedAt":"2018-02-05T19:32:22","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5349","RelatedDescription":"Opened pull request \"Propogation -> Propagation\" (#5349) at dotnet/corert","RelatedBody":""},{"Id":"7200444148","Type":"PullRequestEvent","CreatedAt":"2018-02-05T19:04:45","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5348","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5348) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7197180107","Type":"PullRequestEvent","CreatedAt":"2018-02-05T08:00:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1932","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1932) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180205-080049\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180205-080049 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7197180007","Type":"PullRequestEvent","CreatedAt":"2018-02-05T08:00:49","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1931","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1931) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180205-080048\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180205-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7195622027","Type":"IssuesEvent","CreatedAt":"2018-02-04T19:00:01","Actor":"lmagyar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1930","RelatedDescription":"Opened issue \"OutOfMemoryException in XAML designer due to failed assembly reference resolution based on PackageReference tag\" (#1930) at dotnet/sdk","RelatedBody":"XAML Workflow Activity designer 100% throws **OutOfMemoryException** and crashes when some specific NuGet packages are referred through PackageReference (NOT with packages.config) using the \"old\" project file format (`<Project ToolsVersion=\"15.0\" ...>` and NOT `<Project Sdk=\"Microsoft.NET.Sdk\">`).\r\n\r\nI think this is caused by some assembly reference resolution error in the new **PackageReference** related code and related to #1244, #1499\r\n\r\nSteps to reproduce:\r\n* VS 2017 (any VS 15.x version I've tested fails)\r\n* fresh new empty solution with Workflow Activity library added from original VS template (net461, though any version I've tested fails)\r\n* add **any ONE** of these NuGet packages with **PackageReference** (NOT with packages.config)\r\n  * Microsoft.Orleans.Core (v1.5.3, though any version I've tested fails)\r\n  * Microsoft.Orleans.Core.Abstractions (v2.0.0-beta3, though any version I've tested fails)\r\n  * Abp (v3.4.0) + add reference to System.Drawing\r\n  * Dapper (v1.50.4)\r\n  * Orleans.Activities (v0.3.0)\r\n* open the empty Activity1.xaml in the designer\r\n\r\nInstead of opening the designer, VS says:\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at VSLangProj.Reference.get_PublicKeyToken()\r\n   at Microsoft.VisualStudio.Activities.Helper.CreateAssemblyNameFromReference(Reference r)\r\n   at Microsoft.VisualStudio.Activities.Helper.GetReferenceAssemblies(VSProject project)\r\n   at Microsoft.VisualStudio.Activities.EditorPane.get_ReferencedAssemblies()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.ResetShadowCopyPath()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.CreateWorkflowDesignerInIsolatedMode()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.Load(String fileName, UInt32 formatMode, Int32 readOnly)\r\n```\r\n\r\nSome of the above packages (Microsoft.Orleans.Core, Orleans.Activities, Abp) also causes the \"The referenced component 'System.Net.Http' could not be found.\" warning, so after adding the below code to the end of the project files, the warning disappears, but the XAML designer still crashes:\r\n```\r\n  <Target Name=\"UpdateOriginalItemSpecs\" AfterTargets=\"ResolveAssemblyReferences\">\r\n    <ItemGroup>\r\n      <ReferencePath>\r\n        <OriginalItemSpec>%(ReferencePath.FileName)</OriginalItemSpec>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n**But 2 warnings remain even after adding the above target to the project file (I think the XAML designer uses some different target for assembly resolution):**\r\n* Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\r\n* Could not compile workflow expressions because file 'file:///C:\\Users\\lmagyar\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\r\n\r\nNote: referring Microsoft.Orleans.Core.*Abstractions* or Dapper doesn't cause any warning, the designer simply crashes. Adding the above target workaround, doesn't change anything.\r\n\r\nI've tried to investigate:\r\n* I've added all the ~50 nuget packages that is referenced through Microsoft.Orleans.Core (based on the packages.config in another project), with PackageReference, no problem, but finally adding Microsoft.Orleans.Core results in the exception\r\n* I've tried several assembly binding redirects, nothing changes, exception\r\n* devenv.exe /safemode, exception\r\n* I've also tried to debug devenv, but I think due to CreateWorkflowDesignerInIsolatedMode(), I wasn't able to catch the exception\r\n* MSBuild.exe builds without any warning\r\n\r\nThis error also reported multiple times at several places:\r\n* https://developercommunity.visualstudio.com/content/problem/61637/vs-2017-outofmemoryexception-in-xaml-activity-desi.html\r\n* https://developercommunity.visualstudio.com/content/problem/113977/out-of-memory-exception-when-loading-workflow-xaml.html\r\n* https://developercommunity.visualstudio.com/content/problem/162045/windows-workflow-foundation-1.html\r\n* aspnetboilerplate/aspnetboilerplate#2805\r\n\r\nUsing the new project file format (`<Project Sdk=\"Microsoft.NET.Sdk\">`) is not an option, because it doesn't contain the XamlAppDef BuildAction and though the XAML designer starts without crash, it doesn't resolve any assembly, so useless. Using packages.config as workaround is awfully slow and painful.\r\n\r\nMaybe @dmetzgar can add some insights about the internals of the XAML Workflow Activity designer.\r\n"},{"Id":"7195103484","Type":"IssuesEvent","CreatedAt":"2018-02-04T13:46:55","Actor":"stevomccormack","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1929","RelatedDescription":"Opened issue \".NET Core 2.1.xx is not availabe in Visual Studio 2017 \" (#1929) at dotnet/sdk","RelatedBody":"Cannot create a class library using .NET Core v2.0.\r\nI can create it via command line but not using Visual Studio 2017.\r\nSo project will not build.\r\n\r\n\r\n------------\r\n\r\n.NET Core v2.1.4 is fully installed.\r\n>dotnet --version\r\n2.1.4\r\n\r\n----------------------\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.6\r\nVisualStudio.15.Release/15.5.6+27130.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00369-60000-00001-AA456\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA456\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA456\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.2000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.2000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.2000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.2000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.0\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.2000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nNode.js Tools   1.4.11025.7\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nWebJobs Tools v1.0.0   15.0.40108.0\r\nWebJobs Tools v1.0.0\r\n"},{"Id":"7191955018","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:22:16","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Merged pull request \"NETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421\r\n\r\nTo BundledNETCorePlatformsVersion\r\nNETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\r\nnext step insert SDK along with the name change in CLI in one PR to make CLI build"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":41,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":237,"FavoriteCount":183,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":106,"FavoriteCount":74,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":169,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":82,"FavoriteCount":27,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-02-06T05:30:19.8882891Z","RunDurationInMilliseconds":7948}