{"Data":{"GitHub":{"Issues":[{"Id":"501274536","IsPullRequest":true,"CreatedAt":"2019-10-02T05:00:26","Actor":"dotnet-maestro[bot]","Number":"1990","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191001.3\r\n- **Date Produced**: 10/2/2019 4:30 AM\r\n- **Commit**: fec2b23f60b0a4c4d3bee27b2f6be627e8f4482c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19501.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1990","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1990)"},{"Id":"501260410","IsPullRequest":true,"CreatedAt":"2019-10-02T04:20:48","Actor":"dotnet-maestro[bot]","Number":"1989","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191001.1\r\n- **Date Produced**: 10/2/2019 3:37 AM\r\n- **Commit**: be3d33927476deb6e299c69cc68f0c54ed1b828c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19501.1\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1989","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1989)"},{"Id":"501260335","IsPullRequest":true,"CreatedAt":"2019-10-02T04:20:29","Actor":"dotnet-maestro[bot]","Number":"1988","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191001.2\r\n- **Date Produced**: 10/2/2019 3:37 AM\r\n- **Commit**: 7b3aca5a1efc1760bf330a79b89e77a08b538e40\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19501.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1988","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1988)"},{"Id":"501244439","IsPullRequest":true,"CreatedAt":"2019-10-02T02:45:13","Actor":"YoshihiroIto","Number":"1987","RawContent":null,"Title":"Use  Array.Empty","State":"open","Body":"This change reduces heap allocation.","Url":"https://github.com/dotnet/wpf/pull/1987","RelatedDescription":"Open PR \"Use  Array.Empty\" (#1987)"},{"Id":"501171740","IsPullRequest":true,"CreatedAt":"2019-10-01T22:08:58","Actor":"rladuca","Number":"1986","RawContent":null,"Title":"Fix missing type forwards in reference assemblies","State":"open","Body":"Relates to #1964 \r\n\r\nSome reference assemblies (WindowsBase, System.Xaml) were missing type forwards.  This adds them back and rebaselines the ApiCompat (especially against 4.8) to be correct.  This also fixes some issues in the PresentationFramework reference assembly that might have allowed instances of this problem to show up in the future.\r\n\r\nSteps taken to find and fix these:\r\n\r\n- Find all type forwards deeper in the code tree than OtherAssemblyAttrs.cs\r\n- Ensure they are all hoisted into the corresponding OtherAssemblyAttrs.cs\r\n- Ensure all ref assemblies directly use the lib assemblies OtherAssemblyAttrs.cs so they maintain parity.\r\n\r\nFurther investigation is needed into why reference API compat failed to find these issues (4.8 API compat did but I incorrectly baselined them).","Url":"https://github.com/dotnet/wpf/pull/1986","RelatedDescription":"Open PR \"Fix missing type forwards in reference assemblies\" (#1986)"},{"Id":"501162510","IsPullRequest":false,"CreatedAt":"2019-10-01T21:44:55","Actor":"EmaginationStore","Number":"1985","RawContent":null,"Title":"Error creating XPS from Canvas","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: 1903 (18362.356)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n**Description**\r\n \r\nI have a Textblock with text of \"Hello\" within a Canvas on the MainWindow. I am running the following code on mouse down of the main window (as a test):\r\n\r\n```\r\nprivate void MainWindow_OnMouseDoubleClick(object sender, MouseButtonEventArgs e)\r\n        {\r\n            var sfd = new SaveFileDialog { Filter = \"XPS files (*.xps)|*.xps\" };\r\n            if (sfd.ShowDialog() != true) return;\r\n            var c = Canv;\r\n            var doc = new XpsDocument(sfd.FileName, FileAccess.Write);\r\n            var writer = XpsDocument.CreateXpsDocumentWriter(doc);\r\n            writer.Write(c, new PrintTicket { PageMediaSize = new PageMediaSize(c.ActualWidth, c.ActualHeight) });\r\n            doc.Close();\r\n        }\r\n```\r\n \r\n**Actual behavior:** \r\nEntries cannot be created while previously created entries are still open.\r\nat System.IO.Compression.ZipArchive.AcquireArchiveStream(ZipArchiveEntry entry)\r\n   at System.IO.Compression.ZipArchiveEntry..ctor(ZipArchive archive, String entryName)\r\n   at System.IO.Compression.ZipArchiveEntry..ctor(ZipArchive archive, String entryName, CompressionLevel compressionLevel)\r\n   at System.IO.Compression.ZipArchive.DoCreateEntry(String entryName, Nullable`1 compressionLevel)\r\n   at System.IO.Compression.ZipArchive.CreateEntry(String entryName, CompressionLevel compressionLevel)\r\n   at System.IO.Packaging.ZipPackage.CreatePartCore(Uri partUri, String contentType, CompressionOption compressionOption)\r\n   at System.IO.Packaging.Package.CreatePart(Uri partUri, String contentType, CompressionOption compressionOption)\r\n   at System.Windows.Xps.Packaging.XpsManager.GeneratePart(ContentType contentType, Uri partUri)\r\n   at System.Windows.Xps.Packaging.XpsManager.GenerateUniquePart(ContentType contentType)\r\n   at System.Windows.Xps.Packaging.XpsFixedDocumentSequenceReaderWriter.AddFixedDocument()\r\n   at System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForFixedDocument()\r\n   at System.Windows.Xps.Serialization.XpsSerializationManager.AcquireXmlWriter(Type writerType)\r\n   at System.Windows.Xps.Serialization.ReachHierarchySimulator.SimulateBeginFixedDocument()\r\n   at System.Windows.Xps.Serialization.ReachHierarchySimulator.BeginConfirmToXPSStructure(Boolean mode)\r\n   at System.Windows.Xps.Serialization.XpsSerializationManager.SaveAsXaml(Object serializedObject)\r\n   at System.Windows.Xps.XpsDocumentWriter.SaveAsXaml(Object serializedObject, Boolean isSync)\r\n   at System.Windows.Xps.XpsDocumentWriter.Write(Visual visual, PrintTicket printTicket)\r\n   at Test.MainWindow.MainWindow_OnMouseDoubleClick(Object sender, MouseButtonEventArgs e) in C:\\Users\\ashdo\\source\\repos\\Test\\Test\\MainWindow.xaml.cs:line 27\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n   at Test.App.Main()\r\n \r\n **Expected behavior:** An XPS document to be created of the Canvas\r\n \r\n **Minimal repro:** \r\n```\r\n<Window x:Class=\"Test.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:Test\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\" MouseDown=\"MainWindow_OnMouseDoubleClick\">\r\n    <Grid>\r\n        <Canvas Name=\"Canv\">\r\n                    <TextBlock FontSize=\"200\" Foreground=\"BlueViolet\" Text=\"Hello\" >\r\n                    </TextBlock>\r\n        </Canvas>\r\n    </Grid>\r\n</Window>\r\n```\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1985","RelatedDescription":"Open issue \"Error creating XPS from Canvas\" (#1985)"},{"Id":"500984553","IsPullRequest":false,"CreatedAt":"2019-10-01T15:45:49","Actor":"Mrnikbobjeff","Number":"1984","RawContent":null,"Title":"Potential security issue in dataobjects.cs","State":"open","Body":"https://github.com/dotnet/wpf/blob/1d4abe6b45ed1a1e9fe605ae1c9949d6d2a99fb4/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/dataobject.cs#L1670\r\nThe actual bytes read are ignored, instead a constant is used in the following line to specify the amount of bytes to read, even if the actual amount of bytes may be lower.\r\nhttps://github.com/dotnet/wpf/blob/1d4abe6b45ed1a1e9fe605ae1c9949d6d2a99fb4/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/dataobject.cs#L1672\r\n I do not know if it is easily possible to trigger, but this definitely seems incorrect. Also, as far as I can tell the pointer is a constant and could be hoisted so that it does not need to be converted multiple times.","Url":"https://github.com/dotnet/wpf/issues/1984","RelatedDescription":"Open issue \"Potential security issue in dataobjects.cs\" (#1984)"},{"Id":"500906777","IsPullRequest":false,"CreatedAt":"2019-10-01T13:44:53","Actor":"poizan42","Number":"1983","RawContent":null,"Title":"Potential TOCTTOU race in Window.ShowDialog","State":"open","Body":"* .NET Core Version: (The code in question is in master)\r\n* Windows version: It is seen on some version of Windows 10, but haven't reproduced it locally.\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: It was probably net48\r\n \r\n **Problem description:**\r\n\r\nWe got this on netfx, but the same code seems to be present in core WPF. \r\n`SafeNativeMethods.ReleaseCapture` throws an exception (`System.ComponentModel.Win32Exception (0x80004005): The operation completed successfully`).\r\n\r\nIgnoring the ERROR_SUCCESS result which is outside of the scope of WPF, it looks like this could be caused by a TOCTTOU race in https://github.com/dotnet/wpf/blob/185e2e8c62ede5c188bf3655f862f87eba4a3cb5/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Window.cs#L375-L399\r\n\r\nNote that ReleaseCapture is only able to release capture from a window owned by the current thread. It looks like a window on another thread might be able to \"steal\" the mouse capture in the time between the two calls - the error from ReleaseCapture should probably just be ignored.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n```\r\nCatching Unhandled exception:System.ComponentModel.Win32Exception (0x80004005): The operation completed successfully \r\nved MS.Win32.SafeNativeMethods.ReleaseCapture() \r\nved System.Windows.Window.ShowDialog() \r\n...\r\n```\r\n\r\n **Expected behavior:**\r\nShowDialog succeeds.\r\n\r\n **Minimal repro:**\r\nUnfortunately I haven't been able to reproduce the issue.","Url":"https://github.com/dotnet/wpf/issues/1983","RelatedDescription":"Open issue \"Potential TOCTTOU race in Window.ShowDialog\" (#1983)"},{"Id":"500859550","IsPullRequest":true,"CreatedAt":"2019-10-01T13:02:32","Actor":"dotnet-maestro[bot]","Number":"1982","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191001.2\r\n- **Date Produced**: 10/1/2019 9:22 AM\r\n- **Commit**: e1b421533609eef40a3db3b2a85fcdb9b0047ac2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha1.19501.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1982","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1982)"},{"Id":"500769026","IsPullRequest":false,"CreatedAt":"2019-10-01T09:19:38","Actor":"TFTomSun","Number":"1981","RawContent":null,"Title":"Incremental Build in Visual Studio 2019 and WPF with .NET Core 3.0 broken","State":"open","Body":"- Create a library with the following project file:\r\n\r\n```xml\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n\r\n```\r\n\r\n- To keep it simple, leave the library empty\r\n\r\n-> The delta build in Visual Studio is broken. Normally Visual Studio would not build the project on the second build, if no changes have been performed. But WPF libraries are always build again, which also causes dependent projects to be rebuild. WPF apps don't have that issue.\r\n\r\nUnfortunately the diagnostic build output does not tell any reason why the project is build again.","Url":"https://github.com/dotnet/wpf/issues/1981","RelatedDescription":"Open issue \"Incremental Build in Visual Studio 2019 and WPF with .NET Core 3.0 broken\" (#1981)"},{"Id":"500168276","IsPullRequest":false,"CreatedAt":"2019-10-01T08:52:46","Actor":"prasanthelvr","Number":"1974","RawContent":null,"Title":"error CS0111: Type 'App' already defines a member called 'InitializeComponent' with the same parameter types","State":"closed","Body":"**Description**\r\n\r\nWe have a WPF application which targets .NET Framework version from 2.0 to 4.6. We have used different App and Mainwindow files for .NET Framework version 2.0v-3.5v (App.xaml, MainWindow.xaml) and 4.0-4,6v (App1.xaml, MainWindow1.xaml). Now, we are providing .NET Core support using App1.xaml, MainWindow1.xaml files. While compiling, .NET Core WPF project showing compilation issue but, .NET Framework WPF project compiles properly.\r\n\r\n**Actual Behavior**\r\n\r\nThe following compilation issue shown in .NET Core WPF project.\r\n\r\nerror CS0111: Type 'App' already defines a member called 'InitializeComponent' with the same parameter types.\r\n\r\n**Expected Behavior**\r\n\r\n.NET Core WPF project should compile and run properly as like .NET Framework WPF project.\r\n\r\n**Basic Information**\r\n\r\n* .NET Core Version: 3.0\r\n* Windows version: Windows 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n**Reproduction Link**\r\nThe following sample have two project files.\r\n1. .NETFramework.csproj - Run properly\r\n1. .NETCore.csproj - Compilation issue\r\n\r\n[NETCoreTest.zip](https://github.com/dotnet/wpf/files/3670130/NETCoreTest.zip)","Url":"https://github.com/dotnet/wpf/issues/1974","RelatedDescription":"Closed issue \"error CS0111: Type 'App' already defines a member called 'InitializeComponent' with the same parameter types\" (#1974)"},{"Id":"500662160","IsPullRequest":true,"CreatedAt":"2019-10-01T05:10:25","Actor":"dotnet-maestro[bot]","Number":"1980","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.6\r\n- **Date Produced**: 10/1/2019 4:43 AM\r\n- **Commit**: 3750c43d5d9b5161be967e39fd848c89d6479ff5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19480.6\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1980","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1980)"},{"Id":"500652240","IsPullRequest":true,"CreatedAt":"2019-10-01T04:40:45","Actor":"dotnet-maestro[bot]","Number":"1979","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.4\r\n- **Date Produced**: 10/1/2019 3:20 AM\r\n- **Commit**: a6735263e78d4ad74de61cf63af76b5f7b661092\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19480.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1979","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1979)"},{"Id":"500636864","IsPullRequest":true,"CreatedAt":"2019-10-01T04:25:19","Actor":"dotnet-maestro[bot]","Number":"1978","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 10/1/2019 3:09 AM\r\n- **Commit**: 15610a77c574b3f390893699143d33fbbc94d756\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19480.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1978","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1978)"},{"Id":"500597160","IsPullRequest":true,"CreatedAt":"2019-10-01T00:45:54","Actor":"arpitmathur","Number":"1977","RawContent":null,"Title":"Removing separators from SizeOfSet and PositionInSet counts","State":"open","Body":"Screen readers were reading incorrect values of the number of menu items and their position since we were counting separators as MenuItems in the automation tree. \r\n\r\nI filtered for separators in the current MenuItems to fix the SizeofSet count.\r\n\r\nI filtered for separators again for PositionInSet but added a short-circuit to break when you're at the element whose position you're trying to find. This short-circuit was added to not remove separators below the relevant MenuItem from the PositionInSet count.","Url":"https://github.com/dotnet/wpf/pull/1977","RelatedDescription":"Open PR \"Removing separators from SizeOfSet and PositionInSet counts\" (#1977)"},{"Id":"500590625","IsPullRequest":true,"CreatedAt":"2019-10-01T00:20:33","Actor":"arpitmathur","Number":"1976","RawContent":null,"Title":"Adding border to ToggleButton when checked in high-contrast themes","State":"open","Body":"In non-high contrast themes, when you check a ToggleButton and navigate to another control, we display the checked status by highlighting the button with a lighter shade of the selection color.\r\n\r\nWe don't follow this behavior in high contrast themes. The text is slightly-depressed upon checking but that is not visually apparent and would definitely not be to a visually impaired person.\r\n![highcontrastwhitetogglebutton_without_change](https://user-images.githubusercontent.com/5456126/65924723-e6ecda80-e3a2-11e9-860d-66c72212c0e0.png)\r\n\r\nIn the image above, the 'S', 'C' and 'I' buttons are checked. However, it's barely noticeable that 'S' and 'C' are checked. The checked status of the 'I' button is also not noticeable when it receives focus.\r\n\r\n\r\nThe fix here is to check for a toggle button to be checked when in a high-contrast theme, we then add a border around the button. When a checked button also has keyboard focus, we add a border in the background-color. When the user navigates away, the border color is the same as the selection-color.\r\n\r\nIn the image below, the 'S', 'C' and 'I' buttons are checked again. Here, it's visually apparent that they are currently checked.\r\n![highcontrastwhitetogglebutton_with_change](https://user-images.githubusercontent.com/5456126/65924964-c709e680-e3a3-11e9-8eab-fd1016e4c3b3.png)\r\n\r\nIn this pull request, relevant changes are in lines 673:693 in Button.xaml, the remaining files are generated off those changes.","Url":"https://github.com/dotnet/wpf/pull/1976","RelatedDescription":"Open PR \"Adding border to ToggleButton when checked in high-contrast themes\" (#1976)"},{"Id":"499515423","IsPullRequest":true,"CreatedAt":"2019-09-30T20:19:40","Actor":"Youssef1313","Number":"1969","RawContent":null,"Title":"typo: pakage -> package","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/1969","RelatedDescription":"Closed or merged PR \"typo: pakage -> package\" (#1969)"},{"Id":"499570625","IsPullRequest":false,"CreatedAt":"2019-09-30T20:19:09","Actor":"carlossanlop","Number":"1971","RawContent":null,"Title":"[.NET Core 3][VB.NET][WPF] error BC30149: Class 'Application' must implement 'Sub InitializeComponent()' for interface 'IComponentConnector'.","State":"closed","Body":"_From @onovotny on Tuesday, November 27, 2018 4:08:27 PM_\r\n\r\nWhen building a WPF application using VB.NET on .NET Core 3, you get the following error\r\n\r\n`obj\\Debug\\net462\\Application.g.vb(45,16): error BC30149: Class 'Application' must implement 'Sub InitializeComponent()' for interface 'IComponentConnector'.`\r\n\r\nThis is due to VB.NET applications using `Application.xaml` as the `ApplicationDefinition` item by default, instead of `App.xaml` like C#.\r\n\r\nThe workaround is to add the following into the `.vbproj` file:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <ApplicationDefinition Include=\"Application.xaml\" Condition=\"'$(EnableDefaultApplicationDefinition)' != 'false' And Exists('$(MSBuildProjectDirectory)/Application.xaml')\" />\r\n  <Page Remove=\"@(ApplicationDefinition)\" />\r\n</ItemGroup>\r\n```\r\n\r\n\r\n_Copied from original issue: dotnet/core#2080_","Url":"https://github.com/dotnet/wpf/issues/1971","RelatedDescription":"Closed issue \"[.NET Core 3][VB.NET][WPF] error BC30149: Class 'Application' must implement 'Sub InitializeComponent()' for interface 'IComponentConnector'.\" (#1971)"},{"Id":"500468722","IsPullRequest":true,"CreatedAt":"2019-09-30T19:30:29","Actor":"dotnet-maestro[bot]","Number":"1975","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190930.1\r\n- **Date Produced**: 9/30/2019 6:58 PM\r\n- **Commit**: af088e57775b7b9f28322511bc5be8ddb356b8a8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-servicing.19480.1\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1975","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1975)"},{"Id":"500086220","IsPullRequest":false,"CreatedAt":"2019-09-30T06:52:24","Actor":"ms579984","Number":"1973","RawContent":null,"Title":"Can not use a WPF Library (.NET 3.5) in a .net core 3.0 WPF Application","State":"open","Body":"Hello,\r\n\r\nI have the following problem:\r\n\r\nI can’t use a third party WPF library (compiled for .NET 3.5) with a .net Core 3.0 WPF App. The compiler error message is:\r\n\r\nerror MC1000: Unknown build error, 'Could not find type ‘System.Collections.ObjectModel.ObservableCollection`1’ in assembly ‘C:\\Program Files\\dotnet\\packs\\Microsoft.WindowsDesktop.App.Ref\\3.0.0\\ref\\netcoreapp3.0\\WindowsBase.dll’.\r\n\r\nor\r\n\r\nerror CS7069: Reference to type ‘ObservableCollection<>’ claims it is defined in ‘WindowsBase’, but it could not be found\r\n### Example:\r\n\r\nI attached a small example to reproduce the error message.\r\nThis example contains:\r\n[WpfApp1.zip](https://github.com/dotnet/wpf/files/3669193/WpfApp1.zip)\r\n\r\n1.  A .net Core 3.0 WPF Application project\r\n2.  A .net 3.5 WPF UserControl project\r\n3.  The UserControl has public property with a ObservableCollection<>.\r\n4.  The WPF Application uses the UserControl and want to access the public property -> Compile error.\r\n\r\nIf I switch the .NET 3.5 Project to at least 4.0 everythings compiles as excepted.\r\n\r\n```\r\npublic partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            WpfControlLibrary1.UserControl1 c = new WpfControlLibrary1.UserControl1();\r\n            c.items.Add(1);\r\n        }\r\n    }\r\n```\r\n\r\n```\r\npublic partial class UserControl1 : UserControl\r\n    {\r\n        public UserControl1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        public ObservableCollection<int> items\r\n        {\r\n            get;\r\n        } = new ObservableCollection<int>();\r\n    }\r\n```\r\n\r\n### Background:\r\n\r\nI’m trying to port our existing .net 4.7.2 application to .net core 3.0.\r\nThis application has a dependency to an old third party .net 3.5 WPF Assembly (I do not have source code of it and the company is out of business so there is no chance to get a newer version).\r\nThe rest of the application works very well but this is a show stopper.\r\nI tested this with the current Visual Studio 2019 (16.3.1) on a fresh installed Win10 1903.\r\n\r\n### Questions:\r\n\r\nIs it intended that WPF 3.5 assemblies are not useable or is this a bug ?\r\nWhy is Type-Forwarding from WindowsBase to the real locations of types not working (the ObservableCollection<> has moved to the System-assembly) ?\r\n\r\nBest Regards,\r\nMarco Scholz\r\n","Url":"https://github.com/dotnet/wpf/issues/1973","RelatedDescription":"Open issue \"Can not use a WPF Library (.NET 3.5) in a .net core 3.0 WPF Application\" (#1973)"},{"Id":"499600950","IsPullRequest":false,"CreatedAt":"2019-09-28T07:11:25","Actor":"Symbai","Number":"1972","RawContent":null,"Title":"Cannot access resource files on runtime","State":"closed","Body":"* .NET Core Version: 3.0\r\n* Windows version: Win10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nCannot access resource files on runtime when:\r\n\r\n- Adding them as Resource\r\n- Adding them as Embedded Resource\r\n- Adding them through resource file\r\n \r\n **Actual behavior:**\r\nEvery time I try to access it it's not part of the resources at all and therefore returns null.\r\n **Expected behavior:**\r\n Able to access resource files on runtime. \r\n **Minimal repro:**\r\n\r\n```\r\n<ItemGroup>\r\n  <EmbeddedResource Include=\"bla3\" />\r\n</ItemGroup>\r\n<ItemGroup>\r\n  <Resource Include=\"bla2\" />\r\n</ItemGroup>\r\n```\r\n \r\n```\r\n public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            //Fails\r\n            ResourceTest(\"bla2\");\r\n            ResourceTest(\"bla3\");\r\n            Debug.Assert(Application.Current.Properties[\"bla\"] != null);\r\n        }\r\n\r\n        static void ResourceTest(string resourceName)\r\n        {\r\n            try\r\n            {\r\n                var bla = Application.Current.TryFindResource(resourceName);\r\n                Debug.Assert(bla != null);\r\n            }\r\n            catch (Exception e) { Debug.Fail(e.ToString()); }\r\n        }\r\n```\r\n[ResourceTest.zip](https://github.com/dotnet/wpf/files/3664189/ResourceTest.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/1972","RelatedDescription":"Closed issue \"Cannot access resource files on runtime\" (#1972)"},{"Id":"499306332","IsPullRequest":false,"CreatedAt":"2019-09-27T23:28:52","Actor":"weltkante","Number":"1967","RawContent":null,"Title":"Reference Source for repository","State":"closed","Body":"[Roslyn](http://source.roslyn.io) and [CoreFX](https://source.dot.net/) have online browsable source for their repositories, we should have that for WPF and WinForms as well. I'm currently still using [Desktop Reference Source](https://referencesource.microsoft.com/) but once WPF starts moving apart this would be very useful for quick research during code reviews.","Url":"https://github.com/dotnet/wpf/issues/1967","RelatedDescription":"Closed issue \"Reference Source for repository\" (#1967)"},{"Id":"499540078","IsPullRequest":false,"CreatedAt":"2019-09-27T16:33:39","Actor":"spadapet","Number":"1970","RawContent":null,"Title":"Changing \"WPF Trace Settings\" for Visual Studio debugging has no effect","State":"open","Body":"* .NET Core Version: 3.1.0-preview1.19476.43\r\n* Windows version: Win10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? Yes but I think it's a bug in NetCore\r\n\r\n **Problem description:**\r\nVisual Studio has the dialog \"Options | Debugging | Output Window\" to change the trace level of certain WPF traces. You can turn off traces, or increase the level of traces per WPF feature. Changing the trace output level has no effect in NetCore, the default trace level is always chosen. For example, Data Binding traces will only ever output errors, which is the default.\r\n\r\n![image](https://user-images.githubusercontent.com/2523431/65785316-f224d980-e108-11e9-8107-c2042ff6cc96.png)\r\n \r\n **Minimal repro:**\r\n* Unzip the following project:\r\n[TestBindings.zip](https://github.com/dotnet/wpf/files/3663736/TestBindings.zip)\r\n* In Visual Studio 16.3.1, open the TestBindingsNetCore.sln solution\r\n* In Tools | Options | Debugging | Output Window | Data Binding, change the setting to \"All\" or \"Off\"\r\n* Build and run the project in the debugger (F5), which will have many Binding errors\r\n \r\n **Actual behavior:**\r\nBinding errors are shown in the output window \r\n\r\n **Expected behavior:**\r\n* If you set the output setting to \"All\" there should be many more Information items in the output window\r\n* If you set the output setting to \"Off\" there shouldn't be anything in the output window\r\n\r\nTry again with the project TestBindingsNetFx.sln and the setting will work fine (.NET Framework's WPF)","Url":"https://github.com/dotnet/wpf/issues/1970","RelatedDescription":"Open issue \"Changing \"WPF Trace Settings\" for Visual Studio debugging has no effect\" (#1970)"},{"Id":"499378271","IsPullRequest":true,"CreatedAt":"2019-09-27T11:55:46","Actor":"dotnet-maestro[bot]","Number":"1968","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190927.1\r\n- **Date Produced**: 9/27/2019 10:39 AM\r\n- **Commit**: 1852a20161117ae4f72770ac8b646d119a396f7a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19477.1\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1968","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1968)"},{"Id":"499201917","IsPullRequest":false,"CreatedAt":"2019-09-27T02:31:55","Actor":"mysteryx93","Number":"1966","RawContent":null,"Title":"OnApplyTemplate not called on ContentControl","State":"open","Body":"Version: .NET Core 3\r\nWindows 10 x64\r\nIt works in .NET Framework 4.8\r\n\r\nI have a WPF user control deriving from ContentControl. It's working fine in .NET Framework 4.8. In .NET Core 3, however, OnApplyTemplate never gets called. (MediaPlayerWpf inherits from ContentControl)\r\n\r\n```\r\npublic class MpvMediaPlayer : MediaPlayerWpf\r\n{\r\n    public override void OnApplyTemplate()\r\n    {\r\n        base.OnApplyTemplate();\r\n        // This never gets called.\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/1966","RelatedDescription":"Open issue \"OnApplyTemplate not called on ContentControl\" (#1966)"},{"Id":"499170417","IsPullRequest":true,"CreatedAt":"2019-09-27T00:35:31","Actor":"dotnet-maestro[bot]","Number":"1965","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190926.2\r\n- **Date Produced**: 9/26/2019 11:51 PM\r\n- **Commit**: 3e3e5cde020a9084e8eab4c4f1a278b9d7e63566\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-preview1.19476.2\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1965","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#1965)"},{"Id":"499109859","IsPullRequest":false,"CreatedAt":"2019-09-26T20:51:26","Actor":"airbreather","Number":"1964","RawContent":null,"Title":"WindowsBase ref-assembly is missing some type forwards","State":"open","Body":"* .NET Core Version: **3.0.100**\r\n* Windows version: **Windows 10 v1809 (OS Build 17763.737)**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: **No**\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? **No**\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nCannot build when referencing very old WPF libraries that look for `System.Collections.ObjectModel.ObservableCollection<T>` in `WindowsBase.dll`\r\n\r\n **Actual behavior:**\r\n![image](https://user-images.githubusercontent.com/3792815/65722212-cad2fb80-e079-11e9-8df1-21a80342fbbb.png)\r\n \r\n **Expected behavior:**\r\n\r\nBuilds fine.\r\n \r\n **Minimal repro:**\r\n\r\n1. Unzip: [SampleSolution.zip](https://github.com/dotnet/wpf/files/3659810/SampleSolution.zip)\r\n1. Load the solution in Visual Studio 2019 (tested on Enterprise 16.3.1)\r\n1. Try to build it.\r\n1. Note that changing `SampleApp`'s `TargetFramework` to `net472`, it builds just fine.\r\n\r\n**My exploration**:\r\n\r\nShot in the dark, browsing the MSIL of `C:\\Program Files\\dotnet\\packs\\Microsoft.WindowsDesktop.App.Ref\\3.0.0\\ref\\netcoreapp3.0\\WindowsBase.dll`, it's missing these forwards that are present in `C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.0.0\\WindowsBase.dll`:\r\n\r\n```\r\n.class extern forwarder System.Collections.ObjectModel.ObservableCollection`1\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.ObjectModel.ReadOnlyObservableCollection`1\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.INotifyCollectionChanged\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.NotifyCollectionChangedAction\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.NotifyCollectionChangedEventArgs\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n.class extern forwarder System.Collections.Specialized.NotifyCollectionChangedEventHandler\r\n{\r\n\t.assembly extern System.ObjectModel\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/1964","RelatedDescription":"Open issue \"WindowsBase ref-assembly is missing some type forwards\" (#1964)"},{"Id":"499000747","IsPullRequest":true,"CreatedAt":"2019-09-26T16:48:17","Actor":"NaBian","Number":"1963","RawContent":null,"Title":"avoid boxing for xxxAnimationUsingKeyFrames","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/1963","RelatedDescription":"Open PR \"avoid boxing for xxxAnimationUsingKeyFrames\" (#1963)"},{"Id":"498765782","IsPullRequest":false,"CreatedAt":"2019-09-26T09:23:39","Actor":"vsfeedback","Number":"1962","RawContent":null,"Title":"WPF TreeView, virtualization, scroll, freeze","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/746990/wpf-treeview-virtualization-scroll-freeze.html)._\n\n---\nUsing VirtualizingStackPanel can freeze the execution.\nSteps to reproduce:\n1. Build a WPF application with TreeView, VirtualizingStackPanel , expanded nodes, release version,\n2. start the exe,\n3. scroll to the end of the tree,\n4. click on the scroll bar at the top and keep the left mouse button pressed.\nThe application freeze.\n\nTo reproduce try the following demo.:\n\n' XAML:\n\n&lt;Window x:Class=&quot;MainWindow&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:WpfApp1&quot;\n        mc:Ignorable=&quot;d&quot;\n        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;\n  &lt;Window.DataContext&gt;\n    &lt;local:ViewModel/&gt;\n  &lt;/Window.DataContext&gt;\n  &lt;Grid&gt;\n    &lt;TreeView ItemsSource=&quot;{Binding View}&quot; \n              VirtualizingPanel.IsVirtualizing=&quot;True&quot;\n              VirtualizingPanel.VirtualizationMode=&quot;Recycling&quot;\n              VirtualizingPanel.ScrollUnit=&quot;Item&quot;&gt;\n      &lt;TreeView.Resources&gt;\n        &lt;HierarchicalDataTemplate DataType=&quot;{x:Type local:Data}&quot; ItemsSource=&quot;{Binding Childs}&quot;&gt;\n          &lt;Label Content=&quot;{Binding Info}&quot;/&gt;\n        &lt;/HierarchicalDataTemplate&gt;\n      &lt;/TreeView.Resources&gt;\n      &lt;TreeView.ItemContainerStyle&gt;\n        &lt;Style TargetType=&quot;{x:Type TreeViewItem}&quot;&gt;\n          &lt;Setter Property=&quot;IsExpanded&quot; Value=&quot;True&quot;/&gt;\n        &lt;/Style&gt;\n      &lt;/TreeView.ItemContainerStyle&gt;\n    &lt;/TreeView&gt;\n  &lt;/Grid&gt;\n&lt;/Window&gt;\n\n' ViewModel:\n\nImports System.Collections.ObjectModel\nImports System.ComponentModel\n\nPublic Class ViewModel\n\nPublic Sub New()\n    For i = 1 To 100\n      Dim d As New Data With {. Info = $&quot;Node {i:000}&quot;}\n      For k = 1 To 10\n        Dim c As New Data With {. Info = $&quot;Child {i:000} {k:000}&quot;}\n        For l = 1 To 10\n          c.Childs.Add(New Data With {. Info = $&quot;Grandchild {i:000} {k:000} {l:000}&quot;})\n        Next\n        d.Childs.Add(c)\n      Next\n      col. Add(d)\n    Next\n    cvs. Source = col\n  End Sub\n\nPrivate col As New ObservableCollection(Of Data)\n  Private cvs As New CollectionViewSource\n\nPublic ReadOnly Property View As ICollectionView\n    Get\n      Return cvs. View\n    End Get\n  End Property\n\nEnd Class\n\n' Data class\n\nImports System.Collections.ObjectModel\n\nPublic Class Data\n  Public Property Info As String\n  Public Property Childs As New ObservableCollection(Of Data)\nEnd Class\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/1962","RelatedDescription":"Open issue \"WPF TreeView, virtualization, scroll, freeze\" (#1962)"},{"Id":"498597475","IsPullRequest":false,"CreatedAt":"2019-09-26T01:17:12","Actor":"mrNo0b","Number":"1961","RawContent":null,"Title":"Control selection reversed in Designer when FlowDirection=\"RightToLeft\"","State":"open","Body":"When I set **FlowDirection=\"RightToLeft\"** in MainWindow in WPF Core 3 app when I add controls to the MainWindow they shows up in their correct locations in Designer but when I want to click on them to select, the selection highlight is in the opposite side of the window\r\n`VS 2019 16.3.1`\r\n\r\n![designerIssue](https://user-images.githubusercontent.com/12209347/65650408-5f564300-e013-11e9-9744-85ecd26f1a60.png)","Url":"https://github.com/dotnet/wpf/issues/1961","RelatedDescription":"Open issue \"Control selection reversed in Designer when FlowDirection=\"RightToLeft\"\" (#1961)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-02T05:30:54.6961777Z","RunDurationInMilliseconds":767}