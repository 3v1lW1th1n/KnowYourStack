{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7208696424","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:45:29","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16249","RelatedDescription":"Opened pull request \"[WIP] Updating the emitter to more generally handle 4-Byte SSE4 instructions.\" (#16249) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @fiigii, @eerhardt\r\n\r\nThis should mostly resolve https://github.com/dotnet/coreclr/issues/15908 and https://github.com/dotnet/coreclr/issues/16216, at least for the code paths currently being executed.\r\n\r\nI've marked this as `WIP` for now as I think we should implement the SSE4.1 intrinsics as part of this to help validate that the changes are correct in the broader set of instructions (I think there are still a couple of code paths that will require the code size estimation to be updated)."},{"Id":"7208684400","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:40:11","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16247","RelatedDescription":"Merged pull request \"Fix Hebrew calendar month names list\" (#16247) at dotnet/coreclr","RelatedBody":"Fixes #16203"},{"Id":"7208684385","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:40:11","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16203","RelatedDescription":"Closed issue \"Assertion Failed [DateTimeFormatInfo.GetAbbreviatedMonthNames] Expected 12 or 13 month names in a year\" (#16203) at dotnet/coreclr","RelatedBody":"This assert is hit by Ubuntu checked corefx_baseline legs."},{"Id":"7208425284","Type":"PullRequestEvent","CreatedAt":"2018-02-07T03:00:02","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16213","RelatedDescription":"Merged pull request \"Disable crossgen for types containing intrinsic types\" (#16213) at dotnet/coreclr","RelatedBody":"@tannergooding @CarolEidt PTAL\r\n\r\nWhen implementing Short Vector and HVA support, I was getting assertions firing during crossgen.  Which was supposed to be still disabled.\r\n\r\nThis moved the issues out of crossgen.\r\n\r\nTest coverage for HW intrinsics needs to be extended to make sure these types do not make it through corssgen (even when nested)."},{"Id":"7208370719","Type":"IssuesEvent","CreatedAt":"2018-02-07T02:40:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15021","RelatedDescription":"Reopened issue \"getting HRESULT: 0x80131534 on Windows 8.1 when using dotnet\" (#15021) at dotnet/coreclr","RelatedBody":"Hello,\r\n\r\nI'm facing the following error whenever I use dotnet cli:\r\n`Failed To Initialize CoreCLR, HRESULT: 0x80131534` \r\n\r\nI know that `HRESULT: 0x80131534` is `TypeInitializationException`\r\n\r\nI have the following re-installed like a thousand times:\r\n* .NET Framework 4.7.1 DevPack and Runtimes. \r\n* .NET Core 2.0.2 SDK\r\n* .NET Core 2.0.0 Runtime\r\n\r\non Windows 8.1 Enterprise\r\n\r\nPlease advise\r\n"},{"Id":"7208341138","Type":"PullRequestEvent","CreatedAt":"2018-02-07T02:30:40","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16248","RelatedDescription":"Opened pull request \"Fixes GitHub Issue 16065\" (#16248) at dotnet/coreclr","RelatedBody":"Bug in the CSE phase when a CSE use contains a CSE def\r\n\r\nIn the error cases we could unmark or discard a CSE def. This CSE def might be needed when\r\n performing a subsequent CSE replacement.  This could lead to an uninitialized value being\r\n used for the CSE use.\r\n\r\nChanged optUnmarkCSE method to return a bool instead of a void.\r\nChanged optValuenumCSE_UnmarkCSEs  to take a write-back mutable wbKeepList argument\r\nRemoved an unreachable code block in fgRemoveStmt and replaced it with a noway_assert\r\nAdded method headers for optUnmarkCSE and optUnmarkCSEs\r\nRemoved the code that allowed unmarking of a CSE def, instead we return false\r\nRetyped the second arguments to optUnmarksCSEs and optValueNumCSE_UnmarkCSEs\r\n to support appending new nodes to keep using wbKeepList\r\nCode modifications to PerformCSE() to support collecting both persistent side effects and\r\n any nested CSE defs found in CSE uses.  Move the location of the call to\r\noptValueNumCSE_UnmarkCSEs so that it comes before the decision to create a GT_COMMA node\r\n for the cse use."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7208691902","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:43:31","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8552","RelatedDescription":"Opened pull request \"Update VersionTools version; CLI:release/2.1.3xx\" (#8552) at dotnet/cli","RelatedBody":"The BuildTasksFeedTool version and the VersionTools version should be in sync to prevent incompatabilities between these two packages.\r\n\r\nReference: https://github.com/dotnet/cli/pull/8539\r\n\r\nPublish errors:\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1358740\r\n\r\nE:\\A\\_work\\1992\\s\\build\\publish\\PublishContent.targets(29,5): error : Method not found: 'Void Microsoft.DotNet.VersionTools.BuildManifest.Model.BuildIdentity..ctor()'\r\nE:\\A\\_work\\1992\\s\\build\\publish\\PublishContent.targets(29,5): error :    at Microsoft.DotNet.Build.Tasks.Feed.PushToBlobFeed.<PushBuildManifestAsync>d__65.MoveNext()\r\n\r\n"},{"Id":"7208633109","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:18:32","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8551","RelatedDescription":"Opened issue \"portable global tool summary issue\" (#8551) at dotnet/cli","RelatedBody":"- [ ] uninstall https://github.com/dotnet/cli/issues/8549\r\n- [ ] list https://github.com/dotnet/cli/issues/8548\r\n- [ ] --force https://github.com/dotnet/cli/issues/8550\r\n- [ ] prelease https://github.com/dotnet/cli/issues/8485"},{"Id":"7208625735","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:15:26","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8550","RelatedDescription":"Opened issue \"--force, dotnet install tool -g with override existing command\" (#8550) at dotnet/cli","RelatedBody":"`--force` should override existing package regardless the version\r\n\r\n(need discuss) `--force` should uninstall existing package with the same command name and install new package regardless the **package id**\r\n\r\nexample:\r\ndotnet install tool -g normal.vim\r\ndotnet install tool -g --force bob.vim\r\n\r\nthe result will be normal.vim is uninstalled and bob.vim installed. Type `vim` will invoke Bob's vim"},{"Id":"7208608638","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:08:40","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8549","RelatedDescription":"Opened issue \"support of uninstall in dotnet install tool -g\" (#8549) at dotnet/cli","RelatedBody":"\r\n\r\n"},{"Id":"7208226043","Type":"IssuesEvent","CreatedAt":"2018-02-07T01:52:04","Actor":"arthurwhite","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8547","RelatedDescription":"Closed issue \"Command-line app development and distribution workflow\" (#8547) at dotnet/cli","RelatedBody":"This is kind of related to #7002.\r\n\r\nIs there an easy way to develop, build and distribute command-line apps in .NET Core 2.0?\r\n\r\n- In Python, you set [`entry_points`](https://packaging.python.org/tutorials/distributing-packages/#entry-points) in *setup.py* and install app with `pip install -e .` during development.\r\n- In Node.js, you set [`bin`](https://docs.npmjs.com/files/package.json#bin) in *package.json* and install app with `npm link` during development.\r\n- In Go, you write a [`main()`](https://golang.org/doc/code.html#Command) function and install app with `go install`.\r\n- Etc.\r\n\r\nSo I understand that we can produce either portable (DLL) or self-contained (EXE) builds with `dotnet publish -c <CONFIGURATION> -r <RUNTIME_IDENTIFIER>`, but what happens next?"},{"Id":"7207635323","Type":"IssuesEvent","CreatedAt":"2018-02-06T22:55:52","Actor":"arthurwhite","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8547","RelatedDescription":"Opened issue \"Command-line app development and distribution workflow\" (#8547) at dotnet/cli","RelatedBody":"Is there an easy way to develop, build and distribute command-line apps in .NET Core 2.0?\r\n\r\n- In Python, you set [`entry_points`](https://packaging.python.org/tutorials/distributing-packages/#entry-points) in *setup.py* and install app with `pip install -e .` during development.\r\n- In Node.js, you set [`bin`](https://docs.npmjs.com/files/package.json#bin) in *package.json* and install app with `npm link` during development.\r\n- In Go, you write a [`main()`](https://golang.org/doc/code.html#Command) function and install app with `go install`.\r\n- And so on…\r\n\r\nSo I understand that we can produce either portable (DLL) or self-contained (EXE) builds, but what happens next?"},{"Id":"7207630110","Type":"IssuesEvent","CreatedAt":"2018-02-06T22:54:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8525","RelatedDescription":"Closed issue \"Daily download borked (2.1.300-preview2-008042)\" (#8525) at dotnet/cli","RelatedBody":"I've been trying for a few days to download the daily from https://github.com/dotnet/cli/blob/master/README.md#installers-and-binaries\r\n\r\nAll of the binaries are failing to download, reporting a network error. This has been seen by multiple browsers on multiple devices by multiple users (see [here](https://gitter.im/dotnet/corefx?at=5a73028cb3c4a0d376c90ea5) and down).\r\n\r\nCan it be unborked, please?"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7199153839","Type":"IssuesEvent","CreatedAt":"2018-02-05T15:09:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/641","RelatedDescription":"Opened issue \"API to check memory usage on UWP (the Process class is not supported)\" (#641) at dotnet/standard","RelatedBody":"Hello, this is related to #327 and you can see my original question on StackOverflow [here](https://stackoverflow.com/questions/48622947/how-to-get-process-memory-from-both-net-standard-2-0-and-uwp/48623215?noredirect=1#comment84245854_48623215).\r\n\r\nBasically, the issue is that using:\r\n\r\n   ```var memory = System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64;```\r\n\r\nCrashes on UWP. In DEBUG mode, I get a `PlatformNotSupportedException`, while in RELEASE mode (possibly due to the .NET Native compiler) I get a `TypeLoadException` followed by a series of low-level exceptions, and apparently I can't catch any of these exceptions.\r\n\r\nEven placing the above line into a general `try/catch` block doesn't work, the app just crashes anyways.\r\n\r\nI understand the `Process` class is locked on UWP for security reasons, but there should be an API to at least be able to check the current memory usage (and CPU usage). Some \"read only\" APIs from the `Process` class that should be allowed on UWP too I mean.\r\n\r\nFor example, the .NET Standard `System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64` call should have an equivalent API that gets mapped to `Windows.System.MemoryManager` APIs on UWP.\r\n\r\nIs there a workaround, and/or is this something planned in the future?\r\nThanks!\r\n"},{"Id":"7190412954","Type":"IssuesEvent","CreatedAt":"2018-02-02T17:09:21","Actor":"colgreen","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/640","RelatedDescription":"Opened issue \"Support for XDocument.LoadAsync()\" (#640) at dotnet/standard","RelatedBody":"XDocument.LoadAsync() is available in dotnet core 2.0 but not .NET Standard 2.0. We have encountered a few scenarios recently where this would have been useful.\r\n\r\nThe the workarounds we have are:\r\n\r\n1) Do a synchronous Load() and have a thread blocked waiting for IO.\r\n\r\n2) An asynchronous load into memory (e.g. sourceStream.CopyToAsnc(tempMemoryStream) and then do an synchronous load from the MemoryStream (which of course has no IO), however this requires allocation of large arrays, associated garbage collection, etc. It will also be a poor choice for very large XML documents.\r\n\r\n"},{"Id":"7186097286","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:52:42","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Closed issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185998311","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:31:53","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Opened issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185077325","Type":"PullRequestEvent","CreatedAt":"2018-02-01T18:18:58","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Merged pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7184946192","Type":"PullRequestEvent","CreatedAt":"2018-02-01T17:51:31","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Opened pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7208694716","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:44:48","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26919","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#26919) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7208611392","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:09:43","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25565","RelatedDescription":"Closed pull request \"Not For Merge\" (#25565) at dotnet/corefx","RelatedBody":"This is to check whether dumpling and helix are creating dumps for hung processes"},{"Id":"7208506265","Type":"IssuesEvent","CreatedAt":"2018-02-07T03:29:29","Actor":"Microshaoft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26917","RelatedDescription":"Opened issue \"in .NET Core , after reset SocketAsyncEventArgs.Buffer's offset property and count property, socket.ReceiveAsync(SocketAsyncEventArgs) can't raise completed event .\" (#26917) at dotnet/corefx","RelatedBody":"In .NET Core , after reset SocketAsyncEventArgs.Buffer's offset property and count property, socket.ReceiveAsync(SocketAsyncEventArgs) can't raise completed event .\r\nBut same code in .NET Framework , it can run properly.\r\nthe whole code both in .NET Framework and .NET Core sample's URL as below:\r\nhttps://github.com/Microshaoft/Socket.Echo.Server\r\nthe source code are same absolutely.\r\nthe issue partial code snippet as below:\r\nyou can find \"issue\" for tips\r\n\r\n```\r\nReceiveSocketAsyncEventArgs\r\n\t.Completed += \r\n\t\t(\r\n\t\t\t(sender, e) =>\r\n\t\t\t{\r\n\t\t\t\tvar socket = sender as Socket;\r\n\t\t\t\tif (e.BytesTransferred >= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbyte[] buffer = e.Buffer;\r\n\t\t\t\t\tint r = e.BytesTransferred;\r\n\t\t\t\t\tint p = e.Offset;\r\n\t\t\t\t\tint l = e.Count;\r\n\t\t\t\t\tif (r < l)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tp += r;\r\n\t\t\t\t\t\t// issue: reset buffer's Offset property and Count Property\r\n\t\t\t\t\t\te.SetBuffer(p, l - r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (r == l)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (_isHeader)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbyte[] data = new byte[headerBytesCount];\r\n\t\t\t\t\t\t\tBuffer\r\n\t\t\t\t\t\t\t\t.BlockCopy\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tbuffer\r\n\t\t\t\t\t\t\t\t\t\t, HeaderBytesOffset\r\n\t\t\t\t\t\t\t\t\t\t, data\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, data.Length\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tbyte[] intBytes = new byte[4];\r\n\t\t\t\t\t\t\tl = \r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tintBytes.Length < HeaderBytesCount\r\n\t\t\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t\t\tintBytes.Length\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\tHeaderBytesCount\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tBuffer\r\n\t\t\t\t\t\t\t\t.BlockCopy\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tdata\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, intBytes\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, l\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t//Array.Reverse(intBytes);\r\n\t\t\t\t\t\t\tbodyLength = BitConverter.ToInt32(intBytes, 0);\r\n\t\t\t\t\t\t\tp += r;\r\n\t\t\t\t\t\t\t// issue: reset buffer's Offset property and Count Property\r\n\t\t\t\t\t\t\te.SetBuffer(p, bodyLength);\r\n\t\t\t\t\t\t\t_isHeader = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbyte[] data = new byte[bodyLength + HeaderBytesLength];\r\n\t\t\t\t\t\t\tbodyLength = 0;\r\n\t\t\t\t\t\t\tBuffer\r\n\t\t\t\t\t\t\t\t.BlockCopy\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tbuffer\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, data\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, data.Length\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t_isHeader = true;\r\n\t\t\t\t\t\t\t// issue: reset buffer's Offset property and Count Property\r\n\t\t\t\t\t\t\te.SetBuffer(0, HeaderBytesLength);\r\n\t\t\t\t\t\t\tonOneWholeDataPacketReceivedProcessFunc?\r\n\t\t\t\t\t\t\t\t\t.Invoke\r\n\t\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t\tthis\r\n\t\t\t\t\t\t\t\t\t\t\t, data\r\n\t\t\t\t\t\t\t\t\t\t\t, e\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (onReceivedDataPacketErrorProcessFunc != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbyte[] data = new byte[p + r + HeaderBytesLength];\r\n\t\t\t\t\t\t\tBuffer\r\n\t\t\t\t\t\t\t\t.BlockCopy\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tbuffer\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, data\r\n\t\t\t\t\t\t\t\t\t\t, 0\r\n\t\t\t\t\t\t\t\t\t\t, data.Length\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tbool b = onReceivedDataPacketErrorProcessFunc\r\n\t\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t\tthis\r\n\t\t\t\t\t\t\t\t\t\t\t, data\r\n\t\t\t\t\t\t\t\t\t\t\t, e\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tif (b)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbool i = DestoryWorkingSocket();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t_isHeader = true;\r\n\t\t\t\t\t\t\t\t// issue: reset buffer's Offset property and Count Property\r\n\t\t\t\t\t\t\t\te.SetBuffer(0, HeaderBytesLength);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isWorkingSocketDestoryed)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// loop ReceiveAsync\r\n\t\t\t\t\t\t// issue: after reset SocketAsyncEventArgs.Buffer's offset property and count property\r\n\t\t\t\t\t\t// , can't raise completed event\r\n\t\t\t\t\t\tsocket.ReceiveAsync(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Exception exception)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar r = false;\r\n\t\t\t\t\t\tif (onCaughtExceptionProcessFunc != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tr = onCaughtExceptionProcessFunc\r\n\t\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t\tthis\r\n\t\t\t\t\t\t\t\t\t\t\t, e\r\n\t\t\t\t\t\t\t\t\t\t\t, exception\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (r)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tDestoryWorkingSocket();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n```"},{"Id":"7208398576","Type":"PullRequestEvent","CreatedAt":"2018-02-07T02:50:31","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26916","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26916) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7208622869","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:14:15","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24680","RelatedDescription":"Closed issue \"Remove Unnecessary Usings misunderstands extension methods\" (#24680) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS 2017 15.5.6\r\nVS 2017 15.6.0 Preview 3.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nWrite the following code:\r\n\r\n```cs\r\nusing System.Linq;\r\nusing System.Reactive.Linq;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var array = new[] { 1, 2, 3, 4, 5 };\r\n        //var linq = Enumerable.Select(array, x => x * x);\r\n        var linq = array.Select(x => x * x);\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/3760955/35896016-7c681ae0-0bfd-11e8-83e5-780590de3ae7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3760955/35896025-8ad44090-0bfd-11e8-912e-9381bbdaeb86.png)\r\n\r\n**Expected Behavior**:\r\n\r\nBoth removes `using System.Reactive.Linq;`.\r\n\r\n**Actual Behavior**:\r\n\r\nOne using an extension method doesn't remove it.\r\n"},{"Id":"7208431543","Type":"IssuesEvent","CreatedAt":"2018-02-07T03:02:09","Actor":"ufcpp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24680","RelatedDescription":"Opened issue \"Remove Unnecessary Usings misunderstands extension methods\" (#24680) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS 2017 15.5.6\r\nVS 2017 15.6.0 Preview 3.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nWrite the following code:\r\n\r\n```cs\r\nusing System.Linq;\r\nusing System.Reactive.Linq;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var array = new[] { 1, 2, 3, 4, 5 };\r\n        //var linq = Enumerable.Select(array, x => x * x);\r\n        var linq = array.Select(x => x * x);\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/3760955/35896016-7c681ae0-0bfd-11e8-83e5-780590de3ae7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3760955/35896025-8ad44090-0bfd-11e8-912e-9381bbdaeb86.png)\r\n\r\n**Expected Behavior**:\r\n\r\nBoth removes `using System.Reactive.Linq;`.\r\n\r\n**Actual Behavior**:\r\n\r\nOne using an extension method doesn't remove it.\r\n"},{"Id":"7208191882","Type":"PullRequestEvent","CreatedAt":"2018-02-07T01:41:08","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24679","RelatedDescription":"Opened pull request \"Produce an error when a bridge method must be variadic\" (#24679) at dotnet/roslyn","RelatedBody":"Fixes:#24348\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7208080563","Type":"PullRequestEvent","CreatedAt":"2018-02-07T01:05:18","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24665","RelatedDescription":"Merged pull request \"Merge dev15.7.x to dev15.7.x-vs-deps\" (#24665) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.7.x into dev15.7.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.7.x-to-dev15.7.x-vs-deps-20180206-080026\ngit reset --hard upstream/dev15.7.x-vs-deps\ngit merge upstream/dev15.7.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.7.x-to-dev15.7.x-vs-deps-20180206-080026 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7207892877","Type":"IssuesEvent","CreatedAt":"2018-02-07T00:07:13","Actor":"TaffarelJr","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24678","RelatedDescription":"Opened issue \"C# compiler should not report CS1983 when ValueTask<T> is returned from async method.\" (#24678) at dotnet/roslyn","RelatedBody":"This seems to be the same issue as #19616, and I read through #17417 and #16530 as well. But since they're all closed, and it seems like it's been a while since #12621 was last worked on, I created this new issue.\r\n\r\nI've been working with `ValueTask<T>` over the past month or so, and it's been OK (with the `SuppressMessage` attribute), until just today I got this error that I can't get rid of. I wonder if this issue could have re-surfaced in a recent patch or something.\r\n\r\n**Version Used**: \r\nVisual Studio 15.5.6\r\n\r\n**Steps to Reproduce**:\r\nSimple solution containing one `.csproj` file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>netstandard1.0</TargetFramework>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"System.Threading.Tasks.Extensions\" Version=\"4.0.0\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand one class:\r\n```\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Threading.Tasks;\r\n\r\n#pragma warning disable CS1983 // The return type of an async method must be void, Task or Task<T>\r\n\r\nnamespace ClassLibrary\r\n{\r\n    public class MyClass\r\n    {\r\n        [SuppressMessage(\"Concurrency\", \"CS1983\", Justification = \"Returns a ValueTask instead of a Task, but is still awaitable.\")]\r\n        public async ValueTask<int> DoStuffAsync()\r\n        {\r\n            await Task.Delay(100);\r\n            return 5;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nThis code is just a simplistic example, but it should still compile without errors or warnings.\r\n\r\n**Actual Behavior**:\r\nVisual Studio shows error `CS1983: The return type of an async method must be void, Task or Task<T>` (with no context help to fix it) until I add either the `SuppressMessage` attribute or the `#pragma`. But even with both of those in place, when I go to build, the C# compiler still throws the same exception:\r\n\r\n```\r\n1>  Task \"Csc\"\r\n1>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1705,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;DEBUG;NETSTANDARD1_0 /errorendlocation /preferreduilang:en-US /reference:C:\\Users\\...\\.nuget\\packages\\system.collections\\4.3.0\\ref\\netstandard1.0\\System.Collections.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.diagnostics.debug\\4.3.0\\ref\\netstandard1.0\\System.Diagnostics.Debug.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.diagnostics.tools\\4.3.0\\ref\\netstandard1.0\\System.Diagnostics.Tools.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.globalization\\4.3.0\\ref\\netstandard1.0\\System.Globalization.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.io\\4.3.0\\ref\\netstandard1.0\\System.IO.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.linq\\4.3.0\\ref\\netstandard1.0\\System.Linq.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.linq.expressions\\4.3.0\\ref\\netstandard1.0\\System.Linq.Expressions.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.net.primitives\\4.3.0\\ref\\netstandard1.0\\System.Net.Primitives.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.objectmodel\\4.3.0\\ref\\netstandard1.0\\System.ObjectModel.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.reflection\\4.3.0\\ref\\netstandard1.0\\System.Reflection.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.reflection.extensions\\4.3.0\\ref\\netstandard1.0\\System.Reflection.Extensions.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.reflection.primitives\\4.3.0\\ref\\netstandard1.0\\System.Reflection.Primitives.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.resources.resourcemanager\\4.3.0\\ref\\netstandard1.0\\System.Resources.ResourceManager.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.runtime\\4.3.0\\ref\\netstandard1.0\\System.Runtime.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.runtime.extensions\\4.3.0\\ref\\netstandard1.0\\System.Runtime.Extensions.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.text.encoding\\4.3.0\\ref\\netstandard1.0\\System.Text.Encoding.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.text.encoding.extensions\\4.3.0\\ref\\netstandard1.0\\System.Text.Encoding.Extensions.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.text.regularexpressions\\4.3.0\\ref\\netstandard1.0\\System.Text.RegularExpressions.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.threading\\4.3.0\\ref\\netstandard1.0\\System.Threading.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.threading.tasks\\4.3.0\\ref\\netstandard1.0\\System.Threading.Tasks.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.threading.tasks.extensions\\4.0.0\\lib\\netstandard1.0\\System.Threading.Tasks.Extensions.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.xml.readerwriter\\4.3.0\\ref\\netstandard1.0\\System.Xml.ReaderWriter.dll /reference:C:\\Users\\...\\.nuget\\packages\\system.xml.xdocument\\4.3.0\\ref\\netstandard1.0\\System.Xml.XDocument.dll /debug+ /debug:portable /filealign:512 /nologo /optimize- /out:obj\\Debug\\netstandard1.0\\ClassLibrary.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ MyClass.cs \"C:\\Users\\...\\AppData\\Local\\Temp\\.NETStandard,Version=v1.0.AssemblyAttributes.cs\" obj\\Debug\\netstandard1.0\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Debug\\netstandard1.0\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Debug\\netstandard1.0\\\\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Debug\\netstandard1.0\\ClassLibrary.AssemblyInfo.cs /warnaserror+:NU1605\r\n1>    Using shared compilation with compiler from directory: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\r\n1>    MyClass.cs(11,31,11,43): error CS1983: The return type of an async method must be void, Task or Task<T>\r\n1>  Done executing task \"Csc\" -- FAILED.\r\n```"},{"Id":"7207867527","Type":"IssuesEvent","CreatedAt":"2018-02-06T23:59:51","Actor":"marek-safar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24677","RelatedDescription":"Opened issue \"Update System.Reflection.Metadata dependency\" (#24677) at dotnet/roslyn","RelatedBody":"**Version Used**: 2.6.1\r\n\r\nRoslyn builds and ships using old System.Reflection.Metadata dependency. The [fix](https://github.com/dotnet/corefx/issues/16354) was made to make System.Reflection.Metadata work on big-endian systems but Roslyn is still using very old version.\r\n\r\nThis blocks using Roslyn on big-endian systems and also makes features/enhancements like #24621 testing harder.\r\n\r\n/cc @jaredpar"},{"Id":"7207798437","Type":"PullRequestEvent","CreatedAt":"2018-02-06T23:38:58","Actor":"AbhitejJohn","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24599","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#24599) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps-20180202-080026\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps-20180202-080026 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7207798341","Type":"PullRequestEvent","CreatedAt":"2018-02-06T23:38:57","Actor":"AbhitejJohn","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24666","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#24666) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps-20180206-080028\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps-20180206-080028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7208677391","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:37:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5355","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5355) at dotnet/corert","RelatedBody":""},{"Id":"7208676102","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:36:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5354","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5354) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7208674533","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:35:51","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5354","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5354) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7208653775","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:27:14","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4511","RelatedDescription":"Closed issue \"Implement break opcode as trap\" (#4511) at dotnet/corert","RelatedBody":"Implement the break opcode. This normally breaks in a debugger, but that doesn't seem to be possible in WebAssembly, so we should start by implementing it as a trap. The method that handles the break opcode is\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L270"},{"Id":"7208653695","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:27:12","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5344","RelatedDescription":"Merged pull request \"Implement break opcode as llvm.debugtrap\" (#5344) at dotnet/corert","RelatedBody":"Implemented break opcode as llvm.debugtrap. Not adding any test cases since it seems that no C# codes generates break opcode directly."},{"Id":"7204592304","Type":"PullRequestEvent","CreatedAt":"2018-02-06T13:15:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5353","RelatedDescription":"Merged pull request \"Cleanup NuGet rids\" (#5353) at dotnet/corert","RelatedBody":"Switch rid to generic linux in most places and stop pretending that we are on ubuntu-14.04. ubuntu-14.04 is left just at the two places that still need it."},{"Id":"7203475048","Type":"PullRequestEvent","CreatedAt":"2018-02-06T09:20:48","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5352","RelatedDescription":"Closed pull request \"[Linux] Fix build for non-Ubuntu distros\" (#5352) at dotnet/corert","RelatedBody":"If we compile CoreRT on other Linux distributions(non-Ubuntu), it fails with:\r\n```\r\nCoreRT/Tools/depProj.targets(83,5): error : Error no assets were resolved from NuGet packages. [CoreRT/src/ILCompiler/ObjectWriter/ObjectWriter.depproj]\r\n...\r\nCoreRT/dir.traversal.targets(24,5): error : (No message specified) [CoreRT/src/dirs.proj]\r\nCoreRT/dir.traversal.targets(24,5): error : (No message specified) [CoreRT/build.proj]\r\n```\r\nIt's because ObjWriter msbuild file has:\r\n```\r\n<RuntimeIdentifiers>$(NuPkgRid)</RuntimeIdentifiers>                                                                                                                                      \r\n<RuntimeIdentifiers Condition=\"$(NuPkgRid.StartsWith('ubuntu.'))\">ubuntu.14.04-x64</RuntimeIdentifiers>\r\n```\r\nIt seems with \"linux\" RID it doesn't work properly. I think it will be correct to set the default ubuntu ID, as for other non OS X distros."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7208706963","Type":"IssuesEvent","CreatedAt":"2018-02-07T04:50:05","Actor":"steevcoco","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1936","RelatedDescription":"Opened issue \"GenerateDocumentationFile doesn't run if imported from another target\" (#1936) at dotnet/sdk","RelatedBody":"Hello! :bowtie:\r\n\r\nIf I define GenerateDocumentationFile in an imported .targets file, then the project does not build the doc file.\r\n\r\nWith a simple imported .targets file like this:\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n        <PropertyGroup>\r\n            <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n        </PropertyGroup>\r\n    </Project>\r\n\r\nAnd a simple project like this:\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n        <PropertyGroup>\r\n            <TargetFramework>netstandard2.0</TargetFramework>\r\n        </PropertyGroup>\r\n        <Import Project=\"..\\..\\..\\Build\\Sc.CommonLibraryConfiguration.targets\" />\r\n    </Project>\r\n\r\nThe documentation file is not built. ... "},{"Id":"7208635927","Type":"PullRequestEvent","CreatedAt":"2018-02-07T04:19:49","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1935","RelatedDescription":"Merged pull request \"Rename to BundledNETCorePlatformsPackageVersion\" (#1935) at dotnet/sdk","RelatedBody":""},{"Id":"7207386790","Type":"PullRequestEvent","CreatedAt":"2018-02-06T22:00:05","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1935","RelatedDescription":"Opened pull request \"Rename to BundledNETCorePlatformsPackageVersion\" (#1935) at dotnet/sdk","RelatedBody":""},{"Id":"7207168952","Type":"PullRequestEvent","CreatedAt":"2018-02-06T21:14:32","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1821","RelatedDescription":"Merged pull request \" Suppress assets messages for Clean target.\" (#1821) at dotnet/sdk","RelatedBody":"This commit ensures that messages from `project.assets.json` aren't logged for\r\nthe `Clean` target.  If a project is cleaned that has diagnostic messages\r\nstored from a previous restore operation, the Clean target would previously\r\nlog the messages via the `ReportAssetsLogMessages` target.\r\n\r\nSince a clean operation does not perform a restore, this is confusing to users.\r\nThe fix is to set the `EmitAssetsLogMessages` property to `false` for the\r\n`Clean` target.\r\n\r\nFixes dotnet/cli#8027."},{"Id":"7207026297","Type":"IssuesEvent","CreatedAt":"2018-02-06T20:41:31","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1930","RelatedDescription":"Closed issue \"OutOfMemoryException in XAML designer due to failed assembly reference resolution based on PackageReference tag\" (#1930) at dotnet/sdk","RelatedBody":"XAML Workflow Activity designer 100% throws **OutOfMemoryException** and crashes when some specific NuGet packages are referred through PackageReference (NOT with packages.config) using the \"old\" project file format (`<Project ToolsVersion=\"15.0\" ...>` and NOT `<Project Sdk=\"Microsoft.NET.Sdk\">`).\r\n\r\nI think this is caused by some assembly reference resolution error in the new **PackageReference** related code and related to #1244, #1499\r\n\r\nSteps to reproduce:\r\n* VS 2017 (any VS 15.x version I've tested fails)\r\n* fresh new empty solution with Workflow Activity library added from original VS template (net461, though any version I've tested fails)\r\n* add **any ONE** of these NuGet packages with **PackageReference** (NOT with packages.config)\r\n  * Microsoft.Orleans.Core (v1.5.3, though any version I've tested fails)\r\n  * Microsoft.Orleans.Core.Abstractions (v2.0.0-beta3, though any version I've tested fails)\r\n  * Abp (v3.4.0) + add reference to System.Drawing\r\n  * Dapper (v1.50.4)\r\n  * Orleans.Activities (v0.3.0)\r\n* open the empty Activity1.xaml in the designer\r\n\r\nInstead of opening the designer, VS says:\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at VSLangProj.Reference.get_PublicKeyToken()\r\n   at Microsoft.VisualStudio.Activities.Helper.CreateAssemblyNameFromReference(Reference r)\r\n   at Microsoft.VisualStudio.Activities.Helper.GetReferenceAssemblies(VSProject project)\r\n   at Microsoft.VisualStudio.Activities.EditorPane.get_ReferencedAssemblies()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.ResetShadowCopyPath()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.CreateWorkflowDesignerInIsolatedMode()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.Load(String fileName, UInt32 formatMode, Int32 readOnly)\r\n```\r\n\r\nSome of the above packages (Microsoft.Orleans.Core, Orleans.Activities, Abp) also causes the \"The referenced component 'System.Net.Http' could not be found.\" warning, so after adding the below code to the end of the project files, the warning disappears, but the XAML designer still crashes:\r\n```\r\n  <Target Name=\"UpdateOriginalItemSpecs\" AfterTargets=\"ResolveAssemblyReferences\">\r\n    <ItemGroup>\r\n      <ReferencePath>\r\n        <OriginalItemSpec>%(ReferencePath.FileName)</OriginalItemSpec>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n**But 2 warnings remain even after adding the above target to the project file (I think the XAML designer uses some different target for assembly resolution):**\r\n* Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\r\n* Could not compile workflow expressions because file 'file:///C:\\Users\\lmagyar\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\r\n\r\nNote: referring Microsoft.Orleans.Core.*Abstractions* or Dapper doesn't cause any warning, the designer simply crashes. Adding the above target workaround, doesn't change anything.\r\n\r\nI've tried to investigate:\r\n* I've added all the ~50 nuget packages that is referenced through Microsoft.Orleans.Core (based on the packages.config in another project), with PackageReference, no problem, but finally adding Microsoft.Orleans.Core results in the exception\r\n* I've tried several assembly binding redirects, nothing changes, exception\r\n* devenv.exe /safemode, exception\r\n* I've also tried to debug devenv, but I think due to CreateWorkflowDesignerInIsolatedMode(), I wasn't able to catch the exception\r\n* MSBuild.exe builds without any warning\r\n\r\nThis error also reported multiple times at several places:\r\n* https://developercommunity.visualstudio.com/content/problem/61637/vs-2017-outofmemoryexception-in-xaml-activity-desi.html\r\n* https://developercommunity.visualstudio.com/content/problem/113977/out-of-memory-exception-when-loading-workflow-xaml.html\r\n* https://developercommunity.visualstudio.com/content/problem/162045/windows-workflow-foundation-1.html\r\n* aspnetboilerplate/aspnetboilerplate#2805\r\n\r\nUsing the new project file format (`<Project Sdk=\"Microsoft.NET.Sdk\">`) is not an option, because it doesn't contain the XamlAppDef BuildAction and though the XAML designer starts without crash, it doesn't resolve any assembly, so useless. Using packages.config as workaround is awfully slow and painful.\r\n\r\nMaybe @dmetzgar can add some insights about the internals of the XAML Workflow Activity designer.\r\n"},{"Id":"7207019331","Type":"IssuesEvent","CreatedAt":"2018-02-06T20:39:58","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1929","RelatedDescription":"Closed issue \".NET Core 2.1.xx is not availabe in Visual Studio 2017 \" (#1929) at dotnet/sdk","RelatedBody":"Cannot create a class library or console app using .NET Core v2.0.\r\nI can create it via command line but not using Visual Studio 2017.\r\nSo project will not build.\r\n\r\n\r\n------------\r\n\r\n.NET Core v2.1.4 is fully installed.\r\n>dotnet --version\r\n2.1.4\r\n\r\n----------------------\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.6\r\nVisualStudio.15.Release/15.5.6+27130.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00369-60000-00001-AA456\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA456\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA456\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.2000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.2000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.2000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.2000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.0\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.2000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nNode.js Tools   1.4.11025.7\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nWebJobs Tools v1.0.0   15.0.40108.0\r\nWebJobs Tools v1.0.0\r\n"},{"Id":"7203136397","Type":"PullRequestEvent","CreatedAt":"2018-02-06T08:00:52","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1934","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1934) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180206-080050\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180206-080050 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7203136277","Type":"PullRequestEvent","CreatedAt":"2018-02-06T08:00:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1933","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1933) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180206-080049\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180206-080049 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"960930092372381696","CreatedAt":"2018-02-06T17:36:01+00:00","UserScreenname":"dotnet","Text":"Register now for @DEVintersection for a workshop package and go home with an awesome piece of hardware Xbox One X,… https://t.co/PqoYqNI5Ga","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":94,"FavoriteCount":79,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":240,"FavoriteCount":186,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":109,"FavoriteCount":75,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":214,"FavoriteCount":169,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":82,"FavoriteCount":27,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-02-07T05:30:20.8977381Z","RunDurationInMilliseconds":8052}