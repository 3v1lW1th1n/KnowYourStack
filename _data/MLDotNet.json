{"Data":{"GitHub":{"Issues":[{"Id":"349674104","IsPullRequest":true,"CreatedAt":"2018-08-10T22:23:31","Actor":"briancylui","Number":"672","RawContent":null,"Title":"Change SseUtils call sites to call CpuMathUtils instead","State":"open","Body":"After all active SSE intrinsics have been implemented and tested for correctness and speed, this PR asks to make all external `SseUtils` call sites call `CpuMathUtils` instead.  This would allow us to obtain a baseline performance of C# hardware intrinsics APIs in a future PR.\r\n\r\ncc: @safern @danmosemsft @eerhardt @tannergooding ","Url":"https://github.com/dotnet/machinelearning/pull/672","RelatedDescription":"Open PR \"Change SseUtils call sites to call CpuMathUtils instead\" (#672)"},{"Id":"348907770","IsPullRequest":true,"CreatedAt":"2018-08-10T22:07:36","Actor":"briancylui","Number":"668","RawContent":null,"Title":"Port all active C# hardware intrinsics APIs for SSE from SIMD native algorithms","State":"closed","Body":"### What's new:\r\n1. Implemented all remaining active SSE intrinsics, including their software fallbacks and passing unit tests\r\n2. Implemented the performance tests of all remaining active SSE intrinsics, except for those that accept `AlignedArray` as an argument\r\n3. Performance test results for all applicable, active SSE intrinsics are updated in https://github.com/briancylui/machinelearning/issues/1\r\n\r\n### Description from https://github.com/dotnet/machinelearning/pull/562:\r\n- with unit tests and performance tests for two target frameworks: .NET Core App 3.0 and .NET Standard 2.0.\r\n- .NET Core App 3.0 gets the new C# hardware intrinsics APIs, while .NET Standard 2.0 gets the original native SIMD algorithms.\r\n- Several things have made this multi-targeting feature possible.\r\n   1. The new CpuMathUtils class that contains the new APIs is implemented as a partial class with method definitions split into two separate files (src\\Microsoft.ML.CpuMath\\CpuMathUtils.[target].cs), only one of which is compiled based on the target framework.\r\n   2. The Microsoft.ML.CpuMath.csproj file makes the switching decision to compile the right files based on the target framework.\r\n\r\n### Structure:\r\n1. All new hardware intrinsics APIs are contained in src\\Microsoft.ML.CpuMath.\r\n2. Unit tests for the two target frameworks live in test\\Microsoft.ML.CpuMath.UnitTests.[target], and contain the same content except for the target framework in .csproj.\r\n3. Performance tests live in test\\Microsoft.ML.CpuMath.PerformanceTests.\r\n\r\n### Changes to users:\r\n1. Originally, users call intrinsics APIs via the SseUtils class in src\\Microsoft.ML.CpuMath\\Sse.cs, but now they call them via the new CpuMathUtils class, which will handle switching between SSE and AVX in the future.\r\n2. CpuMathUtils methods and SseUtils methods share the same signature, but CpuMathUtils methods additionally call a new helper class (SseIntrinsics) for C# implementations of SSE operations.\r\n\r\n### Future follow-up for `CpuMath` enhancement\r\n1. Suggestions on `CpuMath` enhancement in this PR scheduled for future follow-ups have been compiled into an issue page (https://github.com/briancylui/machinelearning/issues/2).\r\n\r\n### List of new SSE intrinisics implemented\r\n•\tMatMulA\r\n•\tMatMulTranA\r\n•\tMatMulPA\r\n•\tMatMulTranPA\r\n•\tSdcaL1UpdateU\r\n•\tSdcaL1UpdateSU\r\n•\tAddScaleCopyU\r\n•\tSumU\r\n•\tAddScalarU\r\n•\tSumSqDiffU\r\n•\tSumAbsDiffU\r\n•\tMaxAbsDiffU\r\n•\tMaxAbsU\r\n•\tScaleSrcU\r\n•\tScaleAddU\r\n•\tZeroItemsU\r\n•\tZeroMatrixItemsCoreU\r\n\r\ncc: @eerhardt @tannergooding @safern @danmosemsft ","Url":"https://github.com/dotnet/machinelearning/pull/668","RelatedDescription":"Closed or merged PR \"Port all active C# hardware intrinsics APIs for SSE from SIMD native algorithms\" (#668)"},{"Id":"349324749","IsPullRequest":true,"CreatedAt":"2018-08-09T23:22:39","Actor":"eerhardt","Number":"671","RawContent":null,"Title":" Move Scorers and Calibrators to use IComponentFactory.","State":"open","Body":"Also, PartitionedFileLoader is now SubComponent-free.\r\n\r\nThis is the next round of SubComponent removal from our public API.  I've removed all `Scorer` and `Calibrator` usages of SubComponent.\r\n\r\n@Ivanidzo4ka - I still need to update this so CmdParser doesn't throw an exception.  I'll do that when I'm back in the office. I wanted to send this out now to get eyes on it while I'm out.","Url":"https://github.com/dotnet/machinelearning/pull/671","RelatedDescription":"Open PR \" Move Scorers and Calibrators to use IComponentFactory.\" (#671)"},{"Id":"348931057","IsPullRequest":false,"CreatedAt":"2018-08-09T17:51:10","Actor":"Ivanidzo4ka","Number":"669","RawContent":null,"Title":"Binary learners need to have IComponentFactory implementation in order to work with OVA.","State":"closed","Body":"With #622 OVA expects predictor type to be IComponentFactory, and in current moment only learner which exposed itself as  component is FastTree, and it exposes itself only as ITrainer instead of ITrainer<IPredictorProducing<Float>> required for OVA.\r\n\r\nWhich mean we have to go through all our Binary learners and expose them as ComponentKind and create proper factories. Same probably states for Regression, MultiClass, and Ranking.","Url":"https://github.com/dotnet/machinelearning/issues/669","RelatedDescription":"Closed issue \"Binary learners need to have IComponentFactory implementation in order to work with OVA.\" (#669)"},{"Id":"348979642","IsPullRequest":true,"CreatedAt":"2018-08-09T17:50:52","Actor":"Ivanidzo4ka","Number":"670","RawContent":null,"Title":"WIP Introduce I*PredictionKind*TrainerFactory and propagate them ","State":"closed","Body":"Fixes #669.\r\n\r\nNeed to kill all LoadableClasses attributes, and figure out why command line parser throw assert.\r\n\r\n@eerhardt  this is related to comment in your PR regarding subcomponents, and I just don't want you to do same job since this is about 90% complete.","Url":"https://github.com/dotnet/machinelearning/pull/670","RelatedDescription":"Closed or merged PR \"WIP Introduce I*PredictionKind*TrainerFactory and propagate them \" (#670)"},{"Id":"348723847","IsPullRequest":false,"CreatedAt":"2018-08-09T13:23:47","Actor":"sfilipi","Number":"664","RawContent":null,"Title":"Documentation fixes","State":"closed","Body":"The xml documentation has a few things to fix. \r\n\r\n- MissingValuesRowDropper.Complement link in the MissingValuesRowDropper page. \r\n- List of links on the 'more information' of the FastTree pages because of the missing type in the list. \r\n- Symsgd documentation needs to be wired to the CSharpAPI.cs\r\n - Indentation fixes for some of the examples. \r\n- Paragraphing text for CategoricalOneHotVectorizer.  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/664","RelatedDescription":"Closed issue \"Documentation fixes\" (#664)"},{"Id":"348727104","IsPullRequest":true,"CreatedAt":"2018-08-08T19:47:30","Actor":"sfilipi","Number":"665","RawContent":null,"Title":"Documentation fixes for the issues in #664","State":"closed","Body":"Linked Microsoft.ML.SymSgdBinaryClassifier to its documentation. \r\nFixes the missing type in the list element of the FastTree documentation. \r\nIndented examples. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/665","RelatedDescription":"Closed or merged PR \"Documentation fixes for the issues in #664\" (#665)"},{"Id":"348849406","IsPullRequest":true,"CreatedAt":"2018-08-08T18:54:07","Actor":"codemzs","Number":"667","RawContent":null,"Title":"Add sigmoid to lightgbm parameter list and change default to 1.","State":"open","Body":"fixes #654 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/667","RelatedDescription":"Open PR \"Add sigmoid to lightgbm parameter list and change default to 1.\" (#667)"},{"Id":"348835803","IsPullRequest":false,"CreatedAt":"2018-08-08T18:13:45","Actor":"arunrules","Number":"666","RawContent":null,"Title":"Entry point 'Transforms.CategoricalOneHotVectorizer' not found","State":"open","Body":"I built my first dummy ml.net console app from my dev box and ensured it worked as expected.\r\n \r\nThen I copied the binaries (console app + a bunch of [136] Micrososft.ML.* and its dependencies) to a windows server machine and I see the following exception.\r\n \r\nUnhandled Exception: System.InvalidOperationException: Entry point 'Transforms.CategoricalOneHotVectorizer' not found\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode..ctor(IHostEnvironment env, IChannel ch, ModuleCatalog moduleCatalog, RunContext context, String id, String entryPointName, JObject inputs, JObject outputs, Boolean checkpoint, String stageId, Single cost, String label, String group, String weight, String name)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.ValidateNodes(IHostEnvironment env, RunContext context, JArray nodes, ModuleCatalog moduleCatalog, String label, String group, String weight, String name)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointGraph..ctor(IHostEnvironment env, ModuleCatalog moduleCatalog, JArray nodes)\r\n   at Microsoft.ML.Runtime.Experiment.Compile()\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n   at MyMLApp2.Program.Train() in E:\\ML\\MyMLApp2\\MyMLApp2\\Program.cs:line 111\r\n   at MyMLApp2.Program.Main(String[] args) in E:\\ML\\MyMLApp2\\MyMLApp2\\Program.cs:line 64\r\n \r\nany idea why?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/666","RelatedDescription":"Open issue \"Entry point 'Transforms.CategoricalOneHotVectorizer' not found\" (#666)"},{"Id":"348522576","IsPullRequest":true,"CreatedAt":"2018-08-08T17:28:13","Actor":"montebhoover","Number":"662","RawContent":null,"Title":"Add reference to ImageAnalytics nuget so image transforms are packaged.","State":"closed","Body":"Add reference to ImageAnalytics nuget so image transforms/learners are packaged.\r\n\r\nFixes #661 \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/662","RelatedDescription":"Closed or merged PR \"Add reference to ImageAnalytics nuget so image transforms are packaged.\" (#662)"},{"Id":"348521748","IsPullRequest":false,"CreatedAt":"2018-08-08T17:28:13","Actor":"montebhoover","Number":"661","RawContent":null,"Title":"Microsoft.ML.ImageAnalytics nuget doesn't produce dlls for transforms/learners.","State":"closed","Body":"After installing the Microsoft.ML.ImageAnalytics nuget and building, the packages folder for ImageAnalytics is empty.  This is due to the fact that it is not referenced by the Microsoft.ML.ImageAnalytics.csproj file.  The fix would be to add the following line to the .csproj:\r\n\r\n`<IncludeInPackage>Microsoft.ML.ImageAnalytics</IncludeInPackage>`","Url":"https://github.com/dotnet/machinelearning/issues/661","RelatedDescription":"Closed issue \"Microsoft.ML.ImageAnalytics nuget doesn't produce dlls for transforms/learners.\" (#661)"},{"Id":"347801684","IsPullRequest":false,"CreatedAt":"2018-08-08T17:07:59","Actor":"codemzs","Number":"648","RawContent":null,"Title":"Pass MKL version to CMAKE from MSBUILD","State":"closed","Body":"CMAKE uses MKL library to build native SymSGD library. Currently MKL version is hard-coded to 0.0.0.5 but it would be better it this version information is passed from MSBUILD to CMAKE. MSBUILD would retrieve MKL version that is being used from dependencies.prop file in build directory under root.","Url":"https://github.com/dotnet/machinelearning/issues/648","RelatedDescription":"Closed issue \"Pass MKL version to CMAKE from MSBUILD\" (#648)"},{"Id":"347798420","IsPullRequest":true,"CreatedAt":"2018-08-08T17:07:59","Actor":"codemzs","Number":"647","RawContent":null,"Title":"Pass MKL version to CMAKE from MSBUILD.","State":"closed","Body":"fixes #648 ","Url":"https://github.com/dotnet/machinelearning/pull/647","RelatedDescription":"Closed or merged PR \"Pass MKL version to CMAKE from MSBUILD.\" (#647)"},{"Id":"347894183","IsPullRequest":false,"CreatedAt":"2018-08-08T05:51:47","Actor":"rauhs","Number":"649","RawContent":null,"Title":"Multi class prediction: Best score doesn't always match prediction","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n- **.NET Version (eg., dotnet --info)**: 2.1.202\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI wanted to get \"top-k\" or \"best predictions\" from a multi classification problem. The code:\r\n\r\n```C#\r\nmodel.TryGetScoreLabelNames(out var classMapping);\r\n        foreach (var toEval in dataTrain)\r\n        {\r\n          var prediction = model.Predict(toEval);\r\n          var sortedScores = prediction.Score.Zip(classMapping, Tuple.Create).OrderBy(sk => -sk.Item1).ToArray();\r\n          var sum = prediction.Score.Sum(); // correctly usually ~1\r\n          var topPrediction = sortedScores.First().Item2;\r\n          if (topPrediction != prediction.CarrierId)\r\n          {\r\n            Console.WriteLine(\"Dont match. Bad!\");\r\n          }\r\n        }\r\n```\r\nwhere `CarrierId` is my predicted label (a string).\r\n\r\nI'm using `SDCA` with (roughly):\r\n\r\n```C#\r\nreturn new LearningPipeline()\r\n      {\r\n        CollectionDataSource.Create(dataTrain),\r\n        new Dictionarizer((\"CarrierId\", \"Label\")),\r\n       ....\r\n    } \r\n```\r\n\r\n- **What happened?**\r\nSometimes, the predicted label doesn't match the to score in `Scores`.\r\n\r\nNote: The class in `CarrierId` is usually the correct class and the top scored class is not correct.","Url":"https://github.com/dotnet/machinelearning/issues/649","RelatedDescription":"Closed issue \"Multi class prediction: Best score doesn't always match prediction\" (#649)"},{"Id":"348580141","IsPullRequest":false,"CreatedAt":"2018-08-08T05:28:31","Actor":"rauhs","Number":"663","RawContent":null,"Title":"System.TypeLoadException: Could not load type 'Microsoft.ML.Runtime.ITrainer`2'","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: 10.0.14\r\n- **.NET Version (eg., dotnet --info)**: 2.1.202\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nUpgraded my pipeline to v0.4. It used SDCA multi classification.\r\n\r\nOn the *first* `Train` call it always throws a\r\n\r\n```\r\nSystem.TypeLoadException: Could not load type 'Microsoft.ML.Runtime.ITrainer`2' from assembly 'Microsoft.ML.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n   at System.Reflection.CustomAttribute._CreateCaObject(RuntimeModule pModule, IRuntimeMethodInfo pCtor, Byte** ppBlob, Byte* pEndBlob, Int32* pcNamedArgs)\r\n   at System.Reflection.CustomAttribute.CreateCaObject(RuntimeModule module, IRuntimeMethodInfo ctor, IntPtr& blob, IntPtr blobEnd, Int32& namedArgs)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeAssembly assembly, RuntimeType caType)\r\n   at System.Attribute.GetCustomAttributes(Assembly element, Type attributeType, Boolean inherit)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.CacheLoadedAssemblies()\r\n   at Microsoft.ML.Runtime.ComponentCatalog.FindLoadableClasses[TSig]()\r\n   at Microsoft.ML.Runtime.EntryPoints.ModuleCatalog..ctor(IExceptionContext ectx)\r\n   at Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.CreateInstance(IExceptionContext ectx)\r\n   at Microsoft.ML.Runtime.Experiment..ctor(IHostEnvironment env)\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n```\r\n\r\nIt works fine on subsequent training calls to similar pipelines. It worked fine under 0.3","Url":"https://github.com/dotnet/machinelearning/issues/663","RelatedDescription":"Open issue \"System.TypeLoadException: Could not load type 'Microsoft.ML.Runtime.ITrainer`2'\" (#663)"},{"Id":"348128489","IsPullRequest":true,"CreatedAt":"2018-08-07T16:31:37","Actor":"GalOshri","Number":"656","RawContent":null,"Title":"Add release notes for ML.NET 0.4","State":"closed","Body":"This adds release notes for ML.NET 0.4. \r\n\r\nNote that some of the documentation links are not available yet. They will start working after the official release.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/656","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.4\" (#656)"},{"Id":"348385143","IsPullRequest":true,"CreatedAt":"2018-08-07T15:57:57","Actor":"xadupre","Number":"660","RawContent":null,"Title":"Add method AddSerialize to class Experiment to add custom entrypoints.","State":"open","Body":"Fixes #659, all entrypoints in class Experiment are stored in _jsonNodes. The method AddSerialize can appends a new node not necessarily defined in Microsoft.ML.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/660","RelatedDescription":"Open PR \"Add method AddSerialize to class Experiment to add custom entrypoints.\" (#660)"},{"Id":"348381909","IsPullRequest":false,"CreatedAt":"2018-08-07T15:50:03","Actor":"xadupre","Number":"659","RawContent":null,"Title":"Cannot create entry point for a new learner in a package with depends on Microsoft.ML.","State":"open","Body":"The Following instruction ``_jsonNodes.Add(Serialize(\"Data.DataViewReference\", input, output));`` is automatocally generated for every entrypoint but _jsonNodes is private member. I did not find a way to add a custom learner in a package which takes Microsoft.ML as a dependency.","Url":"https://github.com/dotnet/machinelearning/issues/659","RelatedDescription":"Open issue \"Cannot create entry point for a new learner in a package with depends on Microsoft.ML.\" (#659)"},{"Id":"348345674","IsPullRequest":true,"CreatedAt":"2018-08-07T14:26:17","Actor":"Nepomuceno","Number":"658","RawContent":null,"Title":"[WIP] Including Thread Id in the path to avoid collisions","State":"open","Body":"This pull request it is to try to solve the problem at #568 \r\n\r\nWhat we did was add the Thread ID in the extracted entity this might result in one entity being added more than once in case there are multi thread working int the solution. Would be good to validate that but I was unsure on how to do it. Another solution would be just to not include anything in case the file it is being extracted already. \r\n\r\nWhat it is the desired behavior for this library would be subjected to how it works if someone from the team could help in understanding that I would be grateful.","Url":"https://github.com/dotnet/machinelearning/pull/658","RelatedDescription":"Open PR \"[WIP] Including Thread Id in the path to avoid collisions\" (#658)"},{"Id":"348287385","IsPullRequest":false,"CreatedAt":"2018-08-07T11:51:09","Actor":"kdcllc","Number":"657","RawContent":null,"Title":"Adding MP3 processing support porting pyAudioAnalysis library","State":"open","Body":"This is a feature request. Currently, I have to use Python libraryhttps://github.com/tyiannak/pyAudioAnalysis in order to process MP3 files and retrieve feature set. I would like to see this library ported to ML.NET functionality.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/657","RelatedDescription":"Open issue \"Adding MP3 processing support porting pyAudioAnalysis library\" (#657)"},{"Id":"348126800","IsPullRequest":false,"CreatedAt":"2018-08-07T00:42:16","Actor":"codemzs","Number":"655","RawContent":null,"Title":"OpemMP support for MKL library and SymSGD.","State":"open","Body":"Current MKL library was not built with parallel option to not have dependency on OpenMP because we are still waiting for guidance from legal department on redistributing open mp binary.","Url":"https://github.com/dotnet/machinelearning/issues/655","RelatedDescription":"Open issue \"OpemMP support for MKL library and SymSGD.\" (#655)"},{"Id":"348120663","IsPullRequest":false,"CreatedAt":"2018-08-07T00:01:53","Actor":"mjmckp","Number":"654","RawContent":null,"Title":"Default value of sigmoid parameter for LightGBM","State":"open","Body":"[The default value of the `sigmoid` parameter for LightGBM is 1](https://github.com/Microsoft/LightGBM/blob/master/docs/Parameters.rst#sigmoid), however in the ML.Net wrapper it is hardwired to 0.5:\r\nhttps://github.com/dotnet/machinelearning/blob/f9d3973a056ad26bc6cc15c2d7a09f8ae47e30da/src/Microsoft.ML.LightGBM/LightGbmArguments.cs#L404\r\n\r\nWhy is this the case? Shouldn't this parameter either be 1 or exposed on the ML.Net API instead?","Url":"https://github.com/dotnet/machinelearning/issues/654","RelatedDescription":"Open issue \"Default value of sigmoid parameter for LightGBM\" (#654)"},{"Id":"348098009","IsPullRequest":true,"CreatedAt":"2018-08-06T22:06:02","Actor":"Ivanidzo4ka","Number":"653","RawContent":null,"Title":"API scenarios implemented with low-level functions","State":"open","Body":"examples for #584 ","Url":"https://github.com/dotnet/machinelearning/pull/653","RelatedDescription":"Open PR \"API scenarios implemented with low-level functions\" (#653)"},{"Id":"347972660","IsPullRequest":true,"CreatedAt":"2018-08-06T20:03:10","Actor":"eerhardt","Number":"652","RawContent":null,"Title":"Fix test output during CI.","State":"closed","Body":"When tests run in CI, we are not displaying the test output to the console. So if a test fails, and for some reason the .trx file isn't parsed correctly, it is impossible to see what test failed and why.\r\n\r\nThe test output isn't being displayed because of https://github.com/Microsoft/vstest/issues/1503.\r\n\r\nTo work around the vstest bug, split CI builds into 2 separate MSBuild invocations: one to do the build (which is multi-proc) and another to run the tests (which doesn't need MSBuild node reuse).\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/652","RelatedDescription":"Closed or merged PR \"Fix test output during CI.\" (#652)"},{"Id":"347946870","IsPullRequest":true,"CreatedAt":"2018-08-06T15:25:00","Actor":"Jongkeun","Number":"651","RawContent":null,"Title":"fixed a spelling from adressing to addressing.","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nfixed #650.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/651","RelatedDescription":"Closed or merged PR \"fixed a spelling from adressing to addressing.\" (#651)"},{"Id":"347946590","IsPullRequest":false,"CreatedAt":"2018-08-06T15:25:00","Actor":"Jongkeun","Number":"650","RawContent":null,"Title":"There is a miss spelling of a `CONTRIBUTING.md` file.","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\nfixed a spelling of a `CONTRIBUTING.md` file.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/650","RelatedDescription":"Closed issue \"There is a miss spelling of a `CONTRIBUTING.md` file.\" (#650)"},{"Id":"347558335","IsPullRequest":true,"CreatedAt":"2018-08-03T22:59:32","Actor":"zeahmed","Number":"646","RawContent":null,"Title":"[Part 1] Added comments/description to convenience constructors for a set of transform","State":"open","Body":"This PR partially addresses #524.\r\n\r\nInformative comments/description is added to convenience constructors of transforms so that comments/description appear in the intellisense for users.\r\n\r\nDescription/Comments are obtained from relevant `doc.xml` file and added to C# summary comments section using `<include>` tag. If  `doc.xml` does not contain the required information it is directly added to C# summary comments.\r\n\r\nFollowing is list of transforms covered in this PR.\r\n\r\n- BootstrapSampleTransform\r\n- CategoricalHashTransform\r\n- CategoricalTransform\r\n- ConcatTransform\r\n- CopyColumnsTransform\r\n- CountFeatureSelection\r\n- DropColumnsTransform\r\n- LpNormNormalizerTransform\r\n- NAFilter\r\n- NormalizeTransform\r\n","Url":"https://github.com/dotnet/machinelearning/pull/646","RelatedDescription":"Open PR \"[Part 1] Added comments/description to convenience constructors for a set of transform\" (#646)"},{"Id":"347516565","IsPullRequest":true,"CreatedAt":"2018-08-03T20:46:18","Actor":"eerhardt","Number":"645","RawContent":null,"Title":"Bump the master branch to 0.5","State":"closed","Body":"Now that we have branched for 0.4, we need to bump the master branch to the next version.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/645","RelatedDescription":"Closed or merged PR \"Bump the master branch to 0.5\" (#645)"},{"Id":"347516249","IsPullRequest":true,"CreatedAt":"2018-08-03T20:38:05","Actor":"eerhardt","Number":"644","RawContent":null,"Title":"Merge master into release/preview for 0.4","State":"closed","Body":"This is a merge of the master branch.  It is basically a straight \"accept master\" on any conflict.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/644","RelatedDescription":"Closed or merged PR \"Merge master into release/preview for 0.4\" (#644)"},{"Id":"347432074","IsPullRequest":true,"CreatedAt":"2018-08-03T15:55:11","Actor":"eerhardt","Number":"643","RawContent":null,"Title":"Fix official build failure","State":"closed","Body":"Now that the HalLearners nuget package doesn't have a PackageReference to MlNetMklDeps, the MlNetMklDeps package is no longer getting restored during the official build. Since HalLearners needs the license file from MlNetMklDeps, it is failing to build the nuget package.\r\n\r\nThe fix is to restore all project before building the packages.","Url":"https://github.com/dotnet/machinelearning/pull/643","RelatedDescription":"Closed or merged PR \"Fix official build failure\" (#643)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-12T05:30:32.5189509Z","RunDurationInMilliseconds":1045}