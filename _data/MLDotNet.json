{"Data":{"GitHub":{"Issues":[{"Id":"401066646","IsPullRequest":true,"CreatedAt":"2019-01-20T06:12:31","Actor":"TomFinley","Number":"2195","RawContent":null,"Title":"Remove RowCursor's GetRootCursor/MoveMany/CursorState","State":"open","Body":"Fixes #1532, in particular the last notes about things to remove from cursors.\r\n\r\nAs noted in a reply on the issue, the one thing I gave up on `IsColumnActive` because I realized eventually that it its removal did more harm than good, and it represented a genuine lapse in capability. Some test code started to become impossible to write, and it struck me that some debugging/test scenarios simply could not be served with it, even if in our \"perfectly\" written code it seemed to me that it was never genuinely useful. Debug/test code, its utility becomes very clear. (E.g., one could never write a modestly useful debug proxy object without that method or something like it.)\r\n\r\nThe commits are intended to be structured usefully, as per usual.\r\n\r\n* For `RowCursor.GetRootCursor`, I replaced that functionality with some implementation specific logic in `SynchronizedCursorBase`, since that's the only really important place that becomes critical anyway.\r\n* `MoveMany`. Slight inefficiencies on the very sparse samplers and the skip/take filter. That's about it.\r\n* `CursorState`. Want to know if the cursor is in a bad state? Check whether `Position` is negative.","Url":"https://github.com/dotnet/machinelearning/pull/2195","RelatedDescription":"Open PR \"Remove RowCursor's GetRootCursor/MoveMany/CursorState\" (#2195)"},{"Id":"401051004","IsPullRequest":true,"CreatedAt":"2019-01-20T01:05:03","Actor":"codemzs","Number":"2194","RawContent":null,"Title":"Automate code coverage report as part of PRs.","State":"open","Body":"fixes #2193.\r\n\r\nAfter this change, every PR will get a code coverage report against master for every commit. It will inform the author the impact of their change on the code coverage. This should hopefully lead to more informed, faster and higher quality code review, in addition, it will hopefully lead to improved code quality.\r\n\r\nCurrently coverage files are generated using coverlet tool and uploaded to codecov.io. For now coverage reports are generated using Windows x64 Debug build but later it will be enabled for all debug legs when coverlet releases a more performant version. \r\n\r\nAfter this change the total wait time for all builds to finish will increase from ~26 minutes to ~31 minutes. Code coverage requires instrumenting code and that increases the cpu cycles for each test run. We are expecting an even more performant version with the next release of coverlet which will hopefully bring build times even closer to build times without code coverage.","Url":"https://github.com/dotnet/machinelearning/pull/2194","RelatedDescription":"Open PR \"Automate code coverage report as part of PRs.\" (#2194)"},{"Id":"401050786","IsPullRequest":false,"CreatedAt":"2019-01-20T01:00:57","Actor":"codemzs","Number":"2193","RawContent":null,"Title":"Code Coverage","State":"open","Body":"Integrate coverlet to get coverage files and upload them to codecov.io. Enable code coverage for Windows x64 Debug and later enable for all debug legs when covertlet releases a more performant version. Display code coverage report for every commit in every PR.","Url":"https://github.com/dotnet/machinelearning/issues/2193","RelatedDescription":"Open issue \"Code Coverage\" (#2193)"},{"Id":"400512719","IsPullRequest":true,"CreatedAt":"2019-01-20T00:52:43","Actor":"codemzs","Number":"2180","RawContent":null,"Title":"WIP Code Coverage","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2180","RelatedDescription":"Closed or merged PR \"WIP Code Coverage\" (#2180)"},{"Id":"400517473","IsPullRequest":true,"CreatedAt":"2019-01-18T23:58:06","Actor":"wschin","Number":"2182","RawContent":null,"Title":"Get IDataView to C# Path Sorted","State":"closed","Body":"Fixes partially #1708 (first and second working items).","Url":"https://github.com/dotnet/machinelearning/pull/2182","RelatedDescription":"Closed or merged PR \"Get IDataView to C# Path Sorted\" (#2182)"},{"Id":"400913290","IsPullRequest":true,"CreatedAt":"2019-01-18T22:28:04","Actor":"wschin","Number":"2192","RawContent":null,"Title":"[Tiny Change] Internal-best-friend CacheDataView and IRowSeekable","State":"open","Body":"Fixes #2028.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2192","RelatedDescription":"Open PR \"[Tiny Change] Internal-best-friend CacheDataView and IRowSeekable\" (#2192)"},{"Id":"400892129","IsPullRequest":false,"CreatedAt":"2019-01-18T21:20:44","Actor":"artidoro","Number":"2191","RawContent":null,"Title":"SaveAsText should accept a string path","State":"closed","Body":"The MLContext extension `MLContext.Data.SaveAsText` currently has the following signature:\r\n\r\n```csharp\r\n        public static void SaveAsText(this DataOperations catalog,\r\n            IDataView data,\r\n            Stream stream,\r\n            char separatorChar = TextLoader.DefaultArguments.Separator,\r\n            bool headerRow = TextLoader.DefaultArguments.HasHeader,\r\n            bool schema = true,\r\n            bool keepHidden = false)\r\n```\r\n\r\nWe should change the parameter `Stream stream` to `string path`. ","Url":"https://github.com/dotnet/machinelearning/issues/2191","RelatedDescription":"Closed issue \"SaveAsText should accept a string path\" (#2191)"},{"Id":"400067493","IsPullRequest":true,"CreatedAt":"2019-01-18T20:41:52","Actor":"najeeb-kazmi","Number":"2169","RawContent":null,"Title":"Rename types inside MLContext as Catalogs","State":"closed","Body":"Fixes #1796 \r\n\r\nRenames `XyzContext` types inside `MLContext` to `XyzCatalog`.\r\n\r\nRenames `DataOperations` to `DataOperationsCatalog`.","Url":"https://github.com/dotnet/machinelearning/pull/2169","RelatedDescription":"Closed or merged PR \"Rename types inside MLContext as Catalogs\" (#2169)"},{"Id":"400881345","IsPullRequest":true,"CreatedAt":"2019-01-18T20:40:47","Actor":"zeahmed","Number":"2190","RawContent":null,"Title":"Made ValueMappingTransformer accept vector as input.","State":"open","Body":"This PR address one of the issue in #2162.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2190","RelatedDescription":"Open PR \"Made ValueMappingTransformer accept vector as input.\" (#2190)"},{"Id":"400850559","IsPullRequest":true,"CreatedAt":"2019-01-18T19:04:47","Actor":"wschin","Number":"2189","RawContent":null,"Title":"Replace CreateDataView and CreateStreamingDataView with a new one on mlContext.Data","State":"open","Body":"There will be two iterations.\r\n1. The first iteration replaces CreateStreamingDataView with an equivalent one on mlContext.Data.\r\n2. The second iteration replaces CreateDataView with the same one on mlContext.Data.\r\n\r\nTogether with #2182, this fixes #1708, fixes #2025.\r\n\r\nDetailed working items:\r\n- Add\r\n```csharp\r\npublic static IDataView ReadFromEnumerable<TRow>(this DataOperations catalog, IEnumerable<TRow> data, SchemaDefinition schemaDefinition = null) \r\n```\r\n- Because `ReadFromEnumerable` is equivalent to `CreateStreamingDataView`, we remove\r\n```csharp\r\npublic static IDataView CreateStreamingDataView<TRow>(this IHostEnvironment env, IEnumerable<TRow> data, SchemaDefinition schemaDefinition = null) \r\n```\r\n- Replace the uses of `CreateDataView` and `CreateStreamingDataView` with the new `ReadFromEnumerable`. \r\n\r\nI am not sure if `CreateDataView` should be removed too as ML.NET now uses `ReadFromEnumerable` everywhere and caching should be done by calling `Cache`.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2189","RelatedDescription":"Open PR \"Replace CreateDataView and CreateStreamingDataView with a new one on mlContext.Data\" (#2189)"},{"Id":"400821047","IsPullRequest":true,"CreatedAt":"2019-01-18T17:32:03","Actor":"rogancarr","Number":"2188","RawContent":null,"Title":"WIP: Test GAM Public APIs","State":"open","Body":"This PR adds new APIs to GAMs to retrieve all the shape function bins and effects (in addition to the current APIs to get only one shape at a time). This PR also adds tests to cover all the public APIs, including expected behavior for the public constructor.\r\n\r\nFixes #2186 \r\nFixes #2187 \r\n\r\nWIP until #2142 is in.","Url":"https://github.com/dotnet/machinelearning/pull/2188","RelatedDescription":"Open PR \"WIP: Test GAM Public APIs\" (#2188)"},{"Id":"400790865","IsPullRequest":false,"CreatedAt":"2019-01-18T16:12:48","Actor":"rogancarr","Number":"2187","RawContent":null,"Title":"GAMs only allow getting one feature at a time","State":"open","Body":"As pointed out by @artidoro  on #2142, it is not possible to get the entire set of shape functions and bins in one go. Rather, we have ` GetFeatureWeights(int featureIndex)`. We need a `GetFeatureWeights()` that fetches the entire array.","Url":"https://github.com/dotnet/machinelearning/issues/2187","RelatedDescription":"Open issue \"GAMs only allow getting one feature at a time\" (#2187)"},{"Id":"400789828","IsPullRequest":false,"CreatedAt":"2019-01-18T16:10:19","Actor":"rogancarr","Number":"2186","RawContent":null,"Title":"GAMs are missing tests on some methods","State":"open","Body":"GAMs have end-to-end tests, but certain public APIs are not tested:\r\n- Creating a model from new parameters\r\n- GetFeatureWeights()\r\n- GetBinUpperBounds()","Url":"https://github.com/dotnet/machinelearning/issues/2186","RelatedDescription":"Open issue \"GAMs are missing tests on some methods\" (#2186)"},{"Id":"400127875","IsPullRequest":true,"CreatedAt":"2019-01-18T06:23:13","Actor":"sfilipi","Number":"2170","RawContent":null,"Title":"Towards #1798 .","State":"closed","Body":"This PR addresses the estimators inside HalLearners:\r\n\r\nTwo public extension methods, one for simple arguments and the other for advanced options\r\nDelete unecessary constructors\r\nPass Options objects as arguments instead of Action delegate\r\nRename Arguments to Options\r\nRename Options objects as options (instead of args or advancedSettings used so far)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2170","RelatedDescription":"Closed or merged PR \"Towards #1798 .\" (#2170)"},{"Id":"400584033","IsPullRequest":false,"CreatedAt":"2019-01-18T06:02:15","Actor":"TomFinley","Number":"2185","RawContent":null,"Title":"Tests in KeyToVectorMappingEstimator.GetOutputSchema seem wrong","State":"open","Body":"While reviewing #2176, I incidentally read what I take to be some bugs in this method, the schema shape propagation for key values:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Data/Transforms/KeyToVector.cs#L762\r\n\r\nAs the name suggests, this \"key to vector\" transformer this produces a vector valued column out of a key-valued column. That key-valued column can be either a scalar, vector, or unknown size vector. Much of the logic in this method did not seem to conform to my understanding of what the transformer is doing (and, in one case, *should* be doing but isn't). It may be that we need some more test coverage for this, in addition to fixing the bugs, if I am right about any of these.\r\n\r\n## Bug 1: The Type Test\r\n\r\nLet's review the type test:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Data/Transforms/KeyToVector.cs#L770\r\n\r\nI see some problems here:\r\n\r\n* This is the \"key to vector\" transform, yet, there is no test to see if it is a key?\r\n\r\n* Instead first we see that it fails if it's of an unknown `DataKind` (which seems totally besides the point).\r\n\r\n* We also see that we have this totally unnecessary `ItemType.GetItemType()`, which considering the description is not necessary.\r\n\r\n* Related: later on we see `col.ItemType is VectorType`, which according to the documentation here could never be the case anyway:\r\n\r\n \r\n https://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Core/Data/IEstimator.cs#L46-L49\r\n\r\n* `col.ItemType is PrimitiveType` is totally redundant given that we already had the much stronger test that it was one of the \"known\" datakinds. (Which, again, is still completely wrong.)\r\n\r\nSo, I think practically, we might have a much stronger test if we dropped practically all this matter and just tested `col.IsKey`. *Maybe* also verify that the raw type is not `ulong` or something. But, the rest of this doesn't make a lot of sense to me.\r\n\r\n## Bug 2: Error message\r\n\r\nNow what does that test lead to... it leads to this exception being thrown:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Data/Transforms/KeyToVector.cs#L771\r\n\r\nIf you trace through to what becomes the exception message, it becomes this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Core/Utilities/Contracts.cs#L463\r\n\r\nWhich is of course not right. \"Luckily,\" the test above was so screwed up that the only conceivable way a user could run into it is if they fed in an image type, if I interpret it correctly.\r\n\r\n## Bug 3: The metadata tests.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Data/Transforms/KeyToVector.cs#L774-L780\r\n\r\nThe first batch of metadata should verify that the type is of `col.Kind == SchemaShape.Column.VectorKind.Vector`. Instead, it only verifies it's not a *variable* vector. but apparently scalar values are just fine. :)\r\n\r\nFor the second metadata, this is sort of a bug more on the transformer itself than the estimator: given that the behavior of bagging is only relevant on *vectors* of keys, `CategoricalSlotRanges` should be added as metadata on a scalar source column only (or, I guess, ideally on a vector of length 1); if it's not a scalar (or vector of length 1), then it could not be a one-hot vector anyway, and so could not be encoding a categorical value. Might be more a @codemzs problem.\r\n\r\nThe third metadata looks actually reasonable, at least at first glance.\r\n\r\n## Bug 4: The column type.\r\n\r\nIf bagging is off, *and* the input is a variable sized vector, then the output will be a variable sized vector as well. Yet we see the result is unconditionally a `.Vector`, which does not cover that case:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb92c06f7207546377f63d969ffe063780ee4922/src/Microsoft.ML.Data/Transforms/KeyToVector.cs#L782\r\n\r\n/cc @Ivanidzo4ka ","Url":"https://github.com/dotnet/machinelearning/issues/2185","RelatedDescription":"Open issue \"Tests in KeyToVectorMappingEstimator.GetOutputSchema seem wrong\" (#2185)"},{"Id":"400549736","IsPullRequest":false,"CreatedAt":"2019-01-18T02:47:11","Actor":"Dandjinh","Number":"2184","RawContent":null,"Title":"failed when adding ML.NET package","State":"open","Body":"### System information\r\nD:\\Works\\Codes\\CSharpPrjs\\dotNetPrjs\\myApp>dotnet --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n### Issue\r\n\r\nI just followed [ML.NET Tutorial](https://dotnet.microsoft.com/learn/machinelearning-ai/ml-dotnet-get-started-tutorial) but failed when adding ML.NET package.\r\n\r\n### Source code / logs\r\n\r\nD:\\Works\\Codes\\CSharpPrjs\\dotNetPrjs\\myApp>dotnet add package Microsoft.ML --version 0.9.0\r\n  Writing C:\\Users\\34460\\AppData\\Local\\Temp\\tmp40CD.tmp\r\ninfo : 正在将包“Microsoft.ML”的 PackageReference 添加到项目“D:\\Works\\Codes\\CSharpPrjs\\dotNetPrjs\\myApp\\myApp.csproj”。\r\nlog  : 正在还原 D:\\Works\\Codes\\CSharpPrjs\\dotNetPrjs\\myApp\\myApp.csproj 的包...\r\nerror: 无法解析 .NETCoreApp,Version=v2.2 的“Microsoft.ML (>= 0.9.0)”。\r\nerror: 包“Microsoft.ML”与项目“D:\\Works\\Codes\\CSharpPrjs\\dotNetPrjs\\myApp\\myApp.csproj”中的“all”框架不兼容。\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2184","RelatedDescription":"Open issue \"failed when adding ML.NET package\" (#2184)"},{"Id":"400516192","IsPullRequest":false,"CreatedAt":"2019-01-18T00:33:37","Actor":"CESARDELATORRE","Number":"2181","RawContent":null,"Title":"Load Http","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2181","RelatedDescription":"Closed issue \"Load Http\" (#2181)"},{"Id":"400518940","IsPullRequest":false,"CreatedAt":"2019-01-18T00:16:27","Actor":"CESARDELATORRE","Number":"2183","RawContent":null,"Title":"Support in TextReader/TextLoader.Read() for loading dataset files through HTTP (such as from Azure Blobs) in addition to files on the local drive ","State":"open","Body":"This can be a very common scenario if the data is not available locally.\r\n\r\nWe could ready it from Azure Storage Blobs by allowing the TextReader/TextLoader.Read() method to load files through HTTP (such as from Azure Blobs) in addition to files on the local drive that it does today.\r\n\r\nWith an overriden .Read() method providing additional parameters like:\r\n\r\nurl:\"http://any-azure-blob-url/sales.csv\"\r\nsecretKey:\"AgJQV/hHBVymD735hFOzveX4qz54YrO6q8WsM6nyb345l67 \r\n\r\nAnd any other Azure credentials needed.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2183","RelatedDescription":"Open issue \"Support in TextReader/TextLoader.Read() for loading dataset files through HTTP (such as from Azure Blobs) in addition to files on the local drive \" (#2183)"},{"Id":"400032482","IsPullRequest":true,"CreatedAt":"2019-01-17T23:46:52","Actor":"codemzs","Number":"2166","RawContent":null,"Title":"Add code coverage build def.","State":"closed","Body":"Adds a new CI leg just for code coverage. The reason for adding a new leg is not let code coverage process affect PR merge. ","Url":"https://github.com/dotnet/machinelearning/pull/2166","RelatedDescription":"Closed or merged PR \"Add code coverage build def.\" (#2166)"},{"Id":"400509207","IsPullRequest":false,"CreatedAt":"2019-01-17T23:33:37","Actor":"wschin","Number":"2179","RawContent":null,"Title":"Number of feature columns","State":"open","Body":"It has been a while that ML.NET assumes only one feature column can exist in a training pipeline. Recently, we have added field-aware factorization machine so that argument becomes not 100% correct. We will only have only two public APIs per trainer (please see #2047 as an example). To make our public APIs consistent, we need to determine if feature column name should be an array or a scalar. Or we can introduce another API which accepts multiple feature (even label) columns. @TomFinley, @eerhardt, any comments please?","Url":"https://github.com/dotnet/machinelearning/issues/2179","RelatedDescription":"Open issue \"Number of feature columns\" (#2179)"},{"Id":"400497571","IsPullRequest":true,"CreatedAt":"2019-01-17T23:17:35","Actor":"najeeb-kazmi","Number":"2178","RawContent":null,"Title":"Fix broken build","State":"closed","Body":"Fixes build broken in #2125 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2178","RelatedDescription":"Closed or merged PR \"Fix broken build\" (#2178)"},{"Id":"400482464","IsPullRequest":false,"CreatedAt":"2019-01-17T22:02:44","Actor":"sfilipi","Number":"2177","RawContent":null,"Title":"The parameter descriptions should distinguish between columns and column names. ","State":"open","Body":"As @wschin pointed out here: https://github.com/dotnet/machinelearning/pull/2170#issuecomment-455346083 the parmaters, and in general our XML documentation should distinguish between columns and column names. \r\n\r\nThis issue will be considered closed when all the params of this language:\r\n\r\n```\r\n/// <param name=\"labelColumn\">The label column.</param>\r\n/// <param name=\"featureColumn\">The featureColumn column.</param>\r\n/// <param name=\"weights\">The optional weights column.</param>\r\n```\r\nGet changed to: \r\n```\r\n/// <param name=\"labelColumn\">The name of the label column.</param>\r\n/// <param name=\"featureColumn\">The name of the feature column.</param>\r\n/// <param name=\"weights\">The name of the optional weights column.</param>\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2177","RelatedDescription":"Open issue \"The parameter descriptions should distinguish between columns and column names. \" (#2177)"},{"Id":"400479529","IsPullRequest":true,"CreatedAt":"2019-01-17T21:54:13","Actor":"eerhardt","Number":"2176","RawContent":null,"Title":"Remove ColumnType.RawKind usages Round 2.","State":"open","Body":"Removes the \"easy\" usages of ColumnType.RawKind.\r\n\r\nPart of the work necessary for #1860 and contributes to #1533.\r\n\r\nThere are still about 38 usages of ColumnType.RawKind left, but they are a little more involved, and needs refactoring. I will fully remove them in the next PR.","Url":"https://github.com/dotnet/machinelearning/pull/2176","RelatedDescription":"Open PR \"Remove ColumnType.RawKind usages Round 2.\" (#2176)"},{"Id":"400473294","IsPullRequest":false,"CreatedAt":"2019-01-17T21:36:05","Actor":"abgoswam","Number":"2175","RawContent":null,"Title":"ML.NET public API  exposes parameter `weights` which is not used.","State":"open","Body":"For some of the learners e.g. SdcaRegression  ML.NET public API  exposes parameter `weights`\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cabf55b543129e8962ba716e8e22c72ac08773e3/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs#L65-L70\r\n\r\nHowever, the advanced `Options` for  `SdcaRegressionTrainer` do not have a field for 'WeightColumn'.  Also, I believe  the algo itself does not use  weights  (need to verify)\r\n\r\nWe need to scrub our public API  for such spurious uses of  `weights` parameter.\r\n\r\n@sfilipi @glebuk @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2175","RelatedDescription":"Open issue \"ML.NET public API  exposes parameter `weights` which is not used.\" (#2175)"},{"Id":"400456878","IsPullRequest":false,"CreatedAt":"2019-01-17T20:48:46","Actor":"abgoswam","Number":"2174","RawContent":null,"Title":"Inconsistency in usage of LossFunction for AveragedPerceptron and OnlineGradientDescent  ","State":"open","Body":"The `Options`  class for AveragedPerceptron  and  OnlineGradientDescent  have a field  `LossFunction`  which is used as a factory \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cabf55b543129e8962ba716e8e22c72ac08773e3/src/Microsoft.ML.StandardLearners/Standard/Online/AveragedPerceptron.cs#L42-L46\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cabf55b543129e8962ba716e8e22c72ac08773e3/src/Microsoft.ML.StandardLearners/Standard/Online/OnlineGradientDescent.cs#L38-L43\r\n \r\nInstead of using the factory pattern, they should be  defined  as `IClassificationLoss` and `IRegressionLoss` respectively.  \r\n\r\nThat's  what the public API also uses:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cabf55b543129e8962ba716e8e22c72ac08773e3/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs#L167-L172\r\n\r\n\r\nRefer to test case `OnlineLinearWorkout`\r\n\r\n@sfilipi \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2174","RelatedDescription":"Open issue \"Inconsistency in usage of LossFunction for AveragedPerceptron and OnlineGradientDescent  \" (#2174)"},{"Id":"400423623","IsPullRequest":true,"CreatedAt":"2019-01-17T19:15:54","Actor":"zeahmed","Number":"2173","RawContent":null,"Title":"Filtered operators which have no outputs while getting schema and added test.","State":"open","Body":"This PR fixes #2156.\r\n\r\nPlease see the issue for more details and the solution of the bug.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2173","RelatedDescription":"Open PR \"Filtered operators which have no outputs while getting schema and added test.\" (#2173)"},{"Id":"400044019","IsPullRequest":true,"CreatedAt":"2019-01-17T18:40:43","Actor":"zeahmed","Number":"2168","RawContent":null,"Title":"Added a test in disabled mode to show the known issue with loading TF model multiple times.","State":"closed","Body":"This PR partially fixes #2156.\r\n\r\nAdded a test to show that \"loading TensorFlow SavedModel multiple times throws exception\" is a know issue.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2168","RelatedDescription":"Closed or merged PR \"Added a test in disabled mode to show the known issue with loading TF model multiple times.\" (#2168)"},{"Id":"400399978","IsPullRequest":false,"CreatedAt":"2019-01-17T18:11:29","Actor":"sfilipi","Number":"2172","RawContent":null,"Title":"The trainer name types should follow the names used in the contexts","State":"open","Body":"Now that, as part of #1798 the Options of the trainers are part of the API signature, and the name of the trainer type displays as part of it. \r\n\r\nThe API looks like this:\r\n\r\n```\r\n// Pipeline.\r\nvar pipeline = ml.Transforms.Text.FeaturizeText(\"SentimentText\", \"Features\")\r\n      .AppendCacheCheckpoint(ml)\r\n      .Append(ml.BinaryClassification.Trainers.SymbolicStochasticGradientDescent(\r\n     new SymSgdClassificationTrainer.Options\r\n     {\r\n         NumberOfThreads = 1\r\n     }));\r\n```\r\n\r\nnotice the discrepancy between the extension name, and the trainer type. \r\nAlign naming where possible. Don't abbreviate the names, at least. \r\n\r\n.Append(ml.BinaryClassification.Trainers.**SymbolicStochasticGradientDescent**(\r\n     new **SymSgdClassificationTrainer**.Options","Url":"https://github.com/dotnet/machinelearning/issues/2172","RelatedDescription":"Open issue \"The trainer name types should follow the names used in the contexts\" (#2172)"},{"Id":"400397241","IsPullRequest":false,"CreatedAt":"2019-01-17T18:03:28","Actor":"rogancarr","Number":"2171","RawContent":null,"Title":"Baseline Tests are based on SubComponents","State":"open","Body":"Baseline tests are based on `SubComponents`. Are `SubComponents` going away? Either way, it might be better to have baseline tests using the public API.","Url":"https://github.com/dotnet/machinelearning/issues/2171","RelatedDescription":"Open issue \"Baseline Tests are based on SubComponents\" (#2171)"},{"Id":"400033016","IsPullRequest":false,"CreatedAt":"2019-01-16T22:49:51","Actor":"rogancarr","Number":"2167","RawContent":null,"Title":"Models produced by the GAM Trainer depend on feature flocks","State":"open","Body":"In `FastTree`, `Feature Flocks` are simply helpful tools in the calculation and do not impact the final model. When `GAMs` are trained however, the final model is dependent on the `Feature Flocks`. That is, if there are 6 features, and two are flocked, then the resulting model will have 5 shape functions and one of the input features will be ignored. \r\n\r\nAs per `FastTree`, the output of `GAM` training should not depend on whether feature flocks were used in the calculation.","Url":"https://github.com/dotnet/machinelearning/issues/2167","RelatedDescription":"Open issue \"Models produced by the GAM Trainer depend on feature flocks\" (#2167)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-20T22:29:06.1500043Z","RunDurationInMilliseconds":1059}