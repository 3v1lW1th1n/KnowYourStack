{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework September 2019 Security and Quality Rollup","PublishedOn":"2019-09-10T18:54:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the September 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1142– .NET Framework Elevation of Privilege...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core September 2019 Updates – 2.1.13 and 2.2.7","PublishedOn":"2019-09-10T17:17:31+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core September 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-september-2019/","RawContent":null},{"Title":"GC Perf Infrastructure – Part 0","PublishedOn":"2019-09-10T05:43:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this blog entry and some future ones I will be showing off functionalities that our new GC perf infrastructure provides. Andy and I have been working on it (he did all the work; I merely played the...","Href":"https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-0/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 9 and Entity Framework 6.3 Preview 9","PublishedOn":"2019-09-05T00:25:11+00:00","CommentsCount":20,"FacebookCount":0,"Summary":"The Preview 9 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nThese are the last planned previews before we release the final versions later...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 9","PublishedOn":"2019-09-04T19:00:55+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Preview 9. Just like with Preview 8, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and aren&#8217;t adding new features. If these final...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/","RawContent":null},{"Title":"Hardware Intrinsics in .NET Core","PublishedOn":"2019-09-03T22:35:55+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Several years ago, we decided that it was time to support SIMD code in .NET. We introduced the System.Numerics namespace with Vector2, Vector3, Vector4, Vector&#60;T&#62;, and related types. These...","Href":"https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/","RawContent":null},{"Title":"Announcing ML.NET 1.4 Preview and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-09-03T18:00:35+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.4 Preview and updates to Model Builder and CLI.\nML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-preview-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Join us for .NET Conf 2019, Sept 23-25","PublishedOn":"2019-09-03T17:51:17+00:00","CommentsCount":8,"FacebookCount":0,"Summary":".NET Conf is back again this year and will be live streaming to a device near you September 23-25 on www.dotnetconf.net! .NET Conf is a FREE, 3 day virtual developer event co-organized by the .NET...","Href":"https://devblogs.microsoft.com/dotnet/join-us-for-net-conf-2019-sept-23-25/","RawContent":null},{"Title":".NET Framework August 30, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-08-30T17:00:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The August 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903 was released.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-30-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"How the .NET Team uses Azure Pipelines to produce Docker Images","PublishedOn":"2019-08-28T16:30:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Producing Docker images for .NET might not seem like that big of a deal.  Once you’ve got a Dockerfile defined, just run &#8220;docker build&#8220; and &#8220;docker push&#8220; and you’re done,...","Href":"https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10387173702","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:23:27","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Opened issue \"September 2019 .NET Updates\" (#122) at dotnet/announcements","RelatedBody":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10387041341","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:04:51","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32971\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.7\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.8, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-09-10_\r\n"},{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10417788655","Type":"PullRequestEvent","CreatedAt":"2019-09-15T01:37:29","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26584","RelatedDescription":"Merged pull request \"Remove some boxing from tuples with >= 8 elements\" (#26584) at dotnet/coreclr","RelatedBody":"Remove some boxing from tuples with >= 8 elements\r\n\r\nTake advantage of https://github.com/dotnet/coreclr/pull/14698 to avoid boxing the TRest argument and improve devirtualization.\r\n\r\n|     Method | Toolchain |       Mean |     Error | Ratio | Allocated |\r\n|----------- |---------- |-----------:|----------:|------:|----------:|\r\n|       GHC7 |       Old |   2.043 ns | 0.0100 ns |  1.00 |         - |\r\n|       GHC7 |       New |   2.042 ns | 0.0135 ns |  1.00 |         - |\r\n|            |           |            |           |       |           |\r\n|       GHC8 |       Old |   8.489 ns | 0.0917 ns |  1.00 |      24 B |\r\n|       GHC8 |       New |   3.230 ns | 0.0159 ns |  0.38 |         - |\r\n|            |           |            |           |       |           |\r\n|       GHC9 |       Old |   9.062 ns | 0.0459 ns |  1.00 |      24 B |\r\n|       GHC9 |       New |   3.230 ns | 0.0194 ns |  0.36 |         - |\r\n|            |           |            |           |       |           |\r\n|      GHC10 |       Old |   9.644 ns | 0.1006 ns |  1.00 |      32 B |\r\n|      GHC10 |       New |   3.479 ns | 0.0161 ns |  0.36 |         - |\r\n|            |           |            |           |       |           |\r\n|  ToString7 |       Old | 214.852 ns | 0.4342 ns |  1.00 |     208 B |\r\n|  ToString7 |       New | 209.641 ns | 0.5081 ns |  0.98 |     208 B |\r\n|            |           |            |           |       |           |\r\n|  ToString8 |       Old |   257.0 ns |  4.019 ns |  1.00 |     280 B |\r\n|  ToString8 |       New |   242.9 ns |  2.952 ns |  0.95 |     256 B |\r\n|            |           |            |           |       |           |\r\n|  ToString9 |       Old | 268.936 ns | 1.0210 ns |  1.00 |     288 B |\r\n|  ToString9 |       New | 266.940 ns | 0.9469 ns |  0.99 |     264 B |\r\n|            |           |            |           |       |           |\r\n| ToString10 |       Old | 318.626 ns | 0.9727 ns |  1.00 |     416 B |\r\n| ToString10 |       New | 307.865 ns | 1.2496 ns |  0.97 |     384 B |\r\n|            |           |            |           |       |           |\r\n|     Index7 |       Old |   4.067 ns | 0.0813 ns |  1.00 |      24 B |\r\n|     Index7 |       New |   3.988 ns | 0.0256 ns |  0.98 |      24 B |\r\n|            |           |            |           |       |           |\r\n|     Index8 |       Old |   7.906 ns | 0.0354 ns |  1.00 |      48 B |\r\n|     Index8 |       New |   5.134 ns | 0.0505 ns |  0.65 |      24 B |\r\n|            |           |            |           |       |           |\r\n|     Index9 |       Old |   7.607 ns | 0.0418 ns |  1.00 |      48 B |\r\n|     Index9 |       New |   4.996 ns | 0.0926 ns |  0.66 |      24 B |\r\n|            |           |            |           |       |           |\r\n|    Index10 |       Old |   8.989 ns | 0.0542 ns |  1.00 |      56 B |\r\n|    Index10 |       New |   5.113 ns | 0.0422 ns |  0.57 |      24 B |\r\n\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Runtime.CompilerServices;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    public static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private (int, int, int, int, int, int, int) _v7 = (1, 2, 3, 4, 5, 6, 7);\r\n    private (int, int, int, int, int, int, int, int) _v8 = (1, 2, 3, 4, 5, 6, 7, 8);\r\n    private (int, int, int, int, int, int, int, int, int) _v9 = (1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n    private (int, int, int, int, int, int, int, int, int, int) _v10 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n\r\n    [Benchmark] public int GHC7() => _v7.GetHashCode();\r\n    [Benchmark] public int GHC8() => _v8.GetHashCode();\r\n    [Benchmark] public int GHC9() => _v9.GetHashCode();\r\n    [Benchmark] public int GHC10() => _v10.GetHashCode();\r\n\r\n    [Benchmark] public string ToString7() => _v7.ToString();\r\n    [Benchmark] public string ToString8() => _v8.ToString();\r\n    [Benchmark] public string ToString9() => _v9.ToString();\r\n    [Benchmark] public string ToString10() => _v10.ToString();\r\n\r\n    [Benchmark] public object Index7() => ((ITuple)_v7)[6];\r\n    [Benchmark] public object Index8() => ((ITuple)_v8)[7];\r\n    [Benchmark] public object Index9() => ((ITuple)_v9)[8];\r\n    [Benchmark] public object Index10() => ((ITuple)_v10)[9];\r\n}\r\n```\r\n\r\ncc: @AndyAyersMS, @jcouv"},{"Id":"10417702874","Type":"IssuesEvent","CreatedAt":"2019-09-15T00:35:11","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25559","RelatedDescription":"Closed issue \"Test failed: tracing_eventcounter._incrementingeventcounter_incrementingeventcounter_._incrementingeventcounter_incrementingeventcounter_cmd\" (#25559) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190702.1/workItem/PayloadGroup0/analysis/xunit/tracing_eventcounter._incrementingeventcounter_incrementingeventcounter_~2F_incrementingeventcounter_incrementingeventcounter_cmd\r\n\r\n**Failed tests:**\r\ntracing_eventcounter._incrementingeventcounter_incrementingeventcounter_._incrementingeventcounter_incrementingeventcounter_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Work\\\\0abddf7b-d933-45fb-8055-1ad9001fa579\\\\Exec\\\\tracing\\\\eventcounter\\\\Reports\\\\tracing.eventcounter\\\\incrementingeventcounter\\\\incrementingeventcounter.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Payload\\\\corerun.exe\\\" incrementingeventcounter.exe \r\nTest Failed\r\nExpected to see 100 events - saw 0\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Work\\\\0abddf7b-d933-45fb-8055-1ad9001fa579\\\\Exec\\\\tracing\\\\eventcounter\\\\incrementingeventcounter\\\\incrementingeventcounter.cmd\r\nExpected: True\r\nActual:   False\r\n```\r\n"},{"Id":"10417701077","Type":"IssuesEvent","CreatedAt":"2019-09-15T00:33:53","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26554","RelatedDescription":"Closed issue \"Test failed: tracing/eventpipe/buffersize/buffersize/buffersize.sh\" (#26554) at dotnet/coreclr","RelatedBody":"**Job:**\r\n[coreclr-outerloop 20190905.7](https://dev.azure.com/dnceng/public/_build/results?buildId=339271)\r\nRun Test Pri1 R2R OSX x64 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:** \r\nOSX x64\r\n\r\n**Mode:** \r\n    RunCrossGen=1\r\n    COMPlus_TieredCompilation=0\r\n\r\n**Failed tests:**\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh\r\n\r\n**Note:**\r\nThese failures **don't repro** on our OSX x64 machine.\r\n\r\n**Log:**\r\n```\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/buffersize/buffersize/buffersize.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize /in buffersize.org /out buffersize.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image buffersize.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun buffersize.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.0s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation /in rundownvalidation.org /out rundownvalidation.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image rundownvalidation.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun rundownvalidation.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.1s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```"},{"Id":"10417116647","Type":"PullRequestEvent","CreatedAt":"2019-09-14T18:54:34","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26719","RelatedDescription":"Opened pull request \"More SuperIlc fixes and improvements\" (#26719) at dotnet/coreclr","RelatedBody":"1) Set OutputFileName to the same value as InputFileName for\r\nexecution runs. This lets me use the output file name as a common\r\ntest key for both phases.\r\n\r\n2) Exclude Core_Root subtree in compile-subtree - this is needed\r\nto avoid compiling Crossgen2.\r\n\r\n3) As Anubhav pointed out, I messed up one of my previous\r\nrefactorings so that running the legacy Crossgen was no longer\r\noptional based on the --crossgen switch.\r\n\r\n4) I removed an unnecessary formatting string I randomly noticed.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10416484713","Type":"PullRequestEvent","CreatedAt":"2019-09-14T14:00:01","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26714","RelatedDescription":"Merged pull request \"Fix watson bucketing/broken triage dumps\" (#26714) at dotnet/coreclr","RelatedBody":"The DAC EnumMemoryRegions needs to include some missing code version\r\nmanager memory."},{"Id":"10416484349","Type":"PullRequestEvent","CreatedAt":"2019-09-14T13:59:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26718","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#26718) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n"},{"Id":"10416465791","Type":"PullRequestEvent","CreatedAt":"2019-09-14T13:50:57","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26716","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#26716) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n"},{"Id":"10416317125","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:31:41","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26706","RelatedDescription":"Merged pull request \"Fix PInvoke transition frame in CPAOT\" (#26706) at dotnet/coreclr","RelatedBody":"During investigation of Linux CPAOT failures Jan Vorlicek discovered\r\nthat we were using the wrong constant for the PInvoke transition\r\nframe. I have verified that the change fixes all tests under\r\nJIT\\methodical\\explicit\\basic I was previously seeing; I am running\r\nthe complete Pri#1 test suite to get an overall picture.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10416284038","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:13:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26718","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#26718) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n"},{"Id":"10416283364","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:12:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26717","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#26717) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19463.7\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n"},{"Id":"10416277989","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:09:52","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26716","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#26716) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10417983602","Type":"PullRequestEvent","CreatedAt":"2019-09-15T03:50:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12650","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12650) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.5\r\n- **Date Produced**: 9/15/2019 2:36 AM\r\n- **Commit**: adc28fdb422cd9306b65c9f67ced13aaecce8f76\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"},{"Id":"10417939034","Type":"PullRequestEvent","CreatedAt":"2019-09-15T03:20:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12650","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12650) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.5\r\n- **Date Produced**: 9/15/2019 2:36 AM\r\n- **Commit**: adc28fdb422cd9306b65c9f67ced13aaecce8f76\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"},{"Id":"10417661662","Type":"PullRequestEvent","CreatedAt":"2019-09-15T00:05:37","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12649","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12649) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.3\r\n- **Date Produced**: 9/14/2019 10:52 PM\r\n- **Commit**: 7cd94410e82893dfbde7b4c7b2ba8d505bf59083\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"},{"Id":"10417617860","Type":"PullRequestEvent","CreatedAt":"2019-09-14T23:35:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12649","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12649) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.3\r\n- **Date Produced**: 9/14/2019 10:52 PM\r\n- **Commit**: 7cd94410e82893dfbde7b4c7b2ba8d505bf59083\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"},{"Id":"10417088359","Type":"IssuesEvent","CreatedAt":"2019-09-14T18:40:46","Actor":"rkeithhill","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12648","RelatedDescription":"Opened issue \"Enh request: Update dotnet-install script to cache and use downloaded SDK\" (#12648) at dotnet/cli","RelatedBody":"This is an enhancement request for `install-script.ps1/.sh`.  \r\n\r\nCan we get a new parameter to request that this script only download the selected SDK **if** it can't find a find previously downloaded SDK in the temp directory (or wherever it places the SDK archive upon download)?  \r\n\r\nI know a lot build machines these days start with a fresh image but that isn't the case for our build machines. There really is no need to re-download a several hundred MB file just to overwrite the very same file.  Seems like this could also save bandwidth on Microsoft's Azure servers."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10416318935","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:32:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1547","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1547) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10416300352","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:22:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1547","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1547) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10416280937","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:11:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1546","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1546) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10416262814","Type":"PullRequestEvent","CreatedAt":"2019-09-14T12:01:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1546","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1546) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10414364514","Type":"IssuesEvent","CreatedAt":"2019-09-13T21:11:22","Actor":"BobHein","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1545","RelatedDescription":"Opened issue \"When writing .Net Standard projects, is it OK to include Nuget packages which are part of .Net Core as dependencies?\" (#1545) at dotnet/standard","RelatedBody":"There are many Microsoft Nuget packages which contain classes which are not part of .Net Standard, but these packages are available as standalone Nuget packages. Most of them seem to be components of .Net core. A few Examples of many are:\r\n\r\nSystem.Data.SqlClient\r\nSystem.Data.DataSetExtensions\r\nSystem.Drawing.Common\r\n\r\nThese all seems to indicate that they are supported under .Net Standard in the Nuget documentation.  My questions:\r\n\r\n1) Are they really safe to use under .Net Standard DLLs, which will run in both .Net Core and .Net Framework environments?\r\n2) If they are safe to use, why aren't they included as part of .Net Standard? Note that I also want them to run under Linux as well.\r\n3) If they are not safe to use, why not? And how do you know what is and isn't safe to use?"},{"Id":"10410876170","Type":"PullRequestEvent","CreatedAt":"2019-09-13T12:35:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1544","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1544) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190912.15\r\n- **Date Produced**: 9/13/2019 5:08 AM\r\n- **Commit**: 31a5bba0e79a5ae875f691d70ec3b9789691136d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19462.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10410810902","Type":"PullRequestEvent","CreatedAt":"2019-09-13T12:25:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1544","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1544) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190912.15\r\n- **Date Produced**: 9/13/2019 5:08 AM\r\n- **Commit**: 31a5bba0e79a5ae875f691d70ec3b9789691136d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19462.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10418008789","Type":"PullRequestEvent","CreatedAt":"2019-09-15T04:07:40","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41114","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#41114) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10417981048","Type":"IssuesEvent","CreatedAt":"2019-09-15T03:48:54","Actor":"XuVeeKan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41115","RelatedDescription":"Closed issue \"C#如何使用Microsoft.AspNetCore.SignalR.Client连接Hub\" (#41115) at dotnet/corefx","RelatedBody":"严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tCS1061\t'“HubConnectionBuilder”未包含“WithUrl”的定义，并且找不到可接受第一个“HubConnectionBuilder”类型参数的可访问扩展方法“WithUrl”(是否缺少 using 指令或程序集引用?)\tWindowsFormsApp1\tC:\\Users\\XWJ\\source\\repos\\WindowsFormsApp1\\WindowsFormsApp1\\Form1.cs\t23\t活动的\r\n"},{"Id":"10417856965","Type":"IssuesEvent","CreatedAt":"2019-09-15T02:24:30","Actor":"XuVeeKan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41115","RelatedDescription":"Opened issue \"C#如何使用Microsoft.AspNetCore.SignalR.Client连接Hub\" (#41115) at dotnet/corefx","RelatedBody":"严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tCS1061\t'“HubConnectionBuilder”未包含“WithUrl”的定义，并且找不到可接受第一个“HubConnectionBuilder”类型参数的可访问扩展方法“WithUrl”(是否缺少 using 指令或程序集引用?)\tWindowsFormsApp1\tC:\\Users\\XWJ\\source\\repos\\WindowsFormsApp1\\WindowsFormsApp1\\Form1.cs\t23\t活动的\r\n"},{"Id":"10417799673","Type":"PullRequestEvent","CreatedAt":"2019-09-15T01:44:35","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41114","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#41114) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10417693853","Type":"IssuesEvent","CreatedAt":"2019-09-15T00:28:39","Actor":"RealDotNetDave","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41113","RelatedDescription":"Opened issue \"StringBuilder Perf Issue In .NET Core\" (#41113) at dotnet/corefx","RelatedBody":"I have found in my benchmark tests, that the performance of StringBuilder in .NET Core 2.2 and 3 is less performant than in .NET 4.8\r\n\r\nResults below:\r\n![image](https://user-images.githubusercontent.com/15676130/64915134-e1419480-d714-11e9-8cf0-104a09efa963.png)\r\n\r\nBenchmark project located here: https://github.com/RealDotNetDave/dotNetTips.Benchmark.App"},{"Id":"10417678814","Type":"IssuesEvent","CreatedAt":"2019-09-15T00:18:18","Actor":"RealDotNetDave","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41112","RelatedDescription":"Opened issue \"String.Equals() and == Perf Issue in .NET Core\" (#41112) at dotnet/corefx","RelatedBody":"I have found a perf issue when comparing strings with Equals() and == in .NET Core. When compared to .NET 4.8, Core 2.2 is less performant and Core 3 is even slightly less performant than 2.2.\r\n\r\nExamples:\r\n```\r\ntestWord1.Equals(this.testWord2)\r\ntestWord1 == testWord2\r\n```\r\n\r\nBenchmark project located here: https://github.com/RealDotNetDave/dotNetTips.Benchmark.App\r\n"},{"Id":"10417471617","Type":"IssuesEvent","CreatedAt":"2019-09-14T21:57:26","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/39544","RelatedDescription":"Closed issue \"HttpClient ignores TransferEncodingChunked = false if content doesn't specify content length\" (#39544) at dotnet/corefx","RelatedBody":"# Problem\r\nWhen using `HttpClient`, even when `TransferEncodingChunked` is explicitly set to `false`, the underlying `HttpMessageHandler`s will force chunked content submission if the content does not explicitly define its Content-Length header.\r\n\r\nThis coupled with the default behavior changing from non-chunked to chunked from .Net Framework to .Net Core can result in a significantly harder barrier to converting existing applications.  Working around this is possible by manually setting the Content-Length header; however, this affects other libraries that are built upon this infrastructure in ways that require you to bypass those library's benefits.  Specifically see aspnet/AspNetWebStack#232 .\r\n\r\n## Reproduction Steps\r\nInsert the following snippet into `src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.cs` and execute the test.\r\n``` C#\r\n\r\n        [Fact]\r\n        public async Task PostAsync_TransferEncodingChunkedFalse_DoesNotSendChunked()\r\n        {\r\n            const string ExpectedContent = \"Hello, expecting and continuing world.\";\r\n            var clientCompleted = new TaskCompletionSource<bool>();\r\n            await LoopbackServer.CreateClientAndServerAsync(async uri =>\r\n            {\r\n                using (HttpClient client = CreateHttpClient())\r\n                {\r\n                    client.DefaultRequestHeaders.TransferEncodingChunked = false;\r\n\r\n                    var stringContent = new StringContent(\"test\");\r\n                    stringContent.Headers.ContentLength = null;\r\n\r\n                    await client.PostAsync(uri, stringContent);\r\n                    clientCompleted.SetResult(true);\r\n                }\r\n            }, async server =>\r\n            {\r\n                await server.AcceptConnectionAsync(async connection =>\r\n                {\r\n                    List<string> headers = await connection.ReadRequestHeaderAsync();\r\n                    Assert.DoesNotContain(\"Transfer-Encoding: chunked\", headers);\r\n\r\n                    await connection.SendResponseAsync(content: ExpectedContent);\r\n                    await clientCompleted.Task; // make sure server closing the connection isn't what let the client complete\r\n                });\r\n            });\r\n        }\r\n```\r\n\r\n### Expected Results\r\n`Transfer-Encoding: chunked` is not set in the request sent to the server, `Content-Length` header is calculated and submitted instead.\r\n\r\n### Actual Results\r\nChunked encoding is used to submit the content of unknown length.\r\n\r\n# Discussion\r\nIt appears the purpose of the original change from non-chunked to chunked default is a result of the underlying `HttpClientHandler` implementations.  From what I can tell, this was done for performance reasons -- by using chunked encoding, we can stream content to the server instead of having to buffer the entire response.  I personally believe that the change in default makes sense and the positives outweigh the negatives; however, I believe we also inadvertently broke the ability to _force_ non-chunked transfer encoding.\r\n\r\nI believe this is significant because, while against HTTP 1.1, there are existing HTTP endpoints that are not able to properly handle chunked encoding.  While I wouldn't expect us to necessarily cater to non-conforming HTTP servers, I do believe that we should also do our best effort to allow end users to force the less-performant method for non-compliant endpoints.\r\n\r\nIn a similar vein, I believe that the fact that there is the ability to set `TransferEncodingChunked = false` makes the end users believe that it _would_ force non-chunked encoding.\r\n\r\n## Underlying Cause\r\nI was able to track down the cause of this issue to the following code, at least for the SocketsHttpHandler.\r\nhttps://github.com/dotnet/corefx/blob/063e38c7bc66e076fdcc7521e4c69650baae9427/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/SocketsHttpHandler.cs#L368-L372\r\n\r\nIn this code we're not checking if `request.Headers.TransferEncodingChunked.HasValue` is false before forcing it to be true when `ContentLength` is `null`.\r\n\r\n## Possible Solutions\r\nI believe one of these solutions would better serve the end users of the `HttpClient` class:\r\n1. Update `HttpClientHandler` implementations to verify `.TransferEncodingChunked.HasValue == false` before forcing chunked transfer encoding.  If `TransferEncodingChunked.HasValue && !TransferEncodingChunked.Value` then we should buffer the content, determine the final content length, set `ContentLength` to that value (so that it can be sent to the server properly), and finally use the buffered stream instead of re-fetching the content from the `HttpContent` instance.\r\n2. Deprecate `TransferEncodingChunked` and rename to `ForceTransferEncodingChunked` that is defaulted to `false`.\r\n\r\n\r\n\r\n"},{"Id":"10417450873","Type":"PullRequestEvent","CreatedAt":"2019-09-14T21:45:14","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41111","RelatedDescription":"Opened pull request \"Remove System.Net.Requests dependency from System.Private.Xml\" (#41111) at dotnet/corefx","RelatedBody":"Anything that uses System.Xml ends up implicitly referencing this System.Net.Requests.dll, which in a trimmed default MVC app is 97K.  The only thing it's used for is as part of XmlResolver to download the specified url.  We can instead remove the usage of WebRequest.Create and replace it with usage of HttpClient, which is already brought in because System.Net.Requests uses it to implement HttpWebRequest.\r\n\r\n@krwq, @buyaa-n, there are two breaking changes here (which is also why I've temporarily marked this as no-merge, until we can discuss it appropriately):\r\n- Previously you could have specified a url with a scheme other than file, http, or https, and it may have worked.  To my knowledge the only other scheme that had built-in support was ftp, but you could also use WebRequest.RegisterPrefix to register a custom scheme handler, and then it seems that this XmlDownloadManager would have been able to use it.  How important is it to keep this functionality?  Have you ever seen or heard of someone using it with XmlResolver?\r\n- Because we're now using HttpClient instead of HttpWebRequest, download failures that would have previously thrown WebException will now throw HttpRequestException.  How do we feel about that?  If you think it'll be impactful, we could push System.Net.WebRequest down to a lower-assembly, like System.Net.Primitives, but that'd be a bit unfortunate.\r\n\r\ncc: @jkotas, @davidsh, @danmosemsft "},{"Id":"10417377196","Type":"PullRequestEvent","CreatedAt":"2019-09-14T21:03:21","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41110","RelatedDescription":"Opened pull request \"Remove System.Net.Http dependency on System.Text.RegularExpressions\" (#41110) at dotnet/corefx","RelatedBody":"This dependency is the only reason we end up with a 105K System.Text.RegularExpressions.dll as part of a trimmed new MVC app.  Regex is used in the case where on Windows a bypass list is provided, in which case each item in the list is changed into a regex, which is then evaluated against each url provided to SocketsHttpHandler.  But the patterns usable are simple: the only special character recognized is an asterisk, which can map to zero or more of any character.  So, we can instead employ a simple processor for such patterns, which then eliminates the need to reference System.Text.RegularExpressions.dll from System.Net.Http.dll.  It also happens to be faster.\r\n\r\ncc: @ViktorHofer, @jkotas, @wfurt "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10417778197","Type":"PullRequestEvent","CreatedAt":"2019-09-15T01:30:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38699","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#38699) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10417656514","Type":"PullRequestEvent","CreatedAt":"2019-09-15T00:02:16","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38699","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#38699) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10417799868","Type":"PullRequestEvent","CreatedAt":"2019-09-15T01:44:43","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10416837945","Type":"PullRequestEvent","CreatedAt":"2019-09-14T16:44:06","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7716","RelatedDescription":"Merged pull request \"Add .vsconfig and script\" (#7716) at dotnet/corert","RelatedBody":"Added a .vsconfig file with dependencies for Visual Studio 2019 Preview (Windows 10 SDK, MSBuild with its dependencies, and `MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22)` aka `Microsoft.VisualStudio.Component.VC.Tools.x86.x64`), minimum requirement for building with `buildscripts/build.cmd`.\r\nAdded a script at `buildscripts/install-reqs-vs2019preview.cmd` that depends on Visual Studio 2019 Preview and vs_installer.exe being installed at `%ProgramFiles(x86)%\\Microsoft Visual Studio`.\r\nCloses #7417 "},{"Id":"10416837936","Type":"IssuesEvent","CreatedAt":"2019-09-14T16:44:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7417","RelatedDescription":"Closed issue \"Please provide a .vsconfig\" (#7417) at dotnet/corert","RelatedBody":"Please provide a .vsconfig with the minimal required Visual Studio 2019 dependencies needed to build. For an example, see:\r\n\r\nhttps://github.com/microsoft/visualfsharp/blob/master/.vsconfig\r\n\r\nRight now the experience is:\r\n```\r\nPS C:\\Users\\taggac\\github\\corert> .\\build.cmd\r\nChecking pre-requisites...\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.1.0-pre.3.0\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nCould not find Visual C++ under C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\Tools\\. Visual C++ is a pre-requisite to build this repository.\r\nSee: https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n```\r\n\r\nI'd like to be able to open a solution and have Visual Studio prompt to install all the dependencies via Visual Studio Installer."},{"Id":"10416490494","Type":"PullRequestEvent","CreatedAt":"2019-09-14T14:02:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Merged pull request \"Fix casting to pointers\" (#7791) at dotnet/corert","RelatedBody":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix."},{"Id":"10414064855","Type":"PullRequestEvent","CreatedAt":"2019-09-13T20:18:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Opened pull request \"Fix casting to pointers\" (#7791) at dotnet/corert","RelatedBody":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix."},{"Id":"10412897856","Type":"IssuesEvent","CreatedAt":"2019-09-13T17:07:42","Actor":"RalfKornmannEnvision","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Opened issue \"GC on ARM64 based \"kind of unix\" system\" (#7790) at dotnet/corert","RelatedBody":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n"},{"Id":"10411438581","Type":"PullRequestEvent","CreatedAt":"2019-09-13T13:52:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7789) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn"},{"Id":"10405845313","Type":"PullRequestEvent","CreatedAt":"2019-09-12T19:21:48","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7789) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10405784148","Type":"PullRequestEvent","CreatedAt":"2019-09-12T19:13:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7634","RelatedDescription":"Closed pull request \"WIP [no-merge] IsManagedSequential CPAOT instrumentation\" (#7634) at dotnet/corert","RelatedBody":"This instrumentation change (I don't intend to merge in) adds logging\r\nof IsManagedSequential results. I have sent out a separate PR\r\nfor the corresponding SuperIlc change (I believe the SuperIlc change\r\nis worth merging in) and I'll send out another instrumentation change\r\nfor Crossgen.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Once I figure out how to fix the remaining inconsistencies in\r\nIsManagedSequential, I'm going to merge in a smaller change just\r\nmoving the [fixed] IsManagedSequentialMethod to the R2R field\r\nlayout algorithm source file per JanK's suggestion."},{"Id":"10405781915","Type":"PullRequestEvent","CreatedAt":"2019-09-12T19:12:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7611","RelatedDescription":"Closed pull request \"Exclude methods dependent on HW intrinsics from R2R compilation\" (#7611) at dotnet/corert","RelatedBody":""},{"Id":"10405778753","Type":"PullRequestEvent","CreatedAt":"2019-09-12T19:12:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Closed pull request \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775) at dotnet/corert","RelatedBody":""},{"Id":"10405774272","Type":"PullRequestEvent","CreatedAt":"2019-09-12T19:11:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7788) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley @tarekgh @obligaron @marek-safar @jkotas @sywhang"},{"Id":"10404753393","Type":"PullRequestEvent","CreatedAt":"2019-09-12T16:49:19","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7788) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10417661395","Type":"PullRequestEvent","CreatedAt":"2019-09-15T00:05:27","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3646","RelatedDescription":"Opened pull request \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3646) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10417032543","Type":"PullRequestEvent","CreatedAt":"2019-09-14T18:13:59","Actor":"lg2de","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3645","RelatedDescription":"Opened pull request \"do not overwrite \"all warnings as errors\" (fixes #3613)\" (#3645) at dotnet/sdk","RelatedBody":""},{"Id":"10416900763","Type":"IssuesEvent","CreatedAt":"2019-09-14T17:13:03","Actor":"wjk","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3638","RelatedDescription":"Closed issue \"Package restore can't find runtime packs when explicit RID specified\" (#3638) at dotnet/sdk","RelatedBody":"When I try to restore a project that contains one or more RIDs specified in the project file `RuntimeIdentifiers` property, it cannot find a matching version of the following packages:\r\n\r\n* `Microsoft.NETCore.App.Runtime.<rid>`\r\n* `Microsoft.AspNetCore.App.Runtime.<rid>`\r\n* `Microsoft.NETCore.WindowsDesktop.Runtime.<rid>`\r\n\r\nIt says that there are other versions of these packages available on NuGet.org, but no matter what I try I cannot get the package restore to use the versions that actually exist. I've tried numerous SDK versions in the `global.json` file, to no avail. The only way I can get my project to restore (and, therefore, build) is to remove the `RuntimeIdentifiers` property from the csproj file. This can break other parts of my build, so it isn't a good solution overall.\r\n\r\nThis problem started occurring at roughly the time I installed Preview 9/RC 2 of .NET Core 3. Thanks for looking into this for me!"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"493655092","IsPullRequest":true,"CreatedAt":"2019-09-14T18:54:33","Actor":"trylek","Number":"26719","RawContent":null,"Title":"More SuperIlc fixes and improvements","State":"open","Body":"1) Set OutputFileName to the same value as InputFileName for\r\nexecution runs. This lets me use the output file name as a common\r\ntest key for both phases.\r\n\r\n2) Exclude Core_Root subtree in compile-subtree - this is needed\r\nto avoid compiling Crossgen2.\r\n\r\n3) As Anubhav pointed out, I messed up one of my previous\r\nrefactorings so that running the legacy Crossgen was no longer\r\noptional based on the --crossgen switch.\r\n\r\n4) I removed an unnecessary formatting string I randomly noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26719","RelatedDescription":"Open PR \"More SuperIlc fixes and improvements\" (#26719)"},{"Id":"493587794","IsPullRequest":true,"CreatedAt":"2019-09-14T14:00:01","Actor":"mikem8361","Number":"26714","RawContent":null,"Title":"Fix watson bucketing/broken triage dumps","State":"closed","Body":"The DAC EnumMemoryRegions needs to include some missing code version\r\nmanager memory.","Url":"https://github.com/dotnet/coreclr/pull/26714","RelatedDescription":"Closed or merged PR \"Fix watson bucketing/broken triage dumps\" (#26714)"},{"Id":"493616968","IsPullRequest":true,"CreatedAt":"2019-09-14T13:59:49","Actor":"dotnet-maestro[bot]","Number":"26718","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26718","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26718)"},{"Id":"493616711","IsPullRequest":true,"CreatedAt":"2019-09-14T13:50:57","Actor":"dotnet-maestro[bot]","Number":"26716","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26716","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26716)"},{"Id":"493464858","IsPullRequest":true,"CreatedAt":"2019-09-14T12:31:41","Actor":"trylek","Number":"26706","RawContent":null,"Title":"Fix PInvoke transition frame in CPAOT","State":"closed","Body":"During investigation of Linux CPAOT failures Jan Vorlicek discovered\r\nthat we were using the wrong constant for the PInvoke transition\r\nframe. I have verified that the change fixes all tests under\r\nJIT\\methodical\\explicit\\basic I was previously seeing; I am running\r\nthe complete Pri#1 test suite to get an overall picture.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26706","RelatedDescription":"Closed or merged PR \"Fix PInvoke transition frame in CPAOT\" (#26706)"},{"Id":"493616946","IsPullRequest":true,"CreatedAt":"2019-09-14T12:12:52","Actor":"dotnet-maestro[bot]","Number":"26717","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19463.7\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26717","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#26717)"},{"Id":"493596805","IsPullRequest":true,"CreatedAt":"2019-09-14T10:52:10","Actor":"MichalStrehovsky","Number":"26715","RawContent":null,"Title":"Add coverage of shared code in pointer casting test","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26715","RelatedDescription":"Closed or merged PR \"Add coverage of shared code in pointer casting test\" (#26715)"},{"Id":"493515921","IsPullRequest":true,"CreatedAt":"2019-09-14T01:04:17","Actor":"jkotas","Number":"26709","RawContent":null,"Title":"More PAL cleanup","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26709","RelatedDescription":"Closed or merged PR \"More PAL cleanup\" (#26709)"},{"Id":"493564719","IsPullRequest":false,"CreatedAt":"2019-09-14T01:03:37","Actor":"passuied","Number":"26713","RawContent":null,"Title":"Issue with AsyncLocal execution context when used within a Middleware with dependency injection","State":"open","Body":"Hi,\r\n\r\nWe ran into an interesting scenario in one of our middlewares.\r\nWe rely on AsyncLocal to expose context data within our application using the ContextAccessor pattern (similar to HttpContextAccessor). \r\n\r\nThe middleware is capturing information within the request headers and updating the values in the AsyncLocal instance. \r\nThe middleware uses dependency injection to resolve the context accessor (that wraps AsyncLocal) and also a Logger object (ILog).\r\n\r\nWhen we added some logic in the DI registration of ILog to resolve an object that has itself a dependency to the Context accessor, it created an abnormal behavior where the values set the AsyncLocal in a request would be kept across subsequent requests!\r\nBeyond the fact that the logic was flawed, as we resolve the context before the middleware ran and set the values, I can't wrap my head around why the values are persisted in AsyncLocal...\r\n\r\nI realize this might be complicated to understand all these details so I have recreated the issue in the following repo: https://github.com/passuied/TestAsyncLocalMiddleware\r\n\r\nYou can find details in README about how to reproduce the issue...\r\n\r\nHope it makes sense!\r\n","Url":"https://github.com/dotnet/coreclr/issues/26713","RelatedDescription":"Open issue \"Issue with AsyncLocal execution context when used within a Middleware with dependency injection\" (#26713)"},{"Id":"493552573","IsPullRequest":false,"CreatedAt":"2019-09-13T23:31:33","Actor":"zezba9000","Number":"26712","RawContent":null,"Title":"BUG: Json.NET converter: .NET Core 3.0 specifically","State":"open","Body":"Using Json.NET converters within the .NET Core 3.0 runtime fails. However in .NET Core 2.2 or .NET Framework 4.8 it works fine.\r\n\r\nIt seems like some \"Type\" is not coming through correctly.\r\n\r\n.NET Core versions are both using the same .NET Standard 2.0 Json.NET lib.\r\nThis makes me think its a .NET runtime issue of some kind or another but I can't be sure.\r\n\r\n**Download this example project that you can reproduce the issue with.**\r\nhttps://vrstudios-my.sharepoint.com/:u:/p/andrew_witte/ETIlqlXTlu1Moiz2Q2MYsAUBIje5Z96Zij7xGPL3wAO6wA?e=sz1oDH\r\n\r\nWin10 x64 1904\r\nOS Build: 18362.356\r\nVisual Studio 2019 16.3.0 Preview 3.0\r\n.NET Core 3.0.100-preview9-014004\r\n.NET Core 2.2.104\r\n\r\nHere are all my available .NET Core versions installed.\r\n```\r\n1.0.0-preview1-002702\r\n1.0.0-preview2-003121\r\n1.0.0-preview2-003131\r\n1.0.1\r\n1.0.2\r\n1.0.3\r\n1.0.4\r\n1.1.0\r\n2.0.2\r\n2.0.3\r\n2.1.100\r\n2.1.101\r\n2.1.102\r\n2.1.103\r\n2.1.104\r\n2.1.2\r\n2.1.200\r\n2.1.201\r\n2.1.202\r\n2.1.4\r\n2.1.400\r\n2.1.401\r\n2.1.402\r\n2.1.403\r\n2.1.500\r\n2.1.502\r\n2.1.503\r\n2.1.504\r\n2.1.505\r\n2.1.507\r\n2.1.508\r\n2.1.509\r\n2.1.602\r\n2.1.604\r\n2.1.700\r\n2.1.700-preview-009618\r\n2.1.701\r\n2.1.800\r\n2.1.800-preview-009677\r\n2.1.800-preview-009696\r\n2.1.801\r\n2.1.802\r\n2.2.101\r\n2.2.103\r\n2.2.104\r\n3.0.100-preview9-014004\r\n```\r\n\r\nVS info\r\n```\r\nMicrosoft Visual Studio Community 2019 Preview\r\nVersion 16.3.0 Preview 3.0\r\nVisualStudio.16.Preview/16.3.0-pre.3.0+29230.61\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2019   00435-60000-00000-AA947\r\nMicrosoft Visual C++ 2019\r\n\r\nApplication Insights Tools for Visual Studio Package   9.1.00815.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2019   16.3.277.18560\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Core Blazor Language Services   16.0.19227.01\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.3.277.18560\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   16.3.277.18560\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   16.3.277.18560\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nConvertToDevExtremeCommand Extension   1.0\r\nConvertToDevExtremeCommand Visual Studio Extension Detailed Info\r\n\r\nIntelliCode Extension   1.0\r\nIntelliCode Visual Studio Extension Detailed Info\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20816.1\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   2.0.83+gbc8a4b23ec\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nNuGet Package Manager   5.3.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   16.0.61908.27190\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTypeScript Tools   16.0.10821.2002\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.4 for F# 4.6   16.3.0-beta.19421.2+9f51ac5290b1dfc5dc434841d61b2ac31997ea8c\r\nMicrosoft Visual F# Tools 10.4 for F# 4.6\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26712","RelatedDescription":"Open issue \"BUG: Json.NET converter: .NET Core 3.0 specifically\" (#26712)"},{"Id":"493550193","IsPullRequest":true,"CreatedAt":"2019-09-13T23:18:14","Actor":"GrabYourPitchforks","Number":"26711","RawContent":null,"Title":"Introduce Utf8Span, which is a span of UTF-8 text","State":"open","Body":"This is an implementation of the `Utf8Span` type as described at https://github.com/dotnet/corefxlab/issues/2350. The goal of this type is to have a proper type that can represent a slice of guaranteed well-formed immutable UTF-8 data and to allow callers to perform text-like operations on that data. Some code samples follow.\r\n\r\n```cs\r\n/*\r\n * splitting: both syntaxes below are valid\r\n */\r\n\r\nUtf8Span name = u\"Doe, John\";\r\n(Utf8Span lastName, Utf8Span firstName) = name.Split(',', Utf8StringSplitOptions.TrimEntries);\r\n\r\nforeach (Utf8Span entry in name.Split(',', Utf8StringSplitOptions.TrimEntries)\r\n{\r\n    /* do something */\r\n}\r\n\r\n/*\r\n * text manipulation\r\n */\r\n\r\nSpan<byte> asUpper = GetScratchBuffer();\r\n\r\nint bytesWritten = name.ToUpperInvariant(asUpper);\r\nif (bytesWritten < 0) { /* FAIL */ }\r\n\r\nasUpper = asUpper.Slice(0, bytesWritten);\r\n\r\n/*\r\n * simple equality comparison\r\n */\r\n\r\nUtf8Span httpVerb = GetVerb();\r\nif (httpVerb == u\"GET\") { /* do something */ }\r\nelse if (httpVerb == u\"POST\") { /* do something else */ }\r\n\r\n/*\r\n * p/invoke\r\n */\r\n\r\n[DllImport(...)]\r\nprivate static extern int ExportedFunction(byte* pbData, int cbData);\r\n\r\nUtf8Span theSpan = GetSpan();\r\nfixed (byte* pbPinned = theSpan) // can be pinned as a byte*\r\n{\r\n    ExportedFunction(pbPinned, theSpan.Bytes.Length);\r\n}\r\n\r\n/*\r\n * searching and slicing\r\n * (if you don't want to use the Split* methods)\r\n */\r\n\r\nUtf8Span theSpan = u\"8♦ A♦ 10♠ 2♥ Q♥\";\r\n\r\nif (theSpan.Contains('♠')) {\r\n    Console.WriteLine(\"You have a spade!\");\r\n}\r\n\r\nif (theSpan.TryFind('♥', out Range match))\r\n{\r\n    Console.WriteLine(\"You have a heart!\");\r\n\r\n    // 'match' is a System.Range representing where in the original span the search term was found\r\n    Utf8Span theHeart = theSpan[match]; // == \"♥\"\r\n    Utf8Span before = theSpan[..match.Start]; // == \"8♦ A♦ 10♠ 2\"\r\n    Utf8Span after = theSpan[match.End..]; // == \" Q♥\"\r\n}\r\nelse\r\n{\r\n    Console.WriteLine(\"You do not have a heart.\");\r\n}\r\n\r\n// Below line will throw an exception because it's trying to split within a multi-byte subsequence,\r\n// and the resulting slice would end up containing ill-formed UTF-8 data.\r\nUtf8Span slice = ((Utf8Span)u\"😀\")[1..];\r\n```\r\n\r\nUnit tests are located at https://github.com/GrabYourPitchforks/corefx/tree/dev2/utf8string/src/System.Utf8String.Experimental/tests/System and will be merged into corefx as a separate PR.\r\n\r\nWork items that aren't part of this PR, since I was trying to keep the size manageable:\r\n\r\n * Also changing `Utf8String` to have the \"correct by construction\" semantics at https://github.com/dotnet/corefxlab/issues/2350, including modifications to its ctors, removal of the `this[int]` indexer, and getting its API to have parity with `Utf8Span`.\r\n * Removing `Char8` from the repo entirely.\r\n * Optimizing the `Utf8Span` code paths to avoid allocations / transcoding and instead to call into ICU if available on the current OS. On Windows, we'll need to consider how the CLDR tables carried by ICU differ from the tables carried by NLS.\r\n\r\n_Note to reviewers:_\r\n\r\nThis API has not yet been approved. That shouldn't block checkin, as this whole feature is behind a feature flag. Once the entire feature is run through LDM and the design review committee we can react to API changes and remove the feature flag.\r\n\r\nThere are some code changes that __are not__ behind feature flags, and those changes might require extra scrutiny. In particular, `CompareInfo.IndexOf` and `Unsafe.IsNull` require closer inspection.","Url":"https://github.com/dotnet/coreclr/pull/26711","RelatedDescription":"Open PR \"Introduce Utf8Span, which is a span of UTF-8 text\" (#26711)"},{"Id":"493438064","IsPullRequest":true,"CreatedAt":"2019-09-13T23:12:11","Actor":"jkotas","Number":"26705","RawContent":null,"Title":"Remove wchar_t redefinition in the PAL","State":"closed","Body":"I have been looking into what it would take to delete redefinitions of standard C types and methods in the PAL; and allow including the system headers from anywhere. This is small step for this that deletes redefinition of wchar_t in the PAL by replacing the remaining references by WCHAR or char16_t.","Url":"https://github.com/dotnet/coreclr/pull/26705","RelatedDescription":"Closed or merged PR \"Remove wchar_t redefinition in the PAL\" (#26705)"},{"Id":"493520441","IsPullRequest":false,"CreatedAt":"2019-09-13T21:17:14","Actor":"erozenfeld","Number":"26710","RawContent":null,"Title":"Implement struct promotion for incoming multireg structs","State":"open","Body":"We are currently not promoting incoming multireg structs: https://github.com/dotnet/coreclr/blob/9479f67577bbb02ea611777b00308f42252fb2bc/src/jit/lclvars.cpp#L1914-L1926\r\n\r\nExample derived from the discussion in https://github.com/dotnet/corefx/pull/40998:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class BoundsCheck\r\n{\r\n    public static int Main()\r\n    {\r\n        ReadOnlySpan<byte> span = new ReadOnlySpan<byte>(new byte[7]);\r\n        return (int)GetKey(span) + 100;\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static ulong GetKey(ReadOnlySpan<byte> propertyName)\r\n    {\r\n        const int BitsInByte = 8;\r\n        ulong key = 0;\r\n        int length = propertyName.Length;\r\n\r\n        if (length > 3)\r\n        {\r\n            key = MemoryMarshal.Read<uint>(propertyName);\r\n\r\n            if (length == 7)\r\n            {\r\n                key |= (ulong)propertyName[6] << (6 * BitsInByte)\r\n                    | (ulong)propertyName[5] << (5 * BitsInByte)\r\n                    | (ulong)propertyName[4] << (4 * BitsInByte)\r\n                    | (ulong)7 << (7 * BitsInByte);\r\n            }\r\n        }\r\n\r\n        return key;\r\n    }\r\n}\r\n```\r\n\r\nOn Windows x64 the struct is promoted and we eliminate bounds checks:\r\n<details>\r\n  <summary>asm</summary>\r\n\r\n```asm\r\n; Assembly listing for method BoundsCheck:GetKey(struct):long\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  4,  8   )   byref  ->  rcx         ld-addr-op\r\n;  V01 loc0         [V01,T02] (  5,  3.50)    long  ->  rdx\r\n;  V02 loc1         [V02,T03] (  3,  2.25)     int  ->   r8\r\n;  V03 OutArgs      [V03    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V04 tmp1         [V04    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op \"Inlining Arg\"\r\n;* V05 tmp2         [V05    ] (  0,  0   )     int  ->  zero-ref    \"impAppendStmt\"\r\n;* V06 tmp3         [V06    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op \"Inlining Arg\"\r\n;* V07 tmp4         [V07,T05] (  0,  0   )   byref  ->  zero-ref    \"Inlining Arg\"\r\n;  V08 tmp5         [V08,T01] (  5,  3   )   byref  ->  rax         V14._pointer(offs=0x00) P-INDEP \"field V00._pointer (fldOffset=0x0)\"\r\n;  V09 tmp6         [V09,T04] (  3,  2.50)     int  ->  rcx         V14._length(offs=0x08) P-INDEP \"field V00._length (fldOffset=0x8)\"\r\n;* V10 tmp7         [V10,T07] (  0,  0   )   byref  ->  zero-ref    V04._pointer(offs=0x00) P-INDEP \"field V04._pointer (fldOffset=0x0)\"\r\n;* V11 tmp8         [V11,T08] (  0,  0   )     int  ->  zero-ref    V04._length(offs=0x08) P-INDEP \"field V04._length (fldOffset=0x8)\"\r\n;* V12 tmp9         [V12,T06] (  0,  0   )   byref  ->  zero-ref    V06._pointer(offs=0x00) P-INDEP \"field V06._pointer (fldOffset=0x0)\"\r\n;* V13 tmp10        [V13    ] (  0,  0   )     int  ->  zero-ref    V06._length(offs=0x08) P-INDEP \"field V06._length (fldOffset=0x8)\"\r\n;* V14 tmp11        [V14    ] (  0,  0   )  struct (16) zero-ref    \"Promoted implicit byref\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M58243_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M58243_IG02:\r\n       488B01               mov      rax, bword ptr [rcx]\r\n       8B4908               mov      ecx, dword ptr [rcx+8]\r\n       33D2                 xor      rdx, rdx\r\n       448BC1               mov      r8d, ecx\r\n       4183F803             cmp      r8d, 3\r\n       7E3B                 jle      SHORT G_M58243_IG04\r\n       4183F804             cmp      r8d, 4\r\n       7C3D                 jl       SHORT G_M58243_IG06\r\n\r\nG_M58243_IG03:\r\n       8B10                 mov      edx, dword ptr [rax]\r\n       83F907               cmp      ecx, 7\r\n       752E                 jne      SHORT G_M58243_IG04\r\n       0FB64806             movzx    rcx, byte  ptr [rax+6]    ; no bounds check\r\n       48C1E130             shl      rcx, 48\r\n       480BD1               or       rdx, rcx\r\n       0FB64805             movzx    rcx, byte  ptr [rax+5]    ; no bounds check\r\n       48C1E128             shl      rcx, 40\r\n       480BD1               or       rdx, rcx\r\n       0FB64004             movzx    rax, byte  ptr [rax+4]    ; no bounds check\r\n       48C1E020             shl      rax, 32\r\n       480BD0               or       rdx, rax\r\n       48B80000000000000007 mov      rax, 0x700000000000000\r\n       480BD0               or       rdx, rax\r\n\r\nG_M58243_IG04:\r\n       488BC2               mov      rax, rdx\r\n\r\nG_M58243_IG05:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\nG_M58243_IG06:\r\n       B928000000           mov      ecx, 40\r\n       E84DFEFFFF           call     System.ThrowHelper:ThrowArgumentOutOfRangeException(int)\r\n       CC                   int3\r\n\r\n; Total bytes of code 100, prolog size 5 for method BoundsCheck:GetKey(struct):long\r\n; ============================================================\r\n```\r\n</details>\r\n\r\nOn Linux x64 we don't promote the struct (since it's an incoming multireg struct) and don't eliminate bounds checks:\r\n\r\n<details>\r\n  <summary>asm</summary>\r\n\r\n```asm\r\n; Assembly listing for method BoundsCheck:GetKey(struct):long\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Unix\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00    ] ( 10,  6.25)  struct (16) [rbp-0x10]   do-not-enreg[XSFB] addr-exposed ld-addr-op\r\n;  V01 loc0         [V01,T00] (  5,  3.50)    long  ->  rax\r\n;  V02 loc1         [V02,T01] (  3,  2.50)     int  ->  rdi\r\n;# V03 OutArgs      [V03    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V04 tmp1         [V04    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op \"Inlining Arg\"\r\n;* V05 tmp2         [V05    ] (  0,  0   )     int  ->  zero-ref    \"impAppendStmt\"\r\n;* V06 tmp3         [V06    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op \"Inlining Arg\"\r\n;  V07 tmp4         [V07,T02] (  2,  2   )   byref  ->  rsi         \"Inlining Arg\"\r\n;  V08 tmp5         [V08,T05] (  2,  0.75)   byref  ->  rsi         V04._pointer(offs=0x00) P-INDEP \"field V04._pointer (fldOffset=0x0)\"\r\n;  V09 tmp6         [V09,T06] (  2,  0.50)     int  ->  rax         V04._length(offs=0x08) P-INDEP \"field V04._length (fldOffset=0x8)\"\r\n;  V10 tmp7         [V10,T04] (  2,  1   )   byref  ->  rsi         V06._pointer(offs=0x00) P-INDEP \"field V06._pointer (fldOffset=0x0)\"\r\n;* V11 tmp8         [V11    ] (  0,  0   )     int  ->  zero-ref    V06._length(offs=0x08) P-INDEP \"field V06._length (fldOffset=0x8)\"\r\n;  V12 tmp9         [V12,T03] (  3,  1.50)   byref  ->  rax         \"BlockOp address local\"\r\n;\r\n; Lcl frame size = 16\r\n\r\nG_M58243_IG01:\r\n       55                   push     rbp\r\n       4883EC10             sub      rsp, 16\r\n       488D6C2410           lea      rbp, [rsp+10H]\r\n       48897DF0             mov      bword ptr [rbp-10H], rdi\r\n       488975F8             mov      qword ptr [rbp-08H], rsi\r\n\r\nG_M58243_IG02:\r\n       33C0                 xor      rax, rax\r\n       8B7DF8               mov      edi, dword ptr [rbp-08H]\r\n       83FF03               cmp      edi, 3\r\n       7E65                 jle      SHORT G_M58243_IG04\r\n       488D45F0             lea      rax, bword ptr [rbp-10H]\r\n       488B30               mov      rsi, bword ptr [rax]\r\n       8B4008               mov      eax, dword ptr [rax+8]\r\n       83F804               cmp      eax, 4\r\n       7C5C                 jl       SHORT G_M58243_IG05\r\n\r\nG_M58243_IG03:\r\n       8B06                 mov      eax, dword ptr [rsi]\r\n       83FF07               cmp      edi, 7\r\n       754F                 jne      SHORT G_M58243_IG04\r\n       837DF806             cmp      dword ptr [rbp-08H], 6      ; bounds check\r\n       765A                 jbe      SHORT G_M58243_IG06\r\n       488B7DF0             mov      rdi, bword ptr [rbp-10H]\r\n       400FB67F06           movzx    rdi, byte  ptr [rdi+6]\r\n       48C1E730             shl      rdi, 48\r\n       480BC7               or       rax, rdi\r\n       837DF805             cmp      dword ptr [rbp-08H], 5      ; bounds check\r\n       7644                 jbe      SHORT G_M58243_IG06\r\n       488B7DF0             mov      rdi, bword ptr [rbp-10H]\r\n       400FB67F05           movzx    rdi, byte  ptr [rdi+5]\r\n       48C1E728             shl      rdi, 40\r\n       480BC7               or       rax, rdi\r\n       837DF804             cmp      dword ptr [rbp-08H], 4       ; bounds check\r\n       762E                 jbe      SHORT G_M58243_IG06\r\n       488B7DF0             mov      rdi, bword ptr [rbp-10H]\r\n       400FB67F04           movzx    rdi, byte  ptr [rdi+4]\r\n       48C1E720             shl      rdi, 32\r\n       480BC7               or       rax, rdi\r\n       48BF0000000000000007 mov      rdi, 0x700000000000000\r\n       480BC7               or       rax, rdi\r\n\r\nG_M58243_IG04:\r\n       488D6500             lea      rsp, [rbp]\r\n       5D                   pop      rbp\r\n       C3                   ret\r\n\r\nG_M58243_IG05:\r\n       BF28000000           mov      edi, 40\r\n       E82FFAFFFF           call     System.ThrowHelper:ThrowArgumentOutOfRangeException(int)\r\n       CC                   int3\r\n\r\nG_M58243_IG06:\r\n       E8990B3679           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3\r\n\r\n; Total bytes of code 152, prolog size 10 for method BoundsCheck:GetKey(struct):long\r\n; ============================================================\r\n```\r\n</details>","Url":"https://github.com/dotnet/coreclr/issues/26710","RelatedDescription":"Open issue \"Implement struct promotion for incoming multireg structs\" (#26710)"},{"Id":"493421796","IsPullRequest":true,"CreatedAt":"2019-09-13T20:58:48","Actor":"MichalStrehovsky","Number":"26704","RawContent":null,"Title":"Re-enable incremental linking","State":"closed","Body":"This was disabled due to a linker bug that was fixed in 2017. Maybe it's time to re-enable this.\r\n\r\nFixes #13344.","Url":"https://github.com/dotnet/coreclr/pull/26704","RelatedDescription":"Closed or merged PR \"Re-enable incremental linking\" (#26704)"},{"Id":"493500484","IsPullRequest":true,"CreatedAt":"2019-09-13T20:18:21","Actor":"sywhang","Number":"26708","RawContent":null,"Title":"Mark remaining counter test as JIT sensitive","State":"open","Body":"There was one remaining counter test that hasn't been marked as JIT sensitive from https://github.com/dotnet/coreclr/pull/26666, so this marks it as JIT sensitive.","Url":"https://github.com/dotnet/coreclr/pull/26708","RelatedDescription":"Open PR \"Mark remaining counter test as JIT sensitive\" (#26708)"},{"Id":"493494826","IsPullRequest":true,"CreatedAt":"2019-09-13T20:02:21","Actor":"cshung","Number":"26707","RawContent":null,"Title":"Fixing a simple typo","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26707","RelatedDescription":"Open PR \"Fixing a simple typo\" (#26707)"},{"Id":"493411092","IsPullRequest":true,"CreatedAt":"2019-09-13T19:42:22","Actor":"MichalStrehovsky","Number":"26703","RawContent":null,"Title":"Get rid of unnecessary ilproj entries","State":"closed","Body":"https://github.com/dotnet/coreclr/pull/26698#discussion_r324255255\r\n\r\nAlso deleting AllowUnsafeBlocks for good measure. Unsafe blocks are a C# invention.","Url":"https://github.com/dotnet/coreclr/pull/26703","RelatedDescription":"Closed or merged PR \"Get rid of unnecessary ilproj entries\" (#26703)"},{"Id":"493282434","IsPullRequest":true,"CreatedAt":"2019-09-13T15:47:04","Actor":"MichalStrehovsky","Number":"26698","RawContent":null,"Title":"Add test coverage for casting to pointers","State":"closed","Body":"I was fixing a customer-reported bug related to this in .NET Native and decided to check whether there's any test coverage for this in CoreCLR. There isn't, so adding a test I wrote for .NET Native.","Url":"https://github.com/dotnet/coreclr/pull/26698","RelatedDescription":"Closed or merged PR \"Add test coverage for casting to pointers\" (#26698)"},{"Id":"493292885","IsPullRequest":true,"CreatedAt":"2019-09-13T15:45:04","Actor":"dotnet-maestro[bot]","Number":"26701","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190912.26\r\n- **Date Produced**: 9/13/2019 3:51 AM\r\n- **Commit**: 580567cedf08cbb182a2d8e93fd10e1029e30106\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19462.26\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26701","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26701)"},{"Id":"493292716","IsPullRequest":true,"CreatedAt":"2019-09-13T15:44:54","Actor":"dotnet-maestro[bot]","Number":"26700","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190912.15\r\n- **Date Produced**: 9/13/2019 5:08 AM\r\n- **Commit**: 31a5bba0e79a5ae875f691d70ec3b9789691136d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19462.15\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19462.15\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26700","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26700)"},{"Id":"493291394","IsPullRequest":true,"CreatedAt":"2019-09-13T14:02:18","Actor":"dotnet-maestro[bot]","Number":"26699","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26699","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#26699)"},{"Id":"493134525","IsPullRequest":true,"CreatedAt":"2019-09-13T11:33:43","Actor":"jkotas","Number":"26693","RawContent":null,"Title":"Delete dead code in PAL related to locale handling","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26693","RelatedDescription":"Closed or merged PR \"Delete dead code in PAL related to locale handling\" (#26693)"},{"Id":"493298127","IsPullRequest":false,"CreatedAt":"2019-09-13T10:37:38","Actor":"volanavlad","Number":"26702","RawContent":null,"Title":"Linux only: System.RuntimeType.GetProperty does not find properties with cyrrilic chars if BindingFlags.IgnoreCase is set","State":"open","Body":"Linux only: System.RuntimeType.GetProperty() does not find properties with cyrrilic chars if BindingFlags.IgnoreCase is set.\r\n\r\nThe same code works fine on Windows OS.\r\n\r\n```\r\nusing System;\r\nusing System.Linq.Expressions;\r\nusing System.Reflection;\r\n\r\nnamespace GetPropertyTest\r\n{\r\n\r\n    class Program\r\n    {\r\n        public string Свойство_С_Киррилицей { get; set; }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Press <Enter> or attach debugger.\");\r\n            Console.ReadLine();\r\n\r\n            var result = typeof(Program).GetProperty(nameof(Свойство_С_Киррилицей),\r\n                BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Public);\r\n\r\n// result==null on Linux!!!\r\n\r\n            Console.WriteLine(\r\n                \"typeof(Program).GetProperty(nameof(Свойство_С_Киррилицей),BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Public)==\" +\r\n                result?.ToString());\r\n            result = typeof(Program).GetProperty(nameof(Свойство_С_Киррилицей),\r\n                BindingFlags.Instance | BindingFlags.Public);\r\n            Console.WriteLine(\r\n                \"typeof(Program).GetProperty(nameof(Свойство_С_Киррилицей),BindingFlags.Instance | BindingFlags.Public)==\" +\r\n                result);\r\n\r\n            var expr = Expression.New(typeof(Program).GetConstructor(new Type[0]));\r\n            var exprProp = Expression.Property(expr, nameof(Свойство_С_Киррилицей));\r\n\r\n            Console.WriteLine(\"Property expression was successfully created.\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nMore info: https://github.com/dotnet/core/issues/3356","Url":"https://github.com/dotnet/coreclr/issues/26702","RelatedDescription":"Open issue \"Linux only: System.RuntimeType.GetProperty does not find properties with cyrrilic chars if BindingFlags.IgnoreCase is set\" (#26702)"},{"Id":"493167610","IsPullRequest":false,"CreatedAt":"2019-09-13T10:37:27","Actor":"tmds","Number":"26694","RawContent":null,"Title":"Q: compatible platforms for crossgened image","State":"closed","Body":"When running `crossgen` on `linux-x64` (PublishReadyToRun), will the native code be usable on `win-x64`?\r\nI'm assuming not, because of different ABI conventions?\r\nIs that correct?\r\n\r\nCC @fadimounir","Url":"https://github.com/dotnet/coreclr/issues/26694","RelatedDescription":"Closed issue \"Q: compatible platforms for crossgened image\" (#26694)"},{"Id":"493219868","IsPullRequest":true,"CreatedAt":"2019-09-13T09:15:59","Actor":"elinor-fung","Number":"26697","RawContent":null,"Title":"[single-exe] Enable LTO when building corebundle","State":"open","Body":"Using the link-a-thon app, this drops about 25-30ms in total startup (startup + first request) and 0.35MB in the bundled app size.\r\n\r\nWithout LTO (28.91 MB app):\r\n\r\n|     RPS | CPU (%) | Memory (MB) | Avg. Latency (ms) | Startup (ms) | First Request (ms) | Latency (ms) |\r\n| ------: | ------: | ----------: | ----------------: | -----------: | -----------------: | -----------: |\r\n| 136,851 |      97 |         169 |              2.48 |     228.8263 |           127.9611 |       0.7535 |\r\n| 140,516 |      98 |         169 |              1.99 |     228.9596 |           128.6934 |       0.9584 |\r\n| 136,038 |      96 |         169 |              2.27 |     227.5574 |           125.7193 |       0.8264 |\r\n| 137,672 |      98 |         169 |              2.04 |     218.0485 |           124.9019 |       0.5842 |\r\n| 137,626 |      95 |         170 |               2.1 |     223.1652 |           131.0142 |       0.9527 |\r\n\r\nWith LTO (28.56 MB app):\r\n\r\n|     RPS | CPU (%) | Memory (MB) | Avg. Latency (ms) | Startup (ms) | First Request (ms) | Latency (ms) |\r\n| ------: | ------: | ----------: | ----------------: | -----------: | -----------------: | -----------: |\r\n| 140,603 |      98 |         167 |              2.37 |     207.8557 |            120.252 |       0.7448 |\r\n| 139,339 |      96 |         168 |               2.2 |     194.9277 |           107.8954 |       0.7278 |\r\n| 142,691 |      97 |         170 |              2.04 |     201.5164 |           103.8931 |       0.7875 |\r\n| 139,297 |      96 |         169 |              2.08 |     214.0854 |           119.2582 |       0.8144 |\r\n| 142,519 |      98 |         172 |              2.19 |     194.8844 |           116.9811 |       0.9509 |","Url":"https://github.com/dotnet/coreclr/pull/26697","RelatedDescription":"Open PR \"[single-exe] Enable LTO when building corebundle\" (#26697)"},{"Id":"493063248","IsPullRequest":true,"CreatedAt":"2019-09-13T08:07:47","Actor":"elinor-fung","Number":"26691","RawContent":null,"Title":"[single-exe] Enable server GC for bundle host by default","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26691","RelatedDescription":"Closed or merged PR \"[single-exe] Enable server GC for bundle host by default\" (#26691)"},{"Id":"493190471","IsPullRequest":false,"CreatedAt":"2019-09-13T08:04:53","Actor":"tmds","Number":"26696","RawContent":null,"Title":"Does .NET Core 3.0 on Linux support GCLargePages","State":"open","Body":"I'm trying to figure out if this is supported with .NET Core 3.0.\r\n\r\nI see the code is there:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/922429db0144dd6f3b4324805464dae82857512a/src/pal/src/map/virtual.cpp#L991-L1002\r\n\r\nWhen I (using 3.0.100-preview9-014004 on a `dotnet new web`):\r\n```\r\n$ export COMPlus_GCLargePages=1\r\n$ strace -f -e mmap dotnet bin/Debug/netcoreapp3.0/web.dll\r\n```\r\nThe app doesn't fail, and none of the `mmap` syscalls have the `MAP_HUGETLB` flag.\r\n\r\nMy system isn't configured for huge pages. I assume Microsoft preview9 build includes the feature, which is why I think it should show up in the `strace`.\r\n\r\ncc @janvorli ","Url":"https://github.com/dotnet/coreclr/issues/26696","RelatedDescription":"Open issue \"Does .NET Core 3.0 on Linux support GCLargePages\" (#26696)"},{"Id":"493062666","IsPullRequest":true,"CreatedAt":"2019-09-13T08:02:42","Actor":"trylek","Number":"26690","RawContent":null,"Title":"Some SuperIlc cleanup and improvements","State":"closed","Body":"1) Remove the parameter -cpaot as it's no longer needed now that\r\nCrossgen2 also resides under Core_Root.\r\n\r\n2) Add new parameter --exe to only execute the tests without\r\ncompilation. JanV specifically asked for this to speed up his\r\ninner testing loop on Linux.\r\n\r\n3) Don't pass /largeversionbubble to the [legacy] Crossgen\r\ncompilation of System.Private.CoreLib as it apparently crashes\r\non Linux and we are no longer interested in fixing that.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26690","RelatedDescription":"Closed or merged PR \"Some SuperIlc cleanup and improvements\" (#26690)"},{"Id":"493177064","IsPullRequest":true,"CreatedAt":"2019-09-13T07:29:36","Actor":"Maoni0","Number":"26695","RawContent":null,"Title":"[WIP] PI loop","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26695","RelatedDescription":"Open PR \"[WIP] PI loop\" (#26695)"},{"Id":"493063696","IsPullRequest":true,"CreatedAt":"2019-09-13T00:45:24","Actor":"mmitche","Number":"26692","RawContent":null,"Title":"Merge to release/3.0 -> release/3.1","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26692","RelatedDescription":"Closed or merged PR \"Merge to release/3.0 -> release/3.1\" (#26692)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"493690046","IsPullRequest":true,"CreatedAt":"2019-09-15T03:50:35","Actor":"dotnet-maestro[bot]","Number":"12650","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.5\r\n- **Date Produced**: 9/15/2019 2:36 AM\r\n- **Commit**: adc28fdb422cd9306b65c9f67ced13aaecce8f76\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12650","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12650)"},{"Id":"493677052","IsPullRequest":true,"CreatedAt":"2019-09-15T00:05:37","Actor":"dotnet-maestro[bot]","Number":"12649","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190914.3\r\n- **Date Produced**: 9/14/2019 10:52 PM\r\n- **Commit**: 7cd94410e82893dfbde7b4c7b2ba8d505bf59083\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19464.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12649","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12649)"},{"Id":"493653779","IsPullRequest":false,"CreatedAt":"2019-09-14T18:40:45","Actor":"rkeithhill","Number":"12648","RawContent":null,"Title":"Enh request: Update dotnet-install script to cache and use previously downloaded SDK","State":"open","Body":"This is an enhancement request for `install-script.ps1/.sh`.  \r\n\r\nCan we get a new parameter to request that this script only download the selected SDK **if** it can't find a find previously downloaded SDK in the temp directory (or wherever it places the SDK archive upon download)?  \r\n\r\nI know a lot build machines these days start with a fresh image but that isn't the case for our build machines. There really is no need to re-download a several hundred MB file just to overwrite the very same file.  Seems like this could also save bandwidth on Microsoft's Azure servers.","Url":"https://github.com/dotnet/cli/issues/12648","RelatedDescription":"Open issue \"Enh request: Update dotnet-install script to cache and use previously downloaded SDK\" (#12648)"},{"Id":"493650479","IsPullRequest":true,"CreatedAt":"2019-09-14T18:33:38","Actor":"dotnet-maestro[bot]","Number":"12647","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/14/2019 5:53 PM\r\n- **Commit**: b2663fb07294f5d6cf3caa927d58f7cbebf7d626\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.0-rc1.19464.2\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12647","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12647)"},{"Id":"493646384","IsPullRequest":true,"CreatedAt":"2019-09-14T17:25:18","Actor":"dotnet-maestro[bot]","Number":"12646","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190914.2\r\n- **Date Produced**: 9/15/2019 4:11 AM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19464.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19464.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12646","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12646)"},{"Id":"493616600","IsPullRequest":true,"CreatedAt":"2019-09-14T12:43:41","Actor":"dotnet-maestro[bot]","Number":"12645","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190913.4\r\n- **Date Produced**: 9/14/2019 2:24 AM\r\n- **Commit**: 778951d25fd4fd5e04a2d2c9220e20b7074d1cbc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19463.4\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12645","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12645)"},{"Id":"493616203","IsPullRequest":true,"CreatedAt":"2019-09-14T12:38:13","Actor":"dotnet-maestro[bot]","Number":"12643","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12643","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12643)"},{"Id":"493616219","IsPullRequest":true,"CreatedAt":"2019-09-14T12:33:22","Actor":"dotnet-maestro[bot]","Number":"12644","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 3:58 PM\r\n- **Commit**: 459284590f8f2b6d4e5c922d30c358290f3668cf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19463.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12644","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12644)"},{"Id":"493599289","IsPullRequest":true,"CreatedAt":"2019-09-14T08:30:57","Actor":"am11","Number":"12642","RawContent":null,"Title":"Use scanelf over ldconfig on musl-libc distros","State":"open","Body":"`ldconfig` on muscle libc based distros yields no results. The alternative is to use `scanelf`. For example, Julia platform package in aports uses `scanelf` to capture their expected results equivalent to `ldconfig`: https://github.com/alpinelinux/aports/blob/0042419fcc/unmaintained/julia/find-syslibs.\r\n\r\nSince corefx produces portable linux-musl libc packages, this pr also relaxes the platform == alpine condition to instead introspect musl-libc, in order to support other distros like Void Linux (musl edition).\r\n","Url":"https://github.com/dotnet/cli/pull/12642","RelatedDescription":"Open PR \"Use scanelf over ldconfig on musl-libc distros\" (#12642)"},{"Id":"493576939","IsPullRequest":true,"CreatedAt":"2019-09-14T03:50:34","Actor":"dotnet-maestro[bot]","Number":"12641","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190913.5\r\n- **Date Produced**: 9/14/2019 3:04 AM\r\n- **Commit**: 1b90fa144c9c49d2f133a7a8e3fb19522ff72e83\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19463.5\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12641","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12641)"},{"Id":"493527983","IsPullRequest":true,"CreatedAt":"2019-09-14T03:35:49","Actor":"dotnet-maestro[bot]","Number":"12637","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.05\r\n- **Date Produced**: 9/13/2019 4:13 PM\r\n- **Commit**: 7d57652f33493fa022125b7f63aad0d70c52d810\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19463-05\r\n  - **Microsoft.NET.HostModel** -> 3.0.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12637","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12637)"},{"Id":"492995417","IsPullRequest":true,"CreatedAt":"2019-09-14T02:52:57","Actor":"dotnet-bot","Number":"12622","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12622","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#12622)"},{"Id":"493570980","IsPullRequest":true,"CreatedAt":"2019-09-14T02:40:39","Actor":"dotnet-maestro[bot]","Number":"12640","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190913.4\r\n- **Date Produced**: 9/14/2019 1:23 AM\r\n- **Commit**: 89de7ee4909059984dffcb365c439621e54b55a8\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19463.4\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12640","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12640)"},{"Id":"493567876","IsPullRequest":true,"CreatedAt":"2019-09-14T02:15:38","Actor":"dotnet-maestro[bot]","Number":"12639","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190913.2\r\n- **Date Produced**: 9/14/2019 1:28 AM\r\n- **Commit**: e50a0698b5211eb99e9eda7aae6db38559435114\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.0-rc1.19463.2\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12639","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12639)"},{"Id":"493527599","IsPullRequest":true,"CreatedAt":"2019-09-14T02:08:46","Actor":"mmitche","Number":"12636","RawContent":null,"Title":"[release/3.0] Stabilize package versions","State":"closed","Body":"- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12636","RelatedDescription":"Closed or merged PR \"[release/3.0] Stabilize package versions\" (#12636)"},{"Id":"493209513","IsPullRequest":false,"CreatedAt":"2019-09-14T02:07:26","Actor":"am11","Number":"12627","RawContent":null,"Title":"dotnet-new to create project with avaiable TargetFramework","State":"closed","Body":"## Steps to reproduce\r\n\r\nInstall latest master in a fresh environment:\r\n\r\n```sh\r\n$ curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin -Channel master\r\n\r\n$ ~/.dotnet/dotnet new console -o /tmp/testdrive\r\n$ ~/.dotnet/dotnet run -p /tmp/testdrive\r\n```\r\n\r\n\r\n## Expected  behavior\r\n\r\n`Hello World!` is printed.\r\n\r\n## Actual behavior\r\n\r\n```sh\r\n/tmp/testdrive/testdrive.csproj : error NU1102: Unable to find package Microsoft.NETCore.App.Ref with version (= 3.0.0-rc1-19456-20)\r\n/tmp/testdrive/testdrive.csproj : error NU1102:   - Found 7 version(s) in nuget.org [ Nearest version: 3.0.0-preview9-19423-09 ]\r\n/tmp/testdrive/testdrive.csproj : error NU1102: Unable to find package Microsoft.NETCore.App.Host.osx-x64 with version (= 3.0.0-rc1-19456-20)\r\n/tmp/testdrive/testdrive.csproj : error NU1102:   - Found 5 version(s) in nuget.org [ Nearest version: 3.0.0-preview9-19423-09 ]\r\n\r\nThe build failed. Fix the build errors and run again.\r\n```\r\n\r\n## Workaround\r\n\r\nReplace netcoreapp3.0 with netcoreapp5.0 in csproj:\r\n\r\n```sh\r\n$ sed -iE \"s/\\(TargetFramework>\\).*\\(<\\/Tar\\)/\\1netcoreapp5.0\\2/g\" \\\r\n    /tmp/testdrive/testdrive.csproj\r\n\r\n$ ~/.dotnet/dotnet run -p /tmp/testdrive\r\nHello World!\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-014647\r\n Commit:    3551fc0fcb\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /Users/adeel/.dotnet/sdk/5.0.100-alpha1-014647/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha1.19462.23\r\n  Commit:  a4822402f4\r\n\r\n.NET Core SDKs installed:\r\n  5.0.100-alpha1-014647 [/Users/adeel/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.0-alpha1.19427.5 [/Users/adeel/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.0-alpha1.19462.23 [/Users/adeel/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12627","RelatedDescription":"Closed issue \"dotnet-new to create project with avaiable TargetFramework\" (#12627)"},{"Id":"493261310","IsPullRequest":false,"CreatedAt":"2019-09-14T02:03:09","Actor":"greenmooseSE","Number":"12628","RawContent":null,"Title":"Do I need to rebuild/redeploy app with every new SDK version (vs update only runtime on host)?","State":"closed","Body":"Hi.\r\n\r\nI am wondering how the SDK version vs Runtime version work, related to building an application.\r\nFor example, on https://dotnet.microsoft.com/download/dotnet-core/2.1 there are 3 SDK releases (```2.1.509```, ```2.1.606``` and ```2.1.802```) for same runtime version ```2.1.13```. and e.g. 4 SDK versions for runtime ```2.1.12```\r\n\r\nGiven I am not deploying self-contained applications:\r\nIn order to utilize the latest security patches, do I need to rebuild the application with the latest SDK every time it is released, as well as updating the runtime (e.g. ```2.1.12``` => ```2.1.13``` on the host? Or is the SDK versions just different \"tooling\" versions and my app is safe as long as the runtime is updated on the host environment no matter which SDK it was built with?\r\n\r\nThanks.","Url":"https://github.com/dotnet/cli/issues/12628","RelatedDescription":"Closed issue \"Do I need to rebuild/redeploy app with every new SDK version (vs update only runtime on host)?\" (#12628)"},{"Id":"493430301","IsPullRequest":false,"CreatedAt":"2019-09-14T01:59:47","Actor":"assyadh","Number":"12633","RawContent":null,"Title":"Which dotnet/cli tag to use to build the cli for .NET 2.1.13","State":"closed","Body":"Hi,\r\n\r\nI am seeing 3 different tags for the .NET Cli for the 2.1.13 release:\r\n\r\nv2.1.802+dependencies\r\nv2.1.606+dependencies\r\nv2.1.509+dependencies\r\n\r\nI am trying to build the CLI that is released with 2.1.13, but I see three different binaries here as well for 2.1.13:\r\n\r\nhttps://dotnet.microsoft.com/download/dotnet-core/2.1\r\n\r\nShould I just build the latest one? What is the reasoning behind the three different versions?\r\n\r\nThanks.\r\n\r\nH.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12633","RelatedDescription":"Closed issue \"Which dotnet/cli tag to use to build the cli for .NET 2.1.13\" (#12633)"},{"Id":"493528155","IsPullRequest":true,"CreatedAt":"2019-09-13T22:15:55","Actor":"dotnet-maestro[bot]","Number":"12638","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 10:50 AM\r\n- **Commit**: 372f44450f51552a8cf725acf705dc477bd8391f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.1\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12638","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12638)"},{"Id":"493473430","IsPullRequest":false,"CreatedAt":"2019-09-13T19:02:36","Actor":"vatsan-madhavan","Number":"12635","RawContent":null,"Title":"https://dot.net/v1/dotnet-install.ps1  does not support `windowsdesktop` `Runtime` ","State":"open","Body":"Support for `windowsdesktop` `Runtime` was added by https://github.com/dotnet/cli/pull/12315 and the website download copy was (I think) updated by https://github.com/dotnet/dotnet-core-website/pull/1458. \r\n\r\nStill, it looks like the copy of dotnet-install.ps1 hosted at https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script is the one that seems to be a version prior to when windowsdesktop support was added.\r\n\r\n/cc @johnbeisner, @dagood ","Url":"https://github.com/dotnet/cli/issues/12635","RelatedDescription":"Open issue \"https://dot.net/v1/dotnet-install.ps1  does not support `windowsdesktop` `Runtime` \" (#12635)"},{"Id":"493438541","IsPullRequest":true,"CreatedAt":"2019-09-13T18:05:41","Actor":"dotnet-maestro[bot]","Number":"12634","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12634","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12634)"},{"Id":"493425295","IsPullRequest":true,"CreatedAt":"2019-09-13T17:30:41","Actor":"dotnet-maestro[bot]","Number":"12631","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 3:45 PM\r\n- **Commit**: 1e35b022cbc45bd8185cfa3f3151451298bf6de4\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19463.3\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19463.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19463.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19463.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19463.3\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12631","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12631)"},{"Id":"493429793","IsPullRequest":false,"CreatedAt":"2019-09-13T17:06:55","Actor":"PatrickReddy","Number":"12632","RawContent":null,"Title":"Unable to download latest SDK 2.2","State":"open","Body":"## Steps to reproduce\r\nRunning the following step in our builds fails due to the \"latest\" available package not being correct.  From the git repo the version should  be 2.2.402 not 2.2.804.\r\n\r\n.\\dotnet-install.ps1 -Channel 2.2 -Version latest -Architecture x64\r\n\r\nExplicitly adding -Version \"2.2.402\" does download the sdk.\r\n\r\n## Expected  behavior\r\nThe correct latest package should be retrieved and downloaded\r\n\r\n## Actual behavior\r\nThe install script is using version 2.2.804...\r\n\r\n=== Install DotNet SDK ===\r\n\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.802/dotnet-sdk-2.2.802-win-x64.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.802/dotnet-sdk-2.2.802-win-x64.zip\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.802/dotnet-dev-win-x64.2.2.802.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.802/dotnet-dev-win-x64.2.2.802.zip\r\npowershell.exe : Could not find/download: \".NET Core SDK\" with version = 2.2.802\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12632","RelatedDescription":"Open issue \"Unable to download latest SDK 2.2\" (#12632)"},{"Id":"493137844","IsPullRequest":true,"CreatedAt":"2019-09-13T16:16:54","Actor":"dotnet-maestro[bot]","Number":"12626","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 2:30 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19463.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19463.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19463.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19463.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12626","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12626)"},{"Id":"493288339","IsPullRequest":true,"CreatedAt":"2019-09-13T12:38:43","Actor":"dotnet-maestro[bot]","Number":"12630","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190912.1\r\n- **Date Produced**: 9/12/2019 3:31 PM\r\n- **Commit**: c03a030cdfb336a37ad740f0021cc7c6d1a71a63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19462.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12630","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12630)"},{"Id":"493288265","IsPullRequest":true,"CreatedAt":"2019-09-13T12:38:29","Actor":"dotnet-maestro[bot]","Number":"12629","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12629","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12629)"},{"Id":"493116395","IsPullRequest":true,"CreatedAt":"2019-09-13T03:46:05","Actor":"dotnet-maestro[bot]","Number":"12625","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190912.24\r\n- **Date Produced**: 9/13/2019 1:55 AM\r\n- **Commit**: 087fa3adcd73e390b625016fac25b362ce81abec\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19462.24\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19462.24\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19462.24\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19462.24\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19462.24\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12625","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12625)"},{"Id":"493106185","IsPullRequest":true,"CreatedAt":"2019-09-13T02:50:53","Actor":"dotnet-maestro[bot]","Number":"12624","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190912.23\r\n- **Date Produced**: 9/13/2019 12:53 AM\r\n- **Commit**: a4822402f4e52b182be0c5de673aee3cff708d65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19462.23\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19462.23\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19462.23\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19462.23\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19462.23\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12624","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12624)"},{"Id":"493071564","IsPullRequest":true,"CreatedAt":"2019-09-13T00:00:46","Actor":"dotnet-maestro[bot]","Number":"12623","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190912.20\r\n- **Date Produced**: 9/12/2019 10:08 PM\r\n- **Commit**: cfa37c9b21a4598ff5f8d50fc0d7a8aed6a5b2ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19462.20\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19462.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19462.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19462.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19462.20\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12623","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12623)"},{"Id":"492927604","IsPullRequest":false,"CreatedAt":"2019-09-12T21:20:44","Actor":"ForestEckhardt","Number":"12621","RawContent":null,"Title":"Missing github releases of 2.2.109, 2.2.206, and 2.2.402","State":"closed","Body":"Hey there y'all,\r\nI was just looking at the .Net release page and notice y'all had cut releases of the SDK, but haven't cut any versions here. I was wondering if there was a reason that there were no github release and also if it would be possible to get those release cut +dependencies?\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12621","RelatedDescription":"Closed issue \"Missing github releases of 2.2.109, 2.2.206, and 2.2.402\" (#12621)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"493617725","IsPullRequest":true,"CreatedAt":"2019-09-14T12:32:41","Actor":"dotnet-maestro[bot]","Number":"1547","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19463.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1547","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1547)"},{"Id":"493616084","IsPullRequest":true,"CreatedAt":"2019-09-14T12:11:29","Actor":"dotnet-maestro[bot]","Number":"1546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1546)"},{"Id":"493518578","IsPullRequest":false,"CreatedAt":"2019-09-13T21:11:22","Actor":"BobHein","Number":"1545","RawContent":null,"Title":"When writing .Net Standard projects, is it OK to include Nuget packages which are part of .Net Core as dependencies?","State":"open","Body":"There are many Microsoft Nuget packages which contain classes which are not part of .Net Standard, but these packages are available as standalone Nuget packages. Most of them seem to be components of .Net core. A few Examples of many are:\r\n\r\nSystem.Data.SqlClient\r\nSystem.Data.DataSetExtensions\r\nSystem.Drawing.Common\r\n\r\nThese all seems to indicate that they are supported under .Net Standard in the Nuget documentation.  My questions:\r\n\r\n1) Are they really safe to use under .Net Standard DLLs, which will run in both .Net Core and .Net Framework environments?\r\n2) If they are safe to use, why aren't they included as part of .Net Standard? Note that I also want them to run under Linux as well.\r\n3) If they are not safe to use, why not? And how do you know what is and isn't safe to use?","Url":"https://github.com/dotnet/standard/issues/1545","RelatedDescription":"Open issue \"When writing .Net Standard projects, is it OK to include Nuget packages which are part of .Net Core as dependencies?\" (#1545)"},{"Id":"493297430","IsPullRequest":true,"CreatedAt":"2019-09-13T12:35:42","Actor":"dotnet-maestro[bot]","Number":"1544","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190912.15\r\n- **Date Produced**: 9/13/2019 5:08 AM\r\n- **Commit**: 31a5bba0e79a5ae875f691d70ec3b9789691136d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19462.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19462.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1544","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1544)"},{"Id":"493287649","IsPullRequest":true,"CreatedAt":"2019-09-13T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1543","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1543","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1543)"},{"Id":"493039917","IsPullRequest":false,"CreatedAt":"2019-09-12T21:31:56","Actor":"Anipik","Number":"1542","RawContent":null,"Title":"Using Dotnet pack to produce the packages for Netstandard/Library packages.","State":"open","Body":"Currently we are using pkgproj and a lot of arcade & custom infrastructure to build packages.\r\n\r\nGoing forward we will be only publishing the ref assembly packages so it becomes more useful to move towards using dotnet pack.\r\n\r\nHaving the same architecture for preview and the final release will help us avoid problems in the release pipelines. \r\n\r\ncc @ericstj @ViktorHofer @danmosemsft ","Url":"https://github.com/dotnet/standard/issues/1542","RelatedDescription":"Open issue \"Using Dotnet pack to produce the packages for Netstandard/Library packages.\" (#1542)"},{"Id":"493029008","IsPullRequest":true,"CreatedAt":"2019-09-12T21:17:00","Actor":"mmitche","Number":"1541","RawContent":null,"Title":"Stabilize package verions","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1541","RelatedDescription":"Closed or merged PR \"Stabilize package verions\" (#1541)"},{"Id":"492578579","IsPullRequest":true,"CreatedAt":"2019-09-12T17:46:41","Actor":"Anipik","Number":"1536","RawContent":null,"Title":"Setting version suffix as non empty for building release package versions","State":"closed","Body":"Currently we get this error while building the release version of this package\r\n```\r\nC:\\Users\\mmitche\\.nuget\\packages\\microsoft.dotnet.build.tasks.packaging\\1.0.0-beta.19460.3\\build\\Packaging.targets(736,5): error : No VersionSuffix was set. Ensure \r\nit is set before targets in packaging are ran. [C:\\enlistments\\standard\\src\\netstandard\\pkg\\NETStandard.Library.pkgproj]\r\n```\r\n\r\nsetting stableversion skips this task ApplyPreReleaseSuffix. we don't want to apply any suffix in release build.\r\n\r\nwe are applying this prefix to the dependencies of the package(GetNuGetPackageDependencies), but as its just a transport package, it should not matter. I was not able to find a good way to tackle this.\r\n\r\n@ericstj any suggestions will be welcomed.","Url":"https://github.com/dotnet/standard/pull/1536","RelatedDescription":"Closed or merged PR \"Setting version suffix as non empty for building release package versions\" (#1536)"},{"Id":"492776720","IsPullRequest":true,"CreatedAt":"2019-09-12T13:25:04","Actor":"dotnet-maestro[bot]","Number":"1540","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190911.13\r\n- **Date Produced**: 9/12/2019 3:32 AM\r\n- **Commit**: 144ebb6ff997bf7a777206a233cdd8c03e13f60c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19461.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19461.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19461.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1540","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1540)"},{"Id":"492776601","IsPullRequest":true,"CreatedAt":"2019-09-12T12:44:23","Actor":"dotnet-maestro[bot]","Number":"1539","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190911.10\r\n- **Date Produced**: 9/11/2019 11:00 PM\r\n- **Commit**: e32d9a2664a59eccbcbe5a4044cffbdd96538b5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19461.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19461.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19461.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1539","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1539)"},{"Id":"492775521","IsPullRequest":true,"CreatedAt":"2019-09-12T12:42:08","Actor":"dotnet-maestro[bot]","Number":"1538","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1538","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1538)"},{"Id":"492761054","IsPullRequest":true,"CreatedAt":"2019-09-12T12:11:42","Actor":"dotnet-maestro[bot]","Number":"1537","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1537)"},{"Id":"492206044","IsPullRequest":true,"CreatedAt":"2019-09-11T12:37:02","Actor":"dotnet-maestro[bot]","Number":"1535","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190910.22\r\n- **Date Produced**: 9/11/2019 5:14 AM\r\n- **Commit**: 67fd971d57f9779c7acffc6d87934e311d968fa8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19460.22\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19460.22\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19460.22\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1535","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1535)"},{"Id":"492205909","IsPullRequest":true,"CreatedAt":"2019-09-11T12:36:47","Actor":"dotnet-maestro[bot]","Number":"1534","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190910.21\r\n- **Date Produced**: 9/11/2019 4:14 AM\r\n- **Commit**: ee9995f31b684a0c6e5488eceb2500bf0057da89\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19460.21\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19460.21\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19460.21\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1534","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1534)"},{"Id":"492194129","IsPullRequest":true,"CreatedAt":"2019-09-11T12:11:46","Actor":"dotnet-maestro[bot]","Number":"1533","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1533","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1533)"},{"Id":"491861134","IsPullRequest":true,"CreatedAt":"2019-09-10T21:24:12","Actor":"dotnet-maestro[bot]","Number":"1532","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1532","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1532)"},{"Id":"491641888","IsPullRequest":true,"CreatedAt":"2019-09-10T19:39:48","Actor":"dotnet-maestro[bot]","Number":"1529","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190909.10\r\n- **Date Produced**: 9/10/2019 12:07 AM\r\n- **Commit**: f5ccfdcbd828383d39cf583086ef42d72ca5b320\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19459.10\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1529","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1529)"},{"Id":"491643342","IsPullRequest":true,"CreatedAt":"2019-09-10T12:42:44","Actor":"dotnet-maestro[bot]","Number":"1531","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190910.1\r\n- **Date Produced**: 9/10/2019 9:41 AM\r\n- **Commit**: 1f43072465d4be9920ab04a3c3ad91f82144de4e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19460.1\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19460.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19460.1\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1531","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1531)"},{"Id":"491643232","IsPullRequest":true,"CreatedAt":"2019-09-10T12:42:30","Actor":"dotnet-maestro[bot]","Number":"1530","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190909.14\r\n- **Date Produced**: 9/10/2019 8:08 AM\r\n- **Commit**: ca890ed4eceb71c0a78d63e8e030497a1b613b80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19459.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19459.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19459.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1530","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1530)"},{"Id":"491628840","IsPullRequest":true,"CreatedAt":"2019-09-10T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1528","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190909.10\r\n- **Date Produced**: 9/10/2019 12:07 AM\r\n- **Commit**: f5ccfdcbd828383d39cf583086ef42d72ca5b320\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19459.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19459.10\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1528","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1528)"},{"Id":"491269859","IsPullRequest":false,"CreatedAt":"2019-09-09T19:01:31","Actor":"saucecontrol","Number":"1527","RawContent":null,"Title":"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs","State":"open","Body":"This was reported in https://github.com/dotnet/standard/issues/666 but the issue was closed since the underlying problem had been resolved for 2.1 dev builds.  However, the latest available 2.0 package on NuGet [(version 2.0.3)](https://www.nuget.org/packages/NETStandard.Library/2.0.3) still has a malformed netstandard.xml.  Is it possible to get an updated 2.0 package published with corrected docs?","Url":"https://github.com/dotnet/standard/issues/1527","RelatedDescription":"Open issue \"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs\" (#1527)"},{"Id":"491139057","IsPullRequest":true,"CreatedAt":"2019-09-09T14:40:22","Actor":"yousiftouma","Number":"1526","RawContent":null,"Title":"Add ImageConverter to System.Drawing","State":"open","Body":"Not sure exactly what is needed for this to work, but happy to help doing it. Drawing inspiration from https://github.com/dotnet/standard/pull/803\r\n\r\nDoes Image need to be added as well? It seems to be available https://apisof.net/catalog/System.Drawing.Image","Url":"https://github.com/dotnet/standard/pull/1526","RelatedDescription":"Open PR \"Add ImageConverter to System.Drawing\" (#1526)"},{"Id":"491067571","IsPullRequest":true,"CreatedAt":"2019-09-09T12:47:20","Actor":"dotnet-maestro[bot]","Number":"1525","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.3\r\n- **Date Produced**: 9/8/2019 5:06 PM\r\n- **Commit**: 173d70b99a5dbb3ff9298a6e2e9c7f7e7b56dd7c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19458.3\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1525","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1525)"},{"Id":"491067426","IsPullRequest":true,"CreatedAt":"2019-09-09T12:47:06","Actor":"dotnet-maestro[bot]","Number":"1524","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1524","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1524)"},{"Id":"491053506","IsPullRequest":true,"CreatedAt":"2019-09-09T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1523","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1523","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1523)"},{"Id":"490758231","IsPullRequest":false,"CreatedAt":"2019-09-08T14:02:47","Actor":"virzak","Number":"1522","RawContent":null,"Title":"MemoryMarshal.AsRef is missing","State":"open","Body":"AsRef [exists](https://github.com/dotnet/corefx/blob/838832e2ecac9f81b5a5649bfac2fc835db76c1e/src/System.Memory/ref/System.Memory.cs#L618) in .NET Core, but not in .NET Standard.\r\n\r\nPreviously mentioned it [here](https://github.com/dotnet/standard/pull/1198#issuecomment-528371887)\r\n\r\nEdit: Could this be added to .NET Standard 2.1? Seems like a very small and safe fix.","Url":"https://github.com/dotnet/standard/issues/1522","RelatedDescription":"Open issue \"MemoryMarshal.AsRef is missing\" (#1522)"},{"Id":"490748507","IsPullRequest":true,"CreatedAt":"2019-09-08T12:40:24","Actor":"dotnet-maestro[bot]","Number":"1521","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.8\r\n- **Date Produced**: 9/7/2019 8:22 PM\r\n- **Commit**: 43b591a90ffff5885a6509e4bb1508f49e174af6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19457.8\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19457.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19457.8\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1521","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1521)"},{"Id":"490748485","IsPullRequest":true,"CreatedAt":"2019-09-08T12:40:09","Actor":"dotnet-maestro[bot]","Number":"1520","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.6\r\n- **Date Produced**: 9/7/2019 5:26 PM\r\n- **Commit**: 59c6b1ab96aa2e99ed6ecb33a8bcf9283ce1ea27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19457.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19457.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19457.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1520","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1520)"},{"Id":"490745778","IsPullRequest":true,"CreatedAt":"2019-09-08T12:12:00","Actor":"dotnet-maestro[bot]","Number":"1519","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:52 PM\r\n- **Commit**: c27945fc559ee636139d9f460db71242b16483e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19457.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1519","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1519)"},{"Id":"490630353","IsPullRequest":true,"CreatedAt":"2019-09-07T12:41:05","Actor":"dotnet-maestro[bot]","Number":"1518","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.2\r\n- **Date Produced**: 9/7/2019 11:01 AM\r\n- **Commit**: aabbc368fe4351c78d97d1fcaf79238a3db285bc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19457.2\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19457.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19457.2\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1518","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1518)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"493684533","IsPullRequest":true,"CreatedAt":"2019-09-15T04:07:39","Actor":"Dotnet-GitSync-Bot","Number":"41114","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/41114","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#41114)"},{"Id":"493686713","IsPullRequest":false,"CreatedAt":"2019-09-15T03:48:54","Actor":"XuVeeKan","Number":"41115","RawContent":null,"Title":"C#如何使用Microsoft.AspNetCore.SignalR.Client连接Hub","State":"closed","Body":"严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tCS1061\t'“HubConnectionBuilder”未包含“WithUrl”的定义，并且找不到可接受第一个“HubConnectionBuilder”类型参数的可访问扩展方法“WithUrl”(是否缺少 using 指令或程序集引用?)\tWindowsFormsApp1\tC:\\Users\\XWJ\\source\\repos\\WindowsFormsApp1\\WindowsFormsApp1\\Form1.cs\t23\t活动的\r\n","Url":"https://github.com/dotnet/corefx/issues/41115","RelatedDescription":"Closed issue \"C#如何使用Microsoft.AspNetCore.SignalR.Client连接Hub\" (#41115)"},{"Id":"493680213","IsPullRequest":false,"CreatedAt":"2019-09-15T00:28:38","Actor":"RealDotNetDave","Number":"41113","RawContent":null,"Title":"StringBuilder Perf Issue In .NET Core","State":"open","Body":"I have found in my benchmark tests, that the performance of StringBuilder in .NET Core 2.2 and 3 is less performant than in .NET 4.8.\r\n\r\nIf string.Concat() uses StringBuilder, that is less performant too.\r\n\r\nResults below:\r\n![image](https://user-images.githubusercontent.com/15676130/64915134-e1419480-d714-11e9-8cf0-104a09efa963.png)\r\n\r\nBenchmark project located here: https://github.com/RealDotNetDave/dotNetTips.Benchmark.App","Url":"https://github.com/dotnet/corefx/issues/41113","RelatedDescription":"Open issue \"StringBuilder Perf Issue In .NET Core\" (#41113)"},{"Id":"493679647","IsPullRequest":false,"CreatedAt":"2019-09-15T00:18:18","Actor":"RealDotNetDave","Number":"41112","RawContent":null,"Title":"String.Equals() and == Perf Issue in .NET Core","State":"open","Body":"I have found a perf issue when comparing strings with Equals() and == in .NET Core. When compared to .NET 4.8, Core 2.2 is less performant and Core 3 is even slightly less performant than 2.2.\r\n\r\n![image](https://user-images.githubusercontent.com/15676130/64915097-33ce8100-d714-11e9-9d2f-b73eeb4f05e1.png)\r\n\r\nExamples:\r\n```\r\ntestWord1.Equals(this.testWord2)\r\ntestWord1 == testWord2\r\n```\r\n\r\nBenchmark project located here: https://github.com/RealDotNetDave/dotNetTips.Benchmark.App\r\n","Url":"https://github.com/dotnet/corefx/issues/41112","RelatedDescription":"Open issue \"String.Equals() and == Perf Issue in .NET Core\" (#41112)"},{"Id":"493669711","IsPullRequest":true,"CreatedAt":"2019-09-14T21:45:13","Actor":"stephentoub","Number":"41111","RawContent":null,"Title":"Remove System.Net.Requests dependency from System.Private.Xml","State":"open","Body":"Anything that uses System.Xml ends up implicitly referencing this System.Net.Requests.dll, which in a trimmed default MVC app is 97K (plus, System.Net.Requests.dll in turn references a whole bunch of stuff that's otherwise unused).  The only thing it's used for is as part of XmlResolver to download the specified url.  We can instead remove the usage of WebRequest.Create and replace it with usage of HttpClient, which is already brought in because System.Net.Requests uses it to implement HttpWebRequest.\r\n\r\n@krwq, @buyaa-n, there are two breaking changes here (which is also why I've temporarily marked this as no-merge, until we can discuss it appropriately):\r\n- Previously you could have specified a url with a scheme other than file, http, or https, and it may have worked.  To my knowledge the only other scheme that had built-in support was ftp, but you could also use WebRequest.RegisterPrefix to register a custom scheme handler, and then it seems that this XmlDownloadManager would have been able to use it.  How important is it to keep this functionality?  Have you ever seen or heard of someone using it with XmlResolver?\r\n- Because we're now using HttpClient instead of HttpWebRequest, download failures that would have previously thrown WebException will now throw HttpRequestException.  How do we feel about that?  If you think it'll be impactful, we could push System.Net.WebException down to a lower-assembly, like System.Net.Primitives, but that'd be a bit unfortunate.\r\n\r\ncc: @jkotas, @davidsh, @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/41111","RelatedDescription":"Open PR \"Remove System.Net.Requests dependency from System.Private.Xml\" (#41111)"},{"Id":"493666490","IsPullRequest":true,"CreatedAt":"2019-09-14T21:03:20","Actor":"stephentoub","Number":"41110","RawContent":null,"Title":"Remove System.Net.Http dependency on System.Text.RegularExpressions","State":"open","Body":"This dependency is the only reason we end up with a 105K System.Text.RegularExpressions.dll as part of a trimmed new MVC app.  Regex is used in the case where on Windows a bypass list is provided, in which case each item in the list is changed into a regex, which is then evaluated against each url provided to SocketsHttpHandler.  But the patterns usable are simple: the only special character recognized is an asterisk, which can map to zero or more of any character.  So, we can instead employ a simple processor for such patterns, which then eliminates the need to reference System.Text.RegularExpressions.dll from System.Net.Http.dll.  It also happens to be faster.\r\n\r\ncc: @ViktorHofer, @jkotas, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/41110","RelatedDescription":"Open PR \"Remove System.Net.Http dependency on System.Text.RegularExpressions\" (#41110)"},{"Id":"493636527","IsPullRequest":true,"CreatedAt":"2019-09-14T15:50:31","Actor":"davidsh","Number":"41109","RawContent":null,"Title":"Disable NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds","State":"closed","Body":"The remote server \"revoked.badssl.com\" has a certificate which is not only revoked but also\r\nnow untrusted since it has expired.\r\n\r\nDisabling test for now\r\n\r\nContributes to #41108","Url":"https://github.com/dotnet/corefx/pull/41109","RelatedDescription":"Closed or merged PR \"Disable NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds\" (#41109)"},{"Id":"493635728","IsPullRequest":false,"CreatedAt":"2019-09-14T15:37:59","Actor":"davidsh","Number":"41108","RawContent":null,"Title":"HttpClient NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds failing","State":"open","Body":"The remote server \"revoked.badssl.com\" has a certificate which is not only revoked but also now untrusted since it has expired.\r\n\r\n![image](https://user-images.githubusercontent.com/7684835/64910388-bfbbbb00-d6ca-11e9-8654-127a101558e0.png)\r\n\r\nWill disable the test for now.","Url":"https://github.com/dotnet/corefx/issues/41108","RelatedDescription":"Open issue \"HttpClient NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds failing\" (#41108)"},{"Id":"493624258","IsPullRequest":true,"CreatedAt":"2019-09-14T14:48:17","Actor":"dotnet-maestro[bot]","Number":"41106","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.6\r\n- **Date Produced**: 9/13/2019 4:20 PM\r\n- **Commit**: 9042fe6c81aa3b47f58ccd94ff02e42f9f7a4e46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19463.6\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19463.6\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190913.7\r\n- **Date Produced**: 9/14/2019 3:54 AM\r\n- **Commit**: f07730eedb1f7e2cb5e178d988bc2255f7ce7021\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19463.7\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19463.7\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190913.2\r\n- **Date Produced**: 9/13/2019 12:49 PM\r\n- **Commit**: 359e090799a32d167a51390cf3f4ce3ad875f227\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19463.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41106","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#41106)"},{"Id":"493625480","IsPullRequest":false,"CreatedAt":"2019-09-14T13:56:57","Actor":"HughPH","Number":"41107","RawContent":null,"Title":"JsonSerializer.Deserialize<T> can't work out my array of dictionaries","State":"open","Body":"My class is designed to get the items from an Amazon DynamoDB query so that they can be converted to T with a class that implements IEnumerable<T>\r\n\r\n```csharp\r\n    public class DynamoQueryResult<T> where T : class, new()\r\n    {\r\n        public int Count;\r\n        public Dictionary<string, DynamoValue>[] Items;\r\n    }\r\n```\r\n\r\nNewtonsoft can deserialize into this class with no difficulty at all, but JsonSerializer.Deserialize just leaves the array null.\r\n\r\nExample json:\r\n\r\n```json\r\n{\r\n  \"ConsumedCapacity\": {\r\n    \"CapacityUnits\": 1,\r\n    \"TableName\": \"Reply\"\r\n  },\r\n  \"Count\": 2,\r\n  \"Items\": [\r\n    {\r\n      \"ReplyDateTime\": {\"S\": \"2015-02-18T20:27:36.165Z\"},\r\n      \"PostedBy\": {\"S\": \"User A\"},\r\n      \"Id\": {\"S\": \"Amazon DynamoDB#DynamoDB Thread 1\"}\r\n    },\r\n    {\r\n      \"ReplyDateTime\": {\"S\": \"2015-02-25T20:27:36.165Z\"},\r\n      \"PostedBy\": {\"S\": \"User B\"},\r\n      \"Id\": {\"S\": \"Amazon DynamoDB#DynamoDB Thread 1\"}\r\n    }\r\n  ],\r\n  \"ScannedCount\": 2\r\n}\r\n```\r\n\r\nDon't blame me for the insane JSON, blame Amazon. This example is lifted directly out of their DynamoDB documentation (and therefore forms part of my unit tests)\r\n\r\nChanging from ```Dictionary<string, DynamoValue>[]``` to ```ExpandoObject[]``` also didn't help, and now I feel dirty.","Url":"https://github.com/dotnet/corefx/issues/41107","RelatedDescription":"Open issue \"JsonSerializer.Deserialize<T> can't work out my array of dictionaries\" (#41107)"},{"Id":"493616046","IsPullRequest":true,"CreatedAt":"2019-09-14T13:41:24","Actor":"dotnet-maestro[bot]","Number":"41103","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19463.3\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19463.3\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19463.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41103","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#41103)"},{"Id":"493617282","IsPullRequest":true,"CreatedAt":"2019-09-14T13:32:58","Actor":"dotnet-maestro[bot]","Number":"41104","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190913.2\r\n- **Date Produced**: 9/14/2019 12:52 AM\r\n- **Commit**: bce868f1ce96200f727784f1b855afb8a69513a3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19463.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19463.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19463.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41104","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#41104)"},{"Id":"493623299","IsPullRequest":false,"CreatedAt":"2019-09-14T13:30:34","Actor":"HughPH","Number":"41105","RawContent":null,"Title":"JsonSerializer.Deserialize<T> cannot deserialize into custom IEnumerable","State":"open","Body":"My class is designed to get the items from an Amazon DynamoDB query and convert them to T through the magic of the Enumerator:\r\n\r\n```csharp\r\n    public class DynamoQueryResult<T> : IEnumerable<T> where T : class, new()\r\n    {\r\n        public int Count;\r\n        public Dictionary<string, DynamoValue>[] Items;\r\n        public IEnumerator<T> GetEnumerator()\r\n        {\r\n            return new DynamoQueryResultEnumerator<T>(this);\r\n        }\r\n\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            return new DynamoQueryResultEnumerator<T>(this);\r\n        }\r\n    }\r\n```\r\n\r\nJson Deserializers detect IEnumerable and expect the JSON at that level to therefore be a set (where this class represents a complex object containing both set metadata and set members). I can override that behaviour with Newtonsoft by adding the [JsonObject] attribute to the object and it does the job perfectly - and Newtonsoft's exception message gives a load of help which leads to this. I can't find a way to do the same for System.Text.Json. Also, really descriptive exception messages that guide the developer are one of my favourite things to create and see.\r\n\r\n(Changing to an IReadOnlyCollection<T> doesn't help, but ReadOnly IEnumerables could be a way to 'hint' that they're not meant to be deserialized into?)\r\n\r\n1. I know there is a big library of junk for dealing with Amazon stuff. That is not the answer I'm looking for - it's likely to just add delay and potentially more questions. This is a working _example_ of where this falls over.\r\n2. In the immediate term, I'm likely to just create a customised collection to replace the array of dictionaries, but it would be cool if I could just convince the deserializer to fill the object.","Url":"https://github.com/dotnet/corefx/issues/41105","RelatedDescription":"Open issue \"JsonSerializer.Deserialize<T> cannot deserialize into custom IEnumerable\" (#41105)"},{"Id":"493603110","IsPullRequest":false,"CreatedAt":"2019-09-14T09:15:58","Actor":"EdiWang","Number":"41102","RawContent":null,"Title":"NotSupportedException when Deserializing object that has default values for constructor parameters","State":"open","Body":"The following code throws exception. \r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    var obj = new Response(true, \"Hi\") { ResponseCode = 100 };\r\n    var json = System.Text.Json.JsonSerializer.Serialize(obj);\r\n\r\n    // System.NotSupportedException: 'Deserialization of reference types without parameterless constructor is not supported.\r\n    var response = System.Text.Json.JsonSerializer.Deserialize<Response>(json);\r\n\r\n    Console.WriteLine(response.Message);\r\n}\r\n\r\npublic class Response\r\n{\r\n    public bool IsSuccess { get; set; }\r\n\r\n    public string Message { get; set; }\r\n\r\n    public int ResponseCode { get; set; }\r\n\r\n    public Response(bool isSuccess = false, string message = \"\")\r\n    {\r\n        IsSuccess = isSuccess;\r\n        Message = message;\r\n    }\r\n}\r\n```\r\n\r\nResponse class is considered not having a parameterless constructor, but actually it does use default values for parameters, that can be used just like a parameterless constructor, like this:\r\n\r\n```csharp\r\nvar test = new Response();\r\n```\r\n\r\nCould the new JSON API check if the constructor parameters have default values before consider it not paremeterless?\r\n\r\nRelated Issues: \r\nhttps://github.com/dotnet/corefx/issues/37537\r\n\r\nPR:\r\nhttps://github.com/dotnet/corefx/pull/38061","Url":"https://github.com/dotnet/corefx/issues/41102","RelatedDescription":"Open issue \"NotSupportedException when Deserializing object that has default values for constructor parameters\" (#41102)"},{"Id":"493565586","IsPullRequest":true,"CreatedAt":"2019-09-14T02:30:38","Actor":"stephentoub","Number":"41101","RawContent":null,"Title":"Remove unnecessary passing of RegexOptions.None to Regex ctor","State":"closed","Body":"Doing so has no benefit and inhibits the benefits of the changes in https://github.com/dotnet/corefx/pull/41075.\r\n\r\ncc: @krwq, @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/41101","RelatedDescription":"Closed or merged PR \"Remove unnecessary passing of RegexOptions.None to Regex ctor\" (#41101)"},{"Id":"493552281","IsPullRequest":false,"CreatedAt":"2019-09-13T23:29:55","Actor":"hugener","Number":"41100","RawContent":null,"Title":"Why not write more than 1 byte to the buffer and that way reduce the number of calls to Next/InternalSample in System.Random.NextBytes?","State":"open","Body":"I noticed in another issue that the implementation of NextBytes should not be changed (https://github.com/dotnet/corefx/issues/22356#issuecomment-325815511) and I don't know how good the distribution would be.\r\nBut it seem like the number of calls to Next/InternalSample could be reduced by 4 (best case), if using all 4 bytes in the int returned by Next/InternalSample. Would there be arguments against that?\r\n\r\nhttps://github.com/dotnet/corefx/blob/d58a51f911efb3c98beca21b6cf08cc703424fdf/src/Common/src/CoreLib/System/Random.cs#L253-L259\r\nhttps://github.com/dotnet/corefx/blob/d58a51f911efb3c98beca21b6cf08cc703424fdf/src/Common/src/CoreLib/System/Random.cs#L244-L251","Url":"https://github.com/dotnet/corefx/issues/41100","RelatedDescription":"Open issue \"Why not write more than 1 byte to the buffer and that way reduce the number of calls to Next/InternalSample in System.Random.NextBytes?\" (#41100)"},{"Id":"493528051","IsPullRequest":true,"CreatedAt":"2019-09-13T21:42:42","Actor":"carlossanlop","Number":"41099","RawContent":null,"Title":"FileSecurity/DirectorySecurity should support long paths","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/29275\r\n\r\nOriginal PR branch got in a weird state so I am submitting again: https://github.com/dotnet/corefx/pull/40921\r\n\r\nFileSecurity fails to read permissions from file that have a path length exceeding 259 characters. I discovered that `DirectorySecurity` has the same issue.\r\n\r\nChanges in this PR:\r\n\r\n- Removed unused `fullPath` string that was being created inside the `FileSecurity` and `DirectorySecurity` constructors that receive a `fileName` string.\r\n\r\n- Parent class `NativeObjectSecurity` in `System.Security.AccessControl` throws unhandled `ERROR_PATH_NOT_FOUND` if the file does not exist. Which is weird because we already handle `ERROR_FILE_NOT_FOUND`. SO I added this error to this other existing `else`, so that we keep throwing the same exception.\r\n\r\n- Added unit tests for the `FileSecurity` and `DirectorySecurity` constructors that accept a long filename string.\r\n\r\n- The `FileSecurity` class had an internal constructor with an unused parameter `fullPath` and a warning about that unused parameter. Removed unused parameter along with the unnecessary warning comment. Made sure to update the only internal usage of that constructor so it uses the new signature.\r\n\r\n- `FileSecurity` and `DirectorySecurity` seem to only be available for Windows, but the documentation is not clear about this restriction. I can add a comment indicating that these classes are exclusive for Windows.\r\n\r\n- Renamed internal `FileSystemSecurity` constructor's parameter `name` to `fileName` for clarity.\r\n","Url":"https://github.com/dotnet/corefx/pull/41099","RelatedDescription":"Open PR \"FileSecurity/DirectorySecurity should support long paths\" (#41099)"},{"Id":"493418111","IsPullRequest":false,"CreatedAt":"2019-09-13T20:20:57","Actor":"nettolicious","Number":"41091","RawContent":null,"Title":"Reading HttpResponseMessage.Content.Headers.ContentLength allocates ContentLength memory even with HEAD request","State":"closed","Body":"This is dotnet core 2.2, using the default IHttpClientFactory. Making a HEAD request to check size of  a file to download. Accessing the Content.Headers.ContentLength property of the HttpResponseMessage causes memory to be allocated equal to the value of ContentLength.\r\n![MemoryAllocation](https://user-images.githubusercontent.com/37562625/64879079-59736180-d612-11e9-82a1-56142915f0f0.jpg)\r\n","Url":"https://github.com/dotnet/corefx/issues/41091","RelatedDescription":"Closed issue \"Reading HttpResponseMessage.Content.Headers.ContentLength allocates ContentLength memory even with HEAD request\" (#41091)"},{"Id":"493294901","IsPullRequest":true,"CreatedAt":"2019-09-13T19:53:32","Actor":"dotnet-maestro[bot]","Number":"41089","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190912.7\r\n- **Date Produced**: 9/13/2019 2:19 AM\r\n- **Commit**: 9c8ba7773e506db05016f1c278a7a1ea27816dbf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19462.7\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19462.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19462.7\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#41089)"},{"Id":"493486718","IsPullRequest":true,"CreatedAt":"2019-09-13T19:39:21","Actor":"steveharter","Number":"41098","RawContent":null,"Title":"Serialization performance improvements","State":"open","Body":"Serialization improvements from 15%-28% on existing benchmarks (for simple objects).\r\n\r\nChanges in order of most impact to lesser impact:\r\n- Use `[AggressiveInlining]` when processing property values. Required some misc refactoring so that the methods inlined are only called once (instead of twice).\r\n- Using an array instead of Dictionay enumerator to obtain properties to serialize.\r\n- Changing a property to a field (struct for `JsonEncodedTest`) to avoid a copy on read.\r\n- Removing unused return values and misc cleanup.\r\n\r\n**WriteJson benchmarks**\r\n\r\n| Faster                                                                           | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n|----------------------------------------------------------------------------------|----------:|-----------------:|-----------------:|--------:| \r\n| System.Text.Json.Serialization.Tests.WriteJson<Location>.SerializeToUtf8Bytes    |      1.41 |          1328.46 |           944.13 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<LoginViewModel>.SerializeToString |      1.40 |           592.57 |           422.00 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<LoginViewModel>.SerializeToUtf8By |      1.40 |           547.15 |           389.85 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<Location>.SerializeToString       |      1.36 |          1372.30 |          1006.11 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<LoginViewModel>.SerializeToStream |      1.36 |           653.96 |           480.28 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<Location>.SerializeToStream       |      1.35 |          1435.65 |          1061.99 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<IndexViewModel>.SerializeToUtf8By |      1.29 |         35629.31 |         27513.08 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<IndexViewModel>.SerializeToStream |      1.27 |         34489.63 |         27073.81 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<IndexViewModel>.SerializeToString |      1.26 |         36860.43 |         29178.57 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<MyEventsListerViewModel>.Serializ |      1.20 |        614502.43 |        513175.55 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<MyEventsListerViewModel>.Serializ |      1.19 |        618552.11 |        518655.83 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson<MyEventsListerViewModel>.Serializ |      1.19 |        663942.62 |        559237.31 |         |\r\n\r\n\r\n**Comparisons to Json.NET**\r\n\r\nMyEventsListerViewModel Before\r\n\r\n|         Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|---------:|---------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 782.3 us | 2.066 us | 1.933 us | 781.6 us | 779.2 us | 785.3 us |     94.6372 |     47.3186 |     47.3186 |           565.39 KB |\r\n| SystemTextJson | 664.6 us | 4.227 us | 3.954 us | 664.6 us | 658.5 us | 673.5 us |     45.0928 |     45.0928 |     45.0928 |           381.33 KB |\r\n\r\nMyEventsListerViewModel After\r\n\r\n|         Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 787.8 us |  2.807 us |  2.488 us | 786.9 us | 784.9 us | 793.4 us |     94.9367 |     47.4684 |     47.4684 |           564.91 KB |\r\n| SystemTextJson | 574.4 us | 13.518 us | 15.567 us | 568.1 us | 558.8 us | 608.1 us |     45.9770 |     45.9770 |     45.9770 |           380.87 KB |\r\n\r\nIndexViewModel Before\r\n\r\n|         Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 40.50 us | 0.1701 us | 0.1591 us | 40.48 us | 40.26 us | 40.84 us |      9.6556 |      1.6093 |           - |            59.33 KB |\r\n| SystemTextJson | 36.95 us | 0.1801 us | 0.1597 us | 36.90 us | 36.72 us | 37.32 us |      3.9677 |      0.2939 |           - |            25.13 KB |\r\n\r\nIndexViewModel After\r\n\r\n|         Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 40.03 us | 0.1336 us | 0.1249 us | 40.00 us | 39.88 us | 40.27 us |      9.5602 |      1.5934 |           - |            59.33 KB |\r\n| SystemTextJson | 27.48 us | 0.1451 us | 0.1211 us | 27.46 us | 27.34 us | 27.79 us |      3.9739 |      0.3312 |           - |            25.01 KB |\r\n\r\nLocation Before\r\n\r\n|         Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 1.439 us | 0.0032 us | 0.0028 us | 1.439 us | 1.434 us | 1.443 us |      0.2758 |           - |           - |              1736 B |\r\n| SystemTextJson | 1.370 us | 0.0038 us | 0.0034 us | 1.370 us | 1.366 us | 1.375 us |      0.0930 |           - |           - |               584 B |\r\n\r\nLocation After\r\n\r\n|         Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 1.429 us | 0.0077 us | 0.0069 us | 1.427 us | 1.422 us | 1.445 us |      0.2724 |           - |           - |              1736 B |\r\n| SystemTextJson | 1.007 us | 0.0029 us | 0.0026 us | 1.006 us | 1.002 us | 1.011 us |      0.0924 |           - |           - |               584 B |\r\n\r\nLoginViewModel Before\r\n\r\n|         Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|---------:|---------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 696.4 ns | 3.961 ns | 3.511 ns | 695.3 ns | 692.5 ns | 703.4 ns |      0.2375 |           - |           - |              1504 B |\r\n| SystemTextJson | 599.8 ns | 1.602 ns | 1.420 ns | 599.6 ns | 597.6 ns | 603.2 ns |      0.0527 |           - |           - |               344 B |\r\n\r\nLoginViewModel After\r\n\r\n|         Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|--------------- |---------:|---------:|---------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|       JSON.NET | 665.9 ns | 3.070 ns | 2.722 ns | 665.3 ns | 661.1 ns | 670.1 ns |      0.2391 |           - |           - |              1504 B |\r\n| SystemTextJson | 434.6 ns | 1.487 ns | 1.318 ns | 434.6 ns | 432.6 ns | 436.6 ns |      0.0539 |           - |           - |               344 B |\r\n","Url":"https://github.com/dotnet/corefx/pull/41098","RelatedDescription":"Open PR \"Serialization performance improvements\" (#41098)"},{"Id":"493479665","IsPullRequest":false,"CreatedAt":"2019-09-13T19:19:24","Actor":"pranavkm","Number":"41097","RawContent":null,"Title":"JsonSerializer.Deserialize results in a null ref when attempting to deserialize open generic Nullable<>","State":"open","Body":"Not a useful scenario by any means, but the exception message could be better:\r\n\r\n```C#\r\nvar type = typeof(Nullable<>);\r\nJsonSerializer.Deserialize(\"1\", type);\r\n\r\nUnhandled exception. System.ArgumentNullException: Value cannot be null. (Parameter 'key')\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.ThrowKeyNullException()\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at System.Text.Json.JsonSerializerOptions.GetConverter(Type typeToConvert)\r\n   at System.Text.Json.JsonClassInfo.GetClassType(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.Deserialize(String json, Type returnType, JsonSerializerOptions options)\r\n```","Url":"https://github.com/dotnet/corefx/issues/41097","RelatedDescription":"Open issue \"JsonSerializer.Deserialize results in a null ref when attempting to deserialize open generic Nullable<>\" (#41097)"},{"Id":"493468915","IsPullRequest":false,"CreatedAt":"2019-09-13T18:51:14","Actor":"caihongxu","Number":"41096","RawContent":null,"Title":"Allows JsonStringEnumConverter.CreateConverter to specify a default enum value","State":"open","Body":"that allows parsing unrecognized strings/numbers into a specified default enum value. Currently if unrecognized strings/numbers are encountered an exception is thrown.","Url":"https://github.com/dotnet/corefx/issues/41096","RelatedDescription":"Open issue \"Allows JsonStringEnumConverter.CreateConverter to specify a default enum value\" (#41096)"},{"Id":"493428125","IsPullRequest":false,"CreatedAt":"2019-09-13T17:02:20","Actor":"krwq","Number":"41095","RawContent":null,"Title":"SerialStream does not support cancellation on Windows","State":"open","Body":"Current Windows implementation does not respect cancellation but Unix implementation does.\r\n\r\nWe should consider doing similar effort for Windows.\r\n\r\ncc: @dquist\r\nCreated per: https://github.com/dotnet/corefx/issues/25154#issuecomment-531217979\r\n\r\nMarking as 5.0 to consider. Note that netfx also does not support cancellation there.","Url":"https://github.com/dotnet/corefx/issues/41095","RelatedDescription":"Open issue \"SerialStream does not support cancellation on Windows\" (#41095)"},{"Id":"493421135","IsPullRequest":false,"CreatedAt":"2019-09-13T16:44:16","Actor":"pranavkm","Number":"41093","RawContent":null,"Title":"[Url] attribute allows spaces","State":"open","Body":"_From @MythreyaK on Friday, September 13, 2019 10:01:50 AM_\r\n\r\n### Describe the bug\r\nThe [Url] attribute accepts URLs of the form `http://www.exam ple.com` and <br/> `http://example.com/foo bar`. From what I've read around, a URL shouldn't contain a literal space. Is this the expected behavior?\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '2.2.0' (from what I've seen in my solution 😅)\r\n2. Use the `[Url]` attribute *\r\n3. Try storing URLs such as `http://example.com/foo bar` or `http://www.exam ple.com`\r\n4. Fail to see a validation error \r\n\r\n<sub>* I'm currently using this is a personal project [here](github.com/MythreyaK/URL-Shortener) . I'm still learning, so please be gentle, do leave feedback, Thanks! 😁 </sub>\r\n\r\n### Expected behavior\r\nA validation error should be raised since a URL cannot contain a _literal_ space.  \r\n\r\n### Additional context\r\n<details>\r\n<summary> <code>dotnet --info</code> output (click to expand)</summary>\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.402\r\n Commit:    c7f2f96116\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.7\r\n  Commit:  b1e29ae826\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n</details>\r\n\r\n<hr/>\r\n\r\n- Content: [Model validation in ASP.NET Core MVC](https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-2.2#feedback)\r\n- Content Source: [aspnetcore/mvc/models/validation.md](https://github.com/aspnet/AspNetCore.Docs/blob/master/aspnetcore/mvc/models/validation.md)\r\n- Same issue was raised on the `.NET Core` docs page [here](https://github.com/aspnet/AspNetCore.Docs/issues/14283#issue-492998460)\r\n\r\n_Copied from original issue: aspnet/AspNetCore#13946_","Url":"https://github.com/dotnet/corefx/issues/41093","RelatedDescription":"Open issue \"[Url] attribute allows spaces\" (#41093)"},{"Id":"493419842","IsPullRequest":true,"CreatedAt":"2019-09-13T16:41:02","Actor":"buyaa-n","Number":"41092","RawContent":null,"Title":"Annotate System.Collections.Specialized for nullable","State":"open","Body":"Contributes to #40623\r\ncc: @dotnet/nullablefc","Url":"https://github.com/dotnet/corefx/pull/41092","RelatedDescription":"Open PR \"Annotate System.Collections.Specialized for nullable\" (#41092)"},{"Id":"493316407","IsPullRequest":true,"CreatedAt":"2019-09-13T14:09:05","Actor":"dotnet-maestro[bot]","Number":"41090","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190912.26\r\n- **Date Produced**: 9/13/2019 3:51 AM\r\n- **Commit**: 580567cedf08cbb182a2d8e93fd10e1029e30106\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19462.26\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19462.26\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19462.26\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190912.15\r\n- **Date Produced**: 9/13/2019 5:08 AM\r\n- **Commit**: 31a5bba0e79a5ae875f691d70ec3b9789691136d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19462.15\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19462.15\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190912.3\r\n- **Date Produced**: 9/12/2019 1:02 PM\r\n- **Commit**: 41409cc00210db660d38ad5098f45479e1526387\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19462.3\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41090","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#41090)"},{"Id":"493287418","IsPullRequest":true,"CreatedAt":"2019-09-13T13:06:40","Actor":"dotnet-maestro[bot]","Number":"41088","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19462.5\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19462.5\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19462.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41088","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#41088)"},{"Id":"493267016","IsPullRequest":true,"CreatedAt":"2019-09-13T11:07:28","Actor":"tmds","Number":"41087","RawContent":null,"Title":"SmtpClientTest.TestZeroTimeout: FailFast to get CI coredump","State":"open","Body":"To help debug https://github.com/dotnet/corefx/issues/40711\r\n\r\nCC @ViktorHofer @stephentoub @wfurt \r\n","Url":"https://github.com/dotnet/corefx/pull/41087","RelatedDescription":"Open PR \"SmtpClientTest.TestZeroTimeout: FailFast to get CI coredump\" (#41087)"},{"Id":"493237190","IsPullRequest":false,"CreatedAt":"2019-09-13T09:54:44","Actor":"ManickaP","Number":"41085","RawContent":null,"Title":"VS Code Debugging Instructions","State":"open","Body":"I used [these instructions](https://github.com/dotnet/corefx/blob/master/Documentation/debugging/unix-instructions.md) to set up VS Code for debugging corefx. However, the `dotnet` in the program path: `corefx/bin/testhost/netcoreapp-Linux-{Configuration}-{Architecture}` (adjusted to include `artifacts` as is current directory structure) failed for me with:\r\n```\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.0' was not found.\r\n  - The following frameworks were found:\r\n      5.0.0 at [/home/manicka/corefx/artifacts/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nThe 5.0.0 is a version of dotnet residing in `artifacts/bin/testhost/`, the 2.1.0 is in xunit console configuration in the test bin directory (`artifacts/bin/System.Net.NetworkInformation.Functional.Tests/netcoreapp-Debug/xunit.console.runtimeconfig.json`).\r\n\r\nI got it eventually running with using `dotnet` from `.dotnet/dotnet` directory and changing the xunit configuration to reflect its version.\r\n\r\nAnd I'm using Visual Studio Code with WSL2.\r\n\r\nI'm not sure if what I'm doing is right. If I'm not, please tell me how to do it right.\r\nI'll gladly update the documentation once it's clear what's the right set up.\r\n\r\nPinging: @ViktorHofer, @wtgodbe you're the last people editing this part of the doc.","Url":"https://github.com/dotnet/corefx/issues/41085","RelatedDescription":"Open issue \"VS Code Debugging Instructions\" (#41085)"},{"Id":"493425894","IsPullRequest":false,"CreatedAt":"2019-06-26T17:34:49","Actor":"wtgodbe","Number":"41094","RawContent":null,"Title":"Investigate effects of missing IBCData for System.Private.DataContractSerialization","State":"open","Body":"https://github.com/dotnet/core-setup/pull/6882/files#diff-dbeccf05edc7e819ff6a62d63a4f44eeL313\r\n\r\nInformation from PR:\r\n\r\n> It looks like starting with https://dev.azure.com/dnceng/internal/_build/results?buildId=231848, we stopped generating data for System.Private.DataContractSerialization. I don't really know why, but can only assume that it stopped being exercised by our training scenarios.\r\n\r\n> we should probably figure out what changed between 3.0.100-preview7-012505 and 3.0.100-preview7-012521 that would cause us to stop collecting for this assembly.\r\n\r\n> someone should go and figure out if this new behavior (System.Private.DataContractSerialization not being exercised during build/restore/run of dotnet) is intentional or not.\r\n\r\nCC @adiaaida @MichalStrehovsky @brianrob ","Url":"https://github.com/dotnet/corefx/issues/41094","RelatedDescription":"Open issue \"Investigate effects of missing IBCData for System.Private.DataContractSerialization\" (#41094)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"493678642","IsPullRequest":true,"CreatedAt":"2019-09-15T01:30:06","Actor":"dotnet-bot","Number":"38699","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38699","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38699)"},{"Id":"493664740","IsPullRequest":true,"CreatedAt":"2019-09-14T20:43:35","Actor":"sharwell","Number":"38698","RawContent":null,"Title":"Make sure the NuGet package download complete notification is not cancelled","State":"open","Body":"Cancelling the notification would result in a background task permanently appearing in the Task Status Center in Visual Studio.\r\n\r\n🔗 See https://developercommunity.visualstudio.com/content/problem/576978/%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%94%A8%E4%BA%8Enugetorg%E7%9A%84intellisense-index.html","Url":"https://github.com/dotnet/roslyn/pull/38698","RelatedDescription":"Open PR \"Make sure the NuGet package download complete notification is not cancelled\" (#38698)"},{"Id":"493662809","IsPullRequest":false,"CreatedAt":"2019-09-14T20:22:31","Actor":"spottedmahn","Number":"38697","RawContent":null,"Title":"Broken Links on Building Testing and Debugging Wiki Page","State":"open","Body":"On https://github.com/dotnet/roslyn/wiki/Building-Testing-and-Debugging the following links are broken:\r\n\r\n![image](https://user-images.githubusercontent.com/14079228/64913314-9e2ef380-d70b-11e9-8d9c-7f5d5a554008.png)\r\n\r\nHappy to submit a PR to fix but I don't know where they're supposed to point to 😀\r\n","Url":"https://github.com/dotnet/roslyn/issues/38697","RelatedDescription":"Open issue \"Broken Links on Building Testing and Debugging Wiki Page\" (#38697)"},{"Id":"493616666","IsPullRequest":true,"CreatedAt":"2019-09-14T12:09:07","Actor":"dotnet-maestro[bot]","Number":"38696","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38696","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#38696)"},{"Id":"493542123","IsPullRequest":true,"CreatedAt":"2019-09-14T00:30:06","Actor":"dotnet-bot","Number":"38691","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38691","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38691)"},{"Id":"493560087","IsPullRequest":true,"CreatedAt":"2019-09-14T00:20:50","Actor":"dibarbet","Number":"38695","RawContent":null,"Title":"Fix possible null ptr in brace completion if semantic model is not av…","State":"open","Body":"…ailable.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/982486","Url":"https://github.com/dotnet/roslyn/pull/38695","RelatedDescription":"Open PR \"Fix possible null ptr in brace completion if semantic model is not av…\" (#38695)"},{"Id":"493555598","IsPullRequest":false,"CreatedAt":"2019-09-13T23:50:37","Actor":"dibarbet","Number":"38694","RawContent":null,"Title":"Nullable annotation changes not considered top level edit","State":"open","Body":"**Version Used**: 16.4 P1 (29312.127 master)\r\n\r\n**Steps to Reproduce**:\r\nCreate two files in a .net core 3 project\r\nClass1.cs\r\n```cs\r\nnamespace ConsoleApp12\r\n{\r\n    class Class1\r\n    {\r\n        public static void SomeMethod(string someString)\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n```\r\nProgram.cs\r\n```cs\r\n#nullable enable\r\n\r\nnamespace ConsoleApp12\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string? someString = null;\r\n            Class1.SomeMethod(someString);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAdd `#nullable enable` to Class1.cs\r\nGo back to Program.cs and note that there is no warning on calling Class1.SomeMethod(someString) may be null.\r\n\r\nMake an edit to anywhere in Program.cs and note that the warning appears after the edit.\r\n\r\n**Expected Behavior**:\r\nThe warning should appear without needing to make an edit in Program.cs\r\n\r\nThrough debugging, it appears that the nullable edit is [not being considered a top level edit](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/DocumentState.cs,283).  Since the nullable annotation is trivia, `SyntaxTree.IsEquivalentTo` is returning that the trees are equivalent.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38694","RelatedDescription":"Open issue \"Nullable annotation changes not considered top level edit\" (#38694)"},{"Id":"493555499","IsPullRequest":true,"CreatedAt":"2019-09-13T23:49:51","Actor":"gafter","Number":"38693","RawContent":null,"Title":"Use SHA256 (default source hash) for hashing privateimplementationdefails and MVID","State":"open","Body":"Satoshi would be proud.\r\nFixes #24737\r\n","Url":"https://github.com/dotnet/roslyn/pull/38693","RelatedDescription":"Open PR \"Use SHA256 (default source hash) for hashing privateimplementationdefails and MVID\" (#38693)"},{"Id":"493553411","IsPullRequest":true,"CreatedAt":"2019-09-13T23:36:35","Actor":"jcagme","Number":"38692","RawContent":null,"Title":"Workaround to unblock builds","State":"open","Body":"Currently we cannot publish assets from a build in devdiv to a feed in dnceng. We need this change to unblock builds while https://github.com/dotnet/arcade/issues/3942 is fixed and publish to blob feeds in the meanwhile.","Url":"https://github.com/dotnet/roslyn/pull/38692","RelatedDescription":"Open PR \"Workaround to unblock builds\" (#38692)"},{"Id":"493535885","IsPullRequest":true,"CreatedAt":"2019-09-13T22:11:11","Actor":"jasonmalinowski","Number":"38690","RawContent":null,"Title":"Add a very simple ISourceGenerator API","State":"open","Body":"This defines a first prototype API surface area for us to try building on. This PR isn't necessarily to collect feedback as much as so @angocke and @chsienki can leave comments describing the various things we thought about and rejected that ended us up here.","Url":"https://github.com/dotnet/roslyn/pull/38690","RelatedDescription":"Open PR \"Add a very simple ISourceGenerator API\" (#38690)"},{"Id":"493530048","IsPullRequest":true,"CreatedAt":"2019-09-13T21:49:52","Actor":"jasonmalinowski","Number":"38689","RawContent":null,"Title":"Delete the checkbox to control nullable analysis in the IDE","State":"open","Body":"At this point, the nullable support in the semantic model seems stable, and there's no reason for somebody to manually turn this on since any project that is using nullable will turn it on automatically.","Url":"https://github.com/dotnet/roslyn/pull/38689","RelatedDescription":"Open PR \"Delete the checkbox to control nullable analysis in the IDE\" (#38689)"},{"Id":"493514869","IsPullRequest":true,"CreatedAt":"2019-09-13T20:59:41","Actor":"jaredpar","Number":"38688","RawContent":null,"Title":"Additional logging in the compiler server","State":"open","Body":"The compiler is occasionally crashing on non-Windows operating systems when calling `Mutex.ReleaseMutex`. The exception indicates that `WaitOne` and `ReleaseMutex` call are happening on different threads but that is not possible in the implementation. Even though the code occurs in an `async` method there is no `await` between the two calls hence it should all execute on the same thread. \r\n\r\nThe runtime team cannot see a way this can be happening. They have requested that we add more logging here to expose the thread ids on both operations to help them dig into this issue further.\r\n\r\nRelated:\r\n- https://github.com/dotnet/coreclr/issues/26659\r\n- https://github.com/dotnet/roslyn/issues/37974","Url":"https://github.com/dotnet/roslyn/pull/38688","RelatedDescription":"Open PR \"Additional logging in the compiler server\" (#38688)"},{"Id":"493514775","IsPullRequest":true,"CreatedAt":"2019-09-13T20:59:26","Actor":"ryzngard","Number":"38687","RawContent":null,"Title":"[PROPOSAL] Add API to allow symbol changes after document changes","State":"open","Body":"The motivation for this API is to allow a workspace context to apply symbol changes after document changes. Currently all that is supported are namespace and named type syncing. We don't want these to be performed on all document operations, but we do believe Roslyn has the most context to apply these changes and should provide an appropriate API. \r\n\r\nThis PR is to discuss the API shape, naming, and comments that help define the behavior. A separate PR will be done to do the implementation and fine grained changes that are made. ","Url":"https://github.com/dotnet/roslyn/pull/38687","RelatedDescription":"Open PR \"[PROPOSAL] Add API to allow symbol changes after document changes\" (#38687)"},{"Id":"493488147","IsPullRequest":false,"CreatedAt":"2019-09-13T19:43:17","Actor":"alrz","Number":"38686","RawContent":null,"Title":"Unexpected value exception with switch expression in error scenarios","State":"open","Body":"**Version Used**: master\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nusing System;\r\n#nullable enable\r\npublic static class C {\r\n    static void M(object p) {\r\n       // either of these would crash\r\n        _= (C)(o switch { _ => default }); \r\n        _= (C)(o switch { _ => throw null }); \r\n    }\r\n}\r\n```\r\n\r\nSee the [stack trace](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATARgFgAoAYgDsBXAG2omGrgAI5z7GTsBmJ7fANl64mAYSYBvEk2m8BvACxMAsgAoA9sABWcAMYwmOgJQSpMswH0AvCpGGVBplADuASxg6AFuKZWAfDA8ENScmKlomAF9DAG5TaQiSCKA)\r\n\r\n**Expected Behavior**: no thrown exception\r\n\r\n**Actual Behavior**: `System.InvalidOperationException: Unexpected value 'SwitchExpression' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'`\r\n\r\nDiscovered while working on new(). Basically, this can occur with any untyped arm which yields a valid conversion to *any* type. We should either handle the conversion in the error case or return NoConversion when the target type is invalid. If we decide to do the former, it means an unconverted switch expression *can* sneak into the next stage and we may need to take it into account everywhere.","Url":"https://github.com/dotnet/roslyn/issues/38686","RelatedDescription":"Open issue \"Unexpected value exception with switch expression in error scenarios\" (#38686)"},{"Id":"493487503","IsPullRequest":false,"CreatedAt":"2019-09-13T19:41:31","Actor":"michaelcfanning","Number":"38685","RawContent":null,"Title":"Consider forcing all relevant compilations into /highentropyva","State":"open","Body":"Are there good reasons why we wouldn't force all 64-bit managed compilations into emitting the HighEntropyVA DLL characteristic? The compiler already forces the dynamic base characteristic. I'm not aware of a good reason to allow a managed compilation to not enable high entropy VA (as doing so provides no substantive gain, AFAIK, such as a perf improvement in exchange for the regression in security). \r\n\r\nIn emerging Dotnet/AOT (ahead of time compilation) scenarios, this bit on a managed assembly isn't relevant, as it is automatically applied when the image that is actually used to load the binary is produced: https://github.com/dotnet/coreclr/pull/20444/files \r\n\r\nAbsent some contrary rationale, my suggestion is to make a similar change to Roslyn that would forcibly add this DLL characteristic to 64-bit exe compilations.\r\n\r\nThis would make the managed runtime a more secure place. We would avoid the next occurrence of discovering that some emergent <HighEntropyVA> targets property does not have a secure default, and help eliminate some complexity that exists in security analysis of managed portable executables.\r\n\r\n```\r\n            return new Cci.ModulePropertiesForSerialization(\r\n                //  elided...\r\n                dllCharacteristics: GetDllCharacteristics(enableHighEntropyVA: true, compilationOptions.OutputKind == OutputKind.WindowsRuntimeApplication),\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38685","RelatedDescription":"Open issue \"Consider forcing all relevant compilations into /highentropyva\" (#38685)"},{"Id":"493385282","IsPullRequest":true,"CreatedAt":"2019-09-13T19:41:19","Actor":"sharwell","Number":"38682","RawContent":null,"Title":"Fix formatting","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38682","RelatedDescription":"Closed or merged PR \"Fix formatting\" (#38682)"},{"Id":"493441307","IsPullRequest":false,"CreatedAt":"2019-09-13T17:37:45","Actor":"MarkPflug","Number":"38684","RawContent":null,"Title":".editorconfig warning/error support","State":"open","Body":"Hello,\r\nI [asked a question in the .NET community standup yesterday](https://youtu.be/FDDZzxxERFI?t=1847) about the .editorconfig warnings work that was demoed. My question was whether it was considered how this feature would interact with warnings/errors configured in MSBuild (csproj). I believe the response was that using .editorconfig allowed the configuration to be more easily shared between projects than a csproj implementation, since .editorconfig applies in a \"cascading\" manner and thus common settings can be applied to multiple projects. That makes total sense, and I completely agree with the design goal. \r\n\r\nHave you considered using [Directory.Build.props](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019) instead? Directory.Build.props would allow the settings to cascade/inherit in the same way that .editorconfig does, and already integrates with MSBuild, so wouldn't require any extra work to integrate.\r\n\r\n.editorconfig is a wonderful thing, but it seems that up to this point it is focused on code style, with which warnings/errors don't totally align. This feature will be duplicating functionality that has historically been managed through the MSBuild (csproj). I would expect a command line build to be producing the same warnings/errors as the IDE, so an .editorconfig implementation would require adding some smarts to the existing MSBuild scripts to understand .editorconfig.\r\n\r\nIt's hard for me to find documentation on some of the MSBuild properties, but some of the ones I can find/remember are:\r\n- **NoWarn** (error list) suppress listed warnings. These warnings will simply not be emitted by the compiler.\r\n- **WarningsAsErrors** (error list) a list of specific warnings to treat as errors.\r\n- **TreatWarningsAsErrors** (true/false) treats all warnings as errors. Defaults to false.\r\n- **WarningsNotAsErrors** (error list) can be used with TreatWarningsAsErrors to not elevate certain warnings to errors. This is a lesser-known property, because the VS properties UI didn't expose it, which is unfortunately because it is very useful.\r\n- **WarningLevel** (0-4) Not really sure how this works, but I think the default is 4 which enables all warnings.\r\n\r\nThe way I like to setup projects is to turn on TreatWarningsAsErrors, then exclude certain errors `<WarningsNotAsErrors>CS1591,CS0612,CS1030`. Those 3 are a few that I actually care about, but the community could probably provide a more complete set. These will continue to surface as warnings, so won't \"break the build\".\r\n\r\nCS1591 : missing doc comments on public members. I turn this on because too many team members will provide empty comments to suppress the error, which is harder to detect and fix than a warning. There are a lot of related warnings (like [CS1573](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1573)) that might also be reasonable to exclude.\r\n\r\nCS0612: warnings about obsolete usage. Debatable if this should be an error, but I find that sometimes I \"Obsolete\" something, but continue to use it internally. I think CS0618 is similar\r\n\r\nCS1030: explicit warning pragmas (#warning). I like to use these as more aggressive \"TODO\". Elevating them doesn't make sense when #error also exists.","Url":"https://github.com/dotnet/roslyn/issues/38684","RelatedDescription":"Open issue \".editorconfig warning/error support\" (#38684)"},{"Id":"493438636","IsPullRequest":true,"CreatedAt":"2019-09-13T17:30:33","Actor":"AlekseyTs","Number":"38683","RawContent":null,"Title":"Add handling for unconventional implementation of events and properties when Default Interface Implementations are involved.","State":"open","Body":"Closes #34452.\r\nCloses #34453.","Url":"https://github.com/dotnet/roslyn/pull/38683","RelatedDescription":"Open PR \"Add handling for unconventional implementation of events and properties when Default Interface Implementations are involved.\" (#38683)"},{"Id":"493291081","IsPullRequest":true,"CreatedAt":"2019-09-13T14:31:32","Actor":"dotnet-maestro[bot]","Number":"38681","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38681","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38681)"},{"Id":"493080661","IsPullRequest":true,"CreatedAt":"2019-09-13T06:00:08","Actor":"dotnet-bot","Number":"38676","RawContent":null,"Title":"Merge release/dev16.4-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.4-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38676","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1-vs-deps to master-vs-deps\" (#38676)"},{"Id":"493136434","IsPullRequest":false,"CreatedAt":"2019-09-13T04:58:08","Actor":"heejaechang","Number":"38680","RawContent":null,"Title":"remote syntatic classification tagger for LSP work once experimentation is done","State":"open","Body":"remove https://github.com/dotnet/roslyn/pull/38364 once experiementation is done.","Url":"https://github.com/dotnet/roslyn/issues/38680","RelatedDescription":"Open issue \"remote syntatic classification tagger for LSP work once experimentation is done\" (#38680)"},{"Id":"493080840","IsPullRequest":true,"CreatedAt":"2019-09-13T03:30:08","Actor":"dotnet-bot","Number":"38677","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38677","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38677)"},{"Id":"493081266","IsPullRequest":true,"CreatedAt":"2019-09-13T00:03:59","Actor":"JoeRobich","Number":"38678","RawContent":null,"Title":"Register DocumentOptionsProvider in Workspace base class","State":"open","Body":"Register `IDocumentOptionsProviders` in the `Workspace` constructor so that all workspaces get support for .editorconfig parsing.","Url":"https://github.com/dotnet/roslyn/pull/38678","RelatedDescription":"Open PR \"Register DocumentOptionsProvider in Workspace base class\" (#38678)"},{"Id":"493079525","IsPullRequest":true,"CreatedAt":"2019-09-12T23:56:14","Actor":"JoeRobich","Number":"38675","RawContent":null,"Title":"Add AnalyzerConfigOptionSet to get Option values from AnalyzerConfig","State":"open","Body":"Currently most of the CodeStyle diagnostic analyzers rely on receiving a `WorkspaceAnalyzerOptions` (an Internal type) so that they can get a `OptionSet` to pull option values from. For projects that have .editorconfig files these option value can now be pulled from `AnalyzerConfigOptions` (a Public type).\r\n\r\nThis PR adds a AnalyzerConfigOptionSet that will first try to pull the Option value from `AnalyzerConfigOptions` and fall back to the document's `OptionSet` when no value is found. This benefits environments that have .editorconfig files and run analyzers, but do not have permissions to create instances of `WorkspaceAnalyzerOptions`.","Url":"https://github.com/dotnet/roslyn/pull/38675","RelatedDescription":"Open PR \"Add AnalyzerConfigOptionSet to get Option values from AnalyzerConfig\" (#38675)"},{"Id":"493065963","IsPullRequest":false,"CreatedAt":"2019-09-12T22:57:31","Actor":"mavasani","Number":"38674","RawContent":null,"Title":"Bulk configuration/suppression of analyzer diagnostics","State":"open","Body":"**User scenarios:**\r\nLot of internal discussions and external requests in the area of analyzer adoption have pointed to a need for a better _bulk diagnostic configuration_ story based on real world user scenarios, such as:\r\n1. Category based configuration: I want to configure all diagnostics with a specific diagnostic category, without having to configure every single diagnostic ID. For example, bump up all security rules to errors, demote all performance issues to suggestions, etc. \r\n2. Diagnostic prefix based configuration: I want to configure all diagnostics from an analyzer package without having to configure every single diagnostic ID. For example, demote all CA diagnostics from FxCop analyzer package to suggestions (they are all warnings by default), and selectively promote individual CAxxxx diagnostic ID to warning/error with explicit configuration entries.\r\n3. Suppress all current and future analyzer diagnostics inside a specific folder (say legacy code) or documents based on extensions (say generated code with special extensions: https://github.com/dotnet/roslyn/issues/3705), etc. to reduce analyzer noise. Performing a baseline operation in Visual Studio only suppresses diagnostics from current snapshot and also uses a very hard to maintain list of in-source suppressions (pragmas or suppress message attributes).\r\n4. Power save mode/focused mode for background analyzer execution in IDE: Users have different working modes and performance preferences under which they want to temporarily suspend execution of all analyzers in IDE (power saving performance mode) or hide all the visible indicators for analyzer diagnostics (no squiggles, three dots for suggestions or any analyzer diagnostics in error list) even though code fixes are available on Ctrl + . (focused development mode).\r\n\r\n**Difficulties with current support:**\r\nEach of the above actions are very common when installing a new analyzer package, or doing targeted code analysis cleanup work (for example, security push, performance push, code maintenance push, etc.). [Current support for diagnostic configuration](https://docs.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers) requires user to configure each diagnostic ID with a distinct configuration entry per diagnostic ID reported by every analyzer from all of the consumed analyzer packages. This approach becomes even more untenable with analyzer package upgrades, which generally brings in bunch of new analyzers and diagnostics IDs and requires the user to manually update their per-ID configuration lists to include the new diagnostic IDs.\r\n\r\n**Proposal:**\r\nIn past, adding any such bulk diagnostic configuration support would have required providing new MSBuild and command line compiler switches or updating existing ones, which had a high implementation and design cost and higher risk of bugs/regressions. With the recently added support in [VS2019 16.3](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes-preview#16.3.0-pre.3.0) to pass in project's .editorconfig files into the compiler for analyzer configuration, implementing this feature has become considerably easier. For example, we can potentially allow users to specify editorconfig entries with following formats to address each of the above scenarios:\r\n\r\n```\r\n# Scenario 1\r\n[*.cs]\r\ndotnet_analyzer_diagnostic.security.severity = error\r\ndotnet_analyzer_diagnostic.performance.severity = suggestion\r\n\r\n# Scenario 2\r\n[*.cs]\r\ndotnet_analyzer_diagnostic.CA.severity = suggestion\r\ndotnet_analyzer_diagnostic.CA1801.severity = warning\r\ndotnet_analyzer_diagnostic.CA1802.severity = error\r\n\r\n# Scenario 3\r\n[*.MyGeneratedFileExtension.cs]\r\ndotnet_analyzer_diagnostic.severity = none\r\n```\r\n\r\nThe core analyzer driver can parse the relevant option values based on each diagnostic's source tree from [analyzer options](http://source.roslyn.io/#Microsoft.CodeAnalysis/DiagnosticAnalyzer/AnalyzerOptions.cs,23) and update the effective diagnostic severity.\r\nNote that above examples are just some arbitrary chosen formats meant to start a discussion. They would need to be thoroughly designed in a design meeting (along with few other design questions) if we do decide to go forward with adding this support. We can also consider potentially extending this to compiler warnings (at which point we can re-use `dotnet_diagnostic` prefix), though the big value add here is in bulk configuring analyzer diagnostics, hence the above proposal.","Url":"https://github.com/dotnet/roslyn/issues/38674","RelatedDescription":"Open issue \"Bulk configuration/suppression of analyzer diagnostics\" (#38674)"},{"Id":"492994062","IsPullRequest":true,"CreatedAt":"2019-09-12T22:03:47","Actor":"dotnet-bot","Number":"38670","RawContent":null,"Title":"Merge release/dev16.4-preview1 to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38670","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to master\" (#38670)"},{"Id":"492994634","IsPullRequest":true,"CreatedAt":"2019-09-12T22:03:40","Actor":"dotnet-bot","Number":"38671","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38671","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#38671)"},{"Id":"492995973","IsPullRequest":true,"CreatedAt":"2019-09-12T21:36:48","Actor":"nnpcYvIVl","Number":"38673","RawContent":null,"Title":"Spelling fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38673","RelatedDescription":"Closed or merged PR \"Spelling fixes\" (#38673)"},{"Id":"492994698","IsPullRequest":true,"CreatedAt":"2019-09-12T21:30:08","Actor":"dotnet-bot","Number":"38672","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38672","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38672)"},{"Id":"493084966","IsPullRequest":false,"CreatedAt":"2019-09-11T18:08:16","Actor":"LouisFr81","Number":"38679","RawContent":null,"Title":"Parsing issue on conditional ref operator","State":"open","Body":"With the classic conditional operator, you can use an 'is' condition without any issue:\r\n`var x = o1 is string ? o2 : o3;`\r\nIf you use the conditional ref operator `var x = o1 is string ? ref o2 : ref o3;`\r\n the \"string ?\" part is interpreted as a nullable type and the compiler emits an error on the first \"ref\".","Url":"https://github.com/dotnet/roslyn/issues/38679","RelatedDescription":"Open issue \"Parsing issue on conditional ref operator\" (#38679)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"493684541","IsPullRequest":true,"CreatedAt":"2019-09-15T01:44:42","Actor":"Dotnet-GitSync-Bot","Number":"7792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7792)"},{"Id":"493500562","IsPullRequest":true,"CreatedAt":"2019-09-14T14:02:26","Actor":"MichalStrehovsky","Number":"7791","RawContent":null,"Title":"Fix casting to pointers","State":"closed","Body":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix.","Url":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Closed or merged PR \"Fix casting to pointers\" (#7791)"},{"Id":"493430075","IsPullRequest":false,"CreatedAt":"2019-09-13T17:07:42","Actor":"RalfKornmannEnvision","Number":"7790","RawContent":null,"Title":"GC on ARM64 based \"kind of unix\" system","State":"open","Body":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Open issue \"GC on ARM64 based \"kind of unix\" system\" (#7790)"},{"Id":"492984849","IsPullRequest":true,"CreatedAt":"2019-09-13T13:52:21","Actor":"Dotnet-GitSync-Bot","Number":"7789","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7789)"},{"Id":"489459547","IsPullRequest":true,"CreatedAt":"2019-09-12T19:12:20","Actor":"cshung","Number":"7775","RawContent":null,"Title":"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Closed or merged PR \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775)"},{"Id":"492918947","IsPullRequest":true,"CreatedAt":"2019-09-12T19:11:42","Actor":"Dotnet-GitSync-Bot","Number":"7788","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley @tarekgh @obligaron @marek-safar @jkotas @sywhang","Url":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7788)"},{"Id":"491162081","IsPullRequest":true,"CreatedAt":"2019-09-11T00:16:26","Actor":"Dotnet-GitSync-Bot","Number":"7786","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7786","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7786)"},{"Id":"490571600","IsPullRequest":true,"CreatedAt":"2019-09-09T17:52:58","Actor":"davidwrighton","Number":"7779","RawContent":null,"Title":"Resource writing","State":"closed","Body":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources","Url":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Closed or merged PR \"Resource writing\" (#7779)"},{"Id":"491229182","IsPullRequest":false,"CreatedAt":"2019-09-09T17:33:38","Actor":"RalfKornmannEnvision","Number":"7787","RawContent":null,"Title":"finally funclets brocken for ARM64!?","State":"open","Body":"I am not sure if this is a corert or coreclr issue but as I am working on a corert port for an custom ARM64 system I start with posting it here.\r\n\r\nAfter adding code to the objectwriter and the ilcompiler I managed to get a simple hello world app running to the main method. But it than crashed during the shutdown. After some debugging i figured out that the static constructors are never called. After some more debugging I noticed that ClassConstructorRunner.GetCctor corrupts the stack frame,\r\n\r\nIt happens at the end of the method in an assembler block that i believe is the finally funclet for the using. It looks like this\r\n\r\n  28667c: a9be7bfd stp x29, x30, [sp, #-32]!\r\n  286680: f90013f3 str x19, [sp, #32]\r\n  286684: 9103a3a0 add x0, x29, #0xe8\r\n  286688: 97fc0d42 bl 189b90 <S_P_CoreLib_System_Threading_LockHolder__Dispose>\r\n  28668c: d503201f nop\r\n  286690: d503201f nop\r\n  286694: f94013f3 ldr x19, [sp, #32]\r\n  286698: a8c27bfd ldp x29, x30, [sp], #32\r\n  28669c: d65f03c0 ret\r\n\r\nThe fact that x19 is stored with an offset of 32 looks strange for me and it overwrites the already stored data. Based on other stackframes I would expect an offset of 16 here. Or the new stackframe for the funclet needs to be 16 bytes larger.\r\n\r\nDisclaimer: As the development system for the custom ARM64 system runs on windows I although use a ARM64 jit that is build to run on X64. Very simular to the protonojit but not as alt jit to get all the data needed to write the arm64 elf file that the linker for the custom ARM64 system needs. Unfortunately I don't have an ARM64 windows or linux system to check if a non cross jit generates the same code.\r\n\r\nI assume there is no ready to use jit for my use case and I need to build it anyway. In this case I could properly fix the issue but I would need a hint how the code is expected to look like.  ","Url":"https://github.com/dotnet/corert/issues/7787","RelatedDescription":"Open issue \"finally funclets brocken for ARM64!?\" (#7787)"},{"Id":"490799316","IsPullRequest":true,"CreatedAt":"2019-09-08T23:57:41","Actor":"MichalStrehovsky","Number":"7785","RawContent":null,"Title":"Mark unsafe intrinsics as reflection blocked","State":"closed","Body":"Keeping these reflection enabled pulls in quite a bit of junk (generic dictionaries, standalone method bodies, bookkeeping) that adds up to 1.5% of the size of Hello World...","Url":"https://github.com/dotnet/corert/pull/7785","RelatedDescription":"Closed or merged PR \"Mark unsafe intrinsics as reflection blocked\" (#7785)"},{"Id":"490775070","IsPullRequest":false,"CreatedAt":"2019-09-08T21:11:53","Actor":"mrzaxaryan","Number":"7784","RawContent":null,"Title":"Non-trivial marshalling is not yet supported by this compiler.","State":"closed","Body":"Can't save image to MemoryStream \r\n.NET Core v3.0.0-preview9\r\nVisual Studio 16.3.0 Preview 3.0\r\nException: `System.Exception: Method '[System.Drawing.Common]System.Drawing.SafeNativeMethods+Gdip.GdipSaveImageToStream(HandleRef,IStream,Guid&,HandleRef)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipSaveImageToStream(HandleRef, Interop.Ole32.IStream, Guid&, HandleRef) + 0x39\r\n   at System.Drawing.Image.Save(Stream, ImageCodecInfo, EncoderParameters) + 0x1af`\r\n","Url":"https://github.com/dotnet/corert/issues/7784","RelatedDescription":"Closed issue \"Non-trivial marshalling is not yet supported by this compiler.\" (#7784)"},{"Id":"490757817","IsPullRequest":true,"CreatedAt":"2019-09-08T20:09:59","Actor":"MichalStrehovsky","Number":"7782","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"Ports https://github.com/dotnet/coreclr/commit/cd42ee8fe410f71026467ad2e90116115b85f68d\r\nPorts https://github.com/dotnet/coreclr/commit/740752c9d206a465e96a4d01e7dafb6adb6ded63","Url":"https://github.com/dotnet/corert/pull/7782","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7782)"},{"Id":"490760342","IsPullRequest":true,"CreatedAt":"2019-09-08T20:08:39","Actor":"MichalStrehovsky","Number":"7783","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7783","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#7783)"},{"Id":"490704961","IsPullRequest":true,"CreatedAt":"2019-09-08T05:12:25","Actor":"Dotnet-GitSync-Bot","Number":"7781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7781)"},{"Id":"490412146","IsPullRequest":true,"CreatedAt":"2019-09-08T00:46:12","Actor":"trylek","Number":"7777","RawContent":null,"Title":"Output raw test lists for the individual outcomes from SuperIlc","State":"closed","Body":"This change tweaks SuperIlc to emit simple line-oriented test lists\r\nfor the various compilation and execution outcomes. I found this\r\nquite useful for comparing various runs. I have also deleted a bit\r\nof dead code I noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7777","RelatedDescription":"Closed or merged PR \"Output raw test lists for the individual outcomes from SuperIlc\" (#7777)"},{"Id":"490662770","IsPullRequest":false,"CreatedAt":"2019-09-07T17:55:27","Actor":"nexon33","Number":"7780","RawContent":null,"Title":"Implement GetInterfaceMap","State":"open","Body":"I want to be able to render a view in asp.net core, I need the controller inheritance to be able to call View();\r\nIs there any simple way of doing this or should I forget about it for now?","Url":"https://github.com/dotnet/corert/issues/7780","RelatedDescription":"Open issue \"Implement GetInterfaceMap\" (#7780)"},{"Id":"490072419","IsPullRequest":true,"CreatedAt":"2019-09-06T23:34:35","Actor":"davidwrighton","Number":"7776","RawContent":null,"Title":"Partial compilation and generic ibc processing","State":"closed","Body":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid","Url":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Closed or merged PR \"Partial compilation and generic ibc processing\" (#7776)"},{"Id":"490437186","IsPullRequest":true,"CreatedAt":"2019-09-06T22:57:58","Actor":"Dotnet-GitSync-Bot","Number":"7778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7778)"},{"Id":"489360143","IsPullRequest":true,"CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Number":"7772","RawContent":null,"Title":"Compile cross-module generics in the same version bubble.","State":"closed","Body":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n","Url":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Closed or merged PR \"Compile cross-module generics in the same version bubble.\" (#7772)"},{"Id":"489380977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Number":"7773","RawContent":null,"Title":"Get jitwrapper building on x86","State":"closed","Body":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it...","Url":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Closed or merged PR \"Get jitwrapper building on x86\" (#7773)"},{"Id":"488748576","IsPullRequest":true,"CreatedAt":"2019-09-05T13:42:32","Actor":"janvorli","Number":"7767","RawContent":null,"Title":"Implement SystemV AMD64 ABI struct classification","State":"closed","Body":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times.","Url":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Closed or merged PR \"Implement SystemV AMD64 ABI struct classification\" (#7767)"},{"Id":"489406467","IsPullRequest":true,"CreatedAt":"2019-09-04T23:16:31","Actor":"Dotnet-GitSync-Bot","Number":"7774","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn","Url":"https://github.com/dotnet/corert/pull/7774","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7774)"},{"Id":"488925681","IsPullRequest":true,"CreatedAt":"2019-09-04T16:39:39","Actor":"Dotnet-GitSync-Bot","Number":"7771","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7771)"},{"Id":"488893657","IsPullRequest":true,"CreatedAt":"2019-09-04T02:16:33","Actor":"Dotnet-GitSync-Bot","Number":"7770","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7770)"},{"Id":"488826953","IsPullRequest":true,"CreatedAt":"2019-09-04T01:18:56","Actor":"Dotnet-GitSync-Bot","Number":"7769","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7769)"},{"Id":"488782037","IsPullRequest":true,"CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Number":"7768","RawContent":null,"Title":"Minor triage improvement in SuperIlc","State":"closed","Body":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Closed or merged PR \"Minor triage improvement in SuperIlc\" (#7768)"},{"Id":"488681079","IsPullRequest":true,"CreatedAt":"2019-09-03T20:23:38","Actor":"MichalStrehovsky","Number":"7765","RawContent":null,"Title":"Delete unused file","State":"closed","Body":"Noticed when auditing the CPAOT copy scripts.","Url":"https://github.com/dotnet/corert/pull/7765","RelatedDescription":"Closed or merged PR \"Delete unused file\" (#7765)"},{"Id":"488732123","IsPullRequest":true,"CreatedAt":"2019-09-03T19:16:49","Actor":"trylek","Number":"7766","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7766","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7766)"},{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"},{"Id":"488211989","IsPullRequest":true,"CreatedAt":"2019-09-02T15:07:10","Actor":"yowl","Number":"7763","RawContent":null,"Title":"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended","State":"closed","Body":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario.","Url":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Closed or merged PR \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"493678850","IsPullRequest":true,"CreatedAt":"2019-09-15T00:05:26","Actor":"dotnet-bot","Number":"3646","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3646","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3646)"},{"Id":"493651275","IsPullRequest":true,"CreatedAt":"2019-09-14T18:13:58","Actor":"lg2de","Number":"3645","RawContent":null,"Title":"do not overwrite \"all warnings as errors\" (fixes #3613)","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3645","RelatedDescription":"Open PR \"do not overwrite \"all warnings as errors\" (fixes #3613)\" (#3645)"},{"Id":"493446026","IsPullRequest":false,"CreatedAt":"2019-09-14T17:13:03","Actor":"wjk","Number":"3638","RawContent":null,"Title":"Package restore can't find runtime packs when explicit RID specified","State":"closed","Body":"When I try to restore a project that contains one or more RIDs specified in the project file `RuntimeIdentifiers` property, it cannot find a matching version of the following packages:\r\n\r\n* `Microsoft.NETCore.App.Runtime.<rid>`\r\n* `Microsoft.AspNetCore.App.Runtime.<rid>`\r\n* `Microsoft.NETCore.WindowsDesktop.Runtime.<rid>`\r\n\r\nIt says that there are other versions of these packages available on NuGet.org, but no matter what I try I cannot get the package restore to use the versions that actually exist. I've tried numerous SDK versions in the `global.json` file, to no avail. The only way I can get my project to restore (and, therefore, build) is to remove the `RuntimeIdentifiers` property from the csproj file. This can break other parts of my build, so it isn't a good solution overall.\r\n\r\nThis problem started occurring at roughly the time I installed Preview 9/RC 2 of .NET Core 3. Thanks for looking into this for me!","Url":"https://github.com/dotnet/sdk/issues/3638","RelatedDescription":"Closed issue \"Package restore can't find runtime packs when explicit RID specified\" (#3638)"},{"Id":"492784691","IsPullRequest":true,"CreatedAt":"2019-09-14T14:21:35","Actor":"dotnet-maestro[bot]","Number":"3633","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3633","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3633)"},{"Id":"493616381","IsPullRequest":true,"CreatedAt":"2019-09-14T14:18:16","Actor":"dotnet-bot","Number":"3643","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3643","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3643)"},{"Id":"493616125","IsPullRequest":true,"CreatedAt":"2019-09-14T13:57:47","Actor":"dotnet-maestro[bot]","Number":"3642","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.3\r\n- **Date Produced**: 9/13/2019 11:47 PM\r\n- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19463.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3642","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3642)"},{"Id":"493616393","IsPullRequest":true,"CreatedAt":"2019-09-14T12:05:32","Actor":"dotnet-bot","Number":"3644","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3644","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3644)"},{"Id":"493558211","IsPullRequest":true,"CreatedAt":"2019-09-14T01:53:13","Actor":"dotnet-maestro[bot]","Number":"3641","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df8a2755-bec9-40dc-b710-08d7368af630)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190913.1\r\n- **Date Produced**: 9/13/2019 10:50 AM\r\n- **Commit**: 372f44450f51552a8cf725acf705dc477bd8391f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19463.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19463.1\r\n\r\n[marker]: <> (End:df8a2755-bec9-40dc-b710-08d7368af630)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3641","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3641)"},{"Id":"493482678","IsPullRequest":true,"CreatedAt":"2019-09-13T21:28:56","Actor":"dotnet-maestro[bot]","Number":"3640","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190913.05\r\n- **Date Produced**: 9/13/2019 4:13 PM\r\n- **Commit**: 7d57652f33493fa022125b7f63aad0d70c52d810\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3640","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3640)"},{"Id":"492915289","IsPullRequest":true,"CreatedAt":"2019-09-13T20:31:36","Actor":"wli3","Number":"3634","RawContent":null,"Title":"Block and tests for C++/CLI support","State":"closed","Body":"Block publishing in single C++ and building exe\r\n\r\nBetter error message for Pack failure\r\n\r\nBlock for EnableComHosting","Url":"https://github.com/dotnet/sdk/pull/3634","RelatedDescription":"Closed or merged PR \"Block and tests for C++/CLI support\" (#3634)"},{"Id":"493472396","IsPullRequest":false,"CreatedAt":"2019-09-13T18:59:57","Actor":"bricelam","Number":"3639","RawContent":null,"Title":"Enable embedded resource DependentUpon convention on .NET Framework","State":"open","Body":"Shouldn't this also be enabled for .NETFramework? Without it, embedded resource names are changing between classic and SDK-style projects. (Originally reported in https://github.com/aspnet/EntityFramework6/issues/1258)\r\n\r\nhttps://github.com/dotnet/sdk/blob/25d8a32f0c357b8e6ccaa39fba27d5c61364e26a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L109-L112\r\n\r\ncc @divega @Pilchie @ajcvickers @BenVillalobos","Url":"https://github.com/dotnet/sdk/issues/3639","RelatedDescription":"Open issue \"Enable embedded resource DependentUpon convention on .NET Framework\" (#3639)"},{"Id":"493287815","IsPullRequest":true,"CreatedAt":"2019-09-13T14:28:25","Actor":"dotnet-maestro[bot]","Number":"3637","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190912.5\r\n- **Date Produced**: 9/13/2019 5:59 AM\r\n- **Commit**: 6003ee189f456c92a18b097f226d4927309def27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19462.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19462.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3637","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3637)"},{"Id":"492920175","IsPullRequest":true,"CreatedAt":"2019-09-12T22:18:36","Actor":"wli3","Number":"3635","RawContent":null,"Title":"No block on C++/CLI project for assets.json existence","State":"closed","Body":"By overriding PackageDependencyResolution.targets","Url":"https://github.com/dotnet/sdk/pull/3635","RelatedDescription":"Closed or merged PR \"No block on C++/CLI project for assets.json existence\" (#3635)"},{"Id":"493048711","IsPullRequest":false,"CreatedAt":"2019-09-12T21:57:00","Actor":"wli3","Number":"3636","RawContent":null,"Title":"All win apphosts in the installer","State":"open","Body":"pending Core-setup's msis https://github.com/dotnet/core-setup/issues/7846\r\nneed to put it in VS, installer, and archive ","Url":"https://github.com/dotnet/sdk/issues/3636","RelatedDescription":"Open issue \"All win apphosts in the installer\" (#3636)"},{"Id":"491333446","IsPullRequest":true,"CreatedAt":"2019-09-12T16:41:09","Actor":"wli3","Number":"3618","RawContent":null,"Title":"Blocks and tests C++ project","State":"closed","Body":"Block single C++ project publish, Pack\r\n\r\nBlock all C++ project using EnableComHosting=true\r\n\r\nBlock single C++ build exe project","Url":"https://github.com/dotnet/sdk/pull/3618","RelatedDescription":"Closed or merged PR \"Blocks and tests C++ project\" (#3618)"},{"Id":"492761288","IsPullRequest":true,"CreatedAt":"2019-09-12T14:18:21","Actor":"dotnet-maestro[bot]","Number":"3632","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190911.7\r\n- **Date Produced**: 9/12/2019 6:45 AM\r\n- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19461.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19461.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3632","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3632)"},{"Id":"492548103","IsPullRequest":false,"CreatedAt":"2019-09-12T02:15:05","Actor":"davkean","Number":"3631","RawContent":null,"Title":"[Component Licensing] SDK needs to make sure that licenses.licx ends up as \"EmbeddedResource\"","State":"open","Body":"**Visual Studio Version**:\r\n\r\n**Summary**:\r\nThe Visual Studio support for Windows Forms licensing was implemented in https://github.com/dotnet/project-system/pull/5468, and works well if you opt out of the globs. VS will automatically add it to EmbeddedResource:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <EnableDefaultNoneItems>false</EnableDefaultNoneItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"C:\\Program Files (x86)\\DevExpress 19.1\\Components\\Bin\\Framework\\*.dll\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"licenses.licx\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nHowever with globs turned on, we don't add a specific item if a glob covers it. Based on that, the SDK needs to cover licenses.licx in EmbeddedResource item.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install DevExpress controls: https://www.devexpress.com/subscriptions/new-2019-1.xml\r\n2. Create a project with the following:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"C:\\Program Files (x86)\\DevExpress 19.1\\Components\\Bin\\Framework\\*.dll\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n3. Add a Form (Windows Forms) to the project\r\n4. Open designer, choose Toolbox -> DX.19.1: Reporting and drag RibbonReportDesigner onto the form\r\n\r\n**Expected Behavior**:\r\nProperties\\licenses.licx gets created and ends up in `EmbeddedResource` item\r\n\r\n**Actual Behavior**:\r\nProperties\\licenses.licx gets created but ends up in `None` item type\r\n\r\n**User Impact**:\r\nLicensed controls don't work at runtime.","Url":"https://github.com/dotnet/sdk/issues/3631","RelatedDescription":"Open issue \"[Component Licensing] SDK needs to make sure that licenses.licx ends up as \"EmbeddedResource\"\" (#3631)"},{"Id":"492212731","IsPullRequest":true,"CreatedAt":"2019-09-11T15:07:04","Actor":"dotnet-maestro[bot]","Number":"3630","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3630","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3630)"},{"Id":"491629059","IsPullRequest":true,"CreatedAt":"2019-09-11T13:30:44","Actor":"dotnet-maestro[bot]","Number":"3628","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190910.3\r\n- **Date Produced**: 9/10/2019 6:11 PM\r\n- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19460.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19460.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3628","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3628)"},{"Id":"491908541","IsPullRequest":false,"CreatedAt":"2019-09-10T21:30:48","Actor":"heng-liu","Number":"3629","RawContent":null,"Title":"Retarget task in dotnet/sdk to netcoreapp3.0 when ready to insert nuget bits targetinig netstandard2.1","State":"open","Body":"When it's ready to insert nuget bits targeting netstandard2.1,\r\nplease remember to go to the dotnet/SDK repository , change sdk/src/Tasks/Microsoft.NET.Build.Tasks/Microsoft.NET.Build.Tasks.csproj to retarget netcoreapp3.0.\r\n\r\nSo that SDK will resolve the NuGet.Packaging targeting netstandard2.1.","Url":"https://github.com/dotnet/sdk/issues/3629","RelatedDescription":"Open issue \"Retarget task in dotnet/sdk to netcoreapp3.0 when ready to insert nuget bits targetinig netstandard2.1\" (#3629)"},{"Id":"491527970","IsPullRequest":false,"CreatedAt":"2019-09-10T17:47:37","Actor":"Jmales","Number":"3627","RawContent":null,"Title":"New csproj re-generates files forever when Visual Studio is open","State":"closed","Body":"I'm generating some .cs files using **node.exe** before the compilation, which I then include in my project.\r\n\r\nI call **node.exe** and define the steps for the generation via CSProj. After migrating the CSProj to the new format `<Project Sdk=\"Microsoft.NET.Sdk\">` the files are constantly being generated, erased and generated again while Visual Studio is open (tested with VS2017 and VS2019). This doesn't happen if Visual Studio is closed.\r\n\r\nThis is my targets file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    ...\r\n  </PropertyGroup>\r\n\r\n   <Target Name=\"SetVariables\">\r\n    <ItemGroup>\r\n      <_NodeJsExe Include=\"$(MSBuildThisFileDirectory)..\\..\\..\\Node.js.redist\\*\\tools\\win-x64\\node.exe\"/>\r\n    </ItemGroup>\r\n    <PropertyGroup>\r\n      <__NodeJsExe>@(_NodeJsExe);</__NodeJsExe>\r\n      <NodeJsExe>$(__NodeJsExe.Substring(0, $(__NodeJsExe.IndexOf(';'))))</NodeJsExe>\r\n    </PropertyGroup>\r\n  </Target>\r\n\r\n   <Target Name=\"ProblemHere\" BeforeTargets=\"TransformDuringBuild;PrepareForBuild;CoreCompile\" DependsOnTargets=\"SetVariables;CleanFilesBeforeBuild\">\r\n    <Exec Command=\"&quot;$(NodeJsExe)&quot...\" />\r\n  </Target>\r\n\r\n  <Target Name=\"CleanFilesBeforeBuild\">\r\n    <ItemGroup>\r\n      <Ts2LangFiles Include=\"$(GeneratedFolder)\\**\\*.cs\" />\r\n    </ItemGroup>\r\n    <Delete Files=\"@(Ts2LangFiles)\"/>\r\n  </Target>\r\n  </Project>\r\n```\r\n\r\n\r\nAnyone knows what the problem is?","Url":"https://github.com/dotnet/sdk/issues/3627","RelatedDescription":"Closed issue \"New csproj re-generates files forever when Visual Studio is open\" (#3627)"},{"Id":"491344969","IsPullRequest":false,"CreatedAt":"2019-09-09T21:52:15","Actor":"wli3","Number":"3626","RawContent":null,"Title":"Block build on TFM lower than netcoreapp3.1","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3626","RelatedDescription":"Open issue \"Block build on TFM lower than netcoreapp3.1\" (#3626)"},{"Id":"491344771","IsPullRequest":false,"CreatedAt":"2019-09-09T21:51:41","Actor":"wli3","Number":"3625","RawContent":null,"Title":"⬇️ C++ build in VS vs msbuild command line","State":"open","Body":"Confirm the issue is in C++ targets and file a bug.","Url":"https://github.com/dotnet/sdk/issues/3625","RelatedDescription":"Open issue \"⬇️ C++ build in VS vs msbuild command line\" (#3625)"},{"Id":"491344361","IsPullRequest":false,"CreatedAt":"2019-09-09T21:50:29","Actor":"wli3","Number":"3624","RawContent":null,"Title":"⬇️Better error when run dotnet build on a C++ project or C# reference C++ project","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3624","RelatedDescription":"Open issue \"⬇️Better error when run dotnet build on a C++ project or C# reference C++ project\" (#3624)"},{"Id":"491343846","IsPullRequest":false,"CreatedAt":"2019-09-09T21:49:12","Actor":"wli3","Number":"3623","RawContent":null,"Title":"Figure out build/run of c++/CLI exe","State":"closed","Body":"The following is the result of the investigation. What need to happen to enable it. Currently we don't plan to support it in 3.1.100\r\n\r\n- [exe unique task] Compile the exe entry point as usual but still give it the extension dll. Cpp props need to change https://devdiv.visualstudio.com/DevDiv/_git/VS?path=%2Fsrc%2Fvc%2Fprojbld%2FCppTargets_v150%2FMicrosoft.Cpp.Common.props&version=GBmaster&line=30&lineStyle=plain&lineEnd=31&lineStartColumn=1&lineEndColumn=1\r\n\r\n  - However, C++ prefer TargetPath to be EXE for properties UI (exe is what user actually wants to build) and debugger (exe is what it will launch). If so, sdk also need switch property on TargetPath for language ==  C++ . And we don't want to change user's existing Debugger config\r\n\r\n- Get multiple apphosts to the project when there is no nuget restore\r\n  - Make msi on core-sdk repo -- big task, however this need to be done even for c# referencing c++\r\n\r\n- [exe unique task] RuntimeIdentifiers=win;win-x32;win-x64 we should remove the “win” in the list\r\n - The \"extra\" win is set in https://github.com/dotnet/NuGet.BuildTasks/pull/25 from the issue. It is added to resolve a nuget issue. Considering in UWP is handing it, VC targets should do the similar. However, I am still not sure what to set. And pending nuget to reply more context\r\n - Or ResolveApphost should be able to take in \"win\" -- but that does it mean considering there is no generic windows apphost\r\n - We could disable import of the \"classic\" nuget target\r\n\r\n- [exe unique task] intermediateAssembly mismatches the actual output, even for classic project\r\n \r\nPotential fix\r\n```\r\n    <_OutputBase Condition=\"'$(Language)' == 'C++'\">$(TargetDir)</_OutputBase>\r\n    <_OutputBase Condition=\"'$(Language)' != 'C++'\">$(IntermediateOutputPath)</_OutputBase>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- C++ does not use $(IntermediateAssembly). The output of the linker is $(TargetPath)-->\r\n    <!--TODO change to $(targetpath) when <TargetExt>.dll</TargetExt> change is in C++ targets-->\r\n    <_IntermediateAssemblyEquivalent Condition=\"'$(Language)' == 'C++'\" Include=\"$(TargetDir)$(TargetName)$(TargetExt)\" />\r\n    <_IntermediateAssemblyEquivalent Condition=\"'$(Language)' != 'C++'\" Include=\"@(IntermediateAssembly)\" />\r\n  </ItemGroup>\r\n```\r\n\r\n  - In Microsoft.Link.Common.props, the actual file is based on OutDir that is different than IntermediateAssembly when it builds a solution.\r\n\r\n- Figure out the dependency, let _CreateApphost be part of the BuildCompile\r\n\tPotential fix:\r\n```\r\n\t    <_CreateAppHostDependsOn Condition=\"'$(Language)' == 'C++'\">_GetAppHostPaths;ResolveFrameworkReferences;BuildCompile</_CreateAppHostDependsOn>\r\n\t    <_CreateAppHostDependsOn Condition=\"'$(Language)' != 'C++'\">_GetAppHostPaths;ResolveFrameworkReferences;CoreCompile</_CreateAppHostDependsOn>\r\n```\r\n\t\r\n\tAnd\r\n```\r\n\t  <PropertyGroup>\r\n\t    <CompileDependsOn>\r\n\t      $(CompileDependsOn);\r\n\t      _CreateAppHost;\r\n\t      _CreateComHost;\r\n\t      _GetIjwHostPaths;\r\n\t    </CompileDependsOn>\r\n\t  </PropertyGroup>\r\n```\t\r\n\r\n- Ensure runtimeconfig.json is correct\r\n","Url":"https://github.com/dotnet/sdk/issues/3623","RelatedDescription":"Closed issue \"Figure out build/run of c++/CLI exe\" (#3623)"},{"Id":"491336183","IsPullRequest":false,"CreatedAt":"2019-09-09T21:28:11","Actor":"wli3","Number":"3622","RawContent":null,"Title":"Block single C++ library Publish and Pack","State":"open","Body":"PR: https://github.com/dotnet/sdk/issues/3619","Url":"https://github.com/dotnet/sdk/issues/3622","RelatedDescription":"Open issue \"Block single C++ library Publish and Pack\" (#3622)"},{"Id":"491335766","IsPullRequest":false,"CreatedAt":"2019-09-09T21:27:11","Actor":"wli3","Number":"3621","RawContent":null,"Title":"Disable deps.json generation for C++ library","State":"open","Body":"PR: https://github.com/dotnet/sdk/pull/3601","Url":"https://github.com/dotnet/sdk/issues/3621","RelatedDescription":"Open issue \"Disable deps.json generation for C++ library\" (#3621)"},{"Id":"491334955","IsPullRequest":false,"CreatedAt":"2019-09-09T21:25:19","Actor":"wli3","Number":"3620","RawContent":null,"Title":"Decide which property for VC targets to set architecture","State":"open","Body":"should be RuntimeIdentifier with SelfContained to false need to verify. However, we have several places use Platform(win32 in C++) and platformtarget mismatch could cause trouble, still investigating\r\n\r\nwhen run \r\n`msbuild NETCoreCppCliTest.vcxproj /p:platformtarget=win32 /p:runtimeidentifier=win-x86`\r\n\r\nIt will fail with \r\n```\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(149,5): error NETSDK1032: The RuntimeIdentifier pla tform 'win-x86' and the PlatformTarget 'win32' must be compatible. [C:\\work\\NETCoreCppCliTest\\NETCoreCppCliTest\\NETCoreCppCliTest.vcxproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3620","RelatedDescription":"Open issue \"Decide which property for VC targets to set architecture\" (#3620)"},{"Id":"491333926","IsPullRequest":false,"CreatedAt":"2019-09-09T21:23:03","Actor":"wli3","Number":"3619","RawContent":null,"Title":"Test or block publish options like linker and single exe","State":"open","Body":"- /p:PublishTrimmed=true does not work\r\n- ⬇️UseComHost=true does not work(not critical scenario) Have better error message for EnableComHosting + C++/CLI project \r\n\r\nPR: https://github.com/dotnet/sdk/pull/3618","Url":"https://github.com/dotnet/sdk/issues/3619","RelatedDescription":"Open issue \"Test or block publish options like linker and single exe\" (#3619)"},{"Id":"491330677","IsPullRequest":false,"CreatedAt":"2019-09-09T21:15:29","Actor":"wli3","Number":"3617","RawContent":null,"Title":"Disable nuget restore (no need workaround of the empty asset.json)","State":"open","Body":"PR https://github.com/dotnet/sdk/pull/3601","Url":"https://github.com/dotnet/sdk/issues/3617","RelatedDescription":"Open issue \"Disable nuget restore (no need workaround of the empty asset.json)\" (#3617)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1169655923788242945","CreatedAt":"2019-09-05T16:57:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":29,"FavoriteCount":5,"RawContent":null},{"Id":"1169325641541357568","CreatedAt":"2019-09-04T19:05:32+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 9 https://t.co/eOTg9Nc4Su","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":424,"FavoriteCount":219,"RawContent":null},{"Id":"1169325512033878016","CreatedAt":"2019-09-04T19:05:01+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 9 https://t.co/esDON00GK9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":154,"FavoriteCount":85,"RawContent":null},{"Id":"1169016977245032449","CreatedAt":"2019-09-03T22:39:01+00:00","UserScreenname":"dotnet","Text":"Do you care about performance or low-level stuff like SIMD and popcnt? Then this post is for you. https://t.co/rIpKfNwSeu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1168996825828855810","CreatedAt":"2019-09-03T21:18:56+00:00","UserScreenname":"dotnet","Text":".@BethMassi get's us revved up and raring to go in the latest .NET Blog post that gives us a #dotNETConf conference… https://t.co/78ndo1xgQJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":11352,"FavoriteCount":720,"RawContent":null},{"Id":"1168980895031812096","CreatedAt":"2019-09-03T20:15:38+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is coming to a town near you...\n\nWe're not only streaming live, but we're partnering with organizers ar… https://t.co/iON1XQF7Oo","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":8320,"FavoriteCount":694,"RawContent":null},{"Id":"1167169777414168576","CreatedAt":"2019-08-29T20:18:54+00:00","UserScreenname":"dotnet","Text":".NET Conference 2019\nDiscover The World Of .NET\nSeptember 23-25\nhttps://t.co/FkW2WpZcMn https://t.co/6bQPcWJFdj","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":21428,"FavoriteCount":1518,"RawContent":null}]}},"RunOn":"2019-09-15T05:30:39.9952776Z","RunDurationInMilliseconds":15017}